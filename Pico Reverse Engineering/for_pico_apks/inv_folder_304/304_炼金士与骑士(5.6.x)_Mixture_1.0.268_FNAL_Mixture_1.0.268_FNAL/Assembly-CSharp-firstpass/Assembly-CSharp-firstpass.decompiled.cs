using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Xml;
using DG.Tweening.Core;
using DG.Tweening.Plugins.Core.PathCore;
using DG.Tweening.Plugins.Options;
using DynamicShadowProjector.LWRP;
using Fluxy;
using Il2CppDummyDll;
using MagicLightProbes;
using PDollarGestureRecognizer;
using ProjectorForLWRP;
using ProjectorForSRP;
using RGBSchemes;
using RootMotion.FinalIK;
using StylizedWater;
using Unity.XR.PXR;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.Audio;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.Playables;
using UnityEngine.Rendering;
using UnityEngine.Rendering.Universal;
using UnityEngine.Scripting;
using UnityEngine.Serialization;
using UnityEngine.Timeline;
using UnityEngine.UI;
using UnityEngine.UI.Extensions.EasingCore;
using UnityEngine.UI.Extensions.Tweens;
using UnityEngine.Video;
using UnityEngine.XR;
using XftWeapon;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
public class CableComponent : MonoBehaviour
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform endPoint;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Material cableMaterial;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float cableLength;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private int totalSegments;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float segmentsPerUnit;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int segments;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private float cableWidth;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private int verletIterations;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private int solverIterations;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private float stiffness;

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private LineTextureMode lineTextureMode;

	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Gradient gradient;

	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public LineRenderer line;

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private CableParticle[] points;

	[Token(Token = "0x6000001")]
	[Address(RVA = "0xF0BDF4", Offset = "0xF0BDF4", VA = "0xF0BDF4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000002")]
	[Address(RVA = "0xF0BE0C", Offset = "0xF0BE0C", VA = "0xF0BE0C")]
	private void InitCableParticles()
	{
	}

	[Token(Token = "0x6000003")]
	[Address(RVA = "0xF0C148", Offset = "0xF0C148", VA = "0xF0C148")]
	private void InitLineRenderer()
	{
	}

	[Token(Token = "0x6000004")]
	[Address(RVA = "0xF0C3D8", Offset = "0xF0C3D8", VA = "0xF0C3D8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000005")]
	[Address(RVA = "0xF0C3DC", Offset = "0xF0C3DC", VA = "0xF0C3DC")]
	private void RenderCable()
	{
	}

	[Token(Token = "0x6000006")]
	[Address(RVA = "0xF0C460", Offset = "0xF0C460", VA = "0xF0C460")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000007")]
	[Address(RVA = "0xF0C4A8", Offset = "0xF0C4A8", VA = "0xF0C4A8")]
	private void VerletIntegrate()
	{
	}

	[Token(Token = "0x6000008")]
	[Address(RVA = "0xF0C554", Offset = "0xF0C554", VA = "0xF0C554")]
	private void SolveConstraints()
	{
	}

	[Token(Token = "0x6000009")]
	[Address(RVA = "0xF0C764", Offset = "0xF0C764", VA = "0xF0C764")]
	private void SolveDistanceConstraint()
	{
	}

	[Token(Token = "0x600000A")]
	[Address(RVA = "0xF0C8D8", Offset = "0xF0C8D8", VA = "0xF0C8D8")]
	private void SolveDistanceConstraint(CableParticle particleA, CableParticle particleB, float segmentLength)
	{
	}

	[Token(Token = "0x600000B")]
	[Address(RVA = "0xF0C7E8", Offset = "0xF0C7E8", VA = "0xF0C7E8")]
	private void SolveStiffnessConstraint()
	{
	}

	[Token(Token = "0x600000C")]
	[Address(RVA = "0xF0CAC4", Offset = "0xF0CAC4", VA = "0xF0CAC4")]
	private void SolveStiffnessConstraint(CableParticle cableParticle, float distance)
	{
	}

	[Token(Token = "0x600000D")]
	[Address(RVA = "0xF0CAC8", Offset = "0xF0CAC8", VA = "0xF0CAC8")]
	public CableComponent()
	{
	}
}
[Token(Token = "0x2000003")]
public class CableParticle
{
	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Vector3 _position;

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Vector3 _oldPosition;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform _boundTo;

	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Rigidbody _boundRigid;

	[Token(Token = "0x17000001")]
	public Vector3 Position
	{
		[Token(Token = "0x600000E")]
		[Address(RVA = "0xF0CB04", Offset = "0xF0CB04", VA = "0xF0CB04")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x600000F")]
		[Address(RVA = "0xF0CB10", Offset = "0xF0CB10", VA = "0xF0CB10")]
		set
		{
		}
	}

	[Token(Token = "0x17000002")]
	public Vector3 Velocity
	{
		[Token(Token = "0x6000010")]
		[Address(RVA = "0xF0CB1C", Offset = "0xF0CB1C", VA = "0xF0CB1C")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x6000011")]
	[Address(RVA = "0xF0C2F0", Offset = "0xF0C2F0", VA = "0xF0C2F0")]
	public CableParticle(Vector3 newPosition)
	{
	}

	[Token(Token = "0x6000012")]
	[Address(RVA = "0xF0C59C", Offset = "0xF0C59C", VA = "0xF0C59C")]
	public void UpdateVerlet(Vector3 gravityDisplacement)
	{
	}

	[Token(Token = "0x6000013")]
	[Address(RVA = "0xF0CB9C", Offset = "0xF0CB9C", VA = "0xF0CB9C")]
	public void UpdatePosition(Vector3 newPos)
	{
	}

	[Token(Token = "0x6000014")]
	[Address(RVA = "0xF0C330", Offset = "0xF0C330", VA = "0xF0C330")]
	public void Bind(Transform to)
	{
	}

	[Token(Token = "0x6000015")]
	[Address(RVA = "0xF0CBB8", Offset = "0xF0CBB8", VA = "0xF0CBB8")]
	public void UnBind()
	{
	}

	[Token(Token = "0x6000016")]
	[Address(RVA = "0xF0CA64", Offset = "0xF0CA64", VA = "0xF0CA64")]
	public bool IsFree()
	{
		return default(bool);
	}

	[Token(Token = "0x6000017")]
	[Address(RVA = "0xF0CB3C", Offset = "0xF0CB3C", VA = "0xF0CB3C")]
	public bool IsBound()
	{
		return default(bool);
	}
}
[Serializable]
[Token(Token = "0x2000004")]
public class ColorChangedEvent : UnityEvent<Color>
{
	[Token(Token = "0x6000018")]
	[Address(RVA = "0xF0CBE0", Offset = "0xF0CBE0", VA = "0xF0CBE0")]
	public ColorChangedEvent()
	{
	}
}
[Token(Token = "0x2000005")]
public class HSVChangedEvent : UnityEvent<float, float, float>
{
	[Token(Token = "0x6000019")]
	[Address(RVA = "0xF0CC28", Offset = "0xF0CC28", VA = "0xF0CC28")]
	public HSVChangedEvent()
	{
	}
}
[Token(Token = "0x2000006")]
public class TestCompression : MonoBehaviour
{
	[Token(Token = "0x600001A")]
	[Address(RVA = "0xF0CC70", Offset = "0xF0CC70", VA = "0xF0CC70")]
	private void Start()
	{
	}

	[Token(Token = "0x600001B")]
	[Address(RVA = "0xF0CC74", Offset = "0xF0CC74", VA = "0xF0CC74")]
	private void Update()
	{
	}

	[Token(Token = "0x600001C")]
	[Address(RVA = "0xF0CC78", Offset = "0xF0CC78", VA = "0xF0CC78")]
	public TestCompression()
	{
	}
}
[Serializable]
[Token(Token = "0x2000007")]
public class LightControlBehaviour : PlayableBehaviour
{
	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Color color;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float intensity;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float bounceIntensity;

	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float range;

	[Token(Token = "0x600001D")]
	[Address(RVA = "0xF0CC80", Offset = "0xF0CC80", VA = "0xF0CC80")]
	public LightControlBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x2000008")]
public class LightControlClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LightControlBehaviour template;

	[Token(Token = "0x17000003")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x600001E")]
		[Address(RVA = "0xF0CCA0", Offset = "0xF0CCA0", VA = "0xF0CCA0", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x600001F")]
	[Address(RVA = "0xF0CCA8", Offset = "0xF0CCA8", VA = "0xF0CCA8", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000020")]
	[Address(RVA = "0xF0CD50", Offset = "0xF0CD50", VA = "0xF0CD50")]
	public LightControlClip()
	{
	}
}
[Token(Token = "0x2000009")]
public class LightControlMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Color m_DefaultColor;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float m_DefaultIntensity;

	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float m_DefaultBounceIntensity;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float m_DefaultRange;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Light m_TrackBinding;

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool m_FirstFrameHappened;

	[Token(Token = "0x6000021")]
	[Address(RVA = "0xF0CDDC", Offset = "0xF0CDDC", VA = "0xF0CDDC", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x6000022")]
	[Address(RVA = "0xF0D1A4", Offset = "0xF0D1A4", VA = "0xF0D1A4", Slot = "16")]
	public override void OnPlayableDestroy(Playable playable)
	{
	}

	[Token(Token = "0x6000023")]
	[Address(RVA = "0xF0D270", Offset = "0xF0D270", VA = "0xF0D270")]
	public LightControlMixerBehaviour()
	{
	}
}
[Token(Token = "0x200000A")]
[TrackColor(0.9454092f, 0.9779412f, 0.3883002f)]
[TrackClipType(typeof(LightControlClip))]
[TrackBindingType(typeof(Light))]
public class LightControlTrack : TrackAsset
{
	[Token(Token = "0x6000024")]
	[Address(RVA = "0xF0D278", Offset = "0xF0D278", VA = "0xF0D278", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000025")]
	[Address(RVA = "0xF0D318", Offset = "0xF0D318", VA = "0xF0D318", Slot = "29")]
	public override void GatherProperties(PlayableDirector director, IPropertyCollector driver)
	{
	}

	[Token(Token = "0x6000026")]
	[Address(RVA = "0xF0D320", Offset = "0xF0D320", VA = "0xF0D320")]
	public LightControlTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x200000B")]
public class NavMeshAgentControlBehaviour : PlayableBehaviour
{
	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Transform destination;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool destinationSet;

	[Token(Token = "0x6000027")]
	[Address(RVA = "0xF0D378", Offset = "0xF0D378", VA = "0xF0D378", Slot = "15")]
	public override void OnPlayableCreate(Playable playable)
	{
	}

	[Token(Token = "0x6000028")]
	[Address(RVA = "0xF0D380", Offset = "0xF0D380", VA = "0xF0D380")]
	public NavMeshAgentControlBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x200000C")]
public class NavMeshAgentControlClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ExposedReference<Transform> destination;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public NavMeshAgentControlBehaviour template;

	[Token(Token = "0x17000004")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x6000029")]
		[Address(RVA = "0xF0D388", Offset = "0xF0D388", VA = "0xF0D388", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x600002A")]
	[Address(RVA = "0xF0D390", Offset = "0xF0D390", VA = "0xF0D390", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x600002B")]
	[Address(RVA = "0xF0D4D0", Offset = "0xF0D4D0", VA = "0xF0D4D0")]
	public NavMeshAgentControlClip()
	{
	}
}
[Token(Token = "0x200000D")]
public class NavMeshAgentControlMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x600002C")]
	[Address(RVA = "0xF0D544", Offset = "0xF0D544", VA = "0xF0D544", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x600002D")]
	[Address(RVA = "0xF0D7D8", Offset = "0xF0D7D8", VA = "0xF0D7D8")]
	public NavMeshAgentControlMixerBehaviour()
	{
	}
}
[Token(Token = "0x200000E")]
[TrackClipType(typeof(NavMeshAgentControlClip))]
[TrackBindingType(typeof(NavMeshAgent))]
[TrackColor(0.855f, 0.8623f, 0.87f)]
public class NavMeshAgentControlTrack : TrackAsset
{
	[Token(Token = "0x600002E")]
	[Address(RVA = "0xF0D7E0", Offset = "0xF0D7E0", VA = "0xF0D7E0", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x600002F")]
	[Address(RVA = "0xF0D880", Offset = "0xF0D880", VA = "0xF0D880")]
	public NavMeshAgentControlTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x200000F")]
public class ScreenFaderBehaviour : PlayableBehaviour
{
	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Color color;

	[Token(Token = "0x6000030")]
	[Address(RVA = "0xF0D8D8", Offset = "0xF0D8D8", VA = "0xF0D8D8")]
	public ScreenFaderBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x2000010")]
public class ScreenFaderClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ScreenFaderBehaviour template;

	[Token(Token = "0x17000005")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x6000031")]
		[Address(RVA = "0xF0D8EC", Offset = "0xF0D8EC", VA = "0xF0D8EC", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x6000032")]
	[Address(RVA = "0xF0D8F4", Offset = "0xF0D8F4", VA = "0xF0D8F4", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000033")]
	[Address(RVA = "0xF0D99C", Offset = "0xF0D99C", VA = "0xF0D99C")]
	public ScreenFaderClip()
	{
	}
}
[Token(Token = "0x2000011")]
public class ScreenFaderMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Color m_DefaultColor;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Image m_TrackBinding;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool m_FirstFrameHappened;

	[Token(Token = "0x6000034")]
	[Address(RVA = "0xF0DA1C", Offset = "0xF0DA1C", VA = "0xF0DA1C", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x6000035")]
	[Address(RVA = "0xF0DD5C", Offset = "0xF0DD5C", VA = "0xF0DD5C", Slot = "16")]
	public override void OnPlayableDestroy(Playable playable)
	{
	}

	[Token(Token = "0x6000036")]
	[Address(RVA = "0xF0DDF4", Offset = "0xF0DDF4", VA = "0xF0DDF4")]
	public ScreenFaderMixerBehaviour()
	{
	}
}
[Token(Token = "0x2000012")]
[TrackBindingType(typeof(Image))]
[TrackColor(0.875f, 0.5944853f, 0.1737132f)]
[TrackClipType(typeof(ScreenFaderClip))]
public class ScreenFaderTrack : TrackAsset
{
	[Token(Token = "0x6000037")]
	[Address(RVA = "0xF0DDFC", Offset = "0xF0DDFC", VA = "0xF0DDFC", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0xF0DE9C", Offset = "0xF0DE9C", VA = "0xF0DE9C", Slot = "29")]
	public override void GatherProperties(PlayableDirector director, IPropertyCollector driver)
	{
	}

	[Token(Token = "0x6000039")]
	[Address(RVA = "0xF0DEA4", Offset = "0xF0DEA4", VA = "0xF0DEA4")]
	public ScreenFaderTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x2000013")]
public class TextSwitcherBehaviour : PlayableBehaviour
{
	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Color color;

	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int fontSize;

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string text;

	[Token(Token = "0x600003A")]
	[Address(RVA = "0xF0DEFC", Offset = "0xF0DEFC", VA = "0xF0DEFC")]
	public TextSwitcherBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x2000014")]
public class TextSwitcherClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextSwitcherBehaviour template;

	[Token(Token = "0x17000006")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x600003B")]
		[Address(RVA = "0xF0DF14", Offset = "0xF0DF14", VA = "0xF0DF14", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x600003C")]
	[Address(RVA = "0xF0DF1C", Offset = "0xF0DF1C", VA = "0xF0DF1C", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x600003D")]
	[Address(RVA = "0xF0DFC4", Offset = "0xF0DFC4", VA = "0xF0DFC4")]
	public TextSwitcherClip()
	{
	}
}
[Token(Token = "0x2000015")]
public class TextSwitcherMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Color m_DefaultColor;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int m_DefaultFontSize;

	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string m_DefaultText;

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Text m_TrackBinding;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool m_FirstFrameHappened;

	[Token(Token = "0x600003E")]
	[Address(RVA = "0xF0E048", Offset = "0xF0E048", VA = "0xF0E048", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x600003F")]
	[Address(RVA = "0xF0E5A4", Offset = "0xF0E5A4", VA = "0xF0E5A4", Slot = "16")]
	public override void OnPlayableDestroy(Playable playable)
	{
	}

	[Token(Token = "0x6000040")]
	[Address(RVA = "0xF0E66C", Offset = "0xF0E66C", VA = "0xF0E66C")]
	public TextSwitcherMixerBehaviour()
	{
	}
}
[Token(Token = "0x2000016")]
[TrackColor(0.1394896f, 0.4411765f, 0.3413077f)]
[TrackClipType(typeof(TextSwitcherClip))]
[TrackBindingType(typeof(Text))]
public class TextSwitcherTrack : TrackAsset
{
	[Token(Token = "0x6000041")]
	[Address(RVA = "0xF0E674", Offset = "0xF0E674", VA = "0xF0E674", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000042")]
	[Address(RVA = "0xF0E714", Offset = "0xF0E714", VA = "0xF0E714", Slot = "29")]
	public override void GatherProperties(PlayableDirector director, IPropertyCollector driver)
	{
	}

	[Token(Token = "0x6000043")]
	[Address(RVA = "0xF0E71C", Offset = "0xF0E71C", VA = "0xF0E71C")]
	public TextSwitcherTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x2000017")]
public class TimeDilationBehaviour : PlayableBehaviour
{
	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float timeScale;

	[Token(Token = "0x6000044")]
	[Address(RVA = "0xF0E774", Offset = "0xF0E774", VA = "0xF0E774")]
	public TimeDilationBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x2000018")]
public class TimeDilationClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TimeDilationBehaviour template;

	[Token(Token = "0x17000007")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x6000045")]
		[Address(RVA = "0xF0E784", Offset = "0xF0E784", VA = "0xF0E784", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0xF0E78C", Offset = "0xF0E78C", VA = "0xF0E78C", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0xF0E834", Offset = "0xF0E834", VA = "0xF0E834")]
	public TimeDilationClip()
	{
	}
}
[Token(Token = "0x2000019")]
public class TimeDilationMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private readonly float defaultTimeScale;

	[Token(Token = "0x6000048")]
	[Address(RVA = "0xF0E8B0", Offset = "0xF0E8B0", VA = "0xF0E8B0", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x6000049")]
	[Address(RVA = "0xF0EAA8", Offset = "0xF0EAA8", VA = "0xF0EAA8", Slot = "18")]
	public override void OnBehaviourPause(Playable playable, FrameData info)
	{
	}

	[Token(Token = "0x600004A")]
	[Address(RVA = "0xF0EAB4", Offset = "0xF0EAB4", VA = "0xF0EAB4", Slot = "14")]
	public override void OnGraphStop(Playable playable)
	{
	}

	[Token(Token = "0x600004B")]
	[Address(RVA = "0xF0EAC0", Offset = "0xF0EAC0", VA = "0xF0EAC0", Slot = "16")]
	public override void OnPlayableDestroy(Playable playable)
	{
	}

	[Token(Token = "0x600004C")]
	[Address(RVA = "0xF0EACC", Offset = "0xF0EACC", VA = "0xF0EACC")]
	public TimeDilationMixerBehaviour()
	{
	}
}
[Token(Token = "0x200001A")]
[TrackColor(0.855f, 0.8623f, 0.87f)]
[TrackClipType(typeof(TimeDilationClip))]
public class TimeDilationTrack : TrackAsset
{
	[Token(Token = "0x600004D")]
	[Address(RVA = "0xF0EADC", Offset = "0xF0EADC", VA = "0xF0EADC", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0xF0EB7C", Offset = "0xF0EB7C", VA = "0xF0EB7C")]
	public TimeDilationTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x200001B")]
public class TransformTweenBehaviour : PlayableBehaviour
{
	[Token(Token = "0x200001C")]
	public enum TweenType
	{
		[Token(Token = "0x4000040")]
		Linear,
		[Token(Token = "0x4000041")]
		Deceleration,
		[Token(Token = "0x4000042")]
		Harmonic,
		[Token(Token = "0x4000043")]
		Custom
	}

	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Transform startLocation;

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform endLocation;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool tweenPosition;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool tweenRotation;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public TweenType tweenType;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationCurve customCurve;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 startingPosition;

	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Quaternion startingRotation;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private AnimationCurve m_LinearCurve;

	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private AnimationCurve m_DecelerationCurve;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private AnimationCurve m_HarmonicCurve;

	[Token(Token = "0x400003E")]
	private const float k_RightAngleInRads = (float)Math.PI / 2f;

	[Token(Token = "0x600004F")]
	[Address(RVA = "0xF0EBD4", Offset = "0xF0EBD4", VA = "0xF0EBD4", Slot = "19")]
	public override void PrepareFrame(Playable playable, FrameData info)
	{
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0xF0EC6C", Offset = "0xF0EC6C", VA = "0xF0EC6C")]
	public float EvaluateCurrentCurve(float time)
	{
		return default(float);
	}

	[Token(Token = "0x6000051")]
	[Address(RVA = "0xF0ED60", Offset = "0xF0ED60", VA = "0xF0ED60")]
	private bool IsCustomCurveNormalised()
	{
		return default(bool);
	}

	[Token(Token = "0x6000052")]
	[Address(RVA = "0xF0F004", Offset = "0xF0F004", VA = "0xF0F004")]
	public TransformTweenBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x200001D")]
public class TransformTweenClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TransformTweenBehaviour template;

	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ExposedReference<Transform> startLocation;

	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ExposedReference<Transform> endLocation;

	[Token(Token = "0x17000008")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x6000053")]
		[Address(RVA = "0xF0F218", Offset = "0xF0F218", VA = "0xF0F218", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x6000054")]
	[Address(RVA = "0xF0F220", Offset = "0xF0F220", VA = "0xF0F220", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0xF0F390", Offset = "0xF0F390", VA = "0xF0F390")]
	public TransformTweenClip()
	{
	}
}
[Token(Token = "0x200001E")]
public class TransformTweenMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool m_FirstFrameHappened;

	[Token(Token = "0x6000056")]
	[Address(RVA = "0xF0F400", Offset = "0xF0F400", VA = "0xF0F400", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0xF0FAD0", Offset = "0xF0FAD0", VA = "0xF0FAD0", Slot = "16")]
	public override void OnPlayableDestroy(Playable playable)
	{
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0xF0FABC", Offset = "0xF0FABC", VA = "0xF0FABC")]
	private static Quaternion AddQuaternions(Quaternion first, Quaternion second)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000059")]
	[Address(RVA = "0xF0FAA8", Offset = "0xF0FAA8", VA = "0xF0FAA8")]
	private static Quaternion ScaleQuaternion(Quaternion rotation, float multiplier)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x600005A")]
	[Address(RVA = "0xF0FAD8", Offset = "0xF0FAD8", VA = "0xF0FAD8")]
	private static float QuaternionMagnitude(Quaternion rotation)
	{
		return default(float);
	}

	[Token(Token = "0x600005B")]
	[Address(RVA = "0xF0F9A8", Offset = "0xF0F9A8", VA = "0xF0F9A8")]
	private static Quaternion NormalizeQuaternion(Quaternion rotation)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x600005C")]
	[Address(RVA = "0xF0FAFC", Offset = "0xF0FAFC", VA = "0xF0FAFC")]
	public TransformTweenMixerBehaviour()
	{
	}
}
[Token(Token = "0x200001F")]
[TrackColor(0.855f, 0.8623f, 0.87f)]
[TrackBindingType(typeof(Transform))]
[TrackClipType(typeof(TransformTweenClip))]
public class TransformTweenTrack : TrackAsset
{
	[Token(Token = "0x600005D")]
	[Address(RVA = "0xF0FB04", Offset = "0xF0FB04", VA = "0xF0FB04", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x600005E")]
	[Address(RVA = "0xF0FBA4", Offset = "0xF0FBA4", VA = "0xF0FBA4", Slot = "29")]
	public override void GatherProperties(PlayableDirector director, IPropertyCollector driver)
	{
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0xF0FBAC", Offset = "0xF0FBAC", VA = "0xF0FBAC")]
	public TransformTweenTrack()
	{
	}
}
[Token(Token = "0x2000020")]
[RequireComponent(typeof(FluxyTarget))]
public class OpacityFromVelocity : MonoBehaviour
{
	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve velocityToOpacity;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private FluxyTarget target;

	[Token(Token = "0x6000060")]
	[Address(RVA = "0xF0FC04", Offset = "0xF0FC04", VA = "0xF0FC04")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000061")]
	[Address(RVA = "0xF0FC5C", Offset = "0xF0FC5C", VA = "0xF0FC5C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000062")]
	[Address(RVA = "0xF0FD54", Offset = "0xF0FD54", VA = "0xF0FD54")]
	public OpacityFromVelocity()
	{
	}
}
[Token(Token = "0x2000021")]
[RequireComponent(typeof(FluxyTarget))]
public class RotateTarget : MonoBehaviour
{
	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speed;

	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private FluxyTarget target;

	[Token(Token = "0x6000063")]
	[Address(RVA = "0xF0FDC8", Offset = "0xF0FDC8", VA = "0xF0FDC8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000064")]
	[Address(RVA = "0xF0FE20", Offset = "0xF0FE20", VA = "0xF0FE20")]
	private void Update()
	{
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0xF0FE68", Offset = "0xF0FE68", VA = "0xF0FE68")]
	public RotateTarget()
	{
	}
}
[Token(Token = "0x2000022")]
[RequireComponent(typeof(FluxyTarget))]
public class SetRandomForce : MonoBehaviour
{
	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private FluxyTarget target;

	[Token(Token = "0x6000066")]
	[Address(RVA = "0xF0FE78", Offset = "0xF0FE78", VA = "0xF0FE78")]
	private void Start()
	{
	}

	[Token(Token = "0x6000067")]
	[Address(RVA = "0xF0FED0", Offset = "0xF0FED0", VA = "0xF0FED0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000068")]
	[Address(RVA = "0xF0FFC8", Offset = "0xF0FFC8", VA = "0xF0FFC8")]
	public SetRandomForce()
	{
	}
}
[Token(Token = "0x2000023")]
public class Wiggle : MonoBehaviour
{
	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 axis;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float amplitude;

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float speed;

	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float offset;

	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 initialPos;

	[Token(Token = "0x6000069")]
	[Address(RVA = "0xF0FFD0", Offset = "0xF0FFD0", VA = "0xF0FFD0")]
	private void Start()
	{
	}

	[Token(Token = "0x600006A")]
	[Address(RVA = "0xF10000", Offset = "0xF10000", VA = "0xF10000")]
	private void Update()
	{
	}

	[Token(Token = "0x600006B")]
	[Address(RVA = "0xF10144", Offset = "0xF10144", VA = "0xF10144")]
	public Wiggle()
	{
	}
}
[Token(Token = "0x2000024")]
public class CycleLasersScript : MonoBehaviour
{
	[Token(Token = "0x2000025")]
	[CompilerGenerated]
	private sealed class <CycleLasers>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400005A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400005B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400005C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CycleLasersScript <>4__this;

		[Token(Token = "0x400005D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <i>5__2;

		[Token(Token = "0x17000009")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000072")]
			[Address(RVA = "0xF105D0", Offset = "0xF105D0", VA = "0xF105D0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000074")]
			[Address(RVA = "0xF10618", Offset = "0xF10618", VA = "0xF10618", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600006F")]
		[Address(RVA = "0xF10240", Offset = "0xF10240", VA = "0xF10240")]
		[DebuggerHidden]
		public <CycleLasers>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6000070")]
		[Address(RVA = "0xF1035C", Offset = "0xF1035C", VA = "0xF1035C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000071")]
		[Address(RVA = "0xF10360", Offset = "0xF10360", VA = "0xF10360", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000073")]
		[Address(RVA = "0xF105D8", Offset = "0xF105D8", VA = "0xF105D8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject playerFirePoint;

	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<GameObject> targetPoints;

	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<GameObject> Lasers;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int count;

	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject newLaser;

	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private LaserScript laserScript;

	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private WaitForSeconds shortWait;

	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private WaitForSeconds longWait;

	[Token(Token = "0x600006C")]
	[Address(RVA = "0xF101AC", Offset = "0xF101AC", VA = "0xF101AC")]
	private void Start()
	{
	}

	[Token(Token = "0x600006D")]
	[Address(RVA = "0xF101CC", Offset = "0xF101CC", VA = "0xF101CC")]
	[IteratorStateMachine(typeof(<CycleLasers>d__9))]
	private IEnumerator CycleLasers()
	{
		return null;
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0xF10268", Offset = "0xF10268", VA = "0xF10268")]
	public CycleLasersScript()
	{
	}
}
[Token(Token = "0x2000026")]
public class FirstPersonControllerScript : MonoBehaviour
{
	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speed;

	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float jumpSpeed;

	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float gravity;

	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 moveDirection;

	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float yRotation;

	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float xRotation;

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float lookSensitivity;

	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float currentXRotation;

	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float currentYRotation;

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float yRotationV;

	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float xRotationV;

	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float lookSmoothnes;

	[Token(Token = "0x6000075")]
	[Address(RVA = "0xF10620", Offset = "0xF10620", VA = "0xF10620")]
	private void Start()
	{
	}

	[Token(Token = "0x6000076")]
	[Address(RVA = "0xF10640", Offset = "0xF10640", VA = "0xF10640")]
	private void Update()
	{
	}

	[Token(Token = "0x6000077")]
	[Address(RVA = "0xF108EC", Offset = "0xF108EC", VA = "0xF108EC")]
	public FirstPersonControllerScript()
	{
	}
}
[Token(Token = "0x2000027")]
public class LaserScript : MonoBehaviour
{
	[Token(Token = "0x2000028")]
	[CompilerGenerated]
	private sealed class <ShootLaserCoroutine>d__30 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LaserScript <>4__this;

		[Token(Token = "0x4000089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float duration;

		[Token(Token = "0x1700000B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000090")]
			[Address(RVA = "0xF125D4", Offset = "0xF125D4", VA = "0xF125D4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000092")]
			[Address(RVA = "0xF1261C", Offset = "0xF1261C", VA = "0xF1261C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600008D")]
		[Address(RVA = "0xF113C0", Offset = "0xF113C0", VA = "0xF113C0")]
		[DebuggerHidden]
		public <ShootLaserCoroutine>d__30(int <>1__state)
		{
		}

		[Token(Token = "0x600008E")]
		[Address(RVA = "0xF1248C", Offset = "0xF1248C", VA = "0xF1248C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600008F")]
		[Address(RVA = "0xF12490", Offset = "0xF12490", VA = "0xF12490", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000091")]
		[Address(RVA = "0xF125DC", Offset = "0xF125DC", VA = "0xF125DC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000029")]
	[CompilerGenerated]
	private sealed class <UpdateLaserCoroutine>d__34 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400008A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400008B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400008C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LaserScript <>4__this;

		[Token(Token = "0x1700000D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000096")]
			[Address(RVA = "0xF12690", Offset = "0xF12690", VA = "0xF12690", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000098")]
			[Address(RVA = "0xF126D8", Offset = "0xF126D8", VA = "0xF126D8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000093")]
		[Address(RVA = "0xF11E28", Offset = "0xF11E28", VA = "0xF11E28")]
		[DebuggerHidden]
		public <UpdateLaserCoroutine>d__34(int <>1__state)
		{
		}

		[Token(Token = "0x6000094")]
		[Address(RVA = "0xF12624", Offset = "0xF12624", VA = "0xF12624", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000095")]
		[Address(RVA = "0xF12628", Offset = "0xF12628", VA = "0xF12628", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000097")]
		[Address(RVA = "0xF12698", Offset = "0xF12698", VA = "0xF12698", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200002A")]
	[CompilerGenerated]
	private sealed class <GrowLaser>d__36 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400008D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400008E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400008F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LineRenderer lr;

		[Token(Token = "0x4000090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LaserScript <>4__this;

		[Token(Token = "0x4000091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float originalWidth;

		[Token(Token = "0x1700000F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600009C")]
			[Address(RVA = "0xF12890", Offset = "0xF12890", VA = "0xF12890", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000010")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600009E")]
			[Address(RVA = "0xF128D8", Offset = "0xF128D8", VA = "0xF128D8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000099")]
		[Address(RVA = "0xF11EF0", Offset = "0xF11EF0", VA = "0xF11EF0")]
		[DebuggerHidden]
		public <GrowLaser>d__36(int <>1__state)
		{
		}

		[Token(Token = "0x600009A")]
		[Address(RVA = "0xF126E0", Offset = "0xF126E0", VA = "0xF126E0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600009B")]
		[Address(RVA = "0xF126E4", Offset = "0xF126E4", VA = "0xF126E4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600009D")]
		[Address(RVA = "0xF12898", Offset = "0xF12898", VA = "0xF12898", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200002B")]
	[CompilerGenerated]
	private sealed class <DisableLaser>d__38 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LaserScript <>4__this;

		[Token(Token = "0x4000095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float timer;

		[Token(Token = "0x17000011")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000A2")]
			[Address(RVA = "0xF12AAC", Offset = "0xF12AAC", VA = "0xF12AAC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000012")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000A4")]
			[Address(RVA = "0xF12AF4", Offset = "0xF12AF4", VA = "0xF12AF4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600009F")]
		[Address(RVA = "0xF11FBC", Offset = "0xF11FBC", VA = "0xF11FBC")]
		[DebuggerHidden]
		public <DisableLaser>d__38(int <>1__state)
		{
		}

		[Token(Token = "0x60000A0")]
		[Address(RVA = "0xF128E0", Offset = "0xF128E0", VA = "0xF128E0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000A1")]
		[Address(RVA = "0xF128E4", Offset = "0xF128E4", VA = "0xF128E4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000A3")]
		[Address(RVA = "0xF12AB4", Offset = "0xF12AB4", VA = "0xF12AB4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200002C")]
	[CompilerGenerated]
	private sealed class <ShrinkLaser>d__40 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LineRenderer lr;

		[Token(Token = "0x4000099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LaserScript <>4__this;

		[Token(Token = "0x17000013")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000A8")]
			[Address(RVA = "0xF12BA0", Offset = "0xF12BA0", VA = "0xF12BA0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000014")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000AA")]
			[Address(RVA = "0xF12BE8", Offset = "0xF12BE8", VA = "0xF12BE8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000A5")]
		[Address(RVA = "0xF12110", Offset = "0xF12110", VA = "0xF12110")]
		[DebuggerHidden]
		public <ShrinkLaser>d__40(int <>1__state)
		{
		}

		[Token(Token = "0x60000A6")]
		[Address(RVA = "0xF12AFC", Offset = "0xF12AFC", VA = "0xF12AFC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000A7")]
		[Address(RVA = "0xF12B00", Offset = "0xF12B00", VA = "0xF12B00", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000A9")]
		[Address(RVA = "0xF12BA8", Offset = "0xF12BA8", VA = "0xF12BA8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200002D")]
	[CompilerGenerated]
	private sealed class <HoldLaser>d__42 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400009A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400009B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400009C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LaserScript <>4__this;

		[Token(Token = "0x17000015")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000AE")]
			[Address(RVA = "0xF12C84", Offset = "0xF12C84", VA = "0xF12C84", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000016")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000B0")]
			[Address(RVA = "0xF12CCC", Offset = "0xF12CCC", VA = "0xF12CCC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000AB")]
		[Address(RVA = "0xF121CC", Offset = "0xF121CC", VA = "0xF121CC")]
		[DebuggerHidden]
		public <HoldLaser>d__42(int <>1__state)
		{
		}

		[Token(Token = "0x60000AC")]
		[Address(RVA = "0xF12BF0", Offset = "0xF12BF0", VA = "0xF12BF0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000AD")]
		[Address(RVA = "0xF12BF4", Offset = "0xF12BF4", VA = "0xF12BF4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000AF")]
		[Address(RVA = "0xF12C8C", Offset = "0xF12C8C", VA = "0xF12C8C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200002E")]
	[CompilerGenerated]
	private sealed class <EmitTrail>d__43 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400009D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400009E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400009F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LaserScript <>4__this;

		[Token(Token = "0x40000A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 hitPosition;

		[Token(Token = "0x17000017")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000B4")]
			[Address(RVA = "0xF12E44", Offset = "0xF12E44", VA = "0xF12E44", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000018")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000B6")]
			[Address(RVA = "0xF12E8C", Offset = "0xF12E8C", VA = "0xF12E8C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000B1")]
		[Address(RVA = "0xF121F4", Offset = "0xF121F4", VA = "0xF121F4")]
		[DebuggerHidden]
		public <EmitTrail>d__43(int <>1__state)
		{
		}

		[Token(Token = "0x60000B2")]
		[Address(RVA = "0xF12CD4", Offset = "0xF12CD4", VA = "0xF12CD4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000B3")]
		[Address(RVA = "0xF12CD8", Offset = "0xF12CD8", VA = "0xF12CD8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000B5")]
		[Address(RVA = "0xF12E4C", Offset = "0xF12E4C", VA = "0xF12E4C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<LineRenderer> lineRenderers;

	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject firePoint;

	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject endPoint;

	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float maximumLenght;

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float growWidth;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float growSpeed;

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float shrinkSpeed;

	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float disableDelay;

	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject endVFX;

	[Token(Token = "0x4000073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject psVFX;

	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject trailVFX;

	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float trailInterval;

	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool trail;

	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	public bool playOnAwake;

	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Camera cam;

	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Ray rayMouse;

	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private List<ParticleSystem> psChilds;

	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private List<ParticleSystem> psEndVFX;

	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private List<float> lrWidth;

	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Vector3 mouseCurrentPosition;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private ParticleSystemController psCtrl;

	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private ParticleSystem psTrailVFX;

	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private bool emittingTrail;

	[Token(Token = "0x4000081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
	private bool isStarting;

	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC2")]
	private bool isOver;

	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private WaitForSeconds growWait;

	[Token(Token = "0x4000084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private WaitForSeconds updateWait;

	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private ParticleSystem.EmitParams emitParams;

	[Token(Token = "0x6000078")]
	[Address(RVA = "0xF10974", Offset = "0xF10974", VA = "0xF10974")]
	private void Start()
	{
	}

	[Token(Token = "0x6000079")]
	[Address(RVA = "0xF105B0", Offset = "0xF105B0", VA = "0xF105B0")]
	public void ShootLaser(float duration)
	{
	}

	[Token(Token = "0x600007A")]
	[Address(RVA = "0xF1133C", Offset = "0xF1133C", VA = "0xF1133C")]
	[IteratorStateMachine(typeof(<ShootLaserCoroutine>d__30))]
	private IEnumerator ShootLaserCoroutine(float duration)
	{
		return null;
	}

	[Token(Token = "0x600007B")]
	[Address(RVA = "0xF111D0", Offset = "0xF111D0", VA = "0xF111D0")]
	[ContextMenu("Enable Laser")]
	public void EnableLaser()
	{
	}

	[Token(Token = "0x600007C")]
	[Address(RVA = "0xF11698", Offset = "0xF11698", VA = "0xF11698")]
	public void UpdateLaser()
	{
	}

	[Token(Token = "0x600007D")]
	[Address(RVA = "0xF11D94", Offset = "0xF11D94", VA = "0xF11D94")]
	private void UpdateLaserContinuously()
	{
	}

	[Token(Token = "0x600007E")]
	[Address(RVA = "0xF11DB4", Offset = "0xF11DB4", VA = "0xF11DB4")]
	[IteratorStateMachine(typeof(<UpdateLaserCoroutine>d__34))]
	private IEnumerator UpdateLaserCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600007F")]
	[Address(RVA = "0xF114D4", Offset = "0xF114D4", VA = "0xF114D4")]
	private void GrowLaserCaller()
	{
	}

	[Token(Token = "0x6000080")]
	[Address(RVA = "0xF11E50", Offset = "0xF11E50", VA = "0xF11E50")]
	[IteratorStateMachine(typeof(<GrowLaser>d__36))]
	private IEnumerator GrowLaser(LineRenderer lr, float originalWidth)
	{
		return null;
	}

	[Token(Token = "0x6000081")]
	[Address(RVA = "0xF11F18", Offset = "0xF11F18", VA = "0xF11F18")]
	public void DisableLaserCaller(float timer)
	{
	}

	[Token(Token = "0x6000082")]
	[Address(RVA = "0xF11F38", Offset = "0xF11F38", VA = "0xF11F38")]
	[IteratorStateMachine(typeof(<DisableLaser>d__38))]
	private IEnumerator DisableLaser(float timer)
	{
		return null;
	}

	[Token(Token = "0x6000083")]
	[Address(RVA = "0xF11FE4", Offset = "0xF11FE4", VA = "0xF11FE4")]
	private void ShrinkLaserCaller()
	{
	}

	[Token(Token = "0x6000084")]
	[Address(RVA = "0xF12080", Offset = "0xF12080", VA = "0xF12080")]
	[IteratorStateMachine(typeof(<ShrinkLaser>d__40))]
	private IEnumerator ShrinkLaser(LineRenderer lr)
	{
		return null;
	}

	[Token(Token = "0x6000085")]
	[Address(RVA = "0xF12138", Offset = "0xF12138", VA = "0xF12138")]
	private void HoldLaserCaller()
	{
	}

	[Token(Token = "0x6000086")]
	[Address(RVA = "0xF12158", Offset = "0xF12158", VA = "0xF12158")]
	[IteratorStateMachine(typeof(<HoldLaser>d__42))]
	private IEnumerator HoldLaser()
	{
		return null;
	}

	[Token(Token = "0x6000087")]
	[Address(RVA = "0xF11CFC", Offset = "0xF11CFC", VA = "0xF11CFC")]
	[IteratorStateMachine(typeof(<EmitTrail>d__43))]
	private IEnumerator EmitTrail(Vector3 hitPosition)
	{
		return null;
	}

	[Token(Token = "0x6000088")]
	[Address(RVA = "0xF115C4", Offset = "0xF115C4", VA = "0xF115C4")]
	private void RotateToMouse(GameObject obj, Vector3 destination)
	{
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0xF10EE8", Offset = "0xF10EE8", VA = "0xF10EE8")]
	private void AddPSToList(GameObject obj, List<ParticleSystem> listToAdd, bool addFromObj)
	{
	}

	[Token(Token = "0x600008A")]
	[Address(RVA = "0xF113E8", Offset = "0xF113E8", VA = "0xF113E8")]
	private void EnablePS(List<ParticleSystem> psList)
	{
	}

	[Token(Token = "0x600008B")]
	[Address(RVA = "0xF1221C", Offset = "0xF1221C", VA = "0xF1221C")]
	private void DisablePS(List<ParticleSystem> psList)
	{
	}

	[Token(Token = "0x600008C")]
	[Address(RVA = "0xF12308", Offset = "0xF12308", VA = "0xF12308")]
	public LaserScript()
	{
	}
}
[Token(Token = "0x200002F")]
[ExecuteInEditMode]
public class ParticleSystemController : MonoBehaviour
{
	[Token(Token = "0x2000030")]
	private class ParticleSystemOriginalSettings
	{
		[Token(Token = "0x40000AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ParticleSystem.MinMaxGradient startColor;

		[Token(Token = "0x40000AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ParticleSystem.MinMaxCurve startSize;

		[Token(Token = "0x40000AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public ParticleSystem.MinMaxCurve startSpeed;

		[Token(Token = "0x40000AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public ParticleSystem.MinMaxCurve startDelay;

		[Token(Token = "0x40000B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public ParticleSystem.MinMaxCurve startLifetime;

		[Token(Token = "0x40000B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Vector3 localPosition;

		[Token(Token = "0x60000BD")]
		[Address(RVA = "0xF13D04", Offset = "0xF13D04", VA = "0xF13D04")]
		public ParticleSystemOriginalSettings()
		{
		}
	}

	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float size;

	[Token(Token = "0x40000A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float speed;

	[Token(Token = "0x40000A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool loop;

	[Token(Token = "0x40000A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool lights;

	[Token(Token = "0x40000A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool trails;

	[Token(Token = "0x40000A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
	public bool changeColor;

	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Color newMaxColor;

	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Color newMinColor;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public List<GameObject> ParticleSystems;

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public List<bool> ActiveParticleSystems;

	[Token(Token = "0x40000AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<ParticleSystemOriginalSettings> psOriginalSettingsList;

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0xF12E94", Offset = "0xF12E94", VA = "0xF12E94")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0xF13D00", Offset = "0xF13D00", VA = "0xF13D00")]
	private void Start()
	{
	}

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0xF12E98", Offset = "0xF12E98", VA = "0xF12E98")]
	public void UpdateParticleSystem()
	{
	}

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0xF13D0C", Offset = "0xF13D0C", VA = "0xF13D0C")]
	public Color ChangeHUE(Color oldColor, Color newColor)
	{
		return default(Color);
	}

	[Token(Token = "0x60000BB")]
	[Address(RVA = "0xF10D64", Offset = "0xF10D64", VA = "0xF10D64")]
	public Gradient ChangeGradientColor(Gradient oldGradient, Color newColor)
	{
		return null;
	}

	[Token(Token = "0x60000BC")]
	[Address(RVA = "0xF13DA4", Offset = "0xF13DA4", VA = "0xF13DA4")]
	public ParticleSystemController()
	{
	}
}
[Token(Token = "0x2000031")]
public class SwitchLasersScript : MonoBehaviour
{
	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject fixedCamera;

	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject fpsCamera;

	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<GameObject> Lasers;

	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int count;

	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject activeLaser;

	[Token(Token = "0x40000B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private LaserScript laserScript;

	[Token(Token = "0x60000BE")]
	[Address(RVA = "0xF13E3C", Offset = "0xF13E3C", VA = "0xF13E3C")]
	private void Start()
	{
	}

	[Token(Token = "0x60000BF")]
	[Address(RVA = "0xF13F38", Offset = "0xF13F38", VA = "0xF13F38")]
	private void Update()
	{
	}

	[Token(Token = "0x60000C0")]
	[Address(RVA = "0xF14090", Offset = "0xF14090", VA = "0xF14090")]
	public void Next()
	{
	}

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0xF1420C", Offset = "0xF1420C", VA = "0xF1420C")]
	public void Previous()
	{
	}

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0xF14384", Offset = "0xF14384", VA = "0xF14384")]
	public void ChangeCamera()
	{
	}

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0xF1442C", Offset = "0xF1442C", VA = "0xF1442C")]
	public void RefreshLaser()
	{
	}

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0xF14920", Offset = "0xF14920", VA = "0xF14920")]
	public SwitchLasersScript()
	{
	}
}
[Token(Token = "0x2000032")]
public static class TransformDeepChildExtension
{
	[Token(Token = "0x60000C5")]
	[Address(RVA = "0xF145AC", Offset = "0xF145AC", VA = "0xF145AC")]
	public static Transform FindDeepChild(this Transform aParent, string aName)
	{
		return null;
	}
}
[Token(Token = "0x2000033")]
[RequireComponent(typeof(ParticleSystem))]
public class CFX_AutoStopLoopedEffect : MonoBehaviour
{
	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float effectDuration;

	[Token(Token = "0x40000B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float d;

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0xF149A8", Offset = "0xF149A8", VA = "0xF149A8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0xF149B4", Offset = "0xF149B4", VA = "0xF149B4")]
	private void Update()
	{
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0xF14ACC", Offset = "0xF14ACC", VA = "0xF14ACC")]
	public CFX_AutoStopLoopedEffect()
	{
	}
}
[Token(Token = "0x2000034")]
public class CFX_Demo_New : MonoBehaviour
{
	[Token(Token = "0x2000036")]
	[CompilerGenerated]
	private sealed class <CheckForDeletedParticles>d__25 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CFX_Demo_New <>4__this;

		[Token(Token = "0x17000019")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000DD")]
			[Address(RVA = "0xF15AC4", Offset = "0xF15AC4", VA = "0xF15AC4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000DF")]
			[Address(RVA = "0xF15B0C", Offset = "0xF15B0C", VA = "0xF15B0C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000DA")]
		[Address(RVA = "0xF157D0", Offset = "0xF157D0", VA = "0xF157D0")]
		[DebuggerHidden]
		public <CheckForDeletedParticles>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x60000DB")]
		[Address(RVA = "0xF15948", Offset = "0xF15948", VA = "0xF15948", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000DC")]
		[Address(RVA = "0xF1594C", Offset = "0xF1594C", VA = "0xF1594C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000DE")]
		[Address(RVA = "0xF15ACC", Offset = "0xF15ACC", VA = "0xF15ACC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Renderer groundRenderer;

	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Collider groundCollider;

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Space]
	[Space]
	public Image slowMoBtn;

	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text slowMoLabel;

	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Image camRotBtn;

	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Text camRotLabel;

	[Token(Token = "0x40000C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Image groundBtn;

	[Token(Token = "0x40000C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Text groundLabel;

	[Token(Token = "0x40000C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Space]
	public Text EffectLabel;

	[Token(Token = "0x40000C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Text EffectIndexLabel;

	[Token(Token = "0x40000C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private GameObject[] ParticleExamples;

	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int exampleIndex;

	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private bool slowMo;

	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Vector3 defaultCamPosition;

	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private Quaternion defaultCamRotation;

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private List<GameObject> onScreenParticles;

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0xF14ADC", Offset = "0xF14ADC", VA = "0xF14ADC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0xF14EC0", Offset = "0xF14EC0", VA = "0xF14EC0")]
	private void Update()
	{
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0xF15524", Offset = "0xF15524", VA = "0xF15524")]
	public void OnToggleGround()
	{
	}

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0xF155E4", Offset = "0xF155E4", VA = "0xF155E4")]
	public void OnToggleCamera()
	{
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0xF156B4", Offset = "0xF156B4", VA = "0xF156B4")]
	public void OnToggleSlowMo()
	{
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0xF15754", Offset = "0xF15754", VA = "0xF15754")]
	public void OnPreviousEffect()
	{
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0xF15758", Offset = "0xF15758", VA = "0xF15758")]
	public void OnNextEffect()
	{
	}

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0xF14D94", Offset = "0xF14D94", VA = "0xF14D94")]
	private void UpdateUI()
	{
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0xF152FC", Offset = "0xF152FC", VA = "0xF152FC")]
	private GameObject spawnParticle()
	{
		return null;
	}

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0xF1575C", Offset = "0xF1575C", VA = "0xF1575C")]
	[IteratorStateMachine(typeof(<CheckForDeletedParticles>d__25))]
	private IEnumerator CheckForDeletedParticles()
	{
		return null;
	}

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0xF15164", Offset = "0xF15164", VA = "0xF15164")]
	private void prevParticle()
	{
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0xF15198", Offset = "0xF15198", VA = "0xF15198")]
	private void nextParticle()
	{
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0xF151CC", Offset = "0xF151CC", VA = "0xF151CC")]
	private void destroyParticles()
	{
	}

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0xF157F8", Offset = "0xF157F8", VA = "0xF157F8")]
	public CFX_Demo_New()
	{
	}
}
[Token(Token = "0x2000037")]
public class CFX_Demo_RandomDir : MonoBehaviour
{
	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 min;

	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 max;

	[Token(Token = "0x60000E0")]
	[Address(RVA = "0xF15B14", Offset = "0xF15B14", VA = "0xF15B14")]
	private void Start()
	{
	}

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0xF15B9C", Offset = "0xF15B9C", VA = "0xF15B9C")]
	public CFX_Demo_RandomDir()
	{
	}
}
[Token(Token = "0x2000038")]
public class CFX_Demo_RandomDirectionTranslate : MonoBehaviour
{
	[Token(Token = "0x40000D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speed;

	[Token(Token = "0x40000D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector3 baseDir;

	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3 axis;

	[Token(Token = "0x40000D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool gravity;

	[Token(Token = "0x40000D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 dir;

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0xF15BB4", Offset = "0xF15BB4", VA = "0xF15BB4")]
	private void Start()
	{
	}

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0xF15CF8", Offset = "0xF15CF8", VA = "0xF15CF8")]
	private void Update()
	{
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0xF15DD4", Offset = "0xF15DD4", VA = "0xF15DD4")]
	public CFX_Demo_RandomDirectionTranslate()
	{
	}
}
[Token(Token = "0x2000039")]
public class CFX_Demo_RotateCamera : MonoBehaviour
{
	[Token(Token = "0x40000D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool rotating;

	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speed;

	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform rotationCenter;

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0xF15E70", Offset = "0xF15E70", VA = "0xF15E70")]
	private void Update()
	{
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0xF15FAC", Offset = "0xF15FAC", VA = "0xF15FAC")]
	public CFX_Demo_RotateCamera()
	{
	}
}
[Token(Token = "0x200003A")]
public class CFX_Demo_Translate : MonoBehaviour
{
	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speed;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector3 rotation;

	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3 axis;

	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool gravity;

	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 dir;

	[Token(Token = "0x60000E8")]
	[Address(RVA = "0xF16008", Offset = "0xF16008", VA = "0xF16008")]
	private void Start()
	{
	}

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0xF160A8", Offset = "0xF160A8", VA = "0xF160A8")]
	private void Update()
	{
	}

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0xF16118", Offset = "0xF16118", VA = "0xF16118")]
	public CFX_Demo_Translate()
	{
	}
}
[Token(Token = "0x200003B")]
[RequireComponent(typeof(ParticleSystem))]
public class CFX_AutoDestructShuriken : MonoBehaviour
{
	[Token(Token = "0x200003C")]
	[CompilerGenerated]
	private sealed class <CheckIfAlive>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CFX_AutoDestructShuriken <>4__this;

		[Token(Token = "0x40000E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ParticleSystem <ps>5__2;

		[Token(Token = "0x1700001B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000F1")]
			[Address(RVA = "0xF16410", Offset = "0xF16410", VA = "0xF16410", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000F3")]
			[Address(RVA = "0xF16458", Offset = "0xF16458", VA = "0xF16458", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000EE")]
		[Address(RVA = "0xF16254", Offset = "0xF16254", VA = "0xF16254")]
		[DebuggerHidden]
		public <CheckIfAlive>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x60000EF")]
		[Address(RVA = "0xF16284", Offset = "0xF16284", VA = "0xF16284", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000F0")]
		[Address(RVA = "0xF16288", Offset = "0xF16288", VA = "0xF16288", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000F2")]
		[Address(RVA = "0xF16418", Offset = "0xF16418", VA = "0xF16418", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool OnlyDeactivate;

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0xF16194", Offset = "0xF16194", VA = "0xF16194")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0xF161E0", Offset = "0xF161E0", VA = "0xF161E0")]
	[IteratorStateMachine(typeof(<CheckIfAlive>d__2))]
	private IEnumerator CheckIfAlive()
	{
		return null;
	}

	[Token(Token = "0x60000ED")]
	[Address(RVA = "0xF1627C", Offset = "0xF1627C", VA = "0xF1627C")]
	public CFX_AutoDestructShuriken()
	{
	}
}
[Token(Token = "0x200003D")]
public class CFX_AutoRotate : MonoBehaviour
{
	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 rotation;

	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Space space;

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0xF16460", Offset = "0xF16460", VA = "0xF16460")]
	private void Update()
	{
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0xF164C8", Offset = "0xF164C8", VA = "0xF164C8")]
	public CFX_AutoRotate()
	{
	}
}
[Token(Token = "0x200003E")]
[RequireComponent(typeof(Light))]
public class CFX_LightFlicker : MonoBehaviour
{
	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool loop;

	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float smoothFactor;

	[Token(Token = "0x40000E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float addIntensity;

	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float minIntensity;

	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float maxIntensity;

	[Token(Token = "0x40000EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float baseIntensity;

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0xF164D8", Offset = "0xF164D8", VA = "0xF164D8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0xF16538", Offset = "0xF16538", VA = "0xF16538")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0xF1654C", Offset = "0xF1654C", VA = "0xF1654C")]
	private void Update()
	{
	}

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0xF165FC", Offset = "0xF165FC", VA = "0xF165FC")]
	public CFX_LightFlicker()
	{
	}
}
[Token(Token = "0x200003F")]
[RequireComponent(typeof(Light))]
public class CFX_LightIntensityFade : MonoBehaviour
{
	[Token(Token = "0x40000EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float duration;

	[Token(Token = "0x40000EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float delay;

	[Token(Token = "0x40000ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float finalIntensity;

	[Token(Token = "0x40000EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float baseIntensity;

	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool autodestruct;

	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float p_lifetime;

	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float p_delay;

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0xF1660C", Offset = "0xF1660C", VA = "0xF1660C")]
	private void Start()
	{
	}

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0xF1666C", Offset = "0xF1666C", VA = "0xF1666C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000FC")]
	[Address(RVA = "0xF166E8", Offset = "0xF166E8", VA = "0xF166E8")]
	private void Update()
	{
	}

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0xF1684C", Offset = "0xF1684C", VA = "0xF1684C")]
	public CFX_LightIntensityFade()
	{
	}
}
[Token(Token = "0x2000040")]
public class WFX_Demo : MonoBehaviour
{
	[Token(Token = "0x2000041")]
	[CompilerGenerated]
	private sealed class <RandomSpawnsCoroutine>d__30 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400010C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400010D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400010E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WFX_Demo <>4__this;

		[Token(Token = "0x1700001D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600010E")]
			[Address(RVA = "0xF18938", Offset = "0xF18938", VA = "0xF18938", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000110")]
			[Address(RVA = "0xF18980", Offset = "0xF18980", VA = "0xF18980", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600010B")]
		[Address(RVA = "0xF17AD4", Offset = "0xF17AD4", VA = "0xF17AD4")]
		[DebuggerHidden]
		public <RandomSpawnsCoroutine>d__30(int <>1__state)
		{
		}

		[Token(Token = "0x600010C")]
		[Address(RVA = "0xF18754", Offset = "0xF18754", VA = "0xF18754", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600010D")]
		[Address(RVA = "0xF18758", Offset = "0xF18758", VA = "0xF18758", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600010F")]
		[Address(RVA = "0xF18940", Offset = "0xF18940", VA = "0xF18940", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float cameraSpeed;

	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool orderedSpawns;

	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float step;

	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float range;

	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float order;

	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject walls;

	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject bulletholes;

	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject[] ParticleExamples;

	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int exampleIndex;

	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private string randomSpawnsDelay;

	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool randomSpawns;

	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	private bool slowMo;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
	private bool rotateCam;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Material wood;

	[Token(Token = "0x4000100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Material concrete;

	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Material metal;

	[Token(Token = "0x4000102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Material checker;

	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Material woodWall;

	[Token(Token = "0x4000104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Material concreteWall;

	[Token(Token = "0x4000105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Material metalWall;

	[Token(Token = "0x4000106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Material checkerWall;

	[Token(Token = "0x4000107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private string groundTextureStr;

	[Token(Token = "0x4000108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private List<string> groundTextures;

	[Token(Token = "0x4000109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public GameObject m4;

	[Token(Token = "0x400010A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public GameObject m4fps;

	[Token(Token = "0x400010B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private bool rotate_m4;

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0xF1685C", Offset = "0xF1685C", VA = "0xF1685C")]
	private void OnMouseDown()
	{
	}

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0xF169DC", Offset = "0xF169DC", VA = "0xF169DC")]
	public GameObject spawnParticle()
	{
		return null;
	}

	[Token(Token = "0x6000100")]
	[Address(RVA = "0xF16C38", Offset = "0xF16C38", VA = "0xF16C38")]
	private void SetActiveCrossVersions(GameObject obj, bool active)
	{
	}

	[Token(Token = "0x6000101")]
	[Address(RVA = "0xF16CDC", Offset = "0xF16CDC", VA = "0xF16CDC")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000102")]
	[Address(RVA = "0xF17A60", Offset = "0xF17A60", VA = "0xF17A60")]
	[IteratorStateMachine(typeof(<RandomSpawnsCoroutine>d__30))]
	private IEnumerator RandomSpawnsCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000103")]
	[Address(RVA = "0xF17AFC", Offset = "0xF17AFC", VA = "0xF17AFC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000104")]
	[Address(RVA = "0xF178F0", Offset = "0xF178F0", VA = "0xF178F0")]
	private void prevTexture()
	{
	}

	[Token(Token = "0x6000105")]
	[Address(RVA = "0xF179AC", Offset = "0xF179AC", VA = "0xF179AC")]
	private void nextTexture()
	{
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0xF17C9C", Offset = "0xF17C9C", VA = "0xF17C9C")]
	private void selectMaterial()
	{
	}

	[Token(Token = "0x6000107")]
	[Address(RVA = "0xF17888", Offset = "0xF17888", VA = "0xF17888")]
	private void prevParticle()
	{
	}

	[Token(Token = "0x6000108")]
	[Address(RVA = "0xF178BC", Offset = "0xF178BC", VA = "0xF178BC")]
	private void nextParticle()
	{
	}

	[Token(Token = "0x6000109")]
	[Address(RVA = "0xF17FD4", Offset = "0xF17FD4", VA = "0xF17FD4")]
	private void showHideStuff()
	{
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0xF184B8", Offset = "0xF184B8", VA = "0xF184B8")]
	public WFX_Demo()
	{
	}
}
[Token(Token = "0x2000042")]
public class WFX_Demo_DeleteAfterDelay : MonoBehaviour
{
	[Token(Token = "0x400010F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float delay;

	[Token(Token = "0x6000111")]
	[Address(RVA = "0xF18988", Offset = "0xF18988", VA = "0xF18988")]
	private void Update()
	{
	}

	[Token(Token = "0x6000112")]
	[Address(RVA = "0xF18A28", Offset = "0xF18A28", VA = "0xF18A28")]
	public WFX_Demo_DeleteAfterDelay()
	{
	}
}
[Token(Token = "0x2000043")]
public class WFX_Demo_New : MonoBehaviour
{
	[Token(Token = "0x2000044")]
	[CompilerGenerated]
	private sealed class <CheckForDeletedParticles>d__41 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WFX_Demo_New <>4__this;

		[Token(Token = "0x1700001F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000128")]
			[Address(RVA = "0xF1A738", Offset = "0xF1A738", VA = "0xF1A738", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000020")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600012A")]
			[Address(RVA = "0xF1A780", Offset = "0xF1A780", VA = "0xF1A780", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000125")]
		[Address(RVA = "0xF198B0", Offset = "0xF198B0", VA = "0xF198B0")]
		[DebuggerHidden]
		public <CheckForDeletedParticles>d__41(int <>1__state)
		{
		}

		[Token(Token = "0x6000126")]
		[Address(RVA = "0xF1A5BC", Offset = "0xF1A5BC", VA = "0xF1A5BC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000127")]
		[Address(RVA = "0xF1A5C0", Offset = "0xF1A5C0", VA = "0xF1A5C0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000129")]
		[Address(RVA = "0xF1A740", Offset = "0xF1A740", VA = "0xF1A740", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Renderer groundRenderer;

	[Token(Token = "0x4000111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Collider groundCollider;

	[Token(Token = "0x4000112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Space]
	[Space]
	public Image slowMoBtn;

	[Token(Token = "0x4000113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text slowMoLabel;

	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Image camRotBtn;

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Text camRotLabel;

	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Image groundBtn;

	[Token(Token = "0x4000117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Text groundLabel;

	[Token(Token = "0x4000118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Space]
	public Text EffectLabel;

	[Token(Token = "0x4000119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Text EffectIndexLabel;

	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject[] AdditionalEffects;

	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject ground;

	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject walls;

	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject bulletholes;

	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject m4;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public GameObject m4fps;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Material wood;

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Material concrete;

	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Material metal;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Material checker;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Material woodWall;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Material concreteWall;

	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Material metalWall;

	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Material checkerWall;

	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private string groundTextureStr;

	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private List<string> groundTextures;

	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private GameObject[] ParticleExamples;

	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private int exampleIndex;

	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private bool slowMo;

	[Token(Token = "0x400012D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private Vector3 defaultCamPosition;

	[Token(Token = "0x400012E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private Quaternion defaultCamRotation;

	[Token(Token = "0x400012F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private List<GameObject> onScreenParticles;

	[Token(Token = "0x6000113")]
	[Address(RVA = "0xF18A38", Offset = "0xF18A38", VA = "0xF18A38")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000114")]
	[Address(RVA = "0xF18D7C", Offset = "0xF18D7C", VA = "0xF18D7C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000115")]
	[Address(RVA = "0xF19604", Offset = "0xF19604", VA = "0xF19604")]
	public void OnToggleGround()
	{
	}

	[Token(Token = "0x6000116")]
	[Address(RVA = "0xF196C4", Offset = "0xF196C4", VA = "0xF196C4")]
	public void OnToggleCamera()
	{
	}

	[Token(Token = "0x6000117")]
	[Address(RVA = "0xF19794", Offset = "0xF19794", VA = "0xF19794")]
	public void OnToggleSlowMo()
	{
	}

	[Token(Token = "0x6000118")]
	[Address(RVA = "0xF19834", Offset = "0xF19834", VA = "0xF19834")]
	public void OnPreviousEffect()
	{
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0xF19838", Offset = "0xF19838", VA = "0xF19838")]
	public void OnNextEffect()
	{
	}

	[Token(Token = "0x600011A")]
	[Address(RVA = "0xF18C50", Offset = "0xF18C50", VA = "0xF18C50")]
	private void UpdateUI()
	{
	}

	[Token(Token = "0x600011B")]
	[Address(RVA = "0xF19214", Offset = "0xF19214", VA = "0xF19214")]
	public GameObject spawnParticle()
	{
		return null;
	}

	[Token(Token = "0x600011C")]
	[Address(RVA = "0xF1983C", Offset = "0xF1983C", VA = "0xF1983C")]
	[IteratorStateMachine(typeof(<CheckForDeletedParticles>d__41))]
	private IEnumerator CheckForDeletedParticles()
	{
		return null;
	}

	[Token(Token = "0x600011D")]
	[Address(RVA = "0xF1905C", Offset = "0xF1905C", VA = "0xF1905C")]
	private void prevParticle()
	{
	}

	[Token(Token = "0x600011E")]
	[Address(RVA = "0xF190A0", Offset = "0xF190A0", VA = "0xF190A0")]
	private void nextParticle()
	{
	}

	[Token(Token = "0x600011F")]
	[Address(RVA = "0xF190E4", Offset = "0xF190E4", VA = "0xF190E4")]
	private void destroyParticles()
	{
	}

	[Token(Token = "0x6000120")]
	[Address(RVA = "0xF19E4C", Offset = "0xF19E4C", VA = "0xF19E4C")]
	private void prevTexture()
	{
	}

	[Token(Token = "0x6000121")]
	[Address(RVA = "0xF1A270", Offset = "0xF1A270", VA = "0xF1A270")]
	private void nextTexture()
	{
	}

	[Token(Token = "0x6000122")]
	[Address(RVA = "0xF19F08", Offset = "0xF19F08", VA = "0xF19F08")]
	private void selectMaterial()
	{
	}

	[Token(Token = "0x6000123")]
	[Address(RVA = "0xF198D8", Offset = "0xF198D8", VA = "0xF198D8")]
	private void showHideStuff()
	{
	}

	[Token(Token = "0x6000124")]
	[Address(RVA = "0xF1A324", Offset = "0xF1A324", VA = "0xF1A324")]
	public WFX_Demo_New()
	{
	}
}
[Token(Token = "0x2000045")]
public class WFX_Demo_RandomDir : MonoBehaviour
{
	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 min;

	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 max;

	[Token(Token = "0x600012B")]
	[Address(RVA = "0xF1A788", Offset = "0xF1A788", VA = "0xF1A788")]
	private void Awake()
	{
	}

	[Token(Token = "0x600012C")]
	[Address(RVA = "0xF1A810", Offset = "0xF1A810", VA = "0xF1A810")]
	public WFX_Demo_RandomDir()
	{
	}
}
[Token(Token = "0x2000046")]
public class WFX_Demo_Wall : MonoBehaviour
{
	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public WFX_Demo_New demo;

	[Token(Token = "0x600012D")]
	[Address(RVA = "0xF1A828", Offset = "0xF1A828", VA = "0xF1A828")]
	private void OnMouseDown()
	{
	}

	[Token(Token = "0x600012E")]
	[Address(RVA = "0xF1A9CC", Offset = "0xF1A9CC", VA = "0xF1A9CC")]
	public WFX_Demo_Wall()
	{
	}
}
[Token(Token = "0x2000047")]
[RequireComponent(typeof(MeshFilter))]
public class WFX_BulletHoleDecal : MonoBehaviour
{
	[Token(Token = "0x2000048")]
	[CompilerGenerated]
	private sealed class <holeUpdate>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WFX_BulletHoleDecal <>4__this;

		[Token(Token = "0x17000021")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000137")]
			[Address(RVA = "0xF1AFB8", Offset = "0xF1AFB8", VA = "0xF1AFB8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000022")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000139")]
			[Address(RVA = "0xF1B000", Offset = "0xF1B000", VA = "0xF1B000", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000134")]
		[Address(RVA = "0xF1AD98", Offset = "0xF1AD98", VA = "0xF1AD98")]
		[DebuggerHidden]
		public <holeUpdate>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x6000135")]
		[Address(RVA = "0xF1AE98", Offset = "0xF1AE98", VA = "0xF1AE98", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000136")]
		[Address(RVA = "0xF1AE9C", Offset = "0xF1AE9C", VA = "0xF1AE9C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000138")]
		[Address(RVA = "0xF1AFC0", Offset = "0xF1AFC0", VA = "0xF1AFC0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Vector2[] quadUVs;

	[Token(Token = "0x4000137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float lifetime;

	[Token(Token = "0x4000138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float fadeoutpercent;

	[Token(Token = "0x4000139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector2 frames;

	[Token(Token = "0x400013A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool randomRotation;

	[Token(Token = "0x400013B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool deactivate;

	[Token(Token = "0x400013C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float life;

	[Token(Token = "0x400013D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float fadeout;

	[Token(Token = "0x400013E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Color color;

	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float orgAlpha;

	[Token(Token = "0x600012F")]
	[Address(RVA = "0xF1A9D4", Offset = "0xF1A9D4", VA = "0xF1A9D4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0xF1AA60", Offset = "0xF1AA60", VA = "0xF1AA60")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000131")]
	[Address(RVA = "0xF1AD24", Offset = "0xF1AD24", VA = "0xF1AD24")]
	[IteratorStateMachine(typeof(<holeUpdate>d__12))]
	private IEnumerator holeUpdate()
	{
		return null;
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0xF1ADC0", Offset = "0xF1ADC0", VA = "0xF1ADC0")]
	public WFX_BulletHoleDecal()
	{
	}
}
[Token(Token = "0x2000049")]
[RequireComponent(typeof(Light))]
public class WFX_LightFlicker : MonoBehaviour
{
	[Token(Token = "0x200004A")]
	[CompilerGenerated]
	private sealed class <Flicker>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WFX_LightFlicker <>4__this;

		[Token(Token = "0x17000023")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000140")]
			[Address(RVA = "0xF1B214", Offset = "0xF1B214", VA = "0xF1B214", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000024")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000142")]
			[Address(RVA = "0xF1B25C", Offset = "0xF1B25C", VA = "0xF1B25C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600013D")]
		[Address(RVA = "0xF1B0D0", Offset = "0xF1B0D0", VA = "0xF1B0D0")]
		[DebuggerHidden]
		public <Flicker>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x600013E")]
		[Address(RVA = "0xF1B10C", Offset = "0xF1B10C", VA = "0xF1B10C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600013F")]
		[Address(RVA = "0xF1B110", Offset = "0xF1B110", VA = "0xF1B110", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000141")]
		[Address(RVA = "0xF1B21C", Offset = "0xF1B21C", VA = "0xF1B21C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float time;

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float timer;

	[Token(Token = "0x600013A")]
	[Address(RVA = "0xF1B008", Offset = "0xF1B008", VA = "0xF1B008")]
	private void Start()
	{
	}

	[Token(Token = "0x600013B")]
	[Address(RVA = "0xF1B05C", Offset = "0xF1B05C", VA = "0xF1B05C")]
	[IteratorStateMachine(typeof(<Flicker>d__3))]
	private IEnumerator Flicker()
	{
		return null;
	}

	[Token(Token = "0x600013C")]
	[Address(RVA = "0xF1B0F8", Offset = "0xF1B0F8", VA = "0xF1B0F8")]
	public WFX_LightFlicker()
	{
	}
}
[Token(Token = "0x200004B")]
public class CFX_SpawnSystem : MonoBehaviour
{
	[Token(Token = "0x4000148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static CFX_SpawnSystem instance;

	[Token(Token = "0x4000149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] objectsToPreload;

	[Token(Token = "0x400014A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int[] objectsToPreloadTimes;

	[Token(Token = "0x400014B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool hideObjectsInHierarchy;

	[Token(Token = "0x400014C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool spawnAsChildren;

	[Token(Token = "0x400014D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	public bool onlyGetInactiveObjects;

	[Token(Token = "0x400014E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
	public bool instantiateIfNeeded;

	[Token(Token = "0x400014F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool allObjectsLoaded;

	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<int, List<GameObject>> instantiatedObjects;

	[Token(Token = "0x4000151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Dictionary<int, int> poolCursors;

	[Token(Token = "0x17000025")]
	public static bool AllObjectsLoaded
	{
		[Token(Token = "0x6000146")]
		[Address(RVA = "0xF1C1F4", Offset = "0xF1C1F4", VA = "0xF1C1F4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000143")]
	[Address(RVA = "0xF1B264", Offset = "0xF1B264", VA = "0xF1B264")]
	public static GameObject GetNextObject(GameObject sourceObj, bool activateObject = true)
	{
		return null;
	}

	[Token(Token = "0x6000144")]
	[Address(RVA = "0xF1B9E4", Offset = "0xF1B9E4", VA = "0xF1B9E4")]
	public static void PreloadObject(GameObject sourceObj, int poolSize = 1)
	{
	}

	[Token(Token = "0x6000145")]
	[Address(RVA = "0xF1BD90", Offset = "0xF1BD90", VA = "0xF1BD90")]
	public static void UnloadObjects(GameObject sourceObj)
	{
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0xF1BA4C", Offset = "0xF1BA4C", VA = "0xF1BA4C")]
	private void addObjectToPool(GameObject sourceObject, int number)
	{
	}

	[Token(Token = "0x6000148")]
	[Address(RVA = "0xF1BDE8", Offset = "0xF1BDE8", VA = "0xF1BDE8")]
	private void removeObjectsFromPool(GameObject sourceObject)
	{
	}

	[Token(Token = "0x6000149")]
	[Address(RVA = "0xF1B884", Offset = "0xF1B884", VA = "0xF1B884")]
	private void increasePoolCursor(int uniqueId)
	{
	}

	[Token(Token = "0x600014A")]
	[Address(RVA = "0xF1C248", Offset = "0xF1C248", VA = "0xF1C248")]
	private void Awake()
	{
	}

	[Token(Token = "0x600014B")]
	[Address(RVA = "0xF1C348", Offset = "0xF1C348", VA = "0xF1C348")]
	private void Start()
	{
	}

	[Token(Token = "0x600014C")]
	[Address(RVA = "0xF1C3C8", Offset = "0xF1C3C8", VA = "0xF1C3C8")]
	public CFX_SpawnSystem()
	{
	}
}
[Token(Token = "0x200004C")]
[ExecuteInEditMode]
public class MC_CreateMatCap : MonoBehaviour
{
	[Token(Token = "0x4000152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Camera screenshotCamera;

	[Token(Token = "0x4000153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material previewMaterial;

	[Token(Token = "0x4000154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("View the saved PNG in the file browser on save")]
	public bool revealOnSave;

	[Token(Token = "0x600014D")]
	[Address(RVA = "0xF1C514", Offset = "0xF1C514", VA = "0xF1C514")]
	public MC_CreateMatCap()
	{
	}
}
[Token(Token = "0x200004D")]
public class MC_AutoRotate : MonoBehaviour
{
	[Token(Token = "0x4000155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 rotation;

	[Token(Token = "0x600014E")]
	[Address(RVA = "0xF1C524", Offset = "0xF1C524", VA = "0xF1C524")]
	private void Update()
	{
	}

	[Token(Token = "0x600014F")]
	[Address(RVA = "0xF1C584", Offset = "0xF1C584", VA = "0xF1C584")]
	public MC_AutoRotate()
	{
	}
}
[Token(Token = "0x200004E")]
[RequireComponent(typeof(RawImage))]
public class MC_SwitchTexture : MonoBehaviour, IPointerClickHandler, IEventSystemHandler
{
	[Token(Token = "0x4000156")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture[] textures;

	[Token(Token = "0x4000157")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material targetMaterial;

	[Token(Token = "0x4000158")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RawImage image;

	[Token(Token = "0x4000159")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int index;

	[Token(Token = "0x6000150")]
	[Address(RVA = "0xF1C58C", Offset = "0xF1C58C", VA = "0xF1C58C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000151")]
	[Address(RVA = "0xF1C680", Offset = "0xF1C680", VA = "0xF1C680", Slot = "4")]
	public void OnPointerClick(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000152")]
	[Address(RVA = "0xF1C6BC", Offset = "0xF1C6BC", VA = "0xF1C6BC")]
	public void NextTexture()
	{
	}

	[Token(Token = "0x6000153")]
	[Address(RVA = "0xF1C6F0", Offset = "0xF1C6F0", VA = "0xF1C6F0")]
	public void PrevTexture()
	{
	}

	[Token(Token = "0x6000154")]
	[Address(RVA = "0xF1C5EC", Offset = "0xF1C5EC", VA = "0xF1C5EC")]
	private void ReloadTexture()
	{
	}

	[Token(Token = "0x6000155")]
	[Address(RVA = "0xF1C724", Offset = "0xF1C724", VA = "0xF1C724")]
	public MC_SwitchTexture()
	{
	}
}
[Token(Token = "0x200004F")]
public class ME_DemoGUI : MonoBehaviour
{
	[Token(Token = "0x400015A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject Character;

	[Token(Token = "0x400015B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject Model;

	[Token(Token = "0x400015C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int Current;

	[Token(Token = "0x400015D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject[] Prefabs;

	[Token(Token = "0x400015E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Light Sun;

	[Token(Token = "0x400015F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ReflectionProbe ReflectionProbe;

	[Token(Token = "0x4000160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Light[] NightLights;

	[Token(Token = "0x4000161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Texture HUETexture;

	[Token(Token = "0x4000162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool UseMobileVersion;

	[Token(Token = "0x4000163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject MobileCharacter;

	[Token(Token = "0x4000164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject Target;

	[Token(Token = "0x4000165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Color guiColor;

	[Token(Token = "0x4000166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private int currentNomber;

	[Token(Token = "0x4000167")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private GameObject characterInstance;

	[Token(Token = "0x4000168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private GameObject modelInstance;

	[Token(Token = "0x4000169")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private GUIStyle guiStyleHeader;

	[Token(Token = "0x400016A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private GUIStyle guiStyleHeaderMobile;

	[Token(Token = "0x400016B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float dpiScale;

	[Token(Token = "0x400016C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private bool isDay;

	[Token(Token = "0x400016D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private float colorHUE;

	[Token(Token = "0x400016E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private float startSunIntensity;

	[Token(Token = "0x400016F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Quaternion startSunRotation;

	[Token(Token = "0x4000170")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Color startAmbientLight;

	[Token(Token = "0x4000171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private float startAmbientIntencity;

	[Token(Token = "0x4000172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private float startReflectionIntencity;

	[Token(Token = "0x4000173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private LightShadows startLightShadows;

	[Token(Token = "0x4000174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private bool isButtonPressed;

	[Token(Token = "0x4000175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private GameObject instanceShieldProjectile;

	[Token(Token = "0x6000156")]
	[Address(RVA = "0xF1C72C", Offset = "0xF1C72C", VA = "0xF1C72C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000157")]
	[Address(RVA = "0xF1C89C", Offset = "0xF1C89C", VA = "0xF1C89C")]
	private void ChangeCurrent(int delta)
	{
	}

	[Token(Token = "0x6000158")]
	[Address(RVA = "0xF1CBC0", Offset = "0xF1CBC0", VA = "0xF1CBC0")]
	private void RemoveClones()
	{
	}

	[Token(Token = "0x6000159")]
	[Address(RVA = "0xF1CCC4", Offset = "0xF1CCC4", VA = "0xF1CCC4")]
	private void ReactivateEffect()
	{
	}

	[Token(Token = "0x600015A")]
	[Address(RVA = "0xF1CD24", Offset = "0xF1CD24", VA = "0xF1CD24")]
	public ME_DemoGUI()
	{
	}
}
[Token(Token = "0x2000050")]
public class ME_MouseOrbit : MonoBehaviour
{
	[Token(Token = "0x4000176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject target;

	[Token(Token = "0x4000177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float distance;

	[Token(Token = "0x4000178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float xSpeed;

	[Token(Token = "0x4000179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float ySpeed;

	[Token(Token = "0x400017A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float yMinLimit;

	[Token(Token = "0x400017B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float yMaxLimit;

	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float x;

	[Token(Token = "0x400017D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float y;

	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float prevDistance;

	[Token(Token = "0x600015B")]
	[Address(RVA = "0xF1CE08", Offset = "0xF1CE08", VA = "0xF1CE08")]
	private void Start()
	{
	}

	[Token(Token = "0x600015C")]
	[Address(RVA = "0xF1CE34", Offset = "0xF1CE34", VA = "0xF1CE34")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0xF1D28C", Offset = "0xF1D28C", VA = "0xF1D28C")]
	private static float ClampAngle(float angle, float min, float max)
	{
		return default(float);
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0xF1D2C8", Offset = "0xF1D2C8", VA = "0xF1D2C8")]
	public ME_MouseOrbit()
	{
	}
}
[Token(Token = "0x2000051")]
public class ME_RealtimeReflection : MonoBehaviour
{
	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ReflectionProbe probe;

	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform camT;

	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool CanUpdate;

	[Token(Token = "0x600015F")]
	[Address(RVA = "0xF1D2E4", Offset = "0xF1D2E4", VA = "0xF1D2E4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000160")]
	[Address(RVA = "0xF1D364", Offset = "0xF1D364", VA = "0xF1D364")]
	private void Update()
	{
	}

	[Token(Token = "0x6000161")]
	[Address(RVA = "0xF1D3F0", Offset = "0xF1D3F0", VA = "0xF1D3F0")]
	public ME_RealtimeReflection()
	{
	}
}
[Token(Token = "0x2000052")]
public class ME_MobileBloom : MonoBehaviour
{
	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Camera render texture resolution")]
	[Range(0.2f, 1f)]
	public float RenderTextureResolutoinFactor;

	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Range(0.05f, 2f)]
	[Tooltip("Blend factor of the result image.")]
	public float Intensity;

	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static float Threshold;

	[Token(Token = "0x4000185")]
	private const string shaderName = "Hidden/KriptoFX/PostEffects/ME_Bloom";

	[Token(Token = "0x4000186")]
	private const int kMaxIterations = 16;

	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private readonly RenderTexture[] m_blurBuffer1;

	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly RenderTexture[] m_blurBuffer2;

	[Token(Token = "0x4000189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private RenderTexture Source;

	[Token(Token = "0x400018A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Material _bloomMaterial;

	[Token(Token = "0x17000026")]
	private Material bloomMaterial
	{
		[Token(Token = "0x6000162")]
		[Address(RVA = "0xF1D400", Offset = "0xF1D400", VA = "0xF1D400")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000163")]
	[Address(RVA = "0xF1D548", Offset = "0xF1D548", VA = "0xF1D548")]
	private void Start()
	{
	}

	[Token(Token = "0x6000164")]
	[Address(RVA = "0xF1D54C", Offset = "0xF1D54C", VA = "0xF1D54C")]
	private void OnPreRender()
	{
	}

	[Token(Token = "0x6000165")]
	[Address(RVA = "0xF1D604", Offset = "0xF1D604", VA = "0xF1D604")]
	private void OnPostRender()
	{
	}

	[Token(Token = "0x6000166")]
	[Address(RVA = "0xF1D5DC", Offset = "0xF1D5DC", VA = "0xF1D5DC")]
	private RenderTextureFormat SupportedHdrFormat()
	{
		return default(RenderTextureFormat);
	}

	[Token(Token = "0x6000167")]
	[Address(RVA = "0xF1D648", Offset = "0xF1D648", VA = "0xF1D648")]
	private void UpdateBloom(RenderTexture source, RenderTexture dest)
	{
	}

	[Token(Token = "0x6000168")]
	[Address(RVA = "0xF1DD88", Offset = "0xF1DD88", VA = "0xF1DD88")]
	public ME_MobileBloom()
	{
	}
}
[Token(Token = "0x2000053")]
public class ME_AnimatorEvents : MonoBehaviour
{
	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject EffectPrefab;

	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject SwordPrefab;

	[Token(Token = "0x400018D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform SwordPosition;

	[Token(Token = "0x400018E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform StartSwordPosition;

	[Token(Token = "0x400018F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject EffectInstance;

	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject SwordInstance;

	[Token(Token = "0x600016A")]
	[Address(RVA = "0xF1DE60", Offset = "0xF1DE60", VA = "0xF1DE60")]
	private void Start()
	{
	}

	[Token(Token = "0x600016B")]
	[Address(RVA = "0xF1DFEC", Offset = "0xF1DFEC", VA = "0xF1DFEC")]
	public void ActivateEffect()
	{
	}

	[Token(Token = "0x600016C")]
	[Address(RVA = "0xF1E21C", Offset = "0xF1E21C", VA = "0xF1E21C")]
	public void ActivateSword()
	{
	}

	[Token(Token = "0x600016D")]
	[Address(RVA = "0xF1E2E0", Offset = "0xF1E2E0", VA = "0xF1E2E0")]
	public void UpdateColor(float HUE)
	{
	}

	[Token(Token = "0x600016E")]
	[Address(RVA = "0xF1E43C", Offset = "0xF1E43C", VA = "0xF1E43C")]
	public ME_AnimatorEvents()
	{
	}
}
[Token(Token = "0x2000054")]
public static class ME_ColorHelper
{
	[Token(Token = "0x2000055")]
	public struct HSBColor
	{
		[Token(Token = "0x4000193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float H;

		[Token(Token = "0x4000194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float S;

		[Token(Token = "0x4000195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float B;

		[Token(Token = "0x4000196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float A;

		[Token(Token = "0x6000176")]
		[Address(RVA = "0xF1F5B4", Offset = "0xF1F5B4", VA = "0xF1F5B4")]
		public HSBColor(float h, float s, float b, float a)
		{
		}
	}

	[Token(Token = "0x4000191")]
	private const float TOLERANCE = 0.0001f;

	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string[] colorProperties;

	[Token(Token = "0x600016F")]
	[Address(RVA = "0xF1F444", Offset = "0xF1F444", VA = "0xF1F444")]
	public static HSBColor ColorToHSV(Color color)
	{
		return default(HSBColor);
	}

	[Token(Token = "0x6000170")]
	[Address(RVA = "0xF1F5C0", Offset = "0xF1F5C0", VA = "0xF1F5C0")]
	public static Color HSVToColor(HSBColor hsbColor)
	{
		return default(Color);
	}

	[Token(Token = "0x6000171")]
	[Address(RVA = "0xF1F7F4", Offset = "0xF1F7F4", VA = "0xF1F7F4")]
	public static Color ConvertRGBColorByHUE(Color rgbColor, float hue)
	{
		return default(Color);
	}

	[Token(Token = "0x6000172")]
	[Address(RVA = "0xF1F8E0", Offset = "0xF1F8E0", VA = "0xF1F8E0")]
	public static void ChangeObjectColorByHUE(GameObject go, float hue)
	{
	}

	[Token(Token = "0x6000173")]
	[Address(RVA = "0xF20488", Offset = "0xF20488", VA = "0xF20488")]
	private static Material setMatHUEColor(Material mat, string name, float hueColor)
	{
		return null;
	}

	[Token(Token = "0x6000174")]
	[Address(RVA = "0xF2054C", Offset = "0xF2054C", VA = "0xF2054C")]
	private static Material setMatAlphaColor(Material mat, string name, float alpha)
	{
		return null;
	}
}
[Token(Token = "0x2000056")]
public class ME_EffectSettingColor : MonoBehaviour
{
	[Token(Token = "0x4000197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Color Color;

	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Color previousColor;

	[Token(Token = "0x6000177")]
	[Address(RVA = "0xF209C0", Offset = "0xF209C0", VA = "0xF209C0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000178")]
	[Address(RVA = "0xF209C4", Offset = "0xF209C4", VA = "0xF209C4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000179")]
	[Address(RVA = "0xF20A04", Offset = "0xF20A04", VA = "0xF20A04")]
	private void UpdateColor()
	{
	}

	[Token(Token = "0x600017A")]
	[Address(RVA = "0xF20AA0", Offset = "0xF20AA0", VA = "0xF20AA0")]
	public ME_EffectSettingColor()
	{
	}
}
[Token(Token = "0x2000057")]
[ExecuteInEditMode]
public class ME_CustomLight : MonoBehaviour
{
	[Token(Token = "0x4000199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int MaxLightsCount;

	[Token(Token = "0x400019A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Texture2D PointLightAttenuation;

	[Token(Token = "0x400019B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<Light> sceneLights;

	[Token(Token = "0x600017B")]
	[Address(RVA = "0xF20AB4", Offset = "0xF20AB4", VA = "0xF20AB4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600017C")]
	[Address(RVA = "0xF20E98", Offset = "0xF20E98", VA = "0xF20E98")]
	private void Update()
	{
	}

	[Token(Token = "0x600017D")]
	[Address(RVA = "0xF21FF4", Offset = "0xF21FF4", VA = "0xF21FF4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600017E")]
	[Address(RVA = "0xF21078", Offset = "0xF21078", VA = "0xF21078")]
	private List<Light> GetAllLights()
	{
		return null;
	}

	[Token(Token = "0x600017F")]
	[Address(RVA = "0xF212F0", Offset = "0xF212F0", VA = "0xF212F0")]
	private int FillDirectionalLights(List<Light> lights, List<Vector4> lightPositions, List<Vector4> lightColors)
	{
		return default(int);
	}

	[Token(Token = "0x6000180")]
	[Address(RVA = "0xF2188C", Offset = "0xF2188C", VA = "0xF2188C")]
	private int FillPointLights(List<Light> lights, List<Vector4> lightPositions, List<Vector4> lightColors)
	{
		return default(int);
	}

	[Token(Token = "0x6000181")]
	[Address(RVA = "0xF20C48", Offset = "0xF20C48", VA = "0xF20C48")]
	private Vector4[] ListToArrayWithMaxCount(List<Vector4> list, int count)
	{
		return null;
	}

	[Token(Token = "0x6000182")]
	[Address(RVA = "0xF21548", Offset = "0xF21548", VA = "0xF21548")]
	private List<Light> SortPointLightsByDistance(List<Light> lights)
	{
		return null;
	}

	[Token(Token = "0x6000183")]
	[Address(RVA = "0xF21B18", Offset = "0xF21B18", VA = "0xF21B18")]
	public Color SampleLightProbesUp(Vector3 pos, float grayScaleFactor)
	{
		return default(Color);
	}

	[Token(Token = "0x6000184")]
	[Address(RVA = "0xF20D84", Offset = "0xF20D84", VA = "0xF20D84")]
	private Texture2D GeneratePointAttenuationTexture()
	{
		return null;
	}

	[Token(Token = "0x6000185")]
	[Address(RVA = "0xF22174", Offset = "0xF22174", VA = "0xF22174")]
	public ME_CustomLight()
	{
	}
}
[Token(Token = "0x2000058")]
public class ME_FixParticlesAligment : MonoBehaviour
{
	[Token(Token = "0x6000187")]
	[Address(RVA = "0xF221C8", Offset = "0xF221C8", VA = "0xF221C8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000188")]
	[Address(RVA = "0xF22244", Offset = "0xF22244", VA = "0xF22244")]
	public ME_FixParticlesAligment()
	{
	}
}
[Token(Token = "0x2000059")]
public class ME_LightCurves : MonoBehaviour
{
	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve LightCurve;

	[Token(Token = "0x400019D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x400019E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float GraphIntensityMultiplier;

	[Token(Token = "0x400019F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool IsLoop;

	[Token(Token = "0x40001A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool canUpdate;

	[Token(Token = "0x40001A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float startTime;

	[Token(Token = "0x40001A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Light lightSource;

	[Token(Token = "0x6000189")]
	[Address(RVA = "0xF2224C", Offset = "0xF2224C", VA = "0xF2224C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600018A")]
	[Address(RVA = "0xF222D0", Offset = "0xF222D0", VA = "0xF222D0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600018B")]
	[Address(RVA = "0xF222F4", Offset = "0xF222F4", VA = "0xF222F4")]
	private void Update()
	{
	}

	[Token(Token = "0x600018C")]
	[Address(RVA = "0xF22380", Offset = "0xF22380", VA = "0xF22380")]
	public ME_LightCurves()
	{
	}
}
[Token(Token = "0x200005A")]
public class ME_MeshMaterialEffect : MonoBehaviour
{
	[Token(Token = "0x40001A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material Material;

	[Token(Token = "0x40001A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool IsFirstMaterial;

	[Token(Token = "0x600018D")]
	[Address(RVA = "0xF223C8", Offset = "0xF223C8", VA = "0xF223C8")]
	public ME_MeshMaterialEffect()
	{
	}
}
[Token(Token = "0x200005B")]
[ExecuteInEditMode]
public class ME_ParticleCollisionDecal : MonoBehaviour
{
	[Token(Token = "0x40001A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParticleSystem DecalParticles;

	[Token(Token = "0x40001A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool IsBilboard;

	[Token(Token = "0x40001A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool InstantiateWhenZeroSpeed;

	[Token(Token = "0x40001A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float MaxGroundAngleDeviation;

	[Token(Token = "0x40001A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float MinDistanceBetweenDecals;

	[Token(Token = "0x40001AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float MinDistanceBetweenSurface;

	[Token(Token = "0x40001AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<ParticleCollisionEvent> collisionEvents;

	[Token(Token = "0x40001AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x40001AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private ParticleSystem initiatorPS;

	[Token(Token = "0x40001AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<GameObject> collidedGameObjects;

	[Token(Token = "0x600018E")]
	[Address(RVA = "0xF223D0", Offset = "0xF223D0", VA = "0xF223D0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600018F")]
	[Address(RVA = "0xF22520", Offset = "0xF22520", VA = "0xF22520")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000190")]
	[Address(RVA = "0xF22580", Offset = "0xF22580", VA = "0xF22580")]
	private void CollisionDetect()
	{
	}

	[Token(Token = "0x6000191")]
	[Address(RVA = "0xF226E4", Offset = "0xF226E4", VA = "0xF226E4")]
	private void OnParticleCollisionManual(GameObject other, int aliveParticles = -1)
	{
	}

	[Token(Token = "0x6000192")]
	[Address(RVA = "0xF22C2C", Offset = "0xF22C2C", VA = "0xF22C2C")]
	private void OnParticleCollision(GameObject other)
	{
	}

	[Token(Token = "0x6000193")]
	[Address(RVA = "0xF22D34", Offset = "0xF22D34", VA = "0xF22D34")]
	public ME_ParticleCollisionDecal()
	{
	}
}
[Token(Token = "0x200005C")]
[ExecuteInEditMode]
public class ME_ParticleGravityPoint : MonoBehaviour
{
	[Token(Token = "0x40001AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x40001B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Force;

	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool DistanceRelative;

	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem ps;

	[Token(Token = "0x40001B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x40001B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ParticleSystem.MainModule mainModule;

	[Token(Token = "0x40001B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 prevPos;

	[Token(Token = "0x6000194")]
	[Address(RVA = "0xF22E24", Offset = "0xF22E24", VA = "0xF22E24")]
	private void Start()
	{
	}

	[Token(Token = "0x6000195")]
	[Address(RVA = "0xF22EA4", Offset = "0xF22EA4", VA = "0xF22EA4")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000196")]
	[Address(RVA = "0xF232C8", Offset = "0xF232C8", VA = "0xF232C8")]
	public ME_ParticleGravityPoint()
	{
	}
}
[Token(Token = "0x200005D")]
public class ME_ParticleTrails : MonoBehaviour
{
	[Token(Token = "0x40001B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject TrailPrefab;

	[Token(Token = "0x40001B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem ps;

	[Token(Token = "0x40001B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x40001B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<uint, GameObject> hashTrails;

	[Token(Token = "0x40001BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Dictionary<uint, GameObject> newHashTrails;

	[Token(Token = "0x40001BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<GameObject> currentGO;

	[Token(Token = "0x6000197")]
	[Address(RVA = "0xF232D8", Offset = "0xF232D8", VA = "0xF232D8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000198")]
	[Address(RVA = "0xF2339C", Offset = "0xF2339C", VA = "0xF2339C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000199")]
	[Address(RVA = "0xF233F0", Offset = "0xF233F0", VA = "0xF233F0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600019A")]
	[Address(RVA = "0xF23444", Offset = "0xF23444", VA = "0xF23444")]
	public void Clear()
	{
	}

	[Token(Token = "0x600019B")]
	[Address(RVA = "0xF235DC", Offset = "0xF235DC", VA = "0xF235DC")]
	private void Update()
	{
	}

	[Token(Token = "0x600019C")]
	[Address(RVA = "0xF235E0", Offset = "0xF235E0", VA = "0xF235E0")]
	private void UpdateTrail()
	{
	}

	[Token(Token = "0x600019D")]
	public void AddRange<T, S>(Dictionary<T, S> source, Dictionary<T, S> collection)
	{
	}

	[Token(Token = "0x600019E")]
	[Address(RVA = "0xF23DF4", Offset = "0xF23DF4", VA = "0xF23DF4")]
	private void ClearEmptyHashes()
	{
	}

	[Token(Token = "0x600019F")]
	[Address(RVA = "0xF24074", Offset = "0xF24074", VA = "0xF24074")]
	public ME_ParticleTrails()
	{
	}
}
[Token(Token = "0x200005F")]
public class ME_Reflection : MonoBehaviour
{
	[Token(Token = "0x40001C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RenderTexture tex;

	[Token(Token = "0x40001C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ReflectionProbe reflectionProbe;

	[Token(Token = "0x40001C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<Light> dirLight;

	[Token(Token = "0x40001C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<float> lightIntencity;

	[Token(Token = "0x60001A5")]
	[Address(RVA = "0xF242D4", Offset = "0xF242D4", VA = "0xF242D4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001A6")]
	[Address(RVA = "0xF24660", Offset = "0xF24660", VA = "0xF24660")]
	private void Update()
	{
	}

	[Token(Token = "0x60001A7")]
	[Address(RVA = "0xF247FC", Offset = "0xF247FC", VA = "0xF247FC")]
	public ME_Reflection()
	{
	}
}
[Token(Token = "0x2000060")]
public class ME_TrailRendererNoise : MonoBehaviour
{
	[Token(Token = "0x40001C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Range(0.01f, 10f)]
	public float MinVertexDistance;

	[Token(Token = "0x40001C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float VertexTime;

	[Token(Token = "0x40001C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float TotalLifeTime;

	[Token(Token = "0x40001C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool SmoothCurves;

	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	public bool IsRibbon;

	[Token(Token = "0x40001C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
	public bool IsActive;

	[Token(Token = "0x40001CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Range(0.001f, 10f)]
	public float Frequency;

	[Token(Token = "0x40001CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Range(0.001f, 10f)]
	public float TimeScale;

	[Token(Token = "0x40001CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Range(0.001f, 10f)]
	public float Amplitude;

	[Token(Token = "0x40001CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float Gravity;

	[Token(Token = "0x40001CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float TurbulenceStrength;

	[Token(Token = "0x40001CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool AutodestructWhenNotActive;

	[Token(Token = "0x40001D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private LineRenderer lineRenderer;

	[Token(Token = "0x40001D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Transform t;

	[Token(Token = "0x40001D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 prevPos;

	[Token(Token = "0x40001D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<Vector3> points;

	[Token(Token = "0x40001D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private List<float> lifeTimes;

	[Token(Token = "0x40001D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private List<Vector3> velocities;

	[Token(Token = "0x40001D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float randomOffset;

	[Token(Token = "0x40001D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private List<Vector3> controlPoints;

	[Token(Token = "0x40001D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private int curveCount;

	[Token(Token = "0x40001D9")]
	private const float MinimumSqrDistance = 0.01f;

	[Token(Token = "0x40001DA")]
	private const float DivisionThreshold = -0.99f;

	[Token(Token = "0x40001DB")]
	private const float SmoothCurvesScale = 0.5f;

	[Token(Token = "0x60001A8")]
	[Address(RVA = "0xF24804", Offset = "0xF24804", VA = "0xF24804")]
	private void Start()
	{
	}

	[Token(Token = "0x60001A9")]
	[Address(RVA = "0xF2499C", Offset = "0xF2499C", VA = "0xF2499C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0xF24A20", Offset = "0xF24A20", VA = "0xF24A20")]
	private void Update()
	{
	}

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0xF24B28", Offset = "0xF24B28", VA = "0xF24B28")]
	private void AddNewPoints()
	{
	}

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0xF24DB8", Offset = "0xF24DB8", VA = "0xF24DB8")]
	private void UpdatetPoints()
	{
	}

	[Token(Token = "0x60001AD")]
	[Address(RVA = "0xF24F7C", Offset = "0xF24F7C", VA = "0xF24F7C")]
	private void UpdateLineRendererBezier()
	{
	}

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0xF25048", Offset = "0xF25048", VA = "0xF25048")]
	private void UpdateLineRenderer()
	{
	}

	[Token(Token = "0x60001AF")]
	[Address(RVA = "0xF250E0", Offset = "0xF250E0", VA = "0xF250E0")]
	private void CalculateTurbuelence(Vector3 position, float speed, float scale, float height, float gravity, int index)
	{
	}

	[Token(Token = "0x60001B0")]
	[Address(RVA = "0xF25298", Offset = "0xF25298", VA = "0xF25298")]
	public void InterpolateBezier(List<Vector3> segmentPoints, float scale)
	{
	}

	[Token(Token = "0x60001B1")]
	[Address(RVA = "0xF258E8", Offset = "0xF258E8", VA = "0xF258E8")]
	public List<Vector3> GetDrawingPoints()
	{
		return null;
	}

	[Token(Token = "0x60001B2")]
	[Address(RVA = "0xF259EC", Offset = "0xF259EC", VA = "0xF259EC")]
	private List<Vector3> FindDrawingPoints(int curveIndex)
	{
		return null;
	}

	[Token(Token = "0x60001B3")]
	[Address(RVA = "0xF25CD0", Offset = "0xF25CD0", VA = "0xF25CD0")]
	private int FindDrawingPoints(int curveIndex, float t0, float t1, List<Vector3> pointList, int insertionIndex)
	{
		return default(int);
	}

	[Token(Token = "0x60001B4")]
	[Address(RVA = "0xF25BBC", Offset = "0xF25BBC", VA = "0xF25BBC")]
	public Vector3 CalculateBezierPoint(int curveIndex, float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0xF26028", Offset = "0xF26028", VA = "0xF26028")]
	private Vector3 CalculateBezierPoint(float t, Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60001B6")]
	[Address(RVA = "0xF260BC", Offset = "0xF260BC", VA = "0xF260BC")]
	public ME_TrailRendererNoise()
	{
	}
}
[Token(Token = "0x2000061")]
[ExecuteInEditMode]
public class PSMeshRendererUpdater : MonoBehaviour
{
	[Token(Token = "0x2000062")]
	private class ParticleStartInfo
	{
		[Token(Token = "0x40001F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ParticleSystem.MinMaxCurve StartSize;

		[Token(Token = "0x40001F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ParticleSystem.MinMaxCurve StartSpeed;

		[Token(Token = "0x60001C9")]
		[Address(RVA = "0xF275F0", Offset = "0xF275F0", VA = "0xF275F0")]
		public ParticleStartInfo()
		{
		}
	}

	[Token(Token = "0x40001DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject MeshObject;

	[Token(Token = "0x40001DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float StartScaleMultiplier;

	[Token(Token = "0x40001DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Color Color;

	[Token(Token = "0x40001DF")]
	private const string materialName = "MeshEffect";

	[Token(Token = "0x40001E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<Material[]> rendererMaterials;

	[Token(Token = "0x40001E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<Material[]> skinnedMaterials;

	[Token(Token = "0x40001E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool IsActive;

	[Token(Token = "0x40001E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float FadeTime;

	[Token(Token = "0x40001E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool currentActiveStatus;

	[Token(Token = "0x40001E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	private bool needUpdateAlpha;

	[Token(Token = "0x40001E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Color oldColor;

	[Token(Token = "0x40001E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float currentAlphaTime;

	[Token(Token = "0x40001E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private string[] colorProperties;

	[Token(Token = "0x40001E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float alpha;

	[Token(Token = "0x40001EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float prevAlpha;

	[Token(Token = "0x40001EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Dictionary<string, float> startAlphaColors;

	[Token(Token = "0x40001EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool previousActiveStatus;

	[Token(Token = "0x40001ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
	private bool needUpdate;

	[Token(Token = "0x40001EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x82")]
	private bool needLastUpdate;

	[Token(Token = "0x40001EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Dictionary<ParticleSystem, ParticleStartInfo> startParticleParameters;

	[Token(Token = "0x60001B7")]
	[Address(RVA = "0xF2623C", Offset = "0xF2623C", VA = "0xF2623C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001B8")]
	[Address(RVA = "0xF2624C", Offset = "0xF2624C", VA = "0xF2624C")]
	private void Update()
	{
	}

	[Token(Token = "0x60001B9")]
	[Address(RVA = "0xF263F8", Offset = "0xF263F8", VA = "0xF263F8")]
	private void InitStartAlphaColors()
	{
	}

	[Token(Token = "0x60001BA")]
	[Address(RVA = "0xF27418", Offset = "0xF27418", VA = "0xF27418")]
	private void InitStartParticleParameters()
	{
	}

	[Token(Token = "0x60001BB")]
	[Address(RVA = "0xF26A6C", Offset = "0xF26A6C", VA = "0xF26A6C")]
	private void UpdateVisibleStatus()
	{
	}

	[Token(Token = "0x60001BC")]
	[Address(RVA = "0xF275F8", Offset = "0xF275F8", VA = "0xF275F8")]
	private void UpdateAlphaByProperties(string rendName, int materialNumber, Material mat, float alpha)
	{
	}

	[Token(Token = "0x60001BD")]
	[Address(RVA = "0xF2727C", Offset = "0xF2727C", VA = "0xF2727C")]
	private void GetStartAlphaByProperties(string rendName, int materialNumber, Material mat)
	{
	}

	[Token(Token = "0x60001BE")]
	[Address(RVA = "0xF271A4", Offset = "0xF271A4", VA = "0xF271A4")]
	public void UpdateColor(Color color)
	{
	}

	[Token(Token = "0x60001BF")]
	[Address(RVA = "0xF27744", Offset = "0xF27744", VA = "0xF27744")]
	public void UpdateColor(float HUE)
	{
	}

	[Token(Token = "0x60001C0")]
	[Address(RVA = "0xF277F8", Offset = "0xF277F8", VA = "0xF277F8")]
	public void UpdateMeshEffect()
	{
	}

	[Token(Token = "0x60001C1")]
	[Address(RVA = "0xF282E4", Offset = "0xF282E4", VA = "0xF282E4")]
	private void CheckScaleIncludedParticles()
	{
	}

	[Token(Token = "0x60001C2")]
	[Address(RVA = "0xF282E8", Offset = "0xF282E8", VA = "0xF282E8")]
	public void UpdateMeshEffect(GameObject go)
	{
	}

	[Token(Token = "0x60001C3")]
	[Address(RVA = "0xF27968", Offset = "0xF27968", VA = "0xF27968")]
	private void UpdatePSMesh(GameObject go)
	{
	}

	[Token(Token = "0x60001C4")]
	[Address(RVA = "0xF2842C", Offset = "0xF2842C", VA = "0xF2842C")]
	private ParticleSystem.MinMaxCurve UpdateParticleParam(ParticleSystem.MinMaxCurve startParam, ParticleSystem.MinMaxCurve currentParam, float scale)
	{
		return default(ParticleSystem.MinMaxCurve);
	}

	[Token(Token = "0x60001C5")]
	[Address(RVA = "0xF2804C", Offset = "0xF2804C", VA = "0xF2804C")]
	private void AddMaterialToMesh(GameObject go)
	{
	}

	[Token(Token = "0x60001C6")]
	[Address(RVA = "0xF284DC", Offset = "0xF284DC", VA = "0xF284DC")]
	private Material[] AddToSharedMaterial(Material[] sharedMaterials, ME_MeshMaterialEffect meshMatEffect)
	{
		return null;
	}

	[Token(Token = "0x60001C7")]
	[Address(RVA = "0xF28708", Offset = "0xF28708", VA = "0xF28708")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60001C8")]
	[Address(RVA = "0xF28B50", Offset = "0xF28B50", VA = "0xF28B50")]
	public PSMeshRendererUpdater()
	{
	}
}
[Token(Token = "0x2000063")]
public class ME_LegacyRenderDistortion : MonoBehaviour
{
	[Token(Token = "0x40001F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool IsActive;

	[Token(Token = "0x40001F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private CommandBuffer buf;

	[Token(Token = "0x40001F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Camera cam;

	[Token(Token = "0x40001F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool bufferIsAdded;

	[Token(Token = "0x60001CA")]
	[Address(RVA = "0xF28FBC", Offset = "0xF28FBC", VA = "0xF28FBC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001CB")]
	[Address(RVA = "0xF2901C", Offset = "0xF2901C", VA = "0xF2901C")]
	private void CreateBuffer()
	{
	}

	[Token(Token = "0x60001CC")]
	[Address(RVA = "0xF29270", Offset = "0xF29270", VA = "0xF29270")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001CD")]
	[Address(RVA = "0xF292A8", Offset = "0xF292A8", VA = "0xF292A8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60001CE")]
	[Address(RVA = "0xF29274", Offset = "0xF29274", VA = "0xF29274")]
	private void AddBuffer()
	{
	}

	[Token(Token = "0x60001CF")]
	[Address(RVA = "0xF292AC", Offset = "0xF292AC", VA = "0xF292AC")]
	private void RemoveBuffer()
	{
	}

	[Token(Token = "0x60001D0")]
	[Address(RVA = "0xF292DC", Offset = "0xF292DC", VA = "0xF292DC")]
	private void Update()
	{
	}

	[Token(Token = "0x60001D1")]
	[Address(RVA = "0xF292FC", Offset = "0xF292FC", VA = "0xF292FC")]
	private bool IsSupportedHdr()
	{
		return default(bool);
	}

	[Token(Token = "0x60001D2")]
	[Address(RVA = "0xF2931C", Offset = "0xF2931C", VA = "0xF2931C")]
	public ME_LegacyRenderDistortion()
	{
	}
}
[Token(Token = "0x2000064")]
public class ME_PerPlatformSettings : MonoBehaviour
{
	[Token(Token = "0x40001F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool DisableOnMobiles;

	[Token(Token = "0x40001F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool RenderMobileDistortion;

	[Token(Token = "0x40001F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Range(0.1f, 1f)]
	public float ParticleBudgetForMobiles;

	[Token(Token = "0x40001F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool isMobile;

	[Token(Token = "0x60001D3")]
	[Address(RVA = "0xF2932C", Offset = "0xF2932C", VA = "0xF2932C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001D4")]
	[Address(RVA = "0xF29778", Offset = "0xF29778", VA = "0xF29778")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001D5")]
	[Address(RVA = "0xF298B4", Offset = "0xF298B4", VA = "0xF298B4")]
	private void Update()
	{
	}

	[Token(Token = "0x60001D6")]
	[Address(RVA = "0xF29798", Offset = "0xF29798", VA = "0xF29798")]
	private void LWRP_Rendering_Check(Camera cam)
	{
	}

	[Token(Token = "0x60001D7")]
	[Address(RVA = "0xF2979C", Offset = "0xF2979C", VA = "0xF2979C")]
	private void Legacy_Rendering_Check(Camera cam)
	{
	}

	[Token(Token = "0x60001D8")]
	[Address(RVA = "0xF298D4", Offset = "0xF298D4", VA = "0xF298D4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60001D9")]
	[Address(RVA = "0xF2939C", Offset = "0xF2939C", VA = "0xF2939C")]
	private bool IsMobilePlatform()
	{
		return default(bool);
	}

	[Token(Token = "0x60001DA")]
	[Address(RVA = "0xF293A4", Offset = "0xF293A4", VA = "0xF293A4")]
	private void ChangeParticlesBudget(float particlesMul)
	{
	}

	[Token(Token = "0x60001DB")]
	[Address(RVA = "0xF299C0", Offset = "0xF299C0", VA = "0xF299C0")]
	public ME_PerPlatformSettings()
	{
	}
}
[Token(Token = "0x2000065")]
public class FlyDemo : MonoBehaviour
{
	[Token(Token = "0x40001FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float Speed;

	[Token(Token = "0x40001FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float Height;

	[Token(Token = "0x40001FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform t;

	[Token(Token = "0x40001FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float time;

	[Token(Token = "0x60001DC")]
	[Address(RVA = "0xF299D0", Offset = "0xF299D0", VA = "0xF299D0")]
	private void Start()
	{
	}

	[Token(Token = "0x60001DD")]
	[Address(RVA = "0xF299F4", Offset = "0xF299F4", VA = "0xF299F4")]
	private void Update()
	{
	}

	[Token(Token = "0x60001DE")]
	[Address(RVA = "0xF29A5C", Offset = "0xF29A5C", VA = "0xF29A5C")]
	public FlyDemo()
	{
	}
}
[Token(Token = "0x2000066")]
public enum Position
{
	[Token(Token = "0x40001FF")]
	Middle,
	[Token(Token = "0x4000200")]
	Bottom,
	[Token(Token = "0x4000201")]
	Bottom02
}
[Token(Token = "0x2000067")]
public class DemoGUI : MonoBehaviour
{
	[Token(Token = "0x4000202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture HUETexture;

	[Token(Token = "0x4000203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material mat;

	[Token(Token = "0x4000204")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Position[] Positions;

	[Token(Token = "0x4000205")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject[] Prefabs;

	[Token(Token = "0x4000206")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int currentNomber;

	[Token(Token = "0x4000207")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject currentInstance;

	[Token(Token = "0x4000208")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GUIStyle guiStyleHeader;

	[Token(Token = "0x4000209")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float colorHUE;

	[Token(Token = "0x400020A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float dpiScale;

	[Token(Token = "0x60001DF")]
	[Address(RVA = "0xF29A6C", Offset = "0xF29A6C", VA = "0xF29A6C")]
	private void Start()
	{
	}

	[Token(Token = "0x60001E0")]
	[Address(RVA = "0xF29C10", Offset = "0xF29C10", VA = "0xF29C10")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60001E1")]
	[Address(RVA = "0xF2A150", Offset = "0xF2A150", VA = "0xF2A150")]
	private void ChangeColor()
	{
	}

	[Token(Token = "0x60001E2")]
	[Address(RVA = "0xF2A354", Offset = "0xF2A354", VA = "0xF2A354")]
	private Color Hue(float H)
	{
		return default(Color);
	}

	[Token(Token = "0x60001E3")]
	[Address(RVA = "0xF29F90", Offset = "0xF29F90", VA = "0xF29F90")]
	private void ChangeCurrent(int delta)
	{
	}

	[Token(Token = "0x60001E4")]
	[Address(RVA = "0xF2A448", Offset = "0xF2A448", VA = "0xF2A448")]
	public DemoGUI()
	{
	}
}
[Token(Token = "0x2000068")]
public class MyGUI3_1 : MonoBehaviour
{
	[Token(Token = "0x2000069")]
	public enum GuiStat
	{
		[Token(Token = "0x4000227")]
		Ball,
		[Token(Token = "0x4000228")]
		BallRotate,
		[Token(Token = "0x4000229")]
		BallRotatex4,
		[Token(Token = "0x400022A")]
		Bottom,
		[Token(Token = "0x400022B")]
		Middle,
		[Token(Token = "0x400022C")]
		MiddleWithoutRobot,
		[Token(Token = "0x400022D")]
		Top,
		[Token(Token = "0x400022E")]
		TopTarget
	}

	[Token(Token = "0x200006A")]
	public struct HSBColor
	{
		[Token(Token = "0x400022F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float h;

		[Token(Token = "0x4000230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float s;

		[Token(Token = "0x4000231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float b;

		[Token(Token = "0x4000232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float a;

		[Token(Token = "0x60001F3")]
		[Address(RVA = "0xF2BB4C", Offset = "0xF2BB4C", VA = "0xF2BB4C")]
		public HSBColor(float h, float s, float b, float a)
		{
		}
	}

	[Token(Token = "0x400020B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture HUETexture;

	[Token(Token = "0x400020C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int CurrentPrefabNomber;

	[Token(Token = "0x400020D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float UpdateInterval;

	[Token(Token = "0x400020E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Light DirLight;

	[Token(Token = "0x400020F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject Target;

	[Token(Token = "0x4000210")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject TargetForRay;

	[Token(Token = "0x4000211")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject TopPosition;

	[Token(Token = "0x4000212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject MiddlePosition;

	[Token(Token = "0x4000213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Vector3 defaultRobotPos;

	[Token(Token = "0x4000214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject BottomPosition;

	[Token(Token = "0x4000215")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject Plane1;

	[Token(Token = "0x4000216")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject Plane2;

	[Token(Token = "0x4000217")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Material[] PlaneMaterials;

	[Token(Token = "0x4000218")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GuiStat[] GuiStats;

	[Token(Token = "0x4000219")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject[] Prefabs;

	[Token(Token = "0x400021A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float oldLightIntensity;

	[Token(Token = "0x400021B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private Color oldAmbientColor;

	[Token(Token = "0x400021C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private GameObject currentGo;

	[Token(Token = "0x400021D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private bool isDay;

	[Token(Token = "0x400021E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
	private bool isDefaultPlaneTexture;

	[Token(Token = "0x400021F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private int current;

	[Token(Token = "0x4000220")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private EffectSettings effectSettings;

	[Token(Token = "0x4000221")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private bool isReadyEffect;

	[Token(Token = "0x4000222")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private Quaternion defaultRobotRotation;

	[Token(Token = "0x4000223")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private float colorHUE;

	[Token(Token = "0x4000224")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private GUIStyle guiStyleHeader;

	[Token(Token = "0x4000225")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private float dpiScale;

	[Token(Token = "0x60001E5")]
	[Address(RVA = "0xF2A4BC", Offset = "0xF2A4BC", VA = "0xF2A4BC")]
	private void Start()
	{
	}

	[Token(Token = "0x60001E6")]
	[Address(RVA = "0xF2A6E8", Offset = "0xF2A6E8", VA = "0xF2A6E8")]
	private void InstanceEffect(Vector3 pos)
	{
	}

	[Token(Token = "0x60001E7")]
	[Address(RVA = "0xF2AA60", Offset = "0xF2AA60", VA = "0xF2AA60")]
	private GameObject GetTargetObject(GuiStat stat)
	{
		return null;
	}

	[Token(Token = "0x60001E8")]
	[Address(RVA = "0xF2ABDC", Offset = "0xF2ABDC", VA = "0xF2ABDC")]
	private void effectSettings_EffectDeactivated(object sender, EventArgs e)
	{
	}

	[Token(Token = "0x60001E9")]
	[Address(RVA = "0xF2AC78", Offset = "0xF2AC78", VA = "0xF2AC78")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60001EA")]
	[Address(RVA = "0xF2B798", Offset = "0xF2B798", VA = "0xF2B798")]
	private void Update()
	{
	}

	[Token(Token = "0x60001EB")]
	[Address(RVA = "0xF2A5D4", Offset = "0xF2A5D4", VA = "0xF2A5D4")]
	private void InstanceCurrent(GuiStat stat)
	{
	}

	[Token(Token = "0x60001EC")]
	[Address(RVA = "0xF2AB54", Offset = "0xF2AB54", VA = "0xF2AB54")]
	private Vector3 GetInstancePosition(GuiStat stat)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60001ED")]
	[Address(RVA = "0xF2B1C0", Offset = "0xF2B1C0", VA = "0xF2B1C0")]
	private void ChangeCurrent(int delta)
	{
	}

	[Token(Token = "0x60001EE")]
	[Address(RVA = "0xF2B968", Offset = "0xF2B968", VA = "0xF2B968")]
	private Color Hue(float H)
	{
		return default(Color);
	}

	[Token(Token = "0x60001EF")]
	[Address(RVA = "0xF2BA5C", Offset = "0xF2BA5C", VA = "0xF2BA5C")]
	public HSBColor ColorToHSV(Color color)
	{
		return default(HSBColor);
	}

	[Token(Token = "0x60001F0")]
	[Address(RVA = "0xF2BB58", Offset = "0xF2BB58", VA = "0xF2BB58")]
	public Color HSVToColor(HSBColor hsbColor)
	{
		return default(Color);
	}

	[Token(Token = "0x60001F1")]
	[Address(RVA = "0xF2B3E8", Offset = "0xF2B3E8", VA = "0xF2B3E8")]
	private void ChangeColor()
	{
	}

	[Token(Token = "0x60001F2")]
	[Address(RVA = "0xF2BD14", Offset = "0xF2BD14", VA = "0xF2BD14")]
	public MyGUI3_1()
	{
	}
}
[Token(Token = "0x200006C")]
public class RealtimeReflection : MonoBehaviour
{
	[Token(Token = "0x4000235")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ReflectionProbe probe;

	[Token(Token = "0x4000236")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform camT;

	[Token(Token = "0x60001F7")]
	[Address(RVA = "0xF2BEE4", Offset = "0xF2BEE4", VA = "0xF2BEE4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001F8")]
	[Address(RVA = "0xF2BF64", Offset = "0xF2BF64", VA = "0xF2BF64")]
	private void Update()
	{
	}

	[Token(Token = "0x60001F9")]
	[Address(RVA = "0xF2BFD8", Offset = "0xF2BFD8", VA = "0xF2BFD8")]
	public RealtimeReflection()
	{
	}
}
[Token(Token = "0x200006D")]
public class AddMaterialOnHit : MonoBehaviour
{
	[Token(Token = "0x4000237")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float RemoveAfterTime;

	[Token(Token = "0x4000238")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool RemoveWhenDisable;

	[Token(Token = "0x4000239")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public EffectSettings EffectSettings;

	[Token(Token = "0x400023A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Material Material;

	[Token(Token = "0x400023B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool UsePointMatrixTransform;

	[Token(Token = "0x400023C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Vector3 TransformScale;

	[Token(Token = "0x400023D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private FadeInOutShaderColor[] fadeInOutShaderColor;

	[Token(Token = "0x400023E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private FadeInOutShaderFloat[] fadeInOutShaderFloat;

	[Token(Token = "0x400023F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private UVTextureAnimator uvTextureAnimator;

	[Token(Token = "0x4000240")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Renderer renderParent;

	[Token(Token = "0x4000241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Material instanceMat;

	[Token(Token = "0x4000242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int materialQueue;

	[Token(Token = "0x4000243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool waitRemove;

	[Token(Token = "0x4000244")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float timeToDelete;

	[Token(Token = "0x60001FA")]
	[Address(RVA = "0xF2BFE0", Offset = "0xF2BFE0", VA = "0xF2BFE0")]
	private void Update()
	{
	}

	[Token(Token = "0x60001FB")]
	[Address(RVA = "0xF2C0C8", Offset = "0xF2C0C8", VA = "0xF2C0C8")]
	public void UpdateMaterial(RaycastHit hit)
	{
	}

	[Token(Token = "0x60001FC")]
	[Address(RVA = "0xF2C598", Offset = "0xF2C598", VA = "0xF2C598")]
	public void UpdateMaterial(Transform transformTarget)
	{
	}

	[Token(Token = "0x60001FD")]
	[Address(RVA = "0xF2C984", Offset = "0xF2C984", VA = "0xF2C984")]
	public void SetMaterialQueue(int matlQueue)
	{
	}

	[Token(Token = "0x60001FE")]
	[Address(RVA = "0xF2C98C", Offset = "0xF2C98C", VA = "0xF2C98C")]
	public int GetDefaultMaterialQueue()
	{
		return default(int);
	}

	[Token(Token = "0x60001FF")]
	[Address(RVA = "0xF2C9A8", Offset = "0xF2C9A8", VA = "0xF2C9A8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000200")]
	[Address(RVA = "0xF2CAA8", Offset = "0xF2CAA8", VA = "0xF2CAA8")]
	public AddMaterialOnHit()
	{
	}
}
[Token(Token = "0x200006E")]
public class AnimatorBehaviour : MonoBehaviour
{
	[Token(Token = "0x4000245")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator anim;

	[Token(Token = "0x4000246")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private EffectSettings effectSettings;

	[Token(Token = "0x4000247")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool isInitialized;

	[Token(Token = "0x4000248")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float oldSpeed;

	[Token(Token = "0x6000201")]
	[Address(RVA = "0xF2CB18", Offset = "0xF2CB18", VA = "0xF2CB18")]
	private void GetEffectSettingsComponent(Transform tr)
	{
	}

	[Token(Token = "0x6000202")]
	[Address(RVA = "0xF2CC14", Offset = "0xF2CC14", VA = "0xF2CC14")]
	private void Start()
	{
	}

	[Token(Token = "0x6000203")]
	[Address(RVA = "0xF2CD14", Offset = "0xF2CD14", VA = "0xF2CD14")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000204")]
	[Address(RVA = "0xF2CD48", Offset = "0xF2CD48", VA = "0xF2CD48")]
	private void prefabSettings_CollisionEnter(object sender, CollisionInfo e)
	{
	}

	[Token(Token = "0x6000205")]
	[Address(RVA = "0xF2CD68", Offset = "0xF2CD68", VA = "0xF2CD68")]
	private void Update()
	{
	}

	[Token(Token = "0x6000206")]
	[Address(RVA = "0xF2CD6C", Offset = "0xF2CD6C", VA = "0xF2CD6C")]
	public AnimatorBehaviour()
	{
	}
}
[Token(Token = "0x200006F")]
public class IceOffsetBehaviour : MonoBehaviour
{
	[Token(Token = "0x6000207")]
	[Address(RVA = "0xF2CD74", Offset = "0xF2CD74", VA = "0xF2CD74")]
	private void Start()
	{
	}

	[Token(Token = "0x6000208")]
	[Address(RVA = "0xF2CF4C", Offset = "0xF2CF4C", VA = "0xF2CF4C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000209")]
	[Address(RVA = "0xF2CF50", Offset = "0xF2CF50", VA = "0xF2CF50")]
	public IceOffsetBehaviour()
	{
	}
}
[Token(Token = "0x2000070")]
public class LazyLoad : MonoBehaviour
{
	[Token(Token = "0x4000249")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject GO;

	[Token(Token = "0x400024A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float TimeDelay;

	[Token(Token = "0x600020A")]
	[Address(RVA = "0xF2CF58", Offset = "0xF2CF58", VA = "0xF2CF58")]
	private void Awake()
	{
	}

	[Token(Token = "0x600020B")]
	[Address(RVA = "0xF2CF78", Offset = "0xF2CF78", VA = "0xF2CF78")]
	private void LazyEnable()
	{
	}

	[Token(Token = "0x600020C")]
	[Address(RVA = "0xF2CF98", Offset = "0xF2CF98", VA = "0xF2CF98")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600020D")]
	[Address(RVA = "0xF2CFE8", Offset = "0xF2CFE8", VA = "0xF2CFE8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600020E")]
	[Address(RVA = "0xF2D04C", Offset = "0xF2D04C", VA = "0xF2D04C")]
	public LazyLoad()
	{
	}
}
[Token(Token = "0x2000071")]
public class LineProjectileCollisionBehaviour : MonoBehaviour
{
	[Token(Token = "0x400024B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject EffectOnHit;

	[Token(Token = "0x400024C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject EffectOnHitObject;

	[Token(Token = "0x400024D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject ParticlesScale;

	[Token(Token = "0x400024E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject GoLight;

	[Token(Token = "0x400024F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool IsCenterLightPosition;

	[Token(Token = "0x4000250")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public LineRenderer[] LineRenderers;

	[Token(Token = "0x4000251")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private EffectSettings effectSettings;

	[Token(Token = "0x4000252")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform t;

	[Token(Token = "0x4000253")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Transform tLight;

	[Token(Token = "0x4000254")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Transform tEffectOnHit;

	[Token(Token = "0x4000255")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Transform tParticleScale;

	[Token(Token = "0x4000256")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private RaycastHit hit;

	[Token(Token = "0x4000257")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private RaycastHit oldRaycastHit;

	[Token(Token = "0x4000258")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private bool isInitializedOnStart;

	[Token(Token = "0x4000259")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
	private bool frameDroped;

	[Token(Token = "0x400025A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private ParticleSystem[] effectOnHitParticles;

	[Token(Token = "0x400025B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private EffectSettings effectSettingsInstance;

	[Token(Token = "0x600020F")]
	[Address(RVA = "0xF2D060", Offset = "0xF2D060", VA = "0xF2D060")]
	private void GetEffectSettingsComponent(Transform tr)
	{
	}

	[Token(Token = "0x6000210")]
	[Address(RVA = "0xF2D15C", Offset = "0xF2D15C", VA = "0xF2D15C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000211")]
	[Address(RVA = "0xF2D370", Offset = "0xF2D370", VA = "0xF2D370")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000212")]
	[Address(RVA = "0xF2D38C", Offset = "0xF2D38C", VA = "0xF2D38C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000213")]
	[Address(RVA = "0xF2D35C", Offset = "0xF2D35C", VA = "0xF2D35C")]
	private void InitializeDefault()
	{
	}

	[Token(Token = "0x6000214")]
	[Address(RVA = "0xF2D408", Offset = "0xF2D408", VA = "0xF2D408")]
	private void Update()
	{
	}

	[Token(Token = "0x6000215")]
	[Address(RVA = "0xF2D9BC", Offset = "0xF2D9BC", VA = "0xF2D9BC")]
	private void CollisionEnter()
	{
	}

	[Token(Token = "0x6000216")]
	[Address(RVA = "0xF2D390", Offset = "0xF2D390", VA = "0xF2D390")]
	private void CollisionLeave()
	{
	}

	[Token(Token = "0x6000217")]
	[Address(RVA = "0xF2DD1C", Offset = "0xF2DD1C", VA = "0xF2DD1C")]
	public LineProjectileCollisionBehaviour()
	{
	}
}
[Token(Token = "0x2000072")]
public enum RandomMoveCoordinates
{
	[Token(Token = "0x400025D")]
	None,
	[Token(Token = "0x400025E")]
	XY,
	[Token(Token = "0x400025F")]
	XZ,
	[Token(Token = "0x4000260")]
	YZ,
	[Token(Token = "0x4000261")]
	XYZ
}
[Token(Token = "0x2000073")]
public class ProjectileCollisionBehaviour : MonoBehaviour
{
	[Token(Token = "0x4000262")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float RandomMoveRadius;

	[Token(Token = "0x4000263")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float RandomMoveSpeed;

	[Token(Token = "0x4000264")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float RandomRange;

	[Token(Token = "0x4000265")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public RandomMoveCoordinates RandomMoveCoordinates;

	[Token(Token = "0x4000266")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject EffectOnHitObject;

	[Token(Token = "0x4000267")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject GoLight;

	[Token(Token = "0x4000268")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AnimationCurve Acceleration;

	[Token(Token = "0x4000269")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float AcceleraionTime;

	[Token(Token = "0x400026A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool IsCenterLightPosition;

	[Token(Token = "0x400026B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	public bool IsLookAt;

	[Token(Token = "0x400026C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
	public bool AttachAfterCollision;

	[Token(Token = "0x400026D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
	public bool IsRootMove;

	[Token(Token = "0x400026E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool IsLocalSpaceRandomMove;

	[Token(Token = "0x400026F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	public bool IsDeviation;

	[Token(Token = "0x4000270")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
	public bool SendCollisionMessage;

	[Token(Token = "0x4000271")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
	public bool ResetParentPositionOnDisable;

	[Token(Token = "0x4000272")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private EffectSettings effectSettings;

	[Token(Token = "0x4000273")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Transform tRoot;

	[Token(Token = "0x4000274")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Transform tTarget;

	[Token(Token = "0x4000275")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Transform t;

	[Token(Token = "0x4000276")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Transform tLight;

	[Token(Token = "0x4000277")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Vector3 forwardDirection;

	[Token(Token = "0x4000278")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private Vector3 startPosition;

	[Token(Token = "0x4000279")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Vector3 startParentPosition;

	[Token(Token = "0x400027A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private RaycastHit hit;

	[Token(Token = "0x400027B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Vector3 smootRandomPos;

	[Token(Token = "0x400027C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private Vector3 oldSmootRandomPos;

	[Token(Token = "0x400027D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private float deltaSpeed;

	[Token(Token = "0x400027E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private float startTime;

	[Token(Token = "0x400027F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private float randomSpeed;

	[Token(Token = "0x4000280")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private float randomRadiusX;

	[Token(Token = "0x4000281")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private float randomRadiusY;

	[Token(Token = "0x4000282")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private int randomDirection1;

	[Token(Token = "0x4000283")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private int randomDirection2;

	[Token(Token = "0x4000284")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private int randomDirection3;

	[Token(Token = "0x4000285")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private bool onCollision;

	[Token(Token = "0x4000286")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x101")]
	private bool isInitializedOnStart;

	[Token(Token = "0x4000287")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private Vector3 randomTargetOffsetXZVector;

	[Token(Token = "0x4000288")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private bool frameDroped;

	[Token(Token = "0x6000218")]
	[Address(RVA = "0xF2DD24", Offset = "0xF2DD24", VA = "0xF2DD24")]
	private void GetEffectSettingsComponent(Transform tr)
	{
	}

	[Token(Token = "0x6000219")]
	[Address(RVA = "0xF2DE20", Offset = "0xF2DE20", VA = "0xF2DE20")]
	private void Start()
	{
	}

	[Token(Token = "0x600021A")]
	[Address(RVA = "0xF2E384", Offset = "0xF2E384", VA = "0xF2E384")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600021B")]
	[Address(RVA = "0xF2E394", Offset = "0xF2E394", VA = "0xF2E394")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600021C")]
	[Address(RVA = "0xF2DF88", Offset = "0xF2DF88", VA = "0xF2DF88")]
	private void InitializeDefault()
	{
	}

	[Token(Token = "0x600021D")]
	[Address(RVA = "0xF2E768", Offset = "0xF2E768", VA = "0xF2E768")]
	private void Update()
	{
	}

	[Token(Token = "0x600021E")]
	[Address(RVA = "0xF2EDD4", Offset = "0xF2EDD4", VA = "0xF2EDD4")]
	private void CollisionEnter()
	{
	}

	[Token(Token = "0x600021F")]
	[Address(RVA = "0xF2E648", Offset = "0xF2E648", VA = "0xF2E648")]
	private void InitRandomVariables()
	{
	}

	[Token(Token = "0x6000220")]
	[Address(RVA = "0xF2E3F0", Offset = "0xF2E3F0", VA = "0xF2E3F0")]
	private void GetTargetHit()
	{
	}

	[Token(Token = "0x6000221")]
	[Address(RVA = "0xF2F114", Offset = "0xF2F114", VA = "0xF2F114")]
	private void UpdateSmootRandomhPos()
	{
	}

	[Token(Token = "0x6000222")]
	[Address(RVA = "0xF2F880", Offset = "0xF2F880", VA = "0xF2F880")]
	public ProjectileCollisionBehaviour()
	{
	}
}
[Token(Token = "0x2000074")]
public class ScaleParticlesFromBound : MonoBehaviour
{
	[Token(Token = "0x4000289")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Collider targetCollider;

	[Token(Token = "0x6000223")]
	[Address(RVA = "0xF2F89C", Offset = "0xF2F89C", VA = "0xF2F89C")]
	private void GetMeshFilterParent(Transform t)
	{
	}

	[Token(Token = "0x6000224")]
	[Address(RVA = "0xF2F968", Offset = "0xF2F968", VA = "0xF2F968")]
	private void Start()
	{
	}

	[Token(Token = "0x6000225")]
	[Address(RVA = "0xF2FA6C", Offset = "0xF2FA6C", VA = "0xF2FA6C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000226")]
	[Address(RVA = "0xF2FA70", Offset = "0xF2FA70", VA = "0xF2FA70")]
	public ScaleParticlesFromBound()
	{
	}
}
[Token(Token = "0x2000075")]
public class AnimationSpeedDebuff : MonoBehaviour
{
	[Token(Token = "0x400028A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve AnimationSpeenOnTime;

	[Token(Token = "0x400028B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float MaxTime;

	[Token(Token = "0x400028C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Animator myAnimator;

	[Token(Token = "0x400028D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform root;

	[Token(Token = "0x400028E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float oldSpeed;

	[Token(Token = "0x400028F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float time;

	[Token(Token = "0x6000227")]
	[Address(RVA = "0xF2FA78", Offset = "0xF2FA78", VA = "0xF2FA78")]
	private void GetAnimatorOnParent(Transform t)
	{
	}

	[Token(Token = "0x6000228")]
	[Address(RVA = "0xF2FBA0", Offset = "0xF2FBA0", VA = "0xF2FBA0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000229")]
	[Address(RVA = "0xF2FC60", Offset = "0xF2FC60", VA = "0xF2FC60")]
	private void Update()
	{
	}

	[Token(Token = "0x600022A")]
	[Address(RVA = "0xF2FD50", Offset = "0xF2FD50", VA = "0xF2FD50")]
	public AnimationSpeedDebuff()
	{
	}
}
[Token(Token = "0x2000076")]
public class DebuffOnEnemyFromCollision : MonoBehaviour
{
	[Token(Token = "0x4000290")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EffectSettings EffectSettings;

	[Token(Token = "0x4000291")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject Effect;

	[Token(Token = "0x600022B")]
	[Address(RVA = "0xF2FD60", Offset = "0xF2FD60", VA = "0xF2FD60")]
	private void Start()
	{
	}

	[Token(Token = "0x600022C")]
	[Address(RVA = "0xF2FDEC", Offset = "0xF2FDEC", VA = "0xF2FDEC")]
	private void EffectSettings_CollisionEnter(object sender, CollisionInfo e)
	{
	}

	[Token(Token = "0x600022D")]
	[Address(RVA = "0xF30058", Offset = "0xF30058", VA = "0xF30058")]
	private void Update()
	{
	}

	[Token(Token = "0x600022E")]
	[Address(RVA = "0xF3005C", Offset = "0xF3005C", VA = "0xF3005C")]
	public DebuffOnEnemyFromCollision()
	{
	}
}
[Token(Token = "0x2000077")]
public class ShieldCollisionBehaviour : MonoBehaviour
{
	[Token(Token = "0x4000292")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject EffectOnHit;

	[Token(Token = "0x4000293")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject ExplosionOnHit;

	[Token(Token = "0x4000294")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool IsWaterInstance;

	[Token(Token = "0x4000295")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float ScaleWave;

	[Token(Token = "0x4000296")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool CreateMechInstanceOnHit;

	[Token(Token = "0x4000297")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Vector3 AngleFix;

	[Token(Token = "0x4000298")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int currentQueue;

	[Token(Token = "0x600022F")]
	[Address(RVA = "0xF2F358", Offset = "0xF2F358", VA = "0xF2F358")]
	public void ShieldCollisionEnter(CollisionInfo e)
	{
	}

	[Token(Token = "0x6000230")]
	[Address(RVA = "0xF30064", Offset = "0xF30064", VA = "0xF30064")]
	private void Update()
	{
	}

	[Token(Token = "0x6000231")]
	[Address(RVA = "0xF30068", Offset = "0xF30068", VA = "0xF30068")]
	public ShieldCollisionBehaviour()
	{
	}
}
[Token(Token = "0x2000078")]
public class WaterUvAnimation : MonoBehaviour
{
	[Token(Token = "0x4000299")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool IsReverse;

	[Token(Token = "0x400029A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float Speed;

	[Token(Token = "0x400029B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int MaterialNomber;

	[Token(Token = "0x400029C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Material mat;

	[Token(Token = "0x400029D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float deltaFps;

	[Token(Token = "0x400029E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool isVisible;

	[Token(Token = "0x400029F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	private bool isCorutineStarted;

	[Token(Token = "0x40002A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float offset;

	[Token(Token = "0x40002A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float delta;

	[Token(Token = "0x6000232")]
	[Address(RVA = "0xF30084", Offset = "0xF30084", VA = "0xF30084")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000233")]
	[Address(RVA = "0xF30108", Offset = "0xF30108", VA = "0xF30108")]
	private void Update()
	{
	}

	[Token(Token = "0x6000234")]
	[Address(RVA = "0xF301EC", Offset = "0xF301EC", VA = "0xF301EC")]
	public WaterUvAnimation()
	{
	}
}
[Token(Token = "0x2000079")]
public class MoveOnGround : MonoBehaviour
{
	[Token(Token = "0x40002A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool IsRootMove;

	[Token(Token = "0x40002A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private EffectSettings effectSettings;

	[Token(Token = "0x40002A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform tRoot;

	[Token(Token = "0x40002A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform tTarget;

	[Token(Token = "0x40002A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 targetPos;

	[Token(Token = "0x40002A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool isInitialized;

	[Token(Token = "0x40002A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	private bool isFinished;

	[Token(Token = "0x40002AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private ParticleSystem[] particles;

	[Token(Token = "0x14000001")]
	public event EventHandler<CollisionInfo> OnCollision
	{
		[Token(Token = "0x6000235")]
		[Address(RVA = "0xF301FC", Offset = "0xF301FC", VA = "0xF301FC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000236")]
		[Address(RVA = "0xF302AC", Offset = "0xF302AC", VA = "0xF302AC")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000237")]
	[Address(RVA = "0xF3035C", Offset = "0xF3035C", VA = "0xF3035C")]
	private void GetEffectSettingsComponent(Transform tr)
	{
	}

	[Token(Token = "0x6000238")]
	[Address(RVA = "0xF30458", Offset = "0xF30458", VA = "0xF30458")]
	private void Start()
	{
	}

	[Token(Token = "0x6000239")]
	[Address(RVA = "0xF308CC", Offset = "0xF308CC", VA = "0xF308CC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600023A")]
	[Address(RVA = "0xF30564", Offset = "0xF30564", VA = "0xF30564")]
	private void InitDefaultVariables()
	{
	}

	[Token(Token = "0x600023B")]
	[Address(RVA = "0xF308DC", Offset = "0xF308DC", VA = "0xF308DC")]
	private void Update()
	{
	}

	[Token(Token = "0x600023C")]
	[Address(RVA = "0xF30C04", Offset = "0xF30C04", VA = "0xF30C04")]
	public MoveOnGround()
	{
	}
}
[Token(Token = "0x200007A")]
public class OffsetOnNormal : MonoBehaviour
{
	[Token(Token = "0x40002AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float offset;

	[Token(Token = "0x40002AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject offsetGameObject;

	[Token(Token = "0x40002AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 startPosition;

	[Token(Token = "0x600023D")]
	[Address(RVA = "0xF30C14", Offset = "0xF30C14", VA = "0xF30C14")]
	private void Awake()
	{
	}

	[Token(Token = "0x600023E")]
	[Address(RVA = "0xF30C44", Offset = "0xF30C44", VA = "0xF30C44")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600023F")]
	[Address(RVA = "0xF30DB0", Offset = "0xF30DB0", VA = "0xF30DB0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000240")]
	[Address(RVA = "0xF30DB4", Offset = "0xF30DB4", VA = "0xF30DB4")]
	public OffsetOnNormal()
	{
	}
}
[Token(Token = "0x200007B")]
public class OnRigidbodySendCollision : MonoBehaviour
{
	[Token(Token = "0x40002AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private EffectSettings effectSettings;

	[Token(Token = "0x6000241")]
	[Address(RVA = "0xF30DC4", Offset = "0xF30DC4", VA = "0xF30DC4")]
	private void GetEffectSettingsComponent(Transform tr)
	{
	}

	[Token(Token = "0x6000242")]
	[Address(RVA = "0xF30EC0", Offset = "0xF30EC0", VA = "0xF30EC0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000243")]
	[Address(RVA = "0xF30EE0", Offset = "0xF30EE0", VA = "0xF30EE0")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000244")]
	[Address(RVA = "0xF30F50", Offset = "0xF30F50", VA = "0xF30F50")]
	public OnRigidbodySendCollision()
	{
	}
}
[Token(Token = "0x200007C")]
public class ResetPositionOnDiactivated : MonoBehaviour
{
	[Token(Token = "0x40002AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EffectSettings EffectSettings;

	[Token(Token = "0x6000245")]
	[Address(RVA = "0xF30F58", Offset = "0xF30F58", VA = "0xF30F58")]
	private void Start()
	{
	}

	[Token(Token = "0x6000246")]
	[Address(RVA = "0xF30FE4", Offset = "0xF30FE4", VA = "0xF30FE4")]
	private void EffectSettings_EffectDeactivated(object sender, EventArgs e)
	{
	}

	[Token(Token = "0x6000247")]
	[Address(RVA = "0xF3104C", Offset = "0xF3104C", VA = "0xF3104C")]
	public ResetPositionOnDiactivated()
	{
	}
}
[Token(Token = "0x200007D")]
public class LineRendererBehaviour : MonoBehaviour
{
	[Token(Token = "0x40002B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool IsVertical;

	[Token(Token = "0x40002B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float LightHeightOffset;

	[Token(Token = "0x40002B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float ParticlesHeightOffset;

	[Token(Token = "0x40002B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float TimeDestroyLightAfterCollision;

	[Token(Token = "0x40002B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float TimeDestroyThisAfterCollision;

	[Token(Token = "0x40002B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float TimeDestroyRootAfterCollision;

	[Token(Token = "0x40002B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject EffectOnHitObject;

	[Token(Token = "0x40002B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject Explosion;

	[Token(Token = "0x40002B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject StartGlow;

	[Token(Token = "0x40002B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject HitGlow;

	[Token(Token = "0x40002BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject Particles;

	[Token(Token = "0x40002BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject GoLight;

	[Token(Token = "0x40002BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private EffectSettings effectSettings;

	[Token(Token = "0x40002BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Transform tRoot;

	[Token(Token = "0x40002BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Transform tTarget;

	[Token(Token = "0x40002BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool isInitializedOnStart;

	[Token(Token = "0x40002C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private LineRenderer line;

	[Token(Token = "0x40002C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private int currentShaderIndex;

	[Token(Token = "0x40002C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private RaycastHit hit;

	[Token(Token = "0x6000248")]
	[Address(RVA = "0xF31054", Offset = "0xF31054", VA = "0xF31054")]
	private void GetEffectSettingsComponent(Transform tr)
	{
	}

	[Token(Token = "0x6000249")]
	[Address(RVA = "0xF31150", Offset = "0xF31150", VA = "0xF31150")]
	private void Start()
	{
	}

	[Token(Token = "0x600024A")]
	[Address(RVA = "0xF31278", Offset = "0xF31278", VA = "0xF31278")]
	private void InitializeDefault()
	{
	}

	[Token(Token = "0x600024B")]
	[Address(RVA = "0xF31E1C", Offset = "0xF31E1C", VA = "0xF31E1C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600024C")]
	[Address(RVA = "0xF31E2C", Offset = "0xF31E2C", VA = "0xF31E2C")]
	public LineRendererBehaviour()
	{
	}
}
[Token(Token = "0x200007E")]
public class Billboard : MonoBehaviour
{
	[Token(Token = "0x40002C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Camera Camera;

	[Token(Token = "0x40002C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool Active;

	[Token(Token = "0x40002C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool AutoInitCamera;

	[Token(Token = "0x40002C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject myContainer;

	[Token(Token = "0x40002C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform t;

	[Token(Token = "0x40002C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform camT;

	[Token(Token = "0x40002C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform contT;

	[Token(Token = "0x600024D")]
	[Address(RVA = "0xFFAD3C", Offset = "0xFFAD3C", VA = "0xFFAD3C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600024E")]
	[Address(RVA = "0xFFAF0C", Offset = "0xFFAF0C", VA = "0xFFAF0C")]
	private void Update()
	{
	}

	[Token(Token = "0x600024F")]
	[Address(RVA = "0xFFB090", Offset = "0xFFB090", VA = "0xFFB090")]
	public Billboard()
	{
	}
}
[Token(Token = "0x200007F")]
public class CollisionActiveBehaviour : MonoBehaviour
{
	[Token(Token = "0x40002CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool IsReverse;

	[Token(Token = "0x40002CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float TimeDelay;

	[Token(Token = "0x40002CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool IsLookAt;

	[Token(Token = "0x40002CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private EffectSettings effectSettings;

	[Token(Token = "0x6000250")]
	[Address(RVA = "0xFFB0A0", Offset = "0xFFB0A0", VA = "0xFFB0A0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000251")]
	[Address(RVA = "0xFFB4A8", Offset = "0xFFB4A8", VA = "0xFFB4A8")]
	private void effectSettings_CollisionEnter(object sender, CollisionInfo e)
	{
	}

	[Token(Token = "0x6000252")]
	[Address(RVA = "0xFFB1A4", Offset = "0xFFB1A4", VA = "0xFFB1A4")]
	private void GetEffectSettingsComponent(Transform tr)
	{
	}

	[Token(Token = "0x6000253")]
	[Address(RVA = "0xFFB538", Offset = "0xFFB538", VA = "0xFFB538")]
	public CollisionActiveBehaviour()
	{
	}
}
[Token(Token = "0x2000080")]
public class DeadTime : MonoBehaviour
{
	[Token(Token = "0x40002CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float deadTime;

	[Token(Token = "0x40002CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool destroyRoot;

	[Token(Token = "0x6000254")]
	[Address(RVA = "0xFFB540", Offset = "0xFFB540", VA = "0xFFB540")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000255")]
	[Address(RVA = "0xFFB5E0", Offset = "0xFFB5E0", VA = "0xFFB5E0")]
	public DeadTime()
	{
	}
}
[Token(Token = "0x2000081")]
public class DistortionMobileCamera : MonoBehaviour
{
	[Token(Token = "0x2000082")]
	[CompilerGenerated]
	private sealed class <RepeatCameraMove>d__22 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DistortionMobileCamera <>4__this;

		[Token(Token = "0x17000027")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000262")]
			[Address(RVA = "0xFFC0D4", Offset = "0xFFC0D4", VA = "0xFFC0D4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000028")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000264")]
			[Address(RVA = "0xFFC11C", Offset = "0xFFC11C", VA = "0xFFC11C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600025F")]
		[Address(RVA = "0xFFBDD4", Offset = "0xFFBDD4", VA = "0xFFBDD4")]
		[DebuggerHidden]
		public <RepeatCameraMove>d__22(int <>1__state)
		{
		}

		[Token(Token = "0x6000260")]
		[Address(RVA = "0xFFC070", Offset = "0xFFC070", VA = "0xFFC070", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000261")]
		[Address(RVA = "0xFFC074", Offset = "0xFFC074", VA = "0xFFC074", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000263")]
		[Address(RVA = "0xFFC0DC", Offset = "0xFFC0DC", VA = "0xFFC0DC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000083")]
	[CompilerGenerated]
	private sealed class <RepeatCameraStatic>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DistortionMobileCamera <>4__this;

		[Token(Token = "0x17000029")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000268")]
			[Address(RVA = "0xFFC188", Offset = "0xFFC188", VA = "0xFFC188", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600026A")]
			[Address(RVA = "0xFFC1D0", Offset = "0xFFC1D0", VA = "0xFFC1D0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000265")]
		[Address(RVA = "0xFFBDFC", Offset = "0xFFBDFC", VA = "0xFFBDFC")]
		[DebuggerHidden]
		public <RepeatCameraStatic>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x6000266")]
		[Address(RVA = "0xFFC124", Offset = "0xFFC124", VA = "0xFFC124", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000267")]
		[Address(RVA = "0xFFC128", Offset = "0xFFC128", VA = "0xFFC128", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000269")]
		[Address(RVA = "0xFFC190", Offset = "0xFFC190", VA = "0xFFC190", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40002D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float TextureScale;

	[Token(Token = "0x40002D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public RenderTextureFormat RenderTextureFormat;

	[Token(Token = "0x40002D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public FilterMode FilterMode;

	[Token(Token = "0x40002D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public LayerMask CullingMask;

	[Token(Token = "0x40002D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public RenderingPath RenderingPath;

	[Token(Token = "0x40002D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int FPSWhenMoveCamera;

	[Token(Token = "0x40002D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int FPSWhenStaticCamera;

	[Token(Token = "0x40002D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool UseRealTime;

	[Token(Token = "0x40002D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private RenderTexture renderTexture;

	[Token(Token = "0x40002D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Camera cameraInstance;

	[Token(Token = "0x40002DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GameObject goCamera;

	[Token(Token = "0x40002DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 oldPosition;

	[Token(Token = "0x40002DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Quaternion oldRotation;

	[Token(Token = "0x40002DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Transform instanceCameraTransform;

	[Token(Token = "0x40002DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool canUpdateCamera;

	[Token(Token = "0x40002DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
	private bool isStaticUpdate;

	[Token(Token = "0x40002E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private WaitForSeconds fpsMove;

	[Token(Token = "0x40002E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private WaitForSeconds fpsStatic;

	[Token(Token = "0x40002E2")]
	private const int DropedFrames = 50;

	[Token(Token = "0x40002E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private int frameCountWhenCameraIsStatic;

	[Token(Token = "0x6000256")]
	[Address(RVA = "0xFFB5F0", Offset = "0xFFB5F0", VA = "0xFFB5F0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000257")]
	[Address(RVA = "0xFFBC18", Offset = "0xFFBC18", VA = "0xFFBC18")]
	private void Update()
	{
	}

	[Token(Token = "0x6000258")]
	[Address(RVA = "0xFFBB30", Offset = "0xFFBB30", VA = "0xFFBB30")]
	[IteratorStateMachine(typeof(<RepeatCameraMove>d__22))]
	private IEnumerator RepeatCameraMove()
	{
		return null;
	}

	[Token(Token = "0x6000259")]
	[Address(RVA = "0xFFBBA4", Offset = "0xFFBBA4", VA = "0xFFBBA4")]
	[IteratorStateMachine(typeof(<RepeatCameraStatic>d__23))]
	private IEnumerator RepeatCameraStatic()
	{
		return null;
	}

	[Token(Token = "0x600025A")]
	[Address(RVA = "0xFFBE24", Offset = "0xFFBE24", VA = "0xFFBE24")]
	private void OnBecameVisible()
	{
	}

	[Token(Token = "0x600025B")]
	[Address(RVA = "0xFFBEAC", Offset = "0xFFBEAC", VA = "0xFFBEAC")]
	private void OnBecameInvisible()
	{
	}

	[Token(Token = "0x600025C")]
	[Address(RVA = "0xFFB714", Offset = "0xFFB714", VA = "0xFFB714")]
	private void Initialize()
	{
	}

	[Token(Token = "0x600025D")]
	[Address(RVA = "0xFFBF34", Offset = "0xFFBF34", VA = "0xFFBF34")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600025E")]
	[Address(RVA = "0xFFC034", Offset = "0xFFC034", VA = "0xFFC034")]
	public DistortionMobileCamera()
	{
	}
}
[Token(Token = "0x2000084")]
public class EffectsColorizer : MonoBehaviour
{
	[Token(Token = "0x2000085")]
	public struct HSBColor
	{
		[Token(Token = "0x40002ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float h;

		[Token(Token = "0x40002EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float s;

		[Token(Token = "0x40002EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float b;

		[Token(Token = "0x40002F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float a;

		[Token(Token = "0x6000271")]
		[Address(RVA = "0xFFC8C0", Offset = "0xFFC8C0", VA = "0xFFC8C0")]
		public HSBColor(float h, float s, float b, float a)
		{
		}
	}

	[Token(Token = "0x40002EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Color TintColor;

	[Token(Token = "0x40002EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool UseInstanceWhenNotEditorMode;

	[Token(Token = "0x40002EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Color oldColor;

	[Token(Token = "0x600026B")]
	[Address(RVA = "0xFFC1D8", Offset = "0xFFC1D8", VA = "0xFFC1D8")]
	private void Start()
	{
	}

	[Token(Token = "0x600026C")]
	[Address(RVA = "0xFFC1DC", Offset = "0xFFC1DC", VA = "0xFFC1DC")]
	private void Update()
	{
	}

	[Token(Token = "0x600026D")]
	[Address(RVA = "0xFFC250", Offset = "0xFFC250", VA = "0xFFC250")]
	private void ChangeColor(GameObject effect, Color color)
	{
	}

	[Token(Token = "0x600026E")]
	[Address(RVA = "0xFFC614", Offset = "0xFFC614", VA = "0xFFC614")]
	public HSBColor ColorToHSV(Color color)
	{
		return default(HSBColor);
	}

	[Token(Token = "0x600026F")]
	[Address(RVA = "0xFFC704", Offset = "0xFFC704", VA = "0xFFC704")]
	public Color HSVToColor(HSBColor hsbColor)
	{
		return default(Color);
	}

	[Token(Token = "0x6000270")]
	[Address(RVA = "0xFFC8CC", Offset = "0xFFC8CC", VA = "0xFFC8CC")]
	public EffectsColorizer()
	{
	}
}
[Token(Token = "0x2000086")]
public class EffectSettings : MonoBehaviour
{
	[Token(Token = "0x2000087")]
	public enum EffectTypeEnum
	{
		[Token(Token = "0x400030B")]
		Projectile,
		[Token(Token = "0x400030C")]
		AOE,
		[Token(Token = "0x400030D")]
		Other
	}

	[Token(Token = "0x2000088")]
	public enum DeactivationEnum
	{
		[Token(Token = "0x400030F")]
		Deactivate,
		[Token(Token = "0x4000310")]
		DestroyAfterCollision,
		[Token(Token = "0x4000311")]
		DestroyAfterTime,
		[Token(Token = "0x4000312")]
		Nothing
	}

	[Token(Token = "0x40002F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Type of the effect")]
	public EffectTypeEnum EffectType;

	[Token(Token = "0x40002F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Tooltip("The radius of the collider is required to correctly calculate the collision point. For example, if the radius 0.5m, then the position of the collision is shifted on 0.5m relative motion vector.")]
	public float ColliderRadius;

	[Token(Token = "0x40002F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("The radius of the \"Area Of Damage (AOE)\"")]
	public float EffectRadius;

	[Token(Token = "0x40002F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("Get the position of the movement of the motion vector, and not to follow to the target.")]
	public bool UseMoveVector;

	[Token(Token = "0x40002F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("A projectile will be moved to the target (any object)")]
	public GameObject Target;

	[Token(Token = "0x40002F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("Motion vector for the projectile (eg Vector3.Forward)")]
	public Vector3 MoveVector;

	[Token(Token = "0x40002F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Tooltip("The speed of the projectile")]
	public float MoveSpeed;

	[Token(Token = "0x40002F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("Should the projectile have move to the target, until the target not reaches?")]
	public bool IsHomingMove;

	[Token(Token = "0x40002F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("Distance flight of the projectile, after which the projectile is deactivated and call a collision event with a null value \"RaycastHit\"")]
	public float MoveDistance;

	[Token(Token = "0x40002FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("Allows you to smoothly activate / deactivate effects which have an indefinite lifetime")]
	public bool IsVisible;

	[Token(Token = "0x40002FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[Tooltip("Whether to deactivate or destroy the effect after a collision. Deactivation allows you to reuse the effect without instantiating, using \"effect.SetActive (true)\"")]
	public DeactivationEnum InstanceBehaviour;

	[Token(Token = "0x40002FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Tooltip("Delay before deactivating effect. (For example, after effect, some particles must have time to disappear).")]
	public float DeactivateTimeDelay;

	[Token(Token = "0x40002FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[Tooltip("Delay before deleting effect. (For example, after effect, some particles must have time to disappear).")]
	public float DestroyTimeDelay;

	[Token(Token = "0x40002FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Tooltip("Allows you to adjust the layers, which can interact with the projectile.")]
	public LayerMask LayerMask;

	[Token(Token = "0x4000301")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private GameObject[] active_key;

	[Token(Token = "0x4000302")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float[] active_value;

	[Token(Token = "0x4000303")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private GameObject[] inactive_Key;

	[Token(Token = "0x4000304")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float[] inactive_value;

	[Token(Token = "0x4000305")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private int lastActiveIndex;

	[Token(Token = "0x4000306")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private int lastInactiveIndex;

	[Token(Token = "0x4000307")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private int currentActiveGo;

	[Token(Token = "0x4000308")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private int currentInactiveGo;

	[Token(Token = "0x4000309")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private bool deactivatedIsWait;

	[Token(Token = "0x14000002")]
	public event EventHandler<CollisionInfo> CollisionEnter
	{
		[Token(Token = "0x6000272")]
		[Address(RVA = "0xFFB3F8", Offset = "0xFFB3F8", VA = "0xFFB3F8")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000273")]
		[Address(RVA = "0xFFC8DC", Offset = "0xFFC8DC", VA = "0xFFC8DC")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000003")]
	public event EventHandler<EventArgs> EffectDeactivated
	{
		[Token(Token = "0x6000274")]
		[Address(RVA = "0xFFC98C", Offset = "0xFFC98C", VA = "0xFFC98C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000275")]
		[Address(RVA = "0xFFCA3C", Offset = "0xFFCA3C", VA = "0xFFCA3C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000276")]
	[Address(RVA = "0xFFCAEC", Offset = "0xFFCAEC", VA = "0xFFCAEC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000277")]
	[Address(RVA = "0xFFCB84", Offset = "0xFFCB84", VA = "0xFFCB84")]
	public void OnCollisionHandler(CollisionInfo e)
	{
	}

	[Token(Token = "0x6000278")]
	[Address(RVA = "0xFFCD58", Offset = "0xFFCD58", VA = "0xFFCD58")]
	public void OnEffectDeactivatedHandler()
	{
	}

	[Token(Token = "0x6000279")]
	[Address(RVA = "0xFFCDD8", Offset = "0xFFCDD8", VA = "0xFFCDD8")]
	public void Deactivate()
	{
	}

	[Token(Token = "0x600027A")]
	[Address(RVA = "0xFFCE08", Offset = "0xFFCE08", VA = "0xFFCE08")]
	private void SetGoActive()
	{
	}

	[Token(Token = "0x600027B")]
	[Address(RVA = "0xFFCE68", Offset = "0xFFCE68", VA = "0xFFCE68")]
	private void SetGoInactive()
	{
	}

	[Token(Token = "0x600027C")]
	[Address(RVA = "0xFFCEC8", Offset = "0xFFCEC8", VA = "0xFFCEC8")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x600027D")]
	[Address(RVA = "0xFFCF84", Offset = "0xFFCF84", VA = "0xFFCF84")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x600027E")]
	[Address(RVA = "0xFFB34C", Offset = "0xFFB34C", VA = "0xFFB34C")]
	public void RegistreActiveElement(GameObject go, float time)
	{
	}

	[Token(Token = "0x600027F")]
	[Address(RVA = "0xFFB2A0", Offset = "0xFFB2A0", VA = "0xFFB2A0")]
	public void RegistreInactiveElement(GameObject go, float time)
	{
	}

	[Token(Token = "0x6000280")]
	[Address(RVA = "0xFFD028", Offset = "0xFFD028", VA = "0xFFD028")]
	public EffectSettings()
	{
	}
}
[Token(Token = "0x2000089")]
public class CollisionInfo : EventArgs
{
	[Token(Token = "0x4000313")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public RaycastHit Hit;

	[Token(Token = "0x6000281")]
	[Address(RVA = "0xFFD180", Offset = "0xFFD180", VA = "0xFFD180")]
	public CollisionInfo()
	{
	}
}
[Token(Token = "0x200008A")]
[ExecuteInEditMode]
public class EffectsParticleSystemScaler : MonoBehaviour
{
	[Token(Token = "0x4000314")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float particlesScale;

	[Token(Token = "0x4000315")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float oldScale;

	[Token(Token = "0x6000282")]
	[Address(RVA = "0xFFD1D8", Offset = "0xFFD1D8", VA = "0xFFD1D8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000283")]
	[Address(RVA = "0xFFD1E4", Offset = "0xFFD1E4", VA = "0xFFD1E4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000284")]
	[Address(RVA = "0xFFD1E8", Offset = "0xFFD1E8", VA = "0xFFD1E8")]
	public EffectsParticleSystemScaler()
	{
	}
}
[Token(Token = "0x200008B")]
public class FadeInOutLight : MonoBehaviour
{
	[Token(Token = "0x4000316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float StartDelay;

	[Token(Token = "0x4000317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float FadeInSpeed;

	[Token(Token = "0x4000318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float FadeOutDelay;

	[Token(Token = "0x4000319")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float FadeOutSpeed;

	[Token(Token = "0x400031A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool FadeOutAfterCollision;

	[Token(Token = "0x400031B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool UseHideStatus;

	[Token(Token = "0x400031C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Light goLight;

	[Token(Token = "0x400031D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float oldIntensity;

	[Token(Token = "0x400031E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float currentIntensity;

	[Token(Token = "0x400031F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float startIntensity;

	[Token(Token = "0x4000320")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool canStart;

	[Token(Token = "0x4000321")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	private bool canStartFadeOut;

	[Token(Token = "0x4000322")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
	private bool fadeInComplited;

	[Token(Token = "0x4000323")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
	private bool fadeOutComplited;

	[Token(Token = "0x4000324")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool isCollisionEnter;

	[Token(Token = "0x4000325")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	private bool allComplited;

	[Token(Token = "0x4000326")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
	private bool isStartDelay;

	[Token(Token = "0x4000327")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
	private bool isIn;

	[Token(Token = "0x4000328")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool isOut;

	[Token(Token = "0x4000329")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private EffectSettings effectSettings;

	[Token(Token = "0x400032A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool isInitialized;

	[Token(Token = "0x6000285")]
	[Address(RVA = "0xFFD1F8", Offset = "0xFFD1F8", VA = "0xFFD1F8")]
	private void GetEffectSettingsComponent(Transform tr)
	{
	}

	[Token(Token = "0x6000286")]
	[Address(RVA = "0xFFD2F4", Offset = "0xFFD2F4", VA = "0xFFD2F4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000287")]
	[Address(RVA = "0xFFD464", Offset = "0xFFD464", VA = "0xFFD464")]
	private void InitDefaultVariables()
	{
	}

	[Token(Token = "0x6000288")]
	[Address(RVA = "0xFFD540", Offset = "0xFFD540", VA = "0xFFD540")]
	private void prefabSettings_CollisionEnter(object sender, CollisionInfo e)
	{
	}

	[Token(Token = "0x6000289")]
	[Address(RVA = "0xFFD5B4", Offset = "0xFFD5B4", VA = "0xFFD5B4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600028A")]
	[Address(RVA = "0xFFD5C4", Offset = "0xFFD5C4", VA = "0xFFD5C4")]
	private void SetupStartDelay()
	{
	}

	[Token(Token = "0x600028B")]
	[Address(RVA = "0xFFD5D0", Offset = "0xFFD5D0", VA = "0xFFD5D0")]
	private void SetupFadeOutDelay()
	{
	}

	[Token(Token = "0x600028C")]
	[Address(RVA = "0xFFD5DC", Offset = "0xFFD5DC", VA = "0xFFD5DC")]
	private void Update()
	{
	}

	[Token(Token = "0x600028D")]
	[Address(RVA = "0xFFD75C", Offset = "0xFFD75C", VA = "0xFFD75C")]
	private void FadeIn()
	{
	}

	[Token(Token = "0x600028E")]
	[Address(RVA = "0xFFD81C", Offset = "0xFFD81C", VA = "0xFFD81C")]
	private void FadeOut()
	{
	}

	[Token(Token = "0x600028F")]
	[Address(RVA = "0xFFD890", Offset = "0xFFD890", VA = "0xFFD890")]
	public FadeInOutLight()
	{
	}
}
[Token(Token = "0x200008C")]
public class FadeInOutParticles : MonoBehaviour
{
	[Token(Token = "0x400032B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private EffectSettings effectSettings;

	[Token(Token = "0x400032C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem[] particles;

	[Token(Token = "0x400032D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool oldVisibleStat;

	[Token(Token = "0x6000290")]
	[Address(RVA = "0xFFD898", Offset = "0xFFD898", VA = "0xFFD898")]
	private void GetEffectSettingsComponent(Transform tr)
	{
	}

	[Token(Token = "0x6000291")]
	[Address(RVA = "0xFFD994", Offset = "0xFFD994", VA = "0xFFD994")]
	private void Start()
	{
	}

	[Token(Token = "0x6000292")]
	[Address(RVA = "0xFFDA24", Offset = "0xFFDA24", VA = "0xFFDA24")]
	private void Update()
	{
	}

	[Token(Token = "0x6000293")]
	[Address(RVA = "0xFFDB50", Offset = "0xFFDB50", VA = "0xFFDB50")]
	public FadeInOutParticles()
	{
	}
}
[Token(Token = "0x200008D")]
public class FadeInOutScale : MonoBehaviour
{
	[Token(Token = "0x400032E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FadeInOutStatus FadeInOutStatus;

	[Token(Token = "0x400032F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float Speed;

	[Token(Token = "0x4000330")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float MaxScale;

	[Token(Token = "0x4000331")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 oldScale;

	[Token(Token = "0x4000332")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float time;

	[Token(Token = "0x4000333")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float oldSin;

	[Token(Token = "0x4000334")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool updateTime;

	[Token(Token = "0x4000335")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private bool canUpdate;

	[Token(Token = "0x4000336")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform t;

	[Token(Token = "0x4000337")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private EffectSettings effectSettings;

	[Token(Token = "0x4000338")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool isInitialized;

	[Token(Token = "0x4000339")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	private bool isCollisionEnter;

	[Token(Token = "0x6000294")]
	[Address(RVA = "0xFFDB58", Offset = "0xFFDB58", VA = "0xFFDB58")]
	private void Start()
	{
	}

	[Token(Token = "0x6000295")]
	[Address(RVA = "0xFFDC80", Offset = "0xFFDC80", VA = "0xFFDC80")]
	private void GetEffectSettingsComponent(Transform tr)
	{
	}

	[Token(Token = "0x6000296")]
	[Address(RVA = "0xFFDD7C", Offset = "0xFFDD7C", VA = "0xFFDD7C")]
	public void InitDefaultVariables()
	{
	}

	[Token(Token = "0x6000297")]
	[Address(RVA = "0xFFDE2C", Offset = "0xFFDE2C", VA = "0xFFDE2C")]
	private void prefabSettings_CollisionEnter(object sender, CollisionInfo e)
	{
	}

	[Token(Token = "0x6000298")]
	[Address(RVA = "0xFFDE3C", Offset = "0xFFDE3C", VA = "0xFFDE3C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000299")]
	[Address(RVA = "0xFFDE4C", Offset = "0xFFDE4C", VA = "0xFFDE4C")]
	private void Update()
	{
	}

	[Token(Token = "0x600029A")]
	[Address(RVA = "0xFFE05C", Offset = "0xFFE05C", VA = "0xFFE05C")]
	public FadeInOutScale()
	{
	}
}
[Token(Token = "0x200008E")]
public class FadeInOutShaderColor : MonoBehaviour
{
	[Token(Token = "0x400033A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string ShaderColorName;

	[Token(Token = "0x400033B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float StartDelay;

	[Token(Token = "0x400033C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float FadeInSpeed;

	[Token(Token = "0x400033D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float FadeOutDelay;

	[Token(Token = "0x400033E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float FadeOutSpeed;

	[Token(Token = "0x400033F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool UseSharedMaterial;

	[Token(Token = "0x4000340")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool FadeOutAfterCollision;

	[Token(Token = "0x4000341")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	public bool UseHideStatus;

	[Token(Token = "0x4000342")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Material mat;

	[Token(Token = "0x4000343")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Color oldColor;

	[Token(Token = "0x4000344")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Color currentColor;

	[Token(Token = "0x4000345")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float oldAlpha;

	[Token(Token = "0x4000346")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float alpha;

	[Token(Token = "0x4000347")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool canStart;

	[Token(Token = "0x4000348")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	private bool canStartFadeOut;

	[Token(Token = "0x4000349")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
	private bool fadeInComplited;

	[Token(Token = "0x400034A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
	private bool fadeOutComplited;

	[Token(Token = "0x400034B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool isCollisionEnter;

	[Token(Token = "0x400034C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
	private bool isStartDelay;

	[Token(Token = "0x400034D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6E")]
	private bool isIn;

	[Token(Token = "0x400034E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6F")]
	private bool isOut;

	[Token(Token = "0x400034F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private EffectSettings effectSettings;

	[Token(Token = "0x4000350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool isInitialized;

	[Token(Token = "0x600029B")]
	[Address(RVA = "0xFFE078", Offset = "0xFFE078", VA = "0xFFE078")]
	private void GetEffectSettingsComponent(Transform tr)
	{
	}

	[Token(Token = "0x600029C")]
	[Address(RVA = "0xFFE174", Offset = "0xFFE174", VA = "0xFFE174")]
	public void UpdateMaterial(Material instanceMaterial)
	{
	}

	[Token(Token = "0x600029D")]
	[Address(RVA = "0xFFE478", Offset = "0xFFE478", VA = "0xFFE478")]
	private void Start()
	{
	}

	[Token(Token = "0x600029E")]
	[Address(RVA = "0xFFE190", Offset = "0xFFE190", VA = "0xFFE190")]
	private void InitMaterial()
	{
	}

	[Token(Token = "0x600029F")]
	[Address(RVA = "0xFFE55C", Offset = "0xFFE55C", VA = "0xFFE55C")]
	private void InitDefaultVariables()
	{
	}

	[Token(Token = "0x60002A0")]
	[Address(RVA = "0xFFE640", Offset = "0xFFE640", VA = "0xFFE640")]
	private void prefabSettings_CollisionEnter(object sender, CollisionInfo e)
	{
	}

	[Token(Token = "0x60002A1")]
	[Address(RVA = "0xFFE6B4", Offset = "0xFFE6B4", VA = "0xFFE6B4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002A2")]
	[Address(RVA = "0xFFE6C4", Offset = "0xFFE6C4", VA = "0xFFE6C4")]
	private void SetupStartDelay()
	{
	}

	[Token(Token = "0x60002A3")]
	[Address(RVA = "0xFFE6D0", Offset = "0xFFE6D0", VA = "0xFFE6D0")]
	private void SetupFadeOutDelay()
	{
	}

	[Token(Token = "0x60002A4")]
	[Address(RVA = "0xFFE6DC", Offset = "0xFFE6DC", VA = "0xFFE6DC")]
	private void Update()
	{
	}

	[Token(Token = "0x60002A5")]
	[Address(RVA = "0xFFE890", Offset = "0xFFE890", VA = "0xFFE890")]
	private void FadeIn()
	{
	}

	[Token(Token = "0x60002A6")]
	[Address(RVA = "0xFFE950", Offset = "0xFFE950", VA = "0xFFE950")]
	private void FadeOut()
	{
	}

	[Token(Token = "0x60002A7")]
	[Address(RVA = "0xFFE9C8", Offset = "0xFFE9C8", VA = "0xFFE9C8")]
	public FadeInOutShaderColor()
	{
	}
}
[Token(Token = "0x200008F")]
public class FadeInOutShaderFloat : MonoBehaviour
{
	[Token(Token = "0x4000351")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string PropertyName;

	[Token(Token = "0x4000352")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float MaxFloat;

	[Token(Token = "0x4000353")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float StartDelay;

	[Token(Token = "0x4000354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float FadeInSpeed;

	[Token(Token = "0x4000355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float FadeOutDelay;

	[Token(Token = "0x4000356")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float FadeOutSpeed;

	[Token(Token = "0x4000357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool FadeOutAfterCollision;

	[Token(Token = "0x4000358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool UseHideStatus;

	[Token(Token = "0x4000359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Material OwnMaterial;

	[Token(Token = "0x400035A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Material mat;

	[Token(Token = "0x400035B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float oldFloat;

	[Token(Token = "0x400035C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float currentFloat;

	[Token(Token = "0x400035D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool canStart;

	[Token(Token = "0x400035E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	private bool canStartFadeOut;

	[Token(Token = "0x400035F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
	private bool fadeInComplited;

	[Token(Token = "0x4000360")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
	private bool fadeOutComplited;

	[Token(Token = "0x4000361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private bool previousFrameVisibleStatus;

	[Token(Token = "0x4000362")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	private bool isCollisionEnter;

	[Token(Token = "0x4000363")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
	private bool isStartDelay;

	[Token(Token = "0x4000364")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x57")]
	private bool isIn;

	[Token(Token = "0x4000365")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool isOut;

	[Token(Token = "0x4000366")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private EffectSettings effectSettings;

	[Token(Token = "0x4000367")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool isInitialized;

	[Token(Token = "0x60002A8")]
	[Address(RVA = "0xFFEA20", Offset = "0xFFEA20", VA = "0xFFEA20")]
	private void GetEffectSettingsComponent(Transform tr)
	{
	}

	[Token(Token = "0x60002A9")]
	[Address(RVA = "0xFFEB1C", Offset = "0xFFEB1C", VA = "0xFFEB1C")]
	private void Start()
	{
	}

	[Token(Token = "0x60002AA")]
	[Address(RVA = "0xFFEEC8", Offset = "0xFFEEC8", VA = "0xFFEEC8")]
	public void UpdateMaterial(Material instanceMaterial)
	{
	}

	[Token(Token = "0x60002AB")]
	[Address(RVA = "0xFFEC00", Offset = "0xFFEC00", VA = "0xFFEC00")]
	private void InitMaterial()
	{
	}

	[Token(Token = "0x60002AC")]
	[Address(RVA = "0xFFEEE4", Offset = "0xFFEEE4", VA = "0xFFEEE4")]
	private void InitDefaultVariables()
	{
	}

	[Token(Token = "0x60002AD")]
	[Address(RVA = "0xFFEFCC", Offset = "0xFFEFCC", VA = "0xFFEFCC")]
	private void prefabSettings_CollisionEnter(object sender, CollisionInfo e)
	{
	}

	[Token(Token = "0x60002AE")]
	[Address(RVA = "0xFFF040", Offset = "0xFFF040", VA = "0xFFF040")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002AF")]
	[Address(RVA = "0xFFF050", Offset = "0xFFF050", VA = "0xFFF050")]
	private void SetupStartDelay()
	{
	}

	[Token(Token = "0x60002B0")]
	[Address(RVA = "0xFFF05C", Offset = "0xFFF05C", VA = "0xFFF05C")]
	private void SetupFadeOutDelay()
	{
	}

	[Token(Token = "0x60002B1")]
	[Address(RVA = "0xFFF068", Offset = "0xFFF068", VA = "0xFFF068")]
	private void Update()
	{
	}

	[Token(Token = "0x60002B2")]
	[Address(RVA = "0xFFF21C", Offset = "0xFFF21C", VA = "0xFFF21C")]
	private void FadeIn()
	{
	}

	[Token(Token = "0x60002B3")]
	[Address(RVA = "0xFFF2D4", Offset = "0xFFF2D4", VA = "0xFFF2D4")]
	private void FadeOut()
	{
	}

	[Token(Token = "0x60002B4")]
	[Address(RVA = "0xFFF348", Offset = "0xFFF348", VA = "0xFFF348")]
	public FadeInOutShaderFloat()
	{
	}
}
[Token(Token = "0x2000090")]
public class FadeInOutSound : MonoBehaviour
{
	[Token(Token = "0x4000368")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float MaxVolume;

	[Token(Token = "0x4000369")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float StartDelay;

	[Token(Token = "0x400036A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float FadeInSpeed;

	[Token(Token = "0x400036B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float FadeOutDelay;

	[Token(Token = "0x400036C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float FadeOutSpeed;

	[Token(Token = "0x400036D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool FadeOutAfterCollision;

	[Token(Token = "0x400036E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public bool UseHideStatus;

	[Token(Token = "0x400036F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AudioSource audioSource;

	[Token(Token = "0x4000370")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float oldVolume;

	[Token(Token = "0x4000371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float currentVolume;

	[Token(Token = "0x4000372")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool canStart;

	[Token(Token = "0x4000373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	private bool canStartFadeOut;

	[Token(Token = "0x4000374")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
	private bool fadeInComplited;

	[Token(Token = "0x4000375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x43")]
	private bool fadeOutComplited;

	[Token(Token = "0x4000376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool isCollisionEnter;

	[Token(Token = "0x4000377")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	private bool allComplited;

	[Token(Token = "0x4000378")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
	private bool isStartDelay;

	[Token(Token = "0x4000379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
	private bool isIn;

	[Token(Token = "0x400037A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool isOut;

	[Token(Token = "0x400037B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private EffectSettings effectSettings;

	[Token(Token = "0x400037C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool isInitialized;

	[Token(Token = "0x60002B5")]
	[Address(RVA = "0xFFF3A8", Offset = "0xFFF3A8", VA = "0xFFF3A8")]
	private void GetEffectSettingsComponent(Transform tr)
	{
	}

	[Token(Token = "0x60002B6")]
	[Address(RVA = "0xFFF4A4", Offset = "0xFFF4A4", VA = "0xFFF4A4")]
	private void Start()
	{
	}

	[Token(Token = "0x60002B7")]
	[Address(RVA = "0xFFF588", Offset = "0xFFF588", VA = "0xFFF588")]
	private void InitSource()
	{
	}

	[Token(Token = "0x60002B8")]
	[Address(RVA = "0xFFF670", Offset = "0xFFF670", VA = "0xFFF670")]
	private void InitDefaultVariables()
	{
	}

	[Token(Token = "0x60002B9")]
	[Address(RVA = "0xFFF754", Offset = "0xFFF754", VA = "0xFFF754")]
	private void prefabSettings_CollisionEnter(object sender, CollisionInfo e)
	{
	}

	[Token(Token = "0x60002BA")]
	[Address(RVA = "0xFFF7C8", Offset = "0xFFF7C8", VA = "0xFFF7C8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002BB")]
	[Address(RVA = "0xFFF7D8", Offset = "0xFFF7D8", VA = "0xFFF7D8")]
	private void SetupStartDelay()
	{
	}

	[Token(Token = "0x60002BC")]
	[Address(RVA = "0xFFF7E4", Offset = "0xFFF7E4", VA = "0xFFF7E4")]
	private void SetupFadeOutDelay()
	{
	}

	[Token(Token = "0x60002BD")]
	[Address(RVA = "0xFFF7F0", Offset = "0xFFF7F0", VA = "0xFFF7F0")]
	private void Update()
	{
	}

	[Token(Token = "0x60002BE")]
	[Address(RVA = "0xFFF990", Offset = "0xFFF990", VA = "0xFFF990")]
	private void FadeIn()
	{
	}

	[Token(Token = "0x60002BF")]
	[Address(RVA = "0xFFFA50", Offset = "0xFFFA50", VA = "0xFFFA50")]
	private void FadeOut()
	{
	}

	[Token(Token = "0x60002C0")]
	[Address(RVA = "0xFFFAC4", Offset = "0xFFFAC4", VA = "0xFFFAC4")]
	public FadeInOutSound()
	{
	}
}
[Token(Token = "0x2000091")]
public enum FadeInOutStatus
{
	[Token(Token = "0x400037E")]
	In,
	[Token(Token = "0x400037F")]
	Out,
	[Token(Token = "0x4000380")]
	InOut,
	[Token(Token = "0x4000381")]
	In_OutAfterCollision,
	[Token(Token = "0x4000382")]
	InAfterCollision,
	[Token(Token = "0x4000383")]
	OutAfterCollision,
	[Token(Token = "0x4000384")]
	InOutAfterCollision
}
[Token(Token = "0x2000092")]
public class FixShaderQueue : MonoBehaviour
{
	[Token(Token = "0x4000385")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int AddQueue;

	[Token(Token = "0x4000386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Renderer rend;

	[Token(Token = "0x60002C1")]
	[Address(RVA = "0xFFFAD4", Offset = "0xFFFAD4", VA = "0xFFFAD4")]
	private void Start()
	{
	}

	[Token(Token = "0x60002C2")]
	[Address(RVA = "0xFFFBE4", Offset = "0xFFFBE4", VA = "0xFFFBE4")]
	private void SetProjectorQueue()
	{
	}

	[Token(Token = "0x60002C3")]
	[Address(RVA = "0xFFFC60", Offset = "0xFFFC60", VA = "0xFFFC60")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60002C4")]
	[Address(RVA = "0xFFFCF4", Offset = "0xFFFCF4", VA = "0xFFFCF4")]
	public FixShaderQueue()
	{
	}
}
[Token(Token = "0x2000093")]
public class OnStartSendCollision : MonoBehaviour
{
	[Token(Token = "0x4000387")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private EffectSettings effectSettings;

	[Token(Token = "0x4000388")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool isInitialized;

	[Token(Token = "0x60002C5")]
	[Address(RVA = "0xFFFD04", Offset = "0xFFFD04", VA = "0xFFFD04")]
	private void GetEffectSettingsComponent(Transform tr)
	{
	}

	[Token(Token = "0x60002C6")]
	[Address(RVA = "0xFFFE00", Offset = "0xFFFE00", VA = "0xFFFE00")]
	private void Start()
	{
	}

	[Token(Token = "0x60002C7")]
	[Address(RVA = "0xFFFE8C", Offset = "0xFFFE8C", VA = "0xFFFE8C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002C8")]
	[Address(RVA = "0xFFFF08", Offset = "0xFFFF08", VA = "0xFFFF08")]
	public OnStartSendCollision()
	{
	}
}
[Token(Token = "0x2000094")]
public class RotateAround : MonoBehaviour
{
	[Token(Token = "0x4000389")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float Speed;

	[Token(Token = "0x400038A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float LifeTime;

	[Token(Token = "0x400038B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float TimeDelay;

	[Token(Token = "0x400038C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float SpeedFadeInTime;

	[Token(Token = "0x400038D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool UseCollision;

	[Token(Token = "0x400038E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public EffectSettings EffectSettings;

	[Token(Token = "0x400038F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector3 axis;

	[Token(Token = "0x4000390")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool canUpdate;

	[Token(Token = "0x4000391")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float currentSpeedFadeIn;

	[Token(Token = "0x4000392")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float allTime;

	[Token(Token = "0x60002C9")]
	[Address(RVA = "0xFFFF10", Offset = "0xFFFF10", VA = "0xFFFF10")]
	private void Start()
	{
	}

	[Token(Token = "0x60002CA")]
	[Address(RVA = "0xFFFFE4", Offset = "0xFFFFE4", VA = "0xFFFFE4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002CB")]
	[Address(RVA = "0xFFFFF4", Offset = "0xFFFFF4", VA = "0xFFFFF4")]
	private void EffectSettings_CollisionEnter(object sender, CollisionInfo e)
	{
	}

	[Token(Token = "0x60002CC")]
	[Address(RVA = "0xFFFFFC", Offset = "0xFFFFFC", VA = "0xFFFFFC")]
	private void ChangeUpdate()
	{
	}

	[Token(Token = "0x60002CD")]
	[Address(RVA = "0x1000008", Offset = "0x1000008", VA = "0x1000008")]
	private void Update()
	{
	}

	[Token(Token = "0x60002CE")]
	[Address(RVA = "0x1000118", Offset = "0x1000118", VA = "0x1000118")]
	public RotateAround()
	{
	}
}
[Token(Token = "0x2000095")]
public class SetPositionOnHit : MonoBehaviour
{
	[Token(Token = "0x4000393")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float OffsetPosition;

	[Token(Token = "0x4000394")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private EffectSettings effectSettings;

	[Token(Token = "0x4000395")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform tRoot;

	[Token(Token = "0x4000396")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool isInitialized;

	[Token(Token = "0x60002CF")]
	[Address(RVA = "0x1000180", Offset = "0x1000180", VA = "0x1000180")]
	private void GetEffectSettingsComponent(Transform tr)
	{
	}

	[Token(Token = "0x60002D0")]
	[Address(RVA = "0x100027C", Offset = "0x100027C", VA = "0x100027C")]
	private void Start()
	{
	}

	[Token(Token = "0x60002D1")]
	[Address(RVA = "0x1000360", Offset = "0x1000360", VA = "0x1000360")]
	private void effectSettings_CollisionEnter(object sender, CollisionInfo e)
	{
	}

	[Token(Token = "0x60002D2")]
	[Address(RVA = "0x10005B8", Offset = "0x10005B8", VA = "0x10005B8")]
	private void Update()
	{
	}

	[Token(Token = "0x60002D3")]
	[Address(RVA = "0x100065C", Offset = "0x100065C", VA = "0x100065C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60002D4")]
	[Address(RVA = "0x10006C4", Offset = "0x10006C4", VA = "0x10006C4")]
	public SetPositionOnHit()
	{
	}
}
[Token(Token = "0x2000096")]
internal class UVTextureAnimator : MonoBehaviour
{
	[Token(Token = "0x2000097")]
	[CompilerGenerated]
	private sealed class <UpdateCorutine>d__29 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UVTextureAnimator <>4__this;

		[Token(Token = "0x1700002B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002E3")]
			[Address(RVA = "0x100163C", Offset = "0x100163C", VA = "0x100163C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002E5")]
			[Address(RVA = "0x1001684", Offset = "0x1001684", VA = "0x1001684", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002E0")]
		[Address(RVA = "0x1001058", Offset = "0x1001058", VA = "0x1001058")]
		[DebuggerHidden]
		public <UpdateCorutine>d__29(int <>1__state)
		{
		}

		[Token(Token = "0x60002E1")]
		[Address(RVA = "0x1001530", Offset = "0x1001530", VA = "0x1001530", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002E2")]
		[Address(RVA = "0x1001534", Offset = "0x1001534", VA = "0x1001534", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002E4")]
		[Address(RVA = "0x1001644", Offset = "0x1001644", VA = "0x1001644", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000397")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material[] AnimatedMaterialsNotInstance;

	[Token(Token = "0x4000398")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int Rows;

	[Token(Token = "0x4000399")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int Columns;

	[Token(Token = "0x400039A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float Fps;

	[Token(Token = "0x400039B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int OffsetMat;

	[Token(Token = "0x400039C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector2 SelfTiling;

	[Token(Token = "0x400039D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool IsLoop;

	[Token(Token = "0x400039E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool IsReverse;

	[Token(Token = "0x400039F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	public bool IsRandomOffsetForInctance;

	[Token(Token = "0x40003A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
	public bool IsBump;

	[Token(Token = "0x40003A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool IsHeight;

	[Token(Token = "0x40003A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	public bool IsCutOut;

	[Token(Token = "0x40003A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
	private bool isInizialised;

	[Token(Token = "0x40003A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int index;

	[Token(Token = "0x40003A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int count;

	[Token(Token = "0x40003A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int allCount;

	[Token(Token = "0x40003A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float deltaFps;

	[Token(Token = "0x40003A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool isVisible;

	[Token(Token = "0x40003A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	private bool isCorutineStarted;

	[Token(Token = "0x40003AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Renderer currentRenderer;

	[Token(Token = "0x40003AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Material instanceMaterial;

	[Token(Token = "0x60002D5")]
	[Address(RVA = "0x10006CC", Offset = "0x10006CC", VA = "0x10006CC")]
	private void Start()
	{
	}

	[Token(Token = "0x60002D6")]
	[Address(RVA = "0x1000FA8", Offset = "0x1000FA8", VA = "0x1000FA8")]
	public void SetInstanceMaterial(Material mat, Vector2 offsetMat)
	{
	}

	[Token(Token = "0x60002D7")]
	[Address(RVA = "0x100090C", Offset = "0x100090C", VA = "0x100090C")]
	private void InitDefaultVariables()
	{
	}

	[Token(Token = "0x60002D8")]
	[Address(RVA = "0x1000708", Offset = "0x1000708", VA = "0x1000708")]
	private void InitMaterial()
	{
	}

	[Token(Token = "0x60002D9")]
	[Address(RVA = "0x1000FC4", Offset = "0x1000FC4", VA = "0x1000FC4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002DA")]
	[Address(RVA = "0x100100C", Offset = "0x100100C", VA = "0x100100C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60002DB")]
	[Address(RVA = "0x1001018", Offset = "0x1001018", VA = "0x1001018")]
	private void OnBecameVisible()
	{
	}

	[Token(Token = "0x60002DC")]
	[Address(RVA = "0x1001050", Offset = "0x1001050", VA = "0x1001050")]
	private void OnBecameInvisible()
	{
	}

	[Token(Token = "0x60002DD")]
	[Address(RVA = "0x1000F34", Offset = "0x1000F34", VA = "0x1000F34")]
	[IteratorStateMachine(typeof(<UpdateCorutine>d__29))]
	private IEnumerator UpdateCorutine()
	{
		return null;
	}

	[Token(Token = "0x60002DE")]
	[Address(RVA = "0x1001080", Offset = "0x1001080", VA = "0x1001080")]
	private void UpdateCorutineFrame()
	{
	}

	[Token(Token = "0x60002DF")]
	[Address(RVA = "0x1001510", Offset = "0x1001510", VA = "0x1001510")]
	public UVTextureAnimator()
	{
	}
}
[Token(Token = "0x2000098")]
public class RFX4_AudioCurves : MonoBehaviour
{
	[Token(Token = "0x40003AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve AudioCurve;

	[Token(Token = "0x40003B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x40003B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool IsLoop;

	[Token(Token = "0x40003B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	private bool canUpdate;

	[Token(Token = "0x40003B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float startTime;

	[Token(Token = "0x40003B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AudioSource audioSource;

	[Token(Token = "0x40003B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float startVolume;

	[Token(Token = "0x60002E6")]
	[Address(RVA = "0x100168C", Offset = "0x100168C", VA = "0x100168C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002E7")]
	[Address(RVA = "0x1001728", Offset = "0x1001728", VA = "0x1001728")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002E8")]
	[Address(RVA = "0x100174C", Offset = "0x100174C", VA = "0x100174C")]
	private void Update()
	{
	}

	[Token(Token = "0x60002E9")]
	[Address(RVA = "0x10017D8", Offset = "0x10017D8", VA = "0x10017D8")]
	public RFX4_AudioCurves()
	{
	}
}
[Token(Token = "0x2000099")]
public class RFX4_LightCurves : MonoBehaviour
{
	[Token(Token = "0x40003B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve LightCurve;

	[Token(Token = "0x40003B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x40003B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float GraphIntensityMultiplier;

	[Token(Token = "0x40003B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool IsLoop;

	[Token(Token = "0x40003BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool UseShadowsIfPossible;

	[Token(Token = "0x40003BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	[HideInInspector]
	public bool canUpdate;

	[Token(Token = "0x40003BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float startTime;

	[Token(Token = "0x40003BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Light lightSource;

	[Token(Token = "0x60002EA")]
	[Address(RVA = "0x1001820", Offset = "0x1001820", VA = "0x1001820")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002EB")]
	[Address(RVA = "0x10018A4", Offset = "0x10018A4", VA = "0x10018A4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002EC")]
	[Address(RVA = "0x10018C8", Offset = "0x10018C8", VA = "0x10018C8")]
	private void Update()
	{
	}

	[Token(Token = "0x60002ED")]
	[Address(RVA = "0x100196C", Offset = "0x100196C", VA = "0x100196C")]
	public RFX4_LightCurves()
	{
	}
}
[Token(Token = "0x200009A")]
public class RFX4_PhysicsForceCurves : MonoBehaviour
{
	[Token(Token = "0x40003BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float ForceRadius;

	[Token(Token = "0x40003BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float ForceMultiplier;

	[Token(Token = "0x40003C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve ForceCurve;

	[Token(Token = "0x40003C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ForceMode ForceMode;

	[Token(Token = "0x40003C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x40003C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float GraphIntensityMultiplier;

	[Token(Token = "0x40003C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool IsLoop;

	[Token(Token = "0x40003C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float DestoryDistance;

	[Token(Token = "0x40003C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool UseDistanceScale;

	[Token(Token = "0x40003C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AnimationCurve DistanceScaleCurve;

	[Token(Token = "0x40003C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool UseUPVector;

	[Token(Token = "0x40003C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AnimationCurve DragCurve;

	[Token(Token = "0x40003CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float DragGraphTimeMultiplier;

	[Token(Token = "0x40003CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float DragGraphIntensityMultiplier;

	[Token(Token = "0x40003CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string AffectedName;

	[Token(Token = "0x40003CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[HideInInspector]
	public float forceAdditionalMultiplier;

	[Token(Token = "0x40003CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool canUpdate;

	[Token(Token = "0x40003CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float startTime;

	[Token(Token = "0x40003D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Transform t;

	[Token(Token = "0x60002EE")]
	[Address(RVA = "0x10019B4", Offset = "0x10019B4", VA = "0x10019B4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002EF")]
	[Address(RVA = "0x10019D8", Offset = "0x10019D8", VA = "0x10019D8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002F0")]
	[Address(RVA = "0x1001A04", Offset = "0x1001A04", VA = "0x1001A04")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60002F1")]
	[Address(RVA = "0x1001FE4", Offset = "0x1001FE4", VA = "0x1001FE4")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60002F2")]
	[Address(RVA = "0x1002038", Offset = "0x1002038", VA = "0x1002038")]
	public RFX4_PhysicsForceCurves()
	{
	}
}
[Token(Token = "0x200009B")]
public class RFX4_ScaleCurves : MonoBehaviour
{
	[Token(Token = "0x40003D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve FloatCurve;

	[Token(Token = "0x40003D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x40003D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float GraphIntensityMultiplier;

	[Token(Token = "0x40003D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool IsLoop;

	[Token(Token = "0x40003D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool canUpdate;

	[Token(Token = "0x40003D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float startTime;

	[Token(Token = "0x40003D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform t;

	[Token(Token = "0x40003D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int nameId;

	[Token(Token = "0x40003D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Projector proj;

	[Token(Token = "0x40003DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3 startScale;

	[Token(Token = "0x60002F3")]
	[Address(RVA = "0x1002100", Offset = "0x1002100", VA = "0x1002100")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002F4")]
	[Address(RVA = "0x10021F4", Offset = "0x10021F4", VA = "0x10021F4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002F5")]
	[Address(RVA = "0x1002268", Offset = "0x1002268", VA = "0x1002268")]
	private void Update()
	{
	}

	[Token(Token = "0x60002F6")]
	[Address(RVA = "0x1002374", Offset = "0x1002374", VA = "0x1002374")]
	public RFX4_ScaleCurves()
	{
	}
}
[Token(Token = "0x200009C")]
public class RFX4_ShaderColorGradient : MonoBehaviour
{
	[Token(Token = "0x40003DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RFX4_ShaderProperties ShaderColorProperty;

	[Token(Token = "0x40003DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Gradient Color;

	[Token(Token = "0x40003DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float TimeMultiplier;

	[Token(Token = "0x40003DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool IsLoop;

	[Token(Token = "0x40003DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public float HUE;

	[Token(Token = "0x40003E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[HideInInspector]
	public bool canUpdate;

	[Token(Token = "0x40003E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int propertyID;

	[Token(Token = "0x40003E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float startTime;

	[Token(Token = "0x40003E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Color startColor;

	[Token(Token = "0x40003E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool isInitialized;

	[Token(Token = "0x40003E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private string shaderProperty;

	[Token(Token = "0x40003E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private MaterialPropertyBlock props;

	[Token(Token = "0x40003E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Renderer rend;

	[Token(Token = "0x60002F7")]
	[Address(RVA = "0x10023BC", Offset = "0x10023BC", VA = "0x10023BC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002F8")]
	[Address(RVA = "0x1002538", Offset = "0x1002538", VA = "0x1002538")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002F9")]
	[Address(RVA = "0x1002614", Offset = "0x1002614", VA = "0x1002614")]
	private void Update()
	{
	}

	[Token(Token = "0x60002FA")]
	[Address(RVA = "0x100287C", Offset = "0x100287C", VA = "0x100287C")]
	public RFX4_ShaderColorGradient()
	{
	}
}
[Token(Token = "0x200009D")]
public class RFX4_ShaderFloatCurve : MonoBehaviour
{
	[Token(Token = "0x40003E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RFX4_ShaderProperties ShaderFloatProperty;

	[Token(Token = "0x40003E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve FloatCurve;

	[Token(Token = "0x40003EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x40003EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float GraphIntensityMultiplier;

	[Token(Token = "0x40003EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool IsLoop;

	[Token(Token = "0x40003ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool canUpdate;

	[Token(Token = "0x40003EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float startTime;

	[Token(Token = "0x40003EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int propertyID;

	[Token(Token = "0x40003F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private string shaderProperty;

	[Token(Token = "0x40003F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool isInitialized;

	[Token(Token = "0x40003F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private MaterialPropertyBlock props;

	[Token(Token = "0x40003F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Renderer rend;

	[Token(Token = "0x60002FB")]
	[Address(RVA = "0x1002900", Offset = "0x1002900", VA = "0x1002900")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002FC")]
	[Address(RVA = "0x1002A4C", Offset = "0x1002A4C", VA = "0x1002A4C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002FD")]
	[Address(RVA = "0x1002AC8", Offset = "0x1002AC8", VA = "0x1002AC8")]
	private void Update()
	{
	}

	[Token(Token = "0x60002FE")]
	[Address(RVA = "0x1002B7C", Offset = "0x1002B7C", VA = "0x1002B7C")]
	public RFX4_ShaderFloatCurve()
	{
	}
}
[Token(Token = "0x200009E")]
public enum RFX4_ShaderProperties
{
	[Token(Token = "0x40003F5")]
	_TintColor,
	[Token(Token = "0x40003F6")]
	_Cutoff,
	[Token(Token = "0x40003F7")]
	_Color,
	[Token(Token = "0x40003F8")]
	_EmissionColor,
	[Token(Token = "0x40003F9")]
	_MaskPow,
	[Token(Token = "0x40003FA")]
	_Cutout,
	[Token(Token = "0x40003FB")]
	_Speed,
	[Token(Token = "0x40003FC")]
	_BumpAmt,
	[Token(Token = "0x40003FD")]
	_MainColor,
	[Token(Token = "0x40003FE")]
	_Distortion,
	[Token(Token = "0x40003FF")]
	_FresnelColor
}
[Token(Token = "0x200009F")]
public class RFX4_WindCurves : MonoBehaviour
{
	[Token(Token = "0x4000400")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve WindCurve;

	[Token(Token = "0x4000401")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x4000402")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float GraphIntensityMultiplier;

	[Token(Token = "0x4000403")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool IsLoop;

	[Token(Token = "0x4000404")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool canUpdate;

	[Token(Token = "0x4000405")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float startTime;

	[Token(Token = "0x4000406")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private WindZone windZone;

	[Token(Token = "0x60002FF")]
	[Address(RVA = "0x1002BCC", Offset = "0x1002BCC", VA = "0x1002BCC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000300")]
	[Address(RVA = "0x1002C80", Offset = "0x1002C80", VA = "0x1002C80")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000301")]
	[Address(RVA = "0x1002CA4", Offset = "0x1002CA4", VA = "0x1002CA4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000302")]
	[Address(RVA = "0x1002D30", Offset = "0x1002D30", VA = "0x1002D30")]
	public RFX4_WindCurves()
	{
	}
}
[Token(Token = "0x20000A0")]
public class RFX4_EffectSettings : MonoBehaviour
{
	[Token(Token = "0x20000A1")]
	[CompilerGenerated]
	private sealed class <Fadeout>d__32 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RFX4_EffectSettings <>4__this;

		[Token(Token = "0x1700002D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000314")]
			[Address(RVA = "0x1004954", Offset = "0x1004954", VA = "0x1004954", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000316")]
			[Address(RVA = "0x100499C", Offset = "0x100499C", VA = "0x100499C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000311")]
		[Address(RVA = "0x1004294", Offset = "0x1004294", VA = "0x1004294")]
		[DebuggerHidden]
		public <Fadeout>d__32(int <>1__state)
		{
		}

		[Token(Token = "0x6000312")]
		[Address(RVA = "0x1004864", Offset = "0x1004864", VA = "0x1004864", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000313")]
		[Address(RVA = "0x1004868", Offset = "0x1004868", VA = "0x1004868", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000315")]
		[Address(RVA = "0x100495C", Offset = "0x100495C", VA = "0x100495C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000407")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Range(0.1f, 1f)]
	public float ParticlesBudget;

	[Token(Token = "0x4000408")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool UseLightShadows;

	[Token(Token = "0x4000409")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool UseFastFlatDecalsForMobiles;

	[Token(Token = "0x400040A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	public bool UseCustomColor;

	[Token(Token = "0x400040B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Color EffectColor;

	[Token(Token = "0x400040C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool IsVisible;

	[Token(Token = "0x400040D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float FadeoutTime;

	[Token(Token = "0x400040E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool UseCollisionDetection;

	[Token(Token = "0x400040F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool LimitMaxDistance;

	[Token(Token = "0x4000410")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float MaxDistnace;

	[Token(Token = "0x4000411")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float Mass;

	[Token(Token = "0x4000412")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float Speed;

	[Token(Token = "0x4000413")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float AirDrag;

	[Token(Token = "0x4000414")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool UseGravity;

	[Token(Token = "0x4000415")]
	private const string distortionNamePC = "KriptoFX/RFX4/Distortion";

	[Token(Token = "0x4000416")]
	private const string distortionNameMobile = "KriptoFX/RFX4/DistortionMobile";

	[Token(Token = "0x4000417")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	private bool isCheckedDistortion;

	[Token(Token = "0x4000418")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
	private bool prevIsVisible;

	[Token(Token = "0x4000419")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float currentFadeoutTime;

	[Token(Token = "0x400041A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Renderer[] renderers;

	[Token(Token = "0x400041B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Renderer[] skinRenderers;

	[Token(Token = "0x400041C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Light[] lights;

	[Token(Token = "0x400041D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private ParticleSystem[] particleSystems;

	[Token(Token = "0x400041E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private AudioSource[] audioSources;

	[Token(Token = "0x400041F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private string[] colorProperties;

	[Token(Token = "0x6000303")]
	[Address(RVA = "0x1002D78", Offset = "0x1002D78", VA = "0x1002D78")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000304")]
	[Address(RVA = "0x1002EBC", Offset = "0x1002EBC", VA = "0x1002EBC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000305")]
	[Address(RVA = "0x1003528", Offset = "0x1003528", VA = "0x1003528")]
	private void Update()
	{
	}

	[Token(Token = "0x6000306")]
	[Address(RVA = "0x1002F28", Offset = "0x1002F28", VA = "0x1002F28")]
	private void ChangeParticlesBudget(float particlesMul)
	{
	}

	[Token(Token = "0x6000307")]
	[Address(RVA = "0x1003190", Offset = "0x1003190", VA = "0x1003190")]
	public void ChangeParticleColor()
	{
	}

	[Token(Token = "0x6000308")]
	[Address(RVA = "0x1003330", Offset = "0x1003330", VA = "0x1003330")]
	public void SetFlatDecals()
	{
	}

	[Token(Token = "0x6000309")]
	[Address(RVA = "0x10033B8", Offset = "0x10033B8", VA = "0x10033B8")]
	public void DisableShadows()
	{
	}

	[Token(Token = "0x600030A")]
	[Address(RVA = "0x10033B0", Offset = "0x10033B0", VA = "0x10033B0")]
	private bool IsMobilePlatform()
	{
		return default(bool);
	}

	[Token(Token = "0x600030B")]
	[Address(RVA = "0x1003578", Offset = "0x1003578", VA = "0x1003578")]
	[IteratorStateMachine(typeof(<Fadeout>d__32))]
	private IEnumerator Fadeout()
	{
		return null;
	}

	[Token(Token = "0x600030C")]
	[Address(RVA = "0x10042BC", Offset = "0x10042BC", VA = "0x10042BC")]
	private void UpdateAlphaByProperties(Material mat, float overrideAlpha = -1f)
	{
	}

	[Token(Token = "0x600030D")]
	[Address(RVA = "0x10043A0", Offset = "0x10043A0", VA = "0x10043A0")]
	private void ChangeAlphaFade()
	{
	}

	[Token(Token = "0x600030E")]
	[Address(RVA = "0x1002D84", Offset = "0x1002D84", VA = "0x1002D84")]
	private void CacheRenderers()
	{
	}

	[Token(Token = "0x600030F")]
	[Address(RVA = "0x10035EC", Offset = "0x10035EC", VA = "0x10035EC")]
	private void Fadein()
	{
	}

	[Token(Token = "0x6000310")]
	[Address(RVA = "0x1004698", Offset = "0x1004698", VA = "0x1004698")]
	public RFX4_EffectSettings()
	{
	}
}
[Token(Token = "0x20000A2")]
public class RFX4_CollisionPropertyDeactiavtion : MonoBehaviour
{
	[Token(Token = "0x4000423")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float DeactivateTimeDelay;

	[Token(Token = "0x4000424")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float startTime;

	[Token(Token = "0x4000425")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private WindZone windZone;

	[Token(Token = "0x4000426")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem ps;

	[Token(Token = "0x4000427")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem.CollisionModule collisionModule;

	[Token(Token = "0x6000317")]
	[Address(RVA = "0x10049A4", Offset = "0x10049A4", VA = "0x10049A4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000318")]
	[Address(RVA = "0x1004A24", Offset = "0x1004A24", VA = "0x1004A24")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000319")]
	[Address(RVA = "0x1004A4C", Offset = "0x1004A4C", VA = "0x1004A4C")]
	private void Update()
	{
	}

	[Token(Token = "0x600031A")]
	[Address(RVA = "0x1004A88", Offset = "0x1004A88", VA = "0x1004A88")]
	public RFX4_CollisionPropertyDeactiavtion()
	{
	}
}
[Token(Token = "0x20000A3")]
public class RFX4_ParticleGravityDelay : MonoBehaviour
{
	[Token(Token = "0x4000428")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve GravityByTime;

	[Token(Token = "0x4000429")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float TimeMultiplier;

	[Token(Token = "0x400042A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Space]
	public float GravityMultiplierMin;

	[Token(Token = "0x400042B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float GravityMultiplierMax;

	[Token(Token = "0x400042C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem.MainModule main;

	[Token(Token = "0x400042D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float startTime;

	[Token(Token = "0x400042E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float startMinGrav;

	[Token(Token = "0x400042F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float startMaxGrav;

	[Token(Token = "0x600031B")]
	[Address(RVA = "0x1004A98", Offset = "0x1004A98", VA = "0x1004A98")]
	private void Awake()
	{
	}

	[Token(Token = "0x600031C")]
	[Address(RVA = "0x1004B64", Offset = "0x1004B64", VA = "0x1004B64")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600031D")]
	[Address(RVA = "0x1004BEC", Offset = "0x1004BEC", VA = "0x1004BEC")]
	private void Update()
	{
	}

	[Token(Token = "0x600031E")]
	[Address(RVA = "0x1004CB4", Offset = "0x1004CB4", VA = "0x1004CB4")]
	public RFX4_ParticleGravityDelay()
	{
	}
}
[Token(Token = "0x20000A4")]
[RequireComponent(typeof(ParticleSystem))]
[ExecuteInEditMode]
public class RFX4_ParticleLight : MonoBehaviour
{
	[Token(Token = "0x4000430")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float LightIntencityMultiplayer;

	[Token(Token = "0x4000431")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool UseShadows;

	[Token(Token = "0x4000432")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int LightsLimit;

	[Token(Token = "0x4000433")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem ps;

	[Token(Token = "0x4000434")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x4000435")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Light[] lights;

	[Token(Token = "0x4000436")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool isLocalSpace;

	[Token(Token = "0x600031F")]
	[Address(RVA = "0x1004D08", Offset = "0x1004D08", VA = "0x1004D08")]
	private void Start()
	{
	}

	[Token(Token = "0x6000320")]
	[Address(RVA = "0x1005058", Offset = "0x1005058", VA = "0x1005058")]
	private void Update()
	{
	}

	[Token(Token = "0x6000321")]
	[Address(RVA = "0x1005418", Offset = "0x1005418", VA = "0x1005418")]
	public RFX4_ParticleLight()
	{
	}
}
[Token(Token = "0x20000A5")]
[RequireComponent(typeof(ParticleSystem))]
public class RFX4_ParticleTrail : MonoBehaviour
{
	[Token(Token = "0x4000437")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject Target;

	[Token(Token = "0x4000438")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector2 DefaultSizeMultiplayer;

	[Token(Token = "0x4000439")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float VertexLifeTime;

	[Token(Token = "0x400043A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float TrailLifeTime;

	[Token(Token = "0x400043B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool UseShaderMaterial;

	[Token(Token = "0x400043C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Material TrailMaterial;

	[Token(Token = "0x400043D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool UseColorOverLifeTime;

	[Token(Token = "0x400043E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Gradient ColorOverLifeTime;

	[Token(Token = "0x400043F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public RFX4_ShaderProperties colorShaderProperty;

	[Token(Token = "0x4000440")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float ColorLifeTime;

	[Token(Token = "0x4000441")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool UseUvAnimation;

	[Token(Token = "0x4000442")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public int TilesX;

	[Token(Token = "0x4000443")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public int TilesY;

	[Token(Token = "0x4000444")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public int FPS;

	[Token(Token = "0x4000445")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool IsLoop;

	[Token(Token = "0x4000446")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[Range(0.001f, 1f)]
	public float MinVertexDistance;

	[Token(Token = "0x4000447")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool GetVelocityFromParticleSystem;

	[Token(Token = "0x4000448")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float Gravity;

	[Token(Token = "0x4000449")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Vector3 Force;

	[Token(Token = "0x400044A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float InheritVelocity;

	[Token(Token = "0x400044B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float Drag;

	[Token(Token = "0x400044C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[Range(0.001f, 10f)]
	public float Frequency;

	[Token(Token = "0x400044D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[Range(0.001f, 10f)]
	public float OffsetSpeed;

	[Token(Token = "0x400044E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public bool RandomTurbulenceOffset;

	[Token(Token = "0x400044F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Range(0.001f, 10f)]
	public float Amplitude;

	[Token(Token = "0x4000450")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public float TurbulenceStrength;

	[Token(Token = "0x4000451")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public AnimationCurve VelocityByDistance;

	[Token(Token = "0x4000452")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public float AproximatedFlyDistance;

	[Token(Token = "0x4000453")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public bool SmoothCurves;

	[Token(Token = "0x4000454")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Dictionary<int, LineRenderer> dict;

	[Token(Token = "0x4000455")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private ParticleSystem ps;

	[Token(Token = "0x4000456")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x4000457")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private TrailRenderer[] trails;

	[Token(Token = "0x4000458")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Color psColor;

	[Token(Token = "0x4000459")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Transform targetT;

	[Token(Token = "0x400045A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private int layer;

	[Token(Token = "0x400045B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private bool isLocalSpace;

	[Token(Token = "0x400045C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private Transform t;

	[Token(Token = "0x6000322")]
	[Address(RVA = "0x1005430", Offset = "0x1005430", VA = "0x1005430")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000323")]
	[Address(RVA = "0x1005DF0", Offset = "0x1005DF0", VA = "0x1005DF0")]
	private void ClearTrails()
	{
	}

	[Token(Token = "0x6000324")]
	[Address(RVA = "0x100564C", Offset = "0x100564C", VA = "0x100564C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000325")]
	[Address(RVA = "0x1006010", Offset = "0x1006010", VA = "0x1006010")]
	private void InitTrailRenderer(GameObject go)
	{
	}

	[Token(Token = "0x6000326")]
	[Address(RVA = "0x1005EE8", Offset = "0x1005EE8", VA = "0x1005EE8")]
	private void RemoveEmptyTrails()
	{
	}

	[Token(Token = "0x6000327")]
	[Address(RVA = "0x10060E8", Offset = "0x10060E8", VA = "0x10060E8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000328")]
	[Address(RVA = "0x10062E8", Offset = "0x10062E8", VA = "0x10062E8")]
	public RFX4_ParticleTrail()
	{
	}
}
[Token(Token = "0x20000A6")]
[RequireComponent(typeof(ParticleSystem))]
[ExecuteInEditMode]
public class RFX4_Turbulence : MonoBehaviour
{
	[Token(Token = "0x20000A7")]
	public enum MoveMethodEnum
	{
		[Token(Token = "0x400047B")]
		Position,
		[Token(Token = "0x400047C")]
		Velocity,
		[Token(Token = "0x400047D")]
		RelativePosition
	}

	[Token(Token = "0x20000A8")]
	public enum PerfomanceEnum
	{
		[Token(Token = "0x400047F")]
		High,
		[Token(Token = "0x4000480")]
		Low
	}

	[Token(Token = "0x400045D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float TurbulenceStrenght;

	[Token(Token = "0x400045E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool TurbulenceByTime;

	[Token(Token = "0x400045F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float TimeDelay;

	[Token(Token = "0x4000460")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationCurve TurbulenceStrengthByTime;

	[Token(Token = "0x4000461")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 Frequency;

	[Token(Token = "0x4000462")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Vector3 OffsetSpeed;

	[Token(Token = "0x4000463")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector3 Amplitude;

	[Token(Token = "0x4000464")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public Vector3 GlobalForce;

	[Token(Token = "0x4000465")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool UseGlobalOffset;

	[Token(Token = "0x4000466")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public MoveMethodEnum MoveMethod;

	[Token(Token = "0x4000467")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public PerfomanceEnum Perfomance;

	[Token(Token = "0x4000468")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float ThreshholdSpeed;

	[Token(Token = "0x4000469")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public AnimationCurve VelocityByDistance;

	[Token(Token = "0x400046A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float AproximatedFlyDistance;

	[Token(Token = "0x400046B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float lastStopTime;

	[Token(Token = "0x400046C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Vector3 currentOffset;

	[Token(Token = "0x400046D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private float deltaTime;

	[Token(Token = "0x400046E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float deltaTimeLastUpdateOffset;

	[Token(Token = "0x400046F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private ParticleSystem.Particle[] particleArray;

	[Token(Token = "0x4000470")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private ParticleSystem particleSys;

	[Token(Token = "0x4000471")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float time;

	[Token(Token = "0x4000472")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private int currentSplit;

	[Token(Token = "0x4000473")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private float fpsTime;

	[Token(Token = "0x4000474")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private int FPS;

	[Token(Token = "0x4000475")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private int splitUpdate;

	[Token(Token = "0x4000476")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private PerfomanceEnum perfomanceOldSettings;

	[Token(Token = "0x4000477")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private bool skipFrame;

	[Token(Token = "0x4000478")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Transform t;

	[Token(Token = "0x4000479")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private float currentDelay;

	[Token(Token = "0x6000329")]
	[Address(RVA = "0x1006488", Offset = "0x1006488", VA = "0x1006488")]
	private void Start()
	{
	}

	[Token(Token = "0x600032A")]
	[Address(RVA = "0x1006640", Offset = "0x1006640", VA = "0x1006640")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600032B")]
	[Address(RVA = "0x1006648", Offset = "0x1006648", VA = "0x1006648")]
	private void Update()
	{
	}

	[Token(Token = "0x600032C")]
	[Address(RVA = "0x10065F0", Offset = "0x10065F0", VA = "0x10065F0")]
	private void UpdatePerfomanceSettings()
	{
	}

	[Token(Token = "0x600032D")]
	[Address(RVA = "0x1006854", Offset = "0x1006854", VA = "0x1006854")]
	private void UpdateTurbulence()
	{
	}

	[Token(Token = "0x600032E")]
	[Address(RVA = "0x1006F30", Offset = "0x1006F30", VA = "0x1006F30")]
	public RFX4_Turbulence()
	{
	}
}
[Token(Token = "0x20000A9")]
public class RFX4_MobileDistortion : MonoBehaviour
{
	[Token(Token = "0x4000481")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool IsActive;

	[Token(Token = "0x4000482")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private CommandBuffer buf;

	[Token(Token = "0x4000483")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Camera cam;

	[Token(Token = "0x4000484")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool bufferIsAdded;

	[Token(Token = "0x600032F")]
	[Address(RVA = "0x1006FE0", Offset = "0x1006FE0", VA = "0x1006FE0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000330")]
	[Address(RVA = "0x1007040", Offset = "0x1007040", VA = "0x1007040")]
	private void CreateBuffer()
	{
	}

	[Token(Token = "0x6000331")]
	[Address(RVA = "0x1007294", Offset = "0x1007294", VA = "0x1007294")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000332")]
	[Address(RVA = "0x10072CC", Offset = "0x10072CC", VA = "0x10072CC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000333")]
	[Address(RVA = "0x1007298", Offset = "0x1007298", VA = "0x1007298")]
	private void AddBuffer()
	{
	}

	[Token(Token = "0x6000334")]
	[Address(RVA = "0x10072D0", Offset = "0x10072D0", VA = "0x10072D0")]
	private void RemoveBuffer()
	{
	}

	[Token(Token = "0x6000335")]
	[Address(RVA = "0x1007300", Offset = "0x1007300", VA = "0x1007300")]
	private void Update()
	{
	}

	[Token(Token = "0x6000336")]
	[Address(RVA = "0x1007320", Offset = "0x1007320", VA = "0x1007320")]
	private bool IsSupportedHdr()
	{
		return default(bool);
	}

	[Token(Token = "0x6000337")]
	[Address(RVA = "0x1007340", Offset = "0x1007340", VA = "0x1007340")]
	public RFX4_MobileDistortion()
	{
	}
}
[Token(Token = "0x20000AA")]
public class RFX4_PerPlatformSettings : MonoBehaviour
{
	[Token(Token = "0x4000485")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool DisableOnMobiles;

	[Token(Token = "0x4000486")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool RenderMobileDistortion;

	[Token(Token = "0x4000487")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Range(0.1f, 1f)]
	public float ParticleBudgetForMobiles;

	[Token(Token = "0x4000488")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool isMobile;

	[Token(Token = "0x6000338")]
	[Address(RVA = "0x1007350", Offset = "0x1007350", VA = "0x1007350")]
	private void Start()
	{
	}

	[Token(Token = "0x6000339")]
	[Address(RVA = "0x1007354", Offset = "0x1007354", VA = "0x1007354")]
	private void Awake()
	{
	}

	[Token(Token = "0x600033A")]
	[Address(RVA = "0x1007790", Offset = "0x1007790", VA = "0x1007790")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600033B")]
	[Address(RVA = "0x10078A8", Offset = "0x10078A8", VA = "0x10078A8")]
	private void Update()
	{
	}

	[Token(Token = "0x600033C")]
	[Address(RVA = "0x10078A4", Offset = "0x10078A4", VA = "0x10078A4")]
	private void LWRP_Rendering()
	{
	}

	[Token(Token = "0x600033D")]
	[Address(RVA = "0x10078AC", Offset = "0x10078AC", VA = "0x10078AC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600033E")]
	[Address(RVA = "0x10073B4", Offset = "0x10073B4", VA = "0x10073B4")]
	private bool IsMobilePlatform()
	{
		return default(bool);
	}

	[Token(Token = "0x600033F")]
	[Address(RVA = "0x10073BC", Offset = "0x10073BC", VA = "0x10073BC")]
	private void ChangeParticlesBudget(float particlesMul)
	{
	}

	[Token(Token = "0x6000340")]
	[Address(RVA = "0x10079B0", Offset = "0x10079B0", VA = "0x10079B0")]
	public RFX4_PerPlatformSettings()
	{
	}
}
[Token(Token = "0x20000AB")]
public class RFX4_CameraShake : MonoBehaviour
{
	[Token(Token = "0x20000AC")]
	[CompilerGenerated]
	private sealed class <Shake>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RFX4_CameraShake <>4__this;

		[Token(Token = "0x4000495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <elapsed>5__2;

		[Token(Token = "0x4000496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform <camT>5__3;

		[Token(Token = "0x4000497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 <originalCamRotation>5__4;

		[Token(Token = "0x4000498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 <direction>5__5;

		[Token(Token = "0x4000499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float <time>5__6;

		[Token(Token = "0x400049A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float <randomStart>5__7;

		[Token(Token = "0x400049B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float <distanceDamper>5__8;

		[Token(Token = "0x400049C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 <oldRotation>5__9;

		[Token(Token = "0x1700002F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000349")]
			[Address(RVA = "0x100821C", Offset = "0x100821C", VA = "0x100821C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000030")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600034B")]
			[Address(RVA = "0x1008264", Offset = "0x1008264", VA = "0x1008264", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000346")]
		[Address(RVA = "0x1007B9C", Offset = "0x1007B9C", VA = "0x1007B9C")]
		[DebuggerHidden]
		public <Shake>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x6000347")]
		[Address(RVA = "0x1007C20", Offset = "0x1007C20", VA = "0x1007C20", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000348")]
		[Address(RVA = "0x1007C24", Offset = "0x1007C24", VA = "0x1007C24", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600034A")]
		[Address(RVA = "0x1008224", Offset = "0x1008224", VA = "0x1008224", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000489")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve ShakeCurve;

	[Token(Token = "0x400048A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Duration;

	[Token(Token = "0x400048B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float Speed;

	[Token(Token = "0x400048C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float Magnitude;

	[Token(Token = "0x400048D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float DistanceForce;

	[Token(Token = "0x400048E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float RotationDamper;

	[Token(Token = "0x400048F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool IsEnabled;

	[Token(Token = "0x4000490")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	private bool isPlaying;

	[Token(Token = "0x4000491")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
	[HideInInspector]
	public bool canUpdate;

	[Token(Token = "0x6000341")]
	[Address(RVA = "0x10079C0", Offset = "0x10079C0", VA = "0x10079C0")]
	private void PlayShake()
	{
	}

	[Token(Token = "0x6000342")]
	[Address(RVA = "0x1007A60", Offset = "0x1007A60", VA = "0x1007A60")]
	private void Update()
	{
	}

	[Token(Token = "0x6000343")]
	[Address(RVA = "0x1007A7C", Offset = "0x1007A7C", VA = "0x1007A7C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000344")]
	[Address(RVA = "0x10079EC", Offset = "0x10079EC", VA = "0x10079EC")]
	[IteratorStateMachine(typeof(<Shake>d__12))]
	private IEnumerator Shake()
	{
		return null;
	}

	[Token(Token = "0x6000345")]
	[Address(RVA = "0x1007BC4", Offset = "0x1007BC4", VA = "0x1007BC4")]
	public RFX4_CameraShake()
	{
	}
}
[Token(Token = "0x20000AD")]
public static class RFX4_ColorHelper
{
	[Token(Token = "0x20000AE")]
	public struct HSBColor
	{
		[Token(Token = "0x400049F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float H;

		[Token(Token = "0x40004A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float S;

		[Token(Token = "0x40004A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float B;

		[Token(Token = "0x40004A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float A;

		[Token(Token = "0x6000353")]
		[Address(RVA = "0x100826C", Offset = "0x100826C", VA = "0x100826C")]
		public HSBColor(float h, float s, float b, float a)
		{
		}
	}

	[Token(Token = "0x400049D")]
	private const float TOLERANCE = 0.0001f;

	[Token(Token = "0x400049E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string[] colorProperties;

	[Token(Token = "0x600034C")]
	[Address(RVA = "0x1003820", Offset = "0x1003820", VA = "0x1003820")]
	public static HSBColor ColorToHSV(Color color)
	{
		return default(HSBColor);
	}

	[Token(Token = "0x600034D")]
	[Address(RVA = "0x1008278", Offset = "0x1008278", VA = "0x1008278")]
	public static Color HSVToColor(HSBColor hsbColor)
	{
		return default(Color);
	}

	[Token(Token = "0x600034E")]
	[Address(RVA = "0x1002790", Offset = "0x1002790", VA = "0x1002790")]
	public static Color ConvertRGBColorByHUE(Color rgbColor, float hue)
	{
		return default(Color);
	}

	[Token(Token = "0x600034F")]
	[Address(RVA = "0x1003990", Offset = "0x1003990", VA = "0x1003990")]
	public static void ChangeObjectColorByHUE(GameObject go, float hue)
	{
	}

	[Token(Token = "0x6000350")]
	[Address(RVA = "0x10084AC", Offset = "0x10084AC", VA = "0x10084AC")]
	private static Material setMatHUEColor(Material mat, string name, float hueColor)
	{
		return null;
	}

	[Token(Token = "0x6000351")]
	[Address(RVA = "0x1008570", Offset = "0x1008570", VA = "0x1008570")]
	private static Material setMatAlphaColor(Material mat, string name, float alpha)
	{
		return null;
	}
}
[Token(Token = "0x20000AF")]
public class RFX4_CopyPosition : MonoBehaviour
{
	[Token(Token = "0x40004A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform CopiedTransform;

	[Token(Token = "0x40004A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform t;

	[Token(Token = "0x6000354")]
	[Address(RVA = "0x100892C", Offset = "0x100892C", VA = "0x100892C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000355")]
	[Address(RVA = "0x1008950", Offset = "0x1008950", VA = "0x1008950")]
	private void Update()
	{
	}

	[Token(Token = "0x6000356")]
	[Address(RVA = "0x1008984", Offset = "0x1008984", VA = "0x1008984")]
	public RFX4_CopyPosition()
	{
	}
}
[Token(Token = "0x20000B0")]
[ExecuteInEditMode]
public class RFX4_CustomLight : MonoBehaviour
{
	[Token(Token = "0x40004A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int MaxLightsCount;

	[Token(Token = "0x40004A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Texture2D PointLightAttenuation;

	[Token(Token = "0x40004A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<Light> sceneLights;

	[Token(Token = "0x6000357")]
	[Address(RVA = "0x100898C", Offset = "0x100898C", VA = "0x100898C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000358")]
	[Address(RVA = "0x1008B74", Offset = "0x1008B74", VA = "0x1008B74")]
	private void Update()
	{
	}

	[Token(Token = "0x6000359")]
	[Address(RVA = "0x1009E0C", Offset = "0x1009E0C", VA = "0x1009E0C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600035A")]
	[Address(RVA = "0x1008D54", Offset = "0x1008D54", VA = "0x1008D54")]
	private List<Light> GetAllLights()
	{
		return null;
	}

	[Token(Token = "0x600035B")]
	[Address(RVA = "0x1008FCC", Offset = "0x1008FCC", VA = "0x1008FCC")]
	private int FillDirectionalLights(List<Light> lights, List<Vector4> lightPositions, List<Vector4> lightColors)
	{
		return default(int);
	}

	[Token(Token = "0x600035C")]
	[Address(RVA = "0x1009568", Offset = "0x1009568", VA = "0x1009568")]
	private int FillPointLights(List<Light> lights, List<Vector4> lightPositions, List<Vector4> lightColors)
	{
		return default(int);
	}

	[Token(Token = "0x600035D")]
	[Address(RVA = "0x10097F4", Offset = "0x10097F4", VA = "0x10097F4")]
	private Vector4[] ListToArrayWithMaxCount(List<Vector4> list, int count)
	{
		return null;
	}

	[Token(Token = "0x600035E")]
	[Address(RVA = "0x1009224", Offset = "0x1009224", VA = "0x1009224")]
	private List<Light> SortPointLightsByDistance(List<Light> lights)
	{
		return null;
	}

	[Token(Token = "0x600035F")]
	[Address(RVA = "0x1009930", Offset = "0x1009930", VA = "0x1009930")]
	public Color SampleLightProbesUp(Vector3 pos, float grayScaleFactor)
	{
		return default(Color);
	}

	[Token(Token = "0x6000360")]
	[Address(RVA = "0x1008A60", Offset = "0x1008A60", VA = "0x1008A60")]
	private Texture2D GeneratePointAttenuationTexture()
	{
		return null;
	}

	[Token(Token = "0x6000361")]
	[Address(RVA = "0x1009F8C", Offset = "0x1009F8C", VA = "0x1009F8C")]
	public RFX4_CustomLight()
	{
	}
}
[Token(Token = "0x20000B1")]
public class RFX4_DeactivateByTime : MonoBehaviour
{
	[Token(Token = "0x40004A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject DeactivatedGameObject;

	[Token(Token = "0x40004A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float DeactivateTime;

	[Token(Token = "0x40004AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool isActiveState;

	[Token(Token = "0x40004AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float currentTime;

	[Token(Token = "0x6000363")]
	[Address(RVA = "0x1016178", Offset = "0x1016178", VA = "0x1016178")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000364")]
	[Address(RVA = "0x1016188", Offset = "0x1016188", VA = "0x1016188")]
	private void Update()
	{
	}

	[Token(Token = "0x6000365")]
	[Address(RVA = "0x10161EC", Offset = "0x10161EC", VA = "0x10161EC")]
	public RFX4_DeactivateByTime()
	{
	}
}
[Token(Token = "0x20000B2")]
public class RFX4_DeactivateRigidbodyByTime : MonoBehaviour
{
	[Token(Token = "0x40004AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float TimeDelayToDeactivate;

	[Token(Token = "0x6000366")]
	[Address(RVA = "0x10161FC", Offset = "0x10161FC", VA = "0x10161FC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000367")]
	[Address(RVA = "0x1016294", Offset = "0x1016294", VA = "0x1016294")]
	private void Deactivate()
	{
	}

	[Token(Token = "0x6000368")]
	[Address(RVA = "0x1016304", Offset = "0x1016304", VA = "0x1016304")]
	public RFX4_DeactivateRigidbodyByTime()
	{
	}
}
[Token(Token = "0x20000B3")]
[ExecuteInEditMode]
public class RFX4_Decal : MonoBehaviour
{
	[Token(Token = "0x40004AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool IsScreenSpace;

	[Token(Token = "0x40004AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem ps;

	[Token(Token = "0x40004AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem.MainModule psMain;

	[Token(Token = "0x40004B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private MaterialPropertyBlock props;

	[Token(Token = "0x40004B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private MeshRenderer rend;

	[Token(Token = "0x6000369")]
	[Address(RVA = "0x1016314", Offset = "0x1016314", VA = "0x1016314")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600036A")]
	[Address(RVA = "0x101658C", Offset = "0x101658C", VA = "0x101658C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600036B")]
	[Address(RVA = "0x1016774", Offset = "0x1016774", VA = "0x1016774")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x600036C")]
	[Address(RVA = "0x1016938", Offset = "0x1016938", VA = "0x1016938")]
	public RFX4_Decal()
	{
	}
}
[Token(Token = "0x20000B4")]
public class RFX4_DemoReactivation : MonoBehaviour
{
	[Token(Token = "0x40004B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float ReactivationTime;

	[Token(Token = "0x40004B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject Effect;

	[Token(Token = "0x600036D")]
	[Address(RVA = "0x1016948", Offset = "0x1016948", VA = "0x1016948")]
	private void Start()
	{
	}

	[Token(Token = "0x600036E")]
	[Address(RVA = "0x101699C", Offset = "0x101699C", VA = "0x101699C")]
	private void Reactivate()
	{
	}

	[Token(Token = "0x600036F")]
	[Address(RVA = "0x10169D4", Offset = "0x10169D4", VA = "0x10169D4")]
	public RFX4_DemoReactivation()
	{
	}
}
[Token(Token = "0x20000B5")]
public class RFX4_EffectEvent : MonoBehaviour
{
	[Token(Token = "0x40004B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject CharacterEffect;

	[Token(Token = "0x40004B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform CharacterAttachPoint;

	[Token(Token = "0x40004B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float CharacterEffect_DestroyTime;

	[Token(Token = "0x40004B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Space]
	public GameObject CharacterEffect2;

	[Token(Token = "0x40004B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform CharacterAttachPoint2;

	[Token(Token = "0x40004B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float CharacterEffect2_DestroyTime;

	[Token(Token = "0x40004BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Space]
	public GameObject MainEffect;

	[Token(Token = "0x40004BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform AttachPoint;

	[Token(Token = "0x40004BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float Effect_DestroyTime;

	[Token(Token = "0x40004BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Space]
	public GameObject AdditionalEffect;

	[Token(Token = "0x40004BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Transform AdditionalEffectAttachPoint;

	[Token(Token = "0x40004BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float AdditionalEffect_DestroyTime;

	[Token(Token = "0x40004C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[HideInInspector]
	public bool IsMobile;

	[Token(Token = "0x6000370")]
	[Address(RVA = "0x10169E4", Offset = "0x10169E4", VA = "0x10169E4")]
	public void ActivateEffect()
	{
	}

	[Token(Token = "0x6000371")]
	[Address(RVA = "0x1016C04", Offset = "0x1016C04", VA = "0x1016C04")]
	public void ActivateAdditionalEffect()
	{
	}

	[Token(Token = "0x6000372")]
	[Address(RVA = "0x1016DF0", Offset = "0x1016DF0", VA = "0x1016DF0")]
	public void ActivateCharacterEffect()
	{
	}

	[Token(Token = "0x6000373")]
	[Address(RVA = "0x1016FA0", Offset = "0x1016FA0", VA = "0x1016FA0")]
	public void ActivateCharacterEffect2()
	{
	}

	[Token(Token = "0x6000374")]
	[Address(RVA = "0x1016B78", Offset = "0x1016B78", VA = "0x1016B78")]
	private void UpdateEffectForMobileIsNeed(GameObject instance)
	{
	}

	[Token(Token = "0x6000375")]
	[Address(RVA = "0x101713C", Offset = "0x101713C", VA = "0x101713C")]
	public RFX4_EffectEvent()
	{
	}
}
[Token(Token = "0x20000B6")]
[RequireComponent(typeof(Renderer))]
[ExecuteInEditMode]
public class RFX4_MaterialQueue : MonoBehaviour
{
	[Token(Token = "0x40004C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Background=1000, Geometry=2000, AlphaTest=2450, Transparent=3000, Overlay=4000")]
	public int queue;

	[Token(Token = "0x40004C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int[] queues;

	[Token(Token = "0x6000376")]
	[Address(RVA = "0x1017158", Offset = "0x1017158", VA = "0x1017158")]
	private void Start()
	{
	}

	[Token(Token = "0x6000377")]
	[Address(RVA = "0x10172D8", Offset = "0x10172D8", VA = "0x10172D8")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000378")]
	[Address(RVA = "0x10172DC", Offset = "0x10172DC", VA = "0x10172DC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000379")]
	[Address(RVA = "0x1017304", Offset = "0x1017304", VA = "0x1017304")]
	public RFX4_MaterialQueue()
	{
	}
}
[Token(Token = "0x20000B7")]
public class RFX4_OnEnableResetTransform : MonoBehaviour
{
	[Token(Token = "0x40004C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform t;

	[Token(Token = "0x40004C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 startPosition;

	[Token(Token = "0x40004C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Quaternion startRotation;

	[Token(Token = "0x40004C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 startScale;

	[Token(Token = "0x40004C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool isInitialized;

	[Token(Token = "0x600037A")]
	[Address(RVA = "0x1017314", Offset = "0x1017314", VA = "0x1017314")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600037B")]
	[Address(RVA = "0x10173F8", Offset = "0x10173F8", VA = "0x10173F8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600037C")]
	[Address(RVA = "0x10174DC", Offset = "0x10174DC", VA = "0x10174DC")]
	public RFX4_OnEnableResetTransform()
	{
	}
}
[Token(Token = "0x20000B8")]
public class RFX4_ParticleCollisionGameObject : MonoBehaviour
{
	[Token(Token = "0x40004C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject InstancedGO;

	[Token(Token = "0x40004C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float DestroyDelay;

	[Token(Token = "0x40004CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject RotationParent;

	[Token(Token = "0x40004CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<ParticleCollisionEvent> collisionEvents;

	[Token(Token = "0x40004CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ParticleSystem initiatorPS;

	[Token(Token = "0x600037D")]
	[Address(RVA = "0x10174E4", Offset = "0x10174E4", VA = "0x10174E4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600037E")]
	[Address(RVA = "0x1017560", Offset = "0x1017560", VA = "0x1017560")]
	private void OnParticleCollision(GameObject other)
	{
	}

	[Token(Token = "0x600037F")]
	[Address(RVA = "0x10177B8", Offset = "0x10177B8", VA = "0x10177B8")]
	public RFX4_ParticleCollisionGameObject()
	{
	}
}
[Token(Token = "0x20000B9")]
[ExecuteInEditMode]
public class RFX4_ParticleGravityPoint : MonoBehaviour
{
	[Token(Token = "0x40004CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x40004CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Force;

	[Token(Token = "0x40004CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float StopDistance;

	[Token(Token = "0x40004D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem ps;

	[Token(Token = "0x40004D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x40004D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ParticleSystem.MainModule mainModule;

	[Token(Token = "0x6000380")]
	[Address(RVA = "0x1017848", Offset = "0x1017848", VA = "0x1017848")]
	private void Start()
	{
	}

	[Token(Token = "0x6000381")]
	[Address(RVA = "0x10178C8", Offset = "0x10178C8", VA = "0x10178C8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000382")]
	[Address(RVA = "0x1017CF4", Offset = "0x1017CF4", VA = "0x1017CF4")]
	public RFX4_ParticleGravityPoint()
	{
	}
}
[Token(Token = "0x20000BA")]
public class RFX4_PhysicsMotion : MonoBehaviour
{
	[Token(Token = "0x20000BB")]
	public class RFX4_CollisionInfo : EventArgs
	{
		[Token(Token = "0x40004F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 HitPoint;

		[Token(Token = "0x40004F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Collider HitCollider;

		[Token(Token = "0x40004F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject HitGameObject;

		[Token(Token = "0x600038E")]
		[Address(RVA = "0x101883C", Offset = "0x101883C", VA = "0x101883C")]
		public RFX4_CollisionInfo()
		{
		}
	}

	[Token(Token = "0x40004D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool UseCollisionDetect;

	[Token(Token = "0x40004D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float MaxDistnace;

	[Token(Token = "0x40004D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Mass;

	[Token(Token = "0x40004D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float Speed;

	[Token(Token = "0x40004D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float RandomSpeedOffset;

	[Token(Token = "0x40004D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float AirDrag;

	[Token(Token = "0x40004D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool UseGravity;

	[Token(Token = "0x40004DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public ForceMode ForceMode;

	[Token(Token = "0x40004DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector3 AddRealtimeForce;

	[Token(Token = "0x40004DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float MinSpeed;

	[Token(Token = "0x40004DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float ColliderRadius;

	[Token(Token = "0x40004DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool FreezeRotation;

	[Token(Token = "0x40004DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	public bool UseTargetPositionAfterCollision;

	[Token(Token = "0x40004E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject EffectOnCollision;

	[Token(Token = "0x40004E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool CollisionEffectInWorldSpace;

	[Token(Token = "0x40004E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	public bool LookAtNormal;

	[Token(Token = "0x40004E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float CollisionEffectDestroyAfter;

	[Token(Token = "0x40004E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject[] DeactivateObjectsAfterCollision;

	[Token(Token = "0x40004E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[HideInInspector]
	public float HUE;

	[Token(Token = "0x40004E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Rigidbody rigid;

	[Token(Token = "0x40004E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private SphereCollider collid;

	[Token(Token = "0x40004E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private ContactPoint lastContactPoint;

	[Token(Token = "0x40004EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Collider lastCollider;

	[Token(Token = "0x40004EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Vector3 offsetColliderPoint;

	[Token(Token = "0x40004EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private bool isCollided;

	[Token(Token = "0x40004ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private GameObject targetAnchor;

	[Token(Token = "0x40004EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private bool isInitializedForce;

	[Token(Token = "0x40004EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private float currentSpeedOffset;

	[Token(Token = "0x40004F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private RFX4_EffectSettings effectSettings;

	[Token(Token = "0x14000004")]
	public event EventHandler<RFX4_CollisionInfo> CollisionEnter
	{
		[Token(Token = "0x6000383")]
		[Address(RVA = "0x1017D08", Offset = "0x1017D08", VA = "0x1017D08")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000384")]
		[Address(RVA = "0x1017DB8", Offset = "0x1017DB8", VA = "0x1017DB8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000385")]
	[Address(RVA = "0x1017E68", Offset = "0x1017E68", VA = "0x1017E68")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000386")]
	[Address(RVA = "0x1018004", Offset = "0x1018004", VA = "0x1018004")]
	private void InitializeRigid()
	{
	}

	[Token(Token = "0x6000387")]
	[Address(RVA = "0x101809C", Offset = "0x101809C", VA = "0x101809C")]
	private void InitializeForce()
	{
	}

	[Token(Token = "0x6000388")]
	[Address(RVA = "0x10181FC", Offset = "0x10181FC", VA = "0x10181FC")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000389")]
	[Address(RVA = "0x1018894", Offset = "0x1018894", VA = "0x1018894")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600038A")]
	[Address(RVA = "0x1018C90", Offset = "0x1018C90", VA = "0x1018C90")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600038B")]
	[Address(RVA = "0x1018BB4", Offset = "0x1018BB4", VA = "0x1018BB4")]
	private void RemoveRigidbody()
	{
	}

	[Token(Token = "0x600038C")]
	[Address(RVA = "0x1018D2C", Offset = "0x1018D2C", VA = "0x1018D2C")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x600038D")]
	[Address(RVA = "0x1018E4C", Offset = "0x1018E4C", VA = "0x1018E4C")]
	public RFX4_PhysicsMotion()
	{
	}
}
[Token(Token = "0x20000BC")]
public class RFX4_PhysXSetImpulse : MonoBehaviour
{
	[Token(Token = "0x40004F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float Force;

	[Token(Token = "0x40004F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public ForceMode ForceMode;

	[Token(Token = "0x40004F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Rigidbody rig;

	[Token(Token = "0x40004F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform t;

	[Token(Token = "0x600038F")]
	[Address(RVA = "0x1018EFC", Offset = "0x1018EFC", VA = "0x1018EFC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000390")]
	[Address(RVA = "0x1018F70", Offset = "0x1018F70", VA = "0x1018F70")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000391")]
	[Address(RVA = "0x101901C", Offset = "0x101901C", VA = "0x101901C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000392")]
	[Address(RVA = "0x10190DC", Offset = "0x10190DC", VA = "0x10190DC")]
	public RFX4_PhysXSetImpulse()
	{
	}
}
[Token(Token = "0x20000BD")]
public class RFX4_RaycastCollision : MonoBehaviour
{
	[Token(Token = "0x40004F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float RaycastDistance;

	[Token(Token = "0x40004F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] Effects;

	[Token(Token = "0x40004FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float Offset;

	[Token(Token = "0x40004FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float EnableTimeDelay;

	[Token(Token = "0x40004FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float DestroyTime;

	[Token(Token = "0x40004FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool UsePivotPosition;

	[Token(Token = "0x40004FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool UseNormalRotation;

	[Token(Token = "0x40004FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
	public bool IsWorldSpace;

	[Token(Token = "0x4000500")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
	public bool RealTimeUpdateRaycast;

	[Token(Token = "0x4000501")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool DestroyAfterDisabling;

	[Token(Token = "0x4000502")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[HideInInspector]
	public float HUE;

	[Token(Token = "0x4000503")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public List<GameObject> CollidedInstances;

	[Token(Token = "0x4000504")]
	private const string particlesAdditionalName = "Distance";

	[Token(Token = "0x4000505")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ParticleSystem[] distanceParticles;

	[Token(Token = "0x4000506")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool canUpdate;

	[Token(Token = "0x14000005")]
	public event EventHandler<RFX4_PhysicsMotion.RFX4_CollisionInfo> CollisionEnter
	{
		[Token(Token = "0x6000393")]
		[Address(RVA = "0x10190EC", Offset = "0x10190EC", VA = "0x10190EC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000394")]
		[Address(RVA = "0x101919C", Offset = "0x101919C", VA = "0x101919C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000395")]
	[Address(RVA = "0x101924C", Offset = "0x101924C", VA = "0x101924C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000396")]
	[Address(RVA = "0x10192C0", Offset = "0x10192C0", VA = "0x10192C0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000397")]
	[Address(RVA = "0x1019BDC", Offset = "0x1019BDC", VA = "0x1019BDC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000398")]
	[Address(RVA = "0x1019D44", Offset = "0x1019D44", VA = "0x1019D44")]
	private void Update()
	{
	}

	[Token(Token = "0x6000399")]
	[Address(RVA = "0x1019370", Offset = "0x1019370", VA = "0x1019370")]
	private void UpdateRaycast()
	{
	}

	[Token(Token = "0x600039A")]
	[Address(RVA = "0x1019D54", Offset = "0x1019D54", VA = "0x1019D54")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x600039B")]
	[Address(RVA = "0x1019E24", Offset = "0x1019E24", VA = "0x1019E24")]
	public RFX4_RaycastCollision()
	{
	}
}
[Token(Token = "0x20000BE")]
public class RFX4_ReplaceModelOnCollision : MonoBehaviour
{
	[Token(Token = "0x4000508")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject PhysicsObjects;

	[Token(Token = "0x4000509")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool isCollided;

	[Token(Token = "0x400050A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform t;

	[Token(Token = "0x600039C")]
	[Address(RVA = "0x1019ECC", Offset = "0x1019ECC", VA = "0x1019ECC")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600039D")]
	[Address(RVA = "0x1019FE0", Offset = "0x1019FE0", VA = "0x1019FE0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600039E")]
	[Address(RVA = "0x101A0DC", Offset = "0x101A0DC", VA = "0x101A0DC")]
	public RFX4_ReplaceModelOnCollision()
	{
	}
}
[Token(Token = "0x20000BF")]
public class RFX4_RotateAround : MonoBehaviour
{
	[Token(Token = "0x400050B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 Offset;

	[Token(Token = "0x400050C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 RotateVector;

	[Token(Token = "0x400050D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float LifeTime;

	[Token(Token = "0x400050E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform t;

	[Token(Token = "0x400050F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float currentTime;

	[Token(Token = "0x4000510")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Quaternion rotation;

	[Token(Token = "0x600039F")]
	[Address(RVA = "0x101A0E4", Offset = "0x101A0E4", VA = "0x101A0E4")]
	private void Start()
	{
	}

	[Token(Token = "0x60003A0")]
	[Address(RVA = "0x101A134", Offset = "0x101A134", VA = "0x101A134")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60003A1")]
	[Address(RVA = "0x101A1C4", Offset = "0x101A1C4", VA = "0x101A1C4")]
	private void Update()
	{
	}

	[Token(Token = "0x60003A2")]
	[Address(RVA = "0x101A264", Offset = "0x101A264", VA = "0x101A264")]
	public RFX4_RotateAround()
	{
	}
}
[Token(Token = "0x20000C0")]
public class RFX4_StartDelay : MonoBehaviour
{
	[Token(Token = "0x4000511")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject ActivatedGameObject;

	[Token(Token = "0x4000512")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Delay;

	[Token(Token = "0x4000513")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool disableOnTime;

	[Token(Token = "0x4000514")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float currentTime;

	[Token(Token = "0x4000515")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool isEnabled;

	[Token(Token = "0x60003A3")]
	[Address(RVA = "0x101A2DC", Offset = "0x101A2DC", VA = "0x101A2DC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60003A4")]
	[Address(RVA = "0x101A30C", Offset = "0x101A30C", VA = "0x101A30C")]
	private void Update()
	{
	}

	[Token(Token = "0x60003A5")]
	[Address(RVA = "0x101A38C", Offset = "0x101A38C", VA = "0x101A38C")]
	public RFX4_StartDelay()
	{
	}
}
[Token(Token = "0x20000C1")]
public enum RFX4_TextureShaderProperties
{
	[Token(Token = "0x4000517")]
	_MainTex,
	[Token(Token = "0x4000518")]
	_DistortTex,
	[Token(Token = "0x4000519")]
	_Mask,
	[Token(Token = "0x400051A")]
	_Cutout,
	[Token(Token = "0x400051B")]
	_CutoutTex,
	[Token(Token = "0x400051C")]
	_Bump,
	[Token(Token = "0x400051D")]
	_BumpTex,
	[Token(Token = "0x400051E")]
	_EmissionTex
}
[Token(Token = "0x20000C2")]
public class RFX4_TornadoParticles : MonoBehaviour
{
	[Token(Token = "0x400051F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material TornadoMaterial;

	[Token(Token = "0x4000520")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem.Particle[] particleArray;

	[Token(Token = "0x4000521")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem particleSys;

	[Token(Token = "0x4000522")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Light myLight;

	[Token(Token = "0x4000523")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector4 _twistScale;

	[Token(Token = "0x4000524")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int materialID;

	[Token(Token = "0x60003A6")]
	[Address(RVA = "0x101A39C", Offset = "0x101A39C", VA = "0x101A39C")]
	private void Start()
	{
	}

	[Token(Token = "0x60003A7")]
	[Address(RVA = "0x101A5A4", Offset = "0x101A5A4", VA = "0x101A5A4")]
	private void Update()
	{
	}

	[Token(Token = "0x60003A8")]
	[Address(RVA = "0x101A874", Offset = "0x101A874", VA = "0x101A874")]
	public RFX4_TornadoParticles()
	{
	}
}
[Token(Token = "0x20000C3")]
[RequireComponent(typeof(LineRenderer))]
public class RFX4_TrailRenderer : MonoBehaviour
{
	[Token(Token = "0x4000525")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float VertexLifeTime;

	[Token(Token = "0x4000526")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float TrailLifeTime;

	[Token(Token = "0x4000527")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Range(0.001f, 1f)]
	public float MinVertexDistance;

	[Token(Token = "0x4000528")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float Gravity;

	[Token(Token = "0x4000529")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3 Force;

	[Token(Token = "0x400052A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float InheritVelocity;

	[Token(Token = "0x400052B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float Drag;

	[Token(Token = "0x400052C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Range(0.001f, 10f)]
	public float Frequency;

	[Token(Token = "0x400052D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Range(0.001f, 10f)]
	public float OffsetSpeed;

	[Token(Token = "0x400052E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool RandomTurbulenceOffset;

	[Token(Token = "0x400052F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Range(0.001f, 10f)]
	public float Amplitude;

	[Token(Token = "0x4000530")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float TurbulenceStrength;

	[Token(Token = "0x4000531")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AnimationCurve VelocityByDistance;

	[Token(Token = "0x4000532")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float AproximatedFlyDistance;

	[Token(Token = "0x4000533")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public bool SmoothCurves;

	[Token(Token = "0x4000534")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private LineRenderer lineRenderer;

	[Token(Token = "0x4000535")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private List<Vector3> positions;

	[Token(Token = "0x4000536")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private List<float> currentTimes;

	[Token(Token = "0x4000537")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private List<Vector3> velocities;

	[Token(Token = "0x4000538")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[HideInInspector]
	public float currentLifeTime;

	[Token(Token = "0x4000539")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Transform t;

	[Token(Token = "0x400053A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Vector3 prevPosition;

	[Token(Token = "0x400053B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private Vector3 startPosition;

	[Token(Token = "0x400053C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private List<Vector3> controlPoints;

	[Token(Token = "0x400053D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private int curveCount;

	[Token(Token = "0x400053E")]
	private const float MinimumSqrDistance = 0.01f;

	[Token(Token = "0x400053F")]
	private const float DivisionThreshold = -0.99f;

	[Token(Token = "0x4000540")]
	private const float SmoothCurvesScale = 0.5f;

	[Token(Token = "0x4000541")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private float currentVelocity;

	[Token(Token = "0x4000542")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float turbulenceRandomOffset;

	[Token(Token = "0x4000543")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private bool isInitialized;

	[Token(Token = "0x60003A9")]
	[Address(RVA = "0x101A884", Offset = "0x101A884", VA = "0x101A884")]
	private void Start()
	{
	}

	[Token(Token = "0x60003AA")]
	[Address(RVA = "0x101AC18", Offset = "0x101AC18", VA = "0x101AC18")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60003AB")]
	[Address(RVA = "0x101A8A0", Offset = "0x101A8A0", VA = "0x101A8A0")]
	private void Init()
	{
	}

	[Token(Token = "0x60003AC")]
	[Address(RVA = "0x101AC28", Offset = "0x101AC28", VA = "0x101AC28")]
	private void Update()
	{
	}

	[Token(Token = "0x60003AD")]
	[Address(RVA = "0x101B8FC", Offset = "0x101B8FC", VA = "0x101B8FC")]
	private int GetLastDeletedIndex()
	{
		return default(int);
	}

	[Token(Token = "0x60003AE")]
	[Address(RVA = "0x101AD6C", Offset = "0x101AD6C", VA = "0x101AD6C")]
	private void UpdatePositionsCount()
	{
	}

	[Token(Token = "0x60003AF")]
	[Address(RVA = "0x101C278", Offset = "0x101C278", VA = "0x101C278")]
	private void AddInterpolatedPositions(Vector3 start, Vector3 end)
	{
	}

	[Token(Token = "0x60003B0")]
	[Address(RVA = "0x101BA08", Offset = "0x101BA08", VA = "0x101BA08")]
	private void RemovePositionsBeforeIndex(int lastDeletedIndex)
	{
	}

	[Token(Token = "0x60003B1")]
	[Address(RVA = "0x101AF54", Offset = "0x101AF54", VA = "0x101AF54")]
	private void UpdateForce()
	{
	}

	[Token(Token = "0x60003B2")]
	[Address(RVA = "0x101B3D0", Offset = "0x101B3D0", VA = "0x101B3D0")]
	private void UpdateImpulse()
	{
	}

	[Token(Token = "0x60003B3")]
	[Address(RVA = "0x101B668", Offset = "0x101B668", VA = "0x101B668")]
	private void UpdateVelocity()
	{
	}

	[Token(Token = "0x60003B4")]
	[Address(RVA = "0x101BB24", Offset = "0x101BB24", VA = "0x101BB24")]
	public void InterpolateBezier(List<Vector3> segmentPoints, float scale)
	{
	}

	[Token(Token = "0x60003B5")]
	[Address(RVA = "0x101C174", Offset = "0x101C174", VA = "0x101C174")]
	public List<Vector3> GetDrawingPoints()
	{
		return null;
	}

	[Token(Token = "0x60003B6")]
	[Address(RVA = "0x101C5AC", Offset = "0x101C5AC", VA = "0x101C5AC")]
	private List<Vector3> FindDrawingPoints(int curveIndex)
	{
		return null;
	}

	[Token(Token = "0x60003B7")]
	[Address(RVA = "0x101C890", Offset = "0x101C890", VA = "0x101C890")]
	private int FindDrawingPoints(int curveIndex, float t0, float t1, List<Vector3> pointList, int insertionIndex)
	{
		return default(int);
	}

	[Token(Token = "0x60003B8")]
	[Address(RVA = "0x101C77C", Offset = "0x101C77C", VA = "0x101C77C")]
	public Vector3 CalculateBezierPoint(int curveIndex, float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60003B9")]
	[Address(RVA = "0x101CBE8", Offset = "0x101CBE8", VA = "0x101CBE8")]
	private Vector3 CalculateBezierPoint(float t, Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60003BA")]
	[Address(RVA = "0x101CC7C", Offset = "0x101CC7C", VA = "0x101CC7C")]
	public RFX4_TrailRenderer()
	{
	}
}
[Token(Token = "0x20000C4")]
[ExecuteInEditMode]
public class RFX4_UVAnimation : MonoBehaviour
{
	[Token(Token = "0x4000544")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int TilesX;

	[Token(Token = "0x4000545")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int TilesY;

	[Token(Token = "0x4000546")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Range(1f, 360f)]
	public int FPS;

	[Token(Token = "0x4000547")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int StartFrameOffset;

	[Token(Token = "0x4000548")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool IsLoop;

	[Token(Token = "0x4000549")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool IsReverse;

	[Token(Token = "0x400054A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	public bool IsInterpolateFrames;

	[Token(Token = "0x400054B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public RFX4_TextureShaderProperties[] TextureNames;

	[Token(Token = "0x400054C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int count;

	[Token(Token = "0x400054D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Renderer currentRenderer;

	[Token(Token = "0x400054E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Projector projector;

	[Token(Token = "0x400054F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Material instanceMaterial;

	[Token(Token = "0x4000550")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float animationStartTime;

	[Token(Token = "0x4000551")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool canUpdate;

	[Token(Token = "0x4000552")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int previousIndex;

	[Token(Token = "0x4000553")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private int totalFrames;

	[Token(Token = "0x4000554")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float currentInterpolatedTime;

	[Token(Token = "0x4000555")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private int currentIndex;

	[Token(Token = "0x4000556")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector2 size;

	[Token(Token = "0x4000557")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool isInitialized;

	[Token(Token = "0x4000558")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float prevRealTime;

	[Token(Token = "0x60003BB")]
	[Address(RVA = "0x101CD6C", Offset = "0x101CD6C", VA = "0x101CD6C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60003BC")]
	[Address(RVA = "0x101CFA8", Offset = "0x101CFA8", VA = "0x101CFA8")]
	private void Start()
	{
	}

	[Token(Token = "0x60003BD")]
	[Address(RVA = "0x101CFC4", Offset = "0x101CFC4", VA = "0x101CFC4")]
	private void OnWillRenderObject()
	{
	}

	[Token(Token = "0x60003BE")]
	[Address(RVA = "0x101D024", Offset = "0x101D024", VA = "0x101D024")]
	private void Update()
	{
	}

	[Token(Token = "0x60003BF")]
	[Address(RVA = "0x101CD7C", Offset = "0x101CD7C", VA = "0x101CD7C")]
	private void InitDefaultVariables()
	{
	}

	[Token(Token = "0x60003C0")]
	[Address(RVA = "0x101CFEC", Offset = "0x101CFEC", VA = "0x101CFEC")]
	private void ManualUpdate()
	{
	}

	[Token(Token = "0x60003C1")]
	[Address(RVA = "0x101D04C", Offset = "0x101D04C", VA = "0x101D04C")]
	private void UpdateMaterial()
	{
	}

	[Token(Token = "0x60003C2")]
	[Address(RVA = "0x101D14C", Offset = "0x101D14C", VA = "0x101D14C")]
	private void SetSpriteAnimation()
	{
	}

	[Token(Token = "0x60003C3")]
	[Address(RVA = "0x101D4E4", Offset = "0x101D4E4", VA = "0x101D4E4")]
	public float DeltaTime()
	{
		return default(float);
	}

	[Token(Token = "0x60003C4")]
	[Address(RVA = "0x101D374", Offset = "0x101D374", VA = "0x101D374")]
	private void SetSpriteAnimationIterpolated()
	{
	}

	[Token(Token = "0x60003C5")]
	[Address(RVA = "0x101D53C", Offset = "0x101D53C", VA = "0x101D53C")]
	public RFX4_UVAnimation()
	{
	}
}
[Token(Token = "0x20000C5")]
public class RFX4_UVScroll : MonoBehaviour
{
	[Token(Token = "0x4000559")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector2 UvScrollMultiplier;

	[Token(Token = "0x400055A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public RFX4_TextureShaderProperties TextureName;

	[Token(Token = "0x400055B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationCurve scrollCurve;

	[Token(Token = "0x400055C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool useCurve;

	[Token(Token = "0x400055D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector2 uvOffset;

	[Token(Token = "0x400055E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Material mat;

	[Token(Token = "0x400055F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float time;

	[Token(Token = "0x60003C6")]
	[Address(RVA = "0x101D5BC", Offset = "0x101D5BC", VA = "0x101D5BC")]
	private void Start()
	{
	}

	[Token(Token = "0x60003C7")]
	[Address(RVA = "0x101D7BC", Offset = "0x101D7BC", VA = "0x101D7BC")]
	private void Update()
	{
	}

	[Token(Token = "0x60003C8")]
	[Address(RVA = "0x101D908", Offset = "0x101D908", VA = "0x101D908")]
	public RFX4_UVScroll()
	{
	}
}
[Token(Token = "0x20000C6")]
public class RFX4_MobileBloom : MonoBehaviour
{
	[Token(Token = "0x4000560")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Range(0.2f, 1f)]
	[Tooltip("Camera render texture resolution")]
	public float RenderTextureResolutoinFactor;

	[Token(Token = "0x4000561")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Range(0.05f, 2f)]
	[Tooltip("Blend factor of the result image.")]
	public float Intensity;

	[Token(Token = "0x4000562")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static float Threshold;

	[Token(Token = "0x4000563")]
	private const string shaderName = "Hidden/KriptoFX/PostEffects/RFX4_Bloom";

	[Token(Token = "0x4000564")]
	private const int kMaxIterations = 16;

	[Token(Token = "0x4000565")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private readonly RenderTexture[] m_blurBuffer1;

	[Token(Token = "0x4000566")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly RenderTexture[] m_blurBuffer2;

	[Token(Token = "0x4000567")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private RenderTexture Source;

	[Token(Token = "0x4000568")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Material _bloomMaterial;

	[Token(Token = "0x17000031")]
	private Material bloomMaterial
	{
		[Token(Token = "0x60003C9")]
		[Address(RVA = "0x101D990", Offset = "0x101D990", VA = "0x101D990")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60003CA")]
	[Address(RVA = "0x101DAD8", Offset = "0x101DAD8", VA = "0x101DAD8")]
	private void Start()
	{
	}

	[Token(Token = "0x60003CB")]
	[Address(RVA = "0x101DADC", Offset = "0x101DADC", VA = "0x101DADC")]
	private void OnPreRender()
	{
	}

	[Token(Token = "0x60003CC")]
	[Address(RVA = "0x101DB94", Offset = "0x101DB94", VA = "0x101DB94")]
	private void OnPostRender()
	{
	}

	[Token(Token = "0x60003CD")]
	[Address(RVA = "0x101DB6C", Offset = "0x101DB6C", VA = "0x101DB6C")]
	private RenderTextureFormat SupportedHdrFormat()
	{
		return default(RenderTextureFormat);
	}

	[Token(Token = "0x60003CE")]
	[Address(RVA = "0x101DBD8", Offset = "0x101DBD8", VA = "0x101DBD8")]
	private void UpdateBloom(RenderTexture source, RenderTexture dest)
	{
	}

	[Token(Token = "0x60003CF")]
	[Address(RVA = "0x101E318", Offset = "0x101E318", VA = "0x101E318")]
	public RFX4_MobileBloom()
	{
	}
}
[Token(Token = "0x20000C7")]
public class FPS : MonoBehaviour
{
	[Token(Token = "0x4000569")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float UpdateInterval;

	[Token(Token = "0x400056A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Text text;

	[Token(Token = "0x400056B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int frames;

	[Token(Token = "0x60003D1")]
	[Address(RVA = "0x101E3F0", Offset = "0x101E3F0", VA = "0x101E3F0")]
	private void Start()
	{
	}

	[Token(Token = "0x60003D2")]
	[Address(RVA = "0x101E488", Offset = "0x101E488", VA = "0x101E488")]
	private void UpdateFPS()
	{
	}

	[Token(Token = "0x60003D3")]
	[Address(RVA = "0x101E5AC", Offset = "0x101E5AC", VA = "0x101E5AC")]
	private void Update()
	{
	}

	[Token(Token = "0x60003D4")]
	[Address(RVA = "0x101E5BC", Offset = "0x101E5BC", VA = "0x101E5BC")]
	public FPS()
	{
	}
}
[Token(Token = "0x20000C8")]
public class RFX4_Debug : MonoBehaviour
{
	[Token(Token = "0x60003D5")]
	[Address(RVA = "0x101E5CC", Offset = "0x101E5CC", VA = "0x101E5CC")]
	private void Start()
	{
	}

	[Token(Token = "0x60003D6")]
	[Address(RVA = "0x101E758", Offset = "0x101E758", VA = "0x101E758")]
	private void CollisionEnter(object sender, RFX4_PhysicsMotion.RFX4_CollisionInfo e)
	{
	}

	[Token(Token = "0x60003D7")]
	[Address(RVA = "0x101E82C", Offset = "0x101E82C", VA = "0x101E82C")]
	public RFX4_Debug()
	{
	}
}
[Token(Token = "0x20000C9")]
public class RFX4_DemoGUI : MonoBehaviour
{
	[Token(Token = "0x400056C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] Prefabs;

	[Token(Token = "0x400056D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float[] ReactivationTimes;

	[Token(Token = "0x400056E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Light Sun;

	[Token(Token = "0x400056F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ReflectionProbe ReflectionProbe;

	[Token(Token = "0x4000570")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Light[] NightLights;

	[Token(Token = "0x4000571")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Texture HUETexture;

	[Token(Token = "0x4000572")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool isDay;

	[Token(Token = "0x4000573")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int currentNomber;

	[Token(Token = "0x4000574")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GameObject currentInstance;

	[Token(Token = "0x4000575")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GUIStyle guiStyleHeader;

	[Token(Token = "0x4000576")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private GUIStyle guiStyleHeaderMobile;

	[Token(Token = "0x4000577")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float dpiScale;

	[Token(Token = "0x4000578")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float colorHUE;

	[Token(Token = "0x4000579")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float startSunIntensity;

	[Token(Token = "0x400057A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Quaternion startSunRotation;

	[Token(Token = "0x400057B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private Color startAmbientLight;

	[Token(Token = "0x400057C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float startAmbientIntencity;

	[Token(Token = "0x400057D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private float startReflectionIntencity;

	[Token(Token = "0x400057E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private LightShadows startLightShadows;

	[Token(Token = "0x400057F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private bool isButtonPressed;

	[Token(Token = "0x60003D8")]
	[Address(RVA = "0x101E834", Offset = "0x101E834", VA = "0x101E834")]
	private void Start()
	{
	}

	[Token(Token = "0x60003D9")]
	[Address(RVA = "0x101EB50", Offset = "0x101EB50", VA = "0x101EB50")]
	private void ChangeDayNight()
	{
	}

	[Token(Token = "0x60003DA")]
	[Address(RVA = "0x101E988", Offset = "0x101E988", VA = "0x101E988")]
	private void ChangeCurrent(int delta)
	{
	}

	[Token(Token = "0x60003DB")]
	[Address(RVA = "0x101ED9C", Offset = "0x101ED9C", VA = "0x101ED9C")]
	private void RemoveClones()
	{
	}

	[Token(Token = "0x60003DC")]
	[Address(RVA = "0x101EEA0", Offset = "0x101EEA0", VA = "0x101EEA0")]
	private void Reactivate()
	{
	}

	[Token(Token = "0x60003DD")]
	[Address(RVA = "0x101EED8", Offset = "0x101EED8", VA = "0x101EED8")]
	public RFX4_DemoGUI()
	{
	}
}
[Token(Token = "0x20000CA")]
public class RFX4_FPS : MonoBehaviour
{
	[Token(Token = "0x4000580")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly GUIStyle guiStyleHeader;

	[Token(Token = "0x4000581")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float timeleft;

	[Token(Token = "0x4000582")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float fps;

	[Token(Token = "0x4000583")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int frames;

	[Token(Token = "0x60003DE")]
	[Address(RVA = "0x101EFAC", Offset = "0x101EFAC", VA = "0x101EFAC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003DF")]
	[Address(RVA = "0x101EFFC", Offset = "0x101EFFC", VA = "0x101EFFC")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60003E0")]
	[Address(RVA = "0x101F0F4", Offset = "0x101F0F4", VA = "0x101F0F4")]
	private void Update()
	{
	}

	[Token(Token = "0x60003E1")]
	[Address(RVA = "0x101F148", Offset = "0x101F148", VA = "0x101F148")]
	public RFX4_FPS()
	{
	}
}
[Token(Token = "0x20000CB")]
public class RFX4_MouseOrbit : MonoBehaviour
{
	[Token(Token = "0x4000584")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject target;

	[Token(Token = "0x4000585")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float distance;

	[Token(Token = "0x4000586")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float xSpeed;

	[Token(Token = "0x4000587")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float ySpeed;

	[Token(Token = "0x4000588")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float yMinLimit;

	[Token(Token = "0x4000589")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float yMaxLimit;

	[Token(Token = "0x400058A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float x;

	[Token(Token = "0x400058B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float y;

	[Token(Token = "0x400058C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float prevDistance;

	[Token(Token = "0x60003E2")]
	[Address(RVA = "0x101F1BC", Offset = "0x101F1BC", VA = "0x101F1BC")]
	private void Start()
	{
	}

	[Token(Token = "0x60003E3")]
	[Address(RVA = "0x101F1E8", Offset = "0x101F1E8", VA = "0x101F1E8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60003E4")]
	[Address(RVA = "0x101F640", Offset = "0x101F640", VA = "0x101F640")]
	private static float ClampAngle(float angle, float min, float max)
	{
		return default(float);
	}

	[Token(Token = "0x60003E5")]
	[Address(RVA = "0x101F67C", Offset = "0x101F67C", VA = "0x101F67C")]
	public RFX4_MouseOrbit()
	{
	}
}
[Token(Token = "0x20000CC")]
public class RFX4_RealtimeReflection : MonoBehaviour
{
	[Token(Token = "0x400058D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ReflectionProbe probe;

	[Token(Token = "0x400058E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform camT;

	[Token(Token = "0x60003E6")]
	[Address(RVA = "0x101F698", Offset = "0x101F698", VA = "0x101F698")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003E7")]
	[Address(RVA = "0x101F718", Offset = "0x101F718", VA = "0x101F718")]
	private void Update()
	{
	}

	[Token(Token = "0x60003E8")]
	[Address(RVA = "0x101F78C", Offset = "0x101F78C", VA = "0x101F78C")]
	public RFX4_RealtimeReflection()
	{
	}
}
[Token(Token = "0x20000CD")]
public class Slash_DemoGUI : MonoBehaviour
{
	[Token(Token = "0x400058F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] Prefabs;

	[Token(Token = "0x4000590")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float[] ReactivationTimes;

	[Token(Token = "0x4000591")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Light Sun;

	[Token(Token = "0x4000592")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ReflectionProbe ReflectionProbe;

	[Token(Token = "0x4000593")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Light[] NightLights;

	[Token(Token = "0x4000594")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Texture HUETexture;

	[Token(Token = "0x4000595")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool isDay;

	[Token(Token = "0x4000596")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int currentNomber;

	[Token(Token = "0x4000597")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GameObject currentInstance;

	[Token(Token = "0x4000598")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private GUIStyle guiStyleHeader;

	[Token(Token = "0x4000599")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private GUIStyle guiStyleHeaderMobile;

	[Token(Token = "0x400059A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float dpiScale;

	[Token(Token = "0x400059B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float colorHUE;

	[Token(Token = "0x400059C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float startSunIntensity;

	[Token(Token = "0x400059D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Quaternion startSunRotation;

	[Token(Token = "0x400059E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private Color startAmbientLight;

	[Token(Token = "0x400059F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float startAmbientIntencity;

	[Token(Token = "0x40005A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private float startReflectionIntencity;

	[Token(Token = "0x40005A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private LightShadows startLightShadows;

	[Token(Token = "0x40005A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private bool isButtonPressed;

	[Token(Token = "0x60003E9")]
	[Address(RVA = "0x101F794", Offset = "0x101F794", VA = "0x101F794")]
	private void Start()
	{
	}

	[Token(Token = "0x60003EA")]
	[Address(RVA = "0x101FCFC", Offset = "0x101FCFC", VA = "0x101FCFC")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60003EB")]
	[Address(RVA = "0x101FAB0", Offset = "0x101FAB0", VA = "0x101FAB0")]
	private void ChangeDayNight()
	{
	}

	[Token(Token = "0x60003EC")]
	[Address(RVA = "0x101F8E8", Offset = "0x101F8E8", VA = "0x101F8E8")]
	private void ChangeCurrent(int delta)
	{
	}

	[Token(Token = "0x60003ED")]
	[Address(RVA = "0x10200AC", Offset = "0x10200AC", VA = "0x10200AC")]
	private void RemoveClones()
	{
	}

	[Token(Token = "0x60003EE")]
	[Address(RVA = "0x10201B0", Offset = "0x10201B0", VA = "0x10201B0")]
	private void Reactivate()
	{
	}

	[Token(Token = "0x60003EF")]
	[Address(RVA = "0x10201E8", Offset = "0x10201E8", VA = "0x10201E8")]
	public Slash_DemoGUI()
	{
	}
}
[Token(Token = "0x20000CE")]
public class Slash_MouseOrbit : MonoBehaviour
{
	[Token(Token = "0x40005A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject target;

	[Token(Token = "0x40005A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float distance;

	[Token(Token = "0x40005A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float xSpeed;

	[Token(Token = "0x40005A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float ySpeed;

	[Token(Token = "0x40005A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float yMinLimit;

	[Token(Token = "0x40005A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float yMaxLimit;

	[Token(Token = "0x40005A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float x;

	[Token(Token = "0x40005AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float y;

	[Token(Token = "0x40005AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float prevDistance;

	[Token(Token = "0x60003F0")]
	[Address(RVA = "0x10202BC", Offset = "0x10202BC", VA = "0x10202BC")]
	private void Start()
	{
	}

	[Token(Token = "0x60003F1")]
	[Address(RVA = "0x10202E8", Offset = "0x10202E8", VA = "0x10202E8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60003F2")]
	[Address(RVA = "0x1020740", Offset = "0x1020740", VA = "0x1020740")]
	private static float ClampAngle(float angle, float min, float max)
	{
		return default(float);
	}

	[Token(Token = "0x60003F3")]
	[Address(RVA = "0x102077C", Offset = "0x102077C", VA = "0x102077C")]
	public Slash_MouseOrbit()
	{
	}
}
[Token(Token = "0x20000CF")]
public class Rotate : MonoBehaviour
{
	[Token(Token = "0x40005AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float speed;

	[Token(Token = "0x60003F4")]
	[Address(RVA = "0x1020798", Offset = "0x1020798", VA = "0x1020798")]
	private void Update()
	{
	}

	[Token(Token = "0x60003F5")]
	[Address(RVA = "0x10207E4", Offset = "0x10207E4", VA = "0x10207E4")]
	public Rotate()
	{
	}
}
[Token(Token = "0x20000D0")]
public class MLPForceSaveProbes : MonoBehaviour
{
	[Token(Token = "0x60003F6")]
	[Address(RVA = "0x10207F4", Offset = "0x10207F4", VA = "0x10207F4")]
	public MLPForceSaveProbes()
	{
	}
}
[Token(Token = "0x20000D1")]
[CreateAssetMenu(fileName = "New MLP Settings Asset", menuName = "Magic Tools/Magic Light Probes/Create New Settings Asset", order = 1)]
public class MLPSettings : ScriptableObject
{
	[Token(Token = "0x40005AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public global::MagicLightProbes.MagicLightProbes.Workflow workflow;

	[Token(Token = "0x40005AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float probesSpacing;

	[Token(Token = "0x40005AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float cornersDetectionThreshold;

	[Token(Token = "0x40005B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float cornerProbesSpacing;

	[Token(Token = "0x40005B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float distanceFromGeometry;

	[Token(Token = "0x40005B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int divideVolumeOnProbesCount;

	[Token(Token = "0x40005B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool useVolumeBottom;

	[Token(Token = "0x40005B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool selectedObjectsAsGlobal;

	[Token(Token = "0x40005B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float maxHeightAboveGeometry;

	[Token(Token = "0x40005B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float maxHeightAboveTerrain;

	[Token(Token = "0x40005B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public LayerMask collisionDetectionLayers;

	[Token(Token = "0x40005B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float collisionDetectionRadius;

	[Token(Token = "0x40005B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool considerDistanceToLights;

	[Token(Token = "0x40005BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public global::MagicLightProbes.MagicLightProbes.FillingMode fillingMode;

	[Token(Token = "0x40005BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float lightIntensityThreshold;

	[Token(Token = "0x40005BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool cullByColor;

	[Token(Token = "0x40005BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float colorThreshold;

	[Token(Token = "0x40005BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool fillEquivalentVolume;

	[Token(Token = "0x40005BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float equivalentVolumeFillingRate;

	[Token(Token = "0x40005C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool fillUnlitVolume;

	[Token(Token = "0x40005C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float unlitVolumeFillingRate;

	[Token(Token = "0x40005C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool optimizeForMixedLighting;

	[Token(Token = "0x40005C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	public bool tryPreventLightLeakage;

	[Token(Token = "0x40005C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public global::MagicLightProbes.MagicLightProbes.BoundsDisplayMode boundsDisplayMode;

	[Token(Token = "0x60003F7")]
	[Address(RVA = "0x10207FC", Offset = "0x10207FC", VA = "0x10207FC")]
	public MLPSettings()
	{
	}
}
[Token(Token = "0x20000D2")]
[RequireComponent(typeof(MeshRenderer))]
[RequireComponent(typeof(MeshFilter))]
public class MeshCombiner : MonoBehaviour
{
	[Token(Token = "0x40005C5")]
	private const int Mesh16BitBufferVertexLimit = 65535;

	[Token(Token = "0x40005C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool createMultiMaterialMesh;

	[Token(Token = "0x40005C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[SerializeField]
	private bool combineInactiveChildren;

	[Token(Token = "0x40005C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	[SerializeField]
	private bool deactivateCombinedChildren;

	[Token(Token = "0x40005C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	[SerializeField]
	private bool deactivateCombinedChildrenMeshRenderers;

	[Token(Token = "0x40005CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private bool generateUVMap;

	[Token(Token = "0x40005CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	[SerializeField]
	private bool destroyCombinedChildren;

	[Token(Token = "0x40005CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private string folderPath;

	[Token(Token = "0x40005CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Tooltip("MeshFilters with Meshes which we don't want to combine into one Mesh.")]
	private MeshFilter[] meshFiltersToSkip;

	[Token(Token = "0x17000032")]
	public bool CreateMultiMaterialMesh
	{
		[Token(Token = "0x60003F8")]
		[Address(RVA = "0x1020804", Offset = "0x1020804", VA = "0x1020804")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60003F9")]
		[Address(RVA = "0x102080C", Offset = "0x102080C", VA = "0x102080C")]
		set
		{
		}
	}

	[Token(Token = "0x17000033")]
	public bool CombineInactiveChildren
	{
		[Token(Token = "0x60003FA")]
		[Address(RVA = "0x1020818", Offset = "0x1020818", VA = "0x1020818")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60003FB")]
		[Address(RVA = "0x1020820", Offset = "0x1020820", VA = "0x1020820")]
		set
		{
		}
	}

	[Token(Token = "0x17000034")]
	public bool DeactivateCombinedChildren
	{
		[Token(Token = "0x60003FC")]
		[Address(RVA = "0x102082C", Offset = "0x102082C", VA = "0x102082C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60003FD")]
		[Address(RVA = "0x1020834", Offset = "0x1020834", VA = "0x1020834")]
		set
		{
		}
	}

	[Token(Token = "0x17000035")]
	public bool DeactivateCombinedChildrenMeshRenderers
	{
		[Token(Token = "0x60003FE")]
		[Address(RVA = "0x1020868", Offset = "0x1020868", VA = "0x1020868")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60003FF")]
		[Address(RVA = "0x1020870", Offset = "0x1020870", VA = "0x1020870")]
		set
		{
		}
	}

	[Token(Token = "0x17000036")]
	public bool GenerateUVMap
	{
		[Token(Token = "0x6000400")]
		[Address(RVA = "0x1020890", Offset = "0x1020890", VA = "0x1020890")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000401")]
		[Address(RVA = "0x1020898", Offset = "0x1020898", VA = "0x1020898")]
		set
		{
		}
	}

	[Token(Token = "0x17000037")]
	public bool DestroyCombinedChildren
	{
		[Token(Token = "0x6000402")]
		[Address(RVA = "0x10208A4", Offset = "0x10208A4", VA = "0x10208A4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000403")]
		[Address(RVA = "0x10208AC", Offset = "0x10208AC", VA = "0x10208AC")]
		set
		{
		}
	}

	[Token(Token = "0x17000038")]
	public string FolderPath
	{
		[Token(Token = "0x6000404")]
		[Address(RVA = "0x10208D0", Offset = "0x10208D0", VA = "0x10208D0")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000405")]
		[Address(RVA = "0x10208D8", Offset = "0x10208D8", VA = "0x10208D8")]
		set
		{
		}
	}

	[Token(Token = "0x6000406")]
	[Address(RVA = "0x1020850", Offset = "0x1020850", VA = "0x1020850")]
	private void CheckDeactivateCombinedChildren()
	{
	}

	[Token(Token = "0x6000407")]
	[Address(RVA = "0x10208C0", Offset = "0x10208C0", VA = "0x10208C0")]
	private void CheckDestroyCombinedChildren()
	{
	}

	[Token(Token = "0x6000408")]
	[Address(RVA = "0x10208E0", Offset = "0x10208E0", VA = "0x10208E0")]
	public void CombineDecals()
	{
	}

	[Token(Token = "0x6000409")]
	[Address(RVA = "0x1021940", Offset = "0x1021940", VA = "0x1021940")]
	public void CombineMeshes(bool showCreatedMeshInfo)
	{
	}

	[Token(Token = "0x600040A")]
	[Address(RVA = "0x102334C", Offset = "0x102334C", VA = "0x102334C")]
	private MeshFilter[] GetMeshFiltersToCombine()
	{
		return null;
	}

	[Token(Token = "0x600040B")]
	[Address(RVA = "0x1023658", Offset = "0x1023658", VA = "0x1023658")]
	private MeshFilter[] GetMeshFiltersFromDecalsToCombine()
	{
		return null;
	}

	[Token(Token = "0x600040C")]
	[Address(RVA = "0x1020C00", Offset = "0x1020C00", VA = "0x1020C00")]
	private void CombineDecalsWithSingleMaterial()
	{
	}

	[Token(Token = "0x600040D")]
	[Address(RVA = "0x1021068", Offset = "0x1021068", VA = "0x1021068")]
	private void CombineDecalsWithMutliMaterial()
	{
	}

	[Token(Token = "0x600040E")]
	[Address(RVA = "0x1021C6C", Offset = "0x1021C6C", VA = "0x1021C6C")]
	private void CombineMeshesWithSingleMaterial(bool showCreatedMeshInfo)
	{
	}

	[Token(Token = "0x600040F")]
	[Address(RVA = "0x102245C", Offset = "0x102245C", VA = "0x102245C")]
	private void CombineMeshesWithMutliMaterial(bool showCreatedMeshInfo)
	{
	}

	[Token(Token = "0x6000410")]
	[Address(RVA = "0x1023A34", Offset = "0x1023A34", VA = "0x1023A34")]
	private void DeactivateCombinedDecals()
	{
	}

	[Token(Token = "0x6000411")]
	[Address(RVA = "0x1023B80", Offset = "0x1023B80", VA = "0x1023B80")]
	private void DeactivateCombinedGameObjects(MeshFilter[] meshFilters)
	{
	}

	[Token(Token = "0x6000412")]
	[Address(RVA = "0x1023A30", Offset = "0x1023A30", VA = "0x1023A30")]
	private void GenerateUV(Mesh combinedMesh)
	{
	}

	[Token(Token = "0x6000413")]
	[Address(RVA = "0x1023D2C", Offset = "0x1023D2C", VA = "0x1023D2C")]
	public MeshCombiner()
	{
	}
}
[Token(Token = "0x20000D8")]
public class LocatorKit
{
	[Token(Token = "0x40005DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Dictionary<Type, Type> _singletons;

	[Token(Token = "0x40005DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Dictionary<Type, object> _singletonInstances;

	[Token(Token = "0x6000423")]
	[Address(RVA = "0x1024164", Offset = "0x1024164", VA = "0x1024164")]
	public static void reset()
	{
	}

	[Token(Token = "0x6000424")]
	public static void registerSingleton<TConcrete>()
	{
	}

	[Token(Token = "0x6000425")]
	public static void registerSingleton<TInterface, TConcrete>()
	{
	}

	[Token(Token = "0x6000426")]
	public static void registerSingleton<TConcrete>(TConcrete instance)
	{
	}

	[Token(Token = "0x6000427")]
	public static T resolve<T>() where T : class
	{
		return null;
	}

	[Token(Token = "0x6000428")]
	[Address(RVA = "0x1024208", Offset = "0x1024208", VA = "0x1024208")]
	public LocatorKit()
	{
	}
}
[Token(Token = "0x20000D9")]
public class Slashes_MobileBloom : MonoBehaviour
{
	[Token(Token = "0x40005DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Camera render texture resolution")]
	[Range(0.2f, 1f)]
	public float RenderTextureResolutoinFactor;

	[Token(Token = "0x40005DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Tooltip("Blend factor of the result image.")]
	[Range(0.05f, 2f)]
	public float Intensity;

	[Token(Token = "0x40005E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static float Threshold;

	[Token(Token = "0x40005E1")]
	private const string shaderName = "Hidden/KriptoFX/PostEffects/Slashes_Bloom";

	[Token(Token = "0x40005E2")]
	private const int kMaxIterations = 16;

	[Token(Token = "0x40005E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private readonly RenderTexture[] m_blurBuffer1;

	[Token(Token = "0x40005E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly RenderTexture[] m_blurBuffer2;

	[Token(Token = "0x40005E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private RenderTexture Source;

	[Token(Token = "0x40005E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Material _bloomMaterial;

	[Token(Token = "0x17000039")]
	private Material bloomMaterial
	{
		[Token(Token = "0x600042A")]
		[Address(RVA = "0x10242FC", Offset = "0x10242FC", VA = "0x10242FC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600042B")]
	[Address(RVA = "0x1024444", Offset = "0x1024444", VA = "0x1024444")]
	private void Start()
	{
	}

	[Token(Token = "0x600042C")]
	[Address(RVA = "0x1024448", Offset = "0x1024448", VA = "0x1024448")]
	private void OnPreRender()
	{
	}

	[Token(Token = "0x600042D")]
	[Address(RVA = "0x1024500", Offset = "0x1024500", VA = "0x1024500")]
	private void OnPostRender()
	{
	}

	[Token(Token = "0x600042E")]
	[Address(RVA = "0x10244D8", Offset = "0x10244D8", VA = "0x10244D8")]
	private RenderTextureFormat SupportedHdrFormat()
	{
		return default(RenderTextureFormat);
	}

	[Token(Token = "0x600042F")]
	[Address(RVA = "0x1024544", Offset = "0x1024544", VA = "0x1024544")]
	private void UpdateBloom(RenderTexture source, RenderTexture dest)
	{
	}

	[Token(Token = "0x6000430")]
	[Address(RVA = "0x1024C84", Offset = "0x1024C84", VA = "0x1024C84")]
	public Slashes_MobileBloom()
	{
	}
}
[Token(Token = "0x20000DA")]
[ExecuteInEditMode]
public class Slash_AxisRotateByTime : MonoBehaviour
{
	[Token(Token = "0x40005E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 RotateAxis;

	[Token(Token = "0x6000432")]
	[Address(RVA = "0x1024D5C", Offset = "0x1024D5C", VA = "0x1024D5C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000433")]
	[Address(RVA = "0x1024D60", Offset = "0x1024D60", VA = "0x1024D60")]
	private void Update()
	{
	}

	[Token(Token = "0x6000434")]
	[Address(RVA = "0x1024DBC", Offset = "0x1024DBC", VA = "0x1024DBC")]
	public Slash_AxisRotateByTime()
	{
	}
}
[Token(Token = "0x20000DB")]
[ExecuteInEditMode]
public class Slash_GrvityPoint : MonoBehaviour
{
	[Token(Token = "0x40005E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform Target;

	[Token(Token = "0x40005E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Force;

	[Token(Token = "0x40005EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float StopDistance;

	[Token(Token = "0x40005EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem ps;

	[Token(Token = "0x40005EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x40005ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ParticleSystem.MainModule mainModule;

	[Token(Token = "0x6000435")]
	[Address(RVA = "0x1024DCC", Offset = "0x1024DCC", VA = "0x1024DCC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000436")]
	[Address(RVA = "0x1024E4C", Offset = "0x1024E4C", VA = "0x1024E4C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000437")]
	[Address(RVA = "0x102527C", Offset = "0x102527C", VA = "0x102527C")]
	public Slash_GrvityPoint()
	{
	}
}
[Token(Token = "0x20000DC")]
public class Slash_Light : MonoBehaviour
{
	[Token(Token = "0x40005EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve LightCurve;

	[Token(Token = "0x40005EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Gradient LightColor;

	[Token(Token = "0x40005F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x40005F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float GraphIntensityMultiplier;

	[Token(Token = "0x40005F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool IsLoop;

	[Token(Token = "0x40005F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	[HideInInspector]
	public bool canUpdate;

	[Token(Token = "0x40005F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float startTime;

	[Token(Token = "0x40005F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Color startColor;

	[Token(Token = "0x40005F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Light lightSource;

	[Token(Token = "0x6000438")]
	[Address(RVA = "0x102528C", Offset = "0x102528C", VA = "0x102528C")]
	public void SetStartColor(Color color)
	{
	}

	[Token(Token = "0x6000439")]
	[Address(RVA = "0x1025298", Offset = "0x1025298", VA = "0x1025298")]
	private void Awake()
	{
	}

	[Token(Token = "0x600043A")]
	[Address(RVA = "0x10253A8", Offset = "0x10253A8", VA = "0x10253A8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600043B")]
	[Address(RVA = "0x10254B8", Offset = "0x10254B8", VA = "0x10254B8")]
	private void Update()
	{
	}

	[Token(Token = "0x600043C")]
	[Address(RVA = "0x10255A0", Offset = "0x10255A0", VA = "0x10255A0")]
	public Slash_Light()
	{
	}
}
[Token(Token = "0x20000DD")]
public class Slash_UIEffectList : MonoBehaviour
{
	[Token(Token = "0x40005F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] Prefabs;

	[Token(Token = "0x40005F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int currentNomber;

	[Token(Token = "0x40005F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject currentInstance;

	[Token(Token = "0x600043D")]
	[Address(RVA = "0x1025644", Offset = "0x1025644", VA = "0x1025644")]
	private void Start()
	{
	}

	[Token(Token = "0x600043E")]
	[Address(RVA = "0x1025648", Offset = "0x1025648", VA = "0x1025648")]
	private void Update()
	{
	}

	[Token(Token = "0x600043F")]
	[Address(RVA = "0x102564C", Offset = "0x102564C", VA = "0x102564C")]
	public void ChangeCurrent(int delta)
	{
	}

	[Token(Token = "0x6000440")]
	[Address(RVA = "0x1025780", Offset = "0x1025780", VA = "0x1025780")]
	private void RemoveClones()
	{
	}

	[Token(Token = "0x6000441")]
	[Address(RVA = "0x1025884", Offset = "0x1025884", VA = "0x1025884")]
	public Slash_UIEffectList()
	{
	}
}
[Token(Token = "0x20000DE")]
public class Slash_WroomWroom : MonoBehaviour
{
	[Token(Token = "0x40005FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float Speed;

	[Token(Token = "0x40005FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject Target;

	[Token(Token = "0x6000442")]
	[Address(RVA = "0x102588C", Offset = "0x102588C", VA = "0x102588C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000443")]
	[Address(RVA = "0x10258B8", Offset = "0x10258B8", VA = "0x10258B8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000444")]
	[Address(RVA = "0x1025A44", Offset = "0x1025A44", VA = "0x1025A44")]
	public Slash_WroomWroom()
	{
	}
}
[Token(Token = "0x20000DF")]
public class Teleport : MonoBehaviour
{
	[Token(Token = "0x40005FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 Range;

	[Token(Token = "0x40005FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 startPos;

	[Token(Token = "0x6000445")]
	[Address(RVA = "0x1025A54", Offset = "0x1025A54", VA = "0x1025A54")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000446")]
	[Address(RVA = "0x1025A84", Offset = "0x1025A84", VA = "0x1025A84")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000447")]
	[Address(RVA = "0x1025AB0", Offset = "0x1025AB0", VA = "0x1025AB0")]
	public void CustomTeleport()
	{
	}

	[Token(Token = "0x6000448")]
	[Address(RVA = "0x1025BC8", Offset = "0x1025BC8", VA = "0x1025BC8")]
	public Teleport()
	{
	}
}
[Token(Token = "0x20000E0")]
public class Demo : MonoBehaviour
{
	[Token(Token = "0x40005FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform gestureOnScreenPrefab;

	[Token(Token = "0x40005FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<Gesture> trainingSet;

	[Token(Token = "0x4000600")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<Point> points;

	[Token(Token = "0x4000601")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int strokeId;

	[Token(Token = "0x4000602")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 virtualKeyPosition;

	[Token(Token = "0x4000603")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Rect drawArea;

	[Token(Token = "0x4000604")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private RuntimePlatform platform;

	[Token(Token = "0x4000605")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int vertexCount;

	[Token(Token = "0x4000606")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<LineRenderer> gestureLinesRenderer;

	[Token(Token = "0x4000607")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private LineRenderer currentGestureLineRenderer;

	[Token(Token = "0x4000608")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private string message;

	[Token(Token = "0x4000609")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool recognized;

	[Token(Token = "0x400060A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private string newGestureName;

	[Token(Token = "0x6000449")]
	[Address(RVA = "0x1025BD0", Offset = "0x1025BD0", VA = "0x1025BD0")]
	private void Start()
	{
	}

	[Token(Token = "0x600044A")]
	[Address(RVA = "0x1025E54", Offset = "0x1025E54", VA = "0x1025E54")]
	private void Update()
	{
	}

	[Token(Token = "0x600044B")]
	[Address(RVA = "0x102640C", Offset = "0x102640C", VA = "0x102640C")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600044C")]
	[Address(RVA = "0x1026974", Offset = "0x1026974", VA = "0x1026974")]
	public Demo()
	{
	}
}
[Token(Token = "0x20000E1")]
[ExecuteInEditMode]
[RequireComponent(typeof(Renderer))]
public class ProjectedPlanarShadowController : MonoBehaviour
{
	[Token(Token = "0x400060B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform shadowReceiverPlane;

	[Token(Token = "0x400060C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float yOffset;

	[Token(Token = "0x400060D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Renderer meshRenderer;

	[Token(Token = "0x600044D")]
	[Address(RVA = "0x1026B10", Offset = "0x1026B10", VA = "0x1026B10")]
	private void Awake()
	{
	}

	[Token(Token = "0x600044E")]
	[Address(RVA = "0x1026B68", Offset = "0x1026B68", VA = "0x1026B68")]
	private void Update()
	{
	}

	[Token(Token = "0x600044F")]
	[Address(RVA = "0x1026D18", Offset = "0x1026D18", VA = "0x1026D18")]
	public ProjectedPlanarShadowController()
	{
	}
}
[Token(Token = "0x20000E2")]
public class PreviousAndNext : MonoBehaviour
{
	[Token(Token = "0x400060E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] Prefab;

	[Token(Token = "0x400060F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int number;

	[Token(Token = "0x4000610")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject currentInstance;

	[Token(Token = "0x4000611")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool IsPressed;

	[Token(Token = "0x6000450")]
	[Address(RVA = "0x1026D2C", Offset = "0x1026D2C", VA = "0x1026D2C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000451")]
	[Address(RVA = "0x1026E64", Offset = "0x1026E64", VA = "0x1026E64")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000452")]
	[Address(RVA = "0x1026D34", Offset = "0x1026D34", VA = "0x1026D34")]
	private void ChangeCurrent(int delta)
	{
	}

	[Token(Token = "0x6000453")]
	[Address(RVA = "0x1026EF4", Offset = "0x1026EF4", VA = "0x1026EF4")]
	public PreviousAndNext()
	{
	}
}
[Token(Token = "0x20000E3")]
public class AbsoluteCollisionHaptics : AbsoluteHaptics
{
	[Token(Token = "0x6000454")]
	[Address(RVA = "0x1026EFC", Offset = "0x1026EFC", VA = "0x1026EFC")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000455")]
	[Address(RVA = "0x1026F04", Offset = "0x1026F04", VA = "0x1026F04")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000456")]
	[Address(RVA = "0x1026F0C", Offset = "0x1026F0C", VA = "0x1026F0C")]
	public AbsoluteCollisionHaptics()
	{
	}
}
[Token(Token = "0x20000E4")]
public class BallObject : MonoBehaviour
{
	[Token(Token = "0x4000612")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float DeathTime;

	[Token(Token = "0x4000613")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float mStartTime;

	[Token(Token = "0x6000457")]
	[Address(RVA = "0x1026F14", Offset = "0x1026F14", VA = "0x1026F14")]
	private void Start()
	{
	}

	[Token(Token = "0x6000458")]
	[Address(RVA = "0x1026F30", Offset = "0x1026F30", VA = "0x1026F30")]
	private void Update()
	{
	}

	[Token(Token = "0x6000459")]
	[Address(RVA = "0x1026FC0", Offset = "0x1026FC0", VA = "0x1026FC0")]
	public BallObject()
	{
	}
}
[Token(Token = "0x20000E5")]
public class BallSpawner : MonoBehaviour
{
	[Token(Token = "0x4000614")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject BallPrefab;

	[Token(Token = "0x4000615")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float SpawnTime;

	[Token(Token = "0x4000616")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float mStartTime;

	[Token(Token = "0x600045A")]
	[Address(RVA = "0x1026FD0", Offset = "0x1026FD0", VA = "0x1026FD0")]
	private void Start()
	{
	}

	[Token(Token = "0x600045B")]
	[Address(RVA = "0x1026FEC", Offset = "0x1026FEC", VA = "0x1026FEC")]
	private void Update()
	{
	}

	[Token(Token = "0x600045C")]
	[Address(RVA = "0x1027118", Offset = "0x1027118", VA = "0x1027118")]
	public BallSpawner()
	{
	}
}
[Token(Token = "0x20000E6")]
public class HapticClipSwitcher : MonoBehaviour
{
	[Token(Token = "0x4000617")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioClip AudioA;

	[Token(Token = "0x4000618")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip AudioB;

	[Token(Token = "0x4000619")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioSource Audio;

	[Token(Token = "0x400061A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ContinuousHaptics AudioHaptic;

	[Token(Token = "0x400061B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool mClipB;

	[Token(Token = "0x600045D")]
	[Address(RVA = "0x1027128", Offset = "0x1027128", VA = "0x1027128")]
	private void Update()
	{
	}

	[Token(Token = "0x600045E")]
	[Address(RVA = "0x10271F0", Offset = "0x10271F0", VA = "0x10271F0")]
	public HapticClipSwitcher()
	{
	}
}
[Token(Token = "0x20000E7")]
public class XRComponentTracker : MonoBehaviour
{
	[Token(Token = "0x400061C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Rigidbody LeftHand;

	[Token(Token = "0x400061D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Rigidbody RightHand;

	[Token(Token = "0x400061E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<XRNodeState> mNodeStates;

	[Token(Token = "0x400061F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 mLeftHandPos;

	[Token(Token = "0x4000620")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 mRightHandPos;

	[Token(Token = "0x4000621")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Quaternion mLeftHandRot;

	[Token(Token = "0x4000622")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Quaternion mRightHandRot;

	[Token(Token = "0x600045F")]
	[Address(RVA = "0x10271F8", Offset = "0x10271F8", VA = "0x10271F8")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000460")]
	[Address(RVA = "0x102767C", Offset = "0x102767C", VA = "0x102767C")]
	public XRComponentTracker()
	{
	}
}
[Token(Token = "0x20000E8")]
public class PlayerTank : MonoBehaviour
{
	[Token(Token = "0x4000623")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float Speed;

	[Token(Token = "0x4000624")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform TurretEnd;

	[Token(Token = "0x4000625")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject BulletPrefab;

	[Token(Token = "0x4000626")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent ShootEvent;

	[Token(Token = "0x6000461")]
	[Address(RVA = "0x1027704", Offset = "0x1027704", VA = "0x1027704")]
	private void Update()
	{
	}

	[Token(Token = "0x6000462")]
	[Address(RVA = "0x10279A4", Offset = "0x10279A4", VA = "0x10279A4")]
	public PlayerTank()
	{
	}
}
[Token(Token = "0x20000E9")]
public class SimpleBullet : MonoBehaviour
{
	[Token(Token = "0x4000627")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float Speed;

	[Token(Token = "0x4000628")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float TimeToLive;

	[Token(Token = "0x4000629")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float mStartTime;

	[Token(Token = "0x6000463")]
	[Address(RVA = "0x10279B4", Offset = "0x10279B4", VA = "0x10279B4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000464")]
	[Address(RVA = "0x10279D0", Offset = "0x10279D0", VA = "0x10279D0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000465")]
	[Address(RVA = "0x1027AEC", Offset = "0x1027AEC", VA = "0x1027AEC")]
	public SimpleBullet()
	{
	}
}
[Token(Token = "0x20000EA")]
public class SimpleTarget : MonoBehaviour
{
	[Token(Token = "0x400062A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int Health;

	[Token(Token = "0x400062B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public LayerMask BulletLayer;

	[Token(Token = "0x400062C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent HitEvent;

	[Token(Token = "0x400062D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent DestroyEvent;

	[Token(Token = "0x400062E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int mDamage;

	[Token(Token = "0x6000466")]
	[Address(RVA = "0x1027AFC", Offset = "0x1027AFC", VA = "0x1027AFC")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000467")]
	[Address(RVA = "0x1027C4C", Offset = "0x1027C4C", VA = "0x1027C4C")]
	public SimpleTarget()
	{
	}
}
[Token(Token = "0x20000EB")]
public class XRPlayer : MonoBehaviour
{
	[Token(Token = "0x400062F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject Head;

	[Token(Token = "0x4000630")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Rigidbody LeftHand;

	[Token(Token = "0x4000631")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Rigidbody RightHand;

	[Token(Token = "0x4000632")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<XRNodeState> mNodeStates;

	[Token(Token = "0x4000633")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 mHeadPos;

	[Token(Token = "0x4000634")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 mLeftHandPos;

	[Token(Token = "0x4000635")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 mRightHandPos;

	[Token(Token = "0x4000636")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Quaternion mHeadRot;

	[Token(Token = "0x4000637")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Quaternion mLeftHandRot;

	[Token(Token = "0x4000638")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private Quaternion mRightHandRot;

	[Token(Token = "0x6000468")]
	[Address(RVA = "0x1027C7C", Offset = "0x1027C7C", VA = "0x1027C7C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000469")]
	[Address(RVA = "0x1027D8C", Offset = "0x1027D8C", VA = "0x1027D8C")]
	private void Update()
	{
	}

	[Token(Token = "0x600046A")]
	[Address(RVA = "0x102805C", Offset = "0x102805C", VA = "0x102805C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600046B")]
	[Address(RVA = "0x102841C", Offset = "0x102841C", VA = "0x102841C")]
	public XRPlayer()
	{
	}
}
[Token(Token = "0x20000EC")]
public class InputDeviceCharacteristicsAdapter
{
	[Token(Token = "0x600046C")]
	[Address(RVA = "0x10284A4", Offset = "0x10284A4", VA = "0x10284A4")]
	public static InputDeviceCharacteristics Convert(XRNode xrNode)
	{
		return default(InputDeviceCharacteristics);
	}

	[Token(Token = "0x600046D")]
	[Address(RVA = "0x10284C4", Offset = "0x10284C4", VA = "0x10284C4")]
	public static PXR_Input.VibrateType ConvertToPXRVibrateType(InputDeviceCharacteristics inputDeviceCharacteristics)
	{
		return default(PXR_Input.VibrateType);
	}

	[Token(Token = "0x600046E")]
	[Address(RVA = "0x10284F8", Offset = "0x10284F8", VA = "0x10284F8")]
	public static PXR_Input.VibrateType ConvertToPXRVibrateType(XRNode xrNode)
	{
		return default(PXR_Input.VibrateType);
	}

	[Token(Token = "0x600046F")]
	[Address(RVA = "0x102851C", Offset = "0x102851C", VA = "0x102851C")]
	public InputDeviceCharacteristicsAdapter()
	{
	}
}
[Token(Token = "0x20000ED")]
public class PXR_HapticsAdapter : MonoBehaviour
{
	[Token(Token = "0x6000470")]
	[Address(RVA = "0x1028524", Offset = "0x1028524", VA = "0x1028524")]
	public static void SendHapticImpulse(InputDevice device, uint channel, float amplitude, float duration = 1f)
	{
	}

	[Token(Token = "0x6000471")]
	[Address(RVA = "0x10285BC", Offset = "0x10285BC", VA = "0x10285BC")]
	public static void SendHapticBuffer(InputDevice device, uint channel, byte[] buffer)
	{
	}

	[Token(Token = "0x6000472")]
	[Address(RVA = "0x1028624", Offset = "0x1028624", VA = "0x1028624")]
	public PXR_HapticsAdapter()
	{
	}
}
[Token(Token = "0x20000EE")]
[ExecuteInEditMode]
public class ScreenShakeVR : MonoBehaviour
{
	[Token(Token = "0x20000EF")]
	public class ShakeEvent
	{
		[Token(Token = "0x4000641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float magnitude;

		[Token(Token = "0x4000642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float length;

		[Token(Token = "0x4000643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float exponent;

		[Token(Token = "0x4000644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float time;

		[Token(Token = "0x1700003A")]
		public bool finished
		{
			[Token(Token = "0x6000478")]
			[Address(RVA = "0x1028778", Offset = "0x1028778", VA = "0x1028778")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700003B")]
		public float currentStrength
		{
			[Token(Token = "0x6000479")]
			[Address(RVA = "0x102878C", Offset = "0x102878C", VA = "0x102878C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600047A")]
		[Address(RVA = "0x10287B8", Offset = "0x10287B8", VA = "0x10287B8")]
		public ShakeEvent(float mag, float len, float exp = 2f)
		{
		}

		[Token(Token = "0x600047B")]
		[Address(RVA = "0x10287F4", Offset = "0x10287F4", VA = "0x10287F4")]
		public void Update(float deltaTime)
		{
		}
	}

	[Token(Token = "0x4000639")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ScreenShakeVR instance;

	[Token(Token = "0x400063A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Material material;

	[Token(Token = "0x400063B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float shakeMagnitude;

	[Token(Token = "0x400063C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float shakeFrequency;

	[Token(Token = "0x400063D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float shakeVal;

	[Token(Token = "0x400063E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float shakeCumulation;

	[Token(Token = "0x400063F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("Shake the screen when the space key is pressed")]
	public bool debug;

	[Token(Token = "0x4000640")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<ShakeEvent> activeShakes;

	[Token(Token = "0x6000473")]
	[Address(RVA = "0x102862C", Offset = "0x102862C", VA = "0x102862C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000474")]
	[Address(RVA = "0x1028684", Offset = "0x1028684", VA = "0x1028684")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000475")]
	[Address(RVA = "0x10286DC", Offset = "0x10286DC", VA = "0x10286DC")]
	public void Shake(float magnitude, float length, float exponent = 2f)
	{
	}

	[Token(Token = "0x6000476")]
	[Address(RVA = "0x10286E0", Offset = "0x10286E0", VA = "0x10286E0")]
	public static void TriggerShake(float magnitude, float length, float exponent = 2f)
	{
	}

	[Token(Token = "0x6000477")]
	[Address(RVA = "0x10286E4", Offset = "0x10286E4", VA = "0x10286E4")]
	public ScreenShakeVR()
	{
	}
}
[Token(Token = "0x20000F0")]
[ExecuteInEditMode]
public class ConstraintTransform : MonoBehaviour
{
	[Token(Token = "0x20000F1")]
	public enum ScaleMode
	{
		[Token(Token = "0x400064A")]
		LocalScale,
		[Token(Token = "0x400064B")]
		HierarchyScale
	}

	[Token(Token = "0x4000645")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public float m_version;

	[Token(Token = "0x4000646")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform m_target;

	[Token(Token = "0x4000647")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ScaleMode scaleMode;

	[Token(Token = "0x4000648")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform m_transform;

	[Token(Token = "0x600047C")]
	[Address(RVA = "0x1028804", Offset = "0x1028804", VA = "0x1028804")]
	private void Start()
	{
	}

	[Token(Token = "0x600047D")]
	[Address(RVA = "0x1028828", Offset = "0x1028828", VA = "0x1028828")]
	private void Update()
	{
	}

	[Token(Token = "0x600047E")]
	[Address(RVA = "0x10289B8", Offset = "0x10289B8", VA = "0x10289B8")]
	public ConstraintTransform()
	{
	}
}
[Token(Token = "0x20000F2")]
public class SoxAtkDragTransform : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20000F3")]
	public struct DragTransformSet
	{
		[Token(Token = "0x4000651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Transform m_sourceObject;

		[Token(Token = "0x4000652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Transform m_dragObject;

		[Token(Token = "0x4000653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float m_positionTension;

		[Token(Token = "0x4000654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float m_rotationTension;

		[Token(Token = "0x4000655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public Vector3 m_localPosBak;

		[Token(Token = "0x4000656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[HideInInspector]
		public Quaternion m_localRotBak;

		[Token(Token = "0x4000657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[HideInInspector]
		public Vector3 m_posBefore;

		[Token(Token = "0x4000658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public Quaternion m_rotBefore;

		[Token(Token = "0x6000485")]
		[Address(RVA = "0x102A590", Offset = "0x102A590", VA = "0x102A590")]
		public DragTransformSet(Transform sourceObject, Transform dragObject, float positionTension, float rotationTension, Vector3 localPosBak, Quaternion localRotBak, Vector3 posBefore, Quaternion rotBefore)
		{
		}
	}

	[Token(Token = "0x400064C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public float m_version;

	[Token(Token = "0x400064D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Header("Equal Tension - Tension equal to Element 0")]
	public bool m_equalTension;

	[Token(Token = "0x400064E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float m_tensionMultiplier;

	[Token(Token = "0x400064F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool m_initialized;

	[Token(Token = "0x4000650")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	public DragTransformSet[] m_dragSet;

	[Token(Token = "0x600047F")]
	[Address(RVA = "0x10289CC", Offset = "0x10289CC", VA = "0x10289CC")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000480")]
	[Address(RVA = "0x1028A4C", Offset = "0x1028A4C", VA = "0x1028A4C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000481")]
	[Address(RVA = "0x1028A70", Offset = "0x1028A70", VA = "0x1028A70")]
	private void Initialize()
	{
	}

	[Token(Token = "0x6000482")]
	[Address(RVA = "0x1028FD4", Offset = "0x1028FD4", VA = "0x1028FD4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000483")]
	[Address(RVA = "0x1028D54", Offset = "0x1028D54", VA = "0x1028D54")]
	public void Clear()
	{
	}

	[Token(Token = "0x6000484")]
	[Address(RVA = "0x1029358", Offset = "0x1029358", VA = "0x1029358")]
	public SoxAtkDragTransform()
	{
	}
}
[Token(Token = "0x20000F4")]
public class SoxAtkJiggleBoneSimple : MonoBehaviour
{
	[Token(Token = "0x20000F5")]
	public enum Axis
	{
		[Token(Token = "0x400067D")]
		X,
		[Token(Token = "0x400067E")]
		Y,
		[Token(Token = "0x400067F")]
		Z
	}

	[Token(Token = "0x20000F6")]
	public enum UpnodeControl
	{
		[Token(Token = "0x4000681")]
		LookAt,
		[Token(Token = "0x4000682")]
		AxisAlignment
	}

	[Token(Token = "0x4000659")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public float m_version;

	[Token(Token = "0x400065A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[HideInInspector]
	public static SoxAtkJiggleBoneSimple[] m_jiggleBoneAll;

	[Token(Token = "0x400065B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[HideInInspector]
	public static bool m_jiggleBoneAllSearched;

	[Token(Token = "0x400065C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private bool m_initialized;

	[Token(Token = "0x400065D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	[HideInInspector]
	public bool m_ifHead;

	[Token(Token = "0x400065E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	private bool m_treeInit;

	[Token(Token = "0x400065F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public SoxAtkJiggleBoneSimple[] m_tree;

	[Token(Token = "0x4000660")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform meTrans;

	[Token(Token = "0x4000661")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float m_targetDistance;

	[Token(Token = "0x4000662")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool m_targetFlip;

	[Token(Token = "0x4000663")]
	private const float mc_tensionMul = 0.1f;

	[Token(Token = "0x4000664")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float m_tensionProxy;

	[Token(Token = "0x4000665")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float m_tension;

	[Token(Token = "0x4000666")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Range(0f, 1f)]
	public float m_inercia;

	[Token(Token = "0x4000667")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 m_upVector;

	[Token(Token = "0x4000668")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool m_upWorld;

	[Token(Token = "0x4000669")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform m_upNode;

	[Token(Token = "0x400066A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Axis m_upNodeAxis;

	[Token(Token = "0x400066B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private bool m_upNodeAutoSet;

	[Token(Token = "0x400066C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public UpnodeControl m_upnodeControl;

	[Token(Token = "0x400066D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public Vector3 m_gravity;

	[Token(Token = "0x400066E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public SoxAtkCollider[] m_colliders;

	[Token(Token = "0x400066F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Transform m_target;

	[Token(Token = "0x4000670")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Transform m_targetRoot;

	[Token(Token = "0x4000671")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private SoxAtkTentacle m_soxAtkTentacle;

	[Token(Token = "0x4000672")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Vector3 m_forceVec;

	[Token(Token = "0x4000673")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private Vector3 m_resultVec;

	[Token(Token = "0x4000674")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Vector3 m_lookWPos;

	[Token(Token = "0x4000675")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private Vector3 m_beforTargetWPos;

	[Token(Token = "0x4000676")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Vector3 m_beforeInerciaVec;

	[Token(Token = "0x4000677")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	public bool m_optShowGizmosAtPlaying;

	[Token(Token = "0x4000678")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD5")]
	public bool m_optShowGizmosAtEditor;

	[Token(Token = "0x4000679")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public float m_optGizmoSize;

	[Token(Token = "0x400067A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	public bool m_optShowHiddenNodes;

	[Token(Token = "0x400067B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDD")]
	public bool m_hierarchyChanged;

	[Token(Token = "0x6000486")]
	[Address(RVA = "0x102A634", Offset = "0x102A634", VA = "0x102A634")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000487")]
	[Address(RVA = "0x102ADD4", Offset = "0x102ADD4", VA = "0x102ADD4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000488")]
	[Address(RVA = "0x102A89C", Offset = "0x102A89C", VA = "0x102A89C")]
	public void Initialize()
	{
	}

	[Token(Token = "0x6000489")]
	[Address(RVA = "0x102AEEC", Offset = "0x102AEEC", VA = "0x102AEEC")]
	private void SetHead()
	{
	}

	[Token(Token = "0x600048A")]
	[Address(RVA = "0x102AD14", Offset = "0x102AD14", VA = "0x102AD14")]
	public void SetRealHead()
	{
	}

	[Token(Token = "0x600048B")]
	[Address(RVA = "0x102B344", Offset = "0x102B344", VA = "0x102B344")]
	private SoxAtkJiggleBoneSimple[] ArrayAdd(SoxAtkJiggleBoneSimple[] arrA, SoxAtkJiggleBoneSimple[] arrB)
	{
		return null;
	}

	[Token(Token = "0x600048C")]
	[Address(RVA = "0x102B3F0", Offset = "0x102B3F0", VA = "0x102B3F0")]
	private void Update()
	{
	}

	[Token(Token = "0x600048D")]
	[Address(RVA = "0x102B400", Offset = "0x102B400", VA = "0x102B400")]
	private void JiggleBoneUpdateTree()
	{
	}

	[Token(Token = "0x600048E")]
	[Address(RVA = "0x102B45C", Offset = "0x102B45C", VA = "0x102B45C")]
	public void JiggleBoneUpdate()
	{
	}

	[Token(Token = "0x600048F")]
	[Address(RVA = "0x102AE00", Offset = "0x102AE00", VA = "0x102AE00")]
	public bool Clear()
	{
		return default(bool);
	}

	[Token(Token = "0x6000490")]
	[Address(RVA = "0x102BB60", Offset = "0x102BB60", VA = "0x102BB60")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000491")]
	[Address(RVA = "0x102B144", Offset = "0x102B144", VA = "0x102B144")]
	public void SetTargetDistance()
	{
	}

	[Token(Token = "0x6000492")]
	[Address(RVA = "0x102BDB0", Offset = "0x102BDB0", VA = "0x102BDB0")]
	public void SetHiddenNodes()
	{
	}

	[Token(Token = "0x6000493")]
	[Address(RVA = "0x102BE30", Offset = "0x102BE30", VA = "0x102BE30")]
	public void MyValidate()
	{
	}

	[Token(Token = "0x6000494")]
	[Address(RVA = "0x102BEB8", Offset = "0x102BEB8", VA = "0x102BEB8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000495")]
	[Address(RVA = "0x102B1EC", Offset = "0x102B1EC", VA = "0x102B1EC")]
	public void EnsureGoodVars()
	{
	}

	[Token(Token = "0x6000496")]
	[Address(RVA = "0x102BFBC", Offset = "0x102BFBC", VA = "0x102BFBC")]
	public SoxAtkJiggleBoneSimple()
	{
	}
}
[Token(Token = "0x20000F7")]
public class SoxAtkCollider : MonoBehaviour
{
	[Token(Token = "0x20000F8")]
	public enum ColliderType
	{
		[Token(Token = "0x400068E")]
		Sphere
	}

	[Token(Token = "0x20000F9")]
	public enum Axis
	{
		[Token(Token = "0x4000690")]
		X,
		[Token(Token = "0x4000691")]
		Y,
		[Token(Token = "0x4000692")]
		Z
	}

	[Token(Token = "0x4000683")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public float m_version;

	[Token(Token = "0x4000684")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public ColliderType m_colliderType;

	[Token(Token = "0x4000685")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Axis m_referenceAxisOfScale;

	[Token(Token = "0x4000686")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float m_sphereRadius;

	[Token(Token = "0x4000687")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public float m_sphereRadiusScaled;

	[Token(Token = "0x4000688")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Range(0f, 1f)]
	public float m_friction;

	[Token(Token = "0x4000689")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public float m_frictionInverse;

	[Token(Token = "0x400068A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Color m_gizmoColor;

	[Token(Token = "0x400068B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool m_showGizmoAtPlay;

	[Token(Token = "0x400068C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	public bool m_showGizmoAtEditor;

	[Token(Token = "0x6000497")]
	[Address(RVA = "0x102C058", Offset = "0x102C058", VA = "0x102C058")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000498")]
	[Address(RVA = "0x102C160", Offset = "0x102C160", VA = "0x102C160")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000499")]
	[Address(RVA = "0x102C090", Offset = "0x102C090", VA = "0x102C090")]
	private void DrawGizmo()
	{
	}

	[Token(Token = "0x600049A")]
	[Address(RVA = "0x102C164", Offset = "0x102C164", VA = "0x102C164")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x600049B")]
	[Address(RVA = "0x102C188", Offset = "0x102C188", VA = "0x102C188")]
	public SoxAtkCollider()
	{
	}
}
[Token(Token = "0x20000FA")]
public class SoxAtkJiggleBone : MonoBehaviour
{
	[Token(Token = "0x20000FB")]
	public enum Axis
	{
		[Token(Token = "0x40006C2")]
		X,
		[Token(Token = "0x40006C3")]
		Y,
		[Token(Token = "0x40006C4")]
		Z
	}

	[Token(Token = "0x20000FC")]
	public enum SimType
	{
		[Token(Token = "0x40006C6")]
		Simple,
		[Token(Token = "0x40006C7")]
		KeepDistance
	}

	[Token(Token = "0x20000FD")]
	public enum UpnodeControl
	{
		[Token(Token = "0x40006C9")]
		LookAt,
		[Token(Token = "0x40006CA")]
		AxisAlignment
	}

	[Token(Token = "0x4000693")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public float m_version;

	[Token(Token = "0x4000694")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[HideInInspector]
	public static SoxAtkJiggleBone[] m_jiggleBoneAll;

	[Token(Token = "0x4000695")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[HideInInspector]
	public static bool m_jiggleBoneAllSearched;

	[Token(Token = "0x4000696")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private bool m_initialized;

	[Token(Token = "0x4000697")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	[HideInInspector]
	public bool m_ifHead;

	[Token(Token = "0x4000698")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	private bool m_treeInit;

	[Token(Token = "0x4000699")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public SoxAtkJiggleBone[] m_tree;

	[Token(Token = "0x400069A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool m_animated;

	[Token(Token = "0x400069B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform meTrans;

	[Token(Token = "0x400069C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public SimType m_simType;

	[Token(Token = "0x400069D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float m_targetDistance;

	[Token(Token = "0x400069E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool m_targetFlip;

	[Token(Token = "0x400069F")]
	private const float mc_tensionMul = 0.1f;

	[Token(Token = "0x40006A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float m_tensionProxy;

	[Token(Token = "0x40006A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float m_tension;

	[Token(Token = "0x40006A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[Range(0f, 1f)]
	public float m_inercia;

	[Token(Token = "0x40006A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 m_upVector;

	[Token(Token = "0x40006A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public Axis m_lookAxis;

	[Token(Token = "0x40006A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool m_lookAxisFlip;

	[Token(Token = "0x40006A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public Axis m_sourceUpAxis;

	[Token(Token = "0x40006A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool m_sourceUpAxisFlip;

	[Token(Token = "0x40006A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Axis m_sourceUpAxisBefore;

	[Token(Token = "0x40006A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool m_upWorld;

	[Token(Token = "0x40006AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Transform m_upNode;

	[Token(Token = "0x40006AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Axis m_upNodeAxis;

	[Token(Token = "0x40006AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private bool m_upNodeAutoSet;

	[Token(Token = "0x40006AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public UpnodeControl m_upnodeControl;

	[Token(Token = "0x40006AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public Vector3 m_gravity;

	[Token(Token = "0x40006AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public SoxAtkCollider[] m_colliders;

	[Token(Token = "0x40006B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Transform m_target;

	[Token(Token = "0x40006B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Transform m_targetRoot;

	[Token(Token = "0x40006B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Transform m_proxyLook;

	[Token(Token = "0x40006B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Transform m_proxyAlign;

	[Token(Token = "0x40006B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Transform m_tentacle;

	[Token(Token = "0x40006B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private SoxAtkTentacle m_soxAtkTentacle;

	[Token(Token = "0x40006B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Vector3 m_boneEndDragWPos;

	[Token(Token = "0x40006B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private Vector3 m_forceVec;

	[Token(Token = "0x40006B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Vector3 m_resultVec;

	[Token(Token = "0x40006B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private Vector3 m_lookWPos;

	[Token(Token = "0x40006BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private Vector3 m_beforTargetWPos;

	[Token(Token = "0x40006BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	private Vector3 m_beforeInerciaVec;

	[Token(Token = "0x40006BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public bool m_optShowGizmosAtPlaying;

	[Token(Token = "0x40006BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x119")]
	public bool m_optShowGizmosAtEditor;

	[Token(Token = "0x40006BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	public float m_optGizmoSize;

	[Token(Token = "0x40006BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public bool m_optShowHiddenNodes;

	[Token(Token = "0x40006C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x121")]
	public bool m_hierarchyChanged;

	[Token(Token = "0x600049C")]
	[Address(RVA = "0x102C1C4", Offset = "0x102C1C4", VA = "0x102C1C4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600049D")]
	[Address(RVA = "0x102CC70", Offset = "0x102CC70", VA = "0x102CC70")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600049E")]
	[Address(RVA = "0x102C42C", Offset = "0x102C42C", VA = "0x102C42C")]
	public void Initialize()
	{
	}

	[Token(Token = "0x600049F")]
	[Address(RVA = "0x102DF34", Offset = "0x102DF34", VA = "0x102DF34")]
	private void InitializeTentacle()
	{
	}

	[Token(Token = "0x60004A0")]
	[Address(RVA = "0x102CD90", Offset = "0x102CD90", VA = "0x102CD90")]
	private void SetHead()
	{
	}

	[Token(Token = "0x60004A1")]
	[Address(RVA = "0x102CBB0", Offset = "0x102CBB0", VA = "0x102CBB0")]
	public void SetRealHead()
	{
	}

	[Token(Token = "0x60004A2")]
	[Address(RVA = "0x102E0C0", Offset = "0x102E0C0", VA = "0x102E0C0")]
	private SoxAtkJiggleBone[] ArrayAdd(SoxAtkJiggleBone[] arrA, SoxAtkJiggleBone[] arrB)
	{
		return null;
	}

	[Token(Token = "0x60004A3")]
	[Address(RVA = "0x102E16C", Offset = "0x102E16C", VA = "0x102E16C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60004A4")]
	[Address(RVA = "0x102E17C", Offset = "0x102E17C", VA = "0x102E17C")]
	public void JiggleBoneUpdateTree()
	{
	}

	[Token(Token = "0x60004A5")]
	[Address(RVA = "0x102E1D8", Offset = "0x102E1D8", VA = "0x102E1D8")]
	public void JiggleBoneUpdate()
	{
	}

	[Token(Token = "0x60004A6")]
	[Address(RVA = "0x102CC9C", Offset = "0x102CC9C", VA = "0x102CC9C")]
	public bool Clear()
	{
		return default(bool);
	}

	[Token(Token = "0x60004A7")]
	[Address(RVA = "0x102EC3C", Offset = "0x102EC3C", VA = "0x102EC3C")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60004A8")]
	[Address(RVA = "0x102CFE8", Offset = "0x102CFE8", VA = "0x102CFE8")]
	public void SetTargetDistance()
	{
	}

	[Token(Token = "0x60004A9")]
	[Address(RVA = "0x102D0DC", Offset = "0x102D0DC", VA = "0x102D0DC")]
	public void SetOptions()
	{
	}

	[Token(Token = "0x60004AA")]
	[Address(RVA = "0x102EEF8", Offset = "0x102EEF8", VA = "0x102EEF8")]
	public void SetHiddenNodes()
	{
	}

	[Token(Token = "0x60004AB")]
	[Address(RVA = "0x102F064", Offset = "0x102F064", VA = "0x102F064")]
	public void MyValidate()
	{
	}

	[Token(Token = "0x60004AC")]
	[Address(RVA = "0x102F0F4", Offset = "0x102F0F4", VA = "0x102F0F4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60004AD")]
	[Address(RVA = "0x102DD98", Offset = "0x102DD98", VA = "0x102DD98")]
	public void EnsureGoodVars()
	{
	}

	[Token(Token = "0x60004AE")]
	[Address(RVA = "0x102F30C", Offset = "0x102F30C", VA = "0x102F30C")]
	public Transform SetMixedTentacle(SoxAtkTentacle soxAtkTentacle)
	{
		return null;
	}

	[Token(Token = "0x60004AF")]
	[Address(RVA = "0x102F478", Offset = "0x102F478", VA = "0x102F478")]
	public void RemoveMixedTentacle()
	{
	}

	[Token(Token = "0x60004B0")]
	[Address(RVA = "0x102F604", Offset = "0x102F604", VA = "0x102F604")]
	public Transform GetTentacle()
	{
		return null;
	}

	[Token(Token = "0x60004B1")]
	[Address(RVA = "0x102F60C", Offset = "0x102F60C", VA = "0x102F60C")]
	public SoxAtkJiggleBone()
	{
	}
}
[Token(Token = "0x20000FE")]
public class SoxAtkTentacle : MonoBehaviour
{
	[Token(Token = "0x20000FF")]
	public enum Axis
	{
		[Token(Token = "0x40006DB")]
		X,
		[Token(Token = "0x40006DC")]
		Y,
		[Token(Token = "0x40006DD")]
		Z
	}

	[Serializable]
	[Token(Token = "0x2000100")]
	public struct Waveset
	{
		[Token(Token = "0x40006DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Axis m_rotateAxis;

		[Token(Token = "0x40006DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float m_frequency;

		[Token(Token = "0x40006E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[HideInInspector]
		public float m_frequencyProxy;

		[Token(Token = "0x40006E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float m_strengthStart;

		[Token(Token = "0x40006E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float m_strengthEnd;

		[Token(Token = "0x40006E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float m_speed;

		[Token(Token = "0x40006E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float m_offset;

		[Token(Token = "0x40006E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public float[] m_nodesSaveStrengths;

		[Token(Token = "0x60004C1")]
		[Address(RVA = "0x1030F38", Offset = "0x1030F38", VA = "0x1030F38")]
		public Waveset(Axis rotateAxis, float frequency, float strengthStart, float strengthEnd, float speed, float offset, float[] nodesSaveStrengths)
		{
		}
	}

	[Token(Token = "0x40006CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public float m_version;

	[Token(Token = "0x40006CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private bool m_initialized;

	[Token(Token = "0x40006CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	[HideInInspector]
	public bool m_animated;

	[Token(Token = "0x40006CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	[HideInInspector]
	public bool m_keepInitialRotation;

	[Token(Token = "0x40006CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform[] m_nodes;

	[Token(Token = "0x40006D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public List<SoxAtkJiggleBone> m_jiggleboneHeads;

	[Token(Token = "0x40006D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform[] m_nodesOriginal;

	[Token(Token = "0x40006D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Quaternion[] m_nodesSaveLocalRotations;

	[Token(Token = "0x40006D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float[] m_nodesSaveDistances;

	[Token(Token = "0x40006D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float m_distanceAll;

	[Token(Token = "0x40006D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3[] m_wavesetMixEuler;

	[Token(Token = "0x40006D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Transform m_rootNode;

	[Token(Token = "0x40006D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Quaternion m_rootRotation;

	[Token(Token = "0x40006D8")]
	public const float mc_freqMul = 0.01f;

	[Token(Token = "0x40006D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Waveset[] wavesets;

	[Token(Token = "0x60004B2")]
	[Address(RVA = "0x102F6B4", Offset = "0x102F6B4", VA = "0x102F6B4")]
	private void Start()
	{
	}

	[Token(Token = "0x60004B3")]
	[Address(RVA = "0x102F970", Offset = "0x102F970", VA = "0x102F970")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60004B4")]
	[Address(RVA = "0x102FB2C", Offset = "0x102FB2C", VA = "0x102FB2C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60004B5")]
	[Address(RVA = "0x102F704", Offset = "0x102F704", VA = "0x102F704")]
	public void Initialize()
	{
	}

	[Token(Token = "0x60004B6")]
	[Address(RVA = "0x10305B4", Offset = "0x10305B4", VA = "0x10305B4")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60004B7")]
	[Address(RVA = "0x10306C8", Offset = "0x10306C8", VA = "0x10306C8")]
	public Vector3[] UpdateTentalces(float time, bool bake)
	{
		return null;
	}

	[Token(Token = "0x60004B8")]
	[Address(RVA = "0x102FCEC", Offset = "0x102FCEC", VA = "0x102FCEC")]
	private void InitArrays()
	{
	}

	[Token(Token = "0x60004B9")]
	[Address(RVA = "0x1030C98", Offset = "0x1030C98", VA = "0x1030C98")]
	public void MyValidate()
	{
	}

	[Token(Token = "0x60004BA")]
	[Address(RVA = "0x102FFC4", Offset = "0x102FFC4", VA = "0x102FFC4")]
	public void SaveLocalRotations()
	{
	}

	[Token(Token = "0x60004BB")]
	[Address(RVA = "0x10301BC", Offset = "0x10301BC", VA = "0x10301BC")]
	public void SaveDistances()
	{
	}

	[Token(Token = "0x60004BC")]
	[Address(RVA = "0x1030C38", Offset = "0x1030C38", VA = "0x1030C38")]
	private void SaveFrequencies()
	{
	}

	[Token(Token = "0x60004BD")]
	[Address(RVA = "0x10304CC", Offset = "0x10304CC", VA = "0x10304CC")]
	private void SaveStrengths()
	{
	}

	[Token(Token = "0x60004BE")]
	[Address(RVA = "0x102F980", Offset = "0x102F980", VA = "0x102F980")]
	private void SaveNodesJigglebone()
	{
	}

	[Token(Token = "0x60004BF")]
	[Address(RVA = "0x102FB30", Offset = "0x102FB30", VA = "0x102FB30")]
	private void RevertNodesJigglebone()
	{
	}

	[Token(Token = "0x60004C0")]
	[Address(RVA = "0x1030CF4", Offset = "0x1030CF4", VA = "0x1030CF4")]
	public SoxAtkTentacle()
	{
	}
}
[Token(Token = "0x2000101")]
[ExecuteInEditMode]
public class SoxAtkLookAt : MonoBehaviour
{
	[Token(Token = "0x2000102")]
	public enum LookType
	{
		[Token(Token = "0x40006F5")]
		Camera,
		[Token(Token = "0x40006F6")]
		Nodes
	}

	[Token(Token = "0x2000103")]
	public enum UpType
	{
		[Token(Token = "0x40006F8")]
		Camera,
		[Token(Token = "0x40006F9")]
		Node,
		[Token(Token = "0x40006FA")]
		World
	}

	[Token(Token = "0x2000104")]
	public enum AxisType
	{
		[Token(Token = "0x40006FC")]
		X,
		[Token(Token = "0x40006FD")]
		Y,
		[Token(Token = "0x40006FE")]
		Z
	}

	[Token(Token = "0x2000105")]
	public enum UpCtrType
	{
		[Token(Token = "0x4000700")]
		LootAt,
		[Token(Token = "0x4000701")]
		AxisAlignment
	}

	[Token(Token = "0x40006E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public float m_version;

	[Token(Token = "0x40006E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool m_editorLookAt;

	[Token(Token = "0x40006E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool m_lookAtOnce;

	[Token(Token = "0x40006E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	public bool m_dynamicSearchMainCamera;

	[Token(Token = "0x40006EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Camera m_cameraMain;

	[Token(Token = "0x40006EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public LookType m_lookAtType;

	[Token(Token = "0x40006EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<Transform> m_lookAtNodeList;

	[Token(Token = "0x40006ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool m_lookAtFilp;

	[Token(Token = "0x40006EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public UpType m_upAxisType;

	[Token(Token = "0x40006EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform m_upNode;

	[Token(Token = "0x40006F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UpCtrType m_upControl;

	[Token(Token = "0x40006F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool m_sourceAxisFilp;

	[Token(Token = "0x40006F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AxisType m_alignedToUpnodeAxis;

	[Token(Token = "0x40006F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private bool m_initialize;

	[Token(Token = "0x60004C2")]
	[Address(RVA = "0x1030F60", Offset = "0x1030F60", VA = "0x1030F60")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60004C3")]
	[Address(RVA = "0x1031028", Offset = "0x1031028", VA = "0x1031028")]
	private void Start()
	{
	}

	[Token(Token = "0x60004C4")]
	[Address(RVA = "0x103104C", Offset = "0x103104C", VA = "0x103104C")]
	private void Update()
	{
	}

	[Token(Token = "0x60004C5")]
	[Address(RVA = "0x1031004", Offset = "0x1031004", VA = "0x1031004")]
	public void RefreshCameraMain()
	{
	}

	[Token(Token = "0x60004C6")]
	[Address(RVA = "0x1031088", Offset = "0x1031088", VA = "0x1031088")]
	private void UpdateLookRotation()
	{
	}

	[Token(Token = "0x60004C7")]
	[Address(RVA = "0x1031134", Offset = "0x1031134", VA = "0x1031134")]
	private Vector3 GetForwardVec()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60004C8")]
	[Address(RVA = "0x10311A0", Offset = "0x10311A0", VA = "0x10311A0")]
	private Vector3 GetUpwardVec()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60004C9")]
	[Address(RVA = "0x1031498", Offset = "0x1031498", VA = "0x1031498")]
	private Vector3 GetLookPos()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60004CA")]
	[Address(RVA = "0x1031750", Offset = "0x1031750", VA = "0x1031750")]
	public SoxAtkLookAt()
	{
	}
}
[Token(Token = "0x2000106")]
public class FPSDisplay : MonoBehaviour
{
	[Token(Token = "0x4000702")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float deltaTime;

	[Token(Token = "0x60004CB")]
	[Address(RVA = "0x10317F8", Offset = "0x10317F8", VA = "0x10317F8")]
	private void Update()
	{
	}

	[Token(Token = "0x60004CC")]
	[Address(RVA = "0x1031838", Offset = "0x1031838", VA = "0x1031838")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60004CD")]
	[Address(RVA = "0x1031A1C", Offset = "0x1031A1C", VA = "0x1031A1C")]
	public FPSDisplay()
	{
	}
}
[Token(Token = "0x2000107")]
public class ChangeSizeColor : MonoBehaviour
{
	[Token(Token = "0x4000703")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Gradient color;

	[Token(Token = "0x4000704")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Color m_changeColor;

	[Token(Token = "0x4000705")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject m_obj;

	[Token(Token = "0x4000706")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Renderer[] m_rnds;

	[Token(Token = "0x4000707")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float color_Value;

	[Token(Token = "0x4000708")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool isChangeColor;

	[Token(Token = "0x4000709")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Image m_ColorHandler;

	[Token(Token = "0x400070A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Text m_intensityfactor;

	[Token(Token = "0x400070B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float intensity;

	[Token(Token = "0x60004CE")]
	[Address(RVA = "0x1031A24", Offset = "0x1031A24", VA = "0x1031A24")]
	private void Update()
	{
	}

	[Token(Token = "0x60004CF")]
	[Address(RVA = "0x1031CD4", Offset = "0x1031CD4", VA = "0x1031CD4")]
	public void ChangeEffectColor(float value)
	{
	}

	[Token(Token = "0x60004D0")]
	[Address(RVA = "0x1031CDC", Offset = "0x1031CDC", VA = "0x1031CDC")]
	public void CheckIsColorChange(bool value)
	{
	}

	[Token(Token = "0x60004D1")]
	[Address(RVA = "0x1031CE8", Offset = "0x1031CE8", VA = "0x1031CE8")]
	public void CheckColorState()
	{
	}

	[Token(Token = "0x60004D2")]
	[Address(RVA = "0x1031CF8", Offset = "0x1031CF8", VA = "0x1031CF8")]
	public void GetIntensityFactor()
	{
	}

	[Token(Token = "0x60004D3")]
	[Address(RVA = "0x1031D48", Offset = "0x1031D48", VA = "0x1031D48")]
	public ChangeSizeColor()
	{
	}
}
[Token(Token = "0x2000108")]
public class DelayActive : MonoBehaviour
{
	[Token(Token = "0x400070C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] m_activeObj;

	[Token(Token = "0x400070D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float m_delayTime;

	[Token(Token = "0x400070E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float m_time;

	[Token(Token = "0x60004D4")]
	[Address(RVA = "0x1031D58", Offset = "0x1031D58", VA = "0x1031D58")]
	private void Start()
	{
	}

	[Token(Token = "0x60004D5")]
	[Address(RVA = "0x1031D74", Offset = "0x1031D74", VA = "0x1031D74")]
	private void Update()
	{
	}

	[Token(Token = "0x60004D6")]
	[Address(RVA = "0x1031E5C", Offset = "0x1031E5C", VA = "0x1031E5C")]
	public DelayActive()
	{
	}
}
[Token(Token = "0x2000109")]
public class LookAtTarget : MonoBehaviour
{
	[Token(Token = "0x400070F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform Target;

	[Token(Token = "0x60004D7")]
	[Address(RVA = "0x1031E64", Offset = "0x1031E64", VA = "0x1031E64")]
	private void Update()
	{
	}

	[Token(Token = "0x60004D8")]
	[Address(RVA = "0x1031E8C", Offset = "0x1031E8C", VA = "0x1031E8C")]
	public LookAtTarget()
	{
	}
}
[Token(Token = "0x200010A")]
public class MultipleObjectsMake : _ObjectsMakeBase
{
	[Token(Token = "0x4000710")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float m_startDelay;

	[Token(Token = "0x4000711")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int m_makeCount;

	[Token(Token = "0x4000712")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float m_makeDelay;

	[Token(Token = "0x4000713")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Vector3 m_randomPos;

	[Token(Token = "0x4000714")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector3 m_randomRot;

	[Token(Token = "0x4000715")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public Vector3 m_randomScale;

	[Token(Token = "0x4000716")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float m_Time;

	[Token(Token = "0x4000717")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float m_Time2;

	[Token(Token = "0x4000718")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float m_delayTime;

	[Token(Token = "0x4000719")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float m_count;

	[Token(Token = "0x400071A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float m_scalefactor;

	[Token(Token = "0x60004D9")]
	[Address(RVA = "0x1031E94", Offset = "0x1031E94", VA = "0x1031E94")]
	private void Start()
	{
	}

	[Token(Token = "0x60004DA")]
	[Address(RVA = "0x1031F00", Offset = "0x1031F00", VA = "0x1031F00")]
	private void Update()
	{
	}

	[Token(Token = "0x60004DB")]
	[Address(RVA = "0x1032328", Offset = "0x1032328", VA = "0x1032328")]
	public MultipleObjectsMake()
	{
	}
}
[Token(Token = "0x200010B")]
public class ObjectMove : MonoBehaviour
{
	[Token(Token = "0x400071B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float time;

	[Token(Token = "0x400071C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float m_time;

	[Token(Token = "0x400071D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float m_time2;

	[Token(Token = "0x400071E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float MoveSpeed;

	[Token(Token = "0x400071F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool AbleHit;

	[Token(Token = "0x4000720")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float HitDelay;

	[Token(Token = "0x4000721")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject m_hitObject;

	[Token(Token = "0x4000722")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject m_makedObject;

	[Token(Token = "0x4000723")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float MaxLength;

	[Token(Token = "0x4000724")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float DestroyTime2;

	[Token(Token = "0x4000725")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float m_scalefactor;

	[Token(Token = "0x60004DC")]
	[Address(RVA = "0x1032338", Offset = "0x1032338", VA = "0x1032338")]
	private void Start()
	{
	}

	[Token(Token = "0x60004DD")]
	[Address(RVA = "0x10323B0", Offset = "0x10323B0", VA = "0x10323B0")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60004DE")]
	[Address(RVA = "0x1032598", Offset = "0x1032598", VA = "0x1032598")]
	private void HitObj(RaycastHit hit)
	{
	}

	[Token(Token = "0x60004DF")]
	[Address(RVA = "0x10326BC", Offset = "0x10326BC", VA = "0x10326BC")]
	public ObjectMove()
	{
	}
}
[Token(Token = "0x200010C")]
public class ObjectMoveDestroy : MonoBehaviour
{
	[Token(Token = "0x4000726")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject m_gameObjectMain;

	[Token(Token = "0x4000727")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject m_gameObjectTail;

	[Token(Token = "0x4000728")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject m_makedObject;

	[Token(Token = "0x4000729")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform m_hitObject;

	[Token(Token = "0x400072A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float maxLength;

	[Token(Token = "0x400072B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool isDestroy;

	[Token(Token = "0x400072C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float ObjectDestroyTime;

	[Token(Token = "0x400072D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float TailDestroyTime;

	[Token(Token = "0x400072E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float HitObjectDestroyTime;

	[Token(Token = "0x400072F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float maxTime;

	[Token(Token = "0x4000730")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float MoveSpeed;

	[Token(Token = "0x4000731")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool isCheckHitTag;

	[Token(Token = "0x4000732")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public string mtag;

	[Token(Token = "0x4000733")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool isShieldActive;

	[Token(Token = "0x4000734")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float time;

	[Token(Token = "0x4000735")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool ishit;

	[Token(Token = "0x4000736")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float m_scalefactor;

	[Token(Token = "0x60004E0")]
	[Address(RVA = "0x10326CC", Offset = "0x10326CC", VA = "0x10326CC")]
	private void Start()
	{
	}

	[Token(Token = "0x60004E1")]
	[Address(RVA = "0x1032738", Offset = "0x1032738", VA = "0x1032738")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60004E2")]
	[Address(RVA = "0x1032C58", Offset = "0x1032C58", VA = "0x1032C58")]
	private void MakeHitObject(RaycastHit hit)
	{
	}

	[Token(Token = "0x60004E3")]
	[Address(RVA = "0x1032AD0", Offset = "0x1032AD0", VA = "0x1032AD0")]
	private void MakeHitObject(Transform point)
	{
	}

	[Token(Token = "0x60004E4")]
	[Address(RVA = "0x103291C", Offset = "0x103291C", VA = "0x103291C")]
	private void HitObj(RaycastHit hit)
	{
	}

	[Token(Token = "0x60004E5")]
	[Address(RVA = "0x1032F9C", Offset = "0x1032F9C", VA = "0x1032F9C")]
	public ObjectMoveDestroy()
	{
	}
}
[Token(Token = "0x200010D")]
public class ShieldActivate : MonoBehaviour
{
	[Token(Token = "0x4000737")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float ImpactLife;

	[Token(Token = "0x4000738")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector4[] points;

	[Token(Token = "0x4000739")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Material m_material;

	[Token(Token = "0x400073A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<Vector4> Hitpoints;

	[Token(Token = "0x400073B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private MeshRenderer m_meshRenderer;

	[Token(Token = "0x400073C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float time;

	[Token(Token = "0x60004E6")]
	[Address(RVA = "0x1032FB0", Offset = "0x1032FB0", VA = "0x1032FB0")]
	private void Start()
	{
	}

	[Token(Token = "0x60004E7")]
	[Address(RVA = "0x10330C4", Offset = "0x10330C4", VA = "0x10330C4")]
	private void Update()
	{
	}

	[Token(Token = "0x60004E8")]
	[Address(RVA = "0x1032DD8", Offset = "0x1032DD8", VA = "0x1032DD8")]
	public void AddHitObject(Vector3 position)
	{
	}

	[Token(Token = "0x60004E9")]
	[Address(RVA = "0x1033310", Offset = "0x1033310", VA = "0x1033310")]
	public void AddEmpty()
	{
	}

	[Token(Token = "0x60004EA")]
	[Address(RVA = "0x10333C0", Offset = "0x10333C0", VA = "0x10333C0")]
	public ShieldActivate()
	{
	}
}
[Token(Token = "0x200010F")]
public class _ObjectsMakeBase : MonoBehaviour
{
	[Token(Token = "0x400073F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] m_makeObjs;

	[Token(Token = "0x60004EF")]
	[Address(RVA = "0x10334A0", Offset = "0x10334A0", VA = "0x10334A0")]
	public float GetRandomValue(float value)
	{
		return default(float);
	}

	[Token(Token = "0x60004F0")]
	[Address(RVA = "0x10334B0", Offset = "0x10334B0", VA = "0x10334B0")]
	public float GetRandomValue2(float value)
	{
		return default(float);
	}

	[Token(Token = "0x60004F1")]
	[Address(RVA = "0x1032258", Offset = "0x1032258", VA = "0x1032258")]
	public Vector3 GetRandomVector(Vector3 value)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60004F2")]
	[Address(RVA = "0x10322C0", Offset = "0x10322C0", VA = "0x10322C0")]
	public Vector3 GetRandomVector2(Vector3 value)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60004F3")]
	[Address(RVA = "0x1032330", Offset = "0x1032330", VA = "0x1032330")]
	public _ObjectsMakeBase()
	{
	}
}
[Token(Token = "0x2000110")]
public class NewMaterialChange : MonoBehaviour
{
	[Token(Token = "0x4000740")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool isParticleSystem;

	[Token(Token = "0x4000741")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material m_inputMaterial;

	[Token(Token = "0x4000742")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Material m_objectMaterial;

	[Token(Token = "0x4000743")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private MeshRenderer m_meshRenderer;

	[Token(Token = "0x4000744")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ParticleSystemRenderer m_particleRenderer;

	[Token(Token = "0x4000745")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float m_timeToReduce;

	[Token(Token = "0x4000746")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float m_reduceFactor;

	[Token(Token = "0x4000747")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float m_time;

	[Token(Token = "0x4000748")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float m_submitReduceFactor;

	[Token(Token = "0x4000749")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float m_cutOutFactor;

	[Token(Token = "0x400074A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float m_upFactor;

	[Token(Token = "0x400074B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float upFactor;

	[Token(Token = "0x400074C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool isupfactor;

	[Token(Token = "0x60004F4")]
	[Address(RVA = "0x10334C0", Offset = "0x10334C0", VA = "0x10334C0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004F5")]
	[Address(RVA = "0x10335C8", Offset = "0x10335C8", VA = "0x10335C8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60004F6")]
	[Address(RVA = "0x1033774", Offset = "0x1033774", VA = "0x1033774")]
	public NewMaterialChange()
	{
	}
}
[Token(Token = "0x2000111")]
public class ScaleFactorApplyToMaterial : MonoBehaviour
{
	[Token(Token = "0x400074D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystemRenderer ps;

	[Token(Token = "0x400074E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float value;

	[Token(Token = "0x400074F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float m_scaleFactor;

	[Token(Token = "0x4000750")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float m_changedFactor;

	[Token(Token = "0x60004F7")]
	[Address(RVA = "0x1033784", Offset = "0x1033784", VA = "0x1033784")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004F8")]
	[Address(RVA = "0x1033828", Offset = "0x1033828", VA = "0x1033828")]
	private void Update()
	{
	}

	[Token(Token = "0x60004F9")]
	[Address(RVA = "0x1033914", Offset = "0x1033914", VA = "0x1033914")]
	public ScaleFactorApplyToMaterial()
	{
	}
}
[Token(Token = "0x2000112")]
public class VariousEffectsScene : MonoBehaviour
{
	[Token(Token = "0x4000751")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform[] m_effects;

	[Token(Token = "0x4000752")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject scaleform;

	[Token(Token = "0x4000753")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject[] m_destroyObjects;

	[Token(Token = "0x4000754")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject FriendlyEnemyObject;

	[Token(Token = "0x4000755")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject gm;

	[Token(Token = "0x4000756")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int inputLocation;

	[Token(Token = "0x4000757")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Text m_scalefactor;

	[Token(Token = "0x4000758")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static float m_gaph_scenesizefactor;

	[Token(Token = "0x4000759")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Text m_effectName;

	[Token(Token = "0x400075A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int index;

	[Token(Token = "0x60004FA")]
	[Address(RVA = "0x103391C", Offset = "0x103391C", VA = "0x103391C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004FB")]
	[Address(RVA = "0x1033D28", Offset = "0x1033D28", VA = "0x1033D28")]
	private void Update()
	{
	}

	[Token(Token = "0x60004FC")]
	[Address(RVA = "0x1033D58", Offset = "0x1033D58", VA = "0x1033D58")]
	private void InputKey()
	{
	}

	[Token(Token = "0x60004FD")]
	[Address(RVA = "0x10339A0", Offset = "0x10339A0", VA = "0x10339A0")]
	private void MakeObject()
	{
	}

	[Token(Token = "0x60004FE")]
	[Address(RVA = "0x1033DF8", Offset = "0x1033DF8", VA = "0x1033DF8")]
	private void DestroyGameObject()
	{
	}

	[Token(Token = "0x60004FF")]
	[Address(RVA = "0x1033EA4", Offset = "0x1033EA4", VA = "0x1033EA4")]
	public void GetSizeFactor()
	{
	}

	[Token(Token = "0x6000500")]
	[Address(RVA = "0x1033F78", Offset = "0x1033F78", VA = "0x1033F78")]
	public VariousEffectsScene()
	{
	}
}
[Token(Token = "0x2000113")]
public class VariousMouseOrbit : MonoBehaviour
{
	[Token(Token = "0x400075B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform Target;

	[Token(Token = "0x400075C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform[] Targets;

	[Token(Token = "0x400075D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int i;

	[Token(Token = "0x400075E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float distance;

	[Token(Token = "0x400075F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float xSpeed;

	[Token(Token = "0x4000760")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float ySpeed;

	[Token(Token = "0x4000761")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float yMinLimit;

	[Token(Token = "0x4000762")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float yMaxLimit;

	[Token(Token = "0x4000763")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float x;

	[Token(Token = "0x4000764")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float y;

	[Token(Token = "0x4000765")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float CameraDist;

	[Token(Token = "0x6000502")]
	[Address(RVA = "0x1034028", Offset = "0x1034028", VA = "0x1034028")]
	private void Start()
	{
	}

	[Token(Token = "0x6000503")]
	[Address(RVA = "0x103412C", Offset = "0x103412C", VA = "0x103412C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000504")]
	[Address(RVA = "0x1034418", Offset = "0x1034418", VA = "0x1034418")]
	private float ClampAngle(float ag, float min, float max)
	{
		return default(float);
	}

	[Token(Token = "0x6000505")]
	[Address(RVA = "0x1034454", Offset = "0x1034454", VA = "0x1034454")]
	public VariousMouseOrbit()
	{
	}
}
[Token(Token = "0x2000114")]
public class VariousRotateObject : MonoBehaviour
{
	[Token(Token = "0x4000766")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 RotateOffset;

	[Token(Token = "0x4000767")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 RotateMulti;

	[Token(Token = "0x4000768")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float m_delay;

	[Token(Token = "0x4000769")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float m_Time;

	[Token(Token = "0x6000506")]
	[Address(RVA = "0x1034470", Offset = "0x1034470", VA = "0x1034470")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000507")]
	[Address(RVA = "0x103448C", Offset = "0x103448C", VA = "0x103448C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000508")]
	[Address(RVA = "0x10345F8", Offset = "0x10345F8", VA = "0x10345F8")]
	public VariousRotateObject()
	{
	}
}
[Token(Token = "0x2000115")]
public class VariousTranslateMove : MonoBehaviour
{
	[Token(Token = "0x400076A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float m_power;

	[Token(Token = "0x400076B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float m_reduceTime;

	[Token(Token = "0x400076C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool m_fowardMove;

	[Token(Token = "0x400076D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool m_rightMove;

	[Token(Token = "0x400076E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool m_upMove;

	[Token(Token = "0x400076F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float m_changedFactor;

	[Token(Token = "0x4000770")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float m_Time;

	[Token(Token = "0x6000509")]
	[Address(RVA = "0x1034600", Offset = "0x1034600", VA = "0x1034600")]
	private void Start()
	{
	}

	[Token(Token = "0x600050A")]
	[Address(RVA = "0x103461C", Offset = "0x103461C", VA = "0x103461C")]
	private void Update()
	{
	}

	[Token(Token = "0x600050B")]
	[Address(RVA = "0x1034800", Offset = "0x1034800", VA = "0x1034800")]
	public VariousTranslateMove()
	{
	}
}
[Token(Token = "0x2000116")]
[ExecuteInEditMode]
public class SphericalFog : MonoBehaviour
{
	[Token(Token = "0x4000771")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected MeshRenderer sphericalFogObject;

	[Token(Token = "0x4000772")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material sphericalFogMaterial;

	[Token(Token = "0x4000773")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float scaleFactor;

	[Token(Token = "0x600050C")]
	[Address(RVA = "0x1034808", Offset = "0x1034808", VA = "0x1034808")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600050D")]
	[Address(RVA = "0x1034938", Offset = "0x1034938", VA = "0x1034938")]
	private void Update()
	{
	}

	[Token(Token = "0x600050E")]
	[Address(RVA = "0x1034AE8", Offset = "0x1034AE8", VA = "0x1034AE8")]
	public SphericalFog()
	{
	}
}
[Token(Token = "0x2000117")]
[RequireComponent(typeof(Rigidbody))]
public class BuoyantObject : MonoBehaviour
{
	[Token(Token = "0x4000774")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Color red;

	[Token(Token = "0x4000775")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Color green;

	[Token(Token = "0x4000776")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Color blue;

	[Token(Token = "0x4000777")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Color orange;

	[Token(Token = "0x4000778")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float steepness;

	[Token(Token = "0x4000779")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float wavelength;

	[Token(Token = "0x400077A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float speed;

	[Token(Token = "0x400077B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float[] directions;

	[Token(Token = "0x400077C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Header("Water Object")]
	public StylizedWaterURP water;

	[Token(Token = "0x400077D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Header("Buoyancy")]
	[Range(1f, 5f)]
	public float strength;

	[Token(Token = "0x400077E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[Range(0.2f, 5f)]
	public float objectDepth;

	[Token(Token = "0x400077F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float velocityDrag;

	[Token(Token = "0x4000780")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float angularDrag;

	[Token(Token = "0x4000781")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[Header("Effectors")]
	public Transform[] effectors;

	[Token(Token = "0x4000782")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Rigidbody rb;

	[Token(Token = "0x4000783")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Vector3[] effectorProjections;

	[Token(Token = "0x600050F")]
	[Address(RVA = "0x1034AF8", Offset = "0x1034AF8", VA = "0x1034AF8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000510")]
	[Address(RVA = "0x1034C58", Offset = "0x1034C58", VA = "0x1034C58")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000511")]
	[Address(RVA = "0x1034C78", Offset = "0x1034C78", VA = "0x1034C78")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000512")]
	[Address(RVA = "0x1034F48", Offset = "0x1034F48", VA = "0x1034F48")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000513")]
	[Address(RVA = "0x1035220", Offset = "0x1035220", VA = "0x1035220")]
	public BuoyantObject()
	{
	}
}
[Token(Token = "0x2000118")]
[ExecuteInEditMode]
public class FixMobileDepth : MonoBehaviour
{
	[Token(Token = "0x6000514")]
	[Address(RVA = "0x10352C0", Offset = "0x10352C0", VA = "0x10352C0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000515")]
	[Address(RVA = "0x103532C", Offset = "0x103532C", VA = "0x103532C")]
	public FixMobileDepth()
	{
	}
}
[Token(Token = "0x2000119")]
public class XWeaponTrailDemo : MonoBehaviour
{
	[Token(Token = "0x4000784")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animation SwordAnimation;

	[Token(Token = "0x4000785")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public XWeaponTrail ProTrailDistort;

	[Token(Token = "0x4000786")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public XWeaponTrail ProTrailShort;

	[Token(Token = "0x4000787")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public XWeaponTrail ProTraillong;

	[Token(Token = "0x4000788")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public XWeaponTrail SimpleTrail;

	[Token(Token = "0x6000516")]
	[Address(RVA = "0x1035334", Offset = "0x1035334", VA = "0x1035334")]
	public void Start()
	{
	}

	[Token(Token = "0x6000517")]
	[Address(RVA = "0x10354C0", Offset = "0x10354C0", VA = "0x10354C0")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000518")]
	[Address(RVA = "0x1035B20", Offset = "0x1035B20", VA = "0x1035B20")]
	public XWeaponTrailDemo()
	{
	}
}
[Token(Token = "0x200011A")]
public class scr_cameraTravellinger : MonoBehaviour
{
	[Token(Token = "0x4000789")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float transitionSpeed;

	[Token(Token = "0x400078A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject cameraObj;

	[Token(Token = "0x400078B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject[] pointObjectsArray;

	[Token(Token = "0x400078C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 target_pos;

	[Token(Token = "0x400078D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Quaternion target_rot;

	[Token(Token = "0x400078E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int index;

	[Token(Token = "0x6000519")]
	[Address(RVA = "0x1035B28", Offset = "0x1035B28", VA = "0x1035B28")]
	private void Start()
	{
	}

	[Token(Token = "0x600051A")]
	[Address(RVA = "0x1035BDC", Offset = "0x1035BDC", VA = "0x1035BDC")]
	private void Update()
	{
	}

	[Token(Token = "0x600051B")]
	[Address(RVA = "0x1035F34", Offset = "0x1035F34", VA = "0x1035F34")]
	private void repositionObject(GameObject obj, Vector3 pos, Quaternion rot)
	{
	}

	[Token(Token = "0x600051C")]
	[Address(RVA = "0x1035FD0", Offset = "0x1035FD0", VA = "0x1035FD0")]
	public scr_cameraTravellinger()
	{
	}
}
[Token(Token = "0x200011B")]
public class scr_objectRotator : MonoBehaviour
{
	[Token(Token = "0x400078F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool localAxis;

	[Token(Token = "0x4000790")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector3 rotationAxis;

	[Token(Token = "0x4000791")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float rotationSpeed;

	[Token(Token = "0x4000792")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 origPos;

	[Token(Token = "0x600051D")]
	[Address(RVA = "0x1035FE0", Offset = "0x1035FE0", VA = "0x1035FE0")]
	private void Start()
	{
	}

	[Token(Token = "0x600051E")]
	[Address(RVA = "0x1036010", Offset = "0x1036010", VA = "0x1036010")]
	private void Update()
	{
	}

	[Token(Token = "0x600051F")]
	[Address(RVA = "0x1036014", Offset = "0x1036014", VA = "0x1036014")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000520")]
	[Address(RVA = "0x10360EC", Offset = "0x10360EC", VA = "0x10360EC")]
	public scr_objectRotator()
	{
	}
}
[Token(Token = "0x200011C")]
public class scr_objectSwinger : MonoBehaviour
{
	[Token(Token = "0x4000793")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 speed;

	[Token(Token = "0x4000794")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 amplitude;

	[Token(Token = "0x4000795")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 frequency;

	[Token(Token = "0x4000796")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool useUpVector;

	[Token(Token = "0x4000797")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector3 rotationAxis;

	[Token(Token = "0x4000798")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float rotationSpeed;

	[Token(Token = "0x4000799")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool initialRandomRotation;

	[Token(Token = "0x400079A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Vector3 origPos;

	[Token(Token = "0x400079B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float rndAngle;

	[Token(Token = "0x6000521")]
	[Address(RVA = "0x1036108", Offset = "0x1036108", VA = "0x1036108")]
	private void Start()
	{
	}

	[Token(Token = "0x6000522")]
	[Address(RVA = "0x10361F4", Offset = "0x10361F4", VA = "0x10361F4")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000523")]
	[Address(RVA = "0x10362C8", Offset = "0x10362C8", VA = "0x10362C8")]
	public scr_objectSwinger()
	{
	}
}
namespace XftWeapon
{
	[Token(Token = "0x200011D")]
	public class Spline
	{
		[Token(Token = "0x400079C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<SplineControlPoint> mControlPoints;

		[Token(Token = "0x400079D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<SplineControlPoint> mSegments;

		[Token(Token = "0x400079E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int Granularity;

		[Token(Token = "0x1700003C")]
		public SplineControlPoint this[int index]
		{
			[Token(Token = "0x6000524")]
			[Address(RVA = "0x10362FC", Offset = "0x10362FC", VA = "0x10362FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003D")]
		public List<SplineControlPoint> Segments
		{
			[Token(Token = "0x6000525")]
			[Address(RVA = "0x1036380", Offset = "0x1036380", VA = "0x1036380")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003E")]
		public List<SplineControlPoint> ControlPoints
		{
			[Token(Token = "0x6000526")]
			[Address(RVA = "0x1036388", Offset = "0x1036388", VA = "0x1036388")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000527")]
		[Address(RVA = "0x1036390", Offset = "0x1036390", VA = "0x1036390")]
		public SplineControlPoint NextControlPoint(SplineControlPoint controlpoint)
		{
			return null;
		}

		[Token(Token = "0x6000528")]
		[Address(RVA = "0x103641C", Offset = "0x103641C", VA = "0x103641C")]
		public SplineControlPoint PreviousControlPoint(SplineControlPoint controlpoint)
		{
			return null;
		}

		[Token(Token = "0x6000529")]
		[Address(RVA = "0x10364A4", Offset = "0x10364A4", VA = "0x10364A4")]
		public Vector3 NextPosition(SplineControlPoint controlpoint)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600052A")]
		[Address(RVA = "0x10364D0", Offset = "0x10364D0", VA = "0x10364D0")]
		public Vector3 PreviousPosition(SplineControlPoint controlpoint)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600052B")]
		[Address(RVA = "0x10364FC", Offset = "0x10364FC", VA = "0x10364FC")]
		public Vector3 PreviousNormal(SplineControlPoint controlpoint)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600052C")]
		[Address(RVA = "0x1036528", Offset = "0x1036528", VA = "0x1036528")]
		public Vector3 NextNormal(SplineControlPoint controlpoint)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600052D")]
		[Address(RVA = "0x1036554", Offset = "0x1036554", VA = "0x1036554")]
		public SplineControlPoint LenToSegment(float t, out float localF)
		{
			return null;
		}

		[Token(Token = "0x600052E")]
		[Address(RVA = "0x10366A8", Offset = "0x10366A8", VA = "0x10366A8")]
		public static Vector3 CatmulRom(Vector3 T0, Vector3 P0, Vector3 P1, Vector3 T1, float f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600052F")]
		[Address(RVA = "0x10367E4", Offset = "0x10367E4", VA = "0x10367E4")]
		public Vector3 InterpolateByLen(float tl)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000530")]
		[Address(RVA = "0x10368B0", Offset = "0x10368B0", VA = "0x10368B0")]
		public Vector3 InterpolateNormalByLen(float tl)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000531")]
		[Address(RVA = "0x103697C", Offset = "0x103697C", VA = "0x103697C")]
		public SplineControlPoint AddControlPoint(Vector3 pos, Vector3 up)
		{
			return null;
		}

		[Token(Token = "0x6000532")]
		[Address(RVA = "0x1036B0C", Offset = "0x1036B0C", VA = "0x1036B0C")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000533")]
		[Address(RVA = "0x1036B7C", Offset = "0x1036B7C", VA = "0x1036B7C")]
		private void RefreshDistance()
		{
		}

		[Token(Token = "0x6000534")]
		[Address(RVA = "0x1036D24", Offset = "0x1036D24", VA = "0x1036D24")]
		public void RefreshSpline()
		{
		}

		[Token(Token = "0x6000535")]
		[Address(RVA = "0x1036EC4", Offset = "0x1036EC4", VA = "0x1036EC4")]
		public Spline()
		{
		}
	}
	[Token(Token = "0x200011E")]
	public class SplineControlPoint
	{
		[Token(Token = "0x400079F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 Position;

		[Token(Token = "0x40007A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 Normal;

		[Token(Token = "0x40007A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int ControlPointIndex;

		[Token(Token = "0x40007A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int SegmentIndex;

		[Token(Token = "0x40007A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float Dist;

		[Token(Token = "0x40007A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Spline mSpline;

		[Token(Token = "0x1700003F")]
		public SplineControlPoint NextControlPoint
		{
			[Token(Token = "0x6000536")]
			[Address(RVA = "0x1036F84", Offset = "0x1036F84", VA = "0x1036F84")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000040")]
		public SplineControlPoint PreviousControlPoint
		{
			[Token(Token = "0x6000537")]
			[Address(RVA = "0x1036FA0", Offset = "0x1036FA0", VA = "0x1036FA0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000041")]
		public Vector3 NextPosition
		{
			[Token(Token = "0x6000538")]
			[Address(RVA = "0x1036FBC", Offset = "0x1036FBC", VA = "0x1036FBC")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000042")]
		public Vector3 PreviousPosition
		{
			[Token(Token = "0x6000539")]
			[Address(RVA = "0x1036FD8", Offset = "0x1036FD8", VA = "0x1036FD8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000043")]
		public Vector3 NextNormal
		{
			[Token(Token = "0x600053A")]
			[Address(RVA = "0x1036FF4", Offset = "0x1036FF4", VA = "0x1036FF4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000044")]
		public Vector3 PreviousNormal
		{
			[Token(Token = "0x600053B")]
			[Address(RVA = "0x1037010", Offset = "0x1037010", VA = "0x1037010")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000045")]
		public bool IsValid
		{
			[Token(Token = "0x600053C")]
			[Address(RVA = "0x1036EAC", Offset = "0x1036EAC", VA = "0x1036EAC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600053D")]
		[Address(RVA = "0x103702C", Offset = "0x103702C", VA = "0x103702C")]
		private Vector3 GetNext2Position()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600053E")]
		[Address(RVA = "0x1037048", Offset = "0x1037048", VA = "0x1037048")]
		private Vector3 GetNext2Normal()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600053F")]
		[Address(RVA = "0x1036808", Offset = "0x1036808", VA = "0x1036808")]
		public Vector3 Interpolate(float localF)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000540")]
		[Address(RVA = "0x10368D4", Offset = "0x10368D4", VA = "0x10368D4")]
		public Vector3 InterpolateNormal(float localF)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000541")]
		[Address(RVA = "0x1036AE8", Offset = "0x1036AE8", VA = "0x1036AE8")]
		public void Init(Spline owner)
		{
		}

		[Token(Token = "0x6000542")]
		[Address(RVA = "0x1036AD8", Offset = "0x1036AD8", VA = "0x1036AD8")]
		public SplineControlPoint()
		{
		}
	}
	[Token(Token = "0x200011F")]
	public class VertexPool
	{
		[Token(Token = "0x2000120")]
		public class VertexSegment
		{
			[Token(Token = "0x40007BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int VertStart;

			[Token(Token = "0x40007BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int IndexStart;

			[Token(Token = "0x40007BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int VertCount;

			[Token(Token = "0x40007BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int IndexCount;

			[Token(Token = "0x40007BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VertexPool Pool;

			[Token(Token = "0x600054D")]
			[Address(RVA = "0x1037BC8", Offset = "0x1037BC8", VA = "0x1037BC8")]
			public VertexSegment(int start, int count, int istart, int icount, VertexPool pool)
			{
			}

			[Token(Token = "0x600054E")]
			[Address(RVA = "0x1038040", Offset = "0x1038040", VA = "0x1038040")]
			public void ClearIndices()
			{
			}
		}

		[Token(Token = "0x40007A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3[] Vertices;

		[Token(Token = "0x40007A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int[] Indices;

		[Token(Token = "0x40007A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2[] UVs;

		[Token(Token = "0x40007A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color[] Colors;

		[Token(Token = "0x40007A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool IndiceChanged;

		[Token(Token = "0x40007AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool ColorChanged;

		[Token(Token = "0x40007AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool UVChanged;

		[Token(Token = "0x40007AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		public bool VertChanged;

		[Token(Token = "0x40007AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool UV2Changed;

		[Token(Token = "0x40007AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected int VertexTotal;

		[Token(Token = "0x40007AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected int VertexUsed;

		[Token(Token = "0x40007B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected int IndexTotal;

		[Token(Token = "0x40007B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected int IndexUsed;

		[Token(Token = "0x40007B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool FirstUpdate;

		[Token(Token = "0x40007B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		protected bool VertCountChanged;

		[Token(Token = "0x40007B4")]
		public const int BlockSize = 108;

		[Token(Token = "0x40007B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float BoundsScheduleTime;

		[Token(Token = "0x40007B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float ElapsedTime;

		[Token(Token = "0x40007B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected XWeaponTrail _owner;

		[Token(Token = "0x40007B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected MeshFilter _meshFilter;

		[Token(Token = "0x40007B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected Mesh _mesh2d;

		[Token(Token = "0x40007BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Material _material;

		[Token(Token = "0x17000046")]
		public Mesh MyMesh
		{
			[Token(Token = "0x6000543")]
			[Address(RVA = "0x1037070", Offset = "0x1037070", VA = "0x1037070")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000544")]
		[Address(RVA = "0x103715C", Offset = "0x103715C", VA = "0x103715C")]
		public void RecalculateBounds()
		{
		}

		[Token(Token = "0x6000545")]
		[Address(RVA = "0x1037178", Offset = "0x1037178", VA = "0x1037178")]
		public void SetMeshObjectActive(bool flag)
		{
		}

		[Token(Token = "0x6000546")]
		[Address(RVA = "0x103721C", Offset = "0x103721C", VA = "0x103721C")]
		private void CreateMeshObj(XWeaponTrail owner, Material material)
		{
		}

		[Token(Token = "0x6000547")]
		[Address(RVA = "0x10375E4", Offset = "0x10375E4", VA = "0x10375E4")]
		public void Destroy()
		{
		}

		[Token(Token = "0x6000548")]
		[Address(RVA = "0x10376CC", Offset = "0x10376CC", VA = "0x10376CC")]
		public VertexPool(Material material, XWeaponTrail owner)
		{
		}

		[Token(Token = "0x6000549")]
		[Address(RVA = "0x10378D4", Offset = "0x10378D4", VA = "0x10378D4")]
		public VertexSegment GetVertices(int vcount, int icount)
		{
			return null;
		}

		[Token(Token = "0x600054A")]
		[Address(RVA = "0x10377C8", Offset = "0x10377C8", VA = "0x10377C8")]
		protected void InitArrays()
		{
		}

		[Token(Token = "0x600054B")]
		[Address(RVA = "0x1037A24", Offset = "0x1037A24", VA = "0x1037A24")]
		public void EnlargeArrays(int count, int icount)
		{
		}

		[Token(Token = "0x600054C")]
		[Address(RVA = "0x1037C20", Offset = "0x1037C20", VA = "0x1037C20")]
		public void LateUpdate()
		{
		}
	}
	[Token(Token = "0x2000121")]
	public class XWeaponTrail : MonoBehaviour
	{
		[Token(Token = "0x2000122")]
		public class Element
		{
			[Token(Token = "0x40007DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 PointStart;

			[Token(Token = "0x40007DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 PointEnd;

			[Token(Token = "0x1700004B")]
			public Vector3 Pos
			{
				[Token(Token = "0x600056C")]
				[Address(RVA = "0x10387F8", Offset = "0x10387F8", VA = "0x10387F8")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x600056D")]
			[Address(RVA = "0x1039A80", Offset = "0x1039A80", VA = "0x1039A80")]
			public Element(Vector3 start, Vector3 end)
			{
			}

			[Token(Token = "0x600056E")]
			[Address(RVA = "0x1039BFC", Offset = "0x1039BFC", VA = "0x1039BFC")]
			public Element()
			{
			}
		}

		[Token(Token = "0x2000123")]
		public class ElementPool
		{
			[Token(Token = "0x40007DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Stack<Element> _stack;

			[Token(Token = "0x1700004C")]
			public int CountAll
			{
				[Token(Token = "0x600056F")]
				[Address(RVA = "0x1039C70", Offset = "0x1039C70", VA = "0x1039C70")]
				[CompilerGenerated]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6000570")]
				[Address(RVA = "0x1039C78", Offset = "0x1039C78", VA = "0x1039C78")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700004D")]
			public int CountActive
			{
				[Token(Token = "0x6000571")]
				[Address(RVA = "0x1039C80", Offset = "0x1039C80", VA = "0x1039C80")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x1700004E")]
			public int CountInactive
			{
				[Token(Token = "0x6000572")]
				[Address(RVA = "0x1039C98", Offset = "0x1039C98", VA = "0x1039C98")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x6000573")]
			[Address(RVA = "0x1038320", Offset = "0x1038320", VA = "0x1038320")]
			public ElementPool(int preCount)
			{
			}

			[Token(Token = "0x6000574")]
			[Address(RVA = "0x10398F4", Offset = "0x10398F4", VA = "0x10398F4")]
			public Element Get()
			{
				return null;
			}

			[Token(Token = "0x6000575")]
			[Address(RVA = "0x10399A0", Offset = "0x10399A0", VA = "0x10399A0")]
			public void Release(Element element)
			{
			}
		}

		[Token(Token = "0x40007C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string Version;

		[Token(Token = "0x40007C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool UseWith2D;

		[Token(Token = "0x40007C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool UseWithSRP;

		[Token(Token = "0x40007C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string SortingLayerName;

		[Token(Token = "0x40007C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int SortingOrder;

		[Token(Token = "0x40007C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform PointStart;

		[Token(Token = "0x40007C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform PointEnd;

		[Token(Token = "0x40007C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int MaxFrame;

		[Token(Token = "0x40007C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int Granularity;

		[Token(Token = "0x40007C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float Fps;

		[Token(Token = "0x40007CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Color MyColor;

		[Token(Token = "0x40007CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Material MyMaterial;

		[Token(Token = "0x40007CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected float mTrailWidth;

		[Token(Token = "0x40007CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Element mHeadElem;

		[Token(Token = "0x40007CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected List<Element> mSnapshotList;

		[Token(Token = "0x40007CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected ElementPool mElemPool;

		[Token(Token = "0x40007D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected Spline mSpline;

		[Token(Token = "0x40007D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected float mFadeT;

		[Token(Token = "0x40007D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		protected bool mIsFading;

		[Token(Token = "0x40007D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected float mFadeTime;

		[Token(Token = "0x40007D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		protected float mElapsedTime;

		[Token(Token = "0x40007D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected float mFadeElapsedime;

		[Token(Token = "0x40007D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected GameObject mMeshObj;

		[Token(Token = "0x40007D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected VertexPool mVertexPool;

		[Token(Token = "0x40007D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected VertexPool.VertexSegment mVertexSegment;

		[Token(Token = "0x40007D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected bool mInited;

		[Token(Token = "0x40007DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		protected bool mActivated;

		[Token(Token = "0x40007DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected Camera _myCamera;

		[Token(Token = "0x17000047")]
		public float UpdateInterval
		{
			[Token(Token = "0x600054F")]
			[Address(RVA = "0x10380B4", Offset = "0x10380B4", VA = "0x10380B4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000048")]
		public Vector3 CurHeadPos
		{
			[Token(Token = "0x6000550")]
			[Address(RVA = "0x10380C4", Offset = "0x10380C4", VA = "0x10380C4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000049")]
		public float TrailWidth
		{
			[Token(Token = "0x6000551")]
			[Address(RVA = "0x1038130", Offset = "0x1038130", VA = "0x1038130")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700004A")]
		public Camera MyCamera
		{
			[Token(Token = "0x6000552")]
			[Address(RVA = "0x1038138", Offset = "0x1038138", VA = "0x1038138")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000553")]
		[Address(RVA = "0x10381C8", Offset = "0x10381C8", VA = "0x10381C8")]
		protected Camera FindMyCamera()
		{
			return null;
		}

		[Token(Token = "0x6000554")]
		[Address(RVA = "0x1035374", Offset = "0x1035374", VA = "0x1035374")]
		public void Init()
		{
		}

		[Token(Token = "0x6000555")]
		[Address(RVA = "0x10358A8", Offset = "0x10358A8", VA = "0x10358A8")]
		public void Activate()
		{
		}

		[Token(Token = "0x6000556")]
		[Address(RVA = "0x103586C", Offset = "0x103586C", VA = "0x103586C")]
		public void Deactivate()
		{
		}

		[Token(Token = "0x6000557")]
		[Address(RVA = "0x1035B10", Offset = "0x1035B10", VA = "0x1035B10")]
		public void StopSmoothly(float fadeTime)
		{
		}

		[Token(Token = "0x6000558")]
		[Address(RVA = "0x1038DB8", Offset = "0x1038DB8", VA = "0x1038DB8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000559")]
		[Address(RVA = "0x1038F68", Offset = "0x1038F68", VA = "0x1038F68")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600055A")]
		[Address(RVA = "0x1039118", Offset = "0x1039118", VA = "0x1039118")]
		private void Update()
		{
		}

		[Token(Token = "0x600055B")]
		[Address(RVA = "0x103922C", Offset = "0x103922C", VA = "0x103922C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600055C")]
		[Address(RVA = "0x1039144", Offset = "0x1039144", VA = "0x1039144")]
		public void MyPreRender(Camera cam)
		{
		}

		[Token(Token = "0x600055D")]
		[Address(RVA = "0x1039258", Offset = "0x1039258", VA = "0x1039258")]
		public void MyPostRender(Camera cam)
		{
		}

		[Token(Token = "0x600055E")]
		[Address(RVA = "0x1039538", Offset = "0x1039538", VA = "0x1039538")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600055F")]
		[Address(RVA = "0x1039550", Offset = "0x1039550", VA = "0x1039550")]
		private void Start()
		{
		}

		[Token(Token = "0x6000560")]
		[Address(RVA = "0x1039558", Offset = "0x1039558", VA = "0x1039558")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000561")]
		[Address(RVA = "0x1038728", Offset = "0x1038728", VA = "0x1038728")]
		private void InitSpline()
		{
		}

		[Token(Token = "0x6000562")]
		[Address(RVA = "0x1038828", Offset = "0x1038828", VA = "0x1038828")]
		private void RefreshSpline()
		{
		}

		[Token(Token = "0x6000563")]
		[Address(RVA = "0x10389B4", Offset = "0x10389B4", VA = "0x10389B4")]
		private void UpdateVertex()
		{
		}

		[Token(Token = "0x6000564")]
		[Address(RVA = "0x1039748", Offset = "0x1039748", VA = "0x1039748")]
		private void UpdateIndices()
		{
		}

		[Token(Token = "0x6000565")]
		[Address(RVA = "0x1039300", Offset = "0x1039300", VA = "0x1039300")]
		private void UpdateHeadElem()
		{
		}

		[Token(Token = "0x6000566")]
		[Address(RVA = "0x10394D8", Offset = "0x10394D8", VA = "0x10394D8")]
		private void UpdateFade()
		{
		}

		[Token(Token = "0x6000567")]
		[Address(RVA = "0x10393B4", Offset = "0x10393B4", VA = "0x10393B4")]
		private void RecordCurElem()
		{
		}

		[Token(Token = "0x6000568")]
		[Address(RVA = "0x10384E0", Offset = "0x10384E0", VA = "0x10384E0")]
		private void InitOriginalElements()
		{
		}

		[Token(Token = "0x6000569")]
		[Address(RVA = "0x1038434", Offset = "0x1038434", VA = "0x1038434")]
		private void InitMeshObj()
		{
		}

		[Token(Token = "0x600056A")]
		[Address(RVA = "0x1039AD4", Offset = "0x1039AD4", VA = "0x1039AD4")]
		public XWeaponTrail()
		{
		}
	}
}
namespace VRSmoothCam
{
	[Token(Token = "0x2000124")]
	[RequireComponent(typeof(Camera))]
	public class SmoothCamFollow : MonoBehaviour
	{
		[Token(Token = "0x40007E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Place the eye or target you want to follow here")]
		[SerializeField]
		private GameObject followTarget;

		[Token(Token = "0x40007E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Put SmoothCamSettings ScriptableObject here")]
		[SerializeField]
		private SmoothCamSettings settings;

		[Token(Token = "0x40007E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Camera thisCamera;

		[Token(Token = "0x40007E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject monitorPrefab;

		[Token(Token = "0x40007E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Renderer monitorRenderer;

		[Token(Token = "0x40007E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform smoothedTransform;

		[Token(Token = "0x6000576")]
		[Address(RVA = "0x1039CE0", Offset = "0x1039CE0", VA = "0x1039CE0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000577")]
		[Address(RVA = "0x1039D60", Offset = "0x1039D60", VA = "0x1039D60")]
		private void Start()
		{
		}

		[Token(Token = "0x6000578")]
		[Address(RVA = "0x1039F68", Offset = "0x1039F68", VA = "0x1039F68")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000579")]
		[Address(RVA = "0x1039E74", Offset = "0x1039E74", VA = "0x1039E74")]
		private void UpdateSettings()
		{
		}

		[Token(Token = "0x600057A")]
		[Address(RVA = "0x103A094", Offset = "0x103A094", VA = "0x103A094")]
		private void CreateMonitor()
		{
		}

		[Token(Token = "0x600057B")]
		[Address(RVA = "0x103A164", Offset = "0x103A164", VA = "0x103A164")]
		private void UpdateMonitorSettings()
		{
		}

		[Token(Token = "0x600057C")]
		[Address(RVA = "0x103A3B8", Offset = "0x103A3B8", VA = "0x103A3B8")]
		private void DestroyMonitor()
		{
		}

		[Token(Token = "0x600057D")]
		[Address(RVA = "0x103A47C", Offset = "0x103A47C", VA = "0x103A47C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600057E")]
		[Address(RVA = "0x103A4FC", Offset = "0x103A4FC", VA = "0x103A4FC")]
		public SmoothCamFollow()
		{
		}
	}
	[Token(Token = "0x2000125")]
	public class SmoothCamMethods
	{
		[Token(Token = "0x2000126")]
		public enum SmoothingMethod
		{
			[Token(Token = "0x40007E7")]
			SmoothDamp,
			[Token(Token = "0x40007E8")]
			ContinuousLerp
		}

		[Token(Token = "0x600057F")]
		[Address(RVA = "0x103A504", Offset = "0x103A504", VA = "0x103A504")]
		public static Transform SmoothDamp(Transform transform, Transform target, SmoothCamSettings settings)
		{
			return null;
		}

		[Token(Token = "0x6000580")]
		[Address(RVA = "0x103A818", Offset = "0x103A818", VA = "0x103A818")]
		public static Transform ContinuousLerp(Transform transform, Transform target, SmoothCamSettings settings)
		{
			return null;
		}

		[Token(Token = "0x6000581")]
		[Address(RVA = "0x103A81C", Offset = "0x103A81C", VA = "0x103A81C")]
		public SmoothCamMethods()
		{
		}
	}
	[Token(Token = "0x2000127")]
	[CreateAssetMenu(fileName = "SmoothCamSettings", menuName = "ScriptableObjects/SmoothCamSettings")]
	public class SmoothCamSettings : ScriptableObject
	{
		[Token(Token = "0x2000128")]
		public delegate void SettingsChanged();

		[Token(Token = "0x40007E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Smoothing Settings")]
		public SmoothCamMethods.SmoothingMethod smoothingMethod;

		[Token(Token = "0x40007EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 0.1f)]
		public float positionDampening;

		[Token(Token = "0x40007EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 0.1f)]
		public float rotationDampening;

		[Token(Token = "0x40007EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Prevents camera from rotating along the Z axis")]
		public bool lockCameraRoll;

		[Token(Token = "0x40007ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		[Header("Monitor Settings")]
		[Space]
		public bool enableMonitor;

		[Token(Token = "0x40007EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		public bool automaticRotateToView;

		[Token(Token = "0x40007EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 monitorPosition;

		[Token(Token = "0x40007F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 1f)]
		public float monitorTransparency;

		[Token(Token = "0x40007F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject monitorPrefab;

		[Token(Token = "0x40007F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public RenderTexture monitorRenderTexture;

		[Token(Token = "0x14000006")]
		public static event SettingsChanged OnSettingsChanged
		{
			[Token(Token = "0x6000582")]
			[Address(RVA = "0x103A824", Offset = "0x103A824", VA = "0x103A824")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000583")]
			[Address(RVA = "0x103A8DC", Offset = "0x103A8DC", VA = "0x103A8DC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000584")]
		[Address(RVA = "0x103A994", Offset = "0x103A994", VA = "0x103A994")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6000585")]
		[Address(RVA = "0x103A9F8", Offset = "0x103A9F8", VA = "0x103A9F8")]
		public SmoothCamSettings()
		{
		}
	}
}
namespace Sigtrap.Editors.ShaderStripper
{
	[Token(Token = "0x2000129")]
	[CreateAssetMenu(menuName = "Sigtrap/Shader Force Keywords")]
	public class ShaderForceKeywords : ShaderStripperBase
	{
		[Serializable]
		[Token(Token = "0x200012A")]
		private struct ForceBuiltin
		{
			[Token(Token = "0x40007F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public BuiltinShaderDefine defineToMatch;

			[Token(Token = "0x40007F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public BuiltinShaderDefine defineToForce;

			[Token(Token = "0x40007F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("If true, check Define To Match is NOT enabled")]
			public bool invertMatch;

			[Token(Token = "0x40007F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
			[Tooltip("If true, DISABLE Define To Force")]
			public bool invertForce;
		}

		[Serializable]
		[Token(Token = "0x200012B")]
		private struct ForceKeyword
		{
			[Token(Token = "0x40007FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string keywordToMatch;

			[Token(Token = "0x40007FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string keywordToForce;

			[Token(Token = "0x40007FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("If true, check Keyword To Match is NOT enabled")]
			public bool invertMatch;

			[Token(Token = "0x40007FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
			[Tooltip("If true, DISABLE Keyword To Force")]
			public bool invertForce;
		}

		[Token(Token = "0x40007F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private ForceBuiltin[] _forceBuiltins;

		[Token(Token = "0x40007F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private ForceKeyword[] _forceKeywords;

		[Token(Token = "0x600058A")]
		[Address(RVA = "0x103AB34", Offset = "0x103AB34", VA = "0x103AB34")]
		public ShaderForceKeywords()
		{
		}
	}
	[Token(Token = "0x200012C")]
	public class ShaderLog
	{
		[Token(Token = "0x40007FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<string> log;

		[Token(Token = "0x1700004F")]
		public string logName
		{
			[Token(Token = "0x600058B")]
			[Address(RVA = "0x103AB64", Offset = "0x103AB64", VA = "0x103AB64")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600058C")]
			[Address(RVA = "0x103AB6C", Offset = "0x103AB6C", VA = "0x103AB6C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000050")]
		public int Count
		{
			[Token(Token = "0x600058D")]
			[Address(RVA = "0x103AB74", Offset = "0x103AB74", VA = "0x103AB74")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600058E")]
		[Address(RVA = "0x103ABBC", Offset = "0x103ABBC", VA = "0x103ABBC")]
		public ShaderLog(string logName)
		{
		}

		[Token(Token = "0x600058F")]
		[Address(RVA = "0x103AC60", Offset = "0x103AC60", VA = "0x103AC60")]
		public void Add(string s)
		{
		}

		[Token(Token = "0x6000590")]
		[Address(RVA = "0x103AD10", Offset = "0x103AD10", VA = "0x103AD10")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000591")]
		[Address(RVA = "0x103AD80", Offset = "0x103AD80", VA = "0x103AD80")]
		public void Insert(int index, string s)
		{
		}

		[Token(Token = "0x6000592")]
		[Address(RVA = "0x103ADE8", Offset = "0x103ADE8", VA = "0x103ADE8")]
		public bool Contains(string s)
		{
			return default(bool);
		}

		[Token(Token = "0x6000593")]
		[Address(RVA = "0x103AE40", Offset = "0x103AE40", VA = "0x103AE40")]
		public string[] ToArray()
		{
			return null;
		}
	}
	[Token(Token = "0x200012D")]
	public abstract class ShaderStripperBase : ScriptableObject
	{
		[Serializable]
		[Token(Token = "0x200012E")]
		protected class StringMatch
		{
			[Token(Token = "0x200012F")]
			public enum MatchType
			{
				[Token(Token = "0x4000809")]
				EQUALS,
				[Token(Token = "0x400080A")]
				CONTAINS,
				[Token(Token = "0x400080B")]
				STARTSWITH,
				[Token(Token = "0x400080C")]
				ENDSWITH
			}

			[Token(Token = "0x4000805")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public MatchType matchType;

			[Token(Token = "0x4000806")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string namePattern;

			[Token(Token = "0x4000807")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool caseInsensitive;

			[Token(Token = "0x6000596")]
			[Address(RVA = "0x103AE98", Offset = "0x103AE98", VA = "0x103AE98")]
			public bool Evaluate(string name)
			{
				return default(bool);
			}

			[Token(Token = "0x6000597")]
			[Address(RVA = "0x103AF90", Offset = "0x103AF90", VA = "0x103AF90")]
			public StringMatch()
			{
			}
		}

		[Token(Token = "0x4000800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		[SerializeField]
		private bool _expanded;

		[Token(Token = "0x4000801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[HideInInspector]
		[SerializeField]
		private int _order;

		[Token(Token = "0x4000802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool _active;

		[Token(Token = "0x4000803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private string _notes;

		[Token(Token = "0x4000804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected bool _logOutput;

		[Token(Token = "0x17000051")]
		public bool active
		{
			[Token(Token = "0x6000594")]
			[Address(RVA = "0x103AE90", Offset = "0x103AE90", VA = "0x103AE90")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000595")]
		[Address(RVA = "0x103AB4C", Offset = "0x103AB4C", VA = "0x103AB4C")]
		protected ShaderStripperBase()
		{
		}
	}
	[Token(Token = "0x2000130")]
	[CreateAssetMenu(menuName = "Sigtrap/Shader Stripper Path")]
	public class ShaderStripperPath : ShaderStripperBase
	{
		[Token(Token = "0x400080D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private StringMatch[] _pathBlacklist;

		[Token(Token = "0x6000598")]
		[Address(RVA = "0x103AF98", Offset = "0x103AF98", VA = "0x103AF98")]
		public ShaderStripperPath()
		{
		}
	}
	[Token(Token = "0x2000131")]
	[CreateAssetMenu(menuName = "Sigtrap/Shader Stripper Platform")]
	public class ShaderStripperPlatform : ShaderStripperBase
	{
		[Token(Token = "0x400080E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[SerializeField]
		[Tooltip("If checked, use as whitelist. Otherwise, blacklist.")]
		private bool _whitelist;

		[Token(Token = "0x6000599")]
		[Address(RVA = "0x103AFB0", Offset = "0x103AFB0", VA = "0x103AFB0")]
		public ShaderStripperPlatform()
		{
		}
	}
	[Token(Token = "0x2000132")]
	[CreateAssetMenu(menuName = "Sigtrap/Shader Stripper Simple")]
	public class ShaderStripperSimple : ShaderStripperBase
	{
		[Token(Token = "0x400080F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("If shader name matches ANY of these, will be considered for stripping.")]
		[SerializeField]
		private List<StringMatch> _blacklistedShaderNames;

		[Token(Token = "0x4000810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[Tooltip("If pass type matches ANY of these, will be considerered for stripping.")]
		private List<PassType> _blacklistedPassTypes;

		[Token(Token = "0x4000811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("If variant uses ANY of these keywords, will be considered for stripping.")]
		[SerializeField]
		private List<string> _blacklistedKeywords;

		[Token(Token = "0x600059A")]
		[Address(RVA = "0x103AFC8", Offset = "0x103AFC8", VA = "0x103AFC8")]
		public ShaderStripperSimple()
		{
		}
	}
	[Token(Token = "0x2000133")]
	[CreateAssetMenu(menuName = "Sigtrap/Shader Stripper Variant Collection")]
	public class ShaderStripperVariantCollection : ShaderStripperBase, ISerializationCallbackReceiver
	{
		[Token(Token = "0x4000812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[Tooltip("Set a path like Assets/.../<name> (no extension) to merge whitelisted collections into a new collection asset.\nPath to a whitelisted collection (to overwrite) IS allowed.")]
		private string _mergeToFile;

		[Token(Token = "0x4000813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[Tooltip("Only shader variants in these collections will NOT be stripped (except built-in shaders).")]
		private List<ShaderVariantCollection> _whitelistedCollections;

		[Token(Token = "0x4000814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		[SerializeField]
		private List<string> _collectionPaths;

		[Token(Token = "0x4000815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[Tooltip("Strip Hidden shaders. Be careful - shaders in Resources might get stripped.\nHidden shaders in collections will always have their variants stripped.")]
		private bool _stripHidden;

		[Token(Token = "0x4000816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		[Tooltip("Allow VR versions of variants in collection even when VR keywords not in collection.")]
		[SerializeField]
		private bool _allowVrVariants;

		[Token(Token = "0x4000817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		[Tooltip("Allow GPU instanced versions of variants in collection even when instancing keywords not in collection.")]
		[SerializeField]
		private bool _allowInstancedVariants;

		[Token(Token = "0x4000818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Shaders matching these names will be ignored (not stripped)")]
		[SerializeField]
		private StringMatch[] _ignoreShadersByName;

		[Token(Token = "0x4000819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("These passtypes will be ignored (not stripped)")]
		[SerializeField]
		private List<PassType> _ignorePassTypes;

		[Token(Token = "0x400081A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool _valid;

		[Token(Token = "0x400081B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool _dirty;

		[Token(Token = "0x600059B")]
		[Address(RVA = "0x103AFE0", Offset = "0x103AFE0", VA = "0x103AFE0", Slot = "5")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x600059C")]
		[Address(RVA = "0x103AFEC", Offset = "0x103AFEC", VA = "0x103AFEC", Slot = "4")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x600059D")]
		[Address(RVA = "0x103AFF8", Offset = "0x103AFF8", VA = "0x103AFF8")]
		public ShaderStripperVariantCollection()
		{
		}
	}
}
namespace THOR
{
	[Token(Token = "0x2000134")]
	public class THOR_Lightning : MonoBehaviour
	{
		[Token(Token = "0x2000135")]
		[CompilerGenerated]
		private sealed class <LerpEvolution>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400082F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000830")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000831")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public THOR_Lightning <>4__this;

			[Token(Token = "0x4000832")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <distToMultiClouds>5__2;

			[Token(Token = "0x4000833")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <distToMultiBolts>5__3;

			[Token(Token = "0x4000834")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private bool <flicker>5__4;

			[Token(Token = "0x4000835")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <tStamp>5__5;

			[Token(Token = "0x17000052")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60005A7")]
				[Address(RVA = "0x103BFE0", Offset = "0x103BFE0", VA = "0x103BFE0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000053")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60005A9")]
				[Address(RVA = "0x103C028", Offset = "0x103C028", VA = "0x103C028", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60005A4")]
			[Address(RVA = "0x103B82C", Offset = "0x103B82C", VA = "0x103B82C")]
			[DebuggerHidden]
			public <LerpEvolution>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x60005A5")]
			[Address(RVA = "0x103BA58", Offset = "0x103BA58", VA = "0x103BA58", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60005A6")]
			[Address(RVA = "0x103BA5C", Offset = "0x103BA5C", VA = "0x103BA5C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60005A8")]
			[Address(RVA = "0x103BFE8", Offset = "0x103BFE8", VA = "0x103BFE8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000136")]
		[CompilerGenerated]
		private sealed class <LerpAudio>d__22 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000836")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000837")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000838")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public THOR_Lightning <>4__this;

			[Token(Token = "0x4000839")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <volumeDistanceMulti>5__2;

			[Token(Token = "0x400083A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <randomPitch>5__3;

			[Token(Token = "0x400083B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <tStamp>5__4;

			[Token(Token = "0x17000054")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60005AD")]
				[Address(RVA = "0x103C474", Offset = "0x103C474", VA = "0x103C474", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000055")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60005AF")]
				[Address(RVA = "0x103C4BC", Offset = "0x103C4BC", VA = "0x103C4BC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60005AA")]
			[Address(RVA = "0x103B8C8", Offset = "0x103B8C8", VA = "0x103B8C8")]
			[DebuggerHidden]
			public <LerpAudio>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x60005AB")]
			[Address(RVA = "0x103C030", Offset = "0x103C030", VA = "0x103C030", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60005AC")]
			[Address(RVA = "0x103C034", Offset = "0x103C034", VA = "0x103C034", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60005AE")]
			[Address(RVA = "0x103C47C", Offset = "0x103C47C", VA = "0x103C47C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400081C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform lightningBoltT;

		[Token(Token = "0x400081D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform lightningCloudT;

		[Token(Token = "0x400081E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform spotLightT;

		[Token(Token = "0x400081F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public MeshFilter lightningBoltMF;

		[Token(Token = "0x4000820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public MeshRenderer lightningBoltMR;

		[Token(Token = "0x4000821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public MeshRenderer lightningCloudMR;

		[Token(Token = "0x4000822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Material lightningBoltMaterial;

		[Token(Token = "0x4000823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Material lightningCloudMaterial;

		[Token(Token = "0x4000824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AudioSource audioSource;

		[Token(Token = "0x4000825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Light spotLight;

		[Token(Token = "0x4000826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private THOR_Thunderstorm rt;

		[Token(Token = "0x4000827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform t;

		[Token(Token = "0x4000828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 initScale;

		[Token(Token = "0x4000829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float lightdist;

		[Token(Token = "0x400082A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float duration;

		[Token(Token = "0x400082B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float distance;

		[Token(Token = "0x400082C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float distanceFlat;

		[Token(Token = "0x400082D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float pan;

		[Token(Token = "0x400082E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool noSound;

		[Token(Token = "0x600059E")]
		[Address(RVA = "0x103B010", Offset = "0x103B010", VA = "0x103B010")]
		private void Awake()
		{
		}

		[Token(Token = "0x600059F")]
		[Address(RVA = "0x103B2CC", Offset = "0x103B2CC", VA = "0x103B2CC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60005A0")]
		[Address(RVA = "0x103B7B8", Offset = "0x103B7B8", VA = "0x103B7B8")]
		[IteratorStateMachine(typeof(<LerpEvolution>d__21))]
		private IEnumerator LerpEvolution()
		{
			return null;
		}

		[Token(Token = "0x60005A1")]
		[Address(RVA = "0x103B854", Offset = "0x103B854", VA = "0x103B854")]
		[IteratorStateMachine(typeof(<LerpAudio>d__22))]
		private IEnumerator LerpAudio()
		{
			return null;
		}

		[Token(Token = "0x60005A2")]
		[Address(RVA = "0x103B8F0", Offset = "0x103B8F0", VA = "0x103B8F0")]
		private void BackToPool()
		{
		}

		[Token(Token = "0x60005A3")]
		[Address(RVA = "0x103BA40", Offset = "0x103BA40", VA = "0x103BA40")]
		public THOR_Lightning()
		{
		}
	}
	[Token(Token = "0x2000137")]
	public class THOR_SheetLightning : MonoBehaviour
	{
		[Token(Token = "0x2000138")]
		[CompilerGenerated]
		private sealed class <LerpEvolution>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000840")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000841")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000842")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public THOR_SheetLightning <>4__this;

			[Token(Token = "0x4000843")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private bool <flicker>5__2;

			[Token(Token = "0x4000844")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <distToMultiClouds>5__3;

			[Token(Token = "0x4000845")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <duration>5__4;

			[Token(Token = "0x4000846")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <tStamp>5__5;

			[Token(Token = "0x17000056")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60005B7")]
				[Address(RVA = "0x103CB24", Offset = "0x103CB24", VA = "0x103CB24", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000057")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60005B9")]
				[Address(RVA = "0x103CB6C", Offset = "0x103CB6C", VA = "0x103CB6C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60005B4")]
			[Address(RVA = "0x103C750", Offset = "0x103C750", VA = "0x103C750")]
			[DebuggerHidden]
			public <LerpEvolution>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x60005B5")]
			[Address(RVA = "0x103C780", Offset = "0x103C780", VA = "0x103C780", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60005B6")]
			[Address(RVA = "0x103C784", Offset = "0x103C784", VA = "0x103C784", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60005B8")]
			[Address(RVA = "0x103CB2C", Offset = "0x103CB2C", VA = "0x103CB2C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400083C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material lightningCloudMaterial;

		[Token(Token = "0x400083D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MeshRenderer lightningCloudMR;

		[Token(Token = "0x400083E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float distance;

		[Token(Token = "0x400083F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private THOR_Thunderstorm rt;

		[Token(Token = "0x60005B0")]
		[Address(RVA = "0x103C4C4", Offset = "0x103C4C4", VA = "0x103C4C4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60005B1")]
		[Address(RVA = "0x103C5C8", Offset = "0x103C5C8", VA = "0x103C5C8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60005B2")]
		[Address(RVA = "0x103C6DC", Offset = "0x103C6DC", VA = "0x103C6DC")]
		[IteratorStateMachine(typeof(<LerpEvolution>d__6))]
		private IEnumerator LerpEvolution()
		{
			return null;
		}

		[Token(Token = "0x60005B3")]
		[Address(RVA = "0x103C778", Offset = "0x103C778", VA = "0x103C778")]
		public THOR_SheetLightning()
		{
		}
	}
	[Token(Token = "0x2000139")]
	public class THOR_Thunderstorm : MonoBehaviour
	{
		[Token(Token = "0x200013A")]
		[CompilerGenerated]
		private sealed class <FadeUp>d__89 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000897")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000898")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000899")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public THOR_Thunderstorm <>4__this;

			[Token(Token = "0x400089A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <startVal>5__2;

			[Token(Token = "0x400089B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <tStamp>5__3;

			[Token(Token = "0x17000058")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60005CE")]
				[Address(RVA = "0x103F1E0", Offset = "0x103F1E0", VA = "0x103F1E0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000059")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60005D0")]
				[Address(RVA = "0x103F228", Offset = "0x103F228", VA = "0x103F228", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60005CB")]
			[Address(RVA = "0x103ECC0", Offset = "0x103ECC0", VA = "0x103ECC0")]
			[DebuggerHidden]
			public <FadeUp>d__89(int <>1__state)
			{
			}

			[Token(Token = "0x60005CC")]
			[Address(RVA = "0x103F03C", Offset = "0x103F03C", VA = "0x103F03C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60005CD")]
			[Address(RVA = "0x103F040", Offset = "0x103F040", VA = "0x103F040", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60005CF")]
			[Address(RVA = "0x103F1E8", Offset = "0x103F1E8", VA = "0x103F1E8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200013B")]
		[CompilerGenerated]
		private sealed class <FadeDown>d__90 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400089C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400089D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400089E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public THOR_Thunderstorm <>4__this;

			[Token(Token = "0x400089F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <startVal>5__2;

			[Token(Token = "0x40008A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <tStamp>5__3;

			[Token(Token = "0x1700005A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60005D4")]
				[Address(RVA = "0x103F36C", Offset = "0x103F36C", VA = "0x103F36C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700005B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60005D6")]
				[Address(RVA = "0x103F3B4", Offset = "0x103F3B4", VA = "0x103F3B4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60005D1")]
			[Address(RVA = "0x103ED5C", Offset = "0x103ED5C", VA = "0x103ED5C")]
			[DebuggerHidden]
			public <FadeDown>d__90(int <>1__state)
			{
			}

			[Token(Token = "0x60005D2")]
			[Address(RVA = "0x103F230", Offset = "0x103F230", VA = "0x103F230", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60005D3")]
			[Address(RVA = "0x103F234", Offset = "0x103F234", VA = "0x103F234", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60005D5")]
			[Address(RVA = "0x103F374", Offset = "0x103F374", VA = "0x103F374", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200013C")]
		[CompilerGenerated]
		private sealed class <CtrlThunderstorm>d__95 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40008A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40008A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40008A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public THOR_Thunderstorm <>4__this;

			[Token(Token = "0x40008A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float transitionDuration;

			[Token(Token = "0x40008A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float targetIntensity;

			[Token(Token = "0x40008A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <startIntensity>5__2;

			[Token(Token = "0x40008A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <tStamp>5__3;

			[Token(Token = "0x1700005C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60005DA")]
				[Address(RVA = "0x103F4D4", Offset = "0x103F4D4", VA = "0x103F4D4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700005D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60005DC")]
				[Address(RVA = "0x103F51C", Offset = "0x103F51C", VA = "0x103F51C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60005D7")]
			[Address(RVA = "0x103EFB4", Offset = "0x103EFB4", VA = "0x103EFB4")]
			[DebuggerHidden]
			public <CtrlThunderstorm>d__95(int <>1__state)
			{
			}

			[Token(Token = "0x60005D8")]
			[Address(RVA = "0x103F3BC", Offset = "0x103F3BC", VA = "0x103F3BC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60005D9")]
			[Address(RVA = "0x103F3C0", Offset = "0x103F3C0", VA = "0x103F3C0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60005DB")]
			[Address(RVA = "0x103F4DC", Offset = "0x103F4DC", VA = "0x103F4DC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static THOR_Thunderstorm instance;

		[Token(Token = "0x4000848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Camera cam;

		[Token(Token = "0x4000849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform camT;

		[Token(Token = "0x400084A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool followCamera;

		[Token(Token = "0x400084B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool followCameraVertically;

		[Token(Token = "0x400084C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0f, 1f)]
		public float probability;

		[Token(Token = "0x400084D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 1f)]
		public float flickerProbability;

		[Token(Token = "0x400084E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 1f)]
		public float preferCameraView;

		[Token(Token = "0x400084F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float minDuration;

		[Token(Token = "0x4000850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float maxDuration;

		[Token(Token = "0x4000851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[ColorUsage(false)]
		public Color colorLightningCore;

		[Token(Token = "0x4000852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[ColorUsage(false)]
		public Color colorLightningGlow;

		[Token(Token = "0x4000853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[ColorUsage(false)]
		public Color colorCloudCore;

		[Token(Token = "0x4000854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ColorUsage(false)]
		public Color colorCloudGlow;

		[Token(Token = "0x4000855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float minDistance;

		[Token(Token = "0x4000856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float maxDistance;

		[Token(Token = "0x4000857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float spawnHeight;

		[Token(Token = "0x4000858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float scaleMulti;

		[Token(Token = "0x4000859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool enableDepthBlending;

		[Token(Token = "0x400085A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float depthBlend;

		[Token(Token = "0x400085B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public AnimationCurve distanceToMultiBolts;

		[Token(Token = "0x400085C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public AnimationCurve distanceToMultiClouds;

		[Token(Token = "0x400085D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public AnimationCurve flickerBolts;

		[Token(Token = "0x400085E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public AnimationCurve flickerClouds;

		[Token(Token = "0x400085F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public bool useLight;

		[Token(Token = "0x4000860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float lightIntensityMulti;

		[Token(Token = "0x4000861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Gradient lightColor;

		[Token(Token = "0x4000862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float maxLightDistance;

		[Token(Token = "0x4000863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public AnimationCurve lightIntensityCurve;

		[Token(Token = "0x4000864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public AnimationCurve lightDistanceCurve;

		[Token(Token = "0x4000865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public float lightRange;

		[Token(Token = "0x4000866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[Range(1f, 179f)]
		public float lightAngle;

		[Token(Token = "0x4000867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Texture lightCookie;

		[Token(Token = "0x4000868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public LightShadows lightShadows;

		[Token(Token = "0x4000869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public LightShadowResolution shadowResolution;

		[Token(Token = "0x400086A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Range(0f, 1f)]
		public float shadowStrength;

		[Token(Token = "0x400086B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[Range(0f, 2f)]
		public float shadowBias;

		[Token(Token = "0x400086C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Range(0f, 3f)]
		public float shadowNormalBias;

		[Token(Token = "0x400086D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[Range(0.1f, 10f)]
		public float shadowNearPlane;

		[Token(Token = "0x400086E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public AudioClip thunderLoop;

		[Token(Token = "0x400086F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public AnimationCurve thunderLoopVolume;

		[Token(Token = "0x4000870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public AudioClip[] thunderClipsVeryClose;

		[Token(Token = "0x4000871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public float thunderVeryCloseDistance;

		[Token(Token = "0x4000872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public AudioClip[] thunderClipsClose;

		[Token(Token = "0x4000873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public float thunderCloseDistance;

		[Token(Token = "0x4000874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public AudioClip[] thunderClipsMedium;

		[Token(Token = "0x4000875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public float thunderMediumDistance;

		[Token(Token = "0x4000876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public AudioClip[] thunderClipsFar;

		[Token(Token = "0x4000877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public float thunderFarDistance;

		[Token(Token = "0x4000878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public AnimationCurve distanceToVolume;

		[Token(Token = "0x4000879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public AnimationCurve audioFade;

		[Token(Token = "0x400087A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public AnimationCurve panMulti;

		[Token(Token = "0x400087B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public float SpeedOfSound;

		[Token(Token = "0x400087C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		public float lerpSpeedUp;

		[Token(Token = "0x400087D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public float lerpSpeedDown;

		[Token(Token = "0x400087E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public AudioMixerGroup audioMixerGroup;

		[Token(Token = "0x400087F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public GameObject R_LightningPrefab;

		[Token(Token = "0x4000880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public int poolSize;

		[Token(Token = "0x4000881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public List<GameObject> poolUnused;

		[Token(Token = "0x4000882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public List<GameObject> poolUsed;

		[Token(Token = "0x4000883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public GameObject R_SheetLightningPrefab;

		[Token(Token = "0x4000884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public int poolSizeSheetLightning;

		[Token(Token = "0x4000885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public List<GameObject> poolSheetLightningUnused;

		[Token(Token = "0x4000886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public List<GameObject> poolSheetLightningUsed;

		[Token(Token = "0x4000887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public int layer;

		[Token(Token = "0x4000888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public Mesh[] lightningBoltMeshes;

		[Token(Token = "0x4000889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private AnimationCurve minDelayCurve;

		[Token(Token = "0x400088A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private AnimationCurve maxDelayCurve;

		[Token(Token = "0x400088B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		[HideInInspector]
		public bool lightIsActive;

		[Token(Token = "0x400088C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		private Vector3 spawnPos;

		[Token(Token = "0x400088D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private Vector3 camPos;

		[Token(Token = "0x400088E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		private float nextLightningIn;

		[Token(Token = "0x400088F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private float nextSheetLightningIn;

		[Token(Token = "0x4000890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
		private float timeSinceLastLightning;

		[Token(Token = "0x4000891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private float timeSinceLastSheetLightning;

		[Token(Token = "0x4000892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private AudioSource aS;

		[Token(Token = "0x4000893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private float loopVol;

		[Token(Token = "0x4000894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		public IEnumerator fadeUp;

		[Token(Token = "0x4000895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private IEnumerator fadeDown;

		[Token(Token = "0x4000896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		public IEnumerator ctrlThunderstorm;

		[Token(Token = "0x60005BA")]
		[Address(RVA = "0x103CB74", Offset = "0x103CB74", VA = "0x103CB74")]
		private THOR_Thunderstorm()
		{
		}

		[Token(Token = "0x60005BB")]
		[Address(RVA = "0x103DBA4", Offset = "0x103DBA4", VA = "0x103DBA4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60005BC")]
		[Address(RVA = "0x103DCA0", Offset = "0x103DCA0", VA = "0x103DCA0")]
		private void Start()
		{
		}

		[Token(Token = "0x60005BD")]
		[Address(RVA = "0x103E230", Offset = "0x103E230", VA = "0x103E230")]
		private void OnDetroy()
		{
		}

		[Token(Token = "0x60005BE")]
		[Address(RVA = "0x103E284", Offset = "0x103E284", VA = "0x103E284")]
		private void Update()
		{
		}

		[Token(Token = "0x60005BF")]
		[Address(RVA = "0x103E86C", Offset = "0x103E86C", VA = "0x103E86C")]
		private void Lightning()
		{
		}

		[Token(Token = "0x60005C0")]
		[Address(RVA = "0x103E91C", Offset = "0x103E91C", VA = "0x103E91C")]
		private void CameraLightning()
		{
		}

		[Token(Token = "0x60005C1")]
		[Address(RVA = "0x103EA6C", Offset = "0x103EA6C", VA = "0x103EA6C")]
		private void RandomPosLightning()
		{
		}

		[Token(Token = "0x60005C2")]
		[Address(RVA = "0x103EB38", Offset = "0x103EB38", VA = "0x103EB38")]
		private void ActivateLightning()
		{
		}

		[Token(Token = "0x60005C3")]
		[Address(RVA = "0x103E578", Offset = "0x103E578", VA = "0x103E578")]
		private void SheetLightning()
		{
		}

		[Token(Token = "0x60005C4")]
		[Address(RVA = "0x103C400", Offset = "0x103C400", VA = "0x103C400")]
		[IteratorStateMachine(typeof(<FadeUp>d__89))]
		public IEnumerator FadeUp()
		{
			return null;
		}

		[Token(Token = "0x60005C5")]
		[Address(RVA = "0x103ECE8", Offset = "0x103ECE8", VA = "0x103ECE8")]
		[IteratorStateMachine(typeof(<FadeDown>d__90))]
		private IEnumerator FadeDown()
		{
			return null;
		}

		[Token(Token = "0x60005C6")]
		[Address(RVA = "0x103B968", Offset = "0x103B968", VA = "0x103B968")]
		public void BackToPool(GameObject go)
		{
		}

		[Token(Token = "0x60005C7")]
		[Address(RVA = "0x103CA4C", Offset = "0x103CA4C", VA = "0x103CA4C")]
		public void BackToPoolSheetLightning(GameObject go)
		{
		}

		[Token(Token = "0x60005C8")]
		[Address(RVA = "0x103ED84", Offset = "0x103ED84", VA = "0x103ED84")]
		public static void ControlThunderstorm(float targetIntensity = 1f, float transitionDuration = 20f)
		{
		}

		[Token(Token = "0x60005C9")]
		[Address(RVA = "0x103EF2C", Offset = "0x103EF2C", VA = "0x103EF2C")]
		[IteratorStateMachine(typeof(<CtrlThunderstorm>d__95))]
		public IEnumerator CtrlThunderstorm(float targetIntensity, float transitionDuration)
		{
			return null;
		}

		[Token(Token = "0x60005CA")]
		[Address(RVA = "0x103EFDC", Offset = "0x103EFDC", VA = "0x103EFDC")]
		public static void SetProbability(float value)
		{
		}
	}
}
namespace ch.sycoforge.Decal.Wrapper
{
	[Token(Token = "0x200013D")]
	public class EasyDecal : ch.sycoforge.Decal.EasyDecal
	{
		[Token(Token = "0x60005DD")]
		[Address(RVA = "0x103F524", Offset = "0x103F524", VA = "0x103F524")]
		public EasyDecal()
		{
		}
	}
}
namespace StylizedWater
{
	[Token(Token = "0x200013E")]
	public static class GerstnerWaveDisplacement
	{
		[Token(Token = "0x60005DE")]
		[Address(RVA = "0x103F57C", Offset = "0x103F57C", VA = "0x103F57C")]
		private static Vector3 GerstnerWave(Vector3 position, float steepness, float wavelength, float speed, float direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005DF")]
		[Address(RVA = "0x103F6D8", Offset = "0x103F6D8", VA = "0x103F6D8")]
		public static Vector3 GetWaveDisplacement(Vector3 position, float steepness, float wavelength, float speed, float[] directions)
		{
			return default(Vector3);
		}
	}
}
namespace SimpleLightProbePlacer
{
	[Token(Token = "0x200013F")]
	[RequireComponent(typeof(LightProbeGroup))]
	[AddComponentMenu("Rendering/Light Probe Group Control")]
	public class LightProbeGroupControl : MonoBehaviour
	{
		[Token(Token = "0x60005E0")]
		[Address(RVA = "0x103F880", Offset = "0x103F880", VA = "0x103F880")]
		public LightProbeGroupControl()
		{
		}
	}
	[Token(Token = "0x2000140")]
	public enum LightProbeVolumeType
	{
		[Token(Token = "0x40008A9")]
		Fixed,
		[Token(Token = "0x40008AA")]
		Float
	}
	[Token(Token = "0x2000141")]
	[AddComponentMenu("Rendering/Light Probe Volume")]
	public class LightProbeVolume : TransformVolume
	{
		[Token(Token = "0x40008AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private LightProbeVolumeType m_type;

		[Token(Token = "0x40008AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private Vector3 m_densityFixed;

		[Token(Token = "0x40008AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Vector3 m_densityFloat;

		[Token(Token = "0x1700005E")]
		public LightProbeVolumeType Type
		{
			[Token(Token = "0x60005E1")]
			[Address(RVA = "0x103F888", Offset = "0x103F888", VA = "0x103F888")]
			get
			{
				return default(LightProbeVolumeType);
			}
			[Token(Token = "0x60005E2")]
			[Address(RVA = "0x103F890", Offset = "0x103F890", VA = "0x103F890")]
			set
			{
			}
		}

		[Token(Token = "0x1700005F")]
		public Vector3 Density
		{
			[Token(Token = "0x60005E3")]
			[Address(RVA = "0x103F898", Offset = "0x103F898", VA = "0x103F898")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60005E4")]
			[Address(RVA = "0x103F8D4", Offset = "0x103F8D4", VA = "0x103F8D4")]
			set
			{
			}
		}

		[Token(Token = "0x17000060")]
		public static Color EditorColor
		{
			[Token(Token = "0x60005E5")]
			[Address(RVA = "0x103F8F4", Offset = "0x103F8F4", VA = "0x103F8F4")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x60005E6")]
		[Address(RVA = "0x103F90C", Offset = "0x103F90C", VA = "0x103F90C")]
		public List<Vector3> CreatePositions()
		{
			return null;
		}

		[Token(Token = "0x60005E7")]
		[Address(RVA = "0x103F914", Offset = "0x103F914", VA = "0x103F914")]
		public List<Vector3> CreatePositions(LightProbeVolumeType type)
		{
			return null;
		}

		[Token(Token = "0x60005E8")]
		[Address(RVA = "0x103FCEC", Offset = "0x103FCEC", VA = "0x103FCEC")]
		public static List<Vector3> CreatePositionsFixed(Transform volumeTransform, Vector3 origin, Vector3 size, Vector3 density)
		{
			return null;
		}

		[Token(Token = "0x60005E9")]
		[Address(RVA = "0x103F9BC", Offset = "0x103F9BC", VA = "0x103F9BC")]
		public static List<Vector3> CreatePositionsFloat(Transform volumeTransform, Vector3 origin, Vector3 size, Vector3 density)
		{
			return null;
		}

		[Token(Token = "0x60005EA")]
		[Address(RVA = "0x1040034", Offset = "0x1040034", VA = "0x1040034")]
		public LightProbeVolume()
		{
		}
	}
	[Token(Token = "0x2000142")]
	[AddComponentMenu("")]
	public class TransformVolume : MonoBehaviour
	{
		[Token(Token = "0x40008AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Volume m_volume;

		[Token(Token = "0x17000061")]
		public Volume Volume
		{
			[Token(Token = "0x60005EB")]
			[Address(RVA = "0x1040140", Offset = "0x1040140", VA = "0x1040140")]
			get
			{
				return default(Volume);
			}
			[Token(Token = "0x60005EC")]
			[Address(RVA = "0x1040154", Offset = "0x1040154", VA = "0x1040154")]
			set
			{
			}
		}

		[Token(Token = "0x17000062")]
		public Vector3 Origin
		{
			[Token(Token = "0x60005ED")]
			[Address(RVA = "0x103F9A4", Offset = "0x103F9A4", VA = "0x103F9A4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000063")]
		public Vector3 Size
		{
			[Token(Token = "0x60005EE")]
			[Address(RVA = "0x103F9B0", Offset = "0x103F9B0", VA = "0x103F9B0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x60005EF")]
		[Address(RVA = "0x1040168", Offset = "0x1040168", VA = "0x1040168")]
		public bool IsInBounds(Vector3[] points)
		{
			return default(bool);
		}

		[Token(Token = "0x60005F0")]
		[Address(RVA = "0x1040418", Offset = "0x1040418", VA = "0x1040418")]
		public bool IsOnBorder(Vector3[] points)
		{
			return default(bool);
		}

		[Token(Token = "0x60005F1")]
		[Address(RVA = "0x1040518", Offset = "0x1040518", VA = "0x1040518")]
		public bool IsInVolume(Vector3[] points)
		{
			return default(bool);
		}

		[Token(Token = "0x60005F2")]
		[Address(RVA = "0x10405BC", Offset = "0x10405BC", VA = "0x10405BC")]
		public bool IsInVolume(Vector3 position)
		{
			return default(bool);
		}

		[Token(Token = "0x60005F3")]
		[Address(RVA = "0x1040A40", Offset = "0x1040A40", VA = "0x1040A40")]
		public Vector3[] GetCorners()
		{
			return null;
		}

		[Token(Token = "0x60005F4")]
		[Address(RVA = "0x10401B8", Offset = "0x10401B8", VA = "0x10401B8")]
		public Bounds GetBounds()
		{
			return default(Bounds);
		}

		[Token(Token = "0x60005F5")]
		[Address(RVA = "0x10401F0", Offset = "0x10401F0", VA = "0x10401F0")]
		public Bounds GetBounds(Vector3[] points)
		{
			return default(Bounds);
		}

		[Token(Token = "0x60005F6")]
		[Address(RVA = "0x1040BFC", Offset = "0x1040BFC", VA = "0x1040BFC")]
		public GameObject[] GetGameObjectsInBounds(LayerMask layerMask)
		{
			return null;
		}

		[Token(Token = "0x60005F7")]
		[Address(RVA = "0x1040684", Offset = "0x1040684", VA = "0x1040684")]
		public Vector3 GetSideDirection(int side)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005F8")]
		[Address(RVA = "0x1040838", Offset = "0x1040838", VA = "0x1040838")]
		public Vector3 GetSidePosition(int side)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005F9")]
		[Address(RVA = "0x1040F2C", Offset = "0x1040F2C", VA = "0x1040F2C")]
		public float GetSizeAxis(int side)
		{
			return default(float);
		}

		[Token(Token = "0x60005FA")]
		[Address(RVA = "0x10400A4", Offset = "0x10400A4", VA = "0x10400A4")]
		public TransformVolume()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000144")]
	public struct Volume
	{
		[Token(Token = "0x40008B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private Vector3 m_origin;

		[Token(Token = "0x40008B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private Vector3 m_size;

		[Token(Token = "0x17000064")]
		public Vector3 Origin
		{
			[Token(Token = "0x60005FF")]
			[Address(RVA = "0x1041014", Offset = "0x1041014", VA = "0x1041014")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000065")]
		public Vector3 Size
		{
			[Token(Token = "0x6000600")]
			[Address(RVA = "0x1041020", Offset = "0x1041020", VA = "0x1041020")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000601")]
		[Address(RVA = "0x1040F64", Offset = "0x1040F64", VA = "0x1040F64")]
		public Volume(Vector3 origin, Vector3 size)
		{
		}

		[Token(Token = "0x6000602")]
		[Address(RVA = "0x104102C", Offset = "0x104102C", VA = "0x104102C")]
		public static bool operator ==(Volume left, Volume right)
		{
			return default(bool);
		}

		[Token(Token = "0x6000603")]
		[Address(RVA = "0x10410D8", Offset = "0x10410D8", VA = "0x10410D8")]
		public static bool operator !=(Volume left, Volume right)
		{
			return default(bool);
		}

		[Token(Token = "0x6000604")]
		[Address(RVA = "0x104105C", Offset = "0x104105C", VA = "0x104105C")]
		public bool Equals(Volume other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000605")]
		[Address(RVA = "0x104110C", Offset = "0x104110C", VA = "0x104110C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000606")]
		[Address(RVA = "0x104119C", Offset = "0x104119C", VA = "0x104119C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000607")]
		[Address(RVA = "0x1041264", Offset = "0x1041264", VA = "0x1041264", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
}
namespace RootMotion
{
	[Token(Token = "0x2000145")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page3.html")]
	[AddComponentMenu("Scripts/RootMotion/Baker")]
	public abstract class Baker : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000146")]
		public enum Mode
		{
			[Token(Token = "0x40008C6")]
			AnimationClips,
			[Token(Token = "0x40008C7")]
			AnimationStates,
			[Token(Token = "0x40008C8")]
			PlayableDirector,
			[Token(Token = "0x40008C9")]
			Realtime
		}

		[Token(Token = "0x2000147")]
		public delegate void BakerDelegate(AnimationClip clip, float time);

		[Serializable]
		[Token(Token = "0x2000148")]
		public class ClipSettings
		{
			[Serializable]
			[Token(Token = "0x2000149")]
			public enum BasedUponRotation
			{
				[Token(Token = "0x40008D7")]
				Original,
				[Token(Token = "0x40008D8")]
				BodyOrientation
			}

			[Serializable]
			[Token(Token = "0x200014A")]
			public enum BasedUponY
			{
				[Token(Token = "0x40008DA")]
				Original,
				[Token(Token = "0x40008DB")]
				CenterOfMass,
				[Token(Token = "0x40008DC")]
				Feet
			}

			[Serializable]
			[Token(Token = "0x200014B")]
			public enum BasedUponXZ
			{
				[Token(Token = "0x40008DE")]
				Original,
				[Token(Token = "0x40008DF")]
				CenterOfMass
			}

			[Token(Token = "0x40008CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool loopTime;

			[Token(Token = "0x40008CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
			public bool loopBlend;

			[Token(Token = "0x40008CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float cycleOffset;

			[Token(Token = "0x40008CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool loopBlendOrientation;

			[Token(Token = "0x40008CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public BasedUponRotation basedUponRotation;

			[Token(Token = "0x40008CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float orientationOffsetY;

			[Token(Token = "0x40008D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public bool loopBlendPositionY;

			[Token(Token = "0x40008D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public BasedUponY basedUponY;

			[Token(Token = "0x40008D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float level;

			[Token(Token = "0x40008D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool loopBlendPositionXZ;

			[Token(Token = "0x40008D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public BasedUponXZ basedUponXZ;

			[Token(Token = "0x40008D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool mirror;

			[Token(Token = "0x600061F")]
			[Address(RVA = "0x1041728", Offset = "0x1041728", VA = "0x1041728")]
			public ClipSettings()
			{
			}
		}

		[Token(Token = "0x40008B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(1f, 90f)]
		[Tooltip("In AnimationClips, AnimationStates or PlayableDirector mode - the frame rate at which the animation clip will be sampled. In Realtime mode - the frame rate at which the pose will be sampled. With the latter, the frame rate is not guaranteed if the player is not able to reach it.")]
		public int frameRate;

		[Token(Token = "0x40008B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Maximum allowed error for keyframe reduction.")]
		[Range(0f, 0.1f)]
		public float keyReductionError;

		[Token(Token = "0x40008B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("AnimationClips mode can be used to bake a batch of AnimationClips directly without the need of setting up an AnimatorController. AnimationStates mode is useful for when you need to set up a more complex rig with layers and AvatarMasks in Mecanim. PlayableDirector mode bakes a Timeline. Realtime mode is for continuous baking of gameplay, ragdoll phsysics or PuppetMaster dynamics.")]
		public Mode mode;

		[Token(Token = "0x40008B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("AnimationClips to bake.")]
		public AnimationClip[] animationClips;

		[Token(Token = "0x40008B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The name of the AnimationStates to bake (must be on the base layer) in the Animator above (Right-click on this component header and select 'Find Animation States' to have Baker fill those in automatically, required that state names match with the names of the clips used in them).")]
		public string[] animationStates;

		[Token(Token = "0x40008B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The folder to save the baked AnimationClips to.")]
		public string saveToFolder;

		[Token(Token = "0x40008B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("String that will be added to each clip or animation state name for the saved clip. For example if your animation state/clip names were 'Idle' and 'Walk', then with '_Baked' as Append Name, the Baker will create 'Idle_Baked' and 'Walk_Baked' animation clips.")]
		public string appendName;

		[Token(Token = "0x40008BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Name of the created AnimationClip file.")]
		public string saveName;

		[Token(Token = "0x40008BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public Animator animator;

		[Token(Token = "0x40008BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public PlayableDirector director;

		[Token(Token = "0x40008BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public BakerDelegate OnStartClip;

		[Token(Token = "0x40008C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public BakerDelegate OnUpdateClip;

		[Token(Token = "0x40008C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("If enabled, baked clips will have the same AnimationClipSettings as the clips used for baking. If disabled, clip settings from below will be applied to all the baked clips.")]
		public bool inheritClipSettings;

		[Token(Token = "0x40008C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("AnimationClipSettings applied to the baked animation clip.")]
		public ClipSettings clipSettings;

		[Token(Token = "0x40008C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		protected bool addLoopFrame;

		[Token(Token = "0x17000066")]
		public bool isBaking
		{
			[Token(Token = "0x600060C")]
			[Address(RVA = "0x104142C", Offset = "0x104142C", VA = "0x104142C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600060D")]
			[Address(RVA = "0x1041434", Offset = "0x1041434", VA = "0x1041434")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000067")]
		public float bakingProgress
		{
			[Token(Token = "0x600060E")]
			[Address(RVA = "0x1041440", Offset = "0x1041440", VA = "0x1041440")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600060F")]
			[Address(RVA = "0x1041448", Offset = "0x1041448", VA = "0x1041448")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000068")]
		protected float clipLength
		{
			[Token(Token = "0x6000615")]
			[Address(RVA = "0x1041450", Offset = "0x1041450", VA = "0x1041450")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000616")]
			[Address(RVA = "0x1041458", Offset = "0x1041458", VA = "0x1041458")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000608")]
		[Address(RVA = "0x104131C", Offset = "0x104131C", VA = "0x104131C")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000609")]
		[Address(RVA = "0x1041360", Offset = "0x1041360", VA = "0x1041360")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x600060A")]
		[Address(RVA = "0x10413A4", Offset = "0x10413A4", VA = "0x10413A4")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600060B")]
		[Address(RVA = "0x10413E8", Offset = "0x10413E8", VA = "0x10413E8")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000610")]
		protected abstract Transform GetCharacterRoot();

		[Token(Token = "0x6000611")]
		protected abstract void OnStartBaking();

		[Token(Token = "0x6000612")]
		protected abstract void OnSetLoopFrame(float time);

		[Token(Token = "0x6000613")]
		protected abstract void OnSetCurves(ref AnimationClip clip);

		[Token(Token = "0x6000614")]
		protected abstract void OnSetKeyframes(float time, bool lastFrame);

		[Token(Token = "0x6000617")]
		[Address(RVA = "0x1041460", Offset = "0x1041460", VA = "0x1041460")]
		public void BakeClip()
		{
		}

		[Token(Token = "0x6000618")]
		[Address(RVA = "0x1041464", Offset = "0x1041464", VA = "0x1041464")]
		public void StartBaking()
		{
		}

		[Token(Token = "0x6000619")]
		[Address(RVA = "0x1041468", Offset = "0x1041468", VA = "0x1041468")]
		public void StopBaking()
		{
		}

		[Token(Token = "0x600061A")]
		[Address(RVA = "0x104146C", Offset = "0x104146C", VA = "0x104146C")]
		protected Baker()
		{
		}
	}
	[Token(Token = "0x200014C")]
	public class GenericBaker : Baker
	{
		[Token(Token = "0x40008E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
		[Tooltip("If true, produced AnimationClips will be marked as Legacy and usable with the Legacy animation system.")]
		public bool markAsLegacy;

		[Token(Token = "0x40008E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Root Transform of the hierarchy to bake.")]
		public Transform root;

		[Token(Token = "0x40008E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Root Node used for root motion.")]
		public Transform rootNode;

		[Token(Token = "0x40008E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("List of Transforms to ignore, rotation curves will not be baked for these Transforms.")]
		public Transform[] ignoreList;

		[Token(Token = "0x40008E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("LocalPosition curves will be baked for these Transforms only. If you are baking a character, the pelvis bone should be added to this array.")]
		public Transform[] bakePositionList;

		[Token(Token = "0x40008E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private BakerTransform[] children;

		[Token(Token = "0x40008E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private BakerTransform rootChild;

		[Token(Token = "0x40008E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int rootChildIndex;

		[Token(Token = "0x6000620")]
		[Address(RVA = "0x1041730", Offset = "0x1041730", VA = "0x1041730")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000621")]
		[Address(RVA = "0x1041B74", Offset = "0x1041B74", VA = "0x1041B74", Slot = "4")]
		protected override Transform GetCharacterRoot()
		{
			return null;
		}

		[Token(Token = "0x6000622")]
		[Address(RVA = "0x1041B7C", Offset = "0x1041B7C", VA = "0x1041B7C", Slot = "5")]
		protected override void OnStartBaking()
		{
		}

		[Token(Token = "0x6000623")]
		[Address(RVA = "0x1041DB8", Offset = "0x1041DB8", VA = "0x1041DB8", Slot = "6")]
		protected override void OnSetLoopFrame(float time)
		{
		}

		[Token(Token = "0x6000624")]
		[Address(RVA = "0x104201C", Offset = "0x104201C", VA = "0x104201C", Slot = "7")]
		protected override void OnSetCurves(ref AnimationClip clip)
		{
		}

		[Token(Token = "0x6000625")]
		[Address(RVA = "0x1042334", Offset = "0x1042334", VA = "0x1042334", Slot = "8")]
		protected override void OnSetKeyframes(float time, bool lastFrame)
		{
		}

		[Token(Token = "0x6000626")]
		[Address(RVA = "0x104195C", Offset = "0x104195C", VA = "0x104195C")]
		private bool IsIgnored(Transform t)
		{
			return default(bool);
		}

		[Token(Token = "0x6000627")]
		[Address(RVA = "0x1041A14", Offset = "0x1041A14", VA = "0x1041A14")]
		private bool BakePosition(Transform t)
		{
			return default(bool);
		}

		[Token(Token = "0x6000628")]
		[Address(RVA = "0x1042594", Offset = "0x1042594", VA = "0x1042594")]
		public GenericBaker()
		{
		}
	}
	[Token(Token = "0x200014D")]
	public class TQ
	{
		[Token(Token = "0x40008E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 t;

		[Token(Token = "0x40008E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion q;

		[Token(Token = "0x6000629")]
		[Address(RVA = "0x10425FC", Offset = "0x10425FC", VA = "0x10425FC")]
		public TQ()
		{
		}

		[Token(Token = "0x600062A")]
		[Address(RVA = "0x1042604", Offset = "0x1042604", VA = "0x1042604")]
		public TQ(Vector3 translation, Quaternion rotation)
		{
		}
	}
	[Token(Token = "0x200014E")]
	public class AvatarUtility
	{
		[Token(Token = "0x600062B")]
		[Address(RVA = "0x1042668", Offset = "0x1042668", VA = "0x1042668")]
		public static Quaternion GetPostRotation(Avatar avatar, AvatarIKGoal avatarIKGoal)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600062C")]
		[Address(RVA = "0x10428C4", Offset = "0x10428C4", VA = "0x10428C4")]
		public static TQ GetIKGoalTQ(Avatar avatar, float humanScale, AvatarIKGoal avatarIKGoal, TQ bodyPositionRotation, TQ boneTQ)
		{
			return null;
		}

		[Token(Token = "0x600062D")]
		[Address(RVA = "0x1042F34", Offset = "0x1042F34", VA = "0x1042F34")]
		public static TQ WorldSpaceIKGoalToBone(TQ goalTQ, Avatar avatar, AvatarIKGoal avatarIKGoal)
		{
			return null;
		}

		[Token(Token = "0x600062E")]
		[Address(RVA = "0x10433FC", Offset = "0x10433FC", VA = "0x10433FC")]
		public static TQ GetWorldSpaceIKGoal(BakerHumanoidQT ikQT, BakerHumanoidQT rootQT, float time, float humanScale)
		{
			return null;
		}

		[Token(Token = "0x600062F")]
		[Address(RVA = "0x10428A4", Offset = "0x10428A4", VA = "0x10428A4")]
		public static HumanBodyBones HumanIDFromAvatarIKGoal(AvatarIKGoal avatarIKGoal)
		{
			return default(HumanBodyBones);
		}

		[Token(Token = "0x6000630")]
		[Address(RVA = "0x10435E8", Offset = "0x10435E8", VA = "0x10435E8")]
		public AvatarUtility()
		{
		}
	}
	[Token(Token = "0x200014F")]
	public static class BakerUtilities
	{
		[Token(Token = "0x6000631")]
		[Address(RVA = "0x10435F0", Offset = "0x10435F0", VA = "0x10435F0")]
		public static void ReduceKeyframes(AnimationCurve curve, float maxError)
		{
		}

		[Token(Token = "0x6000632")]
		[Address(RVA = "0x1043628", Offset = "0x1043628", VA = "0x1043628")]
		public static Keyframe[] GetReducedKeyframes(AnimationCurve curve, float maxError)
		{
			return null;
		}

		[Token(Token = "0x6000633")]
		[Address(RVA = "0x10439EC", Offset = "0x10439EC", VA = "0x10439EC")]
		public static void SetLoopFrame(float time, AnimationCurve curve)
		{
		}

		[Token(Token = "0x6000634")]
		[Address(RVA = "0x1043BCC", Offset = "0x1043BCC", VA = "0x1043BCC")]
		public static void SetTangentMode(AnimationCurve curve)
		{
		}

		[Token(Token = "0x6000635")]
		[Address(RVA = "0x1043BD0", Offset = "0x1043BD0", VA = "0x1043BD0")]
		public static Quaternion EnsureQuaternionContinuity(Quaternion lastQ, Quaternion q)
		{
			return default(Quaternion);
		}
	}
	[Serializable]
	[Token(Token = "0x2000150")]
	public class BakerHumanoidQT
	{
		[Token(Token = "0x40008EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Transform transform;

		[Token(Token = "0x40008EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string Qx;

		[Token(Token = "0x40008EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string Qy;

		[Token(Token = "0x40008ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string Qz;

		[Token(Token = "0x40008EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string Qw;

		[Token(Token = "0x40008EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string Tx;

		[Token(Token = "0x40008F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string Ty;

		[Token(Token = "0x40008F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string Tz;

		[Token(Token = "0x40008F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve rotX;

		[Token(Token = "0x40008F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AnimationCurve rotY;

		[Token(Token = "0x40008F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AnimationCurve rotZ;

		[Token(Token = "0x40008F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AnimationCurve rotW;

		[Token(Token = "0x40008F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public AnimationCurve posX;

		[Token(Token = "0x40008F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public AnimationCurve posY;

		[Token(Token = "0x40008F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public AnimationCurve posZ;

		[Token(Token = "0x40008F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private AvatarIKGoal goal;

		[Token(Token = "0x40008FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Quaternion lastQ;

		[Token(Token = "0x40008FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private bool lastQSet;

		[Token(Token = "0x6000636")]
		[Address(RVA = "0x1043D64", Offset = "0x1043D64", VA = "0x1043D64")]
		public BakerHumanoidQT(string name)
		{
		}

		[Token(Token = "0x6000637")]
		[Address(RVA = "0x10440C8", Offset = "0x10440C8", VA = "0x10440C8")]
		public BakerHumanoidQT(Transform transform, AvatarIKGoal goal, string name)
		{
		}

		[Token(Token = "0x6000638")]
		[Address(RVA = "0x10442B0", Offset = "0x10442B0", VA = "0x10442B0")]
		public Quaternion EvaluateRotation(float time)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000639")]
		[Address(RVA = "0x1044340", Offset = "0x1044340", VA = "0x1044340")]
		public Vector3 EvaluatePosition(float time)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600063A")]
		[Address(RVA = "0x1043520", Offset = "0x1043520", VA = "0x1043520")]
		public TQ Evaluate(float time)
		{
			return null;
		}

		[Token(Token = "0x600063B")]
		[Address(RVA = "0x10443B4", Offset = "0x10443B4", VA = "0x10443B4")]
		public void GetCurvesFromClip(AnimationClip clip, Animator animator)
		{
		}

		[Token(Token = "0x600063C")]
		[Address(RVA = "0x1043F30", Offset = "0x1043F30", VA = "0x1043F30")]
		public void Reset()
		{
		}

		[Token(Token = "0x600063D")]
		[Address(RVA = "0x10443B8", Offset = "0x10443B8", VA = "0x10443B8")]
		public void SetIKKeyframes(float time, Avatar avatar, Transform root, float humanScale, Vector3 bodyPosition, Quaternion bodyRotation)
		{
		}

		[Token(Token = "0x600063E")]
		[Address(RVA = "0x1044748", Offset = "0x1044748", VA = "0x1044748")]
		public void SetKeyframes(float time, Vector3 pos, Quaternion rot)
		{
		}

		[Token(Token = "0x600063F")]
		[Address(RVA = "0x1044838", Offset = "0x1044838", VA = "0x1044838")]
		public void MoveLastKeyframes(float time)
		{
		}

		[Token(Token = "0x6000640")]
		[Address(RVA = "0x104491C", Offset = "0x104491C", VA = "0x104491C")]
		public void SetLoopFrame(float time)
		{
		}

		[Token(Token = "0x6000641")]
		[Address(RVA = "0x1044984", Offset = "0x1044984", VA = "0x1044984")]
		public void SetRootLoopFrame(float time)
		{
		}

		[Token(Token = "0x6000642")]
		[Address(RVA = "0x10448A0", Offset = "0x10448A0", VA = "0x10448A0")]
		private void MoveLastKeyframe(float time, AnimationCurve curve)
		{
		}

		[Token(Token = "0x6000643")]
		[Address(RVA = "0x1044988", Offset = "0x1044988", VA = "0x1044988")]
		public void MultiplyLength(AnimationCurve curve, float mlp)
		{
		}

		[Token(Token = "0x6000644")]
		[Address(RVA = "0x1044A30", Offset = "0x1044A30", VA = "0x1044A30")]
		public void SetCurves(ref AnimationClip clip, float maxError, float lengthMlp)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000151")]
	public class BakerMuscle
	{
		[Token(Token = "0x40008FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AnimationCurve curve;

		[Token(Token = "0x40008FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int muscleIndex;

		[Token(Token = "0x40008FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string propertyName;

		[Token(Token = "0x6000645")]
		[Address(RVA = "0x1044D1C", Offset = "0x1044D1C", VA = "0x1044D1C")]
		public BakerMuscle(int muscleIndex)
		{
		}

		[Token(Token = "0x6000646")]
		[Address(RVA = "0x1044D8C", Offset = "0x1044D8C", VA = "0x1044D8C")]
		private string MuscleNameToPropertyName(string n)
		{
			return null;
		}

		[Token(Token = "0x6000647")]
		[Address(RVA = "0x1045828", Offset = "0x1045828", VA = "0x1045828")]
		public void MultiplyLength(AnimationCurve curve, float mlp)
		{
		}

		[Token(Token = "0x6000648")]
		[Address(RVA = "0x10458D0", Offset = "0x10458D0", VA = "0x10458D0")]
		public void SetCurves(ref AnimationClip clip, float maxError, float lengthMlp)
		{
		}

		[Token(Token = "0x6000649")]
		[Address(RVA = "0x10457C0", Offset = "0x10457C0", VA = "0x10457C0")]
		public void Reset()
		{
		}

		[Token(Token = "0x600064A")]
		[Address(RVA = "0x10459C4", Offset = "0x10459C4", VA = "0x10459C4")]
		public void SetKeyframe(float time, float[] muscles)
		{
		}

		[Token(Token = "0x600064B")]
		[Address(RVA = "0x1045A00", Offset = "0x1045A00", VA = "0x1045A00")]
		public void SetLoopFrame(float time)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000152")]
	public class BakerTransform
	{
		[Token(Token = "0x40008FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x4000900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve posX;

		[Token(Token = "0x4000901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve posY;

		[Token(Token = "0x4000902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve posZ;

		[Token(Token = "0x4000903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve rotX;

		[Token(Token = "0x4000904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve rotY;

		[Token(Token = "0x4000905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationCurve rotZ;

		[Token(Token = "0x4000906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AnimationCurve rotW;

		[Token(Token = "0x4000907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string relativePath;

		[Token(Token = "0x4000908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool recordPosition;

		[Token(Token = "0x4000909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 relativePosition;

		[Token(Token = "0x400090A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool isRootNode;

		[Token(Token = "0x400090B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Quaternion relativeRotation;

		[Token(Token = "0x600064C")]
		[Address(RVA = "0x1041ACC", Offset = "0x1041ACC", VA = "0x1041ACC")]
		public BakerTransform(Transform transform, Transform root, bool recordPosition, bool isRootNode)
		{
		}

		[Token(Token = "0x600064D")]
		[Address(RVA = "0x1041DA4", Offset = "0x1041DA4", VA = "0x1041DA4")]
		public void SetRelativeSpace(Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x600064E")]
		[Address(RVA = "0x1042080", Offset = "0x1042080", VA = "0x1042080")]
		public void SetCurves(ref AnimationClip clip)
		{
		}

		[Token(Token = "0x600064F")]
		[Address(RVA = "0x1045A08", Offset = "0x1045A08", VA = "0x1045A08")]
		private void AddRootMotionCurves(ref AnimationClip clip)
		{
		}

		[Token(Token = "0x6000650")]
		[Address(RVA = "0x1041C4C", Offset = "0x1041C4C", VA = "0x1041C4C")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000651")]
		[Address(RVA = "0x1045C90", Offset = "0x1045C90", VA = "0x1045C90")]
		public void ReduceKeyframes(float maxError)
		{
		}

		[Token(Token = "0x6000652")]
		[Address(RVA = "0x10423A0", Offset = "0x10423A0", VA = "0x10423A0")]
		public void SetKeyframes(float time)
		{
		}

		[Token(Token = "0x6000653")]
		[Address(RVA = "0x1041E24", Offset = "0x1041E24", VA = "0x1041E24")]
		public void AddLoopFrame(float time)
		{
		}
	}
	[Token(Token = "0x2000153")]
	public class HumanoidBaker : Baker
	{
		[Token(Token = "0x400090C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
		[Tooltip("Should the hand IK curves be added to the animation? Disable this if the original hand positions are not important when using the clip on another character via Humanoid retargeting.")]
		public bool bakeHandIK;

		[Token(Token = "0x400090D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Range(0f, 0.1f)]
		[Tooltip("Max keyframe reduction error for the Root.Q/T, LeftFoot IK and RightFoot IK channels. Having a larger error value for 'Key Reduction Error' and a smaller one for this enables you to optimize clip data size without the floating feet effect by enabling 'Foot IK' in the Animator.")]
		public float IKKeyReductionError;

		[Token(Token = "0x400090E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Range(1f, 9f)]
		[Tooltip("Frame rate divider for the muscle curves. If you have 'Frame Rate' set to 30, and this value set to 3, the muscle curves will be baked at 10 fps. Only the Root Q/T and Hand and Foot IK curves will be baked at 30. This enables you to optimize clip data size without the floating feet effect by enabling 'Foot IK' in the Animator.")]
		public int muscleFrameRateDiv;

		[Token(Token = "0x400090F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private BakerMuscle[] bakerMuscles;

		[Token(Token = "0x4000910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private BakerHumanoidQT rootQT;

		[Token(Token = "0x4000911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private BakerHumanoidQT leftFootQT;

		[Token(Token = "0x4000912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private BakerHumanoidQT rightFootQT;

		[Token(Token = "0x4000913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private BakerHumanoidQT leftHandQT;

		[Token(Token = "0x4000914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private BakerHumanoidQT rightHandQT;

		[Token(Token = "0x4000915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float[] muscles;

		[Token(Token = "0x4000916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private HumanPose pose;

		[Token(Token = "0x4000917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private HumanPoseHandler handler;

		[Token(Token = "0x4000918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Vector3 bodyPosition;

		[Token(Token = "0x4000919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private Quaternion bodyRotation;

		[Token(Token = "0x400091A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private int mN;

		[Token(Token = "0x400091B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Quaternion lastBodyRotation;

		[Token(Token = "0x6000654")]
		[Address(RVA = "0x1045CF8", Offset = "0x1045CF8", VA = "0x1045CF8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000655")]
		[Address(RVA = "0x1046258", Offset = "0x1046258", VA = "0x1046258", Slot = "4")]
		protected override Transform GetCharacterRoot()
		{
			return null;
		}

		[Token(Token = "0x6000656")]
		[Address(RVA = "0x1046274", Offset = "0x1046274", VA = "0x1046274", Slot = "5")]
		protected override void OnStartBaking()
		{
		}

		[Token(Token = "0x6000657")]
		[Address(RVA = "0x104634C", Offset = "0x104634C", VA = "0x104634C", Slot = "6")]
		protected override void OnSetLoopFrame(float time)
		{
		}

		[Token(Token = "0x6000658")]
		[Address(RVA = "0x1046408", Offset = "0x1046408", VA = "0x1046408", Slot = "7")]
		protected override void OnSetCurves(ref AnimationClip clip)
		{
		}

		[Token(Token = "0x6000659")]
		[Address(RVA = "0x10465A8", Offset = "0x10465A8", VA = "0x10465A8", Slot = "8")]
		protected override void OnSetKeyframes(float time, bool lastFrame)
		{
		}

		[Token(Token = "0x600065A")]
		[Address(RVA = "0x10468CC", Offset = "0x10468CC", VA = "0x10468CC")]
		private void UpdateHumanPose()
		{
		}

		[Token(Token = "0x600065B")]
		[Address(RVA = "0x10469AC", Offset = "0x10469AC", VA = "0x10469AC")]
		public HumanoidBaker()
		{
		}
	}
	[Token(Token = "0x2000154")]
	public class CameraController : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000155")]
		public enum UpdateMode
		{
			[Token(Token = "0x4000943")]
			Update,
			[Token(Token = "0x4000944")]
			FixedUpdate,
			[Token(Token = "0x4000945")]
			LateUpdate,
			[Token(Token = "0x4000946")]
			FixedLateUpdate
		}

		[Token(Token = "0x400091C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x400091D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform rotationSpace;

		[Token(Token = "0x400091E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UpdateMode updateMode;

		[Token(Token = "0x400091F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool lockCursor;

		[Token(Token = "0x4000920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		[Header("Position")]
		public bool smoothFollow;

		[Token(Token = "0x4000921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 offset;

		[Token(Token = "0x4000922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float followSpeed;

		[Token(Token = "0x4000923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Rotation")]
		public float rotationSensitivity;

		[Token(Token = "0x4000924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float yMinLimit;

		[Token(Token = "0x4000925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float yMaxLimit;

		[Token(Token = "0x4000926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool rotateAlways;

		[Token(Token = "0x4000927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		public bool rotateOnLeftButton;

		[Token(Token = "0x4000928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
		public bool rotateOnRightButton;

		[Token(Token = "0x4000929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F")]
		public bool rotateOnMiddleButton;

		[Token(Token = "0x400092A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Distance")]
		public float distance;

		[Token(Token = "0x400092B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float minDistance;

		[Token(Token = "0x400092C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float maxDistance;

		[Token(Token = "0x400092D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float zoomSpeed;

		[Token(Token = "0x400092E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float zoomSensitivity;

		[Token(Token = "0x400092F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Header("Blocking")]
		public LayerMask blockingLayers;

		[Token(Token = "0x4000930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float blockingRadius;

		[Token(Token = "0x4000931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float blockingSmoothTime;

		[Token(Token = "0x4000932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float blockingOriginOffset;

		[Token(Token = "0x4000933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Range(0f, 1f)]
		public float blockedOffset;

		[Token(Token = "0x4000937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 targetDistance;

		[Token(Token = "0x4000938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 position;

		[Token(Token = "0x4000939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Quaternion rotation;

		[Token(Token = "0x400093A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Vector3 smoothPosition;

		[Token(Token = "0x400093B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Camera cam;

		[Token(Token = "0x400093C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool fixedFrame;

		[Token(Token = "0x400093D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private float fixedDeltaTime;

		[Token(Token = "0x400093E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Quaternion r;

		[Token(Token = "0x400093F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Vector3 lastUp;

		[Token(Token = "0x4000940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float blockedDistance;

		[Token(Token = "0x4000941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float blockedDistanceV;

		[Token(Token = "0x17000069")]
		public float x
		{
			[Token(Token = "0x600065C")]
			[Address(RVA = "0x1046A5C", Offset = "0x1046A5C", VA = "0x1046A5C")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600065D")]
			[Address(RVA = "0x1046A64", Offset = "0x1046A64", VA = "0x1046A64")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700006A")]
		public float y
		{
			[Token(Token = "0x600065E")]
			[Address(RVA = "0x1046A6C", Offset = "0x1046A6C", VA = "0x1046A6C")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600065F")]
			[Address(RVA = "0x1046A74", Offset = "0x1046A74", VA = "0x1046A74")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700006B")]
		public float distanceTarget
		{
			[Token(Token = "0x6000660")]
			[Address(RVA = "0x1046A7C", Offset = "0x1046A7C", VA = "0x1046A7C")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000661")]
			[Address(RVA = "0x1046A84", Offset = "0x1046A84", VA = "0x1046A84")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700006C")]
		private float zoomAdd
		{
			[Token(Token = "0x600066B")]
			[Address(RVA = "0x10474EC", Offset = "0x10474EC", VA = "0x10474EC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000662")]
		[Address(RVA = "0x1046A8C", Offset = "0x1046A8C", VA = "0x1046A8C")]
		public void SetAngles(Quaternion rotation)
		{
		}

		[Token(Token = "0x6000663")]
		[Address(RVA = "0x1046AC4", Offset = "0x1046AC4", VA = "0x1046AC4")]
		public void SetAngles(float yaw, float pitch)
		{
		}

		[Token(Token = "0x6000664")]
		[Address(RVA = "0x1046ACC", Offset = "0x1046ACC", VA = "0x1046ACC", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000665")]
		[Address(RVA = "0x1046C04", Offset = "0x1046C04", VA = "0x1046C04", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000666")]
		[Address(RVA = "0x1046C4C", Offset = "0x1046C4C", VA = "0x1046C4C", Slot = "6")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000667")]
		[Address(RVA = "0x1046CA4", Offset = "0x1046CA4", VA = "0x1046CA4", Slot = "7")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6000668")]
		[Address(RVA = "0x1046CFC", Offset = "0x1046CFC", VA = "0x1046CFC")]
		public void UpdateInput()
		{
		}

		[Token(Token = "0x6000669")]
		[Address(RVA = "0x1046C30", Offset = "0x1046C30", VA = "0x1046C30")]
		public void UpdateTransform()
		{
		}

		[Token(Token = "0x600066A")]
		[Address(RVA = "0x1046E88", Offset = "0x1046E88", VA = "0x1046E88")]
		public void UpdateTransform(float deltaTime)
		{
		}

		[Token(Token = "0x600066C")]
		[Address(RVA = "0x10474B0", Offset = "0x10474B0", VA = "0x10474B0")]
		private float ClampAngle(float angle, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x600066D")]
		[Address(RVA = "0x1047558", Offset = "0x1047558", VA = "0x1047558")]
		public CameraController()
		{
		}
	}
	[Token(Token = "0x2000156")]
	public class CameraControllerFPS : MonoBehaviour
	{
		[Token(Token = "0x4000947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rotationSensitivity;

		[Token(Token = "0x4000948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float yMinLimit;

		[Token(Token = "0x4000949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float yMaxLimit;

		[Token(Token = "0x400094A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float x;

		[Token(Token = "0x400094B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float y;

		[Token(Token = "0x600066E")]
		[Address(RVA = "0x1047620", Offset = "0x1047620", VA = "0x1047620")]
		private void Awake()
		{
		}

		[Token(Token = "0x600066F")]
		[Address(RVA = "0x104764C", Offset = "0x104764C", VA = "0x104764C")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x6000670")]
		[Address(RVA = "0x1047870", Offset = "0x1047870", VA = "0x1047870")]
		private float ClampAngle(float angle, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6000671")]
		[Address(RVA = "0x10478AC", Offset = "0x10478AC", VA = "0x10478AC")]
		public CameraControllerFPS()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000157")]
	public enum Axis
	{
		[Token(Token = "0x400094D")]
		X,
		[Token(Token = "0x400094E")]
		Y,
		[Token(Token = "0x400094F")]
		Z
	}
	[Token(Token = "0x2000158")]
	public class AxisTools
	{
		[Token(Token = "0x6000672")]
		[Address(RVA = "0x10478C8", Offset = "0x10478C8", VA = "0x10478C8")]
		public static Vector3 ToVector3(Axis axis)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000673")]
		[Address(RVA = "0x10479A8", Offset = "0x10479A8", VA = "0x10479A8")]
		public static Axis ToAxis(Vector3 v)
		{
			return default(Axis);
		}

		[Token(Token = "0x6000674")]
		[Address(RVA = "0x10479E0", Offset = "0x10479E0", VA = "0x10479E0")]
		public static Axis GetAxisToPoint(Transform t, Vector3 worldPosition)
		{
			return default(Axis);
		}

		[Token(Token = "0x6000675")]
		[Address(RVA = "0x1047B28", Offset = "0x1047B28", VA = "0x1047B28")]
		public static Axis GetAxisToDirection(Transform t, Vector3 direction)
		{
			return default(Axis);
		}

		[Token(Token = "0x6000676")]
		[Address(RVA = "0x1047ADC", Offset = "0x1047ADC", VA = "0x1047ADC")]
		public static Vector3 GetAxisVectorToPoint(Transform t, Vector3 worldPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000677")]
		[Address(RVA = "0x1047C24", Offset = "0x1047C24", VA = "0x1047C24")]
		public static Vector3 GetAxisVectorToDirection(Transform t, Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000678")]
		[Address(RVA = "0x1047C68", Offset = "0x1047C68", VA = "0x1047C68")]
		public static Vector3 GetAxisVectorToDirection(Quaternion r, Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000679")]
		[Address(RVA = "0x1047F28", Offset = "0x1047F28", VA = "0x1047F28")]
		public AxisTools()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000159")]
	public class BipedLimbOrientations
	{
		[Serializable]
		[Token(Token = "0x200015A")]
		public class LimbOrientation
		{
			[Token(Token = "0x4000954")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 upperBoneForwardAxis;

			[Token(Token = "0x4000955")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 lowerBoneForwardAxis;

			[Token(Token = "0x4000956")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 lastBoneLeftAxis;

			[Token(Token = "0x600067D")]
			[Address(RVA = "0x104825C", Offset = "0x104825C", VA = "0x104825C")]
			public LimbOrientation(Vector3 upperBoneForwardAxis, Vector3 lowerBoneForwardAxis, Vector3 lastBoneLeftAxis)
			{
			}
		}

		[Token(Token = "0x4000950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LimbOrientation leftArm;

		[Token(Token = "0x4000951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LimbOrientation rightArm;

		[Token(Token = "0x4000952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LimbOrientation leftLeg;

		[Token(Token = "0x4000953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LimbOrientation rightLeg;

		[Token(Token = "0x1700006D")]
		public static BipedLimbOrientations UMA
		{
			[Token(Token = "0x600067B")]
			[Address(RVA = "0x1047FA4", Offset = "0x1047FA4", VA = "0x1047FA4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006E")]
		public static BipedLimbOrientations MaxBiped
		{
			[Token(Token = "0x600067C")]
			[Address(RVA = "0x10482D0", Offset = "0x10482D0", VA = "0x10482D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600067A")]
		[Address(RVA = "0x1047F30", Offset = "0x1047F30", VA = "0x1047F30")]
		public BipedLimbOrientations(LimbOrientation leftArm, LimbOrientation rightArm, LimbOrientation leftLeg, LimbOrientation rightLeg)
		{
		}
	}
	[Token(Token = "0x200015B")]
	public static class BipedNaming
	{
		[Serializable]
		[Token(Token = "0x200015C")]
		public enum BoneType
		{
			[Token(Token = "0x400096A")]
			Unassigned,
			[Token(Token = "0x400096B")]
			Spine,
			[Token(Token = "0x400096C")]
			Head,
			[Token(Token = "0x400096D")]
			Arm,
			[Token(Token = "0x400096E")]
			Leg,
			[Token(Token = "0x400096F")]
			Tail,
			[Token(Token = "0x4000970")]
			Eye
		}

		[Serializable]
		[Token(Token = "0x200015D")]
		public enum BoneSide
		{
			[Token(Token = "0x4000972")]
			Center,
			[Token(Token = "0x4000973")]
			Left,
			[Token(Token = "0x4000974")]
			Right
		}

		[Token(Token = "0x4000957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string[] typeLeft;

		[Token(Token = "0x4000958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string[] typeRight;

		[Token(Token = "0x4000959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static string[] typeSpine;

		[Token(Token = "0x400095A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static string[] typeHead;

		[Token(Token = "0x400095B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static string[] typeArm;

		[Token(Token = "0x400095C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static string[] typeLeg;

		[Token(Token = "0x400095D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static string[] typeTail;

		[Token(Token = "0x400095E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static string[] typeEye;

		[Token(Token = "0x400095F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static string[] typeExclude;

		[Token(Token = "0x4000960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static string[] typeExcludeSpine;

		[Token(Token = "0x4000961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static string[] typeExcludeHead;

		[Token(Token = "0x4000962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static string[] typeExcludeArm;

		[Token(Token = "0x4000963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static string[] typeExcludeLeg;

		[Token(Token = "0x4000964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static string[] typeExcludeTail;

		[Token(Token = "0x4000965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static string[] typeExcludeEye;

		[Token(Token = "0x4000966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static string[] pelvis;

		[Token(Token = "0x4000967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static string[] hand;

		[Token(Token = "0x4000968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static string[] foot;

		[Token(Token = "0x600067E")]
		[Address(RVA = "0x1048588", Offset = "0x1048588", VA = "0x1048588")]
		public static Transform[] GetBonesOfType(BoneType boneType, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x600067F")]
		[Address(RVA = "0x1048854", Offset = "0x1048854", VA = "0x1048854")]
		public static Transform[] GetBonesOfSide(BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x6000680")]
		[Address(RVA = "0x1048A90", Offset = "0x1048A90", VA = "0x1048A90")]
		public static Transform[] GetBonesOfTypeAndSide(BoneType boneType, BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x6000681")]
		[Address(RVA = "0x1048B04", Offset = "0x1048B04", VA = "0x1048B04")]
		public static Transform GetFirstBoneOfTypeAndSide(BoneType boneType, BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x6000682")]
		[Address(RVA = "0x1048B98", Offset = "0x1048B98", VA = "0x1048B98")]
		public static Transform GetNamingMatch(Transform[] transforms, params string[][] namings)
		{
			return null;
		}

		[Token(Token = "0x6000683")]
		[Address(RVA = "0x104873C", Offset = "0x104873C", VA = "0x104873C")]
		public static BoneType GetBoneType(string boneName)
		{
			return default(BoneType);
		}

		[Token(Token = "0x6000684")]
		[Address(RVA = "0x1048A08", Offset = "0x1048A08", VA = "0x1048A08")]
		public static BoneSide GetBoneSide(string boneName)
		{
			return default(BoneSide);
		}

		[Token(Token = "0x6000685")]
		[Address(RVA = "0x10492D0", Offset = "0x10492D0", VA = "0x10492D0")]
		public static Transform GetBone(Transform[] transforms, BoneType boneType, BoneSide boneSide = BoneSide.Center, params string[][] namings)
		{
			return null;
		}

		[Token(Token = "0x6000686")]
		[Address(RVA = "0x1049128", Offset = "0x1049128", VA = "0x1049128")]
		private static bool isLeft(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000687")]
		[Address(RVA = "0x10491FC", Offset = "0x10491FC", VA = "0x10491FC")]
		private static bool isRight(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000688")]
		[Address(RVA = "0x1048D80", Offset = "0x1048D80", VA = "0x1048D80")]
		private static bool isSpine(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000689")]
		[Address(RVA = "0x1048E1C", Offset = "0x1048E1C", VA = "0x1048E1C")]
		private static bool isHead(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x600068A")]
		[Address(RVA = "0x1048EB8", Offset = "0x1048EB8", VA = "0x1048EB8")]
		private static bool isArm(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x600068B")]
		[Address(RVA = "0x1048F54", Offset = "0x1048F54", VA = "0x1048F54")]
		private static bool isLeg(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x600068C")]
		[Address(RVA = "0x1048FF0", Offset = "0x1048FF0", VA = "0x1048FF0")]
		private static bool isTail(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x600068D")]
		[Address(RVA = "0x104908C", Offset = "0x104908C", VA = "0x104908C")]
		private static bool isEye(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x600068E")]
		[Address(RVA = "0x10494B8", Offset = "0x10494B8", VA = "0x10494B8")]
		private static bool isTypeExclude(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x600068F")]
		[Address(RVA = "0x1048CAC", Offset = "0x1048CAC", VA = "0x1048CAC")]
		private static bool matchesNaming(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x6000690")]
		[Address(RVA = "0x1049434", Offset = "0x1049434", VA = "0x1049434")]
		private static bool excludesNaming(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x6000691")]
		[Address(RVA = "0x1049518", Offset = "0x1049518", VA = "0x1049518")]
		private static bool matchesLastLetter(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x6000692")]
		[Address(RVA = "0x10495D8", Offset = "0x10495D8", VA = "0x10495D8")]
		private static bool LastLetterIs(string boneName, string letter)
		{
			return default(bool);
		}

		[Token(Token = "0x6000693")]
		[Address(RVA = "0x10493C0", Offset = "0x10493C0", VA = "0x10493C0")]
		private static string firstLetter(string boneName)
		{
			return null;
		}

		[Token(Token = "0x6000694")]
		[Address(RVA = "0x1049350", Offset = "0x1049350", VA = "0x1049350")]
		private static string lastLetter(string boneName)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x200015E")]
	public class BipedReferences
	{
		[Token(Token = "0x200015F")]
		public struct AutoDetectParams
		{
			[Token(Token = "0x4000986")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool legsParentInSpine;

			[Token(Token = "0x4000987")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
			public bool includeEyes;

			[Token(Token = "0x17000071")]
			public static AutoDetectParams Default
			{
				[Token(Token = "0x60006AF")]
				[Address(RVA = "0x10508B0", Offset = "0x10508B0", VA = "0x10508B0")]
				get
				{
					return default(AutoDetectParams);
				}
			}

			[Token(Token = "0x60006AE")]
			[Address(RVA = "0x105089C", Offset = "0x105089C", VA = "0x105089C")]
			public AutoDetectParams(bool legsParentInSpine, bool includeEyes)
			{
			}
		}

		[Token(Token = "0x4000975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform root;

		[Token(Token = "0x4000976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform pelvis;

		[Token(Token = "0x4000977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform leftThigh;

		[Token(Token = "0x4000978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftCalf;

		[Token(Token = "0x4000979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform leftFoot;

		[Token(Token = "0x400097A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform rightThigh;

		[Token(Token = "0x400097B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform rightCalf;

		[Token(Token = "0x400097C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform rightFoot;

		[Token(Token = "0x400097D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform leftUpperArm;

		[Token(Token = "0x400097E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform leftForearm;

		[Token(Token = "0x400097F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform leftHand;

		[Token(Token = "0x4000980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform rightUpperArm;

		[Token(Token = "0x4000981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform rightForearm;

		[Token(Token = "0x4000982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform rightHand;

		[Token(Token = "0x4000983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform head;

		[Token(Token = "0x4000984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform[] spine;

		[Token(Token = "0x4000985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Transform[] eyes;

		[Token(Token = "0x1700006F")]
		public virtual bool isFilled
		{
			[Token(Token = "0x6000696")]
			[Address(RVA = "0x104C3C8", Offset = "0x104C3C8", VA = "0x104C3C8", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000070")]
		public bool isEmpty
		{
			[Token(Token = "0x6000697")]
			[Address(RVA = "0x104C724", Offset = "0x104C724", VA = "0x104C724")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000698")]
		[Address(RVA = "0x104C734", Offset = "0x104C734", VA = "0x104C734", Slot = "5")]
		public virtual bool IsEmpty(bool includeRoot)
		{
			return default(bool);
		}

		[Token(Token = "0x6000699")]
		[Address(RVA = "0x104CAC0", Offset = "0x104CAC0", VA = "0x104CAC0", Slot = "6")]
		public virtual bool Contains(Transform t, bool ignoreRoot = false)
		{
			return default(bool);
		}

		[Token(Token = "0x600069A")]
		[Address(RVA = "0x104CE50", Offset = "0x104CE50", VA = "0x104CE50")]
		public static bool AutoDetectReferences(ref BipedReferences references, Transform root, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x600069B")]
		[Address(RVA = "0x104D57C", Offset = "0x104D57C", VA = "0x104D57C")]
		public static void DetectReferencesByNaming(ref BipedReferences references, Transform root, AutoDetectParams autoDetectParams)
		{
		}

		[Token(Token = "0x600069C")]
		[Address(RVA = "0x104D0EC", Offset = "0x104D0EC", VA = "0x104D0EC")]
		public static void AssignHumanoidReferences(ref BipedReferences references, Animator animator, AutoDetectParams autoDetectParams)
		{
		}

		[Token(Token = "0x600069D")]
		[Address(RVA = "0x104DD5C", Offset = "0x104DD5C", VA = "0x104DD5C")]
		public static bool SetupError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x600069E")]
		[Address(RVA = "0x104DE48", Offset = "0x104DE48", VA = "0x104DE48")]
		public static bool SetupWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x600069F")]
		[Address(RVA = "0x104E394", Offset = "0x104E394", VA = "0x104E394")]
		private static bool IsNeckBone(Transform bone, Transform leftUpperArm)
		{
			return default(bool);
		}

		[Token(Token = "0x60006A0")]
		[Address(RVA = "0x104E19C", Offset = "0x104E19C", VA = "0x104E19C")]
		private static bool AddBoneToEyes(Transform bone, ref BipedReferences references, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x60006A1")]
		[Address(RVA = "0x104E048", Offset = "0x104E048", VA = "0x104E048")]
		private static bool AddBoneToSpine(Transform bone, ref BipedReferences references, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x60006A2")]
		[Address(RVA = "0x104DEE4", Offset = "0x104DEE4", VA = "0x104DEE4")]
		private static void DetectLimb(BipedNaming.BoneType boneType, BipedNaming.BoneSide boneSide, ref Transform firstBone, ref Transform secondBone, ref Transform lastBone, Transform[] transforms)
		{
		}

		[Token(Token = "0x60006A3")]
		[Address(RVA = "0x104E294", Offset = "0x104E294", VA = "0x104E294")]
		private static void AddBoneToHierarchy(ref Transform[] bones, Transform transform)
		{
		}

		[Token(Token = "0x60006A4")]
		[Address(RVA = "0x104E478", Offset = "0x104E478", VA = "0x104E478")]
		private static bool LimbError(Transform bone1, Transform bone2, Transform bone3, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60006A5")]
		[Address(RVA = "0x104F034", Offset = "0x104F034", VA = "0x104F034")]
		private static bool LimbWarning(Transform bone1, Transform bone2, Transform bone3, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60006A6")]
		[Address(RVA = "0x104EAD0", Offset = "0x104EAD0", VA = "0x104EAD0")]
		private static bool SpineError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60006A7")]
		[Address(RVA = "0x104F380", Offset = "0x104F380", VA = "0x104F380")]
		private static bool SpineWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60006A8")]
		[Address(RVA = "0x104EE38", Offset = "0x104EE38", VA = "0x104EE38")]
		private static bool EyesError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60006A9")]
		[Address(RVA = "0x104F388", Offset = "0x104F388", VA = "0x104F388")]
		private static bool EyesWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60006AA")]
		[Address(RVA = "0x104F390", Offset = "0x104F390", VA = "0x104F390")]
		private static bool RootHeightWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60006AB")]
		[Address(RVA = "0x104F550", Offset = "0x104F550", VA = "0x104F550")]
		private static bool FacingAxisWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60006AC")]
		[Address(RVA = "0x104F834", Offset = "0x104F834", VA = "0x104F834")]
		private static float GetVerticalOffset(Vector3 p1, Vector3 p2, Quaternion rotation)
		{
			return default(float);
		}

		[Token(Token = "0x60006AD")]
		[Address(RVA = "0x104D06C", Offset = "0x104D06C", VA = "0x104D06C")]
		public BipedReferences()
		{
		}
	}
	[Token(Token = "0x2000160")]
	public class Comments : MonoBehaviour
	{
		[Token(Token = "0x4000988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Multiline]
		public string text;

		[Token(Token = "0x60006B0")]
		[Address(RVA = "0x10508B8", Offset = "0x10508B8", VA = "0x10508B8")]
		public Comments()
		{
		}
	}
	[Token(Token = "0x2000161")]
	public class DemoGUIMessage : MonoBehaviour
	{
		[Token(Token = "0x4000989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string text;

		[Token(Token = "0x400098A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color color;

		[Token(Token = "0x60006B1")]
		[Address(RVA = "0x10508C0", Offset = "0x10508C0", VA = "0x10508C0")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60006B2")]
		[Address(RVA = "0x10509B8", Offset = "0x10509B8", VA = "0x10509B8")]
		public DemoGUIMessage()
		{
		}
	}
	[Token(Token = "0x2000162")]
	public class Hierarchy
	{
		[Token(Token = "0x60006B3")]
		[Address(RVA = "0x10509C8", Offset = "0x10509C8", VA = "0x10509C8")]
		public static bool HierarchyIsValid(Transform[] bones)
		{
			return default(bool);
		}

		[Token(Token = "0x60006B4")]
		[Address(RVA = "0x1050B7C", Offset = "0x1050B7C", VA = "0x1050B7C")]
		public static UnityEngine.Object ContainsDuplicate(UnityEngine.Object[] objects)
		{
			return null;
		}

		[Token(Token = "0x60006B5")]
		[Address(RVA = "0x1050A4C", Offset = "0x1050A4C", VA = "0x1050A4C")]
		public static bool IsAncestor(Transform transform, Transform ancestor)
		{
			return default(bool);
		}

		[Token(Token = "0x60006B6")]
		[Address(RVA = "0x1050C88", Offset = "0x1050C88", VA = "0x1050C88")]
		public static bool ContainsChild(Transform transform, Transform child)
		{
			return default(bool);
		}

		[Token(Token = "0x60006B7")]
		[Address(RVA = "0x1050D98", Offset = "0x1050D98", VA = "0x1050D98")]
		public static void AddAncestors(Transform transform, Transform blocker, ref Transform[] array)
		{
		}

		[Token(Token = "0x60006B8")]
		[Address(RVA = "0x1050FE0", Offset = "0x1050FE0", VA = "0x1050FE0")]
		public static Transform GetAncestor(Transform transform, int minChildCount)
		{
			return null;
		}

		[Token(Token = "0x60006B9")]
		[Address(RVA = "0x10510D4", Offset = "0x10510D4", VA = "0x10510D4")]
		public static Transform GetFirstCommonAncestor(Transform t1, Transform t2)
		{
			return null;
		}

		[Token(Token = "0x60006BA")]
		[Address(RVA = "0x1051224", Offset = "0x1051224", VA = "0x1051224")]
		public static Transform GetFirstCommonAncestor(Transform[] transforms)
		{
			return null;
		}

		[Token(Token = "0x60006BB")]
		[Address(RVA = "0x1051590", Offset = "0x1051590", VA = "0x1051590")]
		public static Transform GetFirstCommonAncestorRecursive(Transform transform, Transform[] transforms)
		{
			return null;
		}

		[Token(Token = "0x60006BC")]
		[Address(RVA = "0x1051388", Offset = "0x1051388", VA = "0x1051388")]
		public static bool IsCommonAncestor(Transform transform, Transform[] transforms)
		{
			return default(bool);
		}

		[Token(Token = "0x60006BD")]
		[Address(RVA = "0x1051718", Offset = "0x1051718", VA = "0x1051718")]
		public Hierarchy()
		{
		}
	}
	[Token(Token = "0x2000163")]
	public class InspectorComment : PropertyAttribute
	{
		[Token(Token = "0x400098B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x400098C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string color;

		[Token(Token = "0x60006BE")]
		[Address(RVA = "0x1051720", Offset = "0x1051720", VA = "0x1051720")]
		public InspectorComment(string name)
		{
		}

		[Token(Token = "0x60006BF")]
		[Address(RVA = "0x10517A8", Offset = "0x10517A8", VA = "0x10517A8")]
		public InspectorComment(string name, string color)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000164")]
	public enum InterpolationMode
	{
		[Token(Token = "0x400098E")]
		None,
		[Token(Token = "0x400098F")]
		InOutCubic,
		[Token(Token = "0x4000990")]
		InOutQuintic,
		[Token(Token = "0x4000991")]
		InOutSine,
		[Token(Token = "0x4000992")]
		InQuintic,
		[Token(Token = "0x4000993")]
		InQuartic,
		[Token(Token = "0x4000994")]
		InCubic,
		[Token(Token = "0x4000995")]
		InQuadratic,
		[Token(Token = "0x4000996")]
		InElastic,
		[Token(Token = "0x4000997")]
		InElasticSmall,
		[Token(Token = "0x4000998")]
		InElasticBig,
		[Token(Token = "0x4000999")]
		InSine,
		[Token(Token = "0x400099A")]
		InBack,
		[Token(Token = "0x400099B")]
		OutQuintic,
		[Token(Token = "0x400099C")]
		OutQuartic,
		[Token(Token = "0x400099D")]
		OutCubic,
		[Token(Token = "0x400099E")]
		OutInCubic,
		[Token(Token = "0x400099F")]
		OutInQuartic,
		[Token(Token = "0x40009A0")]
		OutElastic,
		[Token(Token = "0x40009A1")]
		OutElasticSmall,
		[Token(Token = "0x40009A2")]
		OutElasticBig,
		[Token(Token = "0x40009A3")]
		OutSine,
		[Token(Token = "0x40009A4")]
		OutBack,
		[Token(Token = "0x40009A5")]
		OutBackCubic,
		[Token(Token = "0x40009A6")]
		OutBackQuartic,
		[Token(Token = "0x40009A7")]
		BackInCubic,
		[Token(Token = "0x40009A8")]
		BackInQuartic
	}
	[Token(Token = "0x2000165")]
	public class Interp
	{
		[Token(Token = "0x60006C0")]
		[Address(RVA = "0x1051834", Offset = "0x1051834", VA = "0x1051834")]
		public static float Float(float t, InterpolationMode mode)
		{
			return default(float);
		}

		[Token(Token = "0x60006C1")]
		[Address(RVA = "0x10521BC", Offset = "0x10521BC", VA = "0x10521BC")]
		public static Vector3 V3(Vector3 v1, Vector3 v2, float t, InterpolationMode mode)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006C2")]
		[Address(RVA = "0x105222C", Offset = "0x105222C", VA = "0x105222C")]
		public static float LerpValue(float value, float target, float increaseSpeed, float decreaseSpeed)
		{
			return default(float);
		}

		[Token(Token = "0x60006C3")]
		[Address(RVA = "0x1051C34", Offset = "0x1051C34", VA = "0x1051C34")]
		private static float None(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006C4")]
		[Address(RVA = "0x1051C40", Offset = "0x1051C40", VA = "0x1051C40")]
		private static float InOutCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006C5")]
		[Address(RVA = "0x1051C64", Offset = "0x1051C64", VA = "0x1051C64")]
		private static float InOutQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006C6")]
		[Address(RVA = "0x1051CA0", Offset = "0x1051CA0", VA = "0x1051CA0")]
		private static float InQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006C7")]
		[Address(RVA = "0x1051CB8", Offset = "0x1051CB8", VA = "0x1051CB8")]
		private static float InQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006C8")]
		[Address(RVA = "0x1051CCC", Offset = "0x1051CCC", VA = "0x1051CCC")]
		private static float InCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006C9")]
		[Address(RVA = "0x1051CE0", Offset = "0x1051CE0", VA = "0x1051CE0")]
		private static float InQuadratic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006CA")]
		[Address(RVA = "0x1051CF0", Offset = "0x1051CF0", VA = "0x1051CF0")]
		private static float OutQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006CB")]
		[Address(RVA = "0x1051D38", Offset = "0x1051D38", VA = "0x1051D38")]
		private static float OutQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006CC")]
		[Address(RVA = "0x1051D70", Offset = "0x1051D70", VA = "0x1051D70")]
		private static float OutCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006CD")]
		[Address(RVA = "0x1051D98", Offset = "0x1051D98", VA = "0x1051D98")]
		private static float OutInCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006CE")]
		[Address(RVA = "0x105229C", Offset = "0x105229C", VA = "0x105229C")]
		private static float OutInQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006CF")]
		[Address(RVA = "0x1051DCC", Offset = "0x1051DCC", VA = "0x1051DCC")]
		private static float BackInCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006D0")]
		[Address(RVA = "0x1051DF4", Offset = "0x1051DF4", VA = "0x1051DF4")]
		private static float BackInQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006D1")]
		[Address(RVA = "0x1051E24", Offset = "0x1051E24", VA = "0x1051E24")]
		private static float OutBackCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006D2")]
		[Address(RVA = "0x1051E58", Offset = "0x1051E58", VA = "0x1051E58")]
		private static float OutBackQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006D3")]
		[Address(RVA = "0x1051E9C", Offset = "0x1051E9C", VA = "0x1051E9C")]
		private static float OutElasticSmall(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006D4")]
		[Address(RVA = "0x1051F00", Offset = "0x1051F00", VA = "0x1051F00")]
		private static float OutElasticBig(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006D5")]
		[Address(RVA = "0x1051F64", Offset = "0x1051F64", VA = "0x1051F64")]
		private static float InElasticSmall(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006D6")]
		[Address(RVA = "0x1051FB8", Offset = "0x1051FB8", VA = "0x1051FB8")]
		private static float InElasticBig(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006D7")]
		[Address(RVA = "0x105200C", Offset = "0x105200C", VA = "0x105200C")]
		private static float InSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006D8")]
		[Address(RVA = "0x1052044", Offset = "0x1052044", VA = "0x1052044")]
		private static float OutSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006D9")]
		[Address(RVA = "0x1052078", Offset = "0x1052078", VA = "0x1052078")]
		private static float InOutSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006DA")]
		[Address(RVA = "0x10522D0", Offset = "0x10522D0", VA = "0x10522D0")]
		private static float InElastic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006DB")]
		[Address(RVA = "0x10520BC", Offset = "0x10520BC", VA = "0x10520BC")]
		private static float OutElastic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006DC")]
		[Address(RVA = "0x105214C", Offset = "0x105214C", VA = "0x105214C")]
		private static float InBack(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006DD")]
		[Address(RVA = "0x105217C", Offset = "0x105217C", VA = "0x105217C")]
		private static float OutBack(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60006DE")]
		[Address(RVA = "0x1052360", Offset = "0x1052360", VA = "0x1052360")]
		public Interp()
		{
		}
	}
	[Token(Token = "0x2000166")]
	public static class LayerMaskExtensions
	{
		[Token(Token = "0x60006DF")]
		[Address(RVA = "0x1052368", Offset = "0x1052368", VA = "0x1052368")]
		public static bool Contains(LayerMask mask, int layer)
		{
			return default(bool);
		}

		[Token(Token = "0x60006E0")]
		[Address(RVA = "0x10523B4", Offset = "0x10523B4", VA = "0x10523B4")]
		public static LayerMask Create(params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60006E1")]
		[Address(RVA = "0x1052470", Offset = "0x1052470", VA = "0x1052470")]
		public static LayerMask Create(params int[] layerNumbers)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60006E2")]
		[Address(RVA = "0x10523C8", Offset = "0x10523C8", VA = "0x10523C8")]
		public static LayerMask NamesToMask(params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60006E3")]
		[Address(RVA = "0x1052484", Offset = "0x1052484", VA = "0x1052484")]
		public static LayerMask LayerNumbersToMask(params int[] layerNumbers)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60006E4")]
		[Address(RVA = "0x1052514", Offset = "0x1052514", VA = "0x1052514")]
		public static LayerMask Inverse(this LayerMask original)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60006E5")]
		[Address(RVA = "0x105253C", Offset = "0x105253C", VA = "0x105253C")]
		public static LayerMask AddToMask(this LayerMask original, params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60006E6")]
		[Address(RVA = "0x1052588", Offset = "0x1052588", VA = "0x1052588")]
		public static LayerMask RemoveFromMask(this LayerMask original, params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60006E7")]
		[Address(RVA = "0x10525F0", Offset = "0x10525F0", VA = "0x10525F0")]
		public static string[] MaskToNames(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x60006E8")]
		[Address(RVA = "0x105274C", Offset = "0x105274C", VA = "0x105274C")]
		public static int[] MaskToNumbers(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x60006E9")]
		[Address(RVA = "0x1052884", Offset = "0x1052884", VA = "0x1052884")]
		public static string MaskToString(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x60006EA")]
		[Address(RVA = "0x10528DC", Offset = "0x10528DC", VA = "0x10528DC")]
		public static string MaskToString(this LayerMask original, string delimiter)
		{
			return null;
		}
	}
	[Token(Token = "0x2000167")]
	public abstract class LazySingleton<T> : MonoBehaviour where T : LazySingleton<T>
	{
		[Token(Token = "0x40009A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T sInstance;

		[Token(Token = "0x17000072")]
		public static bool hasInstance
		{
			[Token(Token = "0x60006EB")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000073")]
		public static T instance
		{
			[Token(Token = "0x60006EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006ED")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60006EE")]
		protected LazySingleton()
		{
		}
	}
	[Token(Token = "0x2000168")]
	public enum ShowIfMode
	{
		[Token(Token = "0x40009AB")]
		Disabled,
		[Token(Token = "0x40009AC")]
		Hidden
	}
	[Token(Token = "0x2000169")]
	[AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = true)]
	public class ShowIfAttribute : PropertyAttribute
	{
		[Token(Token = "0x17000074")]
		public string propName
		{
			[Token(Token = "0x60006EF")]
			[Address(RVA = "0x1052900", Offset = "0x1052900", VA = "0x1052900")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60006F0")]
			[Address(RVA = "0x1052908", Offset = "0x1052908", VA = "0x1052908")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x17000075")]
		public object propValue
		{
			[Token(Token = "0x60006F1")]
			[Address(RVA = "0x1052910", Offset = "0x1052910", VA = "0x1052910")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60006F2")]
			[Address(RVA = "0x1052918", Offset = "0x1052918", VA = "0x1052918")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x17000076")]
		public object otherPropValue
		{
			[Token(Token = "0x60006F3")]
			[Address(RVA = "0x1052920", Offset = "0x1052920", VA = "0x1052920")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60006F4")]
			[Address(RVA = "0x1052928", Offset = "0x1052928", VA = "0x1052928")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x17000077")]
		public bool indent
		{
			[Token(Token = "0x60006F5")]
			[Address(RVA = "0x1052930", Offset = "0x1052930", VA = "0x1052930")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60006F6")]
			[Address(RVA = "0x1052938", Offset = "0x1052938", VA = "0x1052938")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000078")]
		public ShowIfMode mode
		{
			[Token(Token = "0x60006F7")]
			[Address(RVA = "0x1052944", Offset = "0x1052944", VA = "0x1052944")]
			[CompilerGenerated]
			get
			{
				return default(ShowIfMode);
			}
			[Token(Token = "0x60006F8")]
			[Address(RVA = "0x105294C", Offset = "0x105294C", VA = "0x105294C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x60006F9")]
		[Address(RVA = "0x1052954", Offset = "0x1052954", VA = "0x1052954")]
		public ShowIfAttribute(string propertyName, [Optional] object propertyValue, [Optional] object otherPropertyValue, bool indent = false, ShowIfMode mode = ShowIfMode.Hidden)
		{
		}
	}
	[Token(Token = "0x200016A")]
	[AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = true)]
	public class ShowRangeIfAttribute : ShowIfAttribute
	{
		[Token(Token = "0x17000079")]
		public float min
		{
			[Token(Token = "0x60006FA")]
			[Address(RVA = "0x10529D4", Offset = "0x10529D4", VA = "0x10529D4")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60006FB")]
			[Address(RVA = "0x10529DC", Offset = "0x10529DC", VA = "0x10529DC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700007A")]
		public float max
		{
			[Token(Token = "0x60006FC")]
			[Address(RVA = "0x10529E4", Offset = "0x10529E4", VA = "0x10529E4")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60006FD")]
			[Address(RVA = "0x10529EC", Offset = "0x10529EC", VA = "0x10529EC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60006FE")]
		[Address(RVA = "0x10529F4", Offset = "0x10529F4", VA = "0x10529F4")]
		public ShowRangeIfAttribute(float min, float max, string propertyName, [Optional] object propertyValue, [Optional] object otherPropertyValue, bool indent = false, ShowIfMode mode = ShowIfMode.Hidden)
		{
		}
	}
	[Token(Token = "0x200016B")]
	public class ShowLargeHeaderIf : ShowIfAttribute
	{
		[Token(Token = "0x40009B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string name;

		[Token(Token = "0x40009B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string color;

		[Token(Token = "0x60006FF")]
		[Address(RVA = "0x1052A20", Offset = "0x1052A20", VA = "0x1052A20")]
		public ShowLargeHeaderIf(string name, string propertyName, [Optional] object propertyValue, [Optional] object otherPropertyValue, bool indent = false, ShowIfMode mode = ShowIfMode.Hidden)
		{
		}

		[Token(Token = "0x6000700")]
		[Address(RVA = "0x1052ADC", Offset = "0x1052ADC", VA = "0x1052ADC")]
		public ShowLargeHeaderIf(string name, string color, string propertyName, [Optional] object propertyValue, [Optional] object otherPropertyValue, bool indent = false, ShowIfMode mode = ShowIfMode.Hidden)
		{
		}
	}
	[Token(Token = "0x200016C")]
	public class LargeHeader : PropertyAttribute
	{
		[Token(Token = "0x40009B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x40009B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string color;

		[Token(Token = "0x6000701")]
		[Address(RVA = "0x1052BA4", Offset = "0x1052BA4", VA = "0x1052BA4")]
		public LargeHeader(string name)
		{
		}

		[Token(Token = "0x6000702")]
		[Address(RVA = "0x1052C2C", Offset = "0x1052C2C", VA = "0x1052C2C")]
		public LargeHeader(string name, string color)
		{
		}
	}
	[Token(Token = "0x200016D")]
	public static class QuaTools
	{
		[Token(Token = "0x6000703")]
		[Address(RVA = "0x1052CB8", Offset = "0x1052CB8", VA = "0x1052CB8")]
		public static float GetYaw(Quaternion space, Vector3 forward)
		{
			return default(float);
		}

		[Token(Token = "0x6000704")]
		[Address(RVA = "0x1052D10", Offset = "0x1052D10", VA = "0x1052D10")]
		public static float GetPitch(Quaternion space, Vector3 forward)
		{
			return default(float);
		}

		[Token(Token = "0x6000705")]
		[Address(RVA = "0x1052E40", Offset = "0x1052E40", VA = "0x1052E40")]
		public static float GetBank(Quaternion space, Vector3 forward, Vector3 up)
		{
			return default(float);
		}

		[Token(Token = "0x6000706")]
		[Address(RVA = "0x1052FC0", Offset = "0x1052FC0", VA = "0x1052FC0")]
		public static float GetYaw(Quaternion space, Quaternion rotation)
		{
			return default(float);
		}

		[Token(Token = "0x6000707")]
		[Address(RVA = "0x105309C", Offset = "0x105309C", VA = "0x105309C")]
		public static float GetPitch(Quaternion space, Quaternion rotation)
		{
			return default(float);
		}

		[Token(Token = "0x6000708")]
		[Address(RVA = "0x1053178", Offset = "0x1053178", VA = "0x1053178")]
		public static float GetBank(Quaternion space, Quaternion rotation)
		{
			return default(float);
		}

		[Token(Token = "0x6000709")]
		[Address(RVA = "0x1053390", Offset = "0x1053390", VA = "0x1053390")]
		public static Quaternion Lerp(Quaternion fromRotation, Quaternion toRotation, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600070A")]
		[Address(RVA = "0x10533DC", Offset = "0x10533DC", VA = "0x10533DC")]
		public static Quaternion Slerp(Quaternion fromRotation, Quaternion toRotation, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600070B")]
		[Address(RVA = "0x1053428", Offset = "0x1053428", VA = "0x1053428")]
		public static Quaternion LinearBlend(Quaternion q, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600070C")]
		[Address(RVA = "0x105352C", Offset = "0x105352C", VA = "0x105352C")]
		public static Quaternion SphericalBlend(Quaternion q, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600070D")]
		[Address(RVA = "0x1053630", Offset = "0x1053630", VA = "0x1053630")]
		public static Quaternion FromToAroundAxis(Vector3 fromDirection, Vector3 toDirection, Vector3 axis)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600070E")]
		[Address(RVA = "0x1053744", Offset = "0x1053744", VA = "0x1053744")]
		public static Quaternion RotationToLocalSpace(Quaternion space, Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600070F")]
		[Address(RVA = "0x10537EC", Offset = "0x10537EC", VA = "0x10537EC")]
		public static Quaternion FromToRotation(Quaternion from, Quaternion to)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000710")]
		[Address(RVA = "0x10538F8", Offset = "0x10538F8", VA = "0x10538F8")]
		public static Vector3 GetAxis(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000711")]
		[Address(RVA = "0x1053A60", Offset = "0x1053A60", VA = "0x1053A60")]
		public static Quaternion ClampRotation(Quaternion rotation, float clampWeight, int clampSmoothing)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000712")]
		[Address(RVA = "0x1053C44", Offset = "0x1053C44", VA = "0x1053C44")]
		public static float ClampAngle(float angle, float clampWeight, int clampSmoothing)
		{
			return default(float);
		}

		[Token(Token = "0x6000713")]
		[Address(RVA = "0x1053D14", Offset = "0x1053D14", VA = "0x1053D14")]
		public static Quaternion MatchRotation(Quaternion targetRotation, Vector3 targetAxis1, Vector3 targetAxis2, Vector3 axis1, Vector3 axis2)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000714")]
		[Address(RVA = "0x1053E98", Offset = "0x1053E98", VA = "0x1053E98")]
		public static Vector3 ToBiPolar(Vector3 euler)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000715")]
		[Address(RVA = "0x1053FA4", Offset = "0x1053FA4", VA = "0x1053FA4")]
		public static float ToBiPolar(float angle)
		{
			return default(float);
		}

		[Token(Token = "0x6000716")]
		[Address(RVA = "0x1053FFC", Offset = "0x1053FFC", VA = "0x1053FFC")]
		public static Quaternion MirrorYZ(Quaternion r, Quaternion space)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000717")]
		[Address(RVA = "0x1054220", Offset = "0x1054220", VA = "0x1054220")]
		public static Quaternion MirrorYZ(Quaternion r)
		{
			return default(Quaternion);
		}
	}
	[Token(Token = "0x200016E")]
	public abstract class Singleton<T> : MonoBehaviour where T : Singleton<T>
	{
		[Token(Token = "0x40009B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T sInstance;

		[Token(Token = "0x1700007B")]
		public static T instance
		{
			[Token(Token = "0x6000718")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000719")]
		public static void Clear()
		{
		}

		[Token(Token = "0x600071A")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x600071B")]
		protected Singleton()
		{
		}
	}
	[Token(Token = "0x200016F")]
	public class SolverManager : MonoBehaviour
	{
		[Token(Token = "0x40009B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If true, will fix all the Transforms used by the solver to their initial state in each Update. This prevents potential problems with unanimated bones and animator culling with a small cost of performance. Not recommended for CCD and FABRIK solvers.")]
		public bool fixTransforms;

		[Token(Token = "0x40009BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator animator;

		[Token(Token = "0x40009BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Animation legacy;

		[Token(Token = "0x40009BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool updateFrame;

		[Token(Token = "0x40009BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool componentInitiated;

		[Token(Token = "0x40009BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool skipSolverUpdate;

		[Token(Token = "0x1700007C")]
		private bool animatePhysics
		{
			[Token(Token = "0x6000722")]
			[Address(RVA = "0x1054444", Offset = "0x1054444", VA = "0x1054444")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700007D")]
		private bool isAnimated
		{
			[Token(Token = "0x6000726")]
			[Address(RVA = "0x1054740", Offset = "0x1054740", VA = "0x1054740")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600071C")]
		[Address(RVA = "0x1054328", Offset = "0x1054328", VA = "0x1054328")]
		public void Disable()
		{
		}

		[Token(Token = "0x600071D")]
		[Address(RVA = "0x10543BC", Offset = "0x10543BC", VA = "0x10543BC", Slot = "4")]
		protected virtual void InitiateSolver()
		{
		}

		[Token(Token = "0x600071E")]
		[Address(RVA = "0x10543C0", Offset = "0x10543C0", VA = "0x10543C0", Slot = "5")]
		protected virtual void UpdateSolver()
		{
		}

		[Token(Token = "0x600071F")]
		[Address(RVA = "0x10543C4", Offset = "0x10543C4", VA = "0x10543C4", Slot = "6")]
		protected virtual void FixTransforms()
		{
		}

		[Token(Token = "0x6000720")]
		[Address(RVA = "0x10543C8", Offset = "0x10543C8", VA = "0x10543C8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000721")]
		[Address(RVA = "0x1054440", Offset = "0x1054440", VA = "0x1054440")]
		private void Start()
		{
		}

		[Token(Token = "0x6000723")]
		[Address(RVA = "0x10543F0", Offset = "0x10543F0", VA = "0x10543F0")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6000724")]
		[Address(RVA = "0x1054704", Offset = "0x1054704", VA = "0x1054704")]
		private void Update()
		{
		}

		[Token(Token = "0x6000725")]
		[Address(RVA = "0x1054510", Offset = "0x1054510", VA = "0x1054510")]
		private void FindAnimatorRecursive(Transform t, bool findInChildren)
		{
		}

		[Token(Token = "0x6000727")]
		[Address(RVA = "0x10547D8", Offset = "0x10547D8", VA = "0x10547D8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000728")]
		[Address(RVA = "0x1054824", Offset = "0x1054824", VA = "0x1054824")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000729")]
		[Address(RVA = "0x1054870", Offset = "0x1054870", VA = "0x1054870")]
		public void UpdateSolverExternal()
		{
		}

		[Token(Token = "0x600072A")]
		[Address(RVA = "0x10548A8", Offset = "0x10548A8", VA = "0x10548A8")]
		public SolverManager()
		{
		}
	}
	[Token(Token = "0x2000170")]
	public class TriggerEventBroadcaster : MonoBehaviour
	{
		[Token(Token = "0x40009BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject target;

		[Token(Token = "0x600072B")]
		[Address(RVA = "0x10548B8", Offset = "0x10548B8", VA = "0x10548B8")]
		private void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x600072C")]
		[Address(RVA = "0x105496C", Offset = "0x105496C", VA = "0x105496C")]
		private void OnTriggerStay(Collider collider)
		{
		}

		[Token(Token = "0x600072D")]
		[Address(RVA = "0x1054A20", Offset = "0x1054A20", VA = "0x1054A20")]
		private void OnTriggerExit(Collider collider)
		{
		}

		[Token(Token = "0x600072E")]
		[Address(RVA = "0x1054AD4", Offset = "0x1054AD4", VA = "0x1054AD4")]
		public TriggerEventBroadcaster()
		{
		}
	}
	[Token(Token = "0x2000171")]
	public static class V2Tools
	{
		[Token(Token = "0x600072F")]
		[Address(RVA = "0x1054ADC", Offset = "0x1054ADC", VA = "0x1054ADC")]
		public static Vector2 XZ(Vector3 v)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000730")]
		[Address(RVA = "0x1054AE4", Offset = "0x1054AE4", VA = "0x1054AE4")]
		public static float DeltaAngle(Vector2 dir1, Vector2 dir2)
		{
			return default(float);
		}

		[Token(Token = "0x6000731")]
		[Address(RVA = "0x1054B74", Offset = "0x1054B74", VA = "0x1054B74")]
		public static float DeltaAngleXZ(Vector3 dir1, Vector3 dir2)
		{
			return default(float);
		}

		[Token(Token = "0x6000732")]
		[Address(RVA = "0x1054C08", Offset = "0x1054C08", VA = "0x1054C08")]
		public static bool LineCircleIntersect(Vector2 p1, Vector2 p2, Vector2 c, float r)
		{
			return default(bool);
		}

		[Token(Token = "0x6000733")]
		[Address(RVA = "0x1054CB8", Offset = "0x1054CB8", VA = "0x1054CB8")]
		public static bool RayCircleIntersect(Vector2 p1, Vector2 dir, Vector2 c, float r)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000172")]
	public static class V3Tools
	{
		[Token(Token = "0x6000734")]
		[Address(RVA = "0x1054D14", Offset = "0x1054D14", VA = "0x1054D14")]
		public static float GetYaw(Vector3 forward)
		{
			return default(float);
		}

		[Token(Token = "0x6000735")]
		[Address(RVA = "0x1054D34", Offset = "0x1054D34", VA = "0x1054D34")]
		public static float GetPitch(Vector3 forward)
		{
			return default(float);
		}

		[Token(Token = "0x6000736")]
		[Address(RVA = "0x1054E08", Offset = "0x1054E08", VA = "0x1054E08")]
		public static float GetBank(Vector3 forward, Vector3 up)
		{
			return default(float);
		}

		[Token(Token = "0x6000737")]
		[Address(RVA = "0x1054EC0", Offset = "0x1054EC0", VA = "0x1054EC0")]
		public static float GetYaw(Vector3 spaceForward, Vector3 spaceUp, Vector3 forward)
		{
			return default(float);
		}

		[Token(Token = "0x6000738")]
		[Address(RVA = "0x1054F1C", Offset = "0x1054F1C", VA = "0x1054F1C")]
		public static float GetPitch(Vector3 spaceForward, Vector3 spaceUp, Vector3 forward)
		{
			return default(float);
		}

		[Token(Token = "0x6000739")]
		[Address(RVA = "0x1054F78", Offset = "0x1054F78", VA = "0x1054F78")]
		public static float GetBank(Vector3 spaceForward, Vector3 spaceUp, Vector3 forward, Vector3 up)
		{
			return default(float);
		}

		[Token(Token = "0x600073A")]
		[Address(RVA = "0x1055090", Offset = "0x1055090", VA = "0x1055090")]
		public static Vector3 Lerp(Vector3 fromVector, Vector3 toVector, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600073B")]
		[Address(RVA = "0x10550EC", Offset = "0x10550EC", VA = "0x10550EC")]
		public static Vector3 Slerp(Vector3 fromVector, Vector3 toVector, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600073C")]
		[Address(RVA = "0x1055124", Offset = "0x1055124", VA = "0x1055124")]
		public static Vector3 ExtractVertical(Vector3 v, Vector3 verticalAxis, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600073D")]
		[Address(RVA = "0x10552F4", Offset = "0x10552F4", VA = "0x10552F4")]
		public static Vector3 ExtractHorizontal(Vector3 v, Vector3 normal, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600073E")]
		[Address(RVA = "0x10554F8", Offset = "0x10554F8", VA = "0x10554F8")]
		public static Vector3 Flatten(Vector3 v, Vector3 normal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600073F")]
		[Address(RVA = "0x1055670", Offset = "0x1055670", VA = "0x1055670")]
		public static Vector3 ClampDirection(Vector3 direction, Vector3 normalDirection, float clampWeight, int clampSmoothing)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000740")]
		[Address(RVA = "0x10558A0", Offset = "0x10558A0", VA = "0x10558A0")]
		public static Vector3 ClampDirection(Vector3 direction, Vector3 normalDirection, float clampWeight, int clampSmoothing, out bool changed)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000741")]
		[Address(RVA = "0x1055AF0", Offset = "0x1055AF0", VA = "0x1055AF0")]
		public static Vector3 ClampDirection(Vector3 direction, Vector3 normalDirection, float clampWeight, int clampSmoothing, out float clampValue)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000742")]
		[Address(RVA = "0x1055D48", Offset = "0x1055D48", VA = "0x1055D48")]
		public static Vector3 LineToPlane(Vector3 origin, Vector3 direction, Vector3 planeNormal, Vector3 planePoint)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000743")]
		[Address(RVA = "0x1055EF4", Offset = "0x1055EF4", VA = "0x1055EF4")]
		public static Vector3 PointToPlane(Vector3 point, Vector3 planePosition, Vector3 planeNormal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000744")]
		[Address(RVA = "0x10560EC", Offset = "0x10560EC", VA = "0x10560EC")]
		public static Vector3 TransformPointUnscaled(Transform t, Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000745")]
		[Address(RVA = "0x1056168", Offset = "0x1056168", VA = "0x1056168")]
		public static Vector3 InverseTransformPointUnscaled(Transform t, Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000746")]
		[Address(RVA = "0x10561F8", Offset = "0x10561F8", VA = "0x10561F8")]
		public static Vector3 InverseTransformPoint(Vector3 tPos, Quaternion tRot, Vector3 tScale, Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000747")]
		[Address(RVA = "0x1056290", Offset = "0x1056290", VA = "0x1056290")]
		public static Vector3 TransformPoint(Vector3 tPos, Quaternion tRot, Vector3 tScale, Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000748")]
		[Address(RVA = "0x1056280", Offset = "0x1056280", VA = "0x1056280")]
		public static Vector3 Div(Vector3 v1, Vector3 v2)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000173")]
	public static class Warning
	{
		[Token(Token = "0x2000174")]
		public delegate void Logger(string message);

		[Token(Token = "0x40009C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool logged;

		[Token(Token = "0x6000749")]
		[Address(RVA = "0x105630C", Offset = "0x105630C", VA = "0x105630C")]
		public static void Log(string message, Logger logger, bool logInEditMode = false)
		{
		}

		[Token(Token = "0x600074A")]
		[Address(RVA = "0x10563A4", Offset = "0x10563A4", VA = "0x10563A4")]
		public static void Log(string message, Transform context, bool logInEditMode = false)
		{
		}
	}
}
namespace RootMotion.FinalIK
{
	[Token(Token = "0x2000175")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page4.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Biped IK")]
	public class BipedIK : SolverManager
	{
		[Token(Token = "0x40009C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BipedReferences references;

		[Token(Token = "0x40009C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public BipedIKSolvers solvers;

		[Token(Token = "0x600074F")]
		[Address(RVA = "0x105657C", Offset = "0x105657C", VA = "0x105657C")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000750")]
		[Address(RVA = "0x10565C0", Offset = "0x10565C0", VA = "0x10565C0")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000751")]
		[Address(RVA = "0x1056604", Offset = "0x1056604", VA = "0x1056604")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000752")]
		[Address(RVA = "0x1056648", Offset = "0x1056648", VA = "0x1056648")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000753")]
		[Address(RVA = "0x105668C", Offset = "0x105668C", VA = "0x105668C")]
		public float GetIKPositionWeight(AvatarIKGoal goal)
		{
			return default(float);
		}

		[Token(Token = "0x6000754")]
		[Address(RVA = "0x1056724", Offset = "0x1056724", VA = "0x1056724")]
		public float GetIKRotationWeight(AvatarIKGoal goal)
		{
			return default(float);
		}

		[Token(Token = "0x6000755")]
		[Address(RVA = "0x1056740", Offset = "0x1056740", VA = "0x1056740")]
		public void SetIKPositionWeight(AvatarIKGoal goal, float weight)
		{
		}

		[Token(Token = "0x6000756")]
		[Address(RVA = "0x105676C", Offset = "0x105676C", VA = "0x105676C")]
		public void SetIKRotationWeight(AvatarIKGoal goal, float weight)
		{
		}

		[Token(Token = "0x6000757")]
		[Address(RVA = "0x1056798", Offset = "0x1056798", VA = "0x1056798")]
		public void SetIKPosition(AvatarIKGoal goal, Vector3 IKPosition)
		{
		}

		[Token(Token = "0x6000758")]
		[Address(RVA = "0x10567D4", Offset = "0x10567D4", VA = "0x10567D4")]
		public void SetIKRotation(AvatarIKGoal goal, Quaternion IKRotation)
		{
		}

		[Token(Token = "0x6000759")]
		[Address(RVA = "0x1056814", Offset = "0x1056814", VA = "0x1056814")]
		public Vector3 GetIKPosition(AvatarIKGoal goal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600075A")]
		[Address(RVA = "0x1056834", Offset = "0x1056834", VA = "0x1056834")]
		public Quaternion GetIKRotation(AvatarIKGoal goal)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600075B")]
		[Address(RVA = "0x1056854", Offset = "0x1056854", VA = "0x1056854")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight, float clampWeightHead, float clampWeightEyes)
		{
		}

		[Token(Token = "0x600075C")]
		[Address(RVA = "0x1056878", Offset = "0x1056878", VA = "0x1056878")]
		public void SetLookAtPosition(Vector3 lookAtPosition)
		{
		}

		[Token(Token = "0x600075D")]
		[Address(RVA = "0x10568A0", Offset = "0x10568A0", VA = "0x10568A0")]
		public void SetSpinePosition(Vector3 spinePosition)
		{
		}

		[Token(Token = "0x600075E")]
		[Address(RVA = "0x10568C8", Offset = "0x10568C8", VA = "0x10568C8")]
		public void SetSpineWeight(float weight)
		{
		}

		[Token(Token = "0x600075F")]
		[Address(RVA = "0x10566A8", Offset = "0x10566A8", VA = "0x10566A8")]
		public IKSolverLimb GetGoalIK(AvatarIKGoal goal)
		{
			return null;
		}

		[Token(Token = "0x6000760")]
		[Address(RVA = "0x10568EC", Offset = "0x10568EC", VA = "0x10568EC")]
		public void InitiateBipedIK()
		{
		}

		[Token(Token = "0x6000761")]
		[Address(RVA = "0x10568F8", Offset = "0x10568F8", VA = "0x10568F8")]
		public void UpdateBipedIK()
		{
		}

		[Token(Token = "0x6000762")]
		[Address(RVA = "0x1056904", Offset = "0x1056904", VA = "0x1056904")]
		public void SetToDefaults()
		{
		}

		[Token(Token = "0x6000763")]
		[Address(RVA = "0x1056BB8", Offset = "0x1056BB8", VA = "0x1056BB8", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x6000764")]
		[Address(RVA = "0x1056C54", Offset = "0x1056C54", VA = "0x1056C54", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6000765")]
		[Address(RVA = "0x1056F7C", Offset = "0x1056F7C", VA = "0x1056F7C", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x6000766")]
		[Address(RVA = "0x10573E8", Offset = "0x10573E8", VA = "0x10573E8")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x6000767")]
		[Address(RVA = "0x105740C", Offset = "0x105740C", VA = "0x105740C")]
		public BipedIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000176")]
	public class BipedIKSolvers
	{
		[Token(Token = "0x40009C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IKSolverLimb leftFoot;

		[Token(Token = "0x40009C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IKSolverLimb rightFoot;

		[Token(Token = "0x40009C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IKSolverLimb leftHand;

		[Token(Token = "0x40009C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IKSolverLimb rightHand;

		[Token(Token = "0x40009C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IKSolverFABRIK spine;

		[Token(Token = "0x40009C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLookAt lookAt;

		[Token(Token = "0x40009C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IKSolverAim aim;

		[Token(Token = "0x40009CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Constraints pelvis;

		[Token(Token = "0x40009CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IKSolverLimb[] _limbs;

		[Token(Token = "0x40009CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private IKSolver[] _ikSolvers;

		[Token(Token = "0x1700007E")]
		public IKSolverLimb[] limbs
		{
			[Token(Token = "0x6000768")]
			[Address(RVA = "0x1056A40", Offset = "0x1056A40", VA = "0x1056A40")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007F")]
		public IKSolver[] ikSolvers
		{
			[Token(Token = "0x6000769")]
			[Address(RVA = "0x10576AC", Offset = "0x10576AC", VA = "0x10576AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600076A")]
		[Address(RVA = "0x1056E08", Offset = "0x1056E08", VA = "0x1056E08")]
		public void AssignReferences(BipedReferences references)
		{
		}

		[Token(Token = "0x600076B")]
		[Address(RVA = "0x10574C0", Offset = "0x10574C0", VA = "0x10574C0")]
		public BipedIKSolvers()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000177")]
	public abstract class Constraint
	{
		[Token(Token = "0x40009CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x40009CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float weight;

		[Token(Token = "0x17000080")]
		public bool isValid
		{
			[Token(Token = "0x600076C")]
			[Address(RVA = "0x10578D4", Offset = "0x10578D4", VA = "0x10578D4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600076D")]
		public abstract void UpdateConstraint();

		[Token(Token = "0x600076E")]
		[Address(RVA = "0x1057934", Offset = "0x1057934", VA = "0x1057934")]
		protected Constraint()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000178")]
	public class ConstraintPosition : Constraint
	{
		[Token(Token = "0x40009CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 position;

		[Token(Token = "0x600076F")]
		[Address(RVA = "0x105793C", Offset = "0x105793C", VA = "0x105793C", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x6000770")]
		[Address(RVA = "0x10579D4", Offset = "0x10579D4", VA = "0x10579D4")]
		public ConstraintPosition()
		{
		}

		[Token(Token = "0x6000771")]
		[Address(RVA = "0x10579DC", Offset = "0x10579DC", VA = "0x10579DC")]
		public ConstraintPosition(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000179")]
	public class ConstraintPositionOffset : Constraint
	{
		[Token(Token = "0x40009D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 offset;

		[Token(Token = "0x40009D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 defaultLocalPosition;

		[Token(Token = "0x40009D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 lastLocalPosition;

		[Token(Token = "0x40009D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool initiated;

		[Token(Token = "0x17000081")]
		private bool positionChanged
		{
			[Token(Token = "0x6000775")]
			[Address(RVA = "0x1057B10", Offset = "0x1057B10", VA = "0x1057B10")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000772")]
		[Address(RVA = "0x1057A0C", Offset = "0x1057A0C", VA = "0x1057A0C", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x6000773")]
		[Address(RVA = "0x1057B6C", Offset = "0x1057B6C", VA = "0x1057B6C")]
		public ConstraintPositionOffset()
		{
		}

		[Token(Token = "0x6000774")]
		[Address(RVA = "0x1057B74", Offset = "0x1057B74", VA = "0x1057B74")]
		public ConstraintPositionOffset(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200017A")]
	public class ConstraintRotation : Constraint
	{
		[Token(Token = "0x40009D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion rotation;

		[Token(Token = "0x6000776")]
		[Address(RVA = "0x1057BA4", Offset = "0x1057BA4", VA = "0x1057BA4", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x6000777")]
		[Address(RVA = "0x1057C20", Offset = "0x1057C20", VA = "0x1057C20")]
		public ConstraintRotation()
		{
		}

		[Token(Token = "0x6000778")]
		[Address(RVA = "0x1057C28", Offset = "0x1057C28", VA = "0x1057C28")]
		public ConstraintRotation(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200017B")]
	public class ConstraintRotationOffset : Constraint
	{
		[Token(Token = "0x40009D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion offset;

		[Token(Token = "0x40009D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion defaultRotation;

		[Token(Token = "0x40009D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion defaultLocalRotation;

		[Token(Token = "0x40009D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion lastLocalRotation;

		[Token(Token = "0x40009D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Quaternion defaultTargetLocalRotation;

		[Token(Token = "0x40009DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool initiated;

		[Token(Token = "0x17000082")]
		private bool rotationChanged
		{
			[Token(Token = "0x600077C")]
			[Address(RVA = "0x1057D5C", Offset = "0x1057D5C", VA = "0x1057D5C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000779")]
		[Address(RVA = "0x1057C58", Offset = "0x1057C58", VA = "0x1057C58", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x600077A")]
		[Address(RVA = "0x1057DB4", Offset = "0x1057DB4", VA = "0x1057DB4")]
		public ConstraintRotationOffset()
		{
		}

		[Token(Token = "0x600077B")]
		[Address(RVA = "0x1057DBC", Offset = "0x1057DBC", VA = "0x1057DBC")]
		public ConstraintRotationOffset(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200017C")]
	public class Constraints
	{
		[Token(Token = "0x40009DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x40009DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x40009DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 positionOffset;

		[Token(Token = "0x40009DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 position;

		[Token(Token = "0x40009DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 1f)]
		public float positionWeight;

		[Token(Token = "0x40009E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 rotationOffset;

		[Token(Token = "0x40009E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 rotation;

		[Token(Token = "0x40009E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Range(0f, 1f)]
		public float rotationWeight;

		[Token(Token = "0x600077D")]
		[Address(RVA = "0x1057DEC", Offset = "0x1057DEC", VA = "0x1057DEC")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x600077E")]
		[Address(RVA = "0x1056F28", Offset = "0x1056F28", VA = "0x1056F28")]
		public void Initiate(Transform transform)
		{
		}

		[Token(Token = "0x600077F")]
		[Address(RVA = "0x10570F0", Offset = "0x10570F0", VA = "0x10570F0")]
		public void Update()
		{
		}

		[Token(Token = "0x6000780")]
		[Address(RVA = "0x10578CC", Offset = "0x10578CC", VA = "0x10578CC")]
		public Constraints()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200017D")]
	public class Finger
	{
		[Serializable]
		[Token(Token = "0x200017E")]
		public enum DOF
		{
			[Token(Token = "0x40009F6")]
			One,
			[Token(Token = "0x40009F7")]
			Three
		}

		[Token(Token = "0x40009E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Range(0f, 1f)]
		[Tooltip("Master Weight for the finger.")]
		public float weight;

		[Token(Token = "0x40009E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Tooltip("The weight of rotating the finger tip and bending the finger to the target.")]
		[Range(0f, 1f)]
		public float rotationWeight;

		[Token(Token = "0x40009E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Rotational degrees of freedom. When set to 'One' the fingers will be able to be rotated only around a single axis. When 3, all 3 axes are free to rotate around.")]
		public DOF rotationDOF;

		[Token(Token = "0x40009E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("If enabled, keeps bone1 twist angle fixed relative to bone2.")]
		public bool fixBone1Twist;

		[Token(Token = "0x40009E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The first bone of the finger.")]
		public Transform bone1;

		[Token(Token = "0x40009E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The second bone of the finger.")]
		public Transform bone2;

		[Token(Token = "0x40009E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The (optional) third bone of the finger. This can be ignored for thumbs.")]
		public Transform bone3;

		[Token(Token = "0x40009EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The fingertip object. If your character doesn't have tip bones, you can create an empty GameObject and parent it to the last bone in the finger. Place it to the tip of the finger.")]
		public Transform tip;

		[Token(Token = "0x40009EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The IK target (optional, can use IKPosition and IKRotation directly).")]
		public Transform target;

		[Token(Token = "0x40009ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IKSolverLimb solver;

		[Token(Token = "0x40009EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion bone3RelativeToTarget;

		[Token(Token = "0x40009EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 bone3DefaultLocalPosition;

		[Token(Token = "0x40009F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Quaternion bone3DefaultLocalRotation;

		[Token(Token = "0x40009F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 bone1Axis;

		[Token(Token = "0x40009F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 tipAxis;

		[Token(Token = "0x40009F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Vector3 bone1TwistAxis;

		[Token(Token = "0x40009F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3 defaultBendNormal;

		[Token(Token = "0x17000083")]
		public bool initiated
		{
			[Token(Token = "0x6000781")]
			[Address(RVA = "0x1057E4C", Offset = "0x1057E4C", VA = "0x1057E4C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000782")]
			[Address(RVA = "0x1057E54", Offset = "0x1057E54", VA = "0x1057E54")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000084")]
		public Vector3 IKPosition
		{
			[Token(Token = "0x6000783")]
			[Address(RVA = "0x1057E60", Offset = "0x1057E60", VA = "0x1057E60")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000784")]
			[Address(RVA = "0x1057E80", Offset = "0x1057E80", VA = "0x1057E80")]
			set
			{
			}
		}

		[Token(Token = "0x17000085")]
		public Quaternion IKRotation
		{
			[Token(Token = "0x6000785")]
			[Address(RVA = "0x1057EA0", Offset = "0x1057EA0", VA = "0x1057EA0")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6000786")]
			[Address(RVA = "0x1057EC0", Offset = "0x1057EC0", VA = "0x1057EC0")]
			set
			{
			}
		}

		[Token(Token = "0x6000787")]
		[Address(RVA = "0x1057EE0", Offset = "0x1057EE0", VA = "0x1057EE0")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000788")]
		[Address(RVA = "0x1057FD8", Offset = "0x1057FD8", VA = "0x1057FD8")]
		public void Initiate(Transform hand, int index)
		{
		}

		[Token(Token = "0x6000789")]
		[Address(RVA = "0x105865C", Offset = "0x105865C", VA = "0x105865C")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x600078A")]
		[Address(RVA = "0x1058728", Offset = "0x1058728", VA = "0x1058728")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600078B")]
		[Address(RVA = "0x10587E0", Offset = "0x10587E0", VA = "0x10587E0")]
		public void Update(float masterWeight)
		{
		}

		[Token(Token = "0x600078C")]
		[Address(RVA = "0x1058D80", Offset = "0x1058D80", VA = "0x1058D80")]
		public Finger()
		{
		}
	}
	[Token(Token = "0x200017F")]
	public class FingerRig : SolverManager
	{
		[Token(Token = "0x40009F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("The master weight for all fingers.")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x40009F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Finger[] fingers;

		[Token(Token = "0x17000086")]
		public bool initiated
		{
			[Token(Token = "0x600078D")]
			[Address(RVA = "0x1058D90", Offset = "0x1058D90", VA = "0x1058D90")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600078E")]
			[Address(RVA = "0x1058D98", Offset = "0x1058D98", VA = "0x1058D98")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600078F")]
		[Address(RVA = "0x1058DA4", Offset = "0x1058DA4", VA = "0x1058DA4")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000790")]
		[Address(RVA = "0x1058E18", Offset = "0x1058E18", VA = "0x1058E18")]
		[ContextMenu("Auto-detect")]
		public void AutoDetect()
		{
		}

		[Token(Token = "0x6000791")]
		[Address(RVA = "0x1059190", Offset = "0x1059190", VA = "0x1059190")]
		public void AddFinger(Transform bone1, Transform bone2, Transform bone3, Transform tip, [Optional] Transform target)
		{
		}

		[Token(Token = "0x6000792")]
		[Address(RVA = "0x1059348", Offset = "0x1059348", VA = "0x1059348")]
		public void RemoveFinger(int index)
		{
		}

		[Token(Token = "0x6000793")]
		[Address(RVA = "0x10590A0", Offset = "0x10590A0", VA = "0x10590A0")]
		private void AddChildrenRecursive(Transform parent, ref Transform[] array)
		{
		}

		[Token(Token = "0x6000794")]
		[Address(RVA = "0x10594C4", Offset = "0x10594C4", VA = "0x10594C4", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6000795")]
		[Address(RVA = "0x105956C", Offset = "0x105956C", VA = "0x105956C")]
		public void UpdateFingerSolvers()
		{
		}

		[Token(Token = "0x6000796")]
		[Address(RVA = "0x10595D0", Offset = "0x10595D0", VA = "0x10595D0")]
		public void FixFingerTransforms()
		{
		}

		[Token(Token = "0x6000797")]
		[Address(RVA = "0x1059638", Offset = "0x1059638", VA = "0x1059638")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000798")]
		[Address(RVA = "0x1059694", Offset = "0x1059694", VA = "0x1059694", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x6000799")]
		[Address(RVA = "0x1059698", Offset = "0x1059698", VA = "0x1059698", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x600079A")]
		[Address(RVA = "0x10596AC", Offset = "0x10596AC", VA = "0x10596AC")]
		public FingerRig()
		{
		}
	}
	[Token(Token = "0x2000180")]
	public abstract class Grounder : MonoBehaviour
	{
		[Token(Token = "0x2000181")]
		public delegate void GrounderDelegate();

		[Token(Token = "0x40009FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The master weight. Use this to fade in/out the grounding effect.")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x40009FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The Grounding solver. Not to confuse with IK solvers.")]
		public Grounding solver;

		[Token(Token = "0x40009FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GrounderDelegate OnPreGrounder;

		[Token(Token = "0x40009FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GrounderDelegate OnPostGrounder;

		[Token(Token = "0x40009FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GrounderDelegate OnPostIK;

		[Token(Token = "0x17000087")]
		public bool initiated
		{
			[Token(Token = "0x600079C")]
			[Address(RVA = "0x1059720", Offset = "0x1059720", VA = "0x1059720")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600079D")]
			[Address(RVA = "0x1059728", Offset = "0x1059728", VA = "0x1059728")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x600079B")]
		public abstract void ResetPosition();

		[Token(Token = "0x600079E")]
		[Address(RVA = "0x1059734", Offset = "0x1059734", VA = "0x1059734")]
		protected Vector3 GetSpineOffsetTarget()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600079F")]
		[Address(RVA = "0x10599E4", Offset = "0x10599E4", VA = "0x10599E4")]
		protected void LogWarning(string message)
		{
		}

		[Token(Token = "0x60007A0")]
		[Address(RVA = "0x10597F8", Offset = "0x10597F8", VA = "0x10597F8")]
		private Vector3 GetLegSpineBendVector(Grounding.Leg leg)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007A1")]
		[Address(RVA = "0x1059A08", Offset = "0x1059A08", VA = "0x1059A08")]
		private Vector3 GetLegSpineTangent(Grounding.Leg leg)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007A2")]
		protected abstract void OpenUserManual();

		[Token(Token = "0x60007A3")]
		protected abstract void OpenScriptReference();

		[Token(Token = "0x60007A4")]
		[Address(RVA = "0x1059B7C", Offset = "0x1059B7C", VA = "0x1059B7C")]
		protected Grounder()
		{
		}
	}
	[Token(Token = "0x2000182")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Grounder/Grounder Biped")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page9.html")]
	public class GrounderBipedIK : Grounder
	{
		[Token(Token = "0x4000A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The BipedIK componet.")]
		public BipedIK ik;

		[Token(Token = "0x4000A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The amount of spine bending towards upward slopes.")]
		public float spineBend;

		[Token(Token = "0x4000A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("The interpolation speed of spine bending.")]
		public float spineSpeed;

		[Token(Token = "0x4000A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform[] feet;

		[Token(Token = "0x4000A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Quaternion[] footRotations;

		[Token(Token = "0x4000A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x4000A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x4000A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 spineOffset;

		[Token(Token = "0x4000A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float lastWeight;

		[Token(Token = "0x60007A9")]
		[Address(RVA = "0x1059E80", Offset = "0x1059E80", VA = "0x1059E80", Slot = "5")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60007AA")]
		[Address(RVA = "0x1059EC4", Offset = "0x1059EC4", VA = "0x1059EC4", Slot = "6")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60007AB")]
		[Address(RVA = "0x1059F08", Offset = "0x1059F08", VA = "0x1059F08", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x60007AC")]
		[Address(RVA = "0x1059FE8", Offset = "0x1059FE8", VA = "0x1059FE8")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x60007AD")]
		[Address(RVA = "0x105A088", Offset = "0x105A088", VA = "0x105A088")]
		private void Update()
		{
		}

		[Token(Token = "0x60007AE")]
		[Address(RVA = "0x105A0DC", Offset = "0x105A0DC", VA = "0x105A0DC")]
		private void Initiate()
		{
		}

		[Token(Token = "0x60007AF")]
		[Address(RVA = "0x105A6F8", Offset = "0x105A6F8", VA = "0x105A6F8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60007B0")]
		[Address(RVA = "0x105A738", Offset = "0x105A738", VA = "0x105A738")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x60007B1")]
		[Address(RVA = "0x105ADAC", Offset = "0x105ADAC", VA = "0x105ADAC")]
		private void SetLegIK(IKSolverLimb limb, int index)
		{
		}

		[Token(Token = "0x60007B2")]
		[Address(RVA = "0x105AED4", Offset = "0x105AED4", VA = "0x105AED4")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x60007B3")]
		[Address(RVA = "0x105B0D0", Offset = "0x105B0D0", VA = "0x105B0D0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60007B4")]
		[Address(RVA = "0x105B2A8", Offset = "0x105B2A8", VA = "0x105B2A8")]
		public GrounderBipedIK()
		{
		}
	}
	[Token(Token = "0x2000183")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Grounder/Grounder Full Body Biped")]
	[HelpURL("https://www.youtube.com/watch?v=9MiZiaJorws&index=6&list=PLVxSIA1OaTOu8Nos3CalXbJ2DrKnntMv6")]
	public class GrounderFBBIK : Grounder
	{
		[Serializable]
		[Token(Token = "0x2000184")]
		public class SpineEffector
		{
			[Token(Token = "0x4000A11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The type of the effector.")]
			public FullBodyBipedEffector effectorType;

			[Token(Token = "0x4000A12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("The weight of horizontal bend offset towards the slope.")]
			public float horizontalWeight;

			[Token(Token = "0x4000A13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The vertical bend offset weight.")]
			public float verticalWeight;

			[Token(Token = "0x60007C4")]
			[Address(RVA = "0x105C13C", Offset = "0x105C13C", VA = "0x105C13C")]
			public SpineEffector()
			{
			}

			[Token(Token = "0x60007C5")]
			[Address(RVA = "0x105C14C", Offset = "0x105C14C", VA = "0x105C14C")]
			public SpineEffector(FullBodyBipedEffector effectorType, float horizontalWeight, float verticalWeight)
			{
			}
		}

		[Token(Token = "0x4000A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Reference to the FBBIK componet.")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The amount of spine bending towards upward slopes.")]
		public float spineBend;

		[Token(Token = "0x4000A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("The interpolation speed of spine bending.")]
		public float spineSpeed;

		[Token(Token = "0x4000A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public SpineEffector[] spine;

		[Token(Token = "0x4000A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform[] feet;

		[Token(Token = "0x4000A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 spineOffset;

		[Token(Token = "0x4000A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private bool firstSolve;

		[Token(Token = "0x60007B5")]
		[Address(RVA = "0x105B34C", Offset = "0x105B34C", VA = "0x105B34C")]
		[ContextMenu("TUTORIAL VIDEO")]
		private void OpenTutorial()
		{
		}

		[Token(Token = "0x60007B6")]
		[Address(RVA = "0x105B390", Offset = "0x105B390", VA = "0x105B390", Slot = "5")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60007B7")]
		[Address(RVA = "0x105B3D4", Offset = "0x105B3D4", VA = "0x105B3D4", Slot = "6")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60007B8")]
		[Address(RVA = "0x105B418", Offset = "0x105B418", VA = "0x105B418", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x60007B9")]
		[Address(RVA = "0x105B480", Offset = "0x105B480", VA = "0x105B480")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x60007BA")]
		[Address(RVA = "0x105B508", Offset = "0x105B508", VA = "0x105B508")]
		private void Update()
		{
		}

		[Token(Token = "0x60007BB")]
		[Address(RVA = "0x105B848", Offset = "0x105B848", VA = "0x105B848")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60007BC")]
		[Address(RVA = "0x105B854", Offset = "0x105B854", VA = "0x105B854")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60007BD")]
		[Address(RVA = "0x105B564", Offset = "0x105B564", VA = "0x105B564")]
		private void Initiate()
		{
		}

		[Token(Token = "0x60007BE")]
		[Address(RVA = "0x105B860", Offset = "0x105B860", VA = "0x105B860")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x60007BF")]
		[Address(RVA = "0x105BBD0", Offset = "0x105BBD0", VA = "0x105BBD0")]
		private void SetLegIK(IKEffector effector, Grounding.Leg leg)
		{
		}

		[Token(Token = "0x60007C0")]
		[Address(RVA = "0x105BD54", Offset = "0x105BD54", VA = "0x105BD54")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60007C1")]
		[Address(RVA = "0x105BEB4", Offset = "0x105BEB4", VA = "0x105BEB4")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x60007C2")]
		[Address(RVA = "0x105BED0", Offset = "0x105BED0", VA = "0x105BED0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60007C3")]
		[Address(RVA = "0x105C098", Offset = "0x105C098", VA = "0x105C098")]
		public GrounderFBBIK()
		{
		}
	}
	[Token(Token = "0x2000185")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page9.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Grounder/Grounder IK")]
	public class GrounderIK : Grounder
	{
		[Token(Token = "0x4000A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public IK[] legs;

		[Token(Token = "0x4000A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The pelvis transform. Common ancestor of all the legs.")]
		public Transform pelvis;

		[Token(Token = "0x4000A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The root Transform of the character, with the rigidbody and the collider.")]
		public Transform characterRoot;

		[Token(Token = "0x4000A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Range(0f, 1f)]
		[Tooltip("The weight of rotating the character root to the ground normal (range: 0 - 1).")]
		public float rootRotationWeight;

		[Token(Token = "0x4000A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("The speed of rotating the character root to the ground normal (range: 0 - inf).")]
		public float rootRotationSpeed;

		[Token(Token = "0x4000A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The maximum angle of root rotation (range: 0 - 90).")]
		public float maxRootRotationAngle;

		[Token(Token = "0x4000A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform[] feet;

		[Token(Token = "0x4000A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Quaternion[] footRotations;

		[Token(Token = "0x4000A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x4000A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x4000A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int solvedFeet;

		[Token(Token = "0x4000A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private bool solved;

		[Token(Token = "0x4000A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float lastWeight;

		[Token(Token = "0x4000A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Rigidbody characterRootRigidbody;

		[Token(Token = "0x60007C6")]
		[Address(RVA = "0x105C190", Offset = "0x105C190", VA = "0x105C190", Slot = "5")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60007C7")]
		[Address(RVA = "0x105C1D4", Offset = "0x105C1D4", VA = "0x105C1D4", Slot = "6")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60007C8")]
		[Address(RVA = "0x105C218", Offset = "0x105C218", VA = "0x105C218", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x60007C9")]
		[Address(RVA = "0x105C408", Offset = "0x105C408", VA = "0x105C408")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x60007CA")]
		[Address(RVA = "0x105C624", Offset = "0x105C624", VA = "0x105C624")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60007CB")]
		[Address(RVA = "0x105C704", Offset = "0x105C704", VA = "0x105C704")]
		private void Update()
		{
		}

		[Token(Token = "0x60007CC")]
		[Address(RVA = "0x105CDF0", Offset = "0x105CDF0", VA = "0x105CDF0")]
		private void Initiate()
		{
		}

		[Token(Token = "0x60007CD")]
		[Address(RVA = "0x105D2A8", Offset = "0x105D2A8", VA = "0x105D2A8")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x60007CE")]
		[Address(RVA = "0x105D454", Offset = "0x105D454", VA = "0x105D454")]
		private void SetLegIK(int index)
		{
		}

		[Token(Token = "0x60007CF")]
		[Address(RVA = "0x105D7DC", Offset = "0x105D7DC", VA = "0x105D7DC")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x60007D0")]
		[Address(RVA = "0x105D9E0", Offset = "0x105D9E0", VA = "0x105D9E0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60007D1")]
		[Address(RVA = "0x105DC08", Offset = "0x105DC08", VA = "0x105DC08")]
		public GrounderIK()
		{
		}
	}
	[Token(Token = "0x2000186")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page9.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Grounder/Grounder Quadruped")]
	public class GrounderQuadruped : Grounder
	{
		[Token(Token = "0x2000187")]
		public struct Foot
		{
			[Token(Token = "0x4000A3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IKSolver solver;

			[Token(Token = "0x4000A40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Transform transform;

			[Token(Token = "0x4000A41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Quaternion rotation;

			[Token(Token = "0x4000A42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Grounding.Leg leg;

			[Token(Token = "0x60007E4")]
			[Address(RVA = "0x105E94C", Offset = "0x105E94C", VA = "0x105E94C")]
			public Foot(IKSolver solver, Transform transform)
			{
			}
		}

		[Token(Token = "0x4000A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The Grounding solver for the forelegs.")]
		public Grounding forelegSolver;

		[Token(Token = "0x4000A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The weight of rotating the character root to the ground angle (range: 0 - 1).")]
		[Range(0f, 1f)]
		public float rootRotationWeight;

		[Token(Token = "0x4000A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Range(-90f, 0f)]
		[Tooltip("The maximum angle of rotating the quadruped downwards (going downhill, range: -90 - 0).")]
		public float minRootRotation;

		[Token(Token = "0x4000A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The maximum angle of rotating the quadruped upwards (going uphill, range: 0 - 90).")]
		[Range(0f, 90f)]
		public float maxRootRotation;

		[Token(Token = "0x4000A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("The speed of interpolating the character root rotation (range: 0 - inf).")]
		public float rootRotationSpeed;

		[Token(Token = "0x4000A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The maximum IK offset for the legs (range: 0 - inf).")]
		public float maxLegOffset;

		[Token(Token = "0x4000A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("The maximum IK offset for the forelegs (range: 0 - inf).")]
		public float maxForeLegOffset;

		[Token(Token = "0x4000A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The weight of maintaining the head's rotation as it was before solving the Grounding (range: 0 - 1).")]
		[Range(0f, 1f)]
		public float maintainHeadRotationWeight;

		[Token(Token = "0x4000A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The root Transform of the character, with the rigidbody and the collider.")]
		public Transform characterRoot;

		[Token(Token = "0x4000A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The pelvis transform. Common ancestor of both legs and the spine.")]
		public Transform pelvis;

		[Token(Token = "0x4000A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The last bone in the spine that is the common parent for both forelegs.")]
		public Transform lastSpineBone;

		[Token(Token = "0x4000A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The head (optional, if you intend to maintain its rotation).")]
		public Transform head;

		[Token(Token = "0x4000A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public IK[] legs;

		[Token(Token = "0x4000A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public IK[] forelegs;

		[Token(Token = "0x4000A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[HideInInspector]
		public Vector3 gravity;

		[Token(Token = "0x4000A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Foot[] feet;

		[Token(Token = "0x4000A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x4000A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Quaternion animatedPelvisLocalRotation;

		[Token(Token = "0x4000A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Quaternion animatedHeadLocalRotation;

		[Token(Token = "0x4000A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x4000A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Quaternion solvedPelvisLocalRotation;

		[Token(Token = "0x4000A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Quaternion solvedHeadLocalRotation;

		[Token(Token = "0x4000A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private int solvedFeet;

		[Token(Token = "0x4000A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private bool solved;

		[Token(Token = "0x4000A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private float angle;

		[Token(Token = "0x4000A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Transform forefeetRoot;

		[Token(Token = "0x4000A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Quaternion headRotation;

		[Token(Token = "0x4000A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private float lastWeight;

		[Token(Token = "0x4000A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Rigidbody characterRootRigidbody;

		[Token(Token = "0x60007D2")]
		[Address(RVA = "0x105DCAC", Offset = "0x105DCAC", VA = "0x105DCAC", Slot = "5")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60007D3")]
		[Address(RVA = "0x105DCF0", Offset = "0x105DCF0", VA = "0x105DCF0", Slot = "6")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60007D4")]
		[Address(RVA = "0x105DD34", Offset = "0x105DD34", VA = "0x105DD34", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x60007D5")]
		[Address(RVA = "0x105DEB0", Offset = "0x105DEB0", VA = "0x105DEB0")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x60007D6")]
		[Address(RVA = "0x105DFB4", Offset = "0x105DFB4", VA = "0x105DFB4")]
		private bool IsReadyToInitiateLegs(IK[] ikComponents)
		{
			return default(bool);
		}

		[Token(Token = "0x60007D7")]
		[Address(RVA = "0x105E1A8", Offset = "0x105E1A8", VA = "0x105E1A8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60007D8")]
		[Address(RVA = "0x105E20C", Offset = "0x105E20C", VA = "0x105E20C")]
		private void Update()
		{
		}

		[Token(Token = "0x60007D9")]
		[Address(RVA = "0x105E264", Offset = "0x105E264", VA = "0x105E264")]
		private void Initiate()
		{
		}

		[Token(Token = "0x60007DA")]
		[Address(RVA = "0x105E5B0", Offset = "0x105E5B0", VA = "0x105E5B0")]
		private Transform[] InitiateFeet(IK[] ikComponents, ref Foot[] f, int indexOffset)
		{
			return null;
		}

		[Token(Token = "0x60007DB")]
		[Address(RVA = "0x105E9AC", Offset = "0x105E9AC", VA = "0x105E9AC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60007DC")]
		[Address(RVA = "0x105EA3C", Offset = "0x105EA3C", VA = "0x105EA3C")]
		private void RootRotation()
		{
		}

		[Token(Token = "0x60007DD")]
		[Address(RVA = "0x105EE8C", Offset = "0x105EE8C", VA = "0x105EE8C")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x60007DE")]
		[Address(RVA = "0x105F550", Offset = "0x105F550", VA = "0x105F550")]
		private void UpdateForefeetRoot()
		{
		}

		[Token(Token = "0x60007DF")]
		[Address(RVA = "0x105F808", Offset = "0x105F808", VA = "0x105F808")]
		private void SetFootIK(Foot foot, float maxOffset)
		{
		}

		[Token(Token = "0x60007E0")]
		[Address(RVA = "0x105F93C", Offset = "0x105F93C", VA = "0x105F93C")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x60007E1")]
		[Address(RVA = "0x105FC34", Offset = "0x105FC34", VA = "0x105FC34")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60007E2")]
		[Address(RVA = "0x105FC64", Offset = "0x105FC64", VA = "0x105FC64")]
		private void DestroyLegs(IK[] ikComponents)
		{
		}

		[Token(Token = "0x60007E3")]
		[Address(RVA = "0x105FE84", Offset = "0x105FE84", VA = "0x105FE84")]
		public GrounderQuadruped()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000188")]
	public class Grounding
	{
		[Serializable]
		[Token(Token = "0x2000189")]
		public enum Quality
		{
			[Token(Token = "0x4000A5F")]
			Fastest,
			[Token(Token = "0x4000A60")]
			Simple,
			[Token(Token = "0x4000A61")]
			Best
		}

		[Token(Token = "0x200018A")]
		public delegate bool OnRaycastDelegate(Vector3 origin, Vector3 direction, out RaycastHit hitInfo, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction);

		[Token(Token = "0x200018B")]
		public delegate bool OnCapsuleCastDelegate(Vector3 point1, Vector3 point2, float radius, Vector3 direction, out RaycastHit hitInfo, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction);

		[Token(Token = "0x200018C")]
		public delegate bool OnSphereCastDelegate(Vector3 origin, float radius, Vector3 direction, out RaycastHit hitInfo, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction);

		[Token(Token = "0x200018D")]
		public class Leg
		{
			[Token(Token = "0x4000A64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Quaternion rotationOffset;

			[Token(Token = "0x4000A6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public bool invertFootCenter;

			[Token(Token = "0x4000A6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private Grounding grounding;

			[Token(Token = "0x4000A6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			private float lastTime;

			[Token(Token = "0x4000A6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			private float deltaTime;

			[Token(Token = "0x4000A70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			private Vector3 lastPosition;

			[Token(Token = "0x4000A71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			private Quaternion toHitNormal;

			[Token(Token = "0x4000A72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
			private Quaternion r;

			[Token(Token = "0x4000A73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
			private Vector3 up;

			[Token(Token = "0x4000A74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			private bool doOverrideFootPosition;

			[Token(Token = "0x4000A75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
			private Vector3 overrideFootPosition;

			[Token(Token = "0x4000A76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			private Vector3 transformPosition;

			[Token(Token = "0x17000090")]
			public bool isGrounded
			{
				[Token(Token = "0x6000809")]
				[Address(RVA = "0x1061D68", Offset = "0x1061D68", VA = "0x1061D68")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x600080A")]
				[Address(RVA = "0x1061D70", Offset = "0x1061D70", VA = "0x1061D70")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000091")]
			public Vector3 IKPosition
			{
				[Token(Token = "0x600080B")]
				[Address(RVA = "0x1061D7C", Offset = "0x1061D7C", VA = "0x1061D7C")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x600080C")]
				[Address(RVA = "0x1061D88", Offset = "0x1061D88", VA = "0x1061D88")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000092")]
			public bool initiated
			{
				[Token(Token = "0x600080D")]
				[Address(RVA = "0x1061D94", Offset = "0x1061D94", VA = "0x1061D94")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x600080E")]
				[Address(RVA = "0x1061D9C", Offset = "0x1061D9C", VA = "0x1061D9C")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000093")]
			public float heightFromGround
			{
				[Token(Token = "0x600080F")]
				[Address(RVA = "0x1061DA8", Offset = "0x1061DA8", VA = "0x1061DA8")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000810")]
				[Address(RVA = "0x1061DB0", Offset = "0x1061DB0", VA = "0x1061DB0")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000094")]
			public Vector3 velocity
			{
				[Token(Token = "0x6000811")]
				[Address(RVA = "0x1061DB8", Offset = "0x1061DB8", VA = "0x1061DB8")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000812")]
				[Address(RVA = "0x1061DC4", Offset = "0x1061DC4", VA = "0x1061DC4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000095")]
			public Transform transform
			{
				[Token(Token = "0x6000813")]
				[Address(RVA = "0x1061DD0", Offset = "0x1061DD0", VA = "0x1061DD0")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6000814")]
				[Address(RVA = "0x1061DD8", Offset = "0x1061DD8", VA = "0x1061DD8")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000096")]
			public float IKOffset
			{
				[Token(Token = "0x6000815")]
				[Address(RVA = "0x1061DE0", Offset = "0x1061DE0", VA = "0x1061DE0")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000816")]
				[Address(RVA = "0x1061DE8", Offset = "0x1061DE8", VA = "0x1061DE8")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000097")]
			public RaycastHit heelHit
			{
				[Token(Token = "0x6000817")]
				[Address(RVA = "0x1061DF0", Offset = "0x1061DF0", VA = "0x1061DF0")]
				[CompilerGenerated]
				get
				{
					return default(RaycastHit);
				}
				[Token(Token = "0x6000818")]
				[Address(RVA = "0x1061E08", Offset = "0x1061E08", VA = "0x1061E08")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000098")]
			public RaycastHit capsuleHit
			{
				[Token(Token = "0x6000819")]
				[Address(RVA = "0x1061E28", Offset = "0x1061E28", VA = "0x1061E28")]
				[CompilerGenerated]
				get
				{
					return default(RaycastHit);
				}
				[Token(Token = "0x600081A")]
				[Address(RVA = "0x1061E40", Offset = "0x1061E40", VA = "0x1061E40")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000099")]
			public RaycastHit GetHitPoint
			{
				[Token(Token = "0x600081B")]
				[Address(RVA = "0x1061E60", Offset = "0x1061E60", VA = "0x1061E60")]
				get
				{
					return default(RaycastHit);
				}
			}

			[Token(Token = "0x1700009A")]
			public float stepHeightFromGround
			{
				[Token(Token = "0x6000821")]
				[Address(RVA = "0x1062718", Offset = "0x1062718", VA = "0x1062718")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700009B")]
			private float rootYOffset
			{
				[Token(Token = "0x600082A")]
				[Address(RVA = "0x1062868", Offset = "0x1062868", VA = "0x1062868")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x600081C")]
			[Address(RVA = "0x1061EA8", Offset = "0x1061EA8", VA = "0x1061EA8")]
			public void SetFootPosition(Vector3 position)
			{
			}

			[Token(Token = "0x600081D")]
			[Address(RVA = "0x106047C", Offset = "0x106047C", VA = "0x106047C")]
			public void Initiate(Grounding grounding, Transform transform)
			{
			}

			[Token(Token = "0x600081E")]
			[Address(RVA = "0x1061EBC", Offset = "0x1061EBC", VA = "0x1061EBC")]
			public void OnEnable()
			{
			}

			[Token(Token = "0x600081F")]
			[Address(RVA = "0x10611F8", Offset = "0x10611F8", VA = "0x10611F8")]
			public void Reset()
			{
			}

			[Token(Token = "0x6000820")]
			[Address(RVA = "0x106058C", Offset = "0x106058C", VA = "0x106058C")]
			public void Process()
			{
			}

			[Token(Token = "0x6000822")]
			[Address(RVA = "0x1062344", Offset = "0x1062344", VA = "0x1062344")]
			private RaycastHit GetCapsuleHit(Vector3 offsetFromHeel)
			{
				return default(RaycastHit);
			}

			[Token(Token = "0x6000823")]
			[Address(RVA = "0x1061EFC", Offset = "0x1061EFC", VA = "0x1061EFC")]
			private RaycastHit GetRaycastHit(Vector3 offsetFromHeel)
			{
				return default(RaycastHit);
			}

			[Token(Token = "0x6000824")]
			[Address(RVA = "0x10627AC", Offset = "0x10627AC", VA = "0x10627AC")]
			private Vector3 RotateNormal(Vector3 normal)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000825")]
			[Address(RVA = "0x10621B0", Offset = "0x10621B0", VA = "0x10621B0")]
			private void SetFootToPoint(Vector3 normal, Vector3 point)
			{
			}

			[Token(Token = "0x6000826")]
			[Address(RVA = "0x1062230", Offset = "0x1062230", VA = "0x1062230")]
			private void SetFootToPlane(Vector3 planeNormal, Vector3 planePoint, Vector3 heelHitPoint)
			{
			}

			[Token(Token = "0x6000827")]
			[Address(RVA = "0x1062818", Offset = "0x1062818", VA = "0x1062818")]
			private float GetHeightFromGround(Vector3 hitPoint)
			{
				return default(float);
			}

			[Token(Token = "0x6000828")]
			[Address(RVA = "0x106274C", Offset = "0x106274C", VA = "0x106274C")]
			private void RotateFoot()
			{
			}

			[Token(Token = "0x6000829")]
			[Address(RVA = "0x10628F4", Offset = "0x10628F4", VA = "0x10628F4")]
			private Quaternion GetRotationOffsetTarget()
			{
				return default(Quaternion);
			}

			[Token(Token = "0x600082B")]
			[Address(RVA = "0x10603DC", Offset = "0x10603DC", VA = "0x10603DC")]
			public Leg()
			{
			}
		}

		[Token(Token = "0x200018E")]
		public class Pelvis
		{
			[Token(Token = "0x4000A79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Grounding grounding;

			[Token(Token = "0x4000A7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector3 lastRootPosition;

			[Token(Token = "0x4000A7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float damperF;

			[Token(Token = "0x4000A7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private bool initiated;

			[Token(Token = "0x4000A7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float lastTime;

			[Token(Token = "0x1700009C")]
			public Vector3 IKOffset
			{
				[Token(Token = "0x600082C")]
				[Address(RVA = "0x1062AA4", Offset = "0x1062AA4", VA = "0x1062AA4")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x600082D")]
				[Address(RVA = "0x1062AB0", Offset = "0x1062AB0", VA = "0x1062AB0")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700009D")]
			public float heightOffset
			{
				[Token(Token = "0x600082E")]
				[Address(RVA = "0x1062ABC", Offset = "0x1062ABC", VA = "0x1062ABC")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x600082F")]
				[Address(RVA = "0x1062AC4", Offset = "0x1062AC4", VA = "0x1062AC4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6000830")]
			[Address(RVA = "0x1060554", Offset = "0x1060554", VA = "0x1060554")]
			public void Initiate(Grounding grounding)
			{
			}

			[Token(Token = "0x6000831")]
			[Address(RVA = "0x1061164", Offset = "0x1061164", VA = "0x1061164")]
			public void Reset()
			{
			}

			[Token(Token = "0x6000832")]
			[Address(RVA = "0x1062ACC", Offset = "0x1062ACC", VA = "0x1062ACC")]
			public void OnEnable()
			{
			}

			[Token(Token = "0x6000833")]
			[Address(RVA = "0x1060F44", Offset = "0x1060F44", VA = "0x1060F44")]
			public void Process(float lowestOffset, float highestOffset, bool isGrounded)
			{
			}

			[Token(Token = "0x6000834")]
			[Address(RVA = "0x1060474", Offset = "0x1060474", VA = "0x1060474")]
			public Pelvis()
			{
			}
		}

		[Token(Token = "0x4000A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("Layers to ground the character to. Make sure to exclude the layer of the character controller.")]
		public LayerMask layers;

		[Token(Token = "0x4000A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Tooltip("Max step height. Maximum vertical distance of Grounding from the root of the character.")]
		public float maxStep;

		[Token(Token = "0x4000A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The height offset of the root.")]
		public float heightOffset;

		[Token(Token = "0x4000A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The speed of moving the feet up/down.")]
		public float footSpeed;

		[Token(Token = "0x4000A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("CapsuleCast radius. Should match approximately with the size of the feet.")]
		public float footRadius;

		[Token(Token = "0x4000A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Offset of the foot center along character forward axis.")]
		[HideInInspector]
		public float footCenterOffset;

		[Token(Token = "0x4000A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Amount of velocity based prediction of the foot positions.")]
		public float prediction;

		[Token(Token = "0x4000A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0f, 1f)]
		[Tooltip("Weight of rotating the feet to the ground normal offset.")]
		public float footRotationWeight;

		[Token(Token = "0x4000A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Speed of slerping the feet to their grounded rotations.")]
		public float footRotationSpeed;

		[Token(Token = "0x4000A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Max Foot Rotation Angle. Max angular offset from the foot's rotation.")]
		[Range(0f, 90f)]
		public float maxFootRotationAngle;

		[Token(Token = "0x4000A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("If true, solver will rotate with the character root so the character can be grounded for example to spherical planets. For performance reasons leave this off unless needed.")]
		public bool rotateSolver;

		[Token(Token = "0x4000A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The speed of moving the character up/down.")]
		public float pelvisSpeed;

		[Token(Token = "0x4000A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Used for smoothing out vertical pelvis movement (range 0 - 1).")]
		[Range(0f, 1f)]
		public float pelvisDamper;

		[Token(Token = "0x4000A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("The weight of lowering the pelvis to the lowest foot.")]
		public float lowerPelvisWeight;

		[Token(Token = "0x4000A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The weight of lifting the pelvis to the highest foot. This is useful when you don't want the feet to go too high relative to the body when crouching.")]
		public float liftPelvisWeight;

		[Token(Token = "0x4000A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The radius of the spherecast from the root that determines whether the character root is grounded.")]
		public float rootSphereCastRadius;

		[Token(Token = "0x4000A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("If false, keeps the foot that is over a ledge at the root level. If true, lowers the overstepping foot and body by the 'Max Step' value.")]
		public bool overstepFallsDown;

		[Token(Token = "0x4000A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("The raycasting quality. Fastest is a single raycast per foot, Simple is three raycasts, Best is one raycast and a capsule cast per foot.")]
		public Quality quality;

		[Token(Token = "0x4000A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public OnRaycastDelegate Raycast;

		[Token(Token = "0x4000A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public OnCapsuleCastDelegate CapsuleCast;

		[Token(Token = "0x4000A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public OnSphereCastDelegate SphereCast;

		[Token(Token = "0x4000A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool initiated;

		[Token(Token = "0x17000088")]
		public Leg[] legs
		{
			[Token(Token = "0x60007E5")]
			[Address(RVA = "0x105FF88", Offset = "0x105FF88", VA = "0x105FF88")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60007E6")]
			[Address(RVA = "0x105FF90", Offset = "0x105FF90", VA = "0x105FF90")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000089")]
		public Pelvis pelvis
		{
			[Token(Token = "0x60007E7")]
			[Address(RVA = "0x105FF98", Offset = "0x105FF98", VA = "0x105FF98")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60007E8")]
			[Address(RVA = "0x105FFA0", Offset = "0x105FFA0", VA = "0x105FFA0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700008A")]
		public bool isGrounded
		{
			[Token(Token = "0x60007E9")]
			[Address(RVA = "0x105FFA8", Offset = "0x105FFA8", VA = "0x105FFA8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60007EA")]
			[Address(RVA = "0x105FFB0", Offset = "0x105FFB0", VA = "0x105FFB0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700008B")]
		public Transform root
		{
			[Token(Token = "0x60007EB")]
			[Address(RVA = "0x105FFBC", Offset = "0x105FFBC", VA = "0x105FFBC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60007EC")]
			[Address(RVA = "0x105FFC4", Offset = "0x105FFC4", VA = "0x105FFC4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700008C")]
		public RaycastHit rootHit
		{
			[Token(Token = "0x60007ED")]
			[Address(RVA = "0x105FFCC", Offset = "0x105FFCC", VA = "0x105FFCC")]
			[CompilerGenerated]
			get
			{
				return default(RaycastHit);
			}
			[Token(Token = "0x60007EE")]
			[Address(RVA = "0x105FFE4", Offset = "0x105FFE4", VA = "0x105FFE4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700008D")]
		public bool rootGrounded
		{
			[Token(Token = "0x60007EF")]
			[Address(RVA = "0x1060004", Offset = "0x1060004", VA = "0x1060004")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700008E")]
		public Vector3 up
		{
			[Token(Token = "0x60007F7")]
			[Address(RVA = "0x105AE6C", Offset = "0x105AE6C", VA = "0x105AE6C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700008F")]
		private bool useRootRotation
		{
			[Token(Token = "0x60007FA")]
			[Address(RVA = "0x106128C", Offset = "0x106128C", VA = "0x106128C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60007F0")]
		[Address(RVA = "0x106004C", Offset = "0x106004C", VA = "0x106004C")]
		public RaycastHit GetRootHit(float maxDistanceMlp = 10f)
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x60007F1")]
		[Address(RVA = "0x10602D4", Offset = "0x10602D4", VA = "0x10602D4")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60007F2")]
		[Address(RVA = "0x105A438", Offset = "0x105A438", VA = "0x105A438")]
		public void Initiate(Transform root, Transform[] feet)
		{
		}

		[Token(Token = "0x60007F3")]
		[Address(RVA = "0x105ABB0", Offset = "0x105ABB0", VA = "0x105ABB0")]
		public void Update()
		{
		}

		[Token(Token = "0x60007F4")]
		[Address(RVA = "0x105CC78", Offset = "0x105CC78", VA = "0x105CC78")]
		public Vector3 GetLegsPlaneNormal()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007F5")]
		[Address(RVA = "0x1059F70", Offset = "0x1059F70", VA = "0x1059F70")]
		public void Reset()
		{
		}

		[Token(Token = "0x60007F6")]
		[Address(RVA = "0x1060578", Offset = "0x1060578", VA = "0x1060578")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x60007F8")]
		[Address(RVA = "0x1061340", Offset = "0x1061340", VA = "0x1061340")]
		public float GetVerticalOffset(Vector3 p1, Vector3 p2)
		{
			return default(float);
		}

		[Token(Token = "0x60007F9")]
		[Address(RVA = "0x10613C4", Offset = "0x10613C4", VA = "0x10613C4")]
		public Vector3 Flatten(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007FB")]
		[Address(RVA = "0x1061518", Offset = "0x1061518", VA = "0x1061518")]
		public Vector3 GetFootCenterOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007FC")]
		[Address(RVA = "0x1059BF4", Offset = "0x1059BF4", VA = "0x1059BF4")]
		public Grounding()
		{
		}
	}
	[Token(Token = "0x200018F")]
	[HelpURL("https://www.youtube.com/watch?v=wT8fViZpLmQ&index=3&list=PLVxSIA1OaTOu8Nos3CalXbJ2DrKnntMv6")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Aim IK")]
	public class AimIK : IK
	{
		[Token(Token = "0x4000A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverAim solver;

		[Token(Token = "0x6000835")]
		[Address(RVA = "0x1062B20", Offset = "0x1062B20", VA = "0x1062B20", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000836")]
		[Address(RVA = "0x1062B64", Offset = "0x1062B64", VA = "0x1062B64", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000837")]
		[Address(RVA = "0x1062BA8", Offset = "0x1062BA8", VA = "0x1062BA8")]
		[ContextMenu("TUTORIAL VIDEO")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x6000838")]
		[Address(RVA = "0x1062BEC", Offset = "0x1062BEC", VA = "0x1062BEC")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000839")]
		[Address(RVA = "0x1062C30", Offset = "0x1062C30", VA = "0x1062C30")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600083A")]
		[Address(RVA = "0x1062C74", Offset = "0x1062C74", VA = "0x1062C74", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x600083B")]
		[Address(RVA = "0x1062C7C", Offset = "0x1062C7C", VA = "0x1062C7C")]
		public AimIK()
		{
		}
	}
	[Token(Token = "0x2000190")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page2.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Arm IK")]
	public class ArmIK : IK
	{
		[Token(Token = "0x4000A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverArm solver;

		[Token(Token = "0x600083C")]
		[Address(RVA = "0x1062CF0", Offset = "0x1062CF0", VA = "0x1062CF0", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x600083D")]
		[Address(RVA = "0x1062D34", Offset = "0x1062D34", VA = "0x1062D34", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x600083E")]
		[Address(RVA = "0x1062D78", Offset = "0x1062D78", VA = "0x1062D78")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600083F")]
		[Address(RVA = "0x1062DBC", Offset = "0x1062DBC", VA = "0x1062DBC")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000840")]
		[Address(RVA = "0x1062E00", Offset = "0x1062E00", VA = "0x1062E00", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000841")]
		[Address(RVA = "0x1062E08", Offset = "0x1062E08", VA = "0x1062E08")]
		public ArmIK()
		{
		}
	}
	[Token(Token = "0x2000191")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/CCD IK")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page5.html")]
	public class CCDIK : IK
	{
		[Token(Token = "0x4000A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverCCD solver;

		[Token(Token = "0x6000842")]
		[Address(RVA = "0x1062E7C", Offset = "0x1062E7C", VA = "0x1062E7C", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000843")]
		[Address(RVA = "0x1062EC0", Offset = "0x1062EC0", VA = "0x1062EC0", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000844")]
		[Address(RVA = "0x1062F04", Offset = "0x1062F04", VA = "0x1062F04")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000845")]
		[Address(RVA = "0x1062F48", Offset = "0x1062F48", VA = "0x1062F48")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000846")]
		[Address(RVA = "0x1062F8C", Offset = "0x1062F8C", VA = "0x1062F8C", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000847")]
		[Address(RVA = "0x1062F94", Offset = "0x1062F94", VA = "0x1062F94")]
		public CCDIK()
		{
		}
	}
	[Token(Token = "0x2000192")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page6.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/FABRIK")]
	public class FABRIK : IK
	{
		[Token(Token = "0x4000A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverFABRIK solver;

		[Token(Token = "0x6000848")]
		[Address(RVA = "0x1064008", Offset = "0x1064008", VA = "0x1064008", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000849")]
		[Address(RVA = "0x106404C", Offset = "0x106404C", VA = "0x106404C", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x600084A")]
		[Address(RVA = "0x1064090", Offset = "0x1064090", VA = "0x1064090")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600084B")]
		[Address(RVA = "0x10640D4", Offset = "0x10640D4", VA = "0x10640D4")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600084C")]
		[Address(RVA = "0x1064118", Offset = "0x1064118", VA = "0x1064118", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x600084D")]
		[Address(RVA = "0x1064120", Offset = "0x1064120", VA = "0x1064120")]
		public FABRIK()
		{
		}
	}
	[Token(Token = "0x2000193")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page7.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/FABRIK Root")]
	public class FABRIKRoot : IK
	{
		[Token(Token = "0x4000A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverFABRIKRoot solver;

		[Token(Token = "0x600084E")]
		[Address(RVA = "0x106419C", Offset = "0x106419C", VA = "0x106419C", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x600084F")]
		[Address(RVA = "0x10641E0", Offset = "0x10641E0", VA = "0x10641E0", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000850")]
		[Address(RVA = "0x1064224", Offset = "0x1064224", VA = "0x1064224")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000851")]
		[Address(RVA = "0x1064268", Offset = "0x1064268", VA = "0x1064268")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000852")]
		[Address(RVA = "0x10642AC", Offset = "0x10642AC", VA = "0x10642AC", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000853")]
		[Address(RVA = "0x10642B4", Offset = "0x10642B4", VA = "0x10642B4")]
		public FABRIKRoot()
		{
		}
	}
	[Token(Token = "0x2000194")]
	[HelpURL("https://www.youtube.com/watch?v=7__IafZGwvI&index=1&list=PLVxSIA1OaTOu8Nos3CalXbJ2DrKnntMv6")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Full Body Biped IK")]
	public class FullBodyBipedIK : IK
	{
		[Token(Token = "0x4000A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BipedReferences references;

		[Token(Token = "0x4000A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IKSolverFullBodyBiped solver;

		[Token(Token = "0x6000854")]
		[Address(RVA = "0x1064328", Offset = "0x1064328", VA = "0x1064328", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000855")]
		[Address(RVA = "0x106436C", Offset = "0x106436C", VA = "0x106436C", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000856")]
		[Address(RVA = "0x10643B0", Offset = "0x10643B0", VA = "0x10643B0")]
		[ContextMenu("TUTORIAL VIDEO (SETUP)")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x6000857")]
		[Address(RVA = "0x10643F4", Offset = "0x10643F4", VA = "0x10643F4")]
		[ContextMenu("TUTORIAL VIDEO (INSPECTOR)")]
		private void OpenInspectorTutorial()
		{
		}

		[Token(Token = "0x6000858")]
		[Address(RVA = "0x1064438", Offset = "0x1064438", VA = "0x1064438")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000859")]
		[Address(RVA = "0x106447C", Offset = "0x106447C", VA = "0x106447C")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600085A")]
		[Address(RVA = "0x10644C0", Offset = "0x10644C0", VA = "0x10644C0")]
		public void SetReferences(BipedReferences references, Transform rootNode)
		{
		}

		[Token(Token = "0x600085B")]
		[Address(RVA = "0x1064500", Offset = "0x1064500", VA = "0x1064500", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x600085C")]
		[Address(RVA = "0x1064508", Offset = "0x1064508", VA = "0x1064508")]
		public bool ReferencesError(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x600085D")]
		[Address(RVA = "0x10646D8", Offset = "0x10646D8", VA = "0x10646D8")]
		public bool ReferencesWarning(ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x600085E")]
		[Address(RVA = "0x1064B94", Offset = "0x1064B94", VA = "0x1064B94")]
		[ContextMenu("Reinitiate")]
		private void Reinitiate()
		{
		}

		[Token(Token = "0x600085F")]
		[Address(RVA = "0x1064BB4", Offset = "0x1064BB4", VA = "0x1064BB4")]
		[ContextMenu("Auto-detect References")]
		private void AutoDetectReferences()
		{
		}

		[Token(Token = "0x6000860")]
		[Address(RVA = "0x1064CA4", Offset = "0x1064CA4", VA = "0x1064CA4")]
		public FullBodyBipedIK()
		{
		}
	}
	[Token(Token = "0x2000195")]
	public abstract class IK : SolverManager
	{
		[Token(Token = "0x6000861")]
		public abstract IKSolver GetIKSolver();

		[Token(Token = "0x6000862")]
		[Address(RVA = "0x1064D54", Offset = "0x1064D54", VA = "0x1064D54", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x6000863")]
		[Address(RVA = "0x1064E38", Offset = "0x1064E38", VA = "0x1064E38", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6000864")]
		[Address(RVA = "0x1065028", Offset = "0x1065028", VA = "0x1065028", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x6000865")]
		protected abstract void OpenUserManual();

		[Token(Token = "0x6000866")]
		protected abstract void OpenScriptReference();

		[Token(Token = "0x6000867")]
		[Address(RVA = "0x1064194", Offset = "0x1064194", VA = "0x1064194")]
		protected IK()
		{
		}
	}
	[Token(Token = "0x2000196")]
	public class IKExecutionOrder : MonoBehaviour
	{
		[Token(Token = "0x4000A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The IK components, assign in the order in which you wish to update them.")]
		public IK[] IKComponents;

		[Token(Token = "0x4000A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Optional. Assign it if you are using 'Animate Physics' as the Update Mode.")]
		public Animator animator;

		[Token(Token = "0x4000A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool fixedFrame;

		[Token(Token = "0x1700009E")]
		private bool animatePhysics
		{
			[Token(Token = "0x6000868")]
			[Address(RVA = "0x1065078", Offset = "0x1065078", VA = "0x1065078")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000869")]
		[Address(RVA = "0x1065104", Offset = "0x1065104", VA = "0x1065104")]
		private void Start()
		{
		}

		[Token(Token = "0x600086A")]
		[Address(RVA = "0x1065168", Offset = "0x1065168", VA = "0x1065168")]
		private void Update()
		{
		}

		[Token(Token = "0x600086B")]
		[Address(RVA = "0x1065208", Offset = "0x1065208", VA = "0x1065208")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600086C")]
		[Address(RVA = "0x1065234", Offset = "0x1065234", VA = "0x1065234")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600086D")]
		[Address(RVA = "0x106518C", Offset = "0x106518C", VA = "0x106518C")]
		private void FixTransforms()
		{
		}

		[Token(Token = "0x600086E")]
		[Address(RVA = "0x10652B4", Offset = "0x10652B4", VA = "0x10652B4")]
		public IKExecutionOrder()
		{
		}
	}
	[Token(Token = "0x2000197")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page11.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Leg IK")]
	public class LegIK : IK
	{
		[Token(Token = "0x4000A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLeg solver;

		[Token(Token = "0x600086F")]
		[Address(RVA = "0x10652BC", Offset = "0x10652BC", VA = "0x10652BC", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000870")]
		[Address(RVA = "0x1065300", Offset = "0x1065300", VA = "0x1065300", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000871")]
		[Address(RVA = "0x1065344", Offset = "0x1065344", VA = "0x1065344")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000872")]
		[Address(RVA = "0x1065388", Offset = "0x1065388", VA = "0x1065388")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000873")]
		[Address(RVA = "0x10653CC", Offset = "0x10653CC", VA = "0x10653CC", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000874")]
		[Address(RVA = "0x10653D4", Offset = "0x10653D4", VA = "0x10653D4")]
		public LegIK()
		{
		}
	}
	[Token(Token = "0x2000198")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page12.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Limb IK")]
	public class LimbIK : IK
	{
		[Token(Token = "0x4000A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLimb solver;

		[Token(Token = "0x6000875")]
		[Address(RVA = "0x1065448", Offset = "0x1065448", VA = "0x1065448", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000876")]
		[Address(RVA = "0x106548C", Offset = "0x106548C", VA = "0x106548C", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000877")]
		[Address(RVA = "0x10654D0", Offset = "0x10654D0", VA = "0x10654D0")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000878")]
		[Address(RVA = "0x1065514", Offset = "0x1065514", VA = "0x1065514")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000879")]
		[Address(RVA = "0x1065558", Offset = "0x1065558", VA = "0x1065558", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x600087A")]
		[Address(RVA = "0x1065560", Offset = "0x1065560", VA = "0x1065560")]
		public LimbIK()
		{
		}
	}
	[Token(Token = "0x2000199")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Look At IK")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page13.html")]
	public class LookAtIK : IK
	{
		[Token(Token = "0x4000A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLookAt solver;

		[Token(Token = "0x600087B")]
		[Address(RVA = "0x10655D4", Offset = "0x10655D4", VA = "0x10655D4", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x600087C")]
		[Address(RVA = "0x1065618", Offset = "0x1065618", VA = "0x1065618", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x600087D")]
		[Address(RVA = "0x106565C", Offset = "0x106565C", VA = "0x106565C")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600087E")]
		[Address(RVA = "0x10656A0", Offset = "0x10656A0", VA = "0x10656A0")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600087F")]
		[Address(RVA = "0x10656E4", Offset = "0x10656E4", VA = "0x10656E4", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000880")]
		[Address(RVA = "0x10656EC", Offset = "0x10656EC", VA = "0x10656EC")]
		public LookAtIK()
		{
		}
	}
	[Token(Token = "0x200019A")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Trigonometric IK")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page15.html")]
	public class TrigonometricIK : IK
	{
		[Token(Token = "0x4000A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverTrigonometric solver;

		[Token(Token = "0x6000881")]
		[Address(RVA = "0x1065760", Offset = "0x1065760", VA = "0x1065760", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000882")]
		[Address(RVA = "0x10657A4", Offset = "0x10657A4", VA = "0x10657A4", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000883")]
		[Address(RVA = "0x10657E8", Offset = "0x10657E8", VA = "0x10657E8")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000884")]
		[Address(RVA = "0x106582C", Offset = "0x106582C", VA = "0x106582C")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000885")]
		[Address(RVA = "0x1065870", Offset = "0x1065870", VA = "0x1065870", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000886")]
		[Address(RVA = "0x1065878", Offset = "0x1065878", VA = "0x1065878")]
		public TrigonometricIK()
		{
		}
	}
	[Token(Token = "0x200019B")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/VR IK")]
	public class VRIK : IK
	{
		[Serializable]
		[Token(Token = "0x200019C")]
		public class References
		{
			[Token(Token = "0x4000A8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform root;

			[Token(Token = "0x4000A8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[LargeHeader("Spine")]
			public Transform pelvis;

			[Token(Token = "0x4000A90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform spine;

			[Token(Token = "0x4000A91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Optional")]
			public Transform chest;

			[Token(Token = "0x4000A92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("Optional")]
			public Transform neck;

			[Token(Token = "0x4000A93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Transform head;

			[Token(Token = "0x4000A94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[Tooltip("Optional")]
			[LargeHeader("Left Arm")]
			public Transform leftShoulder;

			[Token(Token = "0x4000A95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[Tooltip("VRIK also supports armless characters.If you do not wish to use arms, leave all arm references empty.")]
			public Transform leftUpperArm;

			[Token(Token = "0x4000A96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("VRIK also supports armless characters.If you do not wish to use arms, leave all arm references empty.")]
			public Transform leftForearm;

			[Token(Token = "0x4000A97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("VRIK also supports armless characters.If you do not wish to use arms, leave all arm references empty.")]
			public Transform leftHand;

			[Token(Token = "0x4000A98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[LargeHeader("Right Arm")]
			[Tooltip("Optional")]
			public Transform rightShoulder;

			[Token(Token = "0x4000A99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[Tooltip("VRIK also supports armless characters.If you do not wish to use arms, leave all arm references empty.")]
			public Transform rightUpperArm;

			[Token(Token = "0x4000A9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[Tooltip("VRIK also supports armless characters.If you do not wish to use arms, leave all arm references empty.")]
			public Transform rightForearm;

			[Token(Token = "0x4000A9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[Tooltip("VRIK also supports armless characters.If you do not wish to use arms, leave all arm references empty.")]
			public Transform rightHand;

			[Token(Token = "0x4000A9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[Tooltip("VRIK also supports legless characters.If you do not wish to use legs, leave all leg references empty.")]
			[LargeHeader("Left Leg")]
			public Transform leftThigh;

			[Token(Token = "0x4000A9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			[Tooltip("VRIK also supports legless characters.If you do not wish to use legs, leave all leg references empty.")]
			public Transform leftCalf;

			[Token(Token = "0x4000A9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[Tooltip("VRIK also supports legless characters.If you do not wish to use legs, leave all leg references empty.")]
			public Transform leftFoot;

			[Token(Token = "0x4000A9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[Tooltip("Optional")]
			public Transform leftToes;

			[Token(Token = "0x4000AA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[Tooltip("VRIK also supports legless characters.If you do not wish to use legs, leave all leg references empty.")]
			[LargeHeader("Right Leg")]
			public Transform rightThigh;

			[Token(Token = "0x4000AA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			[Tooltip("VRIK also supports legless characters.If you do not wish to use legs, leave all leg references empty.")]
			public Transform rightCalf;

			[Token(Token = "0x4000AA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			[Tooltip("VRIK also supports legless characters.If you do not wish to use legs, leave all leg references empty.")]
			public Transform rightFoot;

			[Token(Token = "0x4000AA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			[Tooltip("Optional")]
			public Transform rightToes;

			[Token(Token = "0x1700009F")]
			public bool isFilled
			{
				[Token(Token = "0x6000893")]
				[Address(RVA = "0x10662C8", Offset = "0x10662C8", VA = "0x10662C8")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170000A0")]
			public bool isEmpty
			{
				[Token(Token = "0x6000894")]
				[Address(RVA = "0x1065F0C", Offset = "0x1065F0C", VA = "0x1065F0C")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000890")]
			[Address(RVA = "0x1066A04", Offset = "0x1066A04", VA = "0x1066A04")]
			public References()
			{
			}

			[Token(Token = "0x6000891")]
			[Address(RVA = "0x1066A0C", Offset = "0x1066A0C", VA = "0x1066A0C")]
			public References(BipedReferences b)
			{
			}

			[Token(Token = "0x6000892")]
			[Address(RVA = "0x1066BFC", Offset = "0x1066BFC", VA = "0x1066BFC")]
			public Transform[] GetTransforms()
			{
				return null;
			}

			[Token(Token = "0x6000895")]
			[Address(RVA = "0x10659D4", Offset = "0x10659D4", VA = "0x10659D4")]
			public static bool AutoDetectReferences(Transform root, out References references)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[ContextMenuItem("Auto-detect References", "AutoDetectReferences")]
		[Tooltip("Bone mapping. Right-click on the component header and select 'Auto-detect References' of fill in manually if not a Humanoid character. Chest, neck, shoulder and toe bones are optional. VRIK also supports legless characters. If you do not wish to use legs, leave all leg references empty.")]
		public References references;

		[Token(Token = "0x4000A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The VRIK solver.")]
		public IKSolverVR solver;

		[Token(Token = "0x6000887")]
		[Address(RVA = "0x10658EC", Offset = "0x10658EC", VA = "0x10658EC", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000888")]
		[Address(RVA = "0x1065930", Offset = "0x1065930", VA = "0x1065930", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000889")]
		[Address(RVA = "0x1065974", Offset = "0x1065974", VA = "0x1065974")]
		[ContextMenu("TUTORIAL VIDEO (STEAMVR SETUP)")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x600088A")]
		[Address(RVA = "0x10659B8", Offset = "0x10659B8", VA = "0x10659B8")]
		[ContextMenu("Auto-detect References")]
		public void AutoDetectReferences()
		{
		}

		[Token(Token = "0x600088B")]
		[Address(RVA = "0x1065E70", Offset = "0x1065E70", VA = "0x1065E70")]
		[ContextMenu("Guess Hand Orientations")]
		public void GuessHandOrientations()
		{
		}

		[Token(Token = "0x600088C")]
		[Address(RVA = "0x1065E98", Offset = "0x1065E98", VA = "0x1065E98", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x600088D")]
		[Address(RVA = "0x1065EA0", Offset = "0x1065EA0", VA = "0x1065EA0", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x600088E")]
		[Address(RVA = "0x10667C4", Offset = "0x10667C4", VA = "0x10667C4", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x600088F")]
		[Address(RVA = "0x1066954", Offset = "0x1066954", VA = "0x1066954")]
		public VRIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200019D")]
	public class FABRIKChain
	{
		[Token(Token = "0x4000AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FABRIK ik;

		[Token(Token = "0x4000AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float pull;

		[Token(Token = "0x4000AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1f)]
		public float pin;

		[Token(Token = "0x4000AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int[] children;

		[Token(Token = "0x6000896")]
		[Address(RVA = "0x1067140", Offset = "0x1067140", VA = "0x1067140")]
		public bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000897")]
		[Address(RVA = "0x1067210", Offset = "0x1067210", VA = "0x1067210")]
		public void Initiate()
		{
		}

		[Token(Token = "0x6000898")]
		[Address(RVA = "0x1067230", Offset = "0x1067230", VA = "0x1067230")]
		public void Stage1(FABRIKChain[] chain)
		{
		}

		[Token(Token = "0x6000899")]
		[Address(RVA = "0x1067484", Offset = "0x1067484", VA = "0x1067484")]
		public void Stage2(Vector3 rootPosition, FABRIKChain[] chain)
		{
		}

		[Token(Token = "0x600089A")]
		[Address(RVA = "0x10672F0", Offset = "0x10672F0", VA = "0x10672F0")]
		private Vector3 GetCentroid(FABRIKChain[] chain)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600089B")]
		[Address(RVA = "0x1067568", Offset = "0x1067568", VA = "0x1067568")]
		public FABRIKChain()
		{
		}
	}
	[Token(Token = "0x200019E")]
	public class FBBIKArmBending : MonoBehaviour
	{
		[Token(Token = "0x4000AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 bendDirectionOffsetLeft;

		[Token(Token = "0x4000AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 bendDirectionOffsetRight;

		[Token(Token = "0x4000AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 characterSpaceBendOffsetLeft;

		[Token(Token = "0x4000AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 characterSpaceBendOffsetRight;

		[Token(Token = "0x4000AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion leftHandTargetRotation;

		[Token(Token = "0x4000AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Quaternion rightHandTargetRotation;

		[Token(Token = "0x4000AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool initiated;

		[Token(Token = "0x600089C")]
		[Address(RVA = "0x10675D4", Offset = "0x10675D4", VA = "0x10675D4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600089D")]
		[Address(RVA = "0x1067B4C", Offset = "0x1067B4C", VA = "0x1067B4C")]
		private void OnPostFBBIK()
		{
		}

		[Token(Token = "0x600089E")]
		[Address(RVA = "0x1067CE0", Offset = "0x1067CE0", VA = "0x1067CE0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600089F")]
		[Address(RVA = "0x1067E08", Offset = "0x1067E08", VA = "0x1067E08")]
		public FBBIKArmBending()
		{
		}
	}
	[Token(Token = "0x200019F")]
	public class FBBIKHeadEffector : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20001A0")]
		public class BendBone
		{
			[Token(Token = "0x4000ADE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Assign spine and/or neck bones.")]
			public Transform transform;

			[Token(Token = "0x4000ADF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Range(0f, 1f)]
			[Tooltip("The weight of rotating this bone.")]
			public float weight;

			[Token(Token = "0x4000AE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private Quaternion defaultLocalRotation;

			[Token(Token = "0x60008AE")]
			[Address(RVA = "0x106B16C", Offset = "0x106B16C", VA = "0x106B16C")]
			public BendBone()
			{
			}

			[Token(Token = "0x60008AF")]
			[Address(RVA = "0x106B1CC", Offset = "0x106B1CC", VA = "0x106B1CC")]
			public BendBone(Transform transform, float weight)
			{
			}

			[Token(Token = "0x60008B0")]
			[Address(RVA = "0x10687C0", Offset = "0x10687C0", VA = "0x10687C0")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x60008B1")]
			[Address(RVA = "0x1068B90", Offset = "0x1068B90", VA = "0x1068B90")]
			public void FixTransforms()
			{
			}
		}

		[Token(Token = "0x4000AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Reference to the FBBIK component.")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Master weight for positioning the head.")]
		[LargeHeader("Position")]
		[Range(0f, 1f)]
		public float positionWeight;

		[Token(Token = "0x4000AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0f, 1f)]
		[Tooltip("The weight of moving the body along with the head")]
		public float bodyWeight;

		[Token(Token = "0x4000AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 1f)]
		[Tooltip("The weight of moving the thighs along with the head")]
		public float thighWeight;

		[Token(Token = "0x4000AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("If false, hands will not pull the head away if they are too far. Disabling this will improve performance significantly.")]
		public bool handsPullBody;

		[Token(Token = "0x4000AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The weight of rotating the head bone after solving")]
		[Range(0f, 1f)]
		[LargeHeader("Rotation")]
		public float rotationWeight;

		[Token(Token = "0x4000AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Clamping the rotation of the body")]
		[Range(0f, 1f)]
		public float bodyClampWeight;

		[Token(Token = "0x4000AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Clamping the rotation of the head")]
		[Range(0f, 1f)]
		public float headClampWeight;

		[Token(Token = "0x4000AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The master weight of bending/twisting the spine to the rotation of the head effector. This is similar to CCD, but uses the rotation of the head effector not the position.")]
		[Range(0f, 1f)]
		public float bendWeight;

		[Token(Token = "0x4000AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The bones to use for bending.")]
		public BendBone[] bendBones;

		[Token(Token = "0x4000ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Optional. The master weight of the CCD (Cyclic Coordinate Descent) IK effect that bends the spine towards the head effector before FBBIK solves.")]
		[Range(0f, 1f)]
		[LargeHeader("CCD")]
		public float CCDWeight;

		[Token(Token = "0x4000ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Range(0f, 1f)]
		[Tooltip("The weight of rolling the bones in towards the target")]
		public float roll;

		[Token(Token = "0x4000ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Smoothing the CCD effect.")]
		[Range(0f, 1000f)]
		public float damper;

		[Token(Token = "0x4000ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Bones to use for the CCD pass. Assign spine and/or neck bones.")]
		public Transform[] CCDBones;

		[Token(Token = "0x4000ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[LargeHeader("Stretching")]
		[Tooltip("Stretching the spine/neck to help reach the target. This is useful for making sure the head stays locked relative to the VR headset. NB! Stretching is done after FBBIK has solved so if you have the hand effectors pinned and spine bones included in the 'Stretch Bones', the hands might become offset from their target positions.")]
		[Range(0f, 1f)]
		public float postStretchWeight;

		[Token(Token = "0x4000ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("Stretch magnitude limit.")]
		public float maxStretch;

		[Token(Token = "0x4000AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("If > 0, dampers the stretching effect.")]
		public float stretchDamper;

		[Token(Token = "0x4000AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("If true, will fix head position to this Transform no matter what. Good for making sure the head will not budge away from the VR headset")]
		public bool fixHead;

		[Token(Token = "0x4000AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Bones to use for stretching. The more bones you add, the less noticable the effect.")]
		public Transform[] stretchBones;

		[Token(Token = "0x4000AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[LargeHeader("Chest Direction")]
		public Vector3 chestDirection;

		[Token(Token = "0x4000AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Range(0f, 1f)]
		public float chestDirectionWeight;

		[Token(Token = "0x4000AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform[] chestBones;

		[Token(Token = "0x4000AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public IKSolver.UpdateDelegate OnPostHeadEffectorFK;

		[Token(Token = "0x4000AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 offset;

		[Token(Token = "0x4000AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 headToBody;

		[Token(Token = "0x4000AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 shoulderCenterToHead;

		[Token(Token = "0x4000ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Vector3 headToLeftThigh;

		[Token(Token = "0x4000ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Vector3 headToRightThigh;

		[Token(Token = "0x4000ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Vector3 leftShoulderPos;

		[Token(Token = "0x4000ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Vector3 rightShoulderPos;

		[Token(Token = "0x4000ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float shoulderDist;

		[Token(Token = "0x4000ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float leftShoulderDist;

		[Token(Token = "0x4000AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private float rightShoulderDist;

		[Token(Token = "0x4000AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Quaternion chestRotation;

		[Token(Token = "0x4000AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Quaternion headRotationRelativeToRoot;

		[Token(Token = "0x4000AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Quaternion[] ccdDefaultLocalRotations;

		[Token(Token = "0x4000AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Vector3 headLocalPosition;

		[Token(Token = "0x4000AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private Quaternion headLocalRotation;

		[Token(Token = "0x4000AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Vector3[] stretchLocalPositions;

		[Token(Token = "0x4000AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Quaternion[] stretchLocalRotations;

		[Token(Token = "0x4000AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private Vector3[] chestLocalPositions;

		[Token(Token = "0x4000AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private Quaternion[] chestLocalRotations;

		[Token(Token = "0x4000ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private int bendBonesCount;

		[Token(Token = "0x4000ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private int ccdBonesCount;

		[Token(Token = "0x4000ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private int stretchBonesCount;

		[Token(Token = "0x4000ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private int chestBonesCount;

		[Token(Token = "0x60008A0")]
		[Address(RVA = "0x1067E10", Offset = "0x1067E10", VA = "0x1067E10")]
		private void Start()
		{
		}

		[Token(Token = "0x60008A1")]
		[Address(RVA = "0x1068310", Offset = "0x1068310", VA = "0x1068310")]
		private void OnStoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60008A2")]
		[Address(RVA = "0x10687EC", Offset = "0x10687EC", VA = "0x10687EC")]
		private void OnFixTransforms()
		{
		}

		[Token(Token = "0x60008A3")]
		[Address(RVA = "0x1068BB8", Offset = "0x1068BB8", VA = "0x1068BB8")]
		private void OnPreRead()
		{
		}

		[Token(Token = "0x60008A4")]
		[Address(RVA = "0x10694B4", Offset = "0x10694B4", VA = "0x10694B4")]
		private void SpineBend()
		{
		}

		[Token(Token = "0x60008A5")]
		[Address(RVA = "0x10698AC", Offset = "0x10698AC", VA = "0x10698AC")]
		private void CCDPass()
		{
		}

		[Token(Token = "0x60008A6")]
		[Address(RVA = "0x1069CBC", Offset = "0x1069CBC", VA = "0x1069CBC")]
		private void Iterate(int iteration)
		{
		}

		[Token(Token = "0x60008A7")]
		[Address(RVA = "0x106A634", Offset = "0x106A634", VA = "0x106A634")]
		private void OnPostUpdate()
		{
		}

		[Token(Token = "0x60008A8")]
		[Address(RVA = "0x10691F8", Offset = "0x10691F8", VA = "0x10691F8")]
		private void ChestDirection()
		{
		}

		[Token(Token = "0x60008A9")]
		[Address(RVA = "0x106A870", Offset = "0x106A870", VA = "0x106A870")]
		private void PostStretching()
		{
		}

		[Token(Token = "0x60008AA")]
		[Address(RVA = "0x106A554", Offset = "0x106A554", VA = "0x106A554")]
		private void LerpSolverPosition(IKEffector effector, Vector3 position, float weight, Vector3 offset)
		{
		}

		[Token(Token = "0x60008AB")]
		[Address(RVA = "0x106A454", Offset = "0x106A454", VA = "0x106A454")]
		private void Solve(ref Vector3 pos1, ref Vector3 pos2, float nominalDistance)
		{
		}

		[Token(Token = "0x60008AC")]
		[Address(RVA = "0x106ABD0", Offset = "0x106ABD0", VA = "0x106ABD0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60008AD")]
		[Address(RVA = "0x106AF58", Offset = "0x106AF58", VA = "0x106AF58")]
		public FBBIKHeadEffector()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001A1")]
	public class FBIKChain
	{
		[Serializable]
		[Token(Token = "0x20001A2")]
		public class ChildConstraint
		{
			[Token(Token = "0x4000AF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float pushElasticity;

			[Token(Token = "0x4000AF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float pullElasticity;

			[Token(Token = "0x4000AFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			private Transform bone1;

			[Token(Token = "0x4000AFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			private Transform bone2;

			[Token(Token = "0x4000AFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float crossFade;

			[Token(Token = "0x4000AFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float inverseCrossFade;

			[Token(Token = "0x4000B00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int chain1Index;

			[Token(Token = "0x4000B01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int chain2Index;

			[Token(Token = "0x170000A1")]
			public float nominalDistance
			{
				[Token(Token = "0x60008C6")]
				[Address(RVA = "0x106E308", Offset = "0x106E308", VA = "0x106E308")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60008C7")]
				[Address(RVA = "0x106E310", Offset = "0x106E310", VA = "0x106E310")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000A2")]
			public bool isRigid
			{
				[Token(Token = "0x60008C8")]
				[Address(RVA = "0x106E318", Offset = "0x106E318", VA = "0x106E318")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x60008C9")]
				[Address(RVA = "0x106E320", Offset = "0x106E320", VA = "0x106E320")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x60008CA")]
			[Address(RVA = "0x106E32C", Offset = "0x106E32C", VA = "0x106E32C")]
			public ChildConstraint(Transform bone1, Transform bone2, float pushElasticity = 0f, float pullElasticity = 0f)
			{
			}

			[Token(Token = "0x60008CB")]
			[Address(RVA = "0x106BFDC", Offset = "0x106BFDC", VA = "0x106BFDC")]
			public void Initiate(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x60008CC")]
			[Address(RVA = "0x106C6C0", Offset = "0x106C6C0", VA = "0x106C6C0")]
			public void OnPreSolve(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x60008CD")]
			[Address(RVA = "0x106E0CC", Offset = "0x106E0CC", VA = "0x106E0CC")]
			public void Solve(IKSolverFullBody solver)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001A3")]
		public enum Smoothing
		{
			[Token(Token = "0x4000B03")]
			None,
			[Token(Token = "0x4000B04")]
			Exponential,
			[Token(Token = "0x4000B05")]
			Cubic
		}

		[Token(Token = "0x4000AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Range(0f, 1f)]
		public float pin;

		[Token(Token = "0x4000AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Range(0f, 1f)]
		public float pull;

		[Token(Token = "0x4000AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float push;

		[Token(Token = "0x4000AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(-1f, 1f)]
		public float pushParent;

		[Token(Token = "0x4000AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float reach;

		[Token(Token = "0x4000AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Smoothing reachSmoothing;

		[Token(Token = "0x4000AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Smoothing pushSmoothing;

		[Token(Token = "0x4000AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IKSolver.Node[] nodes;

		[Token(Token = "0x4000AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int[] children;

		[Token(Token = "0x4000AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ChildConstraint[] childConstraints;

		[Token(Token = "0x4000AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public IKConstraintBend bendConstraint;

		[Token(Token = "0x4000AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float rootLength;

		[Token(Token = "0x4000AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool initiated;

		[Token(Token = "0x4000AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float length;

		[Token(Token = "0x4000AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float distance;

		[Token(Token = "0x4000AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private IKSolver.Point p;

		[Token(Token = "0x4000AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float reachForce;

		[Token(Token = "0x4000AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float pullParentSum;

		[Token(Token = "0x4000AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float[] crossFades;

		[Token(Token = "0x4000AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float sqrMag1;

		[Token(Token = "0x4000AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float sqrMag2;

		[Token(Token = "0x4000AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float sqrMagDif;

		[Token(Token = "0x4000AF7")]
		private const float maxLimbLength = 0.99999f;

		[Token(Token = "0x60008B2")]
		[Address(RVA = "0x106B254", Offset = "0x106B254", VA = "0x106B254")]
		public FBIKChain()
		{
		}

		[Token(Token = "0x60008B3")]
		[Address(RVA = "0x106B3EC", Offset = "0x106B3EC", VA = "0x106B3EC")]
		public FBIKChain(float pin, float pull, params Transform[] nodeTransforms)
		{
		}

		[Token(Token = "0x60008B4")]
		[Address(RVA = "0x106B55C", Offset = "0x106B55C", VA = "0x106B55C")]
		public void SetNodes(params Transform[] boneTransforms)
		{
		}

		[Token(Token = "0x60008B5")]
		[Address(RVA = "0x106B6C0", Offset = "0x106B6C0", VA = "0x106B6C0")]
		public int GetNodeIndex(Transform boneTransform)
		{
			return default(int);
		}

		[Token(Token = "0x60008B6")]
		[Address(RVA = "0x106B77C", Offset = "0x106B77C", VA = "0x106B77C")]
		public bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60008B7")]
		[Address(RVA = "0x106B898", Offset = "0x106B898", VA = "0x106B898")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60008B8")]
		[Address(RVA = "0x106C2DC", Offset = "0x106C2DC", VA = "0x106C2DC")]
		public void ReadPose(IKSolverFullBody solver, bool fullBody)
		{
		}

		[Token(Token = "0x60008B9")]
		[Address(RVA = "0x106BA14", Offset = "0x106BA14", VA = "0x106BA14")]
		private void CalculateBoneLengths(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60008BA")]
		[Address(RVA = "0x106C8A4", Offset = "0x106C8A4", VA = "0x106C8A4")]
		public void Reach(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60008BB")]
		[Address(RVA = "0x106CB38", Offset = "0x106CB38", VA = "0x106CB38")]
		public Vector3 Push(IKSolverFullBody solver)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008BC")]
		[Address(RVA = "0x106CE08", Offset = "0x106CE08", VA = "0x106CE08")]
		public void SolveTrigonometric(IKSolverFullBody solver, bool calculateBendDirection = false)
		{
		}

		[Token(Token = "0x60008BD")]
		[Address(RVA = "0x106D7D0", Offset = "0x106D7D0", VA = "0x106D7D0")]
		public void Stage1(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60008BE")]
		[Address(RVA = "0x106DCC8", Offset = "0x106DCC8", VA = "0x106DCC8")]
		public void Stage2(IKSolverFullBody solver, Vector3 position)
		{
		}

		[Token(Token = "0x60008BF")]
		[Address(RVA = "0x106DEC8", Offset = "0x106DEC8", VA = "0x106DEC8")]
		public void SolveConstraintSystems(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60008C0")]
		[Address(RVA = "0x106DBB4", Offset = "0x106DBB4", VA = "0x106DBB4")]
		private Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008C1")]
		[Address(RVA = "0x106D670", Offset = "0x106D670", VA = "0x106D670")]
		protected Vector3 GetDirToBendPoint(Vector3 direction, Vector3 bendDirection, float directionMagnitude)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008C2")]
		[Address(RVA = "0x106DB50", Offset = "0x106DB50", VA = "0x106DB50")]
		private void SolveChildConstraints(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60008C3")]
		[Address(RVA = "0x106DFA4", Offset = "0x106DFA4", VA = "0x106DFA4")]
		private void SolveLinearConstraint(IKSolver.Node node1, IKSolver.Node node2, float crossFade, float distance)
		{
		}

		[Token(Token = "0x60008C4")]
		[Address(RVA = "0x106DA7C", Offset = "0x106DA7C", VA = "0x106DA7C")]
		public void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x60008C5")]
		[Address(RVA = "0x106DDCC", Offset = "0x106DDCC", VA = "0x106DDCC")]
		private void BackwardReach(Vector3 position)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001A4")]
	public class IKConstraintBend
	{
		[Token(Token = "0x4000B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone1;

		[Token(Token = "0x4000B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform bone2;

		[Token(Token = "0x4000B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform bone3;

		[Token(Token = "0x4000B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform bendGoal;

		[Token(Token = "0x4000B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 direction;

		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Quaternion rotationOffset;

		[Token(Token = "0x4000B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x4000B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector3 defaultLocalDirection;

		[Token(Token = "0x4000B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Vector3 defaultChildDirection;

		[NonSerialized]
		[Token(Token = "0x4000B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float clampF;

		[Token(Token = "0x4000B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int chainIndex1;

		[Token(Token = "0x4000B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int nodeIndex1;

		[Token(Token = "0x4000B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int chainIndex2;

		[Token(Token = "0x4000B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int nodeIndex2;

		[Token(Token = "0x4000B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int chainIndex3;

		[Token(Token = "0x4000B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int nodeIndex3;

		[Token(Token = "0x4000B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
		private bool limbOrientationsSet;

		[Token(Token = "0x170000A3")]
		public bool initiated
		{
			[Token(Token = "0x60008CF")]
			[Address(RVA = "0x106E560", Offset = "0x106E560", VA = "0x106E560")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60008D0")]
			[Address(RVA = "0x106E568", Offset = "0x106E568", VA = "0x106E568")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60008CE")]
		[Address(RVA = "0x106E388", Offset = "0x106E388", VA = "0x106E388")]
		public bool IsValid(IKSolverFullBody solver, Warning.Logger logger)
		{
			return default(bool);
		}

		[Token(Token = "0x60008D1")]
		[Address(RVA = "0x106B380", Offset = "0x106B380", VA = "0x106B380")]
		public IKConstraintBend()
		{
		}

		[Token(Token = "0x60008D2")]
		[Address(RVA = "0x106E574", Offset = "0x106E574", VA = "0x106E574")]
		public IKConstraintBend(Transform bone1, Transform bone2, Transform bone3)
		{
		}

		[Token(Token = "0x60008D3")]
		[Address(RVA = "0x106C030", Offset = "0x106C030", VA = "0x106C030")]
		public void SetBones(Transform bone1, Transform bone2, Transform bone3)
		{
		}

		[Token(Token = "0x60008D4")]
		[Address(RVA = "0x106C074", Offset = "0x106C074", VA = "0x106C074")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60008D5")]
		[Address(RVA = "0x106E750", Offset = "0x106E750", VA = "0x106E750")]
		public void SetLimbOrientation(Vector3 upper, Vector3 lower, Vector3 last)
		{
		}

		[Token(Token = "0x60008D6")]
		[Address(RVA = "0x106EAA4", Offset = "0x106EAA4", VA = "0x106EAA4")]
		public void LimitBend(float solverWeight, float positionWeight)
		{
		}

		[Token(Token = "0x60008D7")]
		[Address(RVA = "0x106D040", Offset = "0x106D040", VA = "0x106D040")]
		public Vector3 GetDir(IKSolverFullBody solver)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008D8")]
		[Address(RVA = "0x106E608", Offset = "0x106E608", VA = "0x106E608")]
		private Vector3 OrthoToLimb(IKSolverFullBody solver, Vector3 tangent)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008D9")]
		[Address(RVA = "0x106E6AC", Offset = "0x106E6AC", VA = "0x106E6AC")]
		private Vector3 OrthoToBone1(IKSolverFullBody solver, Vector3 tangent)
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x20001A5")]
	public class IKEffector
	{
		[Token(Token = "0x4000B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone;

		[Token(Token = "0x4000B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4000B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float positionWeight;

		[Token(Token = "0x4000B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0f, 1f)]
		public float rotationWeight;

		[Token(Token = "0x4000B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 position;

		[Token(Token = "0x4000B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Quaternion rotation;

		[Token(Token = "0x4000B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 positionOffset;

		[Token(Token = "0x4000B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool effectChildNodes;

		[Token(Token = "0x4000B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Range(0f, 1f)]
		public float maintainRelativePositionWeight;

		[Token(Token = "0x4000B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform[] childBones;

		[Token(Token = "0x4000B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform planeBone1;

		[Token(Token = "0x4000B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform planeBone2;

		[Token(Token = "0x4000B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform planeBone3;

		[Token(Token = "0x4000B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Quaternion planeRotationOffset;

		[Token(Token = "0x4000B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float posW;

		[Token(Token = "0x4000B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float rotW;

		[Token(Token = "0x4000B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3[] localPositions;

		[Token(Token = "0x4000B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool usePlaneNodes;

		[Token(Token = "0x4000B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Quaternion animatedPlaneRotation;

		[Token(Token = "0x4000B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Vector3 animatedPosition;

		[Token(Token = "0x4000B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool firstUpdate;

		[Token(Token = "0x4000B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int chainIndex;

		[Token(Token = "0x4000B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int nodeIndex;

		[Token(Token = "0x4000B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private int plane1ChainIndex;

		[Token(Token = "0x4000B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private int plane1NodeIndex;

		[Token(Token = "0x4000B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private int plane2ChainIndex;

		[Token(Token = "0x4000B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private int plane2NodeIndex;

		[Token(Token = "0x4000B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private int plane3ChainIndex;

		[Token(Token = "0x4000B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private int plane3NodeIndex;

		[Token(Token = "0x4000B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private int[] childChainIndexes;

		[Token(Token = "0x4000B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private int[] childNodeIndexes;

		[Token(Token = "0x170000A4")]
		public bool isEndEffector
		{
			[Token(Token = "0x60008DB")]
			[Address(RVA = "0x106EE6C", Offset = "0x106EE6C", VA = "0x106EE6C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60008DC")]
			[Address(RVA = "0x106EE74", Offset = "0x106EE74", VA = "0x106EE74")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60008DA")]
		[Address(RVA = "0x106AB74", Offset = "0x106AB74", VA = "0x106AB74")]
		public IKSolver.Node GetNode(IKSolverFullBody solver)
		{
			return null;
		}

		[Token(Token = "0x60008DD")]
		[Address(RVA = "0x106EE80", Offset = "0x106EE80", VA = "0x106EE80")]
		public void PinToBone(float positionWeight, float rotationWeight)
		{
		}

		[Token(Token = "0x60008DE")]
		[Address(RVA = "0x106EF04", Offset = "0x106EF04", VA = "0x106EF04")]
		public IKEffector()
		{
		}

		[Token(Token = "0x60008DF")]
		[Address(RVA = "0x106F0D4", Offset = "0x106F0D4", VA = "0x106F0D4")]
		public IKEffector(Transform bone, Transform[] childBones)
		{
		}

		[Token(Token = "0x60008E0")]
		[Address(RVA = "0x106F2E0", Offset = "0x106F2E0", VA = "0x106F2E0")]
		public bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60008E1")]
		[Address(RVA = "0x106F5E8", Offset = "0x106F5E8", VA = "0x106F5E8")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60008E2")]
		[Address(RVA = "0x106F8C0", Offset = "0x106F8C0", VA = "0x106F8C0")]
		public void ResetOffset(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60008E3")]
		[Address(RVA = "0x106F9E0", Offset = "0x106F9E0", VA = "0x106F9E0")]
		public void SetToTarget()
		{
		}

		[Token(Token = "0x60008E4")]
		[Address(RVA = "0x106FA7C", Offset = "0x106FA7C", VA = "0x106FA7C")]
		public void OnPreSolve(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60008E5")]
		[Address(RVA = "0x1070130", Offset = "0x1070130", VA = "0x1070130")]
		public void OnPostWrite()
		{
		}

		[Token(Token = "0x60008E6")]
		[Address(RVA = "0x1070188", Offset = "0x1070188", VA = "0x1070188")]
		private Quaternion GetPlaneRotation(IKSolverFullBody solver)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60008E7")]
		[Address(RVA = "0x107035C", Offset = "0x107035C", VA = "0x107035C")]
		public void Update(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60008E8")]
		[Address(RVA = "0x10705B8", Offset = "0x10705B8", VA = "0x10705B8")]
		private Vector3 GetPosition(IKSolverFullBody solver, out Quaternion planeRotationOffset)
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x20001A6")]
	public class IKMapping
	{
		[Serializable]
		[Token(Token = "0x20001A7")]
		public class BoneMap
		{
			[Token(Token = "0x4000B38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x4000B39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int chainIndex;

			[Token(Token = "0x4000B3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int nodeIndex;

			[Token(Token = "0x4000B3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 defaultLocalPosition;

			[Token(Token = "0x4000B3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Quaternion defaultLocalRotation;

			[Token(Token = "0x4000B3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Vector3 localSwingAxis;

			[Token(Token = "0x4000B3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Vector3 localTwistAxis;

			[Token(Token = "0x4000B3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public Vector3 planePosition;

			[Token(Token = "0x4000B40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 ikPosition;

			[Token(Token = "0x4000B41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public Quaternion defaultLocalTargetRotation;

			[Token(Token = "0x4000B42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			private Quaternion maintainRotation;

			[Token(Token = "0x4000B43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			public float length;

			[Token(Token = "0x4000B44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public Quaternion animatedRotation;

			[Token(Token = "0x4000B45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private Transform planeBone1;

			[Token(Token = "0x4000B46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			private Transform planeBone2;

			[Token(Token = "0x4000B47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private Transform planeBone3;

			[Token(Token = "0x4000B48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			private int plane1ChainIndex;

			[Token(Token = "0x4000B49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			private int plane1NodeIndex;

			[Token(Token = "0x4000B4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			private int plane2ChainIndex;

			[Token(Token = "0x4000B4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
			private int plane2NodeIndex;

			[Token(Token = "0x4000B4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			private int plane3ChainIndex;

			[Token(Token = "0x4000B4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			private int plane3NodeIndex;

			[Token(Token = "0x170000A5")]
			public Vector3 swingDirection
			{
				[Token(Token = "0x60008EF")]
				[Address(RVA = "0x1070B28", Offset = "0x1070B28", VA = "0x1070B28")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170000A6")]
			public bool isNodeBone
			{
				[Token(Token = "0x60008F2")]
				[Address(RVA = "0x1070BE0", Offset = "0x1070BE0", VA = "0x1070BE0")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170000A7")]
			private Quaternion lastAnimatedTargetRotation
			{
				[Token(Token = "0x6000906")]
				[Address(RVA = "0x1070FCC", Offset = "0x1070FCC", VA = "0x1070FCC")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x60008EE")]
			[Address(RVA = "0x1070AE4", Offset = "0x1070AE4", VA = "0x1070AE4")]
			public void Initiate(Transform transform, IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x60008F0")]
			[Address(RVA = "0x1070B58", Offset = "0x1070B58", VA = "0x1070B58")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x60008F1")]
			[Address(RVA = "0x1070B9C", Offset = "0x1070B9C", VA = "0x1070B9C")]
			public void FixTransform(bool position)
			{
			}

			[Token(Token = "0x60008F3")]
			[Address(RVA = "0x1070BF0", Offset = "0x1070BF0", VA = "0x1070BF0")]
			public void SetLength(BoneMap nextBone)
			{
			}

			[Token(Token = "0x60008F4")]
			[Address(RVA = "0x1070CC4", Offset = "0x1070CC4", VA = "0x1070CC4")]
			public void SetLocalSwingAxis(BoneMap swingTarget)
			{
			}

			[Token(Token = "0x60008F5")]
			[Address(RVA = "0x1070CCC", Offset = "0x1070CCC", VA = "0x1070CCC")]
			public void SetLocalSwingAxis(BoneMap bone1, BoneMap bone2)
			{
			}

			[Token(Token = "0x60008F6")]
			[Address(RVA = "0x1070D98", Offset = "0x1070D98", VA = "0x1070D98")]
			public void SetLocalTwistAxis(Vector3 twistDirection, Vector3 normalDirection)
			{
			}

			[Token(Token = "0x60008F7")]
			[Address(RVA = "0x1070E04", Offset = "0x1070E04", VA = "0x1070E04")]
			public void SetPlane(IKSolverFullBody solver, Transform planeBone1, Transform planeBone2, Transform planeBone3)
			{
			}

			[Token(Token = "0x60008F8")]
			[Address(RVA = "0x1070EBC", Offset = "0x1070EBC", VA = "0x1070EBC")]
			public void UpdatePlane(bool rotation, bool position)
			{
			}

			[Token(Token = "0x60008F9")]
			[Address(RVA = "0x1071134", Offset = "0x1071134", VA = "0x1071134")]
			public void SetIKPosition()
			{
			}

			[Token(Token = "0x60008FA")]
			[Address(RVA = "0x1071160", Offset = "0x1071160", VA = "0x1071160")]
			public void MaintainRotation()
			{
			}

			[Token(Token = "0x60008FB")]
			[Address(RVA = "0x107118C", Offset = "0x107118C", VA = "0x107118C")]
			public void SetToIKPosition()
			{
			}

			[Token(Token = "0x60008FC")]
			[Address(RVA = "0x10711B4", Offset = "0x10711B4", VA = "0x10711B4")]
			public void FixToNode(IKSolverFullBody solver, float weight, [Optional] IKSolver.Node fixNode)
			{
			}

			[Token(Token = "0x60008FD")]
			[Address(RVA = "0x1071278", Offset = "0x1071278", VA = "0x1071278")]
			public Vector3 GetPlanePosition(IKSolverFullBody solver)
			{
				return default(Vector3);
			}

			[Token(Token = "0x60008FE")]
			[Address(RVA = "0x107140C", Offset = "0x107140C", VA = "0x107140C")]
			public void PositionToPlane(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x60008FF")]
			[Address(RVA = "0x1071430", Offset = "0x1071430", VA = "0x1071430")]
			public void RotateToPlane(IKSolverFullBody solver, float weight)
			{
			}

			[Token(Token = "0x6000900")]
			[Address(RVA = "0x1071550", Offset = "0x1071550", VA = "0x1071550")]
			public void Swing(Vector3 swingTarget, float weight)
			{
			}

			[Token(Token = "0x6000901")]
			[Address(RVA = "0x10715B4", Offset = "0x10715B4", VA = "0x10715B4")]
			public void Swing(Vector3 pos1, Vector3 pos2, float weight)
			{
			}

			[Token(Token = "0x6000902")]
			[Address(RVA = "0x1071734", Offset = "0x1071734", VA = "0x1071734")]
			public void Twist(Vector3 twistDirection, Vector3 normalDirection, float weight)
			{
			}

			[Token(Token = "0x6000903")]
			[Address(RVA = "0x10718B4", Offset = "0x10718B4", VA = "0x10718B4")]
			public void RotateToMaintain(float weight)
			{
			}

			[Token(Token = "0x6000904")]
			[Address(RVA = "0x1071930", Offset = "0x1071930", VA = "0x1071930")]
			public void RotateToEffector(IKSolverFullBody solver, float weight)
			{
			}

			[Token(Token = "0x6000905")]
			[Address(RVA = "0x10712F0", Offset = "0x10712F0", VA = "0x10712F0")]
			private Quaternion GetTargetRotation(IKSolverFullBody solver)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x6000907")]
			[Address(RVA = "0x1071A58", Offset = "0x1071A58", VA = "0x1071A58")]
			public BoneMap()
			{
			}
		}

		[Token(Token = "0x60008E9")]
		[Address(RVA = "0x1070874", Offset = "0x1070874", VA = "0x1070874", Slot = "4")]
		public virtual bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60008EA")]
		[Address(RVA = "0x107087C", Offset = "0x107087C", VA = "0x107087C", Slot = "5")]
		public virtual void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60008EB")]
		[Address(RVA = "0x1070880", Offset = "0x1070880", VA = "0x1070880")]
		protected bool BoneIsValid(Transform bone, IKSolver solver, ref string message, [Optional] Warning.Logger logger)
		{
			return default(bool);
		}

		[Token(Token = "0x60008EC")]
		[Address(RVA = "0x10709C8", Offset = "0x10709C8", VA = "0x10709C8")]
		protected Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008ED")]
		[Address(RVA = "0x1070ADC", Offset = "0x1070ADC", VA = "0x1070ADC")]
		public IKMapping()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001A8")]
	public class IKMappingBone : IKMapping
	{
		[Token(Token = "0x4000B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone;

		[Token(Token = "0x4000B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float maintainRotationWeight;

		[Token(Token = "0x4000B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private BoneMap boneMap;

		[Token(Token = "0x6000908")]
		[Address(RVA = "0x1071A74", Offset = "0x1071A74", VA = "0x1071A74", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000909")]
		[Address(RVA = "0x1071B1C", Offset = "0x1071B1C", VA = "0x1071B1C")]
		public IKMappingBone()
		{
		}

		[Token(Token = "0x600090A")]
		[Address(RVA = "0x1071BAC", Offset = "0x1071BAC", VA = "0x1071BAC")]
		public IKMappingBone(Transform bone)
		{
		}

		[Token(Token = "0x600090B")]
		[Address(RVA = "0x1071C58", Offset = "0x1071C58", VA = "0x1071C58")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600090C")]
		[Address(RVA = "0x1071C70", Offset = "0x1071C70", VA = "0x1071C70")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x600090D")]
		[Address(RVA = "0x1071C8C", Offset = "0x1071C8C", VA = "0x1071C8C", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600090E")]
		[Address(RVA = "0x1071D34", Offset = "0x1071D34", VA = "0x1071D34")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x600090F")]
		[Address(RVA = "0x1071D4C", Offset = "0x1071D4C", VA = "0x1071D4C")]
		public void WritePose(float solverWeight)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001A9")]
	public class IKMappingLimb : IKMapping
	{
		[Serializable]
		[Token(Token = "0x20001AA")]
		public enum BoneMapType
		{
			[Token(Token = "0x4000B5D")]
			Parent,
			[Token(Token = "0x4000B5E")]
			Bone1,
			[Token(Token = "0x4000B5F")]
			Bone2,
			[Token(Token = "0x4000B60")]
			Bone3
		}

		[Token(Token = "0x4000B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform parentBone;

		[Token(Token = "0x4000B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform bone1;

		[Token(Token = "0x4000B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform bone2;

		[Token(Token = "0x4000B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform bone3;

		[Token(Token = "0x4000B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 1f)]
		public float maintainRotationWeight;

		[Token(Token = "0x4000B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 1f)]
		public float weight;

		[NonSerialized]
		[Token(Token = "0x4000B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool updatePlaneRotations;

		[Token(Token = "0x4000B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private BoneMap boneMapParent;

		[Token(Token = "0x4000B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private BoneMap boneMap1;

		[Token(Token = "0x4000B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BoneMap boneMap2;

		[Token(Token = "0x4000B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private BoneMap boneMap3;

		[Token(Token = "0x6000910")]
		[Address(RVA = "0x1071D70", Offset = "0x1071D70", VA = "0x1071D70", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000911")]
		[Address(RVA = "0x1071DE4", Offset = "0x1071DE4", VA = "0x1071DE4")]
		public BoneMap GetBoneMap(BoneMapType boneMap)
		{
			return null;
		}

		[Token(Token = "0x6000912")]
		[Address(RVA = "0x1071EAC", Offset = "0x1071EAC", VA = "0x1071EAC")]
		public void SetLimbOrientation(Vector3 upper, Vector3 lower)
		{
		}

		[Token(Token = "0x6000913")]
		[Address(RVA = "0x1072164", Offset = "0x1072164", VA = "0x1072164")]
		public IKMappingLimb()
		{
		}

		[Token(Token = "0x6000914")]
		[Address(RVA = "0x10722B0", Offset = "0x10722B0", VA = "0x10722B0")]
		public IKMappingLimb(Transform bone1, Transform bone2, Transform bone3, [Optional] Transform parentBone)
		{
		}

		[Token(Token = "0x6000915")]
		[Address(RVA = "0x1072434", Offset = "0x1072434", VA = "0x1072434")]
		public void SetBones(Transform bone1, Transform bone2, Transform bone3, [Optional] Transform parentBone)
		{
		}

		[Token(Token = "0x6000916")]
		[Address(RVA = "0x1072494", Offset = "0x1072494", VA = "0x1072494")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000917")]
		[Address(RVA = "0x107252C", Offset = "0x107252C", VA = "0x107252C")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x6000918")]
		[Address(RVA = "0x10725D4", Offset = "0x10725D4", VA = "0x10725D4", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000919")]
		[Address(RVA = "0x1072888", Offset = "0x1072888", VA = "0x1072888")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x600091A")]
		[Address(RVA = "0x10728E8", Offset = "0x10728E8", VA = "0x10728E8")]
		public void WritePose(IKSolverFullBody solver, bool fullBody)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001AB")]
	public class IKMappingSpine : IKMapping
	{
		[Token(Token = "0x4000B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform[] spineBones;

		[Token(Token = "0x4000B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform leftUpperArmBone;

		[Token(Token = "0x4000B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform rightUpperArmBone;

		[Token(Token = "0x4000B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftThighBone;

		[Token(Token = "0x4000B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform rightThighBone;

		[Token(Token = "0x4000B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(1f, 3f)]
		public int iterations;

		[Token(Token = "0x4000B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 1f)]
		public float twistWeight;

		[Token(Token = "0x4000B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int rootNodeIndex;

		[Token(Token = "0x4000B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private BoneMap[] spine;

		[Token(Token = "0x4000B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BoneMap leftUpperArm;

		[Token(Token = "0x4000B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private BoneMap rightUpperArm;

		[Token(Token = "0x4000B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private BoneMap leftThigh;

		[Token(Token = "0x4000B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private BoneMap rightThigh;

		[Token(Token = "0x4000B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool useFABRIK;

		[Token(Token = "0x600091B")]
		[Address(RVA = "0x1072A30", Offset = "0x1072A30", VA = "0x1072A30", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600091C")]
		[Address(RVA = "0x1072D5C", Offset = "0x1072D5C", VA = "0x1072D5C")]
		public IKMappingSpine()
		{
		}

		[Token(Token = "0x600091D")]
		[Address(RVA = "0x1072ED4", Offset = "0x1072ED4", VA = "0x1072ED4")]
		public IKMappingSpine(Transform[] spineBones, Transform leftUpperArmBone, Transform rightUpperArmBone, Transform leftThighBone, Transform rightThighBone)
		{
		}

		[Token(Token = "0x600091E")]
		[Address(RVA = "0x107308C", Offset = "0x107308C", VA = "0x107308C")]
		public void SetBones(Transform[] spineBones, Transform leftUpperArmBone, Transform rightUpperArmBone, Transform leftThighBone, Transform rightThighBone)
		{
		}

		[Token(Token = "0x600091F")]
		[Address(RVA = "0x1073100", Offset = "0x1073100", VA = "0x1073100")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000920")]
		[Address(RVA = "0x107315C", Offset = "0x107315C", VA = "0x107315C")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x6000921")]
		[Address(RVA = "0x10731D4", Offset = "0x10731D4", VA = "0x10731D4", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000922")]
		[Address(RVA = "0x107384C", Offset = "0x107384C", VA = "0x107384C")]
		private bool UseFABRIK()
		{
			return default(bool);
		}

		[Token(Token = "0x6000923")]
		[Address(RVA = "0x1073884", Offset = "0x1073884", VA = "0x1073884")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x6000924")]
		[Address(RVA = "0x1073AE8", Offset = "0x1073AE8", VA = "0x1073AE8")]
		public void WritePose(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000925")]
		[Address(RVA = "0x1073E10", Offset = "0x1073E10", VA = "0x1073E10")]
		public void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x6000926")]
		[Address(RVA = "0x1073EF0", Offset = "0x1073EF0", VA = "0x1073EF0")]
		private void BackwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x6000927")]
		[Address(RVA = "0x1073FA4", Offset = "0x1073FA4", VA = "0x1073FA4")]
		private void MapToSolverPositions(IKSolverFullBody solver)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001AC")]
	public abstract class IKSolver
	{
		[Serializable]
		[Token(Token = "0x20001AD")]
		public class Point
		{
			[Token(Token = "0x4000B79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x4000B7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Range(0f, 1f)]
			public float weight;

			[Token(Token = "0x4000B7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 solverPosition;

			[Token(Token = "0x4000B7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Quaternion solverRotation;

			[Token(Token = "0x4000B7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Vector3 defaultLocalPosition;

			[Token(Token = "0x4000B7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public Quaternion defaultLocalRotation;

			[Token(Token = "0x600093E")]
			[Address(RVA = "0x1074694", Offset = "0x1074694", VA = "0x1074694")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x600093F")]
			[Address(RVA = "0x10746D8", Offset = "0x10746D8", VA = "0x10746D8")]
			public void FixTransform()
			{
			}

			[Token(Token = "0x6000940")]
			[Address(RVA = "0x10747B8", Offset = "0x10747B8", VA = "0x10747B8")]
			public void UpdateSolverPosition()
			{
			}

			[Token(Token = "0x6000941")]
			[Address(RVA = "0x10747E4", Offset = "0x10747E4", VA = "0x10747E4")]
			public void UpdateSolverLocalPosition()
			{
			}

			[Token(Token = "0x6000942")]
			[Address(RVA = "0x1074810", Offset = "0x1074810", VA = "0x1074810")]
			public void UpdateSolverState()
			{
			}

			[Token(Token = "0x6000943")]
			[Address(RVA = "0x1074854", Offset = "0x1074854", VA = "0x1074854")]
			public void UpdateSolverLocalState()
			{
			}

			[Token(Token = "0x6000944")]
			[Address(RVA = "0x1074898", Offset = "0x1074898", VA = "0x1074898")]
			public Point()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001AE")]
		public class Bone : Point
		{
			[Token(Token = "0x4000B7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public float length;

			[Token(Token = "0x4000B80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float sqrMag;

			[Token(Token = "0x4000B81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public Vector3 axis;

			[Token(Token = "0x4000B82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private RotationLimit _rotationLimit;

			[Token(Token = "0x4000B83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private bool isLimited;

			[Token(Token = "0x170000A9")]
			public RotationLimit rotationLimit
			{
				[Token(Token = "0x6000945")]
				[Address(RVA = "0x10748F8", Offset = "0x10748F8", VA = "0x10748F8")]
				get
				{
					return null;
				}
				[Token(Token = "0x6000946")]
				[Address(RVA = "0x10749E8", Offset = "0x10749E8", VA = "0x10749E8")]
				set
				{
				}
			}

			[Token(Token = "0x6000947")]
			[Address(RVA = "0x1074A6C", Offset = "0x1074A6C", VA = "0x1074A6C")]
			public void Swing(Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x6000948")]
			[Address(RVA = "0x1074CD8", Offset = "0x1074CD8", VA = "0x1074CD8")]
			public static void SolverSwing(Bone[] bones, int index, Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x6000949")]
			[Address(RVA = "0x1074F94", Offset = "0x1074F94", VA = "0x1074F94")]
			public void Swing2D(Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x600094A")]
			[Address(RVA = "0x1075188", Offset = "0x1075188", VA = "0x1075188")]
			public void SetToSolverPosition()
			{
			}

			[Token(Token = "0x600094B")]
			[Address(RVA = "0x10751B0", Offset = "0x10751B0", VA = "0x10751B0")]
			public Bone()
			{
			}

			[Token(Token = "0x600094C")]
			[Address(RVA = "0x107521C", Offset = "0x107521C", VA = "0x107521C")]
			public Bone(Transform transform)
			{
			}

			[Token(Token = "0x600094D")]
			[Address(RVA = "0x107529C", Offset = "0x107529C", VA = "0x107529C")]
			public Bone(Transform transform, float weight)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001AF")]
		public class Node : Point
		{
			[Token(Token = "0x4000B84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public float length;

			[Token(Token = "0x4000B85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float effectorPositionWeight;

			[Token(Token = "0x4000B86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public float effectorRotationWeight;

			[Token(Token = "0x4000B87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 offset;

			[Token(Token = "0x600094E")]
			[Address(RVA = "0x1075330", Offset = "0x1075330", VA = "0x1075330")]
			public Node()
			{
			}

			[Token(Token = "0x600094F")]
			[Address(RVA = "0x106B694", Offset = "0x106B694", VA = "0x106B694")]
			public Node(Transform transform)
			{
			}

			[Token(Token = "0x6000950")]
			[Address(RVA = "0x1075334", Offset = "0x1075334", VA = "0x1075334")]
			public Node(Transform transform, float weight)
			{
			}
		}

		[Token(Token = "0x20001B0")]
		public delegate void UpdateDelegate();

		[Token(Token = "0x20001B1")]
		public delegate void IterationDelegate(int i);

		[Token(Token = "0x4000B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		public bool executedInEditor;

		[Token(Token = "0x4000B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[HideInInspector]
		public Vector3 IKPosition;

		[Token(Token = "0x4000B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		[Tooltip("The positional or the master weight of the solver.")]
		public float IKPositionWeight;

		[Token(Token = "0x4000B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UpdateDelegate OnPreInitiate;

		[Token(Token = "0x4000B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UpdateDelegate OnPostInitiate;

		[Token(Token = "0x4000B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UpdateDelegate OnPreUpdate;

		[Token(Token = "0x4000B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UpdateDelegate OnPostUpdate;

		[Token(Token = "0x4000B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected bool firstInitiation;

		[Token(Token = "0x4000B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[HideInInspector]
		protected Transform root;

		[Token(Token = "0x170000A8")]
		public bool initiated
		{
			[Token(Token = "0x6000931")]
			[Address(RVA = "0x10742A0", Offset = "0x10742A0", VA = "0x10742A0")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000932")]
			[Address(RVA = "0x10742A8", Offset = "0x10742A8", VA = "0x10742A8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000928")]
		[Address(RVA = "0x10741E8", Offset = "0x10741E8", VA = "0x10741E8")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6000929")]
		public abstract bool IsValid(ref string message);

		[Token(Token = "0x600092A")]
		[Address(RVA = "0x1064EA4", Offset = "0x1064EA4", VA = "0x1064EA4")]
		public void Initiate(Transform root)
		{
		}

		[Token(Token = "0x600092B")]
		[Address(RVA = "0x1064DC8", Offset = "0x1064DC8", VA = "0x1064DC8")]
		public void Update()
		{
		}

		[Token(Token = "0x600092C")]
		[Address(RVA = "0x107425C", Offset = "0x107425C", VA = "0x107425C", Slot = "5")]
		public virtual Vector3 GetIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600092D")]
		[Address(RVA = "0x1074268", Offset = "0x1074268", VA = "0x1074268")]
		public void SetIKPosition(Vector3 position)
		{
		}

		[Token(Token = "0x600092E")]
		[Address(RVA = "0x1074274", Offset = "0x1074274", VA = "0x1074274")]
		public float GetIKPositionWeight()
		{
			return default(float);
		}

		[Token(Token = "0x600092F")]
		[Address(RVA = "0x107427C", Offset = "0x107427C", VA = "0x107427C")]
		public void SetIKPositionWeight(float weight)
		{
		}

		[Token(Token = "0x6000930")]
		[Address(RVA = "0x1074298", Offset = "0x1074298", VA = "0x1074298")]
		public Transform GetRoot()
		{
			return null;
		}

		[Token(Token = "0x6000933")]
		public abstract Point[] GetPoints();

		[Token(Token = "0x6000934")]
		public abstract Point GetPoint(Transform transform);

		[Token(Token = "0x6000935")]
		public abstract void FixTransforms();

		[Token(Token = "0x6000936")]
		public abstract void StoreDefaultLocalState();

		[Token(Token = "0x6000937")]
		protected abstract void OnInitiate();

		[Token(Token = "0x6000938")]
		protected abstract void OnUpdate();

		[Token(Token = "0x6000939")]
		[Address(RVA = "0x10742B4", Offset = "0x10742B4", VA = "0x10742B4")]
		protected void LogWarning(string message)
		{
		}

		[Token(Token = "0x600093A")]
		[Address(RVA = "0x10742CC", Offset = "0x10742CC", VA = "0x10742CC")]
		public static Transform ContainsDuplicateBone(Bone[] bones)
		{
			return null;
		}

		[Token(Token = "0x600093B")]
		[Address(RVA = "0x10743F0", Offset = "0x10743F0", VA = "0x10743F0")]
		public static bool HierarchyIsValid(Bone[] bones)
		{
			return default(bool);
		}

		[Token(Token = "0x600093C")]
		[Address(RVA = "0x1074488", Offset = "0x1074488", VA = "0x1074488")]
		protected static float PreSolveBones(ref Bone[] bones)
		{
			return default(float);
		}

		[Token(Token = "0x600093D")]
		[Address(RVA = "0x107467C", Offset = "0x107467C", VA = "0x107467C")]
		protected IKSolver()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001B2")]
	public class IKSolverAim : IKSolverHeuristic
	{
		[Token(Token = "0x4000B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform transform;

		[Token(Token = "0x4000B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Vector3 axis;

		[Token(Token = "0x4000B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public Vector3 poleAxis;

		[Token(Token = "0x4000B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Vector3 polePosition;

		[Token(Token = "0x4000B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Range(0f, 1f)]
		public float poleWeight;

		[Token(Token = "0x4000B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Transform poleTarget;

		[Token(Token = "0x4000B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Range(0f, 1f)]
		public float clampWeight;

		[Token(Token = "0x4000B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[Range(0f, 2f)]
		public int clampSmoothing;

		[Token(Token = "0x4000B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x4000B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float step;

		[Token(Token = "0x4000B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Vector3 clampedIKPosition;

		[Token(Token = "0x4000B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private RotationLimit transformLimit;

		[Token(Token = "0x4000B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Transform lastTransform;

		[Token(Token = "0x170000AA")]
		public Vector3 transformAxis
		{
			[Token(Token = "0x600095A")]
			[Address(RVA = "0x1075590", Offset = "0x1075590", VA = "0x1075590")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000AB")]
		public Vector3 transformPoleAxis
		{
			[Token(Token = "0x600095B")]
			[Address(RVA = "0x10755C0", Offset = "0x10755C0", VA = "0x10755C0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000AC")]
		protected override int minBones
		{
			[Token(Token = "0x600095E")]
			[Address(RVA = "0x1076210", Offset = "0x1076210", VA = "0x1076210", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000AD")]
		protected override Vector3 localDirection
		{
			[Token(Token = "0x6000962")]
			[Address(RVA = "0x1076750", Offset = "0x1076750", VA = "0x1076750", Slot = "15")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000959")]
		[Address(RVA = "0x1075458", Offset = "0x1075458", VA = "0x1075458")]
		public float GetAngle()
		{
			return default(float);
		}

		[Token(Token = "0x600095C")]
		[Address(RVA = "0x10755F0", Offset = "0x10755F0", VA = "0x10755F0", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x600095D")]
		[Address(RVA = "0x107587C", Offset = "0x107587C", VA = "0x107587C", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x600095F")]
		[Address(RVA = "0x1076168", Offset = "0x1076168", VA = "0x1076168")]
		private void Solve()
		{
		}

		[Token(Token = "0x6000960")]
		[Address(RVA = "0x1075E04", Offset = "0x1075E04", VA = "0x1075E04")]
		private Vector3 GetClampedIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000961")]
		[Address(RVA = "0x1076218", Offset = "0x1076218", VA = "0x1076218")]
		private void RotateToTarget(Vector3 targetPosition, Bone bone, float weight)
		{
		}

		[Token(Token = "0x6000963")]
		[Address(RVA = "0x10767B0", Offset = "0x10767B0", VA = "0x10767B0")]
		public IKSolverAim()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001B3")]
	public class IKSolverArm : IKSolver
	{
		[Token(Token = "0x4000B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Range(0f, 1f)]
		public float IKRotationWeight;

		[Token(Token = "0x4000B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Quaternion IKRotation;

		[Token(Token = "0x4000B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Point chest;

		[Token(Token = "0x4000B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Point shoulder;

		[Token(Token = "0x4000B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Point upperArm;

		[Token(Token = "0x4000B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Point forearm;

		[Token(Token = "0x4000B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Point hand;

		[Token(Token = "0x4000B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool isLeft;

		[Token(Token = "0x4000B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public IKSolverVR.Arm arm;

		[Token(Token = "0x4000B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3[] positions;

		[Token(Token = "0x4000B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Quaternion[] rotations;

		[Token(Token = "0x6000964")]
		[Address(RVA = "0x1077854", Offset = "0x1077854", VA = "0x1077854", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000965")]
		[Address(RVA = "0x1077BF8", Offset = "0x1077BF8", VA = "0x1077BF8")]
		public bool SetChain(Transform chest, Transform shoulder, Transform upperArm, Transform forearm, Transform hand, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x6000966")]
		[Address(RVA = "0x1077CAC", Offset = "0x1077CAC", VA = "0x1077CAC", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000967")]
		[Address(RVA = "0x1077E2C", Offset = "0x1077E2C", VA = "0x1077E2C", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000968")]
		[Address(RVA = "0x1077F8C", Offset = "0x1077F8C", VA = "0x1077F8C", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000969")]
		[Address(RVA = "0x1077FDC", Offset = "0x1077FDC", VA = "0x1077FDC", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x600096A")]
		[Address(RVA = "0x107803C", Offset = "0x107803C", VA = "0x107803C", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x600096B")]
		[Address(RVA = "0x107839C", Offset = "0x107839C", VA = "0x107839C", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x600096C")]
		[Address(RVA = "0x10783BC", Offset = "0x10783BC", VA = "0x10783BC")]
		private void Solve()
		{
		}

		[Token(Token = "0x600096D")]
		[Address(RVA = "0x1078094", Offset = "0x1078094", VA = "0x1078094")]
		private void Read()
		{
		}

		[Token(Token = "0x600096E")]
		[Address(RVA = "0x1078424", Offset = "0x1078424", VA = "0x1078424")]
		private void Write()
		{
		}

		[Token(Token = "0x600096F")]
		[Address(RVA = "0x107859C", Offset = "0x107859C", VA = "0x107859C")]
		public IKSolverArm()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001B4")]
	public class IKSolverCCD : IKSolverHeuristic
	{
		[Token(Token = "0x4000BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x6000970")]
		[Address(RVA = "0x1078794", Offset = "0x1078794", VA = "0x1078794")]
		public void FadeOutBoneWeights()
		{
		}

		[Token(Token = "0x6000971")]
		[Address(RVA = "0x1078804", Offset = "0x1078804", VA = "0x1078804", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000972")]
		[Address(RVA = "0x1078D04", Offset = "0x1078D04", VA = "0x1078D04", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000973")]
		[Address(RVA = "0x10793E4", Offset = "0x10793E4", VA = "0x10793E4")]
		protected void Solve(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x6000974")]
		[Address(RVA = "0x1079A84", Offset = "0x1079A84", VA = "0x1079A84")]
		public IKSolverCCD()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001B5")]
	public class IKSolverFABRIK : IKSolverHeuristic
	{
		[Token(Token = "0x4000BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x4000BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool[] limitedBones;

		[Token(Token = "0x4000BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3[] solverLocalPositions;

		[Token(Token = "0x170000AE")]
		protected override bool boneLengthCanBeZero
		{
			[Token(Token = "0x600097A")]
			[Address(RVA = "0x107AAD8", Offset = "0x107AAD8", VA = "0x107AAD8", Slot = "13")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000975")]
		[Address(RVA = "0x1079AFC", Offset = "0x1079AFC", VA = "0x1079AFC")]
		public void SolveForward(Vector3 position)
		{
		}

		[Token(Token = "0x6000976")]
		[Address(RVA = "0x107A0D8", Offset = "0x107A0D8", VA = "0x107A0D8")]
		public void SolveBackward(Vector3 position)
		{
		}

		[Token(Token = "0x6000977")]
		[Address(RVA = "0x107A204", Offset = "0x107A204", VA = "0x107A204", Slot = "5")]
		public override Vector3 GetIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000978")]
		[Address(RVA = "0x107A28C", Offset = "0x107A28C", VA = "0x107A28C", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000979")]
		[Address(RVA = "0x107A7A0", Offset = "0x107A7A0", VA = "0x107A7A0", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x600097B")]
		[Address(RVA = "0x107AAE0", Offset = "0x107AAE0", VA = "0x107AAE0")]
		private Vector3 SolveJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600097C")]
		[Address(RVA = "0x1079BD0", Offset = "0x1079BD0", VA = "0x1079BD0")]
		private void OnPreSolve()
		{
		}

		[Token(Token = "0x600097D")]
		[Address(RVA = "0x107A1BC", Offset = "0x107A1BC", VA = "0x107A1BC")]
		private void OnPostSolve()
		{
		}

		[Token(Token = "0x600097E")]
		[Address(RVA = "0x107AA90", Offset = "0x107AA90", VA = "0x107AA90")]
		private void Solve(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x600097F")]
		[Address(RVA = "0x1079F6C", Offset = "0x1079F6C", VA = "0x1079F6C")]
		private void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x6000980")]
		[Address(RVA = "0x107B194", Offset = "0x107B194", VA = "0x107B194")]
		private void SolverMove(int index, Vector3 offset)
		{
		}

		[Token(Token = "0x6000981")]
		[Address(RVA = "0x107B1FC", Offset = "0x107B1FC", VA = "0x107B1FC")]
		private void SolverRotate(int index, Quaternion rotation, bool recursive)
		{
		}

		[Token(Token = "0x6000982")]
		[Address(RVA = "0x107B2CC", Offset = "0x107B2CC", VA = "0x107B2CC")]
		private void SolverRotateChildren(int index, Quaternion rotation)
		{
		}

		[Token(Token = "0x6000983")]
		[Address(RVA = "0x107B394", Offset = "0x107B394", VA = "0x107B394")]
		private void SolverMoveChildrenAroundPoint(int index, Quaternion rotation)
		{
		}

		[Token(Token = "0x6000984")]
		[Address(RVA = "0x107A518", Offset = "0x107A518", VA = "0x107A518")]
		private Quaternion GetParentSolverRotation(int index)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000985")]
		[Address(RVA = "0x107A65C", Offset = "0x107A65C", VA = "0x107A65C")]
		private Vector3 GetParentSolverPosition(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000986")]
		[Address(RVA = "0x107B484", Offset = "0x107B484", VA = "0x107B484")]
		private Quaternion GetLimitedRotation(int index, Quaternion q, out bool changed)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000987")]
		[Address(RVA = "0x107AD80", Offset = "0x107AD80", VA = "0x107AD80")]
		private void LimitForward(int rotateBone, int limitBone)
		{
		}

		[Token(Token = "0x6000988")]
		[Address(RVA = "0x107A1AC", Offset = "0x107A1AC", VA = "0x107A1AC")]
		private void BackwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x6000989")]
		[Address(RVA = "0x107BAFC", Offset = "0x107BAFC", VA = "0x107BAFC")]
		private void BackwardReachUnlimited(Vector3 position)
		{
		}

		[Token(Token = "0x600098A")]
		[Address(RVA = "0x107B648", Offset = "0x107B648", VA = "0x107B648")]
		private void BackwardReachLimited(Vector3 position)
		{
		}

		[Token(Token = "0x600098B")]
		[Address(RVA = "0x107ABFC", Offset = "0x107ABFC", VA = "0x107ABFC")]
		private void MapToSolverPositions()
		{
		}

		[Token(Token = "0x600098C")]
		[Address(RVA = "0x107ACD0", Offset = "0x107ACD0", VA = "0x107ACD0")]
		private void MapToSolverPositionsLimited()
		{
		}

		[Token(Token = "0x600098D")]
		[Address(RVA = "0x107BBB4", Offset = "0x107BBB4", VA = "0x107BBB4")]
		public IKSolverFABRIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001B6")]
	public class IKSolverFABRIKRoot : IKSolver
	{
		[Token(Token = "0x4000BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int iterations;

		[Token(Token = "0x4000BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Range(0f, 1f)]
		public float rootPin;

		[Token(Token = "0x4000BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FABRIKChain[] chains;

		[Token(Token = "0x4000BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool zeroWeightApplied;

		[Token(Token = "0x4000BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool[] isRoot;

		[Token(Token = "0x4000BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 rootDefaultPosition;

		[Token(Token = "0x600098E")]
		[Address(RVA = "0x107BC4C", Offset = "0x107BC4C", VA = "0x107BC4C", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600098F")]
		[Address(RVA = "0x107C310", Offset = "0x107C310", VA = "0x107C310", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000990")]
		[Address(RVA = "0x107C39C", Offset = "0x107C39C", VA = "0x107C39C", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6000991")]
		[Address(RVA = "0x107C430", Offset = "0x107C430", VA = "0x107C430", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000992")]
		[Address(RVA = "0x107C528", Offset = "0x107C528", VA = "0x107C528")]
		private bool IsRoot(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6000993")]
		[Address(RVA = "0x107C5B8", Offset = "0x107C5B8", VA = "0x107C5B8", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000994")]
		[Address(RVA = "0x107C9B8", Offset = "0x107C9B8", VA = "0x107C9B8", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000995")]
		[Address(RVA = "0x107CBB0", Offset = "0x107CBB0", VA = "0x107CBB0", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000996")]
		[Address(RVA = "0x107CA58", Offset = "0x107CA58", VA = "0x107CA58")]
		private void AddPointsToArray(ref Point[] array, FABRIKChain chain)
		{
		}

		[Token(Token = "0x6000997")]
		[Address(RVA = "0x107C790", Offset = "0x107C790", VA = "0x107C790")]
		private Vector3 GetCentroid()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000998")]
		[Address(RVA = "0x107CC34", Offset = "0x107CC34", VA = "0x107CC34")]
		public IKSolverFABRIKRoot()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001B7")]
	public class IKSolverFullBody : IKSolver
	{
		[Token(Token = "0x4000BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Range(0f, 10f)]
		public int iterations;

		[Token(Token = "0x4000BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FBIKChain[] chain;

		[Token(Token = "0x4000BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public IKEffector[] effectors;

		[Token(Token = "0x4000BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public IKMappingSpine spineMapping;

		[Token(Token = "0x4000BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public IKMappingBone[] boneMappings;

		[Token(Token = "0x4000BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public IKMappingLimb[] limbMappings;

		[Token(Token = "0x4000BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool FABRIKPass;

		[Token(Token = "0x4000BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public UpdateDelegate OnPreRead;

		[Token(Token = "0x4000BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public UpdateDelegate OnPreSolve;

		[Token(Token = "0x4000BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x4000BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public IterationDelegate OnPostIteration;

		[Token(Token = "0x4000BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public UpdateDelegate OnPreBend;

		[Token(Token = "0x4000BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public UpdateDelegate OnPostSolve;

		[Token(Token = "0x4000BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public UpdateDelegate OnStoreDefaultLocalState;

		[Token(Token = "0x4000BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public UpdateDelegate OnFixTransforms;

		[Token(Token = "0x6000999")]
		[Address(RVA = "0x107CCA0", Offset = "0x107CCA0", VA = "0x107CCA0")]
		public IKEffector GetEffector(Transform t)
		{
			return null;
		}

		[Token(Token = "0x600099A")]
		[Address(RVA = "0x107CD7C", Offset = "0x107CD7C", VA = "0x107CD7C")]
		public FBIKChain GetChain(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x600099B")]
		[Address(RVA = "0x107CDC4", Offset = "0x107CDC4", VA = "0x107CDC4")]
		public int GetChainIndex(Transform transform)
		{
			return default(int);
		}

		[Token(Token = "0x600099C")]
		[Address(RVA = "0x107CED8", Offset = "0x107CED8", VA = "0x107CED8")]
		public Node GetNode(int chainIndex, int nodeIndex)
		{
			return null;
		}

		[Token(Token = "0x600099D")]
		[Address(RVA = "0x107CF28", Offset = "0x107CF28", VA = "0x107CF28")]
		public void GetChainAndNodeIndexes(Transform transform, out int chainIndex, out int nodeIndex)
		{
		}

		[Token(Token = "0x600099E")]
		[Address(RVA = "0x107CF9C", Offset = "0x107CF9C", VA = "0x107CF9C", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x600099F")]
		[Address(RVA = "0x107D13C", Offset = "0x107D13C", VA = "0x107D13C", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x60009A0")]
		[Address(RVA = "0x107D298", Offset = "0x107D298", VA = "0x107D298", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60009A1")]
		[Address(RVA = "0x107D49C", Offset = "0x107D49C", VA = "0x107D49C", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60009A2")]
		[Address(RVA = "0x107D570", Offset = "0x107D570", VA = "0x107D570", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x60009A3")]
		[Address(RVA = "0x107D658", Offset = "0x107D658", VA = "0x107D658", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60009A4")]
		[Address(RVA = "0x107D7B8", Offset = "0x107D7B8", VA = "0x107D7B8", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60009A5")]
		[Address(RVA = "0x107D954", Offset = "0x107D954", VA = "0x107D954", Slot = "12")]
		protected virtual void ReadPose()
		{
		}

		[Token(Token = "0x60009A6")]
		[Address(RVA = "0x107DB8C", Offset = "0x107DB8C", VA = "0x107DB8C", Slot = "13")]
		protected virtual void Solve()
		{
		}

		[Token(Token = "0x60009A7")]
		[Address(RVA = "0x107DE6C", Offset = "0x107DE6C", VA = "0x107DE6C", Slot = "14")]
		protected virtual void ApplyBendConstraints()
		{
		}

		[Token(Token = "0x60009A8")]
		[Address(RVA = "0x107DEA4", Offset = "0x107DEA4", VA = "0x107DEA4", Slot = "15")]
		protected virtual void WritePose()
		{
		}

		[Token(Token = "0x60009A9")]
		[Address(RVA = "0x107DF88", Offset = "0x107DF88", VA = "0x107DF88")]
		public IKSolverFullBody()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001B8")]
	public enum FullBodyBipedEffector
	{
		[Token(Token = "0x4000BBA")]
		Body,
		[Token(Token = "0x4000BBB")]
		LeftShoulder,
		[Token(Token = "0x4000BBC")]
		RightShoulder,
		[Token(Token = "0x4000BBD")]
		LeftThigh,
		[Token(Token = "0x4000BBE")]
		RightThigh,
		[Token(Token = "0x4000BBF")]
		LeftHand,
		[Token(Token = "0x4000BC0")]
		RightHand,
		[Token(Token = "0x4000BC1")]
		LeftFoot,
		[Token(Token = "0x4000BC2")]
		RightFoot
	}
	[Serializable]
	[Token(Token = "0x20001B9")]
	public enum FullBodyBipedChain
	{
		[Token(Token = "0x4000BC4")]
		LeftArm,
		[Token(Token = "0x4000BC5")]
		RightArm,
		[Token(Token = "0x4000BC6")]
		LeftLeg,
		[Token(Token = "0x4000BC7")]
		RightLeg
	}
	[Serializable]
	[Token(Token = "0x20001BA")]
	public class IKSolverFullBodyBiped : IKSolverFullBody
	{
		[Token(Token = "0x4000BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Transform rootNode;

		[Token(Token = "0x4000BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Range(0f, 1f)]
		public float spineStiffness;

		[Token(Token = "0x4000BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[Range(-1f, 1f)]
		public float pullBodyVertical;

		[Token(Token = "0x4000BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Range(-1f, 1f)]
		public float pullBodyHorizontal;

		[Token(Token = "0x4000BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Vector3 offset;

		[Token(Token = "0x170000AF")]
		public IKEffector bodyEffector
		{
			[Token(Token = "0x60009AA")]
			[Address(RVA = "0x107E0D4", Offset = "0x107E0D4", VA = "0x107E0D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B0")]
		public IKEffector leftShoulderEffector
		{
			[Token(Token = "0x60009AB")]
			[Address(RVA = "0x107E214", Offset = "0x107E214", VA = "0x107E214")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B1")]
		public IKEffector rightShoulderEffector
		{
			[Token(Token = "0x60009AC")]
			[Address(RVA = "0x107E21C", Offset = "0x107E21C", VA = "0x107E21C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B2")]
		public IKEffector leftThighEffector
		{
			[Token(Token = "0x60009AD")]
			[Address(RVA = "0x107E224", Offset = "0x107E224", VA = "0x107E224")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B3")]
		public IKEffector rightThighEffector
		{
			[Token(Token = "0x60009AE")]
			[Address(RVA = "0x107E22C", Offset = "0x107E22C", VA = "0x107E22C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B4")]
		public IKEffector leftHandEffector
		{
			[Token(Token = "0x60009AF")]
			[Address(RVA = "0x107E234", Offset = "0x107E234", VA = "0x107E234")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B5")]
		public IKEffector rightHandEffector
		{
			[Token(Token = "0x60009B0")]
			[Address(RVA = "0x107E23C", Offset = "0x107E23C", VA = "0x107E23C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B6")]
		public IKEffector leftFootEffector
		{
			[Token(Token = "0x60009B1")]
			[Address(RVA = "0x107E244", Offset = "0x107E244", VA = "0x107E244")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B7")]
		public IKEffector rightFootEffector
		{
			[Token(Token = "0x60009B2")]
			[Address(RVA = "0x107E24C", Offset = "0x107E24C", VA = "0x107E24C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B8")]
		public FBIKChain leftArmChain
		{
			[Token(Token = "0x60009B3")]
			[Address(RVA = "0x107E254", Offset = "0x107E254", VA = "0x107E254")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B9")]
		public FBIKChain rightArmChain
		{
			[Token(Token = "0x60009B4")]
			[Address(RVA = "0x107E280", Offset = "0x107E280", VA = "0x107E280")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BA")]
		public FBIKChain leftLegChain
		{
			[Token(Token = "0x60009B5")]
			[Address(RVA = "0x107E2AC", Offset = "0x107E2AC", VA = "0x107E2AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BB")]
		public FBIKChain rightLegChain
		{
			[Token(Token = "0x60009B6")]
			[Address(RVA = "0x107E2D8", Offset = "0x107E2D8", VA = "0x107E2D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BC")]
		public IKMappingLimb leftArmMapping
		{
			[Token(Token = "0x60009B7")]
			[Address(RVA = "0x107E304", Offset = "0x107E304", VA = "0x107E304")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BD")]
		public IKMappingLimb rightArmMapping
		{
			[Token(Token = "0x60009B8")]
			[Address(RVA = "0x107E32C", Offset = "0x107E32C", VA = "0x107E32C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BE")]
		public IKMappingLimb leftLegMapping
		{
			[Token(Token = "0x60009B9")]
			[Address(RVA = "0x107E358", Offset = "0x107E358", VA = "0x107E358")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BF")]
		public IKMappingLimb rightLegMapping
		{
			[Token(Token = "0x60009BA")]
			[Address(RVA = "0x107E384", Offset = "0x107E384", VA = "0x107E384")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C0")]
		public IKMappingBone headMapping
		{
			[Token(Token = "0x60009BB")]
			[Address(RVA = "0x107E3B0", Offset = "0x107E3B0", VA = "0x107E3B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C1")]
		public Vector3 pullBodyOffset
		{
			[Token(Token = "0x60009CB")]
			[Address(RVA = "0x10805EC", Offset = "0x10805EC", VA = "0x10805EC")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60009CC")]
			[Address(RVA = "0x10805F8", Offset = "0x10805F8", VA = "0x10805F8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60009BC")]
		[Address(RVA = "0x107E3D8", Offset = "0x107E3D8", VA = "0x107E3D8")]
		public void SetChainWeights(FullBodyBipedChain c, float pull, float reach = 0f)
		{
		}

		[Token(Token = "0x60009BD")]
		[Address(RVA = "0x107E4D8", Offset = "0x107E4D8", VA = "0x107E4D8")]
		public void SetEffectorWeights(FullBodyBipedEffector effector, float positionWeight, float rotationWeight)
		{
		}

		[Token(Token = "0x60009BE")]
		[Address(RVA = "0x107E428", Offset = "0x107E428", VA = "0x107E428")]
		public FBIKChain GetChain(FullBodyBipedChain c)
		{
			return null;
		}

		[Token(Token = "0x60009BF")]
		[Address(RVA = "0x107E550", Offset = "0x107E550", VA = "0x107E550")]
		public FBIKChain GetChain(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x60009C0")]
		[Address(RVA = "0x107E0DC", Offset = "0x107E0DC", VA = "0x107E0DC")]
		public IKEffector GetEffector(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x60009C1")]
		[Address(RVA = "0x107E618", Offset = "0x107E618", VA = "0x107E618")]
		public IKEffector GetEndEffector(FullBodyBipedChain c)
		{
			return null;
		}

		[Token(Token = "0x60009C2")]
		[Address(RVA = "0x107E6C8", Offset = "0x107E6C8", VA = "0x107E6C8")]
		public IKMappingLimb GetLimbMapping(FullBodyBipedChain chain)
		{
			return null;
		}

		[Token(Token = "0x60009C3")]
		[Address(RVA = "0x107E774", Offset = "0x107E774", VA = "0x107E774")]
		public IKMappingLimb GetLimbMapping(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x60009C4")]
		[Address(RVA = "0x107E820", Offset = "0x107E820", VA = "0x107E820")]
		public IKMappingSpine GetSpineMapping()
		{
			return null;
		}

		[Token(Token = "0x60009C5")]
		[Address(RVA = "0x107E828", Offset = "0x107E828", VA = "0x107E828")]
		public IKMappingBone GetHeadMapping()
		{
			return null;
		}

		[Token(Token = "0x60009C6")]
		[Address(RVA = "0x107E850", Offset = "0x107E850", VA = "0x107E850")]
		public IKConstraintBend GetBendConstraint(FullBodyBipedChain limb)
		{
			return null;
		}

		[Token(Token = "0x60009C7")]
		[Address(RVA = "0x107E910", Offset = "0x107E910", VA = "0x107E910", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60009C8")]
		[Address(RVA = "0x107EAA4", Offset = "0x107EAA4", VA = "0x107EAA4")]
		public void SetToReferences(BipedReferences references, [Optional] Transform rootNode)
		{
		}

		[Token(Token = "0x60009C9")]
		[Address(RVA = "0x107FEE4", Offset = "0x107FEE4", VA = "0x107FEE4")]
		public static Transform DetectRootNodeBone(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x60009CA")]
		[Address(RVA = "0x1080494", Offset = "0x1080494", VA = "0x1080494")]
		public void SetLimbOrientations(BipedLimbOrientations o)
		{
		}

		[Token(Token = "0x60009CD")]
		[Address(RVA = "0x10804F0", Offset = "0x10804F0", VA = "0x10804F0")]
		private void SetLimbOrientation(FullBodyBipedChain chain, BipedLimbOrientations.LimbOrientation limbOrientation)
		{
		}

		[Token(Token = "0x60009CE")]
		[Address(RVA = "0x1080334", Offset = "0x1080334", VA = "0x1080334")]
		private static Transform GetLeftClavicle(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x60009CF")]
		[Address(RVA = "0x10803E4", Offset = "0x10803E4", VA = "0x10803E4")]
		private static Transform GetRightClavicle(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x60009D0")]
		[Address(RVA = "0x1080604", Offset = "0x1080604", VA = "0x1080604")]
		private static bool Contains(Transform[] array, Transform transform)
		{
			return default(bool);
		}

		[Token(Token = "0x60009D1")]
		[Address(RVA = "0x10806C8", Offset = "0x10806C8", VA = "0x10806C8", Slot = "12")]
		protected override void ReadPose()
		{
		}

		[Token(Token = "0x60009D2")]
		[Address(RVA = "0x1080798", Offset = "0x1080798", VA = "0x1080798")]
		private void PullBody()
		{
		}

		[Token(Token = "0x60009D3")]
		[Address(RVA = "0x10808B4", Offset = "0x10808B4", VA = "0x10808B4")]
		private Vector3 GetBodyOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009D4")]
		[Address(RVA = "0x1080A44", Offset = "0x1080A44", VA = "0x1080A44")]
		private Vector3 GetHandBodyPull(IKEffector effector, FBIKChain arm, Vector3 offset)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009D5")]
		[Address(RVA = "0x1080BBC", Offset = "0x1080BBC", VA = "0x1080BBC", Slot = "14")]
		protected override void ApplyBendConstraints()
		{
		}

		[Token(Token = "0x60009D6")]
		[Address(RVA = "0x1080E1C", Offset = "0x1080E1C", VA = "0x1080E1C", Slot = "15")]
		protected override void WritePose()
		{
		}

		[Token(Token = "0x60009D7")]
		[Address(RVA = "0x1080E94", Offset = "0x1080E94", VA = "0x1080E94")]
		public IKSolverFullBodyBiped()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001BB")]
	public class IKSolverHeuristic : IKSolver
	{
		[Token(Token = "0x4000BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x4000BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float tolerance;

		[Token(Token = "0x4000BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int maxIterations;

		[Token(Token = "0x4000BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool useRotationLimits;

		[Token(Token = "0x4000BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool XY;

		[Token(Token = "0x4000BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Bone[] bones;

		[Token(Token = "0x4000BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Vector3 lastLocalDirection;

		[Token(Token = "0x4000BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected float chainLength;

		[Token(Token = "0x170000C2")]
		protected virtual int minBones
		{
			[Token(Token = "0x60009DF")]
			[Address(RVA = "0x1081734", Offset = "0x1081734", VA = "0x1081734", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000C3")]
		protected virtual bool boneLengthCanBeZero
		{
			[Token(Token = "0x60009E0")]
			[Address(RVA = "0x108173C", Offset = "0x108173C", VA = "0x108173C", Slot = "13")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C4")]
		protected virtual bool allowCommonParent
		{
			[Token(Token = "0x60009E1")]
			[Address(RVA = "0x1081744", Offset = "0x1081744", VA = "0x1081744", Slot = "14")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C5")]
		protected virtual Vector3 localDirection
		{
			[Token(Token = "0x60009E5")]
			[Address(RVA = "0x1081754", Offset = "0x1081754", VA = "0x1081754", Slot = "15")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000C6")]
		protected float positionOffset
		{
			[Token(Token = "0x60009E6")]
			[Address(RVA = "0x107939C", Offset = "0x107939C", VA = "0x107939C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60009D8")]
		[Address(RVA = "0x1080EA0", Offset = "0x1080EA0", VA = "0x1080EA0")]
		public bool SetChain(Transform[] hierarchy, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x60009D9")]
		[Address(RVA = "0x1081050", Offset = "0x1081050", VA = "0x1081050")]
		public void AddBone(Transform bone)
		{
		}

		[Token(Token = "0x60009DA")]
		[Address(RVA = "0x108119C", Offset = "0x108119C", VA = "0x108119C", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60009DB")]
		[Address(RVA = "0x10811FC", Offset = "0x10811FC", VA = "0x10811FC", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x60009DC")]
		[Address(RVA = "0x1081270", Offset = "0x1081270", VA = "0x1081270", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60009DD")]
		[Address(RVA = "0x1081650", Offset = "0x1081650", VA = "0x1081650", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x60009DE")]
		[Address(RVA = "0x1081658", Offset = "0x1081658", VA = "0x1081658", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x60009E2")]
		[Address(RVA = "0x108174C", Offset = "0x108174C", VA = "0x108174C", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60009E3")]
		[Address(RVA = "0x1081750", Offset = "0x1081750", VA = "0x1081750", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60009E4")]
		[Address(RVA = "0x1078870", Offset = "0x1078870", VA = "0x1078870")]
		protected void InitiateBones()
		{
		}

		[Token(Token = "0x60009E7")]
		[Address(RVA = "0x1078FE4", Offset = "0x1078FE4", VA = "0x1078FE4")]
		protected Vector3 GetSingularityOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009E8")]
		[Address(RVA = "0x1081810", Offset = "0x1081810", VA = "0x1081810")]
		private bool SingularityDetected()
		{
			return default(bool);
		}

		[Token(Token = "0x60009E9")]
		[Address(RVA = "0x1079A88", Offset = "0x1079A88", VA = "0x1079A88")]
		public IKSolverHeuristic()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001BC")]
	public class IKSolverLeg : IKSolver
	{
		[Token(Token = "0x4000BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Range(0f, 1f)]
		public float IKRotationWeight;

		[Token(Token = "0x4000BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Quaternion IKRotation;

		[Token(Token = "0x4000BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Point pelvis;

		[Token(Token = "0x4000BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Point thigh;

		[Token(Token = "0x4000BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Point calf;

		[Token(Token = "0x4000BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Point foot;

		[Token(Token = "0x4000BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Point toe;

		[Token(Token = "0x4000BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public IKSolverVR.Leg leg;

		[Token(Token = "0x4000BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Vector3 heelOffset;

		[Token(Token = "0x4000BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3[] positions;

		[Token(Token = "0x4000BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Quaternion[] rotations;

		[Token(Token = "0x60009EA")]
		[Address(RVA = "0x1081AA4", Offset = "0x1081AA4", VA = "0x1081AA4", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60009EB")]
		[Address(RVA = "0x1081E48", Offset = "0x1081E48", VA = "0x1081E48")]
		public bool SetChain(Transform pelvis, Transform thigh, Transform calf, Transform foot, Transform toe, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x60009EC")]
		[Address(RVA = "0x1081EFC", Offset = "0x1081EFC", VA = "0x1081EFC", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x60009ED")]
		[Address(RVA = "0x108207C", Offset = "0x108207C", VA = "0x108207C", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x60009EE")]
		[Address(RVA = "0x10821DC", Offset = "0x10821DC", VA = "0x10821DC", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60009EF")]
		[Address(RVA = "0x108222C", Offset = "0x108222C", VA = "0x108222C", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x60009F0")]
		[Address(RVA = "0x108228C", Offset = "0x108228C", VA = "0x108228C", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60009F1")]
		[Address(RVA = "0x10825EC", Offset = "0x10825EC", VA = "0x10825EC", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60009F2")]
		[Address(RVA = "0x108260C", Offset = "0x108260C", VA = "0x108260C")]
		private void Solve()
		{
		}

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0x10822E4", Offset = "0x10822E4", VA = "0x10822E4")]
		private void Read()
		{
		}

		[Token(Token = "0x60009F4")]
		[Address(RVA = "0x108269C", Offset = "0x108269C", VA = "0x108269C")]
		private void Write()
		{
		}

		[Token(Token = "0x60009F5")]
		[Address(RVA = "0x1082814", Offset = "0x1082814", VA = "0x1082814")]
		public IKSolverLeg()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001BD")]
	public class IKSolverLimb : IKSolverTrigonometric
	{
		[Serializable]
		[Token(Token = "0x20001BE")]
		public enum BendModifier
		{
			[Token(Token = "0x4000BF2")]
			Animation,
			[Token(Token = "0x4000BF3")]
			Target,
			[Token(Token = "0x4000BF4")]
			Parent,
			[Token(Token = "0x4000BF5")]
			Arm,
			[Token(Token = "0x4000BF6")]
			Goal
		}

		[Serializable]
		[Token(Token = "0x20001BF")]
		public struct AxisDirection
		{
			[Token(Token = "0x4000BF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 direction;

			[Token(Token = "0x4000BF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 axis;

			[Token(Token = "0x4000BF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float dot;

			[Token(Token = "0x6000A00")]
			[Address(RVA = "0x1083E4C", Offset = "0x1083E4C", VA = "0x1083E4C")]
			public AxisDirection(Vector3 direction, Vector3 axis)
			{
			}
		}

		[Token(Token = "0x4000BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public AvatarIKGoal goal;

		[Token(Token = "0x4000BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public BendModifier bendModifier;

		[Token(Token = "0x4000BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Range(0f, 1f)]
		public float maintainRotationWeight;

		[Token(Token = "0x4000BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Range(0f, 1f)]
		public float bendModifierWeight;

		[Token(Token = "0x4000BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Transform bendGoal;

		[Token(Token = "0x4000BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool maintainBendFor1Frame;

		[Token(Token = "0x4000BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		private bool maintainRotationFor1Frame;

		[Token(Token = "0x4000BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Quaternion defaultRootRotation;

		[Token(Token = "0x4000BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Quaternion parentDefaultRotation;

		[Token(Token = "0x4000BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Quaternion bone3RotationBeforeSolve;

		[Token(Token = "0x4000BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private Quaternion maintainRotation;

		[Token(Token = "0x4000BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private Quaternion bone3DefaultRotation;

		[Token(Token = "0x4000BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private Vector3 _bendNormal;

		[Token(Token = "0x4000BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Vector3 animationNormal;

		[Token(Token = "0x4000BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private AxisDirection[] axisDirectionsLeft;

		[Token(Token = "0x4000BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private AxisDirection[] axisDirectionsRight;

		[Token(Token = "0x170000C7")]
		private AxisDirection[] axisDirections
		{
			[Token(Token = "0x60009FD")]
			[Address(RVA = "0x1083E30", Offset = "0x1083E30", VA = "0x1083E30")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009F6")]
		[Address(RVA = "0x1082A0C", Offset = "0x1082A0C", VA = "0x1082A0C")]
		public void MaintainRotation()
		{
		}

		[Token(Token = "0x60009F7")]
		[Address(RVA = "0x1082A50", Offset = "0x1082A50", VA = "0x1082A50")]
		public void MaintainBend()
		{
		}

		[Token(Token = "0x60009F8")]
		[Address(RVA = "0x1082ABC", Offset = "0x1082ABC", VA = "0x1082ABC", Slot = "12")]
		protected override void OnInitiateVirtual()
		{
		}

		[Token(Token = "0x60009F9")]
		[Address(RVA = "0x1083004", Offset = "0x1083004", VA = "0x1083004", Slot = "13")]
		protected override void OnUpdateVirtual()
		{
		}

		[Token(Token = "0x60009FA")]
		[Address(RVA = "0x1083B20", Offset = "0x1083B20", VA = "0x1083B20", Slot = "14")]
		protected override void OnPostSolveVirtual()
		{
		}

		[Token(Token = "0x60009FB")]
		[Address(RVA = "0x1083BC8", Offset = "0x1083BC8", VA = "0x1083BC8")]
		public IKSolverLimb()
		{
		}

		[Token(Token = "0x60009FC")]
		[Address(RVA = "0x1083D98", Offset = "0x1083D98", VA = "0x1083D98")]
		public IKSolverLimb(AvatarIKGoal goal)
		{
		}

		[Token(Token = "0x60009FE")]
		[Address(RVA = "0x1082E18", Offset = "0x1082E18", VA = "0x1082E18")]
		private void StoreAxisDirections(ref AxisDirection[] axisDirections)
		{
		}

		[Token(Token = "0x60009FF")]
		[Address(RVA = "0x10830C0", Offset = "0x10830C0", VA = "0x10830C0")]
		private Vector3 GetModifiedBendNormal()
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x20001C0")]
	public class IKSolverLookAt : IKSolver
	{
		[Serializable]
		[Token(Token = "0x20001C1")]
		public class LookAtBone : Bone
		{
			[Token(Token = "0x4000C0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			public Vector3 baseForwardOffsetEuler;

			[Token(Token = "0x170000CE")]
			public Vector3 forward
			{
				[Token(Token = "0x6000A20")]
				[Address(RVA = "0x1085CF0", Offset = "0x1085CF0", VA = "0x1085CF0")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x6000A1C")]
			[Address(RVA = "0x10863A0", Offset = "0x10863A0", VA = "0x10863A0")]
			public LookAtBone()
			{
			}

			[Token(Token = "0x6000A1D")]
			[Address(RVA = "0x1084E0C", Offset = "0x1084E0C", VA = "0x1084E0C")]
			public LookAtBone(Transform transform)
			{
			}

			[Token(Token = "0x6000A1E")]
			[Address(RVA = "0x1085100", Offset = "0x1085100", VA = "0x1085100")]
			public void Initiate(Transform root)
			{
			}

			[Token(Token = "0x6000A1F")]
			[Address(RVA = "0x1086038", Offset = "0x1086038", VA = "0x1086038")]
			public void LookAt(Vector3 direction, float weight)
			{
			}
		}

		[Token(Token = "0x4000BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x4000BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public LookAtBone[] spine;

		[Token(Token = "0x4000BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public LookAtBone head;

		[Token(Token = "0x4000BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public LookAtBone[] eyes;

		[Token(Token = "0x4000BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Range(0f, 1f)]
		public float bodyWeight;

		[Token(Token = "0x4000BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Range(0f, 1f)]
		public float headWeight;

		[Token(Token = "0x4000C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Range(0f, 1f)]
		public float eyesWeight;

		[Token(Token = "0x4000C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Range(0f, 1f)]
		public float clampWeight;

		[Token(Token = "0x4000C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Range(0f, 1f)]
		public float clampWeightHead;

		[Token(Token = "0x4000C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Range(0f, 1f)]
		public float clampWeightEyes;

		[Token(Token = "0x4000C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Range(0f, 2f)]
		public int clampSmoothing;

		[Token(Token = "0x4000C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public AnimationCurve spineWeightCurve;

		[Token(Token = "0x4000C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Vector3 spineTargetOffset;

		[Token(Token = "0x4000C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected Vector3[] spineForwards;

		[Token(Token = "0x4000C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected Vector3[] headForwards;

		[Token(Token = "0x4000C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected Vector3[] eyeForward;

		[Token(Token = "0x4000C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool isDirty;

		[Token(Token = "0x170000C8")]
		protected bool spineIsValid
		{
			[Token(Token = "0x6000A10")]
			[Address(RVA = "0x1084590", Offset = "0x1084590", VA = "0x1084590")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C9")]
		protected bool spineIsEmpty
		{
			[Token(Token = "0x6000A11")]
			[Address(RVA = "0x1084738", Offset = "0x1084738", VA = "0x1084738")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000CA")]
		protected bool headIsValid
		{
			[Token(Token = "0x6000A13")]
			[Address(RVA = "0x108465C", Offset = "0x108465C", VA = "0x108465C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000CB")]
		protected bool headIsEmpty
		{
			[Token(Token = "0x6000A14")]
			[Address(RVA = "0x108475C", Offset = "0x108475C", VA = "0x108475C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000CC")]
		protected bool eyesIsValid
		{
			[Token(Token = "0x6000A16")]
			[Address(RVA = "0x108466C", Offset = "0x108466C", VA = "0x108466C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000CD")]
		protected bool eyesIsEmpty
		{
			[Token(Token = "0x6000A17")]
			[Address(RVA = "0x10847C8", Offset = "0x10847C8", VA = "0x10847C8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000A01")]
		[Address(RVA = "0x1083FE8", Offset = "0x1083FE8", VA = "0x1083FE8")]
		public void SetLookAtWeight(float weight)
		{
		}

		[Token(Token = "0x6000A02")]
		[Address(RVA = "0x1084004", Offset = "0x1084004", VA = "0x1084004")]
		public void SetLookAtWeight(float weight, float bodyWeight)
		{
		}

		[Token(Token = "0x6000A03")]
		[Address(RVA = "0x1084030", Offset = "0x1084030", VA = "0x1084030")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight)
		{
		}

		[Token(Token = "0x6000A04")]
		[Address(RVA = "0x1084068", Offset = "0x1084068", VA = "0x1084068")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight)
		{
		}

		[Token(Token = "0x6000A05")]
		[Address(RVA = "0x10840B0", Offset = "0x10840B0", VA = "0x10840B0")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight)
		{
		}

		[Token(Token = "0x6000A06")]
		[Address(RVA = "0x1084108", Offset = "0x1084108", VA = "0x1084108")]
		public void SetLookAtWeight(float weight, float bodyWeight = 0f, float headWeight = 1f, float eyesWeight = 0.5f, float clampWeight = 0.5f, float clampWeightHead = 0.5f, float clampWeightEyes = 0.3f)
		{
		}

		[Token(Token = "0x6000A07")]
		[Address(RVA = "0x1084178", Offset = "0x1084178", VA = "0x1084178", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000A08")]
		[Address(RVA = "0x1084290", Offset = "0x1084290", VA = "0x1084290")]
		public void SetDirty()
		{
		}

		[Token(Token = "0x6000A09")]
		[Address(RVA = "0x108429C", Offset = "0x108429C", VA = "0x108429C", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6000A0A")]
		[Address(RVA = "0x10843CC", Offset = "0x10843CC", VA = "0x10843CC", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0x10847EC", Offset = "0x10847EC", VA = "0x10847EC", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000A0C")]
		[Address(RVA = "0x1084A40", Offset = "0x1084A40", VA = "0x1084A40", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0x1084BA0", Offset = "0x1084BA0", VA = "0x1084BA0")]
		public bool SetChain(Transform[] spine, Transform head, Transform[] eyes, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0x1084E3C", Offset = "0x1084E3C", VA = "0x1084E3C", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0x10851EC", Offset = "0x10851EC", VA = "0x10851EC", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000A12")]
		[Address(RVA = "0x10852B0", Offset = "0x10852B0", VA = "0x10852B0")]
		protected void SolveSpine()
		{
		}

		[Token(Token = "0x6000A15")]
		[Address(RVA = "0x10854CC", Offset = "0x10854CC", VA = "0x10854CC")]
		protected void SolveHead()
		{
		}

		[Token(Token = "0x6000A18")]
		[Address(RVA = "0x1085814", Offset = "0x1085814", VA = "0x1085814")]
		protected void SolveEyes()
		{
		}

		[Token(Token = "0x6000A19")]
		[Address(RVA = "0x1085D20", Offset = "0x1085D20", VA = "0x1085D20")]
		protected Vector3[] GetForwards(ref Vector3[] forwards, Vector3 baseForward, Vector3 targetForward, int bones, float clamp)
		{
			return null;
		}

		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0x1084C68", Offset = "0x1084C68", VA = "0x1084C68")]
		protected void SetBones(Transform[] array, ref LookAtBone[] bones)
		{
		}

		[Token(Token = "0x6000A1B")]
		[Address(RVA = "0x1086140", Offset = "0x1086140", VA = "0x1086140")]
		public IKSolverLookAt()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001C2")]
	public class IKSolverTrigonometric : IKSolver
	{
		[Serializable]
		[Token(Token = "0x20001C3")]
		public class TrigonometricBone : Bone
		{
			[Token(Token = "0x4000C15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			private Quaternion targetToLocalSpace;

			[Token(Token = "0x4000C16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			private Vector3 defaultLocalBendNormal;

			[Token(Token = "0x6000A38")]
			[Address(RVA = "0x10876C8", Offset = "0x10876C8", VA = "0x10876C8")]
			public void Initiate(Vector3 childPosition, Vector3 bendNormal)
			{
			}

			[Token(Token = "0x6000A39")]
			[Address(RVA = "0x1087F70", Offset = "0x1087F70", VA = "0x1087F70")]
			public Quaternion GetRotation(Vector3 direction, Vector3 bendNormal)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x6000A3A")]
			[Address(RVA = "0x1082A8C", Offset = "0x1082A8C", VA = "0x1082A8C")]
			public Vector3 GetBendNormalFromCurrentRotation()
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000A3B")]
			[Address(RVA = "0x108800C", Offset = "0x108800C", VA = "0x108800C")]
			public TrigonometricBone()
			{
			}
		}

		[Token(Token = "0x4000C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x4000C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Range(0f, 1f)]
		public float IKRotationWeight;

		[Token(Token = "0x4000C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Quaternion IKRotation;

		[Token(Token = "0x4000C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Vector3 bendNormal;

		[Token(Token = "0x4000C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public TrigonometricBone bone1;

		[Token(Token = "0x4000C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public TrigonometricBone bone2;

		[Token(Token = "0x4000C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public TrigonometricBone bone3;

		[Token(Token = "0x4000C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected Vector3 weightIKPosition;

		[Token(Token = "0x4000C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		protected bool directHierarchy;

		[Token(Token = "0x6000A21")]
		[Address(RVA = "0x10863A8", Offset = "0x10863A8", VA = "0x10863A8")]
		public void SetBendGoalPosition(Vector3 goalPosition, float weight)
		{
		}

		[Token(Token = "0x6000A22")]
		[Address(RVA = "0x108653C", Offset = "0x108653C", VA = "0x108653C")]
		public void SetBendPlaneToCurrent()
		{
		}

		[Token(Token = "0x6000A23")]
		[Address(RVA = "0x10866BC", Offset = "0x10866BC", VA = "0x10866BC")]
		public void SetIKRotation(Quaternion rotation)
		{
		}

		[Token(Token = "0x6000A24")]
		[Address(RVA = "0x10866C8", Offset = "0x10866C8", VA = "0x10866C8")]
		public void SetIKRotationWeight(float weight)
		{
		}

		[Token(Token = "0x6000A25")]
		[Address(RVA = "0x10866E4", Offset = "0x10866E4", VA = "0x10866E4")]
		public Quaternion GetIKRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000A26")]
		[Address(RVA = "0x10866F0", Offset = "0x10866F0", VA = "0x10866F0")]
		public float GetIKRotationWeight()
		{
			return default(float);
		}

		[Token(Token = "0x6000A27")]
		[Address(RVA = "0x10866F8", Offset = "0x10866F8", VA = "0x10866F8", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000A28")]
		[Address(RVA = "0x1086808", Offset = "0x1086808", VA = "0x1086808", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000A29")]
		[Address(RVA = "0x1086900", Offset = "0x1086900", VA = "0x1086900", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000A2A")]
		[Address(RVA = "0x1086940", Offset = "0x1086940", VA = "0x1086940", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6000A2B")]
		[Address(RVA = "0x1086990", Offset = "0x1086990", VA = "0x1086990", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0x1086D64", Offset = "0x1086D64", VA = "0x1086D64")]
		public bool SetChain(Transform bone1, Transform bone2, Transform bone3, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A2D")]
		[Address(RVA = "0x1086DE0", Offset = "0x1086DE0", VA = "0x1086DE0")]
		public static void Solve(Transform bone1, Transform bone2, Transform bone3, Vector3 targetPosition, Vector3 bendNormal, float weight)
		{
		}

		[Token(Token = "0x6000A2E")]
		[Address(RVA = "0x10872D4", Offset = "0x10872D4", VA = "0x10872D4")]
		private static Vector3 GetDirectionToBendPoint(Vector3 direction, float directionMag, Vector3 bendDirection, float sqrMag1, float sqrMag2)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0x108742C", Offset = "0x108742C", VA = "0x108742C", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000A30")]
		[Address(RVA = "0x10875D8", Offset = "0x10875D8", VA = "0x10875D8")]
		private bool IsDirectHierarchy()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A31")]
		[Address(RVA = "0x1087558", Offset = "0x1087558", VA = "0x1087558")]
		public void InitiateBones()
		{
		}

		[Token(Token = "0x6000A32")]
		[Address(RVA = "0x10877B8", Offset = "0x10877B8", VA = "0x10877B8", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000A33")]
		[Address(RVA = "0x1088000", Offset = "0x1088000", VA = "0x1088000", Slot = "12")]
		protected virtual void OnInitiateVirtual()
		{
		}

		[Token(Token = "0x6000A34")]
		[Address(RVA = "0x1088004", Offset = "0x1088004", VA = "0x1088004", Slot = "13")]
		protected virtual void OnUpdateVirtual()
		{
		}

		[Token(Token = "0x6000A35")]
		[Address(RVA = "0x1088008", Offset = "0x1088008", VA = "0x1088008", Slot = "14")]
		protected virtual void OnPostSolveVirtual()
		{
		}

		[Token(Token = "0x6000A36")]
		[Address(RVA = "0x1087DB0", Offset = "0x1087DB0", VA = "0x1087DB0")]
		protected Vector3 GetBendDirection(Vector3 IKPosition, Vector3 bendNormal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A37")]
		[Address(RVA = "0x1083C4C", Offset = "0x1083C4C", VA = "0x1083C4C")]
		public IKSolverTrigonometric()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001C4")]
	public class IKSolverVR : IKSolver
	{
		[Serializable]
		[Token(Token = "0x20001C5")]
		public class Arm : BodyPart
		{
			[Serializable]
			[Token(Token = "0x20001C6")]
			public enum ShoulderRotationMode
			{
				[Token(Token = "0x4000C5D")]
				YawPitch,
				[Token(Token = "0x4000C5E")]
				FromTo
			}

			[Token(Token = "0x4000C3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[LargeHeader("Hand")]
			[Tooltip("The hand target. This should not be the hand controller itself, but a child GameObject parented to it so you could adjust its position/rotation to match the orientation of the hand bone. The best practice for setup would be to move the hand controller to the avatar's hand as it it was held by the avatar, duplicate the avatar's hand bone and parent it to the hand controller. Then assign the duplicate to this slot.")]
			public Transform target;

			[Token(Token = "0x4000C40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("Positional weight of the hand target. Note that if you have nulled the target, the hand will still be pulled to the last position of the target until you set this value to 0.")]
			[Range(0f, 1f)]
			public float positionWeight;

			[Token(Token = "0x4000C41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[Tooltip("Rotational weight of the hand target. Note that if you have nulled the target, the hand will still be rotated to the last rotation of the target until you set this value to 0.")]
			[Range(0f, 1f)]
			public float rotationWeight;

			[Token(Token = "0x4000C42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[LargeHeader("Shoulder")]
			[Tooltip("The weight of shoulder rotation")]
			[Range(0f, 1f)]
			public float shoulderRotationWeight;

			[Token(Token = "0x4000C43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[ShowIf("shoulderRotationWeight", 0f, float.PositiveInfinity, false, ShowIfMode.Hidden)]
			[Tooltip("Different techniques for shoulder bone rotation.")]
			public ShoulderRotationMode shoulderRotationMode;

			[Token(Token = "0x4000C44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[ShowRangeIf(0f, 1f, "shoulderRotationWeight", 0f, float.PositiveInfinity, false, ShowIfMode.Hidden)]
			[Tooltip("The weight of twisting the shoulders backwards when arms are lifted up.")]
			public float shoulderTwistWeight;

			[Token(Token = "0x4000C45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[Tooltip("Tweak this value to adjust shoulder rotation around the yaw (up) axis.")]
			[ShowIf("shoulderRotationWeight", 0f, float.PositiveInfinity, false, ShowIfMode.Hidden)]
			public float shoulderYawOffset;

			[Token(Token = "0x4000C46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[Tooltip("Tweak this value to adjust shoulder rotation around the pitch (forward) axis.")]
			[ShowIf("shoulderRotationWeight", 0f, float.PositiveInfinity, false, ShowIfMode.Hidden)]
			public float shoulderPitchOffset;

			[Token(Token = "0x4000C47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[LargeHeader("Bending")]
			[Tooltip("The elbow will be bent towards this Transform if 'Bend Goal Weight' > 0.")]
			public Transform bendGoal;

			[Token(Token = "0x4000C48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[Tooltip("If greater than 0, will bend the elbow towards the 'Bend Goal' Transform.")]
			[Range(0f, 1f)]
			public float bendGoalWeight;

			[Token(Token = "0x4000C49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			[Tooltip("Angular offset of the elbow bending direction.")]
			[Range(-180f, 180f)]
			public float swivelOffset;

			[Token(Token = "0x4000C4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[Tooltip("Local axis of the hand bone that points from the wrist towards the palm. Used for defining hand bone orientation. If you have copied VRIK component from another avatar that has different bone orientations, right-click on VRIK header and select 'Guess Hand Orientations' from the context menu.")]
			public Vector3 wristToPalmAxis;

			[Token(Token = "0x4000C4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			[Tooltip("Local axis of the hand bone that points from the palm towards the thumb. Used for defining hand bone orientation. If you have copied VRIK component from another avatar that has different bone orientations, right-click on VRIK header and select 'Guess Hand Orientations' from the context menu.")]
			public Vector3 palmToThumbAxis;

			[Token(Token = "0x4000C4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[LargeHeader("Stretching")]
			[Tooltip("Use this to make the arm shorter/longer. Works by displacement of hand and forearm localPosition.")]
			[Range(0.01f, 2f)]
			public float armLengthMlp;

			[Token(Token = "0x4000C4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[Tooltip("'Time' represents (target distance / arm length) and 'value' represents the amount of stretching. So value at time 1 represents stretching amount at the point where distance to the target is equal to arm length. Value at time 2 represents stretching amount at the point where distance to the target is double the arm length. Linear stretching would be achieved with a linear curve going up by 45 degrees. Increase the range of stretching by moving the last key up and right by the same amount. Smoothing in the curve can help reduce elbow snapping (start stretching the arm slightly before target distance reaches arm length). To get a good optimal value for this curve, please go to the 'VRIK (Basic)' demo scene and copy the stretch curve over from the Pilot character.")]
			public AnimationCurve stretchCurve;

			[NonSerialized]
			[Token(Token = "0x4000C4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			[HideInInspector]
			public Vector3 IKPosition;

			[NonSerialized]
			[Token(Token = "0x4000C4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
			[HideInInspector]
			public Quaternion IKRotation;

			[NonSerialized]
			[Token(Token = "0x4000C50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
			[HideInInspector]
			public Vector3 bendDirection;

			[NonSerialized]
			[Token(Token = "0x4000C51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			[HideInInspector]
			public Vector3 handPositionOffset;

			[Token(Token = "0x4000C54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			private bool hasShoulder;

			[Token(Token = "0x4000C55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
			private Vector3 chestForwardAxis;

			[Token(Token = "0x4000C56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			private Vector3 chestUpAxis;

			[Token(Token = "0x4000C57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
			private Quaternion chestRotation;

			[Token(Token = "0x4000C58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
			private Vector3 chestForward;

			[Token(Token = "0x4000C59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
			private Vector3 chestUp;

			[Token(Token = "0x4000C5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
			private Quaternion forearmRelToUpperArm;

			[Token(Token = "0x4000C5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
			private Vector3 upperArmBendAxis;

			[Token(Token = "0x170000D1")]
			public Vector3 position
			{
				[Token(Token = "0x6000A5A")]
				[Address(RVA = "0x108C334", Offset = "0x108C334", VA = "0x108C334")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000A5B")]
				[Address(RVA = "0x108C340", Offset = "0x108C340", VA = "0x108C340")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000D2")]
			public Quaternion rotation
			{
				[Token(Token = "0x6000A5C")]
				[Address(RVA = "0x108C34C", Offset = "0x108C34C", VA = "0x108C34C")]
				[CompilerGenerated]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6000A5D")]
				[Address(RVA = "0x108C358", Offset = "0x108C358", VA = "0x108C358")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000D3")]
			private VirtualBone shoulder
			{
				[Token(Token = "0x6000A5E")]
				[Address(RVA = "0x108C364", Offset = "0x108C364", VA = "0x108C364")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000D4")]
			private VirtualBone upperArm
			{
				[Token(Token = "0x6000A5F")]
				[Address(RVA = "0x108C38C", Offset = "0x108C38C", VA = "0x108C38C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000D5")]
			private VirtualBone forearm
			{
				[Token(Token = "0x6000A60")]
				[Address(RVA = "0x108C3C0", Offset = "0x108C3C0", VA = "0x108C3C0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000D6")]
			private VirtualBone hand
			{
				[Token(Token = "0x6000A61")]
				[Address(RVA = "0x108C400", Offset = "0x108C400", VA = "0x108C400")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A62")]
			[Address(RVA = "0x108C440", Offset = "0x108C440", VA = "0x108C440", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x6000A63")]
			[Address(RVA = "0x108CE5C", Offset = "0x108CE5C", VA = "0x108CE5C", Slot = "5")]
			public override void PreSolve(float scale)
			{
			}

			[Token(Token = "0x6000A64")]
			[Address(RVA = "0x108D108", Offset = "0x108D108", VA = "0x108D108", Slot = "7")]
			public override void ApplyOffsets(float scale)
			{
			}

			[Token(Token = "0x6000A65")]
			[Address(RVA = "0x108D12C", Offset = "0x108D12C", VA = "0x108D12C")]
			private void Stretching()
			{
			}

			[Token(Token = "0x6000A66")]
			[Address(RVA = "0x108D47C", Offset = "0x108D47C", VA = "0x108D47C")]
			public void Solve(bool isLeft)
			{
			}

			[Token(Token = "0x6000A67")]
			[Address(RVA = "0x108F6C0", Offset = "0x108F6C0", VA = "0x108F6C0", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x6000A68")]
			[Address(RVA = "0x108F718", Offset = "0x108F718", VA = "0x108F718", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x6000A69")]
			[Address(RVA = "0x108EA74", Offset = "0x108EA74", VA = "0x108EA74")]
			private float DamperValue(float value, float min, float max, float weight = 1f)
			{
				return default(float);
			}

			[Token(Token = "0x6000A6A")]
			[Address(RVA = "0x108EC7C", Offset = "0x108EC7C", VA = "0x108EC7C")]
			private Vector3 GetBendNormal(Vector3 dir)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000A6B")]
			[Address(RVA = "0x108F924", Offset = "0x108F924", VA = "0x108F924")]
			private void Visualize(VirtualBone bone1, VirtualBone bone2, VirtualBone bone3, Color color)
			{
			}

			[Token(Token = "0x6000A6C")]
			[Address(RVA = "0x108FA3C", Offset = "0x108FA3C", VA = "0x108FA3C")]
			public Arm()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001C7")]
		public abstract class BodyPart
		{
			[Token(Token = "0x4000C61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			public VirtualBone[] bones;

			[Token(Token = "0x4000C62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			protected bool initiated;

			[Token(Token = "0x4000C63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			protected Vector3 rootPosition;

			[Token(Token = "0x4000C64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			protected Quaternion rootRotation;

			[Token(Token = "0x4000C65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			protected int index;

			[Token(Token = "0x4000C66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			protected int LOD;

			[Token(Token = "0x170000D7")]
			public float sqrMag
			{
				[Token(Token = "0x6000A72")]
				[Address(RVA = "0x108FC8C", Offset = "0x108FC8C", VA = "0x108FC8C")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000A73")]
				[Address(RVA = "0x108FC94", Offset = "0x108FC94", VA = "0x108FC94")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000D8")]
			public float mag
			{
				[Token(Token = "0x6000A74")]
				[Address(RVA = "0x108FC9C", Offset = "0x108FC9C", VA = "0x108FC9C")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000A75")]
				[Address(RVA = "0x108FCA4", Offset = "0x108FCA4", VA = "0x108FCA4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6000A6D")]
			protected abstract void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index);

			[Token(Token = "0x6000A6E")]
			public abstract void PreSolve(float scale);

			[Token(Token = "0x6000A6F")]
			public abstract void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations);

			[Token(Token = "0x6000A70")]
			public abstract void ApplyOffsets(float scale);

			[Token(Token = "0x6000A71")]
			public abstract void ResetOffsets();

			[Token(Token = "0x6000A76")]
			[Address(RVA = "0x108FCAC", Offset = "0x108FCAC", VA = "0x108FCAC")]
			public void SetLOD(int LOD)
			{
			}

			[Token(Token = "0x6000A77")]
			[Address(RVA = "0x108FCB4", Offset = "0x108FCB4", VA = "0x108FCB4")]
			public void Read(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x6000A78")]
			[Address(RVA = "0x108FED0", Offset = "0x108FED0", VA = "0x108FED0")]
			public void MovePosition(Vector3 position)
			{
			}

			[Token(Token = "0x6000A79")]
			[Address(RVA = "0x108FF58", Offset = "0x108FF58", VA = "0x108FF58")]
			public void MoveRotation(Quaternion rotation)
			{
			}

			[Token(Token = "0x6000A7A")]
			[Address(RVA = "0x109015C", Offset = "0x109015C", VA = "0x109015C")]
			public void Translate(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000A7B")]
			[Address(RVA = "0x10901A4", Offset = "0x10901A4", VA = "0x10901A4")]
			public void TranslateRoot(Vector3 newRootPos, Quaternion newRootRot)
			{
			}

			[Token(Token = "0x6000A7C")]
			[Address(RVA = "0x108F55C", Offset = "0x108F55C", VA = "0x108F55C")]
			public void RotateTo(VirtualBone bone, Quaternion rotation, float weight = 1f)
			{
			}

			[Token(Token = "0x6000A7D")]
			[Address(RVA = "0x10902C8", Offset = "0x10902C8", VA = "0x10902C8")]
			public void Visualize(Color color)
			{
			}

			[Token(Token = "0x6000A7E")]
			[Address(RVA = "0x10903EC", Offset = "0x10903EC", VA = "0x10903EC")]
			public void Visualize()
			{
			}

			[Token(Token = "0x6000A7F")]
			[Address(RVA = "0x108FBE8", Offset = "0x108FBE8", VA = "0x108FBE8")]
			protected BodyPart()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001C8")]
		public class Footstep
		{
			[Token(Token = "0x4000C67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float stepSpeed;

			[Token(Token = "0x4000C68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 characterSpaceOffset;

			[Token(Token = "0x4000C69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 position;

			[Token(Token = "0x4000C6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Quaternion rotation;

			[Token(Token = "0x4000C6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Quaternion stepToRootRot;

			[Token(Token = "0x4000C6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public bool isSupportLeg;

			[Token(Token = "0x4000C6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
			public bool relaxFlag;

			[Token(Token = "0x4000C6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public Vector3 stepFrom;

			[Token(Token = "0x4000C70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 stepTo;

			[Token(Token = "0x4000C71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public Quaternion stepFromRot;

			[Token(Token = "0x4000C72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			public Quaternion stepToRot;

			[Token(Token = "0x4000C73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			private Quaternion footRelativeToRoot;

			[Token(Token = "0x4000C74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			private float supportLegW;

			[Token(Token = "0x4000C75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private float supportLegWV;

			[Token(Token = "0x170000D9")]
			public bool isStepping
			{
				[Token(Token = "0x6000A80")]
				[Address(RVA = "0x1090400", Offset = "0x1090400", VA = "0x1090400")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170000DA")]
			public float stepProgress
			{
				[Token(Token = "0x6000A81")]
				[Address(RVA = "0x1090414", Offset = "0x1090414", VA = "0x1090414")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000A82")]
				[Address(RVA = "0x109041C", Offset = "0x109041C", VA = "0x109041C")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6000A83")]
			[Address(RVA = "0x1090424", Offset = "0x1090424", VA = "0x1090424")]
			public Footstep(Quaternion rootRotation, Vector3 footPosition, Quaternion footRotation, Vector3 characterSpaceOffset)
			{
			}

			[Token(Token = "0x6000A84")]
			[Address(RVA = "0x10905E8", Offset = "0x10905E8", VA = "0x10905E8")]
			public void Reset(Quaternion rootRotation, Vector3 footPosition, Quaternion footRotation)
			{
			}

			[Token(Token = "0x6000A85")]
			[Address(RVA = "0x1090630", Offset = "0x1090630", VA = "0x1090630")]
			public void StepTo(Vector3 p, Quaternion rootRotation, float stepThreshold)
			{
			}

			[Token(Token = "0x6000A86")]
			[Address(RVA = "0x1090874", Offset = "0x1090874", VA = "0x1090874")]
			public void UpdateStepping(Vector3 p, Quaternion rootRotation, float speed, float deltaTime)
			{
			}

			[Token(Token = "0x6000A87")]
			[Address(RVA = "0x1090A14", Offset = "0x1090A14", VA = "0x1090A14")]
			public void UpdateStanding(Quaternion rootRotation, float minAngle, float speed, float deltaTime)
			{
			}

			[Token(Token = "0x6000A88")]
			[Address(RVA = "0x1090C0C", Offset = "0x1090C0C", VA = "0x1090C0C")]
			public void Update(InterpolationMode interpolation, UnityEvent onStep, float deltaTime)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001C9")]
		public class Leg : BodyPart
		{
			[Token(Token = "0x4000C76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[LargeHeader("Foot/Toe")]
			[Tooltip("The foot/toe target. This should not be the foot tracker itself, but a child GameObject parented to it so you could adjust its position/rotation to match the orientation of the foot/toe bone. If a toe bone is assigned in the References, the solver will match the toe bone to this target. If no toe bone assigned, foot bone will be used instead.")]
			public Transform target;

			[Token(Token = "0x4000C77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Range(0f, 1f)]
			[Tooltip("Positional weight of the toe/foot target. Note that if you have nulled the target, the foot will still be pulled to the last position of the target until you set this value to 0.")]
			public float positionWeight;

			[Token(Token = "0x4000C78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[Range(0f, 1f)]
			[Tooltip("Rotational weight of the toe/foot target. Note that if you have nulled the target, the foot will still be rotated to the last rotation of the target until you set this value to 0.")]
			public float rotationWeight;

			[Token(Token = "0x4000C79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("The knee will be bent towards this Transform if 'Bend Goal Weight' > 0.")]
			[LargeHeader("Bending")]
			public Transform bendGoal;

			[Token(Token = "0x4000C7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[Tooltip("If greater than 0, will bend the knee towards the 'Bend Goal' Transform.")]
			[Range(0f, 1f)]
			public float bendGoalWeight;

			[Token(Token = "0x4000C7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[Tooltip("Angular offset of knee bending direction.")]
			[Range(-180f, 180f)]
			public float swivelOffset;

			[Token(Token = "0x4000C7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[Range(0f, 1f)]
			[Tooltip("If 0, the bend plane will be locked to the rotation of the pelvis and rotating the foot will have no effect on the knee direction. If 1, to the target rotation of the leg so that the knee will bend towards the forward axis of the foot. Values in between will be slerped between the two.")]
			public float bendToTargetWeight;

			[Token(Token = "0x4000C7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			[Range(0.01f, 2f)]
			[LargeHeader("Stretching")]
			[Tooltip("Use this to make the leg shorter/longer. Works by displacement of foot and calf localPosition.")]
			public float legLengthMlp;

			[Token(Token = "0x4000C7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[Tooltip("Evaluates stretching of the leg by target distance relative to leg length. Value at time 1 represents stretching amount at the point where distance to the target is equal to leg length. Value at time 1 represents stretching amount at the point where distance to the target is double the leg length. Value represents the amount of stretching. Linear stretching would be achieved with a linear curve going up by 45 degrees. Increase the range of stretching by moving the last key up and right at the same amount. Smoothing in the curve can help reduce knee snapping (start stretching the arm slightly before target distance reaches leg length). To get a good optimal value for this curve, please go to the 'VRIK (Basic)' demo scene and copy the stretch curve over from the Pilot character.")]
			public AnimationCurve stretchCurve;

			[NonSerialized]
			[Token(Token = "0x4000C7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[HideInInspector]
			public Vector3 IKPosition;

			[NonSerialized]
			[Token(Token = "0x4000C80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			[HideInInspector]
			public Quaternion IKRotation;

			[NonSerialized]
			[Token(Token = "0x4000C81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			[HideInInspector]
			public Vector3 footPositionOffset;

			[NonSerialized]
			[Token(Token = "0x4000C82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[HideInInspector]
			public Vector3 heelPositionOffset;

			[NonSerialized]
			[Token(Token = "0x4000C83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			[HideInInspector]
			public Quaternion footRotationOffset;

			[NonSerialized]
			[Token(Token = "0x4000C84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			[HideInInspector]
			public float currentMag;

			[Token(Token = "0x4000C85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			[HideInInspector]
			public bool useAnimatedBendNormal;

			[Token(Token = "0x4000C8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			private Vector3 footPosition;

			[Token(Token = "0x4000C8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
			private Quaternion footRotation;

			[Token(Token = "0x4000C8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
			private Vector3 bendNormal;

			[Token(Token = "0x4000C8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
			private Quaternion calfRelToThigh;

			[Token(Token = "0x4000C8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
			private Quaternion thighRelToFoot;

			[Token(Token = "0x170000DB")]
			public Vector3 position
			{
				[Token(Token = "0x6000A89")]
				[Address(RVA = "0x1090D7C", Offset = "0x1090D7C", VA = "0x1090D7C")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000A8A")]
				[Address(RVA = "0x1090D88", Offset = "0x1090D88", VA = "0x1090D88")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000DC")]
			public Quaternion rotation
			{
				[Token(Token = "0x6000A8B")]
				[Address(RVA = "0x1090D94", Offset = "0x1090D94", VA = "0x1090D94")]
				[CompilerGenerated]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6000A8C")]
				[Address(RVA = "0x1090DA0", Offset = "0x1090DA0", VA = "0x1090DA0")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000DD")]
			public bool hasToes
			{
				[Token(Token = "0x6000A8D")]
				[Address(RVA = "0x1090DAC", Offset = "0x1090DAC", VA = "0x1090DAC")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000A8E")]
				[Address(RVA = "0x1090DB4", Offset = "0x1090DB4", VA = "0x1090DB4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000DE")]
			public VirtualBone thigh
			{
				[Token(Token = "0x6000A8F")]
				[Address(RVA = "0x1090DC0", Offset = "0x1090DC0", VA = "0x1090DC0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000DF")]
			private VirtualBone calf
			{
				[Token(Token = "0x6000A90")]
				[Address(RVA = "0x1090DE8", Offset = "0x1090DE8", VA = "0x1090DE8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000E0")]
			private VirtualBone foot
			{
				[Token(Token = "0x6000A91")]
				[Address(RVA = "0x1090E14", Offset = "0x1090E14", VA = "0x1090E14")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000E1")]
			private VirtualBone toes
			{
				[Token(Token = "0x6000A92")]
				[Address(RVA = "0x1090E40", Offset = "0x1090E40", VA = "0x1090E40")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000E2")]
			public VirtualBone lastBone
			{
				[Token(Token = "0x6000A93")]
				[Address(RVA = "0x1090E6C", Offset = "0x1090E6C", VA = "0x1090E6C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000E3")]
			public Vector3 thighRelativeToPelvis
			{
				[Token(Token = "0x6000A94")]
				[Address(RVA = "0x1090EA0", Offset = "0x1090EA0", VA = "0x1090EA0")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000A95")]
				[Address(RVA = "0x1090EAC", Offset = "0x1090EAC", VA = "0x1090EAC")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000E4")]
			public Vector3 bendNormalRelToPelvis
			{
				[Token(Token = "0x6000A96")]
				[Address(RVA = "0x1090EB8", Offset = "0x1090EB8", VA = "0x1090EB8")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000A97")]
				[Address(RVA = "0x1090EC8", Offset = "0x1090EC8", VA = "0x1090EC8")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x170000E5")]
			public Vector3 bendNormalRelToTarget
			{
				[Token(Token = "0x6000A98")]
				[Address(RVA = "0x1090ED8", Offset = "0x1090ED8", VA = "0x1090ED8")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000A99")]
				[Address(RVA = "0x1090EE8", Offset = "0x1090EE8", VA = "0x1090EE8")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x6000A9A")]
			[Address(RVA = "0x1090EF8", Offset = "0x1090EF8", VA = "0x1090EF8", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x6000A9B")]
			[Address(RVA = "0x1091468", Offset = "0x1091468", VA = "0x1091468", Slot = "5")]
			public override void PreSolve(float scale)
			{
			}

			[Token(Token = "0x6000A9C")]
			[Address(RVA = "0x1091C98", Offset = "0x1091C98", VA = "0x1091C98", Slot = "7")]
			public override void ApplyOffsets(float scale)
			{
			}

			[Token(Token = "0x6000A9D")]
			[Address(RVA = "0x1091C48", Offset = "0x1091C48", VA = "0x1091C48")]
			private void ApplyPositionOffset(Vector3 offset, float weight)
			{
			}

			[Token(Token = "0x6000A9E")]
			[Address(RVA = "0x10919FC", Offset = "0x10919FC", VA = "0x10919FC")]
			private void ApplyRotationOffset(Quaternion offset, float weight)
			{
			}

			[Token(Token = "0x6000A9F")]
			[Address(RVA = "0x1092174", Offset = "0x1092174", VA = "0x1092174")]
			public void Solve(bool stretch)
			{
			}

			[Token(Token = "0x6000AA0")]
			[Address(RVA = "0x1092750", Offset = "0x1092750", VA = "0x1092750")]
			private void FixTwistRotations()
			{
			}

			[Token(Token = "0x6000AA1")]
			[Address(RVA = "0x10923B8", Offset = "0x10923B8", VA = "0x10923B8")]
			private void Stretching()
			{
			}

			[Token(Token = "0x6000AA2")]
			[Address(RVA = "0x1092BA8", Offset = "0x1092BA8", VA = "0x1092BA8", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x6000AA3")]
			[Address(RVA = "0x1092DB0", Offset = "0x1092DB0", VA = "0x1092DB0", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x6000AA4")]
			[Address(RVA = "0x1092E90", Offset = "0x1092E90", VA = "0x1092E90")]
			public Leg()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001CA")]
		public class Locomotion
		{
			[Serializable]
			[Token(Token = "0x20001CB")]
			public enum Mode
			{
				[Token(Token = "0x4000CD7")]
				Procedural,
				[Token(Token = "0x4000CD8")]
				Animated
			}

			[Token(Token = "0x4000C91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Procedural (legacy) or animated locomotion.")]
			public Mode mode;

			[Token(Token = "0x4000C92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Range(0f, 1f)]
			[Tooltip("Used for blending in/out of procedural/animated locomotion.")]
			public float weight;

			[Token(Token = "0x4000C93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[ShowIf("mode", Mode.Animated, null, false, ShowIfMode.Hidden)]
			[Tooltip("Start moving (horizontal distance to HMD + HMD velocity) threshold.")]
			public float moveThreshold;

			[Token(Token = "0x4000C94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[SerializeField]
			[ShowLargeHeaderIf("Animation", "mode", Mode.Animated, null, false, ShowIfMode.Hidden)]
			private byte animationHeader;

			[Token(Token = "0x4000C95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[ShowRangeIf(0.1f, 1f, "mode", Mode.Animated, null, false, ShowIfMode.Hidden)]
			[Tooltip("Minimum locomotion animation speed.")]
			public float minAnimationSpeed;

			[Token(Token = "0x4000C96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("Maximum locomotion animation speed.")]
			[ShowRangeIf(1f, 10f, "mode", Mode.Animated, null, false, ShowIfMode.Hidden)]
			public float maxAnimationSpeed;

			[Token(Token = "0x4000C97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Smoothing time for Vector3.SmoothDamping 'VRIK_Horizontal' and 'VRIK_Vertical' parameters. Larger values make animation smoother, but less responsive.")]
			[ShowRangeIf(0.05f, 0.2f, "mode", Mode.Animated, null, false, ShowIfMode.Hidden)]
			public float animationSmoothTime;

			[Token(Token = "0x4000C98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[SerializeField]
			[ShowLargeHeaderIf("Root Position", "mode", Mode.Animated, null, false, ShowIfMode.Hidden)]
			private byte rootPositionHeader;

			[Token(Token = "0x4000C99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("X and Z standing offset from the horizontal position of the HMD.")]
			[ShowIf("mode", Mode.Animated, null, false, ShowIfMode.Hidden)]
			public Vector2 standOffset;

			[Token(Token = "0x4000C9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[Tooltip("Lerp root towards the horizontal position of the HMD with this speed while moving.")]
			[ShowRangeIf(0f, 50f, "mode", Mode.Animated, null, false, ShowIfMode.Hidden)]
			public float rootLerpSpeedWhileMoving;

			[Token(Token = "0x4000C9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			[Tooltip("Lerp root towards the horizontal position of the HMD with this speed while in transition from locomotion to idle state.")]
			[ShowRangeIf(0f, 50f, "mode", Mode.Animated, null, false, ShowIfMode.Hidden)]
			public float rootLerpSpeedWhileStopping;

			[Token(Token = "0x4000C9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[ShowRangeIf(0f, 50f, "mode", Mode.Animated, null, false, ShowIfMode.Hidden)]
			[Tooltip("Lerp root towards the horizontal position of the HMD with this speed while turning on spot.")]
			public float rootLerpSpeedWhileTurning;

			[Token(Token = "0x4000C9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			[ShowIf("mode", Mode.Animated, null, false, ShowIfMode.Hidden)]
			[Tooltip("Max horizontal distance from the root to the HMD.")]
			public float maxRootOffset;

			[Token(Token = "0x4000C9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[ShowLargeHeaderIf("Root Rotation", "mode", Mode.Animated, null, false, ShowIfMode.Hidden)]
			[SerializeField]
			private byte rootRotationHeader;

			[Token(Token = "0x4000C9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			[Tooltip("Max root angle from head forward while moving (ik.solver.spine.maxRootAngle).")]
			[ShowRangeIf(0f, 180f, "mode", Mode.Animated, null, false, ShowIfMode.Hidden)]
			public float maxRootAngleMoving;

			[Token(Token = "0x4000CA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("Max root angle from head forward while standing (ik.solver.spine.maxRootAngle.")]
			[ShowRangeIf(0f, 180f, "mode", Mode.Animated, null, false, ShowIfMode.Hidden)]
			public float maxRootAngleStanding;

			[Token(Token = "0x4000CA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[HideInInspector]
			[SerializeField]
			public float stepLengthMlp;

			[Token(Token = "0x4000CA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private Animator animator;

			[Token(Token = "0x4000CA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Vector3 velocityLocal;

			[Token(Token = "0x4000CA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			private Vector3 velocityLocalV;

			[Token(Token = "0x4000CA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			private Vector3 lastCorrection;

			[Token(Token = "0x4000CA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			private Vector3 lastHeadTargetPos;

			[Token(Token = "0x4000CA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			private Vector3 lastSpeedRootPos;

			[Token(Token = "0x4000CA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			private Vector3 lastEndRootPos;

			[Token(Token = "0x4000CA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			private float rootLerpSpeed;

			[Token(Token = "0x4000CAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			private float rootVelocityV;

			[Token(Token = "0x4000CAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private float animSpeed;

			[Token(Token = "0x4000CAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
			private float animSpeedV;

			[Token(Token = "0x4000CAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			private float stopMoveTimer;

			[Token(Token = "0x4000CAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			private float turn;

			[Token(Token = "0x4000CAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			private float maxRootAngleV;

			[Token(Token = "0x4000CB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
			private float currentAnimationSmoothTime;

			[Token(Token = "0x4000CB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			private bool isMoving;

			[Token(Token = "0x4000CB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
			private bool firstFrame;

			[Token(Token = "0x4000CB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static int VRIK_Horizontal;

			[Token(Token = "0x4000CB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			private static int VRIK_Vertical;

			[Token(Token = "0x4000CB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private static int VRIK_IsMoving;

			[Token(Token = "0x4000CB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private static int VRIK_Speed;

			[Token(Token = "0x4000CB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private static int VRIK_Turn;

			[Token(Token = "0x4000CB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private static bool isHashed;

			[Token(Token = "0x4000CB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			private float lastVelLocalMag;

			[Token(Token = "0x4000CBA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			[Tooltip("Tries to maintain this distance between the legs.")]
			[ShowIf("mode", Mode.Procedural, null, false, ShowIfMode.Hidden)]
			public float footDistance;

			[Token(Token = "0x4000CBB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
			[Tooltip("Makes a step only if step target position is at least this far from the current footstep or the foot does not reach the current footstep anymore or footstep angle is past the 'Angle Threshold'.")]
			[ShowIf("mode", Mode.Procedural, null, false, ShowIfMode.Hidden)]
			public float stepThreshold;

			[Token(Token = "0x4000CBC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			[ShowIf("mode", Mode.Procedural, null, false, ShowIfMode.Hidden)]
			[Tooltip("Makes a step only if step target position is at least 'Step Threshold' far from the current footstep or the foot does not reach the current footstep anymore or footstep angle is past this value.")]
			public float angleThreshold;

			[Token(Token = "0x4000CBD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
			[Tooltip("Multiplies angle of the center of mass - center of pressure vector. Larger value makes the character step sooner if losing balance.")]
			[ShowIf("mode", Mode.Procedural, null, false, ShowIfMode.Hidden)]
			public float comAngleMlp;

			[Token(Token = "0x4000CBE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			[Tooltip("Maximum magnitude of head/hand target velocity used in prediction.")]
			[ShowIf("mode", Mode.Procedural, null, false, ShowIfMode.Hidden)]
			public float maxVelocity;

			[Token(Token = "0x4000CBF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
			[Tooltip("The amount of head/hand target velocity prediction.")]
			[ShowIf("mode", Mode.Procedural, null, false, ShowIfMode.Hidden)]
			public float velocityFactor;

			[Token(Token = "0x4000CC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			[ShowRangeIf(0.9f, 1f, "mode", Mode.Procedural, null, false, ShowIfMode.Hidden)]
			[Tooltip("How much can a leg be extended before it is forced to step to another position? 1 means fully stretched.")]
			public float maxLegStretch;

			[Token(Token = "0x4000CC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
			[Tooltip("The speed of lerping the root of the character towards the horizontal mid-point of the footsteps.")]
			[ShowIf("mode", Mode.Procedural, null, false, ShowIfMode.Hidden)]
			public float rootSpeed;

			[Token(Token = "0x4000CC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			[Tooltip("The speed of moving a foot to the next position.")]
			[ShowIf("mode", Mode.Procedural, null, false, ShowIfMode.Hidden)]
			public float stepSpeed;

			[Token(Token = "0x4000CC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			[Tooltip("The height of the foot by normalized step progress (0 - 1).")]
			[ShowIf("mode", Mode.Procedural, null, false, ShowIfMode.Hidden)]
			public AnimationCurve stepHeight;

			[Token(Token = "0x4000CC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
			[Tooltip("Reduce this value if locomotion makes the head bob too much.")]
			[ShowIf("mode", Mode.Procedural, null, false, ShowIfMode.Hidden)]
			public float maxBodyYOffset;

			[Token(Token = "0x4000CC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			[ShowIf("mode", Mode.Procedural, null, false, ShowIfMode.Hidden)]
			[Tooltip("The height offset of the heel by normalized step progress (0 - 1).")]
			public AnimationCurve heelHeight;

			[Token(Token = "0x4000CC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
			[Tooltip("Rotates the foot while the leg is not stepping to relax the twist rotation of the leg if ideal rotation is past this angle.")]
			[ShowRangeIf(0f, 180f, "mode", Mode.Procedural, null, false, ShowIfMode.Hidden)]
			public float relaxLegTwistMinAngle;

			[Token(Token = "0x4000CC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
			[Tooltip("The speed of rotating the foot while the leg is not stepping to relax the twist rotation of the leg.")]
			[ShowIf("mode", Mode.Procedural, null, false, ShowIfMode.Hidden)]
			public float relaxLegTwistSpeed;

			[Token(Token = "0x4000CC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
			[ShowIf("mode", Mode.Procedural, null, false, ShowIfMode.Hidden)]
			[Tooltip("Interpolation mode of the step.")]
			public InterpolationMode stepInterpolation;

			[Token(Token = "0x4000CC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
			[Tooltip("Offset for the approximated center of mass.")]
			[ShowIf("mode", Mode.Procedural, null, false, ShowIfMode.Hidden)]
			public Vector3 offset;

			[Token(Token = "0x4000CCA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
			[HideInInspector]
			public bool blockingEnabled;

			[Token(Token = "0x4000CCB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
			[HideInInspector]
			public LayerMask blockingLayers;

			[Token(Token = "0x4000CCC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
			[HideInInspector]
			public float raycastRadius;

			[Token(Token = "0x4000CCD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
			[HideInInspector]
			public float raycastHeight;

			[Token(Token = "0x4000CCE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
			[SerializeField]
			[HideInInspector]
			public UnityEvent onLeftFootstep;

			[Token(Token = "0x4000CCF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
			[HideInInspector]
			[SerializeField]
			public UnityEvent onRightFootstep;

			[Token(Token = "0x4000CD1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
			private Footstep[] footsteps;

			[Token(Token = "0x4000CD2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
			private Vector3 lastComPosition;

			[Token(Token = "0x4000CD3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
			private Vector3 comVelocity;

			[Token(Token = "0x4000CD4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
			private int leftFootIndex;

			[Token(Token = "0x4000CD5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
			private int rightFootIndex;

			[Token(Token = "0x170000E6")]
			public Vector3 centerOfMass
			{
				[Token(Token = "0x6000AB0")]
				[Address(RVA = "0x1094BC8", Offset = "0x1094BC8", VA = "0x1094BC8")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000AB1")]
				[Address(RVA = "0x1094BD8", Offset = "0x1094BD8", VA = "0x1094BD8")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000E7")]
			public Vector3 leftFootstepPosition
			{
				[Token(Token = "0x6000AB8")]
				[Address(RVA = "0x10964A8", Offset = "0x10964A8", VA = "0x10964A8")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170000E8")]
			public Vector3 rightFootstepPosition
			{
				[Token(Token = "0x6000AB9")]
				[Address(RVA = "0x10964DC", Offset = "0x10964DC", VA = "0x10964DC")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170000E9")]
			public Quaternion leftFootstepRotation
			{
				[Token(Token = "0x6000ABA")]
				[Address(RVA = "0x1096514", Offset = "0x1096514", VA = "0x1096514")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x170000EA")]
			public Quaternion rightFootstepRotation
			{
				[Token(Token = "0x6000ABB")]
				[Address(RVA = "0x1096548", Offset = "0x1096548", VA = "0x1096548")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x6000AA5")]
			[Address(RVA = "0x1092F78", Offset = "0x1092F78", VA = "0x1092F78")]
			public void Initiate(Animator animator, Vector3[] positions, Quaternion[] rotations, bool hasToes, float scale)
			{
			}

			[Token(Token = "0x6000AA6")]
			[Address(RVA = "0x10933C0", Offset = "0x10933C0", VA = "0x10933C0")]
			public void Reset(Vector3[] positions, Quaternion[] rotations)
			{
			}

			[Token(Token = "0x6000AA7")]
			[Address(RVA = "0x109381C", Offset = "0x109381C", VA = "0x109381C")]
			public void Relax()
			{
			}

			[Token(Token = "0x6000AA8")]
			[Address(RVA = "0x109386C", Offset = "0x109386C", VA = "0x109386C")]
			public void AddDeltaRotation(Quaternion delta, Vector3 pivot)
			{
			}

			[Token(Token = "0x6000AA9")]
			[Address(RVA = "0x1093DB4", Offset = "0x1093DB4", VA = "0x1093DB4")]
			public void AddDeltaPosition(Vector3 delta)
			{
			}

			[Token(Token = "0x6000AAA")]
			[Address(RVA = "0x10932E4", Offset = "0x10932E4", VA = "0x10932E4")]
			public void Initiate_Animated(Animator animator, Vector3[] positions)
			{
			}

			[Token(Token = "0x6000AAB")]
			[Address(RVA = "0x1093EFC", Offset = "0x1093EFC", VA = "0x1093EFC")]
			private void ResetParams(Vector3[] positions)
			{
			}

			[Token(Token = "0x6000AAC")]
			[Address(RVA = "0x10935D4", Offset = "0x10935D4", VA = "0x10935D4")]
			public void Reset_Animated(Vector3[] positions)
			{
			}

			[Token(Token = "0x6000AAD")]
			[Address(RVA = "0x1093CAC", Offset = "0x1093CAC", VA = "0x1093CAC")]
			private void AddDeltaRotation_Animated(Quaternion delta, Vector3 pivot)
			{
			}

			[Token(Token = "0x6000AAE")]
			[Address(RVA = "0x1093EAC", Offset = "0x1093EAC", VA = "0x1093EAC")]
			private void AddDeltaPosition_Animated(Vector3 delta)
			{
			}

			[Token(Token = "0x6000AAF")]
			[Address(RVA = "0x1093FB4", Offset = "0x1093FB4", VA = "0x1093FB4")]
			public void Solve_Animated(IKSolverVR solver, float scale, float deltaTime)
			{
			}

			[Token(Token = "0x6000AB2")]
			[Address(RVA = "0x1092FB8", Offset = "0x1092FB8", VA = "0x1092FB8")]
			private void Initiate_Procedural(Vector3[] positions, Quaternion[] rotations, bool hasToes, float scale)
			{
			}

			[Token(Token = "0x6000AB3")]
			[Address(RVA = "0x10933E8", Offset = "0x10933E8", VA = "0x10933E8")]
			private void Reset_Procedural(Vector3[] positions, Quaternion[] rotations)
			{
			}

			[Token(Token = "0x6000AB4")]
			[Address(RVA = "0x1093820", Offset = "0x1093820", VA = "0x1093820")]
			private void Relax_Procedural()
			{
			}

			[Token(Token = "0x6000AB5")]
			[Address(RVA = "0x10938DC", Offset = "0x10938DC", VA = "0x10938DC")]
			private void AddDeltaRotation_Procedural(Quaternion delta, Vector3 pivot)
			{
			}

			[Token(Token = "0x6000AB6")]
			[Address(RVA = "0x1093DF4", Offset = "0x1093DF4", VA = "0x1093DF4")]
			private void AddDeltaPosition_Procedural(Vector3 delta)
			{
			}

			[Token(Token = "0x6000AB7")]
			[Address(RVA = "0x1094BE8", Offset = "0x1094BE8", VA = "0x1094BE8")]
			public void Solve_Procedural(VirtualBone rootBone, Spine spine, Leg leftLeg, Leg rightLeg, Arm leftArm, Arm rightArm, int supportLegIndex, out Vector3 leftFootPosition, out Vector3 rightFootPosition, out Quaternion leftFootRotation, out Quaternion rightFootRotation, out float leftFootOffset, out float rightFootOffset, out float leftHeelOffset, out float rightHeelOffset, float scale, float deltaTime)
			{
			}

			[Token(Token = "0x6000ABC")]
			[Address(RVA = "0x10960D4", Offset = "0x10960D4", VA = "0x10960D4")]
			private bool StepBlocked(Vector3 fromPosition, Vector3 toPosition, Vector3 rootPosition)
			{
				return default(bool);
			}

			[Token(Token = "0x6000ABD")]
			[Address(RVA = "0x109628C", Offset = "0x109628C", VA = "0x109628C")]
			private bool CanStep()
			{
				return default(bool);
			}

			[Token(Token = "0x6000ABE")]
			[Address(RVA = "0x10962F8", Offset = "0x10962F8", VA = "0x10962F8")]
			private static bool GetLineSphereCollision(Vector3 lineStart, Vector3 lineEnd, Vector3 sphereCenter, float sphereRadius)
			{
				return default(bool);
			}

			[Token(Token = "0x6000ABF")]
			[Address(RVA = "0x1096580", Offset = "0x1096580", VA = "0x1096580")]
			public Locomotion()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001CC")]
		public class Spine : BodyPart
		{
			[Token(Token = "0x4000CD9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[LargeHeader("Head")]
			[Tooltip("The head target. This should not be the camera Transform itself, but a child GameObject parented to it so you could adjust its position/rotation  to match the orientation of the head bone. The best practice for setup would be to move the camera to the avatar's eyes, duplicate the avatar's head bone and parent it to the camera. Then assign the duplicate to this slot.")]
			public Transform headTarget;

			[Token(Token = "0x4000CDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Range(0f, 1f)]
			[Tooltip("Positional weight of the head target. Note that if you have nulled the headTarget, the head will still be pulled to the last position of the headTarget until you set this value to 0.")]
			public float positionWeight;

			[Token(Token = "0x4000CDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[Tooltip("Rotational weight of the head target. Note that if you have nulled the headTarget, the head will still be rotated to the last rotation of the headTarget until you set this value to 0.")]
			[Range(0f, 1f)]
			public float rotationWeight;

			[Token(Token = "0x4000CDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("Clamps head rotation. Value of 0.5 allows 90 degrees of rotation for the head relative to the headTarget. Value of 0 allows 180 degrees and value of 1 means head rotation will be locked to the target.")]
			[Range(0f, 1f)]
			public float headClampWeight;

			[Token(Token = "0x4000CDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[Tooltip("Minimum height of the head from the root of the character.")]
			public float minHeadHeight;

			[Token(Token = "0x4000CDE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[Tooltip("Allows for more natural locomotion animation for 3rd person networked avatars by inheriting vertical head bob motion from the animation while head target height is close to head bone height.")]
			[Range(0f, 1f)]
			public float useAnimatedHeadHeightWeight;

			[Token(Token = "0x4000CDF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[Tooltip("If abs(head target height - head bone height) < this value, will use head bone height as head target Y.")]
			[ShowIf("useAnimatedHeadHeightWeight", 0f, float.PositiveInfinity, false, ShowIfMode.Hidden)]
			public float useAnimatedHeadHeightRange;

			[Token(Token = "0x4000CE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[Tooltip("Falloff range for the 'Use Animated Head Height Range' effect above. If head target height from head bone height is greater than useAnimatedHeadHeightRange + animatedHeadHeightBlend, then the head will be vertically locked to the head target again.")]
			[ShowIf("useAnimatedHeadHeightWeight", 0f, float.PositiveInfinity, false, ShowIfMode.Hidden)]
			public float animatedHeadHeightBlend;

			[Token(Token = "0x4000CE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[Tooltip("The pelvis target (optional), useful for seated rigs or if you had an additional tracker on the backpack or belt are. The best practice for setup would be to duplicate the avatar's pelvis bone and parenting it to the pelvis tracker. Then assign the duplicate to this slot.")]
			[LargeHeader("Pelvis")]
			public Transform pelvisTarget;

			[Token(Token = "0x4000CE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[Range(0f, 1f)]
			[Tooltip("Positional weight of the pelvis target. Note that if you have nulled the pelvisTarget, the pelvis will still be pulled to the last position of the pelvisTarget until you set this value to 0.")]
			public float pelvisPositionWeight;

			[Token(Token = "0x4000CE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			[Tooltip("Rotational weight of the pelvis target. Note that if you have nulled the pelvisTarget, the pelvis will still be rotated to the last rotation of the pelvisTarget until you set this value to 0.")]
			[Range(0f, 1f)]
			public float pelvisRotationWeight;

			[Token(Token = "0x4000CE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[Tooltip("How much will the pelvis maintain its animated position?")]
			[Range(0f, 1f)]
			public float maintainPelvisPosition;

			[Token(Token = "0x4000CE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			[LargeHeader("Chest")]
			[Tooltip("If 'Chest Goal Weight' is greater than 0, the chest will be turned towards this Transform.")]
			public Transform chestGoal;

			[Token(Token = "0x4000CE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[Tooltip("Weight of turning the chest towards the 'Chest Goal'.")]
			[Range(0f, 1f)]
			public float chestGoalWeight;

			[Token(Token = "0x4000CE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			[Range(0f, 1f)]
			[Tooltip("Clamps chest rotation. Value of 0.5 allows 90 degrees of rotation for the chest relative to the head. Value of 0 allows 180 degrees and value of 1 means the chest will be locked relative to the head.")]
			public float chestClampWeight;

			[Token(Token = "0x4000CE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[Range(0f, 1f)]
			[Tooltip("The amount of rotation applied to the chest based on hand positions.")]
			public float rotateChestByHands;

			[Token(Token = "0x4000CE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			[Range(0f, 1f)]
			[Tooltip("Determines how much the body will follow the position of the head.")]
			[LargeHeader("Spine")]
			public float bodyPosStiffness;

			[Token(Token = "0x4000CEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[Tooltip("Determines how much the body will follow the rotation of the head.")]
			[Range(0f, 1f)]
			public float bodyRotStiffness;

			[Token(Token = "0x4000CEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			[Tooltip("Determines how much the chest will rotate to the rotation of the head.")]
			[FormerlySerializedAs("chestRotationWeight")]
			[Range(0f, 1f)]
			public float neckStiffness;

			[Token(Token = "0x4000CEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			[Tooltip("Moves the body horizontally along -character.forward axis by that value when the player is crouching.")]
			public float moveBodyBackWhenCrouching;

			[Token(Token = "0x4000CED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			[LargeHeader("Root Rotation")]
			[Tooltip("Will automatically rotate the root of the character if the head target has turned past this angle.")]
			[Range(0f, 180f)]
			public float maxRootAngle;

			[Token(Token = "0x4000CEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			[Tooltip("Angular offset for root heading. Adjust this value to turn the root relative to the HMD around the vertical axis. Usefulf for fighting or shooting games where you would sometimes want the avatar to stand at an angled stance.")]
			[Range(-180f, 180f)]
			public float rootHeadingOffset;

			[NonSerialized]
			[Token(Token = "0x4000CEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
			[HideInInspector]
			public Vector3 IKPositionHead;

			[NonSerialized]
			[Token(Token = "0x4000CF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			[HideInInspector]
			public Quaternion IKRotationHead;

			[NonSerialized]
			[Token(Token = "0x4000CF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			[HideInInspector]
			public Vector3 IKPositionPelvis;

			[NonSerialized]
			[Token(Token = "0x4000CF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
			[HideInInspector]
			public Quaternion IKRotationPelvis;

			[NonSerialized]
			[Token(Token = "0x4000CF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
			[HideInInspector]
			public Vector3 goalPositionChest;

			[NonSerialized]
			[Token(Token = "0x4000CF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			[HideInInspector]
			public Vector3 pelvisPositionOffset;

			[NonSerialized]
			[Token(Token = "0x4000CF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
			[HideInInspector]
			public Vector3 chestPositionOffset;

			[NonSerialized]
			[Token(Token = "0x4000CF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
			[HideInInspector]
			public Vector3 headPositionOffset;

			[NonSerialized]
			[Token(Token = "0x4000CF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
			[HideInInspector]
			public Quaternion pelvisRotationOffset;

			[NonSerialized]
			[Token(Token = "0x4000CF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
			[HideInInspector]
			public Quaternion chestRotationOffset;

			[NonSerialized]
			[Token(Token = "0x4000CF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
			[HideInInspector]
			public Quaternion headRotationOffset;

			[NonSerialized]
			[Token(Token = "0x4000CFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
			[HideInInspector]
			public Vector3 faceDirection;

			[NonSerialized]
			[Token(Token = "0x4000CFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
			[HideInInspector]
			internal Vector3 headPosition;

			[Token(Token = "0x4000CFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
			private Quaternion headRotation;

			[Token(Token = "0x4000CFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
			private Quaternion pelvisRotation;

			[Token(Token = "0x4000D00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
			private Quaternion anchorRelativeToPelvis;

			[Token(Token = "0x4000D01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
			private Quaternion pelvisRelativeRotation;

			[Token(Token = "0x4000D02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
			private Quaternion chestRelativeRotation;

			[Token(Token = "0x4000D03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
			private Vector3 headDeltaPosition;

			[Token(Token = "0x4000D04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
			private Quaternion pelvisDeltaRotation;

			[Token(Token = "0x4000D05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
			private Quaternion chestTargetRotation;

			[Token(Token = "0x4000D06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
			private int pelvisIndex;

			[Token(Token = "0x4000D07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
			private int spineIndex;

			[Token(Token = "0x4000D08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
			private int chestIndex;

			[Token(Token = "0x4000D09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
			private int neckIndex;

			[Token(Token = "0x4000D0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
			private int headIndex;

			[Token(Token = "0x4000D0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
			private float length;

			[Token(Token = "0x4000D0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
			private bool hasChest;

			[Token(Token = "0x4000D0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x219")]
			private bool hasNeck;

			[Token(Token = "0x4000D0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x21A")]
			private bool hasLegs;

			[Token(Token = "0x4000D0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
			private float headHeight;

			[Token(Token = "0x4000D10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
			private float sizeMlp;

			[Token(Token = "0x4000D11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
			private Vector3 chestForward;

			[Token(Token = "0x170000EB")]
			internal VirtualBone pelvis
			{
				[Token(Token = "0x6000AC0")]
				[Address(RVA = "0x109606C", Offset = "0x109606C", VA = "0x109606C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000EC")]
			internal VirtualBone firstSpineBone
			{
				[Token(Token = "0x6000AC1")]
				[Address(RVA = "0x10966F4", Offset = "0x10966F4", VA = "0x10966F4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000ED")]
			internal VirtualBone chest
			{
				[Token(Token = "0x6000AC2")]
				[Address(RVA = "0x1096728", Offset = "0x1096728", VA = "0x1096728")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000EE")]
			internal VirtualBone head
			{
				[Token(Token = "0x6000AC3")]
				[Address(RVA = "0x10960A0", Offset = "0x10960A0", VA = "0x10960A0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000EF")]
			private VirtualBone neck
			{
				[Token(Token = "0x6000AC4")]
				[Address(RVA = "0x1096770", Offset = "0x1096770", VA = "0x1096770")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F0")]
			internal Quaternion anchorRotation
			{
				[Token(Token = "0x6000AC5")]
				[Address(RVA = "0x10967A4", Offset = "0x10967A4", VA = "0x10967A4")]
				[CompilerGenerated]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6000AC6")]
				[Address(RVA = "0x10967B8", Offset = "0x10967B8", VA = "0x10967B8")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000F1")]
			internal Quaternion anchorRelativeToHead
			{
				[Token(Token = "0x6000AC7")]
				[Address(RVA = "0x10967CC", Offset = "0x10967CC", VA = "0x10967CC")]
				[CompilerGenerated]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6000AC8")]
				[Address(RVA = "0x10967E0", Offset = "0x10967E0", VA = "0x10967E0")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6000AC9")]
			[Address(RVA = "0x10967F4", Offset = "0x10967F4", VA = "0x10967F4", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x6000ACA")]
			[Address(RVA = "0x1097494", Offset = "0x1097494", VA = "0x1097494", Slot = "5")]
			public override void PreSolve(float scale)
			{
			}

			[Token(Token = "0x6000ACB")]
			[Address(RVA = "0x10978A0", Offset = "0x10978A0", VA = "0x10978A0", Slot = "7")]
			public override void ApplyOffsets(float scale)
			{
			}

			[Token(Token = "0x6000ACC")]
			[Address(RVA = "0x1098044", Offset = "0x1098044", VA = "0x1098044")]
			private void CalculateChestTargetRotation(VirtualBone rootBone, Arm[] arms)
			{
			}

			[Token(Token = "0x6000ACD")]
			[Address(RVA = "0x109869C", Offset = "0x109869C", VA = "0x109869C")]
			public void Solve(Animator animator, VirtualBone rootBone, Leg[] legs, Arm[] arms, float scale)
			{
			}

			[Token(Token = "0x6000ACE")]
			[Address(RVA = "0x10990D4", Offset = "0x10990D4", VA = "0x10990D4")]
			private void FABRIKPass(Vector3 animatedPelvisPos, Vector3 rootUp, float weight)
			{
			}

			[Token(Token = "0x6000ACF")]
			[Address(RVA = "0x109987C", Offset = "0x109987C", VA = "0x109987C")]
			private void SolvePelvis()
			{
			}

			[Token(Token = "0x6000AD0")]
			[Address(RVA = "0x1099E5C", Offset = "0x1099E5C", VA = "0x1099E5C", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x6000AD1")]
			[Address(RVA = "0x109A02C", Offset = "0x109A02C", VA = "0x109A02C", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x6000AD2")]
			[Address(RVA = "0x10982A4", Offset = "0x10982A4", VA = "0x10982A4")]
			private void AdjustChestByHands(ref Quaternion chestTargetRotation, Arm[] arms)
			{
			}

			[Token(Token = "0x6000AD3")]
			[Address(RVA = "0x10995A8", Offset = "0x10995A8", VA = "0x10995A8")]
			public void InverseTranslateToHead(Leg[] legs, bool limited, bool useCurrentLegMag, Vector3 offset, float w)
			{
			}

			[Token(Token = "0x6000AD4")]
			[Address(RVA = "0x1098CB8", Offset = "0x1098CB8", VA = "0x1098CB8")]
			private void TranslatePelvis(Leg[] legs, Vector3 deltaPosition, Quaternion deltaRotation, float scale)
			{
			}

			[Token(Token = "0x6000AD5")]
			[Address(RVA = "0x109A100", Offset = "0x109A100", VA = "0x109A100")]
			private Vector3 LimitPelvisPosition(Leg[] legs, Vector3 pelvisPosition, bool useCurrentLegMag, int it = 2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000AD6")]
			[Address(RVA = "0x1099680", Offset = "0x1099680", VA = "0x1099680")]
			private void Bend(VirtualBone[] bones, int firstIndex, int lastIndex, Quaternion targetRotation, float clampWeight, bool uniformWeight, float w)
			{
			}

			[Token(Token = "0x6000AD7")]
			[Address(RVA = "0x1099338", Offset = "0x1099338", VA = "0x1099338")]
			private void Bend(VirtualBone[] bones, int firstIndex, int lastIndex, Quaternion targetRotation, Quaternion rotationOffset, float clampWeight, bool uniformWeight, float w)
			{
			}

			[Token(Token = "0x6000AD8")]
			[Address(RVA = "0x109A3A4", Offset = "0x109A3A4", VA = "0x109A3A4")]
			public Spine()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001CD")]
		public enum PositionOffset
		{
			[Token(Token = "0x4000D13")]
			Pelvis,
			[Token(Token = "0x4000D14")]
			Chest,
			[Token(Token = "0x4000D15")]
			Head,
			[Token(Token = "0x4000D16")]
			LeftHand,
			[Token(Token = "0x4000D17")]
			RightHand,
			[Token(Token = "0x4000D18")]
			LeftFoot,
			[Token(Token = "0x4000D19")]
			RightFoot,
			[Token(Token = "0x4000D1A")]
			LeftHeel,
			[Token(Token = "0x4000D1B")]
			RightHeel
		}

		[Serializable]
		[Token(Token = "0x20001CE")]
		public enum RotationOffset
		{
			[Token(Token = "0x4000D1D")]
			Pelvis,
			[Token(Token = "0x4000D1E")]
			Chest,
			[Token(Token = "0x4000D1F")]
			Head
		}

		[Serializable]
		[Token(Token = "0x20001CF")]
		public class VirtualBone
		{
			[Token(Token = "0x4000D20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 readPosition;

			[Token(Token = "0x4000D21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Quaternion readRotation;

			[Token(Token = "0x4000D22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Vector3 solverPosition;

			[Token(Token = "0x4000D23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Quaternion solverRotation;

			[Token(Token = "0x4000D24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public float length;

			[Token(Token = "0x4000D25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public float sqrMag;

			[Token(Token = "0x4000D26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Vector3 axis;

			[Token(Token = "0x6000AD9")]
			[Address(RVA = "0x108CDCC", Offset = "0x108CDCC", VA = "0x108CDCC")]
			public VirtualBone(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000ADA")]
			[Address(RVA = "0x108CE3C", Offset = "0x108CE3C", VA = "0x108CE3C")]
			public void Read(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000ADB")]
			[Address(RVA = "0x109A4D4", Offset = "0x109A4D4", VA = "0x109A4D4")]
			public static void SwingRotation(VirtualBone[] bones, int index, Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x6000ADC")]
			[Address(RVA = "0x108FD70", Offset = "0x108FD70", VA = "0x108FD70")]
			public static float PreSolve(ref VirtualBone[] bones)
			{
				return default(float);
			}

			[Token(Token = "0x6000ADD")]
			[Address(RVA = "0x108FFEC", Offset = "0x108FFEC", VA = "0x108FFEC")]
			public static void RotateAroundPoint(VirtualBone[] bones, int index, Vector3 point, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000ADE")]
			[Address(RVA = "0x109A6D4", Offset = "0x109A6D4", VA = "0x109A6D4")]
			public static void RotateBy(VirtualBone[] bones, int index, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000ADF")]
			[Address(RVA = "0x108EAF4", Offset = "0x108EAF4", VA = "0x108EAF4")]
			public static void RotateBy(VirtualBone[] bones, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000AE0")]
			[Address(RVA = "0x109A87C", Offset = "0x109A87C", VA = "0x109A87C")]
			public static void RotateTo(VirtualBone[] bones, int index, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000AE1")]
			[Address(RVA = "0x108F178", Offset = "0x108F178", VA = "0x108F178")]
			public static void SolveTrigonometric(VirtualBone[] bones, int first, int second, int third, Vector3 targetPosition, Vector3 bendNormal, float weight)
			{
			}

			[Token(Token = "0x6000AE2")]
			[Address(RVA = "0x109A920", Offset = "0x109A920", VA = "0x109A920")]
			private static Vector3 GetDirectionToBendPoint(Vector3 direction, float directionMag, Vector3 bendDirection, float sqrMag1, float sqrMag2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000AE3")]
			[Address(RVA = "0x1099A90", Offset = "0x1099A90", VA = "0x1099A90")]
			public static void SolveFABRIK(VirtualBone[] bones, Vector3 startPosition, Vector3 targetPosition, float weight, float minNormalizedTargetDistance, int iterations, float length, Vector3 startOffset)
			{
			}

			[Token(Token = "0x6000AE4")]
			[Address(RVA = "0x109AA78", Offset = "0x109AA78", VA = "0x109AA78")]
			private static Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000AE5")]
			[Address(RVA = "0x109AB8C", Offset = "0x109AB8C", VA = "0x109AB8C")]
			public static void SolveCCD(VirtualBone[] bones, Vector3 targetPosition, float weight, int iterations)
			{
			}
		}

		[Token(Token = "0x4000C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform[] solverTransforms;

		[Token(Token = "0x4000C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool hasChest;

		[Token(Token = "0x4000C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool hasNeck;

		[Token(Token = "0x4000C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		private bool hasShoulders;

		[Token(Token = "0x4000C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
		private bool hasToes;

		[Token(Token = "0x4000C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool hasLegs;

		[Token(Token = "0x4000C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		private bool hasArms;

		[Token(Token = "0x4000C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector3[] readPositions;

		[Token(Token = "0x4000C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Quaternion[] readRotations;

		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3[] solvedPositions;

		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Quaternion[] solvedRotations;

		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Quaternion[] defaultLocalRotations;

		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3[] defaultLocalPositions;

		[Token(Token = "0x4000C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 rootV;

		[Token(Token = "0x4000C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Vector3 rootVelocity;

		[Token(Token = "0x4000C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3 bodyOffset;

		[Token(Token = "0x4000C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private int supportLegIndex;

		[Token(Token = "0x4000C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private int lastLOD;

		[Token(Token = "0x4000C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private float lastLocomotionWeight;

		[Token(Token = "0x4000C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Range(0f, 2f)]
		[Tooltip("LOD 0: Full quality solving. LOD 1: Shoulder solving, stretching plant feet disabled, spine solving quality reduced. This provides about 30% of performance gain. LOD 2: Culled, but updating root position and rotation if locomotion is enabled.")]
		public int LOD;

		[Token(Token = "0x4000C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[Tooltip("Scale of the character. Value of 1 means normal adult human size.")]
		public float scale;

		[Token(Token = "0x4000C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("If true, will keep the toes planted even if head target is out of reach, so this can cause the camera to exit the head if it is too high for the model to reach. Enabling this increases the cost of the solver as the legs will have to be solved multiple times.")]
		public bool plantFeet;

		[Token(Token = "0x4000C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("The spine solver.")]
		public Spine spine;

		[Token(Token = "0x4000C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("The left arm solver.")]
		public Arm leftArm;

		[Token(Token = "0x4000C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Tooltip("The right arm solver.")]
		public Arm rightArm;

		[Token(Token = "0x4000C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Tooltip("The left leg solver.")]
		public Leg leftLeg;

		[Token(Token = "0x4000C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Tooltip("The right leg solver.")]
		public Leg rightLeg;

		[Token(Token = "0x4000C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Tooltip("Procedural leg shuffling for stationary VR games. Not designed for roomscale and thumbstick locomotion. For those it would be better to use a strafing locomotion blend tree to make the character follow the horizontal direction towards the HMD by root motion or script.")]
		public Locomotion locomotion;

		[Token(Token = "0x4000C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Leg[] legs;

		[Token(Token = "0x4000C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Arm[] arms;

		[Token(Token = "0x4000C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Vector3 headPosition;

		[Token(Token = "0x4000C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private Vector3 headDeltaPosition;

		[Token(Token = "0x4000C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Vector3 raycastOriginPelvis;

		[Token(Token = "0x4000C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private Vector3 lastOffset;

		[Token(Token = "0x4000C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private Vector3 debugPos1;

		[Token(Token = "0x4000C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private Vector3 debugPos2;

		[Token(Token = "0x4000C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private Vector3 debugPos3;

		[Token(Token = "0x4000C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		private Vector3 debugPos4;

		[Token(Token = "0x170000CF")]
		public Animator animator
		{
			[Token(Token = "0x6000A3C")]
			[Address(RVA = "0x1088014", Offset = "0x1088014", VA = "0x1088014")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A3D")]
			[Address(RVA = "0x108801C", Offset = "0x108801C", VA = "0x108801C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000D0")]
		[HideInInspector]
		public VirtualBone rootBone
		{
			[Token(Token = "0x6000A55")]
			[Address(RVA = "0x108C028", Offset = "0x108C028", VA = "0x108C028")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A56")]
			[Address(RVA = "0x108C030", Offset = "0x108C030", VA = "0x108C030")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000A3E")]
		[Address(RVA = "0x1088024", Offset = "0x1088024", VA = "0x1088024")]
		public void SetToReferences(VRIK.References references)
		{
		}

		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0x10884F0", Offset = "0x10884F0", VA = "0x10884F0")]
		public void GuessHandOrientations(VRIK.References references, bool onlyIfZero)
		{
		}

		[Token(Token = "0x6000A40")]
		[Address(RVA = "0x1088384", Offset = "0x1088384", VA = "0x1088384")]
		public void DefaultAnimationCurves()
		{
		}

		[Token(Token = "0x6000A41")]
		[Address(RVA = "0x1088904", Offset = "0x1088904", VA = "0x1088904")]
		public void AddPositionOffset(PositionOffset positionOffset, Vector3 value)
		{
		}

		[Token(Token = "0x6000A42")]
		[Address(RVA = "0x1088A4C", Offset = "0x1088A4C", VA = "0x1088A4C")]
		public void AddRotationOffset(RotationOffset rotationOffset, Vector3 value)
		{
		}

		[Token(Token = "0x6000A43")]
		[Address(RVA = "0x1088A8C", Offset = "0x1088A8C", VA = "0x1088A8C")]
		public void AddRotationOffset(RotationOffset rotationOffset, Quaternion value)
		{
		}

		[Token(Token = "0x6000A44")]
		[Address(RVA = "0x1088BB0", Offset = "0x1088BB0", VA = "0x1088BB0")]
		public void AddPlatformMotion(Vector3 deltaPosition, Quaternion deltaRotation, Vector3 platformPivot)
		{
		}

		[Token(Token = "0x6000A45")]
		[Address(RVA = "0x1088C8C", Offset = "0x1088C8C", VA = "0x1088C8C")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000A46")]
		[Address(RVA = "0x1089490", Offset = "0x1089490", VA = "0x1089490", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000A47")]
		[Address(RVA = "0x10895E4", Offset = "0x10895E4", VA = "0x10895E4", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0x10897D0", Offset = "0x10897D0", VA = "0x10897D0", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000A49")]
		[Address(RVA = "0x1089840", Offset = "0x1089840", VA = "0x1089840", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000A4A")]
		[Address(RVA = "0x10898B0", Offset = "0x10898B0", VA = "0x10898B0", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0x1089AB8", Offset = "0x1089AB8", VA = "0x1089AB8")]
		private Vector3 GetNormal(Transform[] transforms)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0x10887F0", Offset = "0x10887F0", VA = "0x10887F0")]
		private static Keyframe[] GetSineKeyframes(float mag)
		{
			return null;
		}

		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0x1088DA8", Offset = "0x1088DA8", VA = "0x1088DA8")]
		private void UpdateSolverTransforms()
		{
		}

		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0x1089D28", Offset = "0x1089D28", VA = "0x1089D28", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000A4F")]
		[Address(RVA = "0x1089D6C", Offset = "0x1089D6C", VA = "0x1089D6C", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000A50")]
		[Address(RVA = "0x108B47C", Offset = "0x108B47C", VA = "0x108B47C")]
		private void WriteTransforms()
		{
		}

		[Token(Token = "0x6000A51")]
		[Address(RVA = "0x1088EF8", Offset = "0x1088EF8", VA = "0x1088EF8")]
		private void Read(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, bool hasArms)
		{
		}

		[Token(Token = "0x6000A52")]
		[Address(RVA = "0x108A188", Offset = "0x108A188", VA = "0x108A188")]
		private void Solve()
		{
		}

		[Token(Token = "0x6000A53")]
		[Address(RVA = "0x108B8D0", Offset = "0x108B8D0", VA = "0x108B8D0")]
		private Vector3 GetPosition(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A54")]
		[Address(RVA = "0x108B90C", Offset = "0x108B90C", VA = "0x108B90C")]
		private Quaternion GetRotation(int index)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000A57")]
		[Address(RVA = "0x108B338", Offset = "0x108B338", VA = "0x108B338")]
		private void Write()
		{
		}

		[Token(Token = "0x6000A58")]
		[Address(RVA = "0x108B944", Offset = "0x108B944", VA = "0x108B944")]
		private Vector3 GetPelvisOffset(float deltaTime)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0x108C038", Offset = "0x108C038", VA = "0x108C038")]
		public IKSolverVR()
		{
		}
	}
	[Token(Token = "0x20001D0")]
	public class TwistRelaxer : MonoBehaviour
	{
		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IK ik;

		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If using multiple solvers, add them in inverse hierarchical order - first forearm roll bone, then forearm bone and upper arm bone.")]
		public TwistSolver[] twistSolvers;

		[Token(Token = "0x6000AE6")]
		[Address(RVA = "0x109AD40", Offset = "0x109AD40", VA = "0x109AD40")]
		public void Start()
		{
		}

		[Token(Token = "0x6000AE7")]
		[Address(RVA = "0x109B47C", Offset = "0x109B47C", VA = "0x109B47C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AE8")]
		[Address(RVA = "0x109B5E8", Offset = "0x109B5E8", VA = "0x109B5E8")]
		private void OnPostUpdate()
		{
		}

		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0x109BB7C", Offset = "0x109BB7C", VA = "0x109BB7C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000AEA")]
		[Address(RVA = "0x109BC2C", Offset = "0x109BC2C", VA = "0x109BC2C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000AEB")]
		[Address(RVA = "0x109BD64", Offset = "0x109BD64", VA = "0x109BD64")]
		public TwistRelaxer()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D1")]
	public class TwistSolver
	{
		[Token(Token = "0x4000D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("The transform that this solver operates on.")]
		public Transform transform;

		[Token(Token = "0x4000D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If this is the forearm roll bone, the parent should be the forearm bone. If null, will be found automatically.")]
		public Transform parent;

		[Token(Token = "0x4000D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If this is the forearm roll bone, the child should be the hand bone. If null, will attempt to find automatically. Assign the hand manually if the hand bone is not a child of the roll bone.")]
		public Transform[] children;

		[Token(Token = "0x4000D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 1f)]
		[Tooltip("The weight of relaxing the twist of this Transform")]
		public float weight;

		[Token(Token = "0x4000D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("If 0.5, this Transform will be twisted half way from parent to child. If 1, the twist angle will be locked to the child and will rotate with along with it.")]
		[Range(0f, 1f)]
		public float parentChildCrossfade;

		[Token(Token = "0x4000D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(-180f, 180f)]
		[Tooltip("Rotation offset around the twist axis.")]
		public float twistAngleOffset;

		[Token(Token = "0x4000D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 twistAxis;

		[Token(Token = "0x4000D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 axis;

		[Token(Token = "0x4000D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 axisRelativeToParentDefault;

		[Token(Token = "0x4000D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 axisRelativeToChildDefault;

		[Token(Token = "0x4000D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Quaternion[] childRotations;

		[Token(Token = "0x4000D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool inititated;

		[Token(Token = "0x4000D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Quaternion defaultLocalRotation;

		[Token(Token = "0x4000D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Quaternion[] defaultChildLocalRotations;

		[Token(Token = "0x6000AEC")]
		[Address(RVA = "0x109BDC8", Offset = "0x109BDC8", VA = "0x109BDC8")]
		public TwistSolver()
		{
		}

		[Token(Token = "0x6000AED")]
		[Address(RVA = "0x109AF28", Offset = "0x109AF28", VA = "0x109AF28")]
		public void Initiate()
		{
		}

		[Token(Token = "0x6000AEE")]
		[Address(RVA = "0x109B53C", Offset = "0x109B53C", VA = "0x109B53C")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x6000AEF")]
		[Address(RVA = "0x109B698", Offset = "0x109B698", VA = "0x109B698")]
		public void Relax()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D2")]
	public class InteractionEffector
	{
		[Token(Token = "0x4000D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Poser poser;

		[Token(Token = "0x4000D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private IKEffector effector;

		[Token(Token = "0x4000D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float timer;

		[Token(Token = "0x4000D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float length;

		[Token(Token = "0x4000D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float weight;

		[Token(Token = "0x4000D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float fadeInSpeed;

		[Token(Token = "0x4000D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float defaultPositionWeight;

		[Token(Token = "0x4000D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float defaultRotationWeight;

		[Token(Token = "0x4000D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float defaultPull;

		[Token(Token = "0x4000D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float defaultReach;

		[Token(Token = "0x4000D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float defaultPush;

		[Token(Token = "0x4000D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float defaultPushParent;

		[Token(Token = "0x4000D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float defaultBendGoalWeight;

		[Token(Token = "0x4000D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float resetTimer;

		[Token(Token = "0x4000D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool positionWeightUsed;

		[Token(Token = "0x4000D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool rotationWeightUsed;

		[Token(Token = "0x4000D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		private bool pullUsed;

		[Token(Token = "0x4000D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		private bool reachUsed;

		[Token(Token = "0x4000D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool pushUsed;

		[Token(Token = "0x4000D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		private bool pushParentUsed;

		[Token(Token = "0x4000D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
		private bool bendGoalWeightUsed;

		[Token(Token = "0x4000D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x67")]
		private bool pickedUp;

		[Token(Token = "0x4000D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool defaults;

		[Token(Token = "0x4000D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool pickUpOnPostFBBIK;

		[Token(Token = "0x4000D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 pickUpPosition;

		[Token(Token = "0x4000D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 pausePositionRelative;

		[Token(Token = "0x4000D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Quaternion pickUpRotation;

		[Token(Token = "0x4000D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Quaternion pauseRotationRelative;

		[Token(Token = "0x4000D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private InteractionTarget interactionTarget;

		[Token(Token = "0x4000D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Transform target;

		[Token(Token = "0x4000D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private List<bool> triggered;

		[Token(Token = "0x4000D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private InteractionSystem interactionSystem;

		[Token(Token = "0x4000D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool started;

		[Token(Token = "0x170000F2")]
		public FullBodyBipedEffector effectorType
		{
			[Token(Token = "0x6000AF0")]
			[Address(RVA = "0x109BEF8", Offset = "0x109BEF8", VA = "0x109BEF8")]
			[CompilerGenerated]
			get
			{
				return default(FullBodyBipedEffector);
			}
			[Token(Token = "0x6000AF1")]
			[Address(RVA = "0x109BF00", Offset = "0x109BF00", VA = "0x109BF00")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000F3")]
		public bool isPaused
		{
			[Token(Token = "0x6000AF2")]
			[Address(RVA = "0x109BF08", Offset = "0x109BF08", VA = "0x109BF08")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000AF3")]
			[Address(RVA = "0x109BF10", Offset = "0x109BF10", VA = "0x109BF10")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000F4")]
		public InteractionObject interactionObject
		{
			[Token(Token = "0x6000AF4")]
			[Address(RVA = "0x109BF1C", Offset = "0x109BF1C", VA = "0x109BF1C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AF5")]
			[Address(RVA = "0x109BF24", Offset = "0x109BF24", VA = "0x109BF24")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000F5")]
		public bool inInteraction
		{
			[Token(Token = "0x6000AF6")]
			[Address(RVA = "0x109BF2C", Offset = "0x109BF2C", VA = "0x109BF2C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000F6")]
		public float progress
		{
			[Token(Token = "0x6000B00")]
			[Address(RVA = "0x109DAC4", Offset = "0x109DAC4", VA = "0x109DAC4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000AF7")]
		[Address(RVA = "0x109BF8C", Offset = "0x109BF8C", VA = "0x109BF8C")]
		public InteractionEffector(FullBodyBipedEffector effectorType)
		{
		}

		[Token(Token = "0x6000AF8")]
		[Address(RVA = "0x109C028", Offset = "0x109C028", VA = "0x109C028")]
		public void Initiate(InteractionSystem interactionSystem)
		{
		}

		[Token(Token = "0x6000AF9")]
		[Address(RVA = "0x109C0E0", Offset = "0x109C0E0", VA = "0x109C0E0")]
		private void StoreDefaults()
		{
		}

		[Token(Token = "0x6000AFA")]
		[Address(RVA = "0x109C24C", Offset = "0x109C24C", VA = "0x109C24C")]
		public bool ResetToDefaults(float speed, float deltaTime)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AFB")]
		[Address(RVA = "0x109C624", Offset = "0x109C624", VA = "0x109C624")]
		public bool Pause()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AFC")]
		[Address(RVA = "0x109C744", Offset = "0x109C744", VA = "0x109C744")]
		public bool Resume()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AFD")]
		[Address(RVA = "0x109C798", Offset = "0x109C798", VA = "0x109C798")]
		public bool Start(InteractionObject interactionObject, string tag, float fadeInTime, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AFE")]
		[Address(RVA = "0x109C8B4", Offset = "0x109C8B4", VA = "0x109C8B4")]
		public bool Start(InteractionObject interactionObject, InteractionTarget interactionTarget, float fadeInTime, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AFF")]
		[Address(RVA = "0x109CD64", Offset = "0x109CD64", VA = "0x109CD64")]
		public void Update(Transform root, float speed, float deltaTime)
		{
		}

		[Token(Token = "0x6000B01")]
		[Address(RVA = "0x109D4B4", Offset = "0x109D4B4", VA = "0x109D4B4")]
		private void TriggerUntriggeredEvents(bool checkTime, out bool pickUp, out bool pause)
		{
		}

		[Token(Token = "0x6000B02")]
		[Address(RVA = "0x109D6D8", Offset = "0x109D6D8", VA = "0x109D6D8")]
		private void PickUp(Transform root)
		{
		}

		[Token(Token = "0x6000B03")]
		[Address(RVA = "0x109D9A8", Offset = "0x109D9A8", VA = "0x109D9A8")]
		public bool Stop()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B04")]
		[Address(RVA = "0x109DAF4", Offset = "0x109DAF4", VA = "0x109DAF4")]
		public void OnPostFBBIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D3")]
	public class InteractionLookAt
	{
		[Token(Token = "0x4000D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("(Optional) reference to the LookAtIK component that will be used to make the character look at the objects that it is interacting with.")]
		public LookAtIK ik;

		[Token(Token = "0x4000D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Interpolation speed of the LookAtIK target.")]
		public float lerpSpeed;

		[Token(Token = "0x4000D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Interpolation speed of the LookAtIK weight.")]
		public float weightSpeed;

		[Token(Token = "0x4000D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public bool isPaused;

		[Token(Token = "0x4000D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform lookAtTarget;

		[Token(Token = "0x4000D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float stopLookTime;

		[Token(Token = "0x4000D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float weight;

		[Token(Token = "0x4000D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool firstFBBIKSolve;

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0xF31E48", Offset = "0xF31E48", VA = "0xF31E48")]
		public void Look(Transform target, float time)
		{
		}

		[Token(Token = "0x6000B06")]
		[Address(RVA = "0xF31F64", Offset = "0xF31F64", VA = "0xF31F64")]
		public void OnFixTransforms()
		{
		}

		[Token(Token = "0x6000B07")]
		[Address(RVA = "0xF31FFC", Offset = "0xF31FFC", VA = "0xF31FFC")]
		public void Update()
		{
		}

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0xF32204", Offset = "0xF32204", VA = "0xF32204")]
		public void SolveSpine()
		{
		}

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0xF322AC", Offset = "0xF322AC", VA = "0xF322AC")]
		public void SolveHead()
		{
		}

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0xF32358", Offset = "0xF32358", VA = "0xF32358")]
		public InteractionLookAt()
		{
		}
	}
	[Token(Token = "0x20001D4")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Interaction System/Interaction Object")]
	[HelpURL("https://www.youtube.com/watch?v=r5jiZnsDH3M")]
	public class InteractionObject : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20001D5")]
		public class InteractionEvent
		{
			[Token(Token = "0x4000D6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The time of the event since interaction start.")]
			public float time;

			[Token(Token = "0x4000D6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("If true, the interaction will be paused on this event. The interaction can be resumed by InteractionSystem.ResumeInteraction() or InteractionSystem.ResumeAll;")]
			public bool pause;

			[Token(Token = "0x4000D6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
			[Tooltip("If true, the object will be parented to the effector bone on this event. Note that picking up like this can be done by only a single effector at a time. If you wish to pick up an object with both hands, see the Interaction PickUp2Handed demo scene.")]
			public bool pickUp;

			[Token(Token = "0x4000D6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The animations called on this event.")]
			public AnimatorEvent[] animations;

			[Token(Token = "0x4000D70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("The messages sent on this event using GameObject.SendMessage().")]
			public Message[] messages;

			[Token(Token = "0x4000D71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("The UnityEvent to invoke on this event.")]
			public UnityEvent unityEvent;

			[Token(Token = "0x6000B27")]
			[Address(RVA = "0xF33930", Offset = "0xF33930", VA = "0xF33930")]
			public void Activate(Transform t)
			{
			}

			[Token(Token = "0x6000B28")]
			[Address(RVA = "0xF33BC8", Offset = "0xF33BC8", VA = "0xF33BC8")]
			public InteractionEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001D6")]
		public class Message
		{
			[Token(Token = "0x4000D72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The name of the function called.")]
			public string function;

			[Token(Token = "0x4000D73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The recipient game object.")]
			public GameObject recipient;

			[Token(Token = "0x4000D74")]
			private const string empty = "";

			[Token(Token = "0x6000B29")]
			[Address(RVA = "0xF33AD0", Offset = "0xF33AD0", VA = "0xF33AD0")]
			public void Send(Transform t)
			{
			}

			[Token(Token = "0x6000B2A")]
			[Address(RVA = "0xF33BD0", Offset = "0xF33BD0", VA = "0xF33BD0")]
			public Message()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001D7")]
		public class AnimatorEvent
		{
			[Token(Token = "0x4000D75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The Animator component that will receive the AnimatorEvents.")]
			public Animator animator;

			[Token(Token = "0x4000D76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The Animation component that will receive the AnimatorEvents (Legacy).")]
			public Animation animation;

			[Token(Token = "0x4000D77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("The name of the animation state.")]
			public string animationState;

			[Token(Token = "0x4000D78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("The crossfading time.")]
			public float crossfadeTime;

			[Token(Token = "0x4000D79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("The layer of the animation state (if using Legacy, the animation state will be forced to this layer).")]
			public int layer;

			[Token(Token = "0x4000D7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("Should the animation always start from 0 normalized time?")]
			public bool resetNormalizedTime;

			[Token(Token = "0x4000D7B")]
			private const string empty = "";

			[Token(Token = "0x6000B2B")]
			[Address(RVA = "0xF339F4", Offset = "0xF339F4", VA = "0xF339F4")]
			public void Activate(bool pickUp)
			{
			}

			[Token(Token = "0x6000B2C")]
			[Address(RVA = "0xF33BD8", Offset = "0xF33BD8", VA = "0xF33BD8")]
			private void Activate(Animator animator)
			{
			}

			[Token(Token = "0x6000B2D")]
			[Address(RVA = "0xF33C88", Offset = "0xF33C88", VA = "0xF33C88")]
			private void Activate(Animation animation)
			{
			}

			[Token(Token = "0x6000B2E")]
			[Address(RVA = "0xF33D60", Offset = "0xF33D60", VA = "0xF33D60")]
			public AnimatorEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001D8")]
		public class WeightCurve
		{
			[Serializable]
			[Token(Token = "0x20001D9")]
			public enum Type
			{
				[Token(Token = "0x4000D7F")]
				PositionWeight,
				[Token(Token = "0x4000D80")]
				RotationWeight,
				[Token(Token = "0x4000D81")]
				PositionOffsetX,
				[Token(Token = "0x4000D82")]
				PositionOffsetY,
				[Token(Token = "0x4000D83")]
				PositionOffsetZ,
				[Token(Token = "0x4000D84")]
				Pull,
				[Token(Token = "0x4000D85")]
				Reach,
				[Token(Token = "0x4000D86")]
				RotateBoneWeight,
				[Token(Token = "0x4000D87")]
				Push,
				[Token(Token = "0x4000D88")]
				PushParent,
				[Token(Token = "0x4000D89")]
				PoserWeight,
				[Token(Token = "0x4000D8A")]
				BendGoalWeight
			}

			[Token(Token = "0x4000D7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The type of the curve (InteractionObject.WeightCurve.Type).")]
			public Type type;

			[Token(Token = "0x4000D7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The weight curve.")]
			public AnimationCurve curve;

			[Token(Token = "0x6000B2F")]
			[Address(RVA = "0xF3305C", Offset = "0xF3305C", VA = "0xF3305C")]
			public float GetValue(float timer)
			{
				return default(float);
			}

			[Token(Token = "0x6000B30")]
			[Address(RVA = "0xF33D74", Offset = "0xF33D74", VA = "0xF33D74")]
			public WeightCurve()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001DA")]
		public class Multiplier
		{
			[Token(Token = "0x4000D8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The curve type to multiply.")]
			public WeightCurve.Type curve;

			[Token(Token = "0x4000D8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("The multiplier of the curve's value.")]
			public float multiplier;

			[Token(Token = "0x4000D8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The resulting value will be applied to this channel.")]
			public WeightCurve.Type result;

			[Token(Token = "0x6000B31")]
			[Address(RVA = "0xF33630", Offset = "0xF33630", VA = "0xF33630")]
			public float GetValue(WeightCurve weightCurve, float timer)
			{
				return default(float);
			}

			[Token(Token = "0x6000B32")]
			[Address(RVA = "0xF33D7C", Offset = "0xF33D7C", VA = "0xF33D7C")]
			public Multiplier()
			{
			}
		}

		[Token(Token = "0x4000D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If the Interaction System has a 'Look At' LookAtIK component assigned, will use it to make the character look at the specified Transform. If unassigned, will look at this GameObject.")]
		public Transform otherLookAtTarget;

		[Token(Token = "0x4000D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The root Transform of the InteractionTargets. If null, will use this GameObject. GetComponentsInChildren<InteractionTarget>() will be used at initiation to find all InteractionTargets associated with this InteractionObject.")]
		public Transform otherTargetsRoot;

		[Token(Token = "0x4000D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If assigned, all PositionOffset channels will be applied in the rotation space of this Transform. If not, they will be in the rotation space of the character.")]
		public Transform positionOffsetSpace;

		[Token(Token = "0x4000D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public WeightCurve[] weightCurves;

		[Token(Token = "0x4000D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Multiplier[] multipliers;

		[Token(Token = "0x4000D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public InteractionEvent[] events;

		[Token(Token = "0x4000D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private InteractionTarget[] targets;

		[Token(Token = "0x170000F7")]
		public float length
		{
			[Token(Token = "0x6000B13")]
			[Address(RVA = "0xF3258C", Offset = "0xF3258C", VA = "0xF3258C")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B14")]
			[Address(RVA = "0xF32594", Offset = "0xF32594", VA = "0xF32594")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000F8")]
		public InteractionSystem lastUsedInteractionSystem
		{
			[Token(Token = "0x6000B15")]
			[Address(RVA = "0xF3259C", Offset = "0xF3259C", VA = "0xF3259C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B16")]
			[Address(RVA = "0xF325A4", Offset = "0xF325A4", VA = "0xF325A4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000F9")]
		public Transform lookAtTarget
		{
			[Token(Token = "0x6000B18")]
			[Address(RVA = "0xF327E4", Offset = "0xF327E4", VA = "0xF327E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FA")]
		public Transform targetsRoot
		{
			[Token(Token = "0x6000B20")]
			[Address(RVA = "0xF32764", Offset = "0xF32764", VA = "0xF32764")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0xF3236C", Offset = "0xF3236C", VA = "0xF3236C")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000B0C")]
		[Address(RVA = "0xF323B0", Offset = "0xF323B0", VA = "0xF323B0")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000B0D")]
		[Address(RVA = "0xF323F4", Offset = "0xF323F4", VA = "0xF323F4")]
		[ContextMenu("TUTORIAL VIDEO (PART 1: BASICS)")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x6000B0E")]
		[Address(RVA = "0xF32438", Offset = "0xF32438", VA = "0xF32438")]
		[ContextMenu("TUTORIAL VIDEO (PART 2: PICKING UP...)")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x6000B0F")]
		[Address(RVA = "0xF3247C", Offset = "0xF3247C", VA = "0xF3247C")]
		[ContextMenu("TUTORIAL VIDEO (PART 3: ANIMATION)")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x6000B10")]
		[Address(RVA = "0xF324C0", Offset = "0xF324C0", VA = "0xF324C0")]
		[ContextMenu("TUTORIAL VIDEO (PART 4: TRIGGERS)")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x6000B11")]
		[Address(RVA = "0xF32504", Offset = "0xF32504", VA = "0xF32504")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000B12")]
		[Address(RVA = "0xF32548", Offset = "0xF32548", VA = "0xF32548")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000B17")]
		[Address(RVA = "0xF325AC", Offset = "0xF325AC", VA = "0xF325AC")]
		public void Initiate()
		{
		}

		[Token(Token = "0x6000B19")]
		[Address(RVA = "0xF32864", Offset = "0xF32864", VA = "0xF32864")]
		public InteractionTarget GetTarget(FullBodyBipedEffector effectorType, InteractionSystem interactionSystem)
		{
			return null;
		}

		[Token(Token = "0x6000B1A")]
		[Address(RVA = "0xF329B4", Offset = "0xF329B4", VA = "0xF329B4")]
		public bool CurveUsed(WeightCurve.Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B1B")]
		[Address(RVA = "0xF32A48", Offset = "0xF32A48", VA = "0xF32A48")]
		public InteractionTarget[] GetTargets()
		{
			return null;
		}

		[Token(Token = "0x6000B1C")]
		[Address(RVA = "0xF32A50", Offset = "0xF32A50", VA = "0xF32A50")]
		public Transform GetTarget(FullBodyBipedEffector effectorType, string tag)
		{
			return null;
		}

		[Token(Token = "0x6000B1D")]
		[Address(RVA = "0xF32BE8", Offset = "0xF32BE8", VA = "0xF32BE8")]
		public void OnStartInteraction(InteractionSystem interactionSystem)
		{
		}

		[Token(Token = "0x6000B1E")]
		[Address(RVA = "0xF32BF0", Offset = "0xF32BF0", VA = "0xF32BF0")]
		public void Apply(IKSolverFullBodyBiped solver, FullBodyBipedEffector effector, InteractionTarget target, float timer, float weight)
		{
		}

		[Token(Token = "0x6000B1F")]
		[Address(RVA = "0xF33660", Offset = "0xF33660", VA = "0xF33660")]
		public float GetValue(WeightCurve.Type weightCurveType, InteractionTarget target, float timer)
		{
			return default(float);
		}

		[Token(Token = "0x6000B21")]
		[Address(RVA = "0xF3386C", Offset = "0xF3386C", VA = "0xF3386C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B22")]
		[Address(RVA = "0xF33078", Offset = "0xF33078", VA = "0xF33078")]
		private void Apply(IKSolverFullBodyBiped solver, FullBodyBipedEffector effector, WeightCurve.Type type, float value, float weight)
		{
		}

		[Token(Token = "0x6000B23")]
		[Address(RVA = "0xF32B84", Offset = "0xF32B84", VA = "0xF32B84")]
		private Transform GetTarget(FullBodyBipedEffector effectorType)
		{
			return null;
		}

		[Token(Token = "0x6000B24")]
		[Address(RVA = "0xF335D4", Offset = "0xF335D4", VA = "0xF335D4")]
		private int GetWeightCurveIndex(WeightCurve.Type weightCurveType)
		{
			return default(int);
		}

		[Token(Token = "0x6000B25")]
		[Address(RVA = "0xF33870", Offset = "0xF33870", VA = "0xF33870")]
		private int GetMultiplierIndex(WeightCurve.Type weightCurveType)
		{
			return default(int);
		}

		[Token(Token = "0x6000B26")]
		[Address(RVA = "0xF338CC", Offset = "0xF338CC", VA = "0xF338CC")]
		public InteractionObject()
		{
		}
	}
	[Token(Token = "0x20001DB")]
	[HelpURL("https://www.youtube.com/watch?v=r5jiZnsDH3M")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Interaction System/Interaction System")]
	public class InteractionSystem : MonoBehaviour
	{
		[Token(Token = "0x20001DC")]
		public delegate void InteractionDelegate(FullBodyBipedEffector effectorType, InteractionObject interactionObject);

		[Token(Token = "0x20001DD")]
		public delegate void InteractionEventDelegate(FullBodyBipedEffector effectorType, InteractionObject interactionObject, InteractionObject.InteractionEvent interactionEvent);

		[Token(Token = "0x4000D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If not empty, only the targets with the specified tag will be used by this Interaction System.")]
		public string targetTag;

		[Token(Token = "0x4000D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The fade in time of the interaction.")]
		public float fadeInTime;

		[Token(Token = "0x4000D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("The master speed for all interactions.")]
		public float speed;

		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If > 0, lerps all the FBBIK channels used by the Interaction System back to their default or initial values when not in interaction.")]
		public float resetToDefaultsSpeed;

		[Token(Token = "0x4000D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Triggering")]
		[Tooltip("The collider that registers OnTriggerEnter and OnTriggerExit events with InteractionTriggers.")]
		[FormerlySerializedAs("collider")]
		public Collider characterCollider;

		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[FormerlySerializedAs("camera")]
		[Tooltip("Will be used by Interaction Triggers that need the camera's position. Assign the first person view character camera.")]
		public Transform FPSCamera;

		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The layers that will be raycasted from the camera (along camera.forward). All InteractionTrigger look at target colliders should be included.")]
		public LayerMask camRaycastLayers;

		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Max distance of raycasting from the camera.")]
		public float camRaycastDistance;

		[Token(Token = "0x4000D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<InteractionTrigger> inContact;

		[Token(Token = "0x4000D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<int> bestRangeIndexes;

		[Token(Token = "0x4000D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public InteractionDelegate OnInteractionStart;

		[Token(Token = "0x4000D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public InteractionDelegate OnInteractionPause;

		[Token(Token = "0x4000D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public InteractionDelegate OnInteractionPickUp;

		[Token(Token = "0x4000D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public InteractionDelegate OnInteractionResume;

		[Token(Token = "0x4000D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public InteractionDelegate OnInteractionStop;

		[Token(Token = "0x4000D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public InteractionEventDelegate OnInteractionEvent;

		[Token(Token = "0x4000D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public RaycastHit raycastHit;

		[Token(Token = "0x4000DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Space(10f)]
		[SerializeField]
		[Tooltip("Reference to the FBBIK component.")]
		private FullBodyBipedIK fullBody;

		[Token(Token = "0x4000DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Handles looking at the interactions.")]
		public InteractionLookAt lookAt;

		[Token(Token = "0x4000DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private InteractionEffector[] interactionEffectors;

		[Token(Token = "0x4000DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Collider lastCollider;

		[Token(Token = "0x4000DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Collider c;

		[Token(Token = "0x4000DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float lastTime;

		[Token(Token = "0x170000FB")]
		public bool inInteraction
		{
			[Token(Token = "0x6000B3B")]
			[Address(RVA = "0xF33FAC", Offset = "0xF33FAC", VA = "0xF33FAC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000FC")]
		public FullBodyBipedIK ik
		{
			[Token(Token = "0x6000B56")]
			[Address(RVA = "0xF35B58", Offset = "0xF35B58", VA = "0xF35B58")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B57")]
			[Address(RVA = "0xF35B60", Offset = "0xF35B60", VA = "0xF35B60")]
			set
			{
			}
		}

		[Token(Token = "0x170000FD")]
		public List<InteractionTrigger> triggersInRange
		{
			[Token(Token = "0x6000B58")]
			[Address(RVA = "0xF35B68", Offset = "0xF35B68", VA = "0xF35B68")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B59")]
			[Address(RVA = "0xF35B70", Offset = "0xF35B70", VA = "0xF35B70")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000FE")]
		public bool initiated
		{
			[Token(Token = "0x6000B5A")]
			[Address(RVA = "0xF35B78", Offset = "0xF35B78", VA = "0xF35B78")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B5B")]
			[Address(RVA = "0xF35B80", Offset = "0xF35B80", VA = "0xF35B80")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000B33")]
		[Address(RVA = "0xF33D8C", Offset = "0xF33D8C", VA = "0xF33D8C")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000B34")]
		[Address(RVA = "0xF33DD0", Offset = "0xF33DD0", VA = "0xF33DD0")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000B35")]
		[Address(RVA = "0xF33E14", Offset = "0xF33E14", VA = "0xF33E14")]
		[ContextMenu("TUTORIAL VIDEO (PART 1: BASICS)")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x6000B36")]
		[Address(RVA = "0xF33E58", Offset = "0xF33E58", VA = "0xF33E58")]
		[ContextMenu("TUTORIAL VIDEO (PART 2: PICKING UP...)")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x6000B37")]
		[Address(RVA = "0xF33E9C", Offset = "0xF33E9C", VA = "0xF33E9C")]
		[ContextMenu("TUTORIAL VIDEO (PART 3: ANIMATION)")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x6000B38")]
		[Address(RVA = "0xF33EE0", Offset = "0xF33EE0", VA = "0xF33EE0")]
		[ContextMenu("TUTORIAL VIDEO (PART 4: TRIGGERS)")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x6000B39")]
		[Address(RVA = "0xF33F24", Offset = "0xF33F24", VA = "0xF33F24")]
		[ContextMenu("Support")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000B3A")]
		[Address(RVA = "0xF33F68", Offset = "0xF33F68", VA = "0xF33F68")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000B3C")]
		[Address(RVA = "0xF34128", Offset = "0xF34128", VA = "0xF34128")]
		public bool IsInInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B3D")]
		[Address(RVA = "0xF341E4", Offset = "0xF341E4", VA = "0xF341E4")]
		public bool IsPaused(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B3E")]
		[Address(RVA = "0xF342A0", Offset = "0xF342A0", VA = "0xF342A0")]
		public bool IsPaused()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0xF3433C", Offset = "0xF3433C", VA = "0xF3433C")]
		public bool IsInSync()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B40")]
		[Address(RVA = "0xF34424", Offset = "0xF34424", VA = "0xF34424")]
		public bool StartInteraction(FullBodyBipedEffector effectorType, InteractionObject interactionObject, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B41")]
		[Address(RVA = "0xF34520", Offset = "0xF34520", VA = "0xF34520")]
		public bool StartInteraction(FullBodyBipedEffector effectorType, InteractionObject interactionObject, InteractionTarget target, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B42")]
		[Address(RVA = "0xF3462C", Offset = "0xF3462C", VA = "0xF3462C")]
		public bool PauseInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B43")]
		[Address(RVA = "0xF346B4", Offset = "0xF346B4", VA = "0xF346B4")]
		public bool ResumeInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B44")]
		[Address(RVA = "0xF3473C", Offset = "0xF3473C", VA = "0xF3473C")]
		public bool StopInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B45")]
		[Address(RVA = "0xF347C4", Offset = "0xF347C4", VA = "0xF347C4")]
		public void PauseAll()
		{
		}

		[Token(Token = "0x6000B46")]
		[Address(RVA = "0xF34830", Offset = "0xF34830", VA = "0xF34830")]
		public void ResumeAll()
		{
		}

		[Token(Token = "0x6000B47")]
		[Address(RVA = "0xF3489C", Offset = "0xF3489C", VA = "0xF3489C")]
		public void StopAll()
		{
		}

		[Token(Token = "0x6000B48")]
		[Address(RVA = "0xF348FC", Offset = "0xF348FC", VA = "0xF348FC")]
		public InteractionObject GetInteractionObject(FullBodyBipedEffector effectorType)
		{
			return null;
		}

		[Token(Token = "0x6000B49")]
		[Address(RVA = "0xF3497C", Offset = "0xF3497C", VA = "0xF3497C")]
		public float GetProgress(FullBodyBipedEffector effectorType)
		{
			return default(float);
		}

		[Token(Token = "0x6000B4A")]
		[Address(RVA = "0xF34A04", Offset = "0xF34A04", VA = "0xF34A04")]
		public float GetMinActiveProgress()
		{
			return default(float);
		}

		[Token(Token = "0x6000B4B")]
		[Address(RVA = "0xF34ABC", Offset = "0xF34ABC", VA = "0xF34ABC")]
		public bool TriggerInteraction(int index, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B4C")]
		[Address(RVA = "0xF34D4C", Offset = "0xF34D4C", VA = "0xF34D4C")]
		public bool TriggerInteraction(int index, bool interrupt, out InteractionObject interactionObject)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B4D")]
		[Address(RVA = "0xF34F20", Offset = "0xF34F20", VA = "0xF34F20")]
		public bool TriggerInteraction(int index, bool interrupt, out InteractionTarget interactionTarget)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B4E")]
		[Address(RVA = "0xF35190", Offset = "0xF35190", VA = "0xF35190")]
		public InteractionTrigger.Range GetClosestInteractionRange()
		{
			return null;
		}

		[Token(Token = "0x6000B4F")]
		[Address(RVA = "0xF3541C", Offset = "0xF3541C", VA = "0xF3541C")]
		public InteractionObject GetClosestInteractionObjectInRange()
		{
			return null;
		}

		[Token(Token = "0x6000B50")]
		[Address(RVA = "0xF35454", Offset = "0xF35454", VA = "0xF35454")]
		public InteractionTarget GetClosestInteractionTargetInRange()
		{
			return null;
		}

		[Token(Token = "0x6000B51")]
		[Address(RVA = "0xF354B4", Offset = "0xF354B4", VA = "0xF354B4")]
		public InteractionObject[] GetClosestInteractionObjectsInRange()
		{
			return null;
		}

		[Token(Token = "0x6000B52")]
		[Address(RVA = "0xF355E0", Offset = "0xF355E0", VA = "0xF355E0")]
		public InteractionTarget[] GetClosestInteractionTargetsInRange()
		{
			return null;
		}

		[Token(Token = "0x6000B53")]
		[Address(RVA = "0xF357C4", Offset = "0xF357C4", VA = "0xF357C4")]
		public bool TriggerEffectorsReady(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B54")]
		[Address(RVA = "0xF35A38", Offset = "0xF35A38", VA = "0xF35A38")]
		public InteractionTrigger.Range GetTriggerRange(int index)
		{
			return null;
		}

		[Token(Token = "0x6000B55")]
		[Address(RVA = "0xF35278", Offset = "0xF35278", VA = "0xF35278")]
		public int GetClosestTriggerIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6000B5C")]
		[Address(RVA = "0xF35B8C", Offset = "0xF35B8C", VA = "0xF35B8C")]
		public void Start()
		{
		}

		[Token(Token = "0x6000B5D")]
		[Address(RVA = "0xF364B4", Offset = "0xF364B4", VA = "0xF364B4")]
		private void InteractionPause(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6000B5E")]
		[Address(RVA = "0xF364D4", Offset = "0xF364D4", VA = "0xF364D4")]
		private void InteractionResume(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6000B5F")]
		[Address(RVA = "0xF364F0", Offset = "0xF364F0", VA = "0xF364F0")]
		private void InteractionStop(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6000B60")]
		[Address(RVA = "0xF3650C", Offset = "0xF3650C", VA = "0xF3650C")]
		private void LookAtInteraction(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6000B61")]
		[Address(RVA = "0xF36560", Offset = "0xF36560", VA = "0xF36560")]
		public void OnTriggerEnter(Collider c)
		{
		}

		[Token(Token = "0x6000B62")]
		[Address(RVA = "0xF366E4", Offset = "0xF366E4", VA = "0xF366E4")]
		public void OnTriggerExit(Collider c)
		{
		}

		[Token(Token = "0x6000B63")]
		[Address(RVA = "0xF367E0", Offset = "0xF367E0", VA = "0xF367E0")]
		private bool ContactIsInRange(int index, out int bestRangeIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B64")]
		[Address(RVA = "0xF36B3C", Offset = "0xF36B3C", VA = "0xF36B3C")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000B65")]
		[Address(RVA = "0xF36C54", Offset = "0xF36C54", VA = "0xF36C54")]
		public void Update()
		{
		}

		[Token(Token = "0x6000B66")]
		[Address(RVA = "0xF36F18", Offset = "0xF36F18", VA = "0xF36F18")]
		private void Raycasting()
		{
		}

		[Token(Token = "0x6000B67")]
		[Address(RVA = "0xF36254", Offset = "0xF36254", VA = "0xF36254")]
		private void UpdateTriggerEventBroadcasting()
		{
		}

		[Token(Token = "0x6000B68")]
		[Address(RVA = "0xF37048", Offset = "0xF37048", VA = "0xF37048")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000B69")]
		[Address(RVA = "0xF37064", Offset = "0xF37064", VA = "0xF37064")]
		private void UpdateEffectors()
		{
		}

		[Token(Token = "0x6000B6A")]
		[Address(RVA = "0xF371A8", Offset = "0xF371A8", VA = "0xF371A8")]
		private void OnPreFBBIK()
		{
		}

		[Token(Token = "0x6000B6B")]
		[Address(RVA = "0xF37230", Offset = "0xF37230", VA = "0xF37230")]
		private void OnPostFBBIK()
		{
		}

		[Token(Token = "0x6000B6C")]
		[Address(RVA = "0xF372F4", Offset = "0xF372F4", VA = "0xF372F4")]
		private void OnFixTransforms()
		{
		}

		[Token(Token = "0x6000B6D")]
		[Address(RVA = "0xF3730C", Offset = "0xF3730C", VA = "0xF3730C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000B6E")]
		[Address(RVA = "0xF34048", Offset = "0xF34048", VA = "0xF34048")]
		private bool IsValid(bool log)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B6F")]
		[Address(RVA = "0xF34C38", Offset = "0xF34C38", VA = "0xF34C38")]
		private bool TriggerIndexIsValid(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B70")]
		[Address(RVA = "0xF37784", Offset = "0xF37784", VA = "0xF37784")]
		public InteractionSystem()
		{
		}
	}
	[Token(Token = "0x20001DE")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Interaction System/Interaction Target")]
	[HelpURL("https://www.youtube.com/watch?v=r5jiZnsDH3M")]
	public class InteractionTarget : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20001DF")]
		public enum RotationMode
		{
			[Token(Token = "0x4000DB4")]
			TwoDOF,
			[Token(Token = "0x4000DB5")]
			ThreeDOF
		}

		[Serializable]
		[Token(Token = "0x20001E0")]
		public class Multiplier
		{
			[Token(Token = "0x4000DB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The curve type (InteractionObject.WeightCurve.Type).")]
			public InteractionObject.WeightCurve.Type curve;

			[Token(Token = "0x4000DB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Multiplier of the curve's value.")]
			public float multiplier;

			[Token(Token = "0x6000B85")]
			[Address(RVA = "0xF38798", Offset = "0xF38798", VA = "0xF38798")]
			public Multiplier()
			{
			}
		}

		[Token(Token = "0x4000DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The type of the FBBIK effector.")]
		public FullBodyBipedEffector effectorType;

		[Token(Token = "0x4000DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("InteractionObject weight curve multipliers for this effector target.")]
		public Multiplier[] multipliers;

		[Token(Token = "0x4000DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The interaction speed multiplier for this effector. This can be used to make interactions faster/slower for specific effectors.")]
		public float interactionSpeedMlp;

		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The pivot to twist/swing this interaction target about. For symmetric objects that can be interacted with from a certain angular range.")]
		public Transform pivot;

		[Token(Token = "0x4000DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("2 or 3 degrees of freedom to match this InteractionTarget's rotation to the effector bone rotation.")]
		public RotationMode rotationMode;

		[Token(Token = "0x4000DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The axis of twisting the interaction target (blue line).")]
		public Vector3 twistAxis;

		[Token(Token = "0x4000DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The weight of twisting the interaction target towards the effector bone in the start of the interaction.")]
		public float twistWeight;

		[Token(Token = "0x4000DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The weight of swinging the interaction target towards the effector bone in the start of the interaction. Swing is defined as a 3-DOF rotation around any axis, while twist is only around the twist axis.")]
		public float swingWeight;

		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The weight of rotating this InteractionTarget to the effector bone in the start of the interaction (and during if 'Rotate Once' is disabled")]
		[Range(0f, 1f)]
		public float threeDOFWeight;

		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("If true, will twist/swing around the pivot only once at the start of the interaction. If false, will continue rotating throuout the whole interaction.")]
		public bool rotateOnce;

		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion defaultLocalRotation;

		[Token(Token = "0x4000DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform lastPivot;

		[Token(Token = "0x6000B79")]
		[Address(RVA = "0xF37E30", Offset = "0xF37E30", VA = "0xF37E30")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0xF37E74", Offset = "0xF37E74", VA = "0xF37E74")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0xF37EB8", Offset = "0xF37EB8", VA = "0xF37EB8")]
		[ContextMenu("TUTORIAL VIDEO (PART 1: BASICS)")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0xF37EFC", Offset = "0xF37EFC", VA = "0xF37EFC")]
		[ContextMenu("TUTORIAL VIDEO (PART 2: PICKING UP...)")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0xF37F40", Offset = "0xF37F40", VA = "0xF37F40")]
		[ContextMenu("TUTORIAL VIDEO (PART 3: ANIMATION)")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x6000B7E")]
		[Address(RVA = "0xF37F84", Offset = "0xF37F84", VA = "0xF37F84")]
		[ContextMenu("TUTORIAL VIDEO (PART 4: TRIGGERS)")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x6000B7F")]
		[Address(RVA = "0xF37FC8", Offset = "0xF37FC8", VA = "0xF37FC8")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000B80")]
		[Address(RVA = "0xF3800C", Offset = "0xF3800C", VA = "0xF3800C")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000B81")]
		[Address(RVA = "0xF32FF8", Offset = "0xF32FF8", VA = "0xF32FF8")]
		public float GetValue(InteractionObject.WeightCurve.Type curveType)
		{
			return default(float);
		}

		[Token(Token = "0x6000B82")]
		[Address(RVA = "0xF38050", Offset = "0xF38050", VA = "0xF38050")]
		public void ResetRotation()
		{
		}

		[Token(Token = "0x6000B83")]
		[Address(RVA = "0xF380DC", Offset = "0xF380DC", VA = "0xF380DC")]
		public void RotateTo(Transform bone)
		{
		}

		[Token(Token = "0x6000B84")]
		[Address(RVA = "0xF38724", Offset = "0xF38724", VA = "0xF38724")]
		public InteractionTarget()
		{
		}
	}
	[Token(Token = "0x20001E1")]
	[HelpURL("https://www.youtube.com/watch?v=-TDZpNjt2mk&index=15&list=PLVxSIA1OaTOu8Nos3CalXbJ2DrKnntMv6")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Interaction System/Interaction Trigger")]
	public class InteractionTrigger : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20001E2")]
		public class CharacterPosition
		{
			[Token(Token = "0x4000DB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("If false, will not care where the character stands, as long as it is in contact with the trigger collider.")]
			public bool use;

			[Token(Token = "0x4000DBA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("The offset of the character's position relative to the trigger in XZ plane. Y position of the character is unlimited as long as it is contact with the collider.")]
			public Vector2 offset;

			[Token(Token = "0x4000DBB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Range(-180f, 180f)]
			[Tooltip("Angle offset from the default forward direction.")]
			public float angleOffset;

			[Token(Token = "0x4000DBC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Range(0f, 180f)]
			[Tooltip("Max angular offset of the character's forward from the direction of this trigger.")]
			public float maxAngle;

			[Token(Token = "0x4000DBD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("Max offset of the character's position from this range's center.")]
			public float radius;

			[Token(Token = "0x4000DBE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("If true, will rotate the trigger around its Y axis relative to the position of the character, so the object can be interacted with from all sides.")]
			public bool orbit;

			[Token(Token = "0x4000DBF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
			[Tooltip("Fixes the Y axis of the trigger to Vector3.up. This makes the trigger symmetrical relative to the object. For example a gun will be able to be picked up from the same direction relative to the barrel no matter which side the gun is resting on.")]
			public bool fixYAxis;

			[Token(Token = "0x170000FF")]
			public Vector3 offset3D
			{
				[Token(Token = "0x6000B8D")]
				[Address(RVA = "0xF38A08", Offset = "0xF38A08", VA = "0xF38A08")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x17000100")]
			public Vector3 direction3D
			{
				[Token(Token = "0x6000B8E")]
				[Address(RVA = "0xF38A14", Offset = "0xF38A14", VA = "0xF38A14")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x6000B8F")]
			[Address(RVA = "0xF38AD4", Offset = "0xF38AD4", VA = "0xF38AD4")]
			public bool IsInRange(Transform character, Transform trigger, out float error)
			{
				return default(bool);
			}

			[Token(Token = "0x6000B90")]
			[Address(RVA = "0xF39238", Offset = "0xF39238", VA = "0xF39238")]
			public CharacterPosition()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001E3")]
		public class CameraPosition
		{
			[Token(Token = "0x4000DC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("What the camera should be looking at to trigger the interaction? If null, this camera position will not be used.")]
			public Collider lookAtTarget;

			[Token(Token = "0x4000DC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The direction from the lookAtTarget towards the camera (in lookAtTarget's space).")]
			public Vector3 direction;

			[Token(Token = "0x4000DC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("Max distance from the lookAtTarget to the camera.")]
			public float maxDistance;

			[Token(Token = "0x4000DC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Range(0f, 180f)]
			[Tooltip("Max angle between the direction and the direction towards the camera.")]
			public float maxAngle;

			[Token(Token = "0x4000DC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("Fixes the Y axis of the trigger to Vector3.up. This makes the trigger symmetrical relative to the object.")]
			public bool fixYAxis;

			[Token(Token = "0x6000B91")]
			[Address(RVA = "0xF3924C", Offset = "0xF3924C", VA = "0xF3924C")]
			public Quaternion GetRotation()
			{
				return default(Quaternion);
			}

			[Token(Token = "0x6000B92")]
			[Address(RVA = "0xF393C4", Offset = "0xF393C4", VA = "0xF393C4")]
			public bool IsInRange(Transform raycastFrom, RaycastHit hit, Transform trigger, out float error)
			{
				return default(bool);
			}

			[Token(Token = "0x6000B93")]
			[Address(RVA = "0xF396CC", Offset = "0xF396CC", VA = "0xF396CC")]
			public CameraPosition()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001E4")]
		public class Range
		{
			[Serializable]
			[Token(Token = "0x20001E5")]
			public class Interaction
			{
				[Token(Token = "0x4000DCA")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("The InteractionObject to interact with.")]
				public InteractionObject interactionObject;

				[Token(Token = "0x4000DCB")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				[Tooltip("The effectors to interact with.")]
				public FullBodyBipedEffector[] effectors;

				[Token(Token = "0x6000B96")]
				[Address(RVA = "0xF39750", Offset = "0xF39750", VA = "0xF39750")]
				public Interaction()
				{
				}
			}

			[Token(Token = "0x4000DC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[HideInInspector]
			public string name;

			[Token(Token = "0x4000DC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			public bool show;

			[Token(Token = "0x4000DC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("The range for the character's position and rotation.")]
			public CharacterPosition characterPosition;

			[Token(Token = "0x4000DC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("The range for the character camera's position and rotation.")]
			public CameraPosition cameraPosition;

			[Token(Token = "0x4000DC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("Definitions of the interactions associated with this range.")]
			public Interaction[] interactions;

			[Token(Token = "0x6000B94")]
			[Address(RVA = "0xF388F4", Offset = "0xF388F4", VA = "0xF388F4")]
			public bool IsInRange(Transform character, Transform raycastFrom, RaycastHit raycastHit, Transform trigger, out float maxError)
			{
				return default(bool);
			}

			[Token(Token = "0x6000B95")]
			[Address(RVA = "0xF39740", Offset = "0xF39740", VA = "0xF39740")]
			public Range()
			{
			}
		}

		[Token(Token = "0x4000DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The valid ranges of the character's and/or its camera's position for triggering interaction when the character is in contact with the collider of this trigger.")]
		public Range[] ranges;

		[Token(Token = "0x6000B86")]
		[Address(RVA = "0xF387A0", Offset = "0xF387A0", VA = "0xF387A0")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000B87")]
		[Address(RVA = "0xF387E4", Offset = "0xF387E4", VA = "0xF387E4")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000B88")]
		[Address(RVA = "0xF38828", Offset = "0xF38828", VA = "0xF38828")]
		[ContextMenu("TUTORIAL VIDEO")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x6000B89")]
		[Address(RVA = "0xF3886C", Offset = "0xF3886C", VA = "0xF3886C")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000B8A")]
		[Address(RVA = "0xF388B0", Offset = "0xF388B0", VA = "0xF388B0")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000B8B")]
		[Address(RVA = "0xF36988", Offset = "0xF36988", VA = "0xF36988")]
		public int GetBestRangeIndex(Transform character, Transform raycastFrom, RaycastHit raycastHit)
		{
			return default(int);
		}

		[Token(Token = "0x6000B8C")]
		[Address(RVA = "0xF389A4", Offset = "0xF389A4", VA = "0xF389A4")]
		public InteractionTrigger()
		{
		}
	}
	[Token(Token = "0x20001E6")]
	public class GenericPoser : Poser
	{
		[Serializable]
		[Token(Token = "0x20001E7")]
		public class Map
		{
			[Token(Token = "0x4000DCD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform bone;

			[Token(Token = "0x4000DCE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform target;

			[Token(Token = "0x4000DCF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Vector3 defaultLocalPosition;

			[Token(Token = "0x4000DD0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private Quaternion defaultLocalRotation;

			[Token(Token = "0x6000B9E")]
			[Address(RVA = "0xF39A50", Offset = "0xF39A50", VA = "0xF39A50")]
			public Map(Transform bone, Transform target)
			{
			}

			[Token(Token = "0x6000B9F")]
			[Address(RVA = "0xF39DA8", Offset = "0xF39DA8", VA = "0xF39DA8")]
			public void StoreDefaultState()
			{
			}

			[Token(Token = "0x6000BA0")]
			[Address(RVA = "0xF39D68", Offset = "0xF39D68", VA = "0xF39D68")]
			public void FixTransform()
			{
			}

			[Token(Token = "0x6000BA1")]
			[Address(RVA = "0xF39BEC", Offset = "0xF39BEC", VA = "0xF39BEC")]
			public void Update(float localRotationWeight, float localPositionWeight)
			{
			}
		}

		[Token(Token = "0x4000DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Map[] maps;

		[Token(Token = "0x6000B97")]
		[Address(RVA = "0xF39758", Offset = "0xF39758", VA = "0xF39758", Slot = "7")]
		[ContextMenu("Auto-Mapping")]
		public override void AutoMapping()
		{
		}

		[Token(Token = "0x6000B98")]
		[Address(RVA = "0xF39AF8", Offset = "0xF39AF8", VA = "0xF39AF8", Slot = "8")]
		protected override void InitiatePoser()
		{
		}

		[Token(Token = "0x6000B99")]
		[Address(RVA = "0xF39AFC", Offset = "0xF39AFC", VA = "0xF39AFC", Slot = "9")]
		protected override void UpdatePoser()
		{
		}

		[Token(Token = "0x6000B9A")]
		[Address(RVA = "0xF39D0C", Offset = "0xF39D0C", VA = "0xF39D0C", Slot = "10")]
		protected override void FixPoserTransforms()
		{
		}

		[Token(Token = "0x6000B9B")]
		[Address(RVA = "0xF39A9C", Offset = "0xF39A9C", VA = "0xF39A9C")]
		private void StoreDefaultState()
		{
		}

		[Token(Token = "0x6000B9C")]
		[Address(RVA = "0xF399BC", Offset = "0xF399BC", VA = "0xF399BC")]
		private Transform GetTargetNamed(string tName, Transform[] array)
		{
			return null;
		}

		[Token(Token = "0x6000B9D")]
		[Address(RVA = "0xF39DEC", Offset = "0xF39DEC", VA = "0xF39DEC")]
		public GenericPoser()
		{
		}
	}
	[Token(Token = "0x20001E8")]
	public class HandPoser : Poser
	{
		[Token(Token = "0x4000DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Transform[] children;

		[Token(Token = "0x4000DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform _poseRoot;

		[Token(Token = "0x4000DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform[] poseChildren;

		[Token(Token = "0x4000DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3[] defaultLocalPositions;

		[Token(Token = "0x4000DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion[] defaultLocalRotations;

		[Token(Token = "0x6000BA2")]
		[Address(RVA = "0xF39E0C", Offset = "0xF39E0C", VA = "0xF39E0C", Slot = "7")]
		public override void AutoMapping()
		{
		}

		[Token(Token = "0x6000BA3")]
		[Address(RVA = "0xF39EDC", Offset = "0xF39EDC", VA = "0xF39EDC", Slot = "8")]
		protected override void InitiatePoser()
		{
		}

		[Token(Token = "0x6000BA4")]
		[Address(RVA = "0xF3A0B4", Offset = "0xF3A0B4", VA = "0xF3A0B4", Slot = "10")]
		protected override void FixPoserTransforms()
		{
		}

		[Token(Token = "0x6000BA5")]
		[Address(RVA = "0xF3A19C", Offset = "0xF3A19C", VA = "0xF3A19C", Slot = "9")]
		protected override void UpdatePoser()
		{
		}

		[Token(Token = "0x6000BA6")]
		[Address(RVA = "0xF39F3C", Offset = "0xF39F3C", VA = "0xF39F3C")]
		protected void StoreDefaultState()
		{
		}

		[Token(Token = "0x6000BA7")]
		[Address(RVA = "0xF3A4CC", Offset = "0xF3A4CC", VA = "0xF3A4CC")]
		public HandPoser()
		{
		}
	}
	[Token(Token = "0x20001E9")]
	public abstract class Poser : SolverManager
	{
		[Token(Token = "0x4000DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform poseRoot;

		[Token(Token = "0x4000DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x4000DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Range(0f, 1f)]
		public float localRotationWeight;

		[Token(Token = "0x4000DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0f, 1f)]
		public float localPositionWeight;

		[Token(Token = "0x4000DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool initiated;

		[Token(Token = "0x6000BA8")]
		public abstract void AutoMapping();

		[Token(Token = "0x6000BA9")]
		[Address(RVA = "0xF3A4DC", Offset = "0xF3A4DC", VA = "0xF3A4DC")]
		public void UpdateManual()
		{
		}

		[Token(Token = "0x6000BAA")]
		protected abstract void InitiatePoser();

		[Token(Token = "0x6000BAB")]
		protected abstract void UpdatePoser();

		[Token(Token = "0x6000BAC")]
		protected abstract void FixPoserTransforms();

		[Token(Token = "0x6000BAD")]
		[Address(RVA = "0xF3A4E8", Offset = "0xF3A4E8", VA = "0xF3A4E8", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x6000BAE")]
		[Address(RVA = "0xF3A52C", Offset = "0xF3A52C", VA = "0xF3A52C", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0xF3A558", Offset = "0xF3A558", VA = "0xF3A558", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0xF39DFC", Offset = "0xF39DFC", VA = "0xF39DFC")]
		protected Poser()
		{
		}
	}
	[Token(Token = "0x20001EA")]
	public class RagdollUtility : MonoBehaviour
	{
		[Token(Token = "0x20001EB")]
		public class Rigidbone
		{
			[Token(Token = "0x4000DEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody r;

			[Token(Token = "0x4000DEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform t;

			[Token(Token = "0x4000DED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Collider collider;

			[Token(Token = "0x4000DEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Joint joint;

			[Token(Token = "0x4000DEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Rigidbody c;

			[Token(Token = "0x4000DF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool updateAnchor;

			[Token(Token = "0x4000DF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Vector3 deltaPosition;

			[Token(Token = "0x4000DF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Quaternion deltaRotation;

			[Token(Token = "0x4000DF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float deltaTime;

			[Token(Token = "0x4000DF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public Vector3 lastPosition;

			[Token(Token = "0x4000DF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Quaternion lastRotation;

			[Token(Token = "0x6000BC3")]
			[Address(RVA = "0xF3ABC8", Offset = "0xF3ABC8", VA = "0xF3ABC8")]
			public Rigidbone(Rigidbody r)
			{
			}

			[Token(Token = "0x6000BC4")]
			[Address(RVA = "0xF3B774", Offset = "0xF3B774", VA = "0xF3B774")]
			public void RecordVelocity()
			{
			}

			[Token(Token = "0x6000BC5")]
			[Address(RVA = "0xF3B534", Offset = "0xF3B534", VA = "0xF3B534")]
			public void WakeUp(float velocityWeight, float angularVelocityWeight)
			{
			}
		}

		[Token(Token = "0x20001EC")]
		public class Child
		{
			[Token(Token = "0x4000DF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform t;

			[Token(Token = "0x4000DF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 localPosition;

			[Token(Token = "0x4000DF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Quaternion localRotation;

			[Token(Token = "0x6000BC6")]
			[Address(RVA = "0xF3AD70", Offset = "0xF3AD70", VA = "0xF3AD70")]
			public Child(Transform transform)
			{
			}

			[Token(Token = "0x6000BC7")]
			[Address(RVA = "0xF3B88C", Offset = "0xF3B88C", VA = "0xF3B88C")]
			public void FixTransform(float weight)
			{
			}

			[Token(Token = "0x6000BC8")]
			[Address(RVA = "0xF3B848", Offset = "0xF3B848", VA = "0xF3B848")]
			public void StoreLocalState()
			{
			}
		}

		[Token(Token = "0x20001ED")]
		[CompilerGenerated]
		private sealed class <DisableRagdollSmooth>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000DF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000DFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000DFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RagdollUtility <>4__this;

			[Token(Token = "0x17000103")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000BCC")]
				[Address(RVA = "0xF3BDF8", Offset = "0xF3BDF8", VA = "0xF3BDF8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000104")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000BCE")]
				[Address(RVA = "0xF3BE40", Offset = "0xF3BE40", VA = "0xF3BE40", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000BC9")]
			[Address(RVA = "0xF3ADDC", Offset = "0xF3ADDC", VA = "0xF3ADDC")]
			[DebuggerHidden]
			public <DisableRagdollSmooth>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x6000BCA")]
			[Address(RVA = "0xF3BC08", Offset = "0xF3BC08", VA = "0xF3BC08", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000BCB")]
			[Address(RVA = "0xF3BC0C", Offset = "0xF3BC0C", VA = "0xF3BC0C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000BCD")]
			[Address(RVA = "0xF3BE00", Offset = "0xF3BE00", VA = "0xF3BE00", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If you have multiple IK components, then this should be the one that solves last each frame.")]
		public IK ik;

		[Token(Token = "0x4000DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("How long does it take to blend from ragdoll to animation?")]
		public float ragdollToAnimationTime;

		[Token(Token = "0x4000DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("If true, IK can be used on top of physical ragdoll simulation.")]
		public bool applyIkOnRagdoll;

		[Token(Token = "0x4000DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("How much velocity transfer from animation to ragdoll?")]
		public float applyVelocity;

		[Token(Token = "0x4000DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("How much angular velocity to transfer from animation to ragdoll?")]
		public float applyAngularVelocity;

		[Token(Token = "0x4000DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Animator animator;

		[Token(Token = "0x4000DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbone[] rigidbones;

		[Token(Token = "0x4000DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Child[] children;

		[Token(Token = "0x4000DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool enableRagdollFlag;

		[Token(Token = "0x4000DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private AnimatorUpdateMode animatorUpdateMode;

		[Token(Token = "0x4000DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IK[] allIKComponents;

		[Token(Token = "0x4000DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool[] fixTransforms;

		[Token(Token = "0x4000DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float ragdollWeight;

		[Token(Token = "0x4000DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float ragdollWeightV;

		[Token(Token = "0x4000DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool fixedFrame;

		[Token(Token = "0x4000DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool[] disabledIKComponents;

		[Token(Token = "0x17000101")]
		private bool isRagdoll
		{
			[Token(Token = "0x6000BBC")]
			[Address(RVA = "0xF3A59C", Offset = "0xF3A59C", VA = "0xF3A59C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000102")]
		private bool ikUsed
		{
			[Token(Token = "0x6000BBE")]
			[Address(RVA = "0xF3B168", Offset = "0xF3B168", VA = "0xF3B168")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0xF3A570", Offset = "0xF3A570", VA = "0xF3A570")]
		public void EnableRagdoll()
		{
		}

		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0xF3A600", Offset = "0xF3A600", VA = "0xF3A600")]
		public void DisableRagdoll()
		{
		}

		[Token(Token = "0x6000BB3")]
		[Address(RVA = "0xF3A718", Offset = "0xF3A718", VA = "0xF3A718")]
		public void Start()
		{
		}

		[Token(Token = "0x6000BB4")]
		[Address(RVA = "0xF3A6A4", Offset = "0xF3A6A4", VA = "0xF3A6A4")]
		[IteratorStateMachine(typeof(<DisableRagdollSmooth>d__21))]
		private IEnumerator DisableRagdollSmooth()
		{
			return null;
		}

		[Token(Token = "0x6000BB5")]
		[Address(RVA = "0xF3AE04", Offset = "0xF3AE04", VA = "0xF3AE04")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BB6")]
		[Address(RVA = "0xF3B02C", Offset = "0xF3B02C", VA = "0xF3B02C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000BB7")]
		[Address(RVA = "0xF3B0CC", Offset = "0xF3B0CC", VA = "0xF3B0CC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0xF3B2BC", Offset = "0xF3B2BC", VA = "0xF3B2BC")]
		private void AfterLastIK()
		{
		}

		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0xF3B13C", Offset = "0xF3B13C", VA = "0xF3B13C")]
		private void AfterAnimation()
		{
		}

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0xF3B288", Offset = "0xF3B288", VA = "0xF3B288")]
		private void OnFinalPose()
		{
		}

		[Token(Token = "0x6000BBB")]
		[Address(RVA = "0xF3B33C", Offset = "0xF3B33C", VA = "0xF3B33C")]
		private void RagdollEnabler()
		{
		}

		[Token(Token = "0x6000BBD")]
		[Address(RVA = "0xF3B2E0", Offset = "0xF3B2E0", VA = "0xF3B2E0")]
		private void RecordVelocities()
		{
		}

		[Token(Token = "0x6000BBF")]
		[Address(RVA = "0xF3A648", Offset = "0xF3A648", VA = "0xF3A648")]
		private void StoreLocalState()
		{
		}

		[Token(Token = "0x6000BC0")]
		[Address(RVA = "0xF3B060", Offset = "0xF3B060", VA = "0xF3B060")]
		private void FixTransforms(float weight)
		{
		}

		[Token(Token = "0x6000BC1")]
		[Address(RVA = "0xF3B99C", Offset = "0xF3B99C", VA = "0xF3B99C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000BC2")]
		[Address(RVA = "0xF3BAD4", Offset = "0xF3BAD4", VA = "0xF3BAD4")]
		public RagdollUtility()
		{
		}
	}
	[Token(Token = "0x20001EE")]
	public abstract class RotationLimit : MonoBehaviour
	{
		[Token(Token = "0x4000DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 axis;

		[Token(Token = "0x4000DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[HideInInspector]
		public Quaternion defaultLocalRotation;

		[Token(Token = "0x4000DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private bool initiated;

		[Token(Token = "0x4000E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		private bool applicationQuit;

		[Token(Token = "0x4000E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
		private bool defaultLocalRotationSet;

		[Token(Token = "0x17000105")]
		public Vector3 secondaryAxis
		{
			[Token(Token = "0x6000BD4")]
			[Address(RVA = "0xF3C2AC", Offset = "0xF3C2AC", VA = "0xF3C2AC")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000106")]
		public Vector3 crossAxis
		{
			[Token(Token = "0x6000BD5")]
			[Address(RVA = "0xF3C2B8", Offset = "0xF3C2B8", VA = "0xF3C2B8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000107")]
		public bool defaultLocalRotationOverride
		{
			[Token(Token = "0x6000BD6")]
			[Address(RVA = "0xF3C2E8", Offset = "0xF3C2E8", VA = "0xF3C2E8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BD7")]
			[Address(RVA = "0xF3C2F0", Offset = "0xF3C2F0", VA = "0xF3C2F0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000BCF")]
		[Address(RVA = "0xF3BE48", Offset = "0xF3BE48", VA = "0xF3BE48")]
		public void SetDefaultLocalRotation()
		{
		}

		[Token(Token = "0x6000BD0")]
		[Address(RVA = "0xF3BE84", Offset = "0xF3BE84", VA = "0xF3BE84")]
		public void SetDefaultLocalRotation(Quaternion localRotation)
		{
		}

		[Token(Token = "0x6000BD1")]
		[Address(RVA = "0xF3BE9C", Offset = "0xF3BE9C", VA = "0xF3BE9C")]
		public Quaternion GetLimitedLocalRotation(Quaternion localRotation, out bool changed)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000BD2")]
		[Address(RVA = "0xF3C21C", Offset = "0xF3C21C", VA = "0xF3C21C")]
		public bool Apply()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BD3")]
		[Address(RVA = "0xF3C280", Offset = "0xF3C280", VA = "0xF3C280")]
		public void Disable()
		{
		}

		[Token(Token = "0x6000BD8")]
		protected abstract Quaternion LimitRotation(Quaternion rotation);

		[Token(Token = "0x6000BD9")]
		[Address(RVA = "0xF3C120", Offset = "0xF3C120", VA = "0xF3C120")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000BDA")]
		[Address(RVA = "0xF3C2FC", Offset = "0xF3C2FC", VA = "0xF3C2FC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000BDB")]
		[Address(RVA = "0xF3C300", Offset = "0xF3C300", VA = "0xF3C300")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x6000BDC")]
		[Address(RVA = "0xF3C328", Offset = "0xF3C328", VA = "0xF3C328")]
		protected static Quaternion Limit1DOF(Quaternion rotation, Vector3 axis)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000BDD")]
		[Address(RVA = "0xF3C3FC", Offset = "0xF3C3FC", VA = "0xF3C3FC")]
		protected static Quaternion LimitTwist(Quaternion rotation, Vector3 axis, Vector3 orthoAxis, float twistLimit)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000BDE")]
		[Address(RVA = "0xF3C654", Offset = "0xF3C654", VA = "0xF3C654")]
		protected static float GetOrthogonalAngle(Vector3 v1, Vector3 v2, Vector3 normal)
		{
			return default(float);
		}

		[Token(Token = "0x6000BDF")]
		[Address(RVA = "0xF3C7A8", Offset = "0xF3C7A8", VA = "0xF3C7A8")]
		protected RotationLimit()
		{
		}
	}
	[Token(Token = "0x20001EF")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page14.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Rotation Limits/Rotation Limit Angle")]
	public class RotationLimitAngle : RotationLimit
	{
		[Token(Token = "0x4000E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 180f)]
		public float limit;

		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 180f)]
		public float twistLimit;

		[Token(Token = "0x6000BE0")]
		[Address(RVA = "0xF3C808", Offset = "0xF3C808", VA = "0xF3C808")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000BE1")]
		[Address(RVA = "0xF3C84C", Offset = "0xF3C84C", VA = "0xF3C84C")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000BE2")]
		[Address(RVA = "0xF3C890", Offset = "0xF3C890", VA = "0xF3C890")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000BE3")]
		[Address(RVA = "0xF3C8D4", Offset = "0xF3C8D4", VA = "0xF3C8D4")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000BE4")]
		[Address(RVA = "0xF3C918", Offset = "0xF3C918", VA = "0xF3C918", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000BE5")]
		[Address(RVA = "0xF3C950", Offset = "0xF3C950", VA = "0xF3C950")]
		private Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000BE6")]
		[Address(RVA = "0xF3CC74", Offset = "0xF3CC74", VA = "0xF3CC74")]
		public RotationLimitAngle()
		{
		}
	}
	[Token(Token = "0x20001F0")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page14.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Rotation Limits/Rotation Limit Hinge")]
	public class RotationLimitHinge : RotationLimit
	{
		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool useLimits;

		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float min;

		[Token(Token = "0x4000E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float max;

		[Token(Token = "0x4000E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[HideInInspector]
		public float zeroAxisDisplayOffset;

		[Token(Token = "0x4000E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float lastAngle;

		[Token(Token = "0x6000BE7")]
		[Address(RVA = "0xF3CC84", Offset = "0xF3CC84", VA = "0xF3CC84")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000BE8")]
		[Address(RVA = "0xF3CCC8", Offset = "0xF3CCC8", VA = "0xF3CCC8")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000BE9")]
		[Address(RVA = "0xF3CD0C", Offset = "0xF3CD0C", VA = "0xF3CD0C")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000BEA")]
		[Address(RVA = "0xF3CD50", Offset = "0xF3CD50", VA = "0xF3CD50")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000BEB")]
		[Address(RVA = "0xF3CD94", Offset = "0xF3CD94", VA = "0xF3CD94", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000BEC")]
		[Address(RVA = "0xF3CD98", Offset = "0xF3CD98", VA = "0xF3CD98")]
		private Quaternion LimitHinge(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000BED")]
		[Address(RVA = "0xF3CFB8", Offset = "0xF3CFB8", VA = "0xF3CFB8")]
		public RotationLimitHinge()
		{
		}
	}
	[Token(Token = "0x20001F1")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Rotation Limits/Rotation Limit Polygonal")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page14.html")]
	public class RotationLimitPolygonal : RotationLimit
	{
		[Serializable]
		[Token(Token = "0x20001F2")]
		public class ReachCone
		{
			[Token(Token = "0x4000E0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3[] tetrahedron;

			[Token(Token = "0x4000E0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float volume;

			[Token(Token = "0x4000E10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 S;

			[Token(Token = "0x4000E11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 B;

			[Token(Token = "0x17000108")]
			public Vector3 o
			{
				[Token(Token = "0x6000BFE")]
				[Address(RVA = "0xF3EE64", Offset = "0xF3EE64", VA = "0xF3EE64")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x17000109")]
			public Vector3 a
			{
				[Token(Token = "0x6000BFF")]
				[Address(RVA = "0xF3EE90", Offset = "0xF3EE90", VA = "0xF3EE90")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x1700010A")]
			public Vector3 b
			{
				[Token(Token = "0x6000C00")]
				[Address(RVA = "0xF3EEC0", Offset = "0xF3EEC0", VA = "0xF3EEC0")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x1700010B")]
			public Vector3 c
			{
				[Token(Token = "0x6000C01")]
				[Address(RVA = "0xF3EEF0", Offset = "0xF3EEF0", VA = "0xF3EEF0")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x1700010C")]
			public bool isValid
			{
				[Token(Token = "0x6000C03")]
				[Address(RVA = "0xF3E38C", Offset = "0xF3E38C", VA = "0xF3E38C")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000C02")]
			[Address(RVA = "0xF3E830", Offset = "0xF3E830", VA = "0xF3E830")]
			public ReachCone(Vector3 _o, Vector3 _a, Vector3 _b, Vector3 _c)
			{
			}

			[Token(Token = "0x6000C04")]
			[Address(RVA = "0xF3E9A8", Offset = "0xF3E9A8", VA = "0xF3E9A8")]
			public void Calculate()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001F3")]
		public class LimitPoint
		{
			[Token(Token = "0x4000E12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 point;

			[Token(Token = "0x4000E13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float tangentWeight;

			[Token(Token = "0x6000C05")]
			[Address(RVA = "0xF3E39C", Offset = "0xF3E39C", VA = "0xF3E39C")]
			public LimitPoint()
			{
			}
		}

		[Token(Token = "0x4000E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 180f)]
		public float twistLimit;

		[Token(Token = "0x4000E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 3f)]
		public int smoothIterations;

		[Token(Token = "0x4000E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public LimitPoint[] points;

		[Token(Token = "0x4000E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public Vector3[] P;

		[Token(Token = "0x4000E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		public ReachCone[] reachCones;

		[Token(Token = "0x6000BEE")]
		[Address(RVA = "0xF3CFD0", Offset = "0xF3CFD0", VA = "0xF3CFD0")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000BEF")]
		[Address(RVA = "0xF3D014", Offset = "0xF3D014", VA = "0xF3D014")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000BF0")]
		[Address(RVA = "0xF3D058", Offset = "0xF3D058", VA = "0xF3D058")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000BF1")]
		[Address(RVA = "0xF3D09C", Offset = "0xF3D09C", VA = "0xF3D09C")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000BF2")]
		[Address(RVA = "0xF3D0E0", Offset = "0xF3D0E0", VA = "0xF3D0E0")]
		public void SetLimitPoints(LimitPoint[] points)
		{
		}

		[Token(Token = "0x6000BF3")]
		[Address(RVA = "0xF3D7C4", Offset = "0xF3D7C4", VA = "0xF3D7C4", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000BF4")]
		[Address(RVA = "0xF3D84C", Offset = "0xF3D84C", VA = "0xF3D84C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BF5")]
		[Address(RVA = "0xF3DE98", Offset = "0xF3DE98", VA = "0xF3DE98")]
		public void ResetToDefault()
		{
		}

		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0xF3D178", Offset = "0xF3D178", VA = "0xF3D178")]
		public void BuildReachCones()
		{
		}

		[Token(Token = "0x6000BF7")]
		[Address(RVA = "0xF3E400", Offset = "0xF3E400", VA = "0xF3E400")]
		private Vector3[] SmoothPoints()
		{
			return null;
		}

		[Token(Token = "0x6000BF8")]
		[Address(RVA = "0xF3EC1C", Offset = "0xF3EC1C", VA = "0xF3EC1C")]
		private float GetScalar(int k)
		{
			return default(float);
		}

		[Token(Token = "0x6000BF9")]
		[Address(RVA = "0xF3EC64", Offset = "0xF3EC64", VA = "0xF3EC64")]
		private Vector3 PointToTangentPlane(Vector3 p, float r)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0xF3ECC4", Offset = "0xF3ECC4", VA = "0xF3ECC4")]
		private Vector3 TangentPointToSphere(Vector3 q, float r)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000BFB")]
		[Address(RVA = "0xF3DBF4", Offset = "0xF3DBF4", VA = "0xF3DBF4")]
		private Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000BFC")]
		[Address(RVA = "0xF3ED30", Offset = "0xF3ED30", VA = "0xF3ED30")]
		private int GetReachCone(Vector3 L)
		{
			return default(int);
		}

		[Token(Token = "0x6000BFD")]
		[Address(RVA = "0xF3EDFC", Offset = "0xF3EDFC", VA = "0xF3EDFC")]
		public RotationLimitPolygonal()
		{
		}
	}
	[Token(Token = "0x20001F4")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Rotation Limits/Rotation Limit Spline")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page14.html")]
	public class RotationLimitSpline : RotationLimit
	{
		[Token(Token = "0x4000E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 180f)]
		public float twistLimit;

		[Token(Token = "0x4000E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public AnimationCurve spline;

		[Token(Token = "0x6000C06")]
		[Address(RVA = "0xF3EF20", Offset = "0xF3EF20", VA = "0xF3EF20")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000C07")]
		[Address(RVA = "0xF3EF64", Offset = "0xF3EF64", VA = "0xF3EF64")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000C08")]
		[Address(RVA = "0xF3EFA8", Offset = "0xF3EFA8", VA = "0xF3EFA8")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000C09")]
		[Address(RVA = "0xF3EFEC", Offset = "0xF3EFEC", VA = "0xF3EFEC")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000C0A")]
		[Address(RVA = "0xF3F030", Offset = "0xF3F030", VA = "0xF3F030")]
		public void SetSpline(Keyframe[] keyframes)
		{
		}

		[Token(Token = "0x6000C0B")]
		[Address(RVA = "0xF3F04C", Offset = "0xF3F04C", VA = "0xF3F04C", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000C0C")]
		[Address(RVA = "0xF3F084", Offset = "0xF3F084", VA = "0xF3F084")]
		public Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000C0D")]
		[Address(RVA = "0xF3F430", Offset = "0xF3F430", VA = "0xF3F430")]
		public RotationLimitSpline()
		{
		}
	}
	[Token(Token = "0x20001F5")]
	public class AimController : MonoBehaviour
	{
		[Token(Token = "0x20001F6")]
		[CompilerGenerated]
		private sealed class <TurnToTarget>d__37 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AimController <>4__this;

			[Token(Token = "0x1700010E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000C18")]
				[Address(RVA = "0xF40434", Offset = "0xF40434", VA = "0xF40434", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700010F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000C1A")]
				[Address(RVA = "0xF4047C", Offset = "0xF4047C", VA = "0xF4047C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C15")]
			[Address(RVA = "0xF40234", Offset = "0xF40234", VA = "0xF40234")]
			[DebuggerHidden]
			public <TurnToTarget>d__37(int <>1__state)
			{
			}

			[Token(Token = "0x6000C16")]
			[Address(RVA = "0xF40340", Offset = "0xF40340", VA = "0xF40340", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000C17")]
			[Address(RVA = "0xF40344", Offset = "0xF40344", VA = "0xF40344", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C19")]
			[Address(RVA = "0xF4043C", Offset = "0xF4043C", VA = "0xF4043C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Reference to the AimIK component.")]
		public AimIK ik;

		[Token(Token = "0x4000E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Master weight of the IK solver.")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x4000E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Target Smoothing")]
		[Tooltip("The target to aim at. Do not use the Target transform that is assigned to AimIK. Set to null if you wish to stop aiming.")]
		public Transform target;

		[Token(Token = "0x4000E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The time it takes to switch targets.")]
		public float targetSwitchSmoothTime;

		[Token(Token = "0x4000E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("The time it takes to blend in/out of AimIK weight.")]
		public float weightSmoothTime;

		[Token(Token = "0x4000E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Turning Towards The Target")]
		[Tooltip("Enables smooth turning towards the target according to the parameters under this header.")]
		public bool smoothTurnTowardsTarget;

		[Token(Token = "0x4000E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Speed of turning towards the target using Vector3.RotateTowards.")]
		public float maxRadiansDelta;

		[Token(Token = "0x4000E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Speed of moving towards the target using Vector3.RotateTowards.")]
		public float maxMagnitudeDelta;

		[Token(Token = "0x4000E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Speed of slerping towards the target.")]
		public float slerpSpeed;

		[Token(Token = "0x4000E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Smoothing time for turning towards the yaw and pitch of the target using Mathf.SmoothDampAngle. Value of 0 means smooth damping is disabled.")]
		public float smoothDampTime;

		[Token(Token = "0x4000E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The position of the pivot that the aim target is rotated around relative to the root of the character.")]
		public Vector3 pivotOffsetFromRoot;

		[Token(Token = "0x4000E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Minimum distance of aiming from the first bone. Keeps the solver from failing if the target is too close.")]
		public float minDistance;

		[Token(Token = "0x4000E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Offset applied to the target in world space. Convenient for scripting aiming inaccuracy.")]
		public Vector3 offset;

		[Token(Token = "0x4000E23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Character root will be rotate around the Y axis to keep root forward within this angle from the aiming direction.")]
		[Header("RootRotation")]
		[Range(0f, 180f)]
		public float maxRootAngle;

		[Token(Token = "0x4000E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("If enabled, aligns the root forward to target direction after 'Max Root Angle' has been exceeded.")]
		public bool turnToTarget;

		[Token(Token = "0x4000E25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The time of turning towards the target direction if 'Max Root Angle has been exceeded and 'Turn To Target' is enabled.")]
		public float turnToTargetTime;

		[Token(Token = "0x4000E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Header("Mode")]
		[Tooltip("If true, AimIK will consider whatever the current direction of the weapon to be the forward aiming direction and work additively on top of that. This enables you to use recoil and reloading animations seamlessly with AimIK. Adjust the Vector3 value below if the weapon is not aiming perfectly forward in the aiming animation clip.")]
		public bool useAnimatedAimDirection;

		[Token(Token = "0x4000E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The direction of the animated weapon aiming in character space. Tweak this value to adjust the aiming. 'Use Animated Aim Direction' must be enabled for this property to work.")]
		public Vector3 animatedAimDirection;

		[Token(Token = "0x4000E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Transform lastTarget;

		[Token(Token = "0x4000E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float switchWeight;

		[Token(Token = "0x4000E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float switchWeightV;

		[Token(Token = "0x4000E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float weightV;

		[Token(Token = "0x4000E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Vector3 lastPosition;

		[Token(Token = "0x4000E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3 dir;

		[Token(Token = "0x4000E2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private bool lastSmoothTowardsTarget;

		[Token(Token = "0x4000E2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB5")]
		private bool turningToTarget;

		[Token(Token = "0x4000E30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float turnToTargetMlp;

		[Token(Token = "0x4000E31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private float turnToTargetMlpV;

		[Token(Token = "0x4000E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float yawV;

		[Token(Token = "0x4000E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private float pitchV;

		[Token(Token = "0x4000E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float dirMagV;

		[Token(Token = "0x1700010D")]
		private Vector3 pivot
		{
			[Token(Token = "0x6000C10")]
			[Address(RVA = "0xF3F4BC", Offset = "0xF3F4BC", VA = "0xF3F4BC")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0xF3F43C", Offset = "0xF3F43C", VA = "0xF3F43C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C0F")]
		[Address(RVA = "0xF3F540", Offset = "0xF3F540", VA = "0xF3F540")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000C11")]
		[Address(RVA = "0xF3FD98", Offset = "0xF3FD98", VA = "0xF3FD98")]
		private void ApplyMinDistance()
		{
		}

		[Token(Token = "0x6000C12")]
		[Address(RVA = "0xF3FF1C", Offset = "0xF3FF1C", VA = "0xF3FF1C")]
		private void RootRotation()
		{
		}

		[Token(Token = "0x6000C13")]
		[Address(RVA = "0xF401C0", Offset = "0xF401C0", VA = "0xF401C0")]
		[IteratorStateMachine(typeof(<TurnToTarget>d__37))]
		private IEnumerator TurnToTarget()
		{
			return null;
		}

		[Token(Token = "0x6000C14")]
		[Address(RVA = "0xF4025C", Offset = "0xF4025C", VA = "0xF4025C")]
		public AimController()
		{
		}
	}
	[Token(Token = "0x20001F7")]
	public class AimPoser : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20001F8")]
		public class Pose
		{
			[Token(Token = "0x4000E3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool visualize;

			[Token(Token = "0x4000E3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string name;

			[Token(Token = "0x4000E3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 direction;

			[Token(Token = "0x4000E3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float yaw;

			[Token(Token = "0x4000E3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float pitch;

			[Token(Token = "0x4000E3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float angleBuffer;

			[Token(Token = "0x6000C1E")]
			[Address(RVA = "0xF40554", Offset = "0xF40554", VA = "0xF40554")]
			public bool IsInDirection(Vector3 d)
			{
				return default(bool);
			}

			[Token(Token = "0x6000C1F")]
			[Address(RVA = "0xF40AD0", Offset = "0xF40AD0", VA = "0xF40AD0")]
			public void SetAngleBuffer(float value)
			{
			}

			[Token(Token = "0x6000C20")]
			[Address(RVA = "0xF40AD8", Offset = "0xF40AD8", VA = "0xF40AD8")]
			public Pose()
			{
			}
		}

		[Token(Token = "0x4000E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float angleBuffer;

		[Token(Token = "0x4000E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Pose[] poses;

		[Token(Token = "0x6000C1B")]
		[Address(RVA = "0xF40484", Offset = "0xF40484", VA = "0xF40484")]
		public Pose GetPose(Vector3 localDirection)
		{
			return null;
		}

		[Token(Token = "0x6000C1C")]
		[Address(RVA = "0xF40A04", Offset = "0xF40A04", VA = "0xF40A04")]
		public void SetPoseActive(Pose pose)
		{
		}

		[Token(Token = "0x6000C1D")]
		[Address(RVA = "0xF40A64", Offset = "0xF40A64", VA = "0xF40A64")]
		public AimPoser()
		{
		}
	}
	[Token(Token = "0x20001F9")]
	public class Amplifier : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20001FA")]
		public class Body
		{
			[Serializable]
			[Token(Token = "0x20001FB")]
			public class EffectorLink
			{
				[Token(Token = "0x4000E4A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Type of the FBBIK effector to use")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4000E4B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("Weight of using this effector")]
				public float weight;

				[Token(Token = "0x6000C26")]
				[Address(RVA = "0xF40F64", Offset = "0xF40F64", VA = "0xF40F64")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4000E41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The Transform that's motion we are reading.")]
			public Transform transform;

			[Token(Token = "0x4000E42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Amplify the 'transform's' position relative to this Transform.")]
			public Transform relativeTo;

			[Token(Token = "0x4000E43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Linking the body to effectors. One Body can be used to offset more than one effector.")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x4000E44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Amplification magnitude along the up axis of the character.")]
			public float verticalWeight;

			[Token(Token = "0x4000E45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("Amplification magnitude along the horizontal axes of the character.")]
			public float horizontalWeight;

			[Token(Token = "0x4000E46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("Speed of the amplifier. 0 means instant.")]
			public float speed;

			[Token(Token = "0x4000E47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Vector3 lastRelativePos;

			[Token(Token = "0x4000E48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Vector3 smoothDelta;

			[Token(Token = "0x4000E49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private bool firstUpdate;

			[Token(Token = "0x6000C23")]
			[Address(RVA = "0xF40C24", Offset = "0xF40C24", VA = "0xF40C24")]
			public void Update(IKSolverFullBodyBiped solver, float w, float deltaTime)
			{
			}

			[Token(Token = "0x6000C24")]
			[Address(RVA = "0xF40F3C", Offset = "0xF40F3C", VA = "0xF40F3C")]
			private static Vector3 Multiply(Vector3 v1, Vector3 v2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000C25")]
			[Address(RVA = "0xF40F4C", Offset = "0xF40F4C", VA = "0xF40F4C")]
			public Body()
			{
			}
		}

		[Token(Token = "0x4000E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The amplified bodies.")]
		public Body[] bodies;

		[Token(Token = "0x6000C21")]
		[Address(RVA = "0xF40AF4", Offset = "0xF40AF4", VA = "0xF40AF4", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000C22")]
		[Address(RVA = "0xF40F34", Offset = "0xF40F34", VA = "0xF40F34")]
		public Amplifier()
		{
		}
	}
	[Token(Token = "0x20001FC")]
	public class BodyTilt : OffsetModifier
	{
		[Token(Token = "0x4000E4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Speed of tilting")]
		public float tiltSpeed;

		[Token(Token = "0x4000E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Sensitivity of tilting")]
		public float tiltSensitivity;

		[Token(Token = "0x4000E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The OffsetPose components")]
		public OffsetPose poseLeft;

		[Token(Token = "0x4000E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The OffsetPose components")]
		public OffsetPose poseRight;

		[Token(Token = "0x4000E50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float tiltAngle;

		[Token(Token = "0x4000E51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 lastForward;

		[Token(Token = "0x6000C27")]
		[Address(RVA = "0xF40F6C", Offset = "0xF40F6C", VA = "0xF40F6C", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000C28")]
		[Address(RVA = "0xF40FA8", Offset = "0xF40FA8", VA = "0xF40FA8", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000C29")]
		[Address(RVA = "0xF41194", Offset = "0xF41194", VA = "0xF41194")]
		public BodyTilt()
		{
		}
	}
	[Token(Token = "0x20001FD")]
	public class CCDBendGoal : MonoBehaviour
	{
		[Token(Token = "0x4000E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CCDIK ik;

		[Token(Token = "0x4000E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x6000C2A")]
		[Address(RVA = "0xF411A8", Offset = "0xF411A8", VA = "0xF411A8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C2B")]
		[Address(RVA = "0xF41288", Offset = "0xF41288", VA = "0xF41288")]
		private void BeforeIK()
		{
		}

		[Token(Token = "0x6000C2C")]
		[Address(RVA = "0xF4151C", Offset = "0xF4151C", VA = "0xF4151C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000C2D")]
		[Address(RVA = "0xF41648", Offset = "0xF41648", VA = "0xF41648")]
		public CCDBendGoal()
		{
		}
	}
	[Token(Token = "0x20001FE")]
	[ExecuteInEditMode]
	public class EditorIK : MonoBehaviour
	{
		[Token(Token = "0x4000E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If slot assigned, will update Animator before IK.")]
		public Animator animator;

		[Token(Token = "0x4000E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Create/Final IK/Editor IK Pose")]
		public EditorIKPose defaultPose;

		[Token(Token = "0x4000E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public Transform[] bones;

		[Token(Token = "0x17000110")]
		public IK ik
		{
			[Token(Token = "0x6000C2E")]
			[Address(RVA = "0xF41658", Offset = "0xF41658", VA = "0xF41658")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C2F")]
			[Address(RVA = "0xF41660", Offset = "0xF41660", VA = "0xF41660")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000C30")]
		[Address(RVA = "0xF41668", Offset = "0xF41668", VA = "0xF41668")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000C31")]
		[Address(RVA = "0xF41808", Offset = "0xF41808", VA = "0xF41808")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000C32")]
		[Address(RVA = "0xF41A64", Offset = "0xF41A64", VA = "0xF41A64")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000C33")]
		[Address(RVA = "0xF41BA0", Offset = "0xF41BA0", VA = "0xF41BA0")]
		public void StoreDefaultPose()
		{
		}

		[Token(Token = "0x6000C34")]
		[Address(RVA = "0xF41D80", Offset = "0xF41D80", VA = "0xF41D80")]
		public bool Initiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C35")]
		[Address(RVA = "0xF41F94", Offset = "0xF41F94", VA = "0xF41F94")]
		public void Update()
		{
		}

		[Token(Token = "0x6000C36")]
		[Address(RVA = "0xF42218", Offset = "0xF42218", VA = "0xF42218")]
		public EditorIK()
		{
		}
	}
	[Token(Token = "0x20001FF")]
	[CreateAssetMenu(fileName = "Editor IK Pose", menuName = "Final IK/Editor IK Pose", order = 1)]
	public class EditorIKPose : ScriptableObject
	{
		[Token(Token = "0x4000E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3[] localPositions;

		[Token(Token = "0x4000E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Quaternion[] localRotations;

		[Token(Token = "0x17000111")]
		public bool poseStored
		{
			[Token(Token = "0x6000C37")]
			[Address(RVA = "0xF418E4", Offset = "0xF418E4", VA = "0xF418E4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000C38")]
		[Address(RVA = "0xF41C1C", Offset = "0xF41C1C", VA = "0xF41C1C")]
		public void Store(Transform[] T)
		{
		}

		[Token(Token = "0x6000C39")]
		[Address(RVA = "0xF41908", Offset = "0xF41908", VA = "0xF41908")]
		public bool Restore(Transform[] T)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C3A")]
		[Address(RVA = "0xF4227C", Offset = "0xF4227C", VA = "0xF4227C")]
		public EditorIKPose()
		{
		}
	}
	[Token(Token = "0x2000200")]
	public class HitReaction : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x2000201")]
		public abstract class HitPoint
		{
			[Token(Token = "0x4000E5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Just for visual clarity, not used at all")]
			public string name;

			[Token(Token = "0x4000E5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Linking this hit point to a collider")]
			public Collider collider;

			[Token(Token = "0x4000E5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Only used if this hit point gets hit when already processing another hit")]
			[SerializeField]
			private float crossFadeTime;

			[Token(Token = "0x4000E62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float length;

			[Token(Token = "0x4000E63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float crossFadeSpeed;

			[Token(Token = "0x4000E64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float lastTime;

			[Token(Token = "0x17000113")]
			public bool inProgress
			{
				[Token(Token = "0x6000C3F")]
				[Address(RVA = "0xF423B4", Offset = "0xF423B4", VA = "0xF423B4")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000114")]
			protected float crossFader
			{
				[Token(Token = "0x6000C40")]
				[Address(RVA = "0xF42794", Offset = "0xF42794", VA = "0xF42794")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000C41")]
				[Address(RVA = "0xF4279C", Offset = "0xF4279C", VA = "0xF4279C")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000115")]
			protected float timer
			{
				[Token(Token = "0x6000C42")]
				[Address(RVA = "0xF427A4", Offset = "0xF427A4", VA = "0xF427A4")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000C43")]
				[Address(RVA = "0xF427AC", Offset = "0xF427AC", VA = "0xF427AC")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000116")]
			protected Vector3 force
			{
				[Token(Token = "0x6000C44")]
				[Address(RVA = "0xF427B4", Offset = "0xF427B4", VA = "0xF427B4")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000C45")]
				[Address(RVA = "0xF427C0", Offset = "0xF427C0", VA = "0xF427C0")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6000C46")]
			[Address(RVA = "0xF427CC", Offset = "0xF427CC", VA = "0xF427CC", Slot = "4")]
			public virtual void Hit(Vector3 force, Vector3 point)
			{
			}

			[Token(Token = "0x6000C47")]
			[Address(RVA = "0xF42488", Offset = "0xF42488", VA = "0xF42488")]
			public void Apply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x6000C48")]
			protected abstract float GetLength();

			[Token(Token = "0x6000C49")]
			protected abstract void CrossFadeStart();

			[Token(Token = "0x6000C4A")]
			protected abstract void OnApply(IKSolverFullBodyBiped solver, float weight);

			[Token(Token = "0x6000C4B")]
			[Address(RVA = "0xF428D8", Offset = "0xF428D8", VA = "0xF428D8")]
			protected HitPoint()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000202")]
		public class HitPointEffector : HitPoint
		{
			[Serializable]
			[Token(Token = "0x2000203")]
			public class EffectorLink
			{
				[Token(Token = "0x4000E68")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("The FBBIK effector type")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4000E69")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("The weight of this effector (could also be negative)")]
				public float weight;

				[Token(Token = "0x4000E6A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Vector3 lastValue;

				[Token(Token = "0x4000E6B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
				private Vector3 current;

				[Token(Token = "0x6000C50")]
				[Address(RVA = "0xF42C0C", Offset = "0xF42C0C", VA = "0xF42C0C")]
				public void Apply(IKSolverFullBodyBiped solver, Vector3 offset, float crossFader)
				{
				}

				[Token(Token = "0x6000C51")]
				[Address(RVA = "0xF42A68", Offset = "0xF42A68", VA = "0xF42A68")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6000C52")]
				[Address(RVA = "0xF42CBC", Offset = "0xF42CBC", VA = "0xF42CBC")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4000E65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[Tooltip("Offset magnitude in the direction of the hit force")]
			public AnimationCurve offsetInForceDirection;

			[Token(Token = "0x4000E66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("Offset magnitude in the direction of character.up")]
			public AnimationCurve offsetInUpDirection;

			[Token(Token = "0x4000E67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("Linking this offset to the FBBIK effectors")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x6000C4C")]
			[Address(RVA = "0xF428EC", Offset = "0xF428EC", VA = "0xF428EC", Slot = "5")]
			protected override float GetLength()
			{
				return default(float);
			}

			[Token(Token = "0x6000C4D")]
			[Address(RVA = "0xF42A08", Offset = "0xF42A08", VA = "0xF42A08", Slot = "6")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x6000C4E")]
			[Address(RVA = "0xF42A7C", Offset = "0xF42A7C", VA = "0xF42A7C", Slot = "7")]
			protected override void OnApply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x6000C4F")]
			[Address(RVA = "0xF42CA8", Offset = "0xF42CA8", VA = "0xF42CA8")]
			public HitPointEffector()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000204")]
		public class HitPointBone : HitPoint
		{
			[Serializable]
			[Token(Token = "0x2000205")]
			public class BoneLink
			{
				[Token(Token = "0x4000E70")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Reference to the bone that this hit point rotates")]
				public Transform bone;

				[Token(Token = "0x4000E71")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				[Tooltip("Weight of rotating the bone")]
				[Range(0f, 1f)]
				public float weight;

				[Token(Token = "0x4000E72")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
				private Quaternion lastValue;

				[Token(Token = "0x4000E73")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
				private Quaternion current;

				[Token(Token = "0x6000C58")]
				[Address(RVA = "0xF42FF4", Offset = "0xF42FF4", VA = "0xF42FF4")]
				public void Apply(IKSolverFullBodyBiped solver, Quaternion offset, float crossFader)
				{
				}

				[Token(Token = "0x6000C59")]
				[Address(RVA = "0xF42F28", Offset = "0xF42F28", VA = "0xF42F28")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6000C5A")]
				[Address(RVA = "0xF43194", Offset = "0xF43194", VA = "0xF43194")]
				public BoneLink()
				{
				}
			}

			[Token(Token = "0x4000E6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[Tooltip("The angle to rotate the bone around its rigidbody's world center of mass")]
			public AnimationCurve aroundCenterOfMass;

			[Token(Token = "0x4000E6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("Linking this hit point to bone(s)")]
			public BoneLink[] boneLinks;

			[Token(Token = "0x4000E6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private Rigidbody rigidbody;

			[Token(Token = "0x4000E6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Vector3 comAxis;

			[Token(Token = "0x6000C53")]
			[Address(RVA = "0xF42CC4", Offset = "0xF42CC4", VA = "0xF42CC4", Slot = "4")]
			public override void Hit(Vector3 force, Vector3 point)
			{
			}

			[Token(Token = "0x6000C54")]
			[Address(RVA = "0xF42E44", Offset = "0xF42E44", VA = "0xF42E44", Slot = "5")]
			protected override float GetLength()
			{
				return default(float);
			}

			[Token(Token = "0x6000C55")]
			[Address(RVA = "0xF42ED0", Offset = "0xF42ED0", VA = "0xF42ED0", Slot = "6")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x6000C56")]
			[Address(RVA = "0xF42F34", Offset = "0xF42F34", VA = "0xF42F34", Slot = "7")]
			protected override void OnApply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x6000C57")]
			[Address(RVA = "0xF43180", Offset = "0xF43180", VA = "0xF43180")]
			public HitPointBone()
			{
			}
		}

		[Token(Token = "0x4000E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Hit points for the FBBIK effectors")]
		public HitPointEffector[] effectorHitPoints;

		[Token(Token = "0x4000E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip(" Hit points for bones without an effector, such as the head")]
		public HitPointBone[] boneHitPoints;

		[Token(Token = "0x17000112")]
		public bool inProgress
		{
			[Token(Token = "0x6000C3B")]
			[Address(RVA = "0xF42318", Offset = "0xF42318", VA = "0xF42318")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000C3C")]
		[Address(RVA = "0xF423C8", Offset = "0xF423C8", VA = "0xF423C8", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000C3D")]
		[Address(RVA = "0xF42560", Offset = "0xF42560", VA = "0xF42560")]
		public void Hit(Collider collider, Vector3 force, Vector3 point)
		{
		}

		[Token(Token = "0x6000C3E")]
		[Address(RVA = "0xF4278C", Offset = "0xF4278C", VA = "0xF4278C")]
		public HitReaction()
		{
		}
	}
	[Token(Token = "0x2000206")]
	public class HitReactionVRIK : OffsetModifierVRIK
	{
		[Serializable]
		[Token(Token = "0x2000207")]
		public abstract class Offset
		{
			[Token(Token = "0x4000E77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Just for visual clarity, not used at all")]
			public string name;

			[Token(Token = "0x4000E78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Linking this hit point to a collider")]
			public Collider collider;

			[Token(Token = "0x4000E79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			[Tooltip("Only used if this hit point gets hit when already processing another hit")]
			private float crossFadeTime;

			[Token(Token = "0x4000E7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float length;

			[Token(Token = "0x4000E7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float crossFadeSpeed;

			[Token(Token = "0x4000E7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float lastTime;

			[Token(Token = "0x17000117")]
			protected float crossFader
			{
				[Token(Token = "0x6000C5E")]
				[Address(RVA = "0xF435CC", Offset = "0xF435CC", VA = "0xF435CC")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000C5F")]
				[Address(RVA = "0xF435D4", Offset = "0xF435D4", VA = "0xF435D4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000118")]
			protected float timer
			{
				[Token(Token = "0x6000C60")]
				[Address(RVA = "0xF435DC", Offset = "0xF435DC", VA = "0xF435DC")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000C61")]
				[Address(RVA = "0xF435E4", Offset = "0xF435E4", VA = "0xF435E4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000119")]
			protected Vector3 force
			{
				[Token(Token = "0x6000C62")]
				[Address(RVA = "0xF435EC", Offset = "0xF435EC", VA = "0xF435EC")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000C63")]
				[Address(RVA = "0xF435F8", Offset = "0xF435F8", VA = "0xF435F8")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6000C64")]
			[Address(RVA = "0xF43604", Offset = "0xF43604", VA = "0xF43604", Slot = "4")]
			public virtual void Hit(Vector3 force, AnimationCurve[] curves, Vector3 point)
			{
			}

			[Token(Token = "0x6000C65")]
			[Address(RVA = "0xF432B0", Offset = "0xF432B0", VA = "0xF432B0")]
			public void Apply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x6000C66")]
			protected abstract float GetLength(AnimationCurve[] curves);

			[Token(Token = "0x6000C67")]
			protected abstract void CrossFadeStart();

			[Token(Token = "0x6000C68")]
			protected abstract void OnApply(VRIK ik, AnimationCurve[] curves, float weight);

			[Token(Token = "0x6000C69")]
			[Address(RVA = "0xF43718", Offset = "0xF43718", VA = "0xF43718")]
			protected Offset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000208")]
		public class PositionOffset : Offset
		{
			[Serializable]
			[Token(Token = "0x2000209")]
			public class PositionOffsetLink
			{
				[Token(Token = "0x4000E83")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("The FBBIK effector type")]
				public IKSolverVR.PositionOffset positionOffset;

				[Token(Token = "0x4000E84")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("The weight of this effector (could also be negative)")]
				public float weight;

				[Token(Token = "0x4000E85")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Vector3 lastValue;

				[Token(Token = "0x4000E86")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
				private Vector3 current;

				[Token(Token = "0x6000C6E")]
				[Address(RVA = "0xF43AFC", Offset = "0xF43AFC", VA = "0xF43AFC")]
				public void Apply(VRIK ik, Vector3 offset, float crossFader)
				{
				}

				[Token(Token = "0x6000C6F")]
				[Address(RVA = "0xF43920", Offset = "0xF43920", VA = "0xF43920")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6000C70")]
				[Address(RVA = "0xF43B90", Offset = "0xF43B90", VA = "0xF43B90")]
				public PositionOffsetLink()
				{
				}
			}

			[Token(Token = "0x4000E80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			[Tooltip("Offset magnitude in the direction of the hit force")]
			public int forceDirCurveIndex;

			[Token(Token = "0x4000E81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[Tooltip("Offset magnitude in the direction of character.up")]
			public int upDirCurveIndex;

			[Token(Token = "0x4000E82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("Linking this offset to the VRIK position offsets")]
			public PositionOffsetLink[] offsetLinks;

			[Token(Token = "0x6000C6A")]
			[Address(RVA = "0xF4372C", Offset = "0xF4372C", VA = "0xF4372C", Slot = "5")]
			protected override float GetLength(AnimationCurve[] curves)
			{
				return default(float);
			}

			[Token(Token = "0x6000C6B")]
			[Address(RVA = "0xF438C0", Offset = "0xF438C0", VA = "0xF438C0", Slot = "6")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x6000C6C")]
			[Address(RVA = "0xF43934", Offset = "0xF43934", VA = "0xF43934", Slot = "7")]
			protected override void OnApply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x6000C6D")]
			[Address(RVA = "0xF43B74", Offset = "0xF43B74", VA = "0xF43B74")]
			public PositionOffset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200020A")]
		public class RotationOffset : Offset
		{
			[Serializable]
			[Token(Token = "0x200020B")]
			public class RotationOffsetLink
			{
				[Token(Token = "0x4000E8B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Reference to the bone that this hit point rotates")]
				public IKSolverVR.RotationOffset rotationOffset;

				[Token(Token = "0x4000E8C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("Weight of rotating the bone")]
				[Range(0f, 1f)]
				public float weight;

				[Token(Token = "0x4000E8D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Quaternion lastValue;

				[Token(Token = "0x4000E8E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				private Quaternion current;

				[Token(Token = "0x6000C76")]
				[Address(RVA = "0xF44084", Offset = "0xF44084", VA = "0xF44084")]
				public void Apply(VRIK ik, Quaternion offset, float crossFader)
				{
				}

				[Token(Token = "0x6000C77")]
				[Address(RVA = "0xF43E50", Offset = "0xF43E50", VA = "0xF43E50")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6000C78")]
				[Address(RVA = "0xF441A0", Offset = "0xF441A0", VA = "0xF441A0")]
				public RotationOffsetLink()
				{
				}
			}

			[Token(Token = "0x4000E87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			[Tooltip("The angle to rotate the bone around its rigidbody's world center of mass")]
			public int curveIndex;

			[Token(Token = "0x4000E88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[Tooltip("Linking this hit point to bone(s)")]
			public RotationOffsetLink[] offsetLinks;

			[Token(Token = "0x4000E89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private Rigidbody rigidbody;

			[Token(Token = "0x4000E8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private Vector3 comAxis;

			[Token(Token = "0x6000C71")]
			[Address(RVA = "0xF43B98", Offset = "0xF43B98", VA = "0xF43B98", Slot = "4")]
			public override void Hit(Vector3 force, AnimationCurve[] curves, Vector3 point)
			{
			}

			[Token(Token = "0x6000C72")]
			[Address(RVA = "0xF43D20", Offset = "0xF43D20", VA = "0xF43D20", Slot = "5")]
			protected override float GetLength(AnimationCurve[] curves)
			{
				return default(float);
			}

			[Token(Token = "0x6000C73")]
			[Address(RVA = "0xF43DF8", Offset = "0xF43DF8", VA = "0xF43DF8", Slot = "6")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x6000C74")]
			[Address(RVA = "0xF43E5C", Offset = "0xF43E5C", VA = "0xF43E5C", Slot = "7")]
			protected override void OnApply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x6000C75")]
			[Address(RVA = "0xF4418C", Offset = "0xF4418C", VA = "0xF4418C")]
			public RotationOffset()
			{
			}
		}

		[Token(Token = "0x4000E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve[] offsetCurves;

		[Token(Token = "0x4000E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Hit points for the FBBIK effectors")]
		public PositionOffset[] positionOffsets;

		[Token(Token = "0x4000E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip(" Hit points for bones without an effector, such as the head")]
		public RotationOffset[] rotationOffsets;

		[Token(Token = "0x6000C5B")]
		[Address(RVA = "0xF431F8", Offset = "0xF431F8", VA = "0xF431F8", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000C5C")]
		[Address(RVA = "0xF43390", Offset = "0xF43390", VA = "0xF43390")]
		public void Hit(Collider collider, Vector3 force, Vector3 point)
		{
		}

		[Token(Token = "0x6000C5D")]
		[Address(RVA = "0xF435C4", Offset = "0xF435C4", VA = "0xF435C4")]
		public HitReactionVRIK()
		{
		}
	}
	[Token(Token = "0x200020C")]
	public class Inertia : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x200020D")]
		public class Body
		{
			[Serializable]
			[Token(Token = "0x200020E")]
			public class EffectorLink
			{
				[Token(Token = "0x4000E9C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Type of the FBBIK effector to use")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4000E9D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("Weight of using this effector")]
				public float weight;

				[Token(Token = "0x6000C7F")]
				[Address(RVA = "0xF446BC", Offset = "0xF446BC", VA = "0xF446BC")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4000E91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The Transform to follow, can be any bone of the character")]
			public Transform transform;

			[Token(Token = "0x4000E92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Linking the body to effectors. One Body can be used to offset more than one effector")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x4000E93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("The speed to follow the Transform")]
			public float speed;

			[Token(Token = "0x4000E94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("The acceleration, smaller values means lazyer following")]
			public float acceleration;

			[Token(Token = "0x4000E95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Range(0f, 1f)]
			[Tooltip("Matching target velocity")]
			public float matchVelocity;

			[Token(Token = "0x4000E96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("gravity applied to the Body")]
			public float gravity;

			[Token(Token = "0x4000E97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 delta;

			[Token(Token = "0x4000E98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 lazyPoint;

			[Token(Token = "0x4000E99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Vector3 direction;

			[Token(Token = "0x4000E9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private Vector3 lastPosition;

			[Token(Token = "0x4000E9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private bool firstUpdate;

			[Token(Token = "0x6000C7C")]
			[Address(RVA = "0xF44270", Offset = "0xF44270", VA = "0xF44270")]
			public void Reset()
			{
			}

			[Token(Token = "0x6000C7D")]
			[Address(RVA = "0xF443F4", Offset = "0xF443F4", VA = "0xF443F4")]
			public void Update(IKSolverFullBodyBiped solver, float weight, float deltaTime)
			{
			}

			[Token(Token = "0x6000C7E")]
			[Address(RVA = "0xF446A0", Offset = "0xF446A0", VA = "0xF446A0")]
			public Body()
			{
			}
		}

		[Token(Token = "0x4000E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The array of Bodies")]
		public Body[] bodies;

		[Token(Token = "0x4000E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The array of OffsetLimits")]
		public OffsetLimits[] limits;

		[Token(Token = "0x6000C79")]
		[Address(RVA = "0xF44204", Offset = "0xF44204", VA = "0xF44204")]
		public void ResetBodies()
		{
		}

		[Token(Token = "0x6000C7A")]
		[Address(RVA = "0xF4434C", Offset = "0xF4434C", VA = "0xF4434C", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000C7B")]
		[Address(RVA = "0xF44698", Offset = "0xF44698", VA = "0xF44698")]
		public Inertia()
		{
		}
	}
	[Token(Token = "0x200020F")]
	public class LookAtController : MonoBehaviour
	{
		[Token(Token = "0x4000E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LookAtIK ik;

		[Token(Token = "0x4000E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Target Smoothing")]
		[Tooltip("The target to look at. Do not use the Target transform that is assigned to LookAtIK. Set to null if you wish to stop looking.")]
		public Transform target;

		[Token(Token = "0x4000EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x4000EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 offset;

		[Token(Token = "0x4000EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The time it takes to switch targets.")]
		public float targetSwitchSmoothTime;

		[Token(Token = "0x4000EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The time it takes to blend in/out of LookAtIK weight.")]
		public float weightSmoothTime;

		[Token(Token = "0x4000EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Turning Towards The Target")]
		[Tooltip("Enables smooth turning towards the target according to the parameters under this header.")]
		public bool smoothTurnTowardsTarget;

		[Token(Token = "0x4000EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Speed of turning towards the target using Vector3.RotateTowards.")]
		public float maxRadiansDelta;

		[Token(Token = "0x4000EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Speed of moving towards the target using Vector3.RotateTowards.")]
		public float maxMagnitudeDelta;

		[Token(Token = "0x4000EA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Speed of slerping towards the target.")]
		public float slerpSpeed;

		[Token(Token = "0x4000EA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The position of the pivot that the look at target is rotated around relative to the root of the character.")]
		public Vector3 pivotOffsetFromRoot;

		[Token(Token = "0x4000EA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Minimum distance of looking from the first bone. Keeps the solver from failing if the target is too close.")]
		public float minDistance;

		[Token(Token = "0x4000EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Range(0f, 180f)]
		[Header("RootRotation")]
		[Tooltip("Character root will be rotate around the Y axis to keep root forward within this angle from the look direction.")]
		public float maxRootAngle;

		[Token(Token = "0x4000EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform lastTarget;

		[Token(Token = "0x4000EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float switchWeight;

		[Token(Token = "0x4000EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float switchWeightV;

		[Token(Token = "0x4000EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float weightV;

		[Token(Token = "0x4000EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Vector3 lastPosition;

		[Token(Token = "0x4000EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 dir;

		[Token(Token = "0x4000EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool lastSmoothTowardsTarget;

		[Token(Token = "0x1700011A")]
		private Vector3 pivot
		{
			[Token(Token = "0x6000C82")]
			[Address(RVA = "0xF4472C", Offset = "0xF4472C", VA = "0xF4472C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000C80")]
		[Address(RVA = "0xF446C4", Offset = "0xF446C4", VA = "0xF446C4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C81")]
		[Address(RVA = "0xF447B0", Offset = "0xF447B0", VA = "0xF447B0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000C83")]
		[Address(RVA = "0xF44CB8", Offset = "0xF44CB8", VA = "0xF44CB8")]
		private void ApplyMinDistance()
		{
		}

		[Token(Token = "0x6000C84")]
		[Address(RVA = "0xF44E3C", Offset = "0xF44E3C", VA = "0xF44E3C")]
		private void RootRotation()
		{
		}

		[Token(Token = "0x6000C85")]
		[Address(RVA = "0xF45088", Offset = "0xF45088", VA = "0xF45088")]
		public LookAtController()
		{
		}
	}
	[Token(Token = "0x2000210")]
	public abstract class OffsetModifier : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000211")]
		public class OffsetLimits
		{
			[Token(Token = "0x4000EB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The effector type (this is just an enum)")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x4000EB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Spring force, if zero then this is a hard limit, if not, offset can exceed the limit.")]
			public float spring;

			[Token(Token = "0x4000EB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Which axes to limit the offset on?")]
			public bool x;

			[Token(Token = "0x4000EB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
			[Tooltip("Which axes to limit the offset on?")]
			public bool y;

			[Token(Token = "0x4000EB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
			[Tooltip("Which axes to limit the offset on?")]
			public bool z;

			[Token(Token = "0x4000EBA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Tooltip("The limits")]
			public float minX;

			[Token(Token = "0x4000EBB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("The limits")]
			public float maxX;

			[Token(Token = "0x4000EBC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("The limits")]
			public float minY;

			[Token(Token = "0x4000EBD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("The limits")]
			public float maxY;

			[Token(Token = "0x4000EBE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("The limits")]
			public float minZ;

			[Token(Token = "0x4000EBF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("The limits")]
			public float maxZ;

			[Token(Token = "0x6000C8E")]
			[Address(RVA = "0xF46378", Offset = "0xF46378", VA = "0xF46378")]
			public void Apply(IKEffector e, Quaternion rootRotation)
			{
			}

			[Token(Token = "0x6000C8F")]
			[Address(RVA = "0xF46618", Offset = "0xF46618", VA = "0xF46618")]
			private float SpringAxis(float value, float min, float max)
			{
				return default(float);
			}

			[Token(Token = "0x6000C90")]
			[Address(RVA = "0xF46688", Offset = "0xF46688", VA = "0xF46688")]
			private float Spring(float value, float limit, bool negative)
			{
				return default(float);
			}

			[Token(Token = "0x6000C91")]
			[Address(RVA = "0xF466D0", Offset = "0xF466D0", VA = "0xF466D0")]
			public OffsetLimits()
			{
			}
		}

		[Token(Token = "0x2000212")]
		[CompilerGenerated]
		private sealed class <Initiate>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000EC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000EC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000EC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OffsetModifier <>4__this;

			[Token(Token = "0x1700011C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000C95")]
				[Address(RVA = "0xF4684C", Offset = "0xF4684C", VA = "0xF4684C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700011D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000C97")]
				[Address(RVA = "0xF46894", Offset = "0xF46894", VA = "0xF46894", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C92")]
			[Address(RVA = "0xF461D4", Offset = "0xF461D4", VA = "0xF461D4")]
			[DebuggerHidden]
			public <Initiate>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6000C93")]
			[Address(RVA = "0xF466D8", Offset = "0xF466D8", VA = "0xF466D8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000C94")]
			[Address(RVA = "0xF466DC", Offset = "0xF466DC", VA = "0xF466DC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C96")]
			[Address(RVA = "0xF46854", Offset = "0xF46854", VA = "0xF46854", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The master weight")]
		public float weight;

		[Token(Token = "0x4000EB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Reference to the FBBIK component")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected float lastTime;

		[Token(Token = "0x1700011B")]
		protected float deltaTime
		{
			[Token(Token = "0x6000C86")]
			[Address(RVA = "0xF46120", Offset = "0xF46120", VA = "0xF46120")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000C87")]
		protected abstract void OnModifyOffset();

		[Token(Token = "0x6000C88")]
		[Address(RVA = "0xF46140", Offset = "0xF46140", VA = "0xF46140", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000C89")]
		[Address(RVA = "0xF46160", Offset = "0xF46160", VA = "0xF46160")]
		[IteratorStateMachine(typeof(<Initiate>d__8))]
		private IEnumerator Initiate()
		{
			return null;
		}

		[Token(Token = "0x6000C8A")]
		[Address(RVA = "0xF461FC", Offset = "0xF461FC", VA = "0xF461FC")]
		private void ModifyOffset()
		{
		}

		[Token(Token = "0x6000C8B")]
		[Address(RVA = "0xF462D0", Offset = "0xF462D0", VA = "0xF462D0")]
		protected void ApplyLimits(OffsetLimits[] limits)
		{
		}

		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0xF464DC", Offset = "0xF464DC", VA = "0xF464DC", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000C8D")]
		[Address(RVA = "0xF46608", Offset = "0xF46608", VA = "0xF46608")]
		protected OffsetModifier()
		{
		}
	}
	[Token(Token = "0x2000213")]
	public abstract class OffsetModifierVRIK : MonoBehaviour
	{
		[Token(Token = "0x2000214")]
		[CompilerGenerated]
		private sealed class <Initiate>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000EC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000EC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000EC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OffsetModifierVRIK <>4__this;

			[Token(Token = "0x1700011F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000CA2")]
				[Address(RVA = "0xF46CFC", Offset = "0xF46CFC", VA = "0xF46CFC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000120")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000CA4")]
				[Address(RVA = "0xF46D44", Offset = "0xF46D44", VA = "0xF46D44", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C9F")]
			[Address(RVA = "0xF46950", Offset = "0xF46950", VA = "0xF46950")]
			[DebuggerHidden]
			public <Initiate>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6000CA0")]
			[Address(RVA = "0xF46B88", Offset = "0xF46B88", VA = "0xF46B88", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000CA1")]
			[Address(RVA = "0xF46B8C", Offset = "0xF46B8C", VA = "0xF46B8C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000CA3")]
			[Address(RVA = "0xF46D04", Offset = "0xF46D04", VA = "0xF46D04", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The master weight")]
		public float weight;

		[Token(Token = "0x4000EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Reference to the VRIK component")]
		public VRIK ik;

		[Token(Token = "0x4000EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float lastTime;

		[Token(Token = "0x1700011E")]
		protected float deltaTime
		{
			[Token(Token = "0x6000C98")]
			[Address(RVA = "0xF4689C", Offset = "0xF4689C", VA = "0xF4689C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000C99")]
		protected abstract void OnModifyOffset();

		[Token(Token = "0x6000C9A")]
		[Address(RVA = "0xF468BC", Offset = "0xF468BC", VA = "0xF468BC", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000C9B")]
		[Address(RVA = "0xF468DC", Offset = "0xF468DC", VA = "0xF468DC")]
		[IteratorStateMachine(typeof(<Initiate>d__7))]
		private IEnumerator Initiate()
		{
			return null;
		}

		[Token(Token = "0x6000C9C")]
		[Address(RVA = "0xF46978", Offset = "0xF46978", VA = "0xF46978")]
		private void ModifyOffset()
		{
		}

		[Token(Token = "0x6000C9D")]
		[Address(RVA = "0xF46A4C", Offset = "0xF46A4C", VA = "0xF46A4C", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000C9E")]
		[Address(RVA = "0xF46B78", Offset = "0xF46B78", VA = "0xF46B78")]
		protected OffsetModifierVRIK()
		{
		}
	}
	[Token(Token = "0x2000215")]
	public class OffsetPose : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000216")]
		public class EffectorLink
		{
			[Token(Token = "0x4000ECA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x4000ECB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 offset;

			[Token(Token = "0x4000ECC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 pin;

			[Token(Token = "0x4000ECD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Vector3 pinWeight;

			[Token(Token = "0x6000CA8")]
			[Address(RVA = "0xF46E00", Offset = "0xF46E00", VA = "0xF46E00")]
			public void Apply(IKSolverFullBodyBiped solver, float weight, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000CA9")]
			[Address(RVA = "0xF47158", Offset = "0xF47158", VA = "0xF47158")]
			public EffectorLink()
			{
			}
		}

		[Token(Token = "0x4000EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EffectorLink[] effectorLinks;

		[Token(Token = "0x6000CA5")]
		[Address(RVA = "0xF46D4C", Offset = "0xF46D4C", VA = "0xF46D4C")]
		public void Apply(IKSolverFullBodyBiped solver, float weight)
		{
		}

		[Token(Token = "0x6000CA6")]
		[Address(RVA = "0xF47050", Offset = "0xF47050", VA = "0xF47050")]
		public void Apply(IKSolverFullBodyBiped solver, float weight, Quaternion rotation)
		{
		}

		[Token(Token = "0x6000CA7")]
		[Address(RVA = "0xF470F4", Offset = "0xF470F4", VA = "0xF470F4")]
		public OffsetPose()
		{
		}
	}
	[Token(Token = "0x2000217")]
	public class PenetrationAvoidance : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x2000218")]
		public class Avoider
		{
			[Serializable]
			[Token(Token = "0x2000219")]
			public class EffectorLink
			{
				[Token(Token = "0x4000ED9")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Effector to apply the offset to.")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4000EDA")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("Multiplier of the offset value, can be negative.")]
				public float weight;

				[Token(Token = "0x6000CB0")]
				[Address(RVA = "0xF477AC", Offset = "0xF477AC", VA = "0xF477AC")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4000ECF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Bones to start the raycast from. Multiple raycasts can be used by assigning more than 1 bone.")]
			public Transform[] raycastFrom;

			[Token(Token = "0x4000ED0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The Transform to raycast towards. Usually the body part that you want to keep from penetrating.")]
			public Transform raycastTo;

			[Token(Token = "0x4000ED1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Range(0f, 1f)]
			[Tooltip("If 0, will use simple raycasting, if > 0, will use sphere casting (better, but slower).")]
			public float raycastRadius;

			[Token(Token = "0x4000ED2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Linking this to FBBIK effectors.")]
			public EffectorLink[] effectors;

			[Token(Token = "0x4000ED3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("The time of smooth interpolation of the offset value to avoid penetration.")]
			public float smoothTimeIn;

			[Token(Token = "0x4000ED4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[Tooltip("The time of smooth interpolation of the offset value blending out of penetration avoidance.")]
			public float smoothTimeOut;

			[Token(Token = "0x4000ED5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[Tooltip("Layers to keep penetrating from.")]
			public LayerMask layers;

			[Token(Token = "0x4000ED6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 offset;

			[Token(Token = "0x4000ED7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Vector3 offsetTarget;

			[Token(Token = "0x4000ED8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private Vector3 offsetV;

			[Token(Token = "0x6000CAC")]
			[Address(RVA = "0xF471D0", Offset = "0xF471D0", VA = "0xF471D0")]
			public void Solve(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x6000CAD")]
			[Address(RVA = "0xF47370", Offset = "0xF47370", VA = "0xF47370")]
			private Vector3 GetOffsetTarget(IKSolverFullBodyBiped solver)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000CAE")]
			[Address(RVA = "0xF47478", Offset = "0xF47478", VA = "0xF47478")]
			private Vector3 Raycast(Vector3 from, Vector3 to)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000CAF")]
			[Address(RVA = "0xF47798", Offset = "0xF47798", VA = "0xF47798")]
			public Avoider()
			{
			}
		}

		[Token(Token = "0x4000ECE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Definitions of penetration avoidances.")]
		public Avoider[] avoiders;

		[Token(Token = "0x6000CAA")]
		[Address(RVA = "0xF47160", Offset = "0xF47160", VA = "0xF47160", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000CAB")]
		[Address(RVA = "0xF47360", Offset = "0xF47360", VA = "0xF47360")]
		public PenetrationAvoidance()
		{
		}
	}
	[Token(Token = "0x200021A")]
	public class Recoil : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x200021B")]
		public class RecoilOffset
		{
			[Serializable]
			[Token(Token = "0x200021C")]
			public class EffectorLink
			{
				[Token(Token = "0x4000EF9")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Type of the FBBIK effector to use")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4000EFA")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("Weight of using this effector")]
				public float weight;

				[Token(Token = "0x6000CC0")]
				[Address(RVA = "0xF48C8C", Offset = "0xF48C8C", VA = "0xF48C8C")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4000EF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Offset vector for the associated effector when doing recoil.")]
			public Vector3 offset;

			[Token(Token = "0x4000EF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Tooltip("When firing before the last recoil has faded, how much of the current recoil offset will be maintained?")]
			[Range(0f, 1f)]
			public float additivity;

			[Token(Token = "0x4000EF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Max additive recoil for automatic fire.")]
			public float maxAdditiveOffsetMag;

			[Token(Token = "0x4000EF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Linking this recoil offset to FBBIK effectors.")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x4000EF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 additiveOffset;

			[Token(Token = "0x4000EF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 lastOffset;

			[Token(Token = "0x6000CBD")]
			[Address(RVA = "0xF47950", Offset = "0xF47950", VA = "0xF47950")]
			public void Start()
			{
			}

			[Token(Token = "0x6000CBE")]
			[Address(RVA = "0xF4850C", Offset = "0xF4850C", VA = "0xF4850C")]
			public void Apply(IKSolverFullBodyBiped solver, Quaternion rotation, float masterWeight, float length, float timeLeft)
			{
			}

			[Token(Token = "0x6000CBF")]
			[Address(RVA = "0xF48C78", Offset = "0xF48C78", VA = "0xF48C78")]
			public RecoilOffset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200021D")]
		public enum Handedness
		{
			[Token(Token = "0x4000EFC")]
			Right,
			[Token(Token = "0x4000EFD")]
			Left
		}

		[Token(Token = "0x4000EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Reference to the AimIK component. Optional, only used to getting the aiming direction.")]
		public AimIK aimIK;

		[Token(Token = "0x4000EDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Optional head AimIK solver. This solver should only use neck and head bones and have the head as Aim Transform")]
		public AimIK headIK;

		[Token(Token = "0x4000EDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Set this true if you are using IKExecutionOrder.cs or a custom script to force AimIK solve after FBBIK.")]
		public bool aimIKSolvedLast;

		[Token(Token = "0x4000EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Which hand is holding the weapon?")]
		public Handedness handedness;

		[Token(Token = "0x4000EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Check for 2-handed weapons.")]
		public bool twoHanded;

		[Token(Token = "0x4000EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Weight curve for the recoil offsets. Recoil procedure is as long as this curve.")]
		public AnimationCurve recoilWeight;

		[Token(Token = "0x4000EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("How much is the magnitude randomized each time Recoil is called?")]
		public float magnitudeRandom;

		[Token(Token = "0x4000EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("How much is the rotation randomized each time Recoil is called?")]
		public Vector3 rotationRandom;

		[Token(Token = "0x4000EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Rotating the primary hand bone for the recoil (in local space).")]
		public Vector3 handRotationOffset;

		[Token(Token = "0x4000EE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("Time of blending in another recoil when doing automatic fire.")]
		public float blendTime;

		[Token(Token = "0x4000EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Space(10f)]
		[Tooltip("FBBIK effector position offsets for the recoil (in aiming direction space).")]
		public RecoilOffset[] offsets;

		[Token(Token = "0x4000EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HideInInspector]
		public Quaternion rotationOffset;

		[Token(Token = "0x4000EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float magnitudeMlp;

		[Token(Token = "0x4000EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float endTime;

		[Token(Token = "0x4000EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Quaternion handRotation;

		[Token(Token = "0x4000EEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Quaternion secondaryHandRelativeRotation;

		[Token(Token = "0x4000EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Quaternion randomRotation;

		[Token(Token = "0x4000EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float length;

		[Token(Token = "0x4000EED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private bool initiated;

		[Token(Token = "0x4000EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float blendWeight;

		[Token(Token = "0x4000EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private float w;

		[Token(Token = "0x4000EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Quaternion primaryHandRotation;

		[Token(Token = "0x4000EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private bool handRotationsSet;

		[Token(Token = "0x4000EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private Vector3 aimIKAxis;

		[Token(Token = "0x17000121")]
		public bool isFinished
		{
			[Token(Token = "0x6000CB1")]
			[Address(RVA = "0xF477B4", Offset = "0xF477B4", VA = "0xF477B4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000122")]
		private IKEffector primaryHandEffector
		{
			[Token(Token = "0x6000CB7")]
			[Address(RVA = "0xF48710", Offset = "0xF48710", VA = "0xF48710")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000123")]
		private IKEffector secondaryHandEffector
		{
			[Token(Token = "0x6000CB8")]
			[Address(RVA = "0xF4874C", Offset = "0xF4874C", VA = "0xF4874C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000124")]
		private Transform primaryHand
		{
			[Token(Token = "0x6000CB9")]
			[Address(RVA = "0xF486D8", Offset = "0xF486D8", VA = "0xF486D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000125")]
		private Transform secondaryHand
		{
			[Token(Token = "0x6000CBA")]
			[Address(RVA = "0xF486F4", Offset = "0xF486F4", VA = "0xF486F4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CB2")]
		[Address(RVA = "0xF477D8", Offset = "0xF477D8", VA = "0xF477D8")]
		public void SetHandRotations(Quaternion leftHandRotation, Quaternion rightHandRotation)
		{
		}

		[Token(Token = "0x6000CB3")]
		[Address(RVA = "0xF47804", Offset = "0xF47804", VA = "0xF47804")]
		public void Fire(float magnitude)
		{
		}

		[Token(Token = "0x6000CB4")]
		[Address(RVA = "0xF47A24", Offset = "0xF47A24", VA = "0xF47A24", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000CB5")]
		[Address(RVA = "0xF48788", Offset = "0xF48788", VA = "0xF48788")]
		private void AfterFBBIK()
		{
		}

		[Token(Token = "0x6000CB6")]
		[Address(RVA = "0xF48910", Offset = "0xF48910", VA = "0xF48910")]
		private void AfterAimIK()
		{
		}

		[Token(Token = "0x6000CBB")]
		[Address(RVA = "0xF489E8", Offset = "0xF489E8", VA = "0xF489E8", Slot = "6")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6000CBC")]
		[Address(RVA = "0xF48BEC", Offset = "0xF48BEC", VA = "0xF48BEC")]
		public Recoil()
		{
		}
	}
	[Token(Token = "0x200021E")]
	public class ShoulderRotator : MonoBehaviour
	{
		[Token(Token = "0x4000EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Weight of shoulder rotation")]
		public float weight;

		[Token(Token = "0x4000EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The greater the offset, the sooner the shoulder will start rotating")]
		public float offset;

		[Token(Token = "0x4000F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x4000F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool skip;

		[Token(Token = "0x6000CC1")]
		[Address(RVA = "0xF48C94", Offset = "0xF48C94", VA = "0xF48C94")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CC2")]
		[Address(RVA = "0xF48DA8", Offset = "0xF48DA8", VA = "0xF48DA8")]
		private void RotateShoulders()
		{
		}

		[Token(Token = "0x6000CC3")]
		[Address(RVA = "0xF48E84", Offset = "0xF48E84", VA = "0xF48E84")]
		private void RotateShoulder(FullBodyBipedChain chain, float weight, float offset)
		{
		}

		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0xF49288", Offset = "0xF49288", VA = "0xF49288")]
		private IKMapping.BoneMap GetParentBoneMap(FullBodyBipedChain chain)
		{
			return null;
		}

		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0xF492BC", Offset = "0xF492BC", VA = "0xF492BC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0xF493E8", Offset = "0xF493E8", VA = "0xF493E8")]
		public ShoulderRotator()
		{
		}
	}
	[Token(Token = "0x200021F")]
	public static class VRIKCalibrator
	{
		[Serializable]
		[Token(Token = "0x2000220")]
		public class Settings
		{
			[Token(Token = "0x4000F02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Multiplies character scale")]
			public float scaleMlp;

			[Token(Token = "0x4000F03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Local axis of the HMD facing forward.")]
			public Vector3 headTrackerForward;

			[Token(Token = "0x4000F04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Local axis of the HMD facing up.")]
			public Vector3 headTrackerUp;

			[Token(Token = "0x4000F05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("Local axis of the hand trackers pointing from the wrist towards the palm.")]
			public Vector3 handTrackerForward;

			[Token(Token = "0x4000F06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[Tooltip("Local axis of the hand trackers pointing in the direction of the surface normal of the back of the hand.")]
			public Vector3 handTrackerUp;

			[Token(Token = "0x4000F07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			[Tooltip("Local axis of the foot trackers towards the player's forward direction.")]
			public Vector3 footTrackerForward;

			[Token(Token = "0x4000F08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("Local axis of the foot tracker towards the up direction.")]
			public Vector3 footTrackerUp;

			[Token(Token = "0x4000F09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[Tooltip("Offset of the head bone from the HMD in (headTrackerForward, headTrackerUp) space relative to the head tracker.")]
			[Space(10f)]
			public Vector3 headOffset;

			[Token(Token = "0x4000F0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[Tooltip("Offset of the hand bones from the hand trackers in (handTrackerForward, handTrackerUp) space relative to the hand trackers.")]
			public Vector3 handOffset;

			[Token(Token = "0x4000F0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			[Tooltip("Forward offset of the foot bones from the foot trackers.")]
			public float footForwardOffset;

			[Token(Token = "0x4000F0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[Tooltip("Inward offset of the foot bones from the foot trackers.")]
			public float footInwardOffset;

			[Token(Token = "0x4000F0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			[Tooltip("Used for adjusting foot heading relative to the foot trackers.")]
			[Range(-180f, 180f)]
			public float footHeadingOffset;

			[Token(Token = "0x4000F0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[Range(0f, 1f)]
			public float pelvisPositionWeight;

			[Token(Token = "0x4000F0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			[Range(0f, 1f)]
			public float pelvisRotationWeight;

			[Token(Token = "0x6000CD6")]
			[Address(RVA = "0xF4D5D8", Offset = "0xF4D5D8", VA = "0xF4D5D8")]
			public Settings()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000221")]
		public class CalibrationData
		{
			[Serializable]
			[Token(Token = "0x2000222")]
			public class Target
			{
				[Token(Token = "0x4000F1C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public bool used;

				[Token(Token = "0x4000F1D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				public Vector3 localPosition;

				[Token(Token = "0x4000F1E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				public Quaternion localRotation;

				[Token(Token = "0x6000CD8")]
				[Address(RVA = "0xF4B13C", Offset = "0xF4B13C", VA = "0xF4B13C")]
				public Target(Transform t)
				{
				}

				[Token(Token = "0x6000CD9")]
				[Address(RVA = "0xF4BB9C", Offset = "0xF4BB9C", VA = "0xF4BB9C")]
				public void SetTo(Transform t)
				{
				}
			}

			[Token(Token = "0x4000F10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float scale;

			[Token(Token = "0x4000F11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Target head;

			[Token(Token = "0x4000F12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Target leftHand;

			[Token(Token = "0x4000F13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Target rightHand;

			[Token(Token = "0x4000F14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Target pelvis;

			[Token(Token = "0x4000F15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Target leftFoot;

			[Token(Token = "0x4000F16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Target rightFoot;

			[Token(Token = "0x4000F17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Target leftLegGoal;

			[Token(Token = "0x4000F18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Target rightLegGoal;

			[Token(Token = "0x4000F19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public Vector3 pelvisTargetRight;

			[Token(Token = "0x4000F1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			public float pelvisPositionWeight;

			[Token(Token = "0x4000F1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public float pelvisRotationWeight;

			[Token(Token = "0x6000CD7")]
			[Address(RVA = "0xF4A840", Offset = "0xF4A840", VA = "0xF4A840")]
			public CalibrationData()
			{
			}
		}

		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0xF493FC", Offset = "0xF493FC", VA = "0xF493FC")]
		public static void RecalibrateScale(VRIK ik, CalibrationData data, Settings settings)
		{
		}

		[Token(Token = "0x6000CC8")]
		[Address(RVA = "0xF49414", Offset = "0xF49414", VA = "0xF49414")]
		public static void RecalibrateScale(VRIK ik, CalibrationData data, float scaleMlp)
		{
		}

		[Token(Token = "0x6000CC9")]
		[Address(RVA = "0xF4953C", Offset = "0xF4953C", VA = "0xF4953C")]
		private static void CalibrateScale(VRIK ik, Settings settings)
		{
		}

		[Token(Token = "0x6000CCA")]
		[Address(RVA = "0xF4945C", Offset = "0xF4945C", VA = "0xF4945C")]
		private static void CalibrateScale(VRIK ik, float scaleMlp = 1f)
		{
		}

		[Token(Token = "0x6000CCB")]
		[Address(RVA = "0xF49554", Offset = "0xF49554", VA = "0xF49554")]
		public static CalibrationData Calibrate(VRIK ik, Settings settings, Transform headTracker, [Optional] Transform bodyTracker, [Optional] Transform leftHandTracker, [Optional] Transform rightHandTracker, [Optional] Transform leftFootTracker, [Optional] Transform rightFootTracker)
		{
			return null;
		}

		[Token(Token = "0x6000CCC")]
		[Address(RVA = "0xF4A848", Offset = "0xF4A848", VA = "0xF4A848")]
		private static void CalibrateLeg(Settings settings, Transform tracker, IKSolverVR.Leg leg, Transform lastBone, Vector3 rootForward, bool isLeft)
		{
		}

		[Token(Token = "0x6000CCD")]
		[Address(RVA = "0xF4B1F0", Offset = "0xF4B1F0", VA = "0xF4B1F0")]
		public static void Calibrate(VRIK ik, CalibrationData data, Transform headTracker, [Optional] Transform bodyTracker, [Optional] Transform leftHandTracker, [Optional] Transform rightHandTracker, [Optional] Transform leftFootTracker, [Optional] Transform rightFootTracker)
		{
		}

		[Token(Token = "0x6000CCE")]
		[Address(RVA = "0xF4BBF8", Offset = "0xF4BBF8", VA = "0xF4BBF8")]
		private static void CalibrateLeg(CalibrationData data, Transform tracker, IKSolverVR.Leg leg, Transform lastBone, Vector3 rootForward, bool isLeft)
		{
		}

		[Token(Token = "0x6000CCF")]
		[Address(RVA = "0xF4C028", Offset = "0xF4C028", VA = "0xF4C028")]
		public static CalibrationData Calibrate(VRIK ik, Transform centerEyeAnchor, Transform leftHandAnchor, Transform rightHandAnchor, Vector3 centerEyePositionOffset, Vector3 centerEyeRotationOffset, Vector3 handPositionOffset, Vector3 handRotationOffset, float scaleMlp = 1f)
		{
			return null;
		}

		[Token(Token = "0x6000CD0")]
		[Address(RVA = "0xF4C25C", Offset = "0xF4C25C", VA = "0xF4C25C")]
		public static void CalibrateHead(VRIK ik, Transform centerEyeAnchor, Vector3 anchorPositionOffset, Vector3 anchorRotationOffset)
		{
		}

		[Token(Token = "0x6000CD1")]
		[Address(RVA = "0xF4CA08", Offset = "0xF4CA08", VA = "0xF4CA08")]
		public static void CalibrateBody(VRIK ik, Transform pelvisTracker, Vector3 trackerPositionOffset, Vector3 trackerRotationOffset)
		{
		}

		[Token(Token = "0x6000CD2")]
		[Address(RVA = "0xF4C7F0", Offset = "0xF4C7F0", VA = "0xF4C7F0")]
		public static void CalibrateHands(VRIK ik, Transform leftHandAnchor, Transform rightHandAnchor, Vector3 anchorPositionOffset, Vector3 anchorRotationOffset)
		{
		}

		[Token(Token = "0x6000CD3")]
		[Address(RVA = "0xF4CCBC", Offset = "0xF4CCBC", VA = "0xF4CCBC")]
		private static void CalibrateHand(VRIK ik, Transform anchor, Vector3 positionOffset, Vector3 rotationOffset, bool isLeft)
		{
		}

		[Token(Token = "0x6000CD4")]
		[Address(RVA = "0xF4D1AC", Offset = "0xF4D1AC", VA = "0xF4D1AC")]
		public static Vector3 GuessWristToPalmAxis(Transform hand, Transform forearm)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0xF4D290", Offset = "0xF4D290", VA = "0xF4D290")]
		public static Vector3 GuessPalmToThumbAxis(Transform hand, Transform forearm)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000223")]
	public class VRIKLODController : MonoBehaviour
	{
		[Token(Token = "0x4000F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Renderer LODRenderer;

		[Token(Token = "0x4000F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float LODDistance;

		[Token(Token = "0x4000F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool allowCulled;

		[Token(Token = "0x4000F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private VRIK ik;

		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0xF4D76C", Offset = "0xF4D76C", VA = "0xF4D76C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CDB")]
		[Address(RVA = "0xF4D7C4", Offset = "0xF4D7C4", VA = "0xF4D7C4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CDC")]
		[Address(RVA = "0xF4D7EC", Offset = "0xF4D7EC", VA = "0xF4D7EC")]
		private int GetLODLevel()
		{
			return default(int);
		}

		[Token(Token = "0x6000CDD")]
		[Address(RVA = "0xF4D90C", Offset = "0xF4D90C", VA = "0xF4D90C")]
		public VRIKLODController()
		{
		}
	}
	[Token(Token = "0x2000224")]
	public class VRIKRootController : MonoBehaviour
	{
		[Token(Token = "0x4000F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform pelvisTarget;

		[Token(Token = "0x4000F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform leftFootTarget;

		[Token(Token = "0x4000F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform rightFootTarget;

		[Token(Token = "0x4000F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private VRIK ik;

		[Token(Token = "0x17000126")]
		public Vector3 pelvisTargetRight
		{
			[Token(Token = "0x6000CDE")]
			[Address(RVA = "0xF4D924", Offset = "0xF4D924", VA = "0xF4D924")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000CDF")]
			[Address(RVA = "0xF4D930", Offset = "0xF4D930", VA = "0xF4D930")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000CE0")]
		[Address(RVA = "0xF4D93C", Offset = "0xF4D93C", VA = "0xF4D93C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000CE1")]
		[Address(RVA = "0xF4AF28", Offset = "0xF4AF28", VA = "0xF4AF28")]
		public void Calibrate()
		{
		}

		[Token(Token = "0x6000CE2")]
		[Address(RVA = "0xF4BE88", Offset = "0xF4BE88", VA = "0xF4BE88")]
		public void Calibrate(VRIKCalibrator.CalibrationData data)
		{
		}

		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0xF4DA58", Offset = "0xF4DA58", VA = "0xF4DA58")]
		private void OnPreUpdate()
		{
		}

		[Token(Token = "0x6000CE4")]
		[Address(RVA = "0xF4DE20", Offset = "0xF4DE20", VA = "0xF4DE20")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000CE5")]
		[Address(RVA = "0xF4DF4C", Offset = "0xF4DF4C", VA = "0xF4DF4C")]
		public VRIKRootController()
		{
		}
	}
}
namespace RootMotion.Demos
{
	[Token(Token = "0x2000225")]
	public class FKOffset : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000226")]
		public class Offset
		{
			[Token(Token = "0x4000F2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[HideInInspector]
			public string name;

			[Token(Token = "0x4000F2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public HumanBodyBones bone;

			[Token(Token = "0x4000F2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 rotationOffset;

			[Token(Token = "0x4000F2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Transform t;

			[Token(Token = "0x6000CEA")]
			[Address(RVA = "0xF4E010", Offset = "0xF4E010", VA = "0xF4E010")]
			public void Apply(Animator animator)
			{
			}

			[Token(Token = "0x6000CEB")]
			[Address(RVA = "0xF4E28C", Offset = "0xF4E28C", VA = "0xF4E28C")]
			public Offset()
			{
			}
		}

		[Token(Token = "0x4000F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Offset[] offsets;

		[Token(Token = "0x4000F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator animator;

		[Token(Token = "0x6000CE6")]
		[Address(RVA = "0xF4DF54", Offset = "0xF4DF54", VA = "0xF4DF54")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CE7")]
		[Address(RVA = "0xF4DFAC", Offset = "0xF4DFAC", VA = "0xF4DFAC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000CE8")]
		[Address(RVA = "0xF4E1C0", Offset = "0xF4E1C0", VA = "0xF4E1C0")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000CE9")]
		[Address(RVA = "0xF4E284", Offset = "0xF4E284", VA = "0xF4E284")]
		public FKOffset()
		{
		}
	}
	[Token(Token = "0x2000227")]
	public class AimBoxing : MonoBehaviour
	{
		[Token(Token = "0x4000F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AimIK aimIK;

		[Token(Token = "0x4000F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform pin;

		[Token(Token = "0x6000CEC")]
		[Address(RVA = "0xF4E294", Offset = "0xF4E294", VA = "0xF4E294")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000CED")]
		[Address(RVA = "0xF4E314", Offset = "0xF4E314", VA = "0xF4E314")]
		public AimBoxing()
		{
		}
	}
	[Token(Token = "0x2000228")]
	public class AimSwing : MonoBehaviour
	{
		[Token(Token = "0x4000F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AimIK ik;

		[Token(Token = "0x4000F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The direction in which the weapon is aimed in animation (in character space). Tweak this value to adjust the aiming.")]
		public Vector3 animatedAimDirection;

		[Token(Token = "0x6000CEE")]
		[Address(RVA = "0xF4E31C", Offset = "0xF4E31C", VA = "0xF4E31C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000CEF")]
		[Address(RVA = "0xF4E388", Offset = "0xF4E388", VA = "0xF4E388")]
		public AimSwing()
		{
		}
	}
	[Token(Token = "0x2000229")]
	public class SecondHandOnGun : MonoBehaviour
	{
		[Token(Token = "0x4000F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AimIK aim;

		[Token(Token = "0x4000F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LimbIK leftArmIK;

		[Token(Token = "0x4000F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftHand;

		[Token(Token = "0x4000F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform rightHand;

		[Token(Token = "0x4000F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GrounderFBBIK grounder;

		[Token(Token = "0x4000F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 leftHandPositionOffset;

		[Token(Token = "0x4000F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Vector3 leftHandRotationOffset;

		[Token(Token = "0x4000F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 leftHandPosRelToRight;

		[Token(Token = "0x4000F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Quaternion leftHandRotRelToRight;

		[Token(Token = "0x6000CF0")]
		[Address(RVA = "0xF4E3E8", Offset = "0xF4E3E8", VA = "0xF4E3E8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CF1")]
		[Address(RVA = "0xF4E4A0", Offset = "0xF4E4A0", VA = "0xF4E4A0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000CF2")]
		[Address(RVA = "0xF4E7CC", Offset = "0xF4E7CC", VA = "0xF4E7CC")]
		public SecondHandOnGun()
		{
		}
	}
	[Token(Token = "0x200022A")]
	public class SimpleAimingSystem : MonoBehaviour
	{
		[Token(Token = "0x4000F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("AimPoser is a tool that returns an animation name based on direction.")]
		public AimPoser aimPoser;

		[Token(Token = "0x4000F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Reference to the AimIK component.")]
		public AimIK aim;

		[Token(Token = "0x4000F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Reference to the LookAt component (only used for the head in this instance).")]
		public LookAtIK lookAt;

		[Token(Token = "0x4000F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Reference to the Animator component.")]
		public Animator animator;

		[Token(Token = "0x4000F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Time of cross-fading from pose to pose.")]
		public float crossfadeTime;

		[Token(Token = "0x4000F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Will keep the aim target at a distance.")]
		public float minAimDistance;

		[Token(Token = "0x4000F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AimPoser.Pose aimPose;

		[Token(Token = "0x4000F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AimPoser.Pose lastPose;

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0xF4E7D4", Offset = "0xF4E7D4", VA = "0xF4E7D4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0xF4E80C", Offset = "0xF4E80C", VA = "0xF4E80C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000CF5")]
		[Address(RVA = "0xF4E8B8", Offset = "0xF4E8B8", VA = "0xF4E8B8")]
		private void Pose()
		{
		}

		[Token(Token = "0x6000CF6")]
		[Address(RVA = "0xF4EA20", Offset = "0xF4EA20", VA = "0xF4EA20")]
		private void LimitAimTarget()
		{
		}

		[Token(Token = "0x6000CF7")]
		[Address(RVA = "0xF4EBDC", Offset = "0xF4EBDC", VA = "0xF4EBDC")]
		private void DirectCrossFade(string state, float target)
		{
		}

		[Token(Token = "0x6000CF8")]
		[Address(RVA = "0xF4EC6C", Offset = "0xF4EC6C", VA = "0xF4EC6C")]
		public SimpleAimingSystem()
		{
		}
	}
	[Token(Token = "0x200022B")]
	public class TerrainOffset : MonoBehaviour
	{
		[Token(Token = "0x4000F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AimIK aimIK;

		[Token(Token = "0x4000F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 raycastOffset;

		[Token(Token = "0x4000F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LayerMask raycastLayers;

		[Token(Token = "0x4000F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float min;

		[Token(Token = "0x4000F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float max;

		[Token(Token = "0x4000F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float lerpSpeed;

		[Token(Token = "0x4000F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private RaycastHit hit;

		[Token(Token = "0x4000F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 offset;

		[Token(Token = "0x6000CF9")]
		[Address(RVA = "0xF4EC80", Offset = "0xF4EC80", VA = "0xF4EC80")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000CFA")]
		[Address(RVA = "0xF4EDEC", Offset = "0xF4EDEC", VA = "0xF4EDEC")]
		private Vector3 GetGroundHeightOffset(Vector3 worldPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000CFB")]
		[Address(RVA = "0xF4EFE8", Offset = "0xF4EFE8", VA = "0xF4EFE8")]
		public TerrainOffset()
		{
		}
	}
	[Token(Token = "0x200022C")]
	public class BipedIKvsAnimatorIK : MonoBehaviour
	{
		[Token(Token = "0x4000F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[LargeHeader("References")]
		public Animator animator;

		[Token(Token = "0x4000F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BipedIK bipedIK;

		[Token(Token = "0x4000F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[LargeHeader("Look At")]
		public Transform lookAtTargetBiped;

		[Token(Token = "0x4000F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform lookAtTargetAnimator;

		[Token(Token = "0x4000F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 1f)]
		public float lookAtWeight;

		[Token(Token = "0x4000F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 1f)]
		public float lookAtBodyWeight;

		[Token(Token = "0x4000F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(0f, 1f)]
		public float lookAtHeadWeight;

		[Token(Token = "0x4000F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Range(0f, 1f)]
		public float lookAtEyesWeight;

		[Token(Token = "0x4000F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0f, 1f)]
		public float lookAtClampWeight;

		[Token(Token = "0x4000F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Range(0f, 1f)]
		public float lookAtClampWeightHead;

		[Token(Token = "0x4000F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Range(0f, 1f)]
		public float lookAtClampWeightEyes;

		[Token(Token = "0x4000F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[LargeHeader("Foot")]
		public Transform footTargetBiped;

		[Token(Token = "0x4000F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform footTargetAnimator;

		[Token(Token = "0x4000F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Range(0f, 1f)]
		public float footPositionWeight;

		[Token(Token = "0x4000F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Range(0f, 1f)]
		public float footRotationWeight;

		[Token(Token = "0x4000F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[LargeHeader("Hand")]
		public Transform handTargetBiped;

		[Token(Token = "0x4000F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform handTargetAnimator;

		[Token(Token = "0x4000F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Range(0f, 1f)]
		public float handPositionWeight;

		[Token(Token = "0x4000F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Range(0f, 1f)]
		public float handRotationWeight;

		[Token(Token = "0x6000CFC")]
		[Address(RVA = "0xF4F018", Offset = "0xF4F018", VA = "0xF4F018")]
		private void OnAnimatorIK(int layer)
		{
		}

		[Token(Token = "0x6000CFD")]
		[Address(RVA = "0xF4F444", Offset = "0xF4F444", VA = "0xF4F444")]
		public BipedIKvsAnimatorIK()
		{
		}
	}
	[Token(Token = "0x200022D")]
	public class MechSpider : MonoBehaviour
	{
		[Token(Token = "0x4000F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LayerMask raycastLayers;

		[Token(Token = "0x4000F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float scale;

		[Token(Token = "0x4000F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform body;

		[Token(Token = "0x4000F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MechSpiderLeg[] legs;

		[Token(Token = "0x4000F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float legRotationWeight;

		[Token(Token = "0x4000F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float rootPositionSpeed;

		[Token(Token = "0x4000F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float rootRotationSpeed;

		[Token(Token = "0x4000F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float breatheSpeed;

		[Token(Token = "0x4000F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float breatheMagnitude;

		[Token(Token = "0x4000F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float height;

		[Token(Token = "0x4000F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float minHeight;

		[Token(Token = "0x4000F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float raycastHeight;

		[Token(Token = "0x4000F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float raycastDistance;

		[Token(Token = "0x4000F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 lastPosition;

		[Token(Token = "0x4000F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 defaultBodyLocalPosition;

		[Token(Token = "0x4000F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float sine;

		[Token(Token = "0x4000F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private RaycastHit rootHit;

		[Token(Token = "0x17000127")]
		public Vector3 velocity
		{
			[Token(Token = "0x6000CFE")]
			[Address(RVA = "0xF4F464", Offset = "0xF4F464", VA = "0xF4F464")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000CFF")]
			[Address(RVA = "0xF4F470", Offset = "0xF4F470", VA = "0xF4F470")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000D00")]
		[Address(RVA = "0xF4F47C", Offset = "0xF4F47C", VA = "0xF4F47C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D01")]
		[Address(RVA = "0xF4F4AC", Offset = "0xF4F4AC", VA = "0xF4F4AC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D02")]
		[Address(RVA = "0xF4FE30", Offset = "0xF4FE30", VA = "0xF4FE30")]
		private Vector3 GetLegCentroid()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D03")]
		[Address(RVA = "0xF4FBAC", Offset = "0xF4FBAC", VA = "0xF4FBAC")]
		private Vector3 GetLegsPlaneNormal()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D04")]
		[Address(RVA = "0xF4FF40", Offset = "0xF4FF40", VA = "0xF4FF40")]
		public MechSpider()
		{
		}
	}
	[Token(Token = "0x200022E")]
	public class MechSpiderController : MonoBehaviour
	{
		[Token(Token = "0x4000F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MechSpider mechSpider;

		[Token(Token = "0x4000F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform cameraTransform;

		[Token(Token = "0x4000F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float speed;

		[Token(Token = "0x4000F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float turnSpeed;

		[Token(Token = "0x17000128")]
		public Vector3 inputVector
		{
			[Token(Token = "0x6000D05")]
			[Address(RVA = "0xF4FF6C", Offset = "0xF4FF6C", VA = "0xF4FF6C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000D06")]
		[Address(RVA = "0xF4FFEC", Offset = "0xF4FFEC", VA = "0xF4FFEC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D07")]
		[Address(RVA = "0xF50330", Offset = "0xF50330", VA = "0xF50330")]
		public MechSpiderController()
		{
		}
	}
	[Token(Token = "0x200022F")]
	public class MechSpiderLeg : MonoBehaviour
	{
		[Token(Token = "0x2000230")]
		[CompilerGenerated]
		private sealed class <Step>d__33 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MechSpiderLeg <>4__this;

			[Token(Token = "0x4000F8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 stepStartPosition;

			[Token(Token = "0x4000F8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Vector3 targetPosition;

			[Token(Token = "0x1700012B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000D16")]
				[Address(RVA = "0xF51388", Offset = "0xF51388", VA = "0xF51388", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700012C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D18")]
				[Address(RVA = "0xF513D0", Offset = "0xF513D0", VA = "0xF513D0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D13")]
			[Address(RVA = "0xF51020", Offset = "0xF51020", VA = "0xF51020")]
			[DebuggerHidden]
			public <Step>d__33(int <>1__state)
			{
			}

			[Token(Token = "0x6000D14")]
			[Address(RVA = "0xF510D8", Offset = "0xF510D8", VA = "0xF510D8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D15")]
			[Address(RVA = "0xF510DC", Offset = "0xF510DC", VA = "0xF510DC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D17")]
			[Address(RVA = "0xF51390", Offset = "0xF51390", VA = "0xF51390", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MechSpider mechSpider;

		[Token(Token = "0x4000F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MechSpiderLeg unSync;

		[Token(Token = "0x4000F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 offset;

		[Token(Token = "0x4000F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float minDelay;

		[Token(Token = "0x4000F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float maxOffset;

		[Token(Token = "0x4000F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float stepSpeed;

		[Token(Token = "0x4000F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float footHeight;

		[Token(Token = "0x4000F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float velocityPrediction;

		[Token(Token = "0x4000F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float raycastFocus;

		[Token(Token = "0x4000F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve yOffset;

		[Token(Token = "0x4000F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform foot;

		[Token(Token = "0x4000F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 footUpAxis;

		[Token(Token = "0x4000F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float footRotationSpeed;

		[Token(Token = "0x4000F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public ParticleSystem sand;

		[Token(Token = "0x4000F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private IK ik;

		[Token(Token = "0x4000F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float stepProgress;

		[Token(Token = "0x4000F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float lastStepTime;

		[Token(Token = "0x4000F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 defaultPosition;

		[Token(Token = "0x4000F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private RaycastHit hit;

		[Token(Token = "0x4000F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Quaternion lastFootLocalRotation;

		[Token(Token = "0x4000F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Vector3 smoothHitNormal;

		[Token(Token = "0x4000F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private Vector3 lastStepPosition;

		[Token(Token = "0x17000129")]
		public bool isStepping
		{
			[Token(Token = "0x6000D08")]
			[Address(RVA = "0xF50344", Offset = "0xF50344", VA = "0xF50344")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700012A")]
		public Vector3 position
		{
			[Token(Token = "0x6000D09")]
			[Address(RVA = "0xF4FF10", Offset = "0xF4FF10", VA = "0xF4FF10")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000D0A")]
			[Address(RVA = "0xF50358", Offset = "0xF50358", VA = "0xF50358")]
			set
			{
			}
		}

		[Token(Token = "0x6000D0B")]
		[Address(RVA = "0xF503A4", Offset = "0xF503A4", VA = "0xF503A4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D0C")]
		[Address(RVA = "0xF50624", Offset = "0xF50624", VA = "0xF50624")]
		private void AfterIK()
		{
		}

		[Token(Token = "0x6000D0D")]
		[Address(RVA = "0xF507FC", Offset = "0xF507FC", VA = "0xF507FC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D0E")]
		[Address(RVA = "0xF50A20", Offset = "0xF50A20", VA = "0xF50A20")]
		private Vector3 GetStepTarget(out bool stepFound, float focus, float distance)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D0F")]
		[Address(RVA = "0xF50C80", Offset = "0xF50C80", VA = "0xF50C80")]
		private void UpdatePosition(float distance)
		{
		}

		[Token(Token = "0x6000D10")]
		[Address(RVA = "0xF50DE8", Offset = "0xF50DE8", VA = "0xF50DE8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D11")]
		[Address(RVA = "0xF50970", Offset = "0xF50970", VA = "0xF50970")]
		[IteratorStateMachine(typeof(<Step>d__33))]
		private IEnumerator Step(Vector3 stepStartPosition, Vector3 targetPosition)
		{
			return null;
		}

		[Token(Token = "0x6000D12")]
		[Address(RVA = "0xF51048", Offset = "0xF51048", VA = "0xF51048")]
		public MechSpiderLeg()
		{
		}
	}
	[Token(Token = "0x2000231")]
	public class MechSpiderParticles : MonoBehaviour
	{
		[Token(Token = "0x4000F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MechSpiderController mechSpiderController;

		[Token(Token = "0x4000F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ParticleSystem particles;

		[Token(Token = "0x6000D19")]
		[Address(RVA = "0xF513D8", Offset = "0xF513D8", VA = "0xF513D8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D1A")]
		[Address(RVA = "0xF514B4", Offset = "0xF514B4", VA = "0xF514B4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D1B")]
		[Address(RVA = "0xF51728", Offset = "0xF51728", VA = "0xF51728")]
		public MechSpiderParticles()
		{
		}
	}
	[Token(Token = "0x2000232")]
	public class AnimationWarping : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x2000233")]
		public struct Warp
		{
			[Token(Token = "0x4000F95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Layer of the 'Animation State' in the Animator.")]
			public int animationLayer;

			[Token(Token = "0x4000F96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Name of the state in the Animator to warp.")]
			public string animationState;

			[Token(Token = "0x4000F97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Warping weight by normalized time of the animation state.")]
			public AnimationCurve weightCurve;

			[Token(Token = "0x4000F98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Animated point to warp from. This should be in character space so keep this Transform parented to the root of the character.")]
			public Transform warpFrom;

			[Token(Token = "0x4000F99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("World space point to warp to.")]
			public Transform warpTo;

			[Token(Token = "0x4000F9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Which FBBIK effector to use?")]
			public FullBodyBipedEffector effector;
		}

		[Serializable]
		[Token(Token = "0x2000234")]
		public enum EffectorMode
		{
			[Token(Token = "0x4000F9C")]
			PositionOffset,
			[Token(Token = "0x4000F9D")]
			Position
		}

		[Token(Token = "0x4000F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Reference to the Animator component to use")]
		public Animator animator;

		[Token(Token = "0x4000F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Using effector.positionOffset or effector.position with effector.positionWeight? The former will enable you to use effector.position for other things, the latter will weigh in the effectors, hence using Reach and Pull in the process.")]
		public EffectorMode effectorMode;

		[Token(Token = "0x4000F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The array of warps, can have multiple simultaneous warps.")]
		[Space(10f)]
		public Warp[] warps;

		[Token(Token = "0x4000F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private EffectorMode lastMode;

		[Token(Token = "0x6000D1C")]
		[Address(RVA = "0xF51730", Offset = "0xF51730", VA = "0xF51730", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000D1D")]
		[Address(RVA = "0xF5175C", Offset = "0xF5175C", VA = "0xF5175C")]
		public float GetWarpWeight(int warpIndex)
		{
			return default(float);
		}

		[Token(Token = "0x6000D1E")]
		[Address(RVA = "0xF51974", Offset = "0xF51974", VA = "0xF51974", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000D1F")]
		[Address(RVA = "0xF51C2C", Offset = "0xF51C2C", VA = "0xF51C2C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000D20")]
		[Address(RVA = "0xF51CC0", Offset = "0xF51CC0", VA = "0xF51CC0")]
		public AnimationWarping()
		{
		}
	}
	[Token(Token = "0x2000235")]
	public class AnimatorController3rdPerson : MonoBehaviour
	{
		[Token(Token = "0x4000F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rotateSpeed;

		[Token(Token = "0x4000F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float blendSpeed;

		[Token(Token = "0x4000FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float maxAngle;

		[Token(Token = "0x4000FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float moveSpeed;

		[Token(Token = "0x4000FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float rootMotionWeight;

		[Token(Token = "0x4000FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Animator animator;

		[Token(Token = "0x4000FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Vector3 moveBlend;

		[Token(Token = "0x4000FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected Vector3 moveInput;

		[Token(Token = "0x4000FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Vector3 velocity;

		[Token(Token = "0x6000D21")]
		[Address(RVA = "0xF51CD0", Offset = "0xF51CD0", VA = "0xF51CD0", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000D22")]
		[Address(RVA = "0xF51D28", Offset = "0xF51D28", VA = "0xF51D28")]
		private void OnAnimatorMove()
		{
		}

		[Token(Token = "0x6000D23")]
		[Address(RVA = "0xF51F30", Offset = "0xF51F30", VA = "0xF51F30", Slot = "5")]
		public virtual void Move(Vector3 moveInput, bool isMoving, Vector3 faceDirection, Vector3 aimTarget)
		{
		}

		[Token(Token = "0x6000D24")]
		[Address(RVA = "0xF52158", Offset = "0xF52158", VA = "0xF52158")]
		public AnimatorController3rdPerson()
		{
		}
	}
	[Token(Token = "0x2000236")]
	public class AnimatorController3rdPersonIK : AnimatorController3rdPerson
	{
		[Token(Token = "0x4000FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Range(0f, 1f)]
		public float headLookWeight;

		[Token(Token = "0x4000FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 gunHoldOffset;

		[Token(Token = "0x4000FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Vector3 leftHandOffset;

		[Token(Token = "0x4000FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Recoil recoil;

		[Token(Token = "0x4000FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private AimIK aim;

		[Token(Token = "0x4000FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x4000FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 headLookAxis;

		[Token(Token = "0x4000FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Vector3 leftHandPosRelToRightHand;

		[Token(Token = "0x4000FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Quaternion leftHandRotRelToRightHand;

		[Token(Token = "0x4000FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3 aimTarget;

		[Token(Token = "0x4000FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Quaternion rightHandRotation;

		[Token(Token = "0x6000D25")]
		[Address(RVA = "0xF5216C", Offset = "0xF5216C", VA = "0xF5216C", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000D26")]
		[Address(RVA = "0xF52340", Offset = "0xF52340", VA = "0xF52340", Slot = "5")]
		public override void Move(Vector3 moveInput, bool isMoving, Vector3 faceDirection, Vector3 aimTarget)
		{
		}

		[Token(Token = "0x6000D27")]
		[Address(RVA = "0xF523B0", Offset = "0xF523B0", VA = "0xF523B0")]
		private void Read()
		{
		}

		[Token(Token = "0x6000D28")]
		[Address(RVA = "0xF524E8", Offset = "0xF524E8", VA = "0xF524E8")]
		private void AimIK()
		{
		}

		[Token(Token = "0x6000D29")]
		[Address(RVA = "0xF52544", Offset = "0xF52544", VA = "0xF52544")]
		private void FBBIK()
		{
		}

		[Token(Token = "0x6000D2A")]
		[Address(RVA = "0xF52BAC", Offset = "0xF52BAC", VA = "0xF52BAC")]
		private void OnPreRead()
		{
		}

		[Token(Token = "0x6000D2B")]
		[Address(RVA = "0xF529C0", Offset = "0xF529C0", VA = "0xF529C0")]
		private void HeadLookAt(Vector3 lookAtTarget)
		{
		}

		[Token(Token = "0x6000D2C")]
		[Address(RVA = "0xF52E50", Offset = "0xF52E50", VA = "0xF52E50")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000D2D")]
		[Address(RVA = "0xF52F7C", Offset = "0xF52F7C", VA = "0xF52F7C")]
		public AnimatorController3rdPersonIK()
		{
		}
	}
	[Token(Token = "0x2000237")]
	public class CharacterAnimationThirdPersonIK : CharacterAnimationThirdPerson
	{
		[Token(Token = "0x4000FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x6000D2E")]
		[Address(RVA = "0xF52F98", Offset = "0xF52F98", VA = "0xF52F98", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000D2F")]
		[Address(RVA = "0xF52FFC", Offset = "0xF52FFC", VA = "0xF52FFC", Slot = "7")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x6000D30")]
		[Address(RVA = "0xF53338", Offset = "0xF53338", VA = "0xF53338")]
		private void RotateEffector(IKEffector effector, Quaternion rotation, float mlp)
		{
		}

		[Token(Token = "0x6000D31")]
		[Address(RVA = "0xF53428", Offset = "0xF53428", VA = "0xF53428")]
		public CharacterAnimationThirdPersonIK()
		{
		}
	}
	[Token(Token = "0x2000238")]
	public class CharacterController3rdPerson : MonoBehaviour
	{
		[Token(Token = "0x4000FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CameraController cam;

		[Token(Token = "0x4000FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AnimatorController3rdPerson animatorController;

		[Token(Token = "0x1700012D")]
		private static Vector3 inputVector
		{
			[Token(Token = "0x6000D34")]
			[Address(RVA = "0xF53690", Offset = "0xF53690", VA = "0xF53690")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700012E")]
		private static Vector3 inputVectorRaw
		{
			[Token(Token = "0x6000D35")]
			[Address(RVA = "0xF53710", Offset = "0xF53710", VA = "0xF53710")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000D32")]
		[Address(RVA = "0xF53430", Offset = "0xF53430", VA = "0xF53430")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D33")]
		[Address(RVA = "0xF534A0", Offset = "0xF534A0", VA = "0xF534A0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000D36")]
		[Address(RVA = "0xF53790", Offset = "0xF53790", VA = "0xF53790")]
		public CharacterController3rdPerson()
		{
		}
	}
	[Token(Token = "0x2000239")]
	public class EffectorOffset : OffsetModifier
	{
		[Token(Token = "0x4000FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0f, 1f)]
		public float handsMaintainRelativePositionWeight;

		[Token(Token = "0x4000FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 bodyOffset;

		[Token(Token = "0x4000FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 leftShoulderOffset;

		[Token(Token = "0x4000FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 rightShoulderOffset;

		[Token(Token = "0x4000FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Vector3 leftThighOffset;

		[Token(Token = "0x4000FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 rightThighOffset;

		[Token(Token = "0x4000FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Vector3 leftHandOffset;

		[Token(Token = "0x4000FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Vector3 rightHandOffset;

		[Token(Token = "0x4000FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Vector3 leftFootOffset;

		[Token(Token = "0x4000FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Vector3 rightFootOffset;

		[Token(Token = "0x6000D37")]
		[Address(RVA = "0xF53798", Offset = "0xF53798", VA = "0xF53798", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000D38")]
		[Address(RVA = "0xF53BF4", Offset = "0xF53BF4", VA = "0xF53BF4")]
		public EffectorOffset()
		{
		}
	}
	[Token(Token = "0x200023A")]
	public class ExplosionDemo : MonoBehaviour
	{
		[Token(Token = "0x4000FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SimpleLocomotion character;

		[Token(Token = "0x4000FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float forceMlp;

		[Token(Token = "0x4000FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float upForce;

		[Token(Token = "0x4000FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float weightFalloffSpeed;

		[Token(Token = "0x4000FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve weightFalloff;

		[Token(Token = "0x4000FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve explosionForceByDistance;

		[Token(Token = "0x4000FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationCurve scale;

		[Token(Token = "0x4000FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float weight;

		[Token(Token = "0x4000FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 defaultScale;

		[Token(Token = "0x4000FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody r;

		[Token(Token = "0x4000FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x6000D39")]
		[Address(RVA = "0xF53C04", Offset = "0xF53C04", VA = "0xF53C04")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D3A")]
		[Address(RVA = "0xF53CBC", Offset = "0xF53CBC", VA = "0xF53CBC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D3B")]
		[Address(RVA = "0xF54118", Offset = "0xF54118", VA = "0xF54118")]
		private void SetEffectorWeights(float w)
		{
		}

		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0xF541B8", Offset = "0xF541B8", VA = "0xF541B8")]
		public ExplosionDemo()
		{
		}
	}
	[Token(Token = "0x200023B")]
	public class FBBIKSettings : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200023C")]
		public class Limb
		{
			[Token(Token = "0x4000FD2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FBIKChain.Smoothing reachSmoothing;

			[Token(Token = "0x4000FD3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float maintainRelativePositionWeight;

			[Token(Token = "0x4000FD4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float mappingWeight;

			[Token(Token = "0x6000D41")]
			[Address(RVA = "0xF5434C", Offset = "0xF5434C", VA = "0xF5434C")]
			public void Apply(FullBodyBipedChain chain, IKSolverFullBodyBiped solver)
			{
			}

			[Token(Token = "0x6000D42")]
			[Address(RVA = "0xF54470", Offset = "0xF54470", VA = "0xF54470")]
			public Limb()
			{
			}
		}

		[Token(Token = "0x4000FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool disableAfterStart;

		[Token(Token = "0x4000FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Limb leftArm;

		[Token(Token = "0x4000FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Limb rightArm;

		[Token(Token = "0x4000FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Limb leftLeg;

		[Token(Token = "0x4000FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Limb rightLeg;

		[Token(Token = "0x4000FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float rootPin;

		[Token(Token = "0x4000FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool bodyEffectChildNodes;

		[Token(Token = "0x6000D3D")]
		[Address(RVA = "0xF54228", Offset = "0xF54228", VA = "0xF54228")]
		public void UpdateSettings()
		{
		}

		[Token(Token = "0x6000D3E")]
		[Address(RVA = "0xF543C4", Offset = "0xF543C4", VA = "0xF543C4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D3F")]
		[Address(RVA = "0xF5445C", Offset = "0xF5445C", VA = "0xF5445C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D40")]
		[Address(RVA = "0xF54460", Offset = "0xF54460", VA = "0xF54460")]
		public FBBIKSettings()
		{
		}
	}
	[Token(Token = "0x200023D")]
	public class FBIKBendGoal : MonoBehaviour
	{
		[Token(Token = "0x4000FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FullBodyBipedChain chain;

		[Token(Token = "0x4000FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float weight;

		[Token(Token = "0x6000D43")]
		[Address(RVA = "0xF54480", Offset = "0xF54480", VA = "0xF54480")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D44")]
		[Address(RVA = "0xF544E8", Offset = "0xF544E8", VA = "0xF544E8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D45")]
		[Address(RVA = "0xF545BC", Offset = "0xF545BC", VA = "0xF545BC")]
		public FBIKBendGoal()
		{
		}
	}
	[Token(Token = "0x200023E")]
	public class FBIKBoxing : MonoBehaviour
	{
		[Token(Token = "0x4000FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The target we want to hit")]
		public Transform target;

		[Token(Token = "0x4000FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The pin Transform is used to reference the exact hit point in the animation (used by AimIK to aim the upper body to follow the target).In Legacy and Generic modes you can just create and position a reference point in your animating software and include it in the FBX. Then in Unity if you added a GameObject with the exact same name under the character's root, it would be animated to the required position.In Humanoid mode however, Mecanim loses track of any Transform that does not belong to the avatar, so in this case the pin point has to be manually set inside the Unity Editor.")]
		public Transform pin;

		[Token(Token = "0x4000FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The Full Body Biped IK component")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The Aim IK component. Aim IK is ust used for following the target slightly with the body.")]
		public AimIK aim;

		[Token(Token = "0x4000FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The master weight")]
		public float weight;

		[Token(Token = "0x4000FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The effector type of the punching hand")]
		public FullBodyBipedEffector effector;

		[Token(Token = "0x4000FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Weight of aiming the body to follow the target")]
		public AnimationCurve aimWeight;

		[Token(Token = "0x4000FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Animator animator;

		[Token(Token = "0x6000D46")]
		[Address(RVA = "0xF545C4", Offset = "0xF545C4", VA = "0xF545C4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D47")]
		[Address(RVA = "0xF5461C", Offset = "0xF5461C", VA = "0xF5461C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000D48")]
		[Address(RVA = "0xF547B4", Offset = "0xF547B4", VA = "0xF547B4")]
		public FBIKBoxing()
		{
		}
	}
	[Token(Token = "0x200023F")]
	public class FBIKHandsOnProp : MonoBehaviour
	{
		[Token(Token = "0x4000FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool leftHanded;

		[Token(Token = "0x6000D49")]
		[Address(RVA = "0xF547BC", Offset = "0xF547BC", VA = "0xF547BC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D4A")]
		[Address(RVA = "0xF5489C", Offset = "0xF5489C", VA = "0xF5489C")]
		private void OnPreRead()
		{
		}

		[Token(Token = "0x6000D4B")]
		[Address(RVA = "0xF54928", Offset = "0xF54928", VA = "0xF54928")]
		private void HandsOnProp(IKEffector mainHand, IKEffector otherHand)
		{
		}

		[Token(Token = "0x6000D4C")]
		[Address(RVA = "0xF54DFC", Offset = "0xF54DFC", VA = "0xF54DFC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000D4D")]
		[Address(RVA = "0xF54F28", Offset = "0xF54F28", VA = "0xF54F28")]
		public FBIKHandsOnProp()
		{
		}
	}
	[Token(Token = "0x2000240")]
	public class FPSAiming : MonoBehaviour
	{
		[Token(Token = "0x4000FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float aimWeight;

		[Token(Token = "0x4000FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1f)]
		public float sightWeight;

		[Token(Token = "0x4000FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 180f)]
		public float maxAngle;

		[Token(Token = "0x4000FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 aimOffset;

		[Token(Token = "0x4000FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool animatePhysics;

		[Token(Token = "0x4000FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform gun;

		[Token(Token = "0x4000FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform gunTarget;

		[Token(Token = "0x4000FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AimIK gunAim;

		[Token(Token = "0x4000FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AimIK headAim;

		[Token(Token = "0x4000FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public CameraControllerFPS cam;

		[Token(Token = "0x4000FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Recoil recoil;

		[Token(Token = "0x4000FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Range(0f, 1f)]
		public float cameraRecoilWeight;

		[Token(Token = "0x4000FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector3 gunTargetDefaultLocalPosition;

		[Token(Token = "0x4000FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 gunTargetDefaultLocalRotation;

		[Token(Token = "0x4000FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 camDefaultLocalPosition;

		[Token(Token = "0x4000FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 camRelativeToGunTarget;

		[Token(Token = "0x4000FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool updateFrame;

		[Token(Token = "0x6000D4E")]
		[Address(RVA = "0xF54F30", Offset = "0xF54F30", VA = "0xF54F30")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D4F")]
		[Address(RVA = "0xF550CC", Offset = "0xF550CC", VA = "0xF550CC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000D50")]
		[Address(RVA = "0xF550D8", Offset = "0xF550D8", VA = "0xF550D8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000D51")]
		[Address(RVA = "0xF55398", Offset = "0xF55398", VA = "0xF55398")]
		private void Aiming()
		{
		}

		[Token(Token = "0x6000D52")]
		[Address(RVA = "0xF55634", Offset = "0xF55634", VA = "0xF55634")]
		private void LookDownTheSight()
		{
		}

		[Token(Token = "0x6000D53")]
		[Address(RVA = "0xF5519C", Offset = "0xF5519C", VA = "0xF5519C")]
		private void RotateCharacter()
		{
		}

		[Token(Token = "0x6000D54")]
		[Address(RVA = "0xF562FC", Offset = "0xF562FC", VA = "0xF562FC")]
		public FPSAiming()
		{
		}
	}
	[Token(Token = "0x2000241")]
	public class FPSCharacter : MonoBehaviour
	{
		[Token(Token = "0x4000FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float walkSpeed;

		[Token(Token = "0x4000FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float sVel;

		[Token(Token = "0x4000FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator animator;

		[Token(Token = "0x4000FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private FPSAiming FPSAiming;

		[Token(Token = "0x6000D55")]
		[Address(RVA = "0xF5631C", Offset = "0xF5631C", VA = "0xF5631C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D56")]
		[Address(RVA = "0xF563AC", Offset = "0xF563AC", VA = "0xF563AC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D57")]
		[Address(RVA = "0xF564A8", Offset = "0xF564A8", VA = "0xF564A8")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000D58")]
		[Address(RVA = "0xF56554", Offset = "0xF56554", VA = "0xF56554")]
		public FPSCharacter()
		{
		}
	}
	[Token(Token = "0x2000242")]
	public class HitReactionTrigger : MonoBehaviour
	{
		[Token(Token = "0x4000FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HitReaction hitReaction;

		[Token(Token = "0x4000FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float hitForce;

		[Token(Token = "0x4000FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string colliderName;

		[Token(Token = "0x6000D59")]
		[Address(RVA = "0xF56564", Offset = "0xF56564", VA = "0xF56564")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D5A")]
		[Address(RVA = "0xF566B4", Offset = "0xF566B4", VA = "0xF566B4")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000D5B")]
		[Address(RVA = "0xF56818", Offset = "0xF56818", VA = "0xF56818")]
		public HitReactionTrigger()
		{
		}
	}
	[Token(Token = "0x2000243")]
	public class HoldingHands : MonoBehaviour
	{
		[Token(Token = "0x4000FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK rightHandChar;

		[Token(Token = "0x4000FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FullBodyBipedIK leftHandChar;

		[Token(Token = "0x4000FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform rightHandTarget;

		[Token(Token = "0x4000FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform leftHandTarget;

		[Token(Token = "0x4000FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float crossFade;

		[Token(Token = "0x4001000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float speed;

		[Token(Token = "0x4001001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Quaternion rightHandRotation;

		[Token(Token = "0x4001002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion leftHandRotation;

		[Token(Token = "0x6000D5C")]
		[Address(RVA = "0xF56828", Offset = "0xF56828", VA = "0xF56828")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D5D")]
		[Address(RVA = "0xF569F4", Offset = "0xF569F4", VA = "0xF569F4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000D5E")]
		[Address(RVA = "0xF56E04", Offset = "0xF56E04", VA = "0xF56E04")]
		public HoldingHands()
		{
		}
	}
	[Token(Token = "0x2000244")]
	public class InteractionC2CDemo : MonoBehaviour
	{
		[Token(Token = "0x4001003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionSystem character1;

		[Token(Token = "0x4001004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractionSystem character2;

		[Token(Token = "0x4001005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractionObject handShake;

		[Token(Token = "0x6000D5F")]
		[Address(RVA = "0xF56E14", Offset = "0xF56E14", VA = "0xF56E14")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000D60")]
		[Address(RVA = "0xF56EFC", Offset = "0xF56EFC", VA = "0xF56EFC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000D61")]
		[Address(RVA = "0xF56FE8", Offset = "0xF56FE8", VA = "0xF56FE8")]
		public InteractionC2CDemo()
		{
		}
	}
	[Token(Token = "0x2000245")]
	public class InteractionDemo : MonoBehaviour
	{
		[Token(Token = "0x4001006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x4001007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool interrupt;

		[Token(Token = "0x4001008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractionObject ball;

		[Token(Token = "0x4001009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public InteractionObject benchMain;

		[Token(Token = "0x400100A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public InteractionObject benchHands;

		[Token(Token = "0x400100B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public InteractionObject button;

		[Token(Token = "0x400100C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public InteractionObject cigarette;

		[Token(Token = "0x400100D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public InteractionObject door;

		[Token(Token = "0x400100E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool isSitting;

		[Token(Token = "0x6000D62")]
		[Address(RVA = "0xF56FF0", Offset = "0xF56FF0", VA = "0xF56FF0")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000D63")]
		[Address(RVA = "0xF574F0", Offset = "0xF574F0", VA = "0xF574F0")]
		public InteractionDemo()
		{
		}
	}
	[Token(Token = "0x2000246")]
	public class InteractionSystemTestGUI : MonoBehaviour
	{
		[Token(Token = "0x400100F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The object to interact to")]
		public InteractionObject interactionObject;

		[Token(Token = "0x4001010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The effectors to interact with")]
		public FullBodyBipedEffector[] effectors;

		[Token(Token = "0x4001011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private InteractionSystem interactionSystem;

		[Token(Token = "0x6000D64")]
		[Address(RVA = "0xF574F8", Offset = "0xF574F8", VA = "0xF574F8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D65")]
		[Address(RVA = "0xF57550", Offset = "0xF57550", VA = "0xF57550")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000D66")]
		[Address(RVA = "0xF577FC", Offset = "0xF577FC", VA = "0xF577FC")]
		public InteractionSystemTestGUI()
		{
		}
	}
	[Token(Token = "0x2000247")]
	public class KissingRig : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000248")]
		public class Partner
		{
			[Token(Token = "0x4001016")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FullBodyBipedIK ik;

			[Token(Token = "0x4001017")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform mouth;

			[Token(Token = "0x4001018")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform mouthTarget;

			[Token(Token = "0x4001019")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Transform touchTargetLeftHand;

			[Token(Token = "0x400101A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Transform touchTargetRightHand;

			[Token(Token = "0x400101B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float bodyWeightHorizontal;

			[Token(Token = "0x400101C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float bodyWeightVertical;

			[Token(Token = "0x400101D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public float neckRotationWeight;

			[Token(Token = "0x400101E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public float headTiltAngle;

			[Token(Token = "0x400101F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Vector3 headTiltAxis;

			[Token(Token = "0x4001020")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private Quaternion neckRotation;

			[Token(Token = "0x1700012F")]
			private Transform neck
			{
				[Token(Token = "0x6000D6C")]
				[Address(RVA = "0xF58018", Offset = "0xF58018", VA = "0xF58018")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D6A")]
			[Address(RVA = "0xF578A8", Offset = "0xF578A8", VA = "0xF578A8")]
			public void Initiate()
			{
			}

			[Token(Token = "0x6000D6B")]
			[Address(RVA = "0xF578C8", Offset = "0xF578C8", VA = "0xF578C8")]
			public void Update(float weight)
			{
			}

			[Token(Token = "0x6000D6D")]
			[Address(RVA = "0xF57EB0", Offset = "0xF57EB0", VA = "0xF57EB0")]
			private void InverseTransformEffector(FullBodyBipedEffector effector, Transform target, Vector3 targetPosition, float weight)
			{
			}

			[Token(Token = "0x6000D6E")]
			[Address(RVA = "0xF58064", Offset = "0xF58064", VA = "0xF58064")]
			public Partner()
			{
			}
		}

		[Token(Token = "0x4001012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Partner partner1;

		[Token(Token = "0x4001013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Partner partner2;

		[Token(Token = "0x4001014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float weight;

		[Token(Token = "0x4001015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int iterations;

		[Token(Token = "0x6000D67")]
		[Address(RVA = "0xF57804", Offset = "0xF57804", VA = "0xF57804")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D68")]
		[Address(RVA = "0xF57834", Offset = "0xF57834", VA = "0xF57834")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000D69")]
		[Address(RVA = "0xF57898", Offset = "0xF57898", VA = "0xF57898")]
		public KissingRig()
		{
		}
	}
	[Token(Token = "0x2000249")]
	public class MotionAbsorb : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x200024A")]
		public enum Mode
		{
			[Token(Token = "0x4001029")]
			Position,
			[Token(Token = "0x400102A")]
			PositionOffset
		}

		[Serializable]
		[Token(Token = "0x200024B")]
		public class Absorber
		{
			[Token(Token = "0x400102B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The type of effector (hand, foot, shoulder...) - this is just an enum")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x400102C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("How much should motion be absorbed on this effector")]
			public float weight;

			[Token(Token = "0x400102D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Vector3 position;

			[Token(Token = "0x400102E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private Quaternion rotation;

			[Token(Token = "0x400102F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private IKEffector e;

			[Token(Token = "0x6000D75")]
			[Address(RVA = "0xF581F0", Offset = "0xF581F0", VA = "0xF581F0")]
			public void SetToBone(IKSolverFullBodyBiped solver, Mode mode)
			{
			}

			[Token(Token = "0x6000D76")]
			[Address(RVA = "0xF583D8", Offset = "0xF583D8", VA = "0xF583D8")]
			public void UpdateEffectorWeights(float w)
			{
			}

			[Token(Token = "0x6000D77")]
			[Address(RVA = "0xF583FC", Offset = "0xF583FC", VA = "0xF583FC")]
			public void SetPosition(float w)
			{
			}

			[Token(Token = "0x6000D78")]
			[Address(RVA = "0xF5850C", Offset = "0xF5850C", VA = "0xF5850C")]
			public void SetRotation(float w)
			{
			}

			[Token(Token = "0x6000D79")]
			[Address(RVA = "0xF586C4", Offset = "0xF586C4", VA = "0xF586C4")]
			public Absorber()
			{
			}
		}

		[Token(Token = "0x4001021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Use either effector position, position weight, rotation, rotationWeight or positionOffset and rotating the bone directly.")]
		public Mode mode;

		[Token(Token = "0x4001022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Array containing the absorbers")]
		public Absorber[] absorbers;

		[Token(Token = "0x4001023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Weight falloff curve (how fast will the effect reduce after impact)")]
		public AnimationCurve falloff;

		[Token(Token = "0x4001024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("How fast will the impact fade away. (if 1, effect lasts for 1 second)")]
		public float falloffSpeed;

		[Token(Token = "0x4001025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float timer;

		[Token(Token = "0x4001026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float w;

		[Token(Token = "0x4001027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Mode initialMode;

		[Token(Token = "0x6000D6F")]
		[Address(RVA = "0xF58078", Offset = "0xF58078", VA = "0xF58078", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000D70")]
		[Address(RVA = "0xF58170", Offset = "0xF58170", VA = "0xF58170")]
		private void OnCollisionEnter(Collision c)
		{
		}

		[Token(Token = "0x6000D71")]
		[Address(RVA = "0xF582CC", Offset = "0xF582CC", VA = "0xF582CC", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000D72")]
		[Address(RVA = "0xF58490", Offset = "0xF58490", VA = "0xF58490")]
		private void AfterIK()
		{
		}

		[Token(Token = "0x6000D73")]
		[Address(RVA = "0xF5857C", Offset = "0xF5857C", VA = "0xF5857C", Slot = "6")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6000D74")]
		[Address(RVA = "0xF586B4", Offset = "0xF586B4", VA = "0xF586B4")]
		public MotionAbsorb()
		{
		}
	}
	[Token(Token = "0x200024C")]
	public class MotionAbsorbCharacter : MonoBehaviour
	{
		[Token(Token = "0x4001030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Animator animator;

		[Token(Token = "0x4001031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MotionAbsorb motionAbsorb;

		[Token(Token = "0x4001032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform cube;

		[Token(Token = "0x4001033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float cubeRandomPosition;

		[Token(Token = "0x4001034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve motionAbsorbWeight;

		[Token(Token = "0x4001035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 cubeDefaultPosition;

		[Token(Token = "0x4001036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private AnimatorStateInfo info;

		[Token(Token = "0x4001037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody cubeRigidbody;

		[Token(Token = "0x6000D7A")]
		[Address(RVA = "0xF58724", Offset = "0xF58724", VA = "0xF58724")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D7B")]
		[Address(RVA = "0xF5879C", Offset = "0xF5879C", VA = "0xF5879C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D7C")]
		[Address(RVA = "0xF5886C", Offset = "0xF5886C", VA = "0xF5886C")]
		private void SwingStart()
		{
		}

		[Token(Token = "0x6000D7D")]
		[Address(RVA = "0xF589B4", Offset = "0xF589B4", VA = "0xF589B4")]
		public MotionAbsorbCharacter()
		{
		}
	}
	[Token(Token = "0x200024D")]
	public class OffsetEffector : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x200024E")]
		public class EffectorLink
		{
			[Token(Token = "0x400103C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FullBodyBipedEffector effectorType;

			[Token(Token = "0x400103D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float weightMultiplier;

			[Token(Token = "0x400103E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			public Vector3 localPosition;

			[Token(Token = "0x6000D82")]
			[Address(RVA = "0xF58F3C", Offset = "0xF58F3C", VA = "0xF58F3C")]
			public EffectorLink()
			{
			}
		}

		[Token(Token = "0x4001038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Optional. Assign the bone Transform that is closest to this OffsetEffector to be able to call OffsetEffector.Anchor() in LateUpdate to match its position and rotation to animation.")]
		public Transform anchor;

		[Token(Token = "0x4001039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public EffectorLink[] effectorLinks;

		[Token(Token = "0x400103A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 posRelToAnchor;

		[Token(Token = "0x400103B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion rotRelToAnchor;

		[Token(Token = "0x6000D7E")]
		[Address(RVA = "0xF589C8", Offset = "0xF589C8", VA = "0xF589C8", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000D7F")]
		[Address(RVA = "0xF58C10", Offset = "0xF58C10", VA = "0xF58C10", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000D80")]
		[Address(RVA = "0xF58D88", Offset = "0xF58D88", VA = "0xF58D88")]
		public void Anchor()
		{
		}

		[Token(Token = "0x6000D81")]
		[Address(RVA = "0xF58EE4", Offset = "0xF58EE4", VA = "0xF58EE4")]
		public OffsetEffector()
		{
		}
	}
	[Token(Token = "0x200024F")]
	public class PendulumExample : MonoBehaviour
	{
		[Token(Token = "0x400103F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The master weight of this script.")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x4001040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Multiplier for the distance of the root to the target.")]
		public float hangingDistanceMlp;

		[Token(Token = "0x4001041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		[Tooltip("Where does the root of the character land when weight is blended out?")]
		public Vector3 rootTargetPosition;

		[Token(Token = "0x4001042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[HideInInspector]
		[Tooltip("How is the root of the character rotated when weight is blended out?")]
		public Quaternion rootTargetRotation;

		[Token(Token = "0x4001043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform target;

		[Token(Token = "0x4001044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform leftHandTarget;

		[Token(Token = "0x4001045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform rightHandTarget;

		[Token(Token = "0x4001046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform leftFootTarget;

		[Token(Token = "0x4001047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform rightFootTarget;

		[Token(Token = "0x4001048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform pelvisTarget;

		[Token(Token = "0x4001049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform bodyTarget;

		[Token(Token = "0x400104A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform headTarget;

		[Token(Token = "0x400104B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Vector3 pelvisDownAxis;

		[Token(Token = "0x400104C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x400104D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Quaternion rootRelativeToPelvis;

		[Token(Token = "0x400104E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3 pelvisToRoot;

		[Token(Token = "0x400104F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float lastWeight;

		[Token(Token = "0x6000D83")]
		[Address(RVA = "0xF58F4C", Offset = "0xF58F4C", VA = "0xF58F4C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D84")]
		[Address(RVA = "0xF59260", Offset = "0xF59260", VA = "0xF59260")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000D85")]
		[Address(RVA = "0xF59A5C", Offset = "0xF59A5C", VA = "0xF59A5C")]
		public PendulumExample()
		{
		}
	}
	[Token(Token = "0x2000250")]
	public abstract class PickUp2Handed : MonoBehaviour
	{
		[Token(Token = "0x4001050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int GUIspace;

		[Token(Token = "0x4001051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x4001052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractionObject obj;

		[Token(Token = "0x4001053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform pivot;

		[Token(Token = "0x4001054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform holdPoint;

		[Token(Token = "0x4001055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float pickUpTime;

		[Token(Token = "0x4001056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float holdWeight;

		[Token(Token = "0x4001057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float holdWeightVel;

		[Token(Token = "0x4001058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 pickUpPosition;

		[Token(Token = "0x4001059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion pickUpRotation;

		[Token(Token = "0x17000130")]
		private bool holding
		{
			[Token(Token = "0x6000D8D")]
			[Address(RVA = "0xF59E54", Offset = "0xF59E54", VA = "0xF59E54")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000131")]
		private bool holdingLeft
		{
			[Token(Token = "0x6000D8E")]
			[Address(RVA = "0xF59F24", Offset = "0xF59F24", VA = "0xF59F24")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000132")]
		private bool holdingRight
		{
			[Token(Token = "0x6000D8F")]
			[Address(RVA = "0xF59E7C", Offset = "0xF59E7C", VA = "0xF59E7C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000D86")]
		[Address(RVA = "0xF59AC8", Offset = "0xF59AC8", VA = "0xF59AC8")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000D87")]
		protected abstract void RotatePivot();

		[Token(Token = "0x6000D88")]
		[Address(RVA = "0xF59FCC", Offset = "0xF59FCC", VA = "0xF59FCC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D89")]
		[Address(RVA = "0xF5A1BC", Offset = "0xF5A1BC", VA = "0xF5A1BC")]
		private void OnPause(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6000D8A")]
		[Address(RVA = "0xF5A32C", Offset = "0xF5A32C", VA = "0xF5A32C")]
		private void OnStart(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6000D8B")]
		[Address(RVA = "0xF5A3FC", Offset = "0xF5A3FC", VA = "0xF5A3FC")]
		private void OnDrop(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6000D8C")]
		[Address(RVA = "0xF5A528", Offset = "0xF5A528", VA = "0xF5A528")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000D90")]
		[Address(RVA = "0xF5A6A8", Offset = "0xF5A6A8", VA = "0xF5A6A8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0xF5A8E4", Offset = "0xF5A8E4", VA = "0xF5A8E4")]
		protected PickUp2Handed()
		{
		}
	}
	[Token(Token = "0x2000251")]
	public class PickUpBox : PickUp2Handed
	{
		[Token(Token = "0x6000D92")]
		[Address(RVA = "0xF5A8F8", Offset = "0xF5A8F8", VA = "0xF5A8F8", Slot = "4")]
		protected override void RotatePivot()
		{
		}

		[Token(Token = "0x6000D93")]
		[Address(RVA = "0xF5AAD8", Offset = "0xF5AAD8", VA = "0xF5AAD8")]
		public PickUpBox()
		{
		}
	}
	[Token(Token = "0x2000252")]
	public class PickUpSphere : PickUp2Handed
	{
		[Token(Token = "0x6000D94")]
		[Address(RVA = "0xF5AAEC", Offset = "0xF5AAEC", VA = "0xF5AAEC", Slot = "4")]
		protected override void RotatePivot()
		{
		}

		[Token(Token = "0x6000D95")]
		[Address(RVA = "0xF5AC00", Offset = "0xF5AC00", VA = "0xF5AC00")]
		public PickUpSphere()
		{
		}
	}
	[Token(Token = "0x2000253")]
	public class RagdollUtilityDemo : MonoBehaviour
	{
		[Token(Token = "0x400105A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RagdollUtility ragdollUtility;

		[Token(Token = "0x400105B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform root;

		[Token(Token = "0x400105C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Rigidbody pelvis;

		[Token(Token = "0x6000D96")]
		[Address(RVA = "0xF5AC14", Offset = "0xF5AC14", VA = "0xF5AC14")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000D97")]
		[Address(RVA = "0xF5ACAC", Offset = "0xF5ACAC", VA = "0xF5ACAC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D98")]
		[Address(RVA = "0xF5ADC4", Offset = "0xF5ADC4", VA = "0xF5ADC4")]
		public RagdollUtilityDemo()
		{
		}
	}
	[Token(Token = "0x2000254")]
	public class RecoilTest : MonoBehaviour
	{
		[Token(Token = "0x400105D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float magnitude;

		[Token(Token = "0x400105E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Recoil recoil;

		[Token(Token = "0x6000D99")]
		[Address(RVA = "0xF5ADCC", Offset = "0xF5ADCC", VA = "0xF5ADCC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D9A")]
		[Address(RVA = "0xF5AE24", Offset = "0xF5AE24", VA = "0xF5AE24")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D9B")]
		[Address(RVA = "0xF5AE70", Offset = "0xF5AE70", VA = "0xF5AE70")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000D9C")]
		[Address(RVA = "0xF5AF08", Offset = "0xF5AF08", VA = "0xF5AF08")]
		public RecoilTest()
		{
		}
	}
	[Token(Token = "0x2000255")]
	public class ResetInteractionObject : MonoBehaviour
	{
		[Token(Token = "0x2000256")]
		[CompilerGenerated]
		private sealed class <ResetObject>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001064")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001065")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001066")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float resetTime;

			[Token(Token = "0x4001067")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ResetInteractionObject <>4__this;

			[Token(Token = "0x17000133")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000DA4")]
				[Address(RVA = "0xF5B298", Offset = "0xF5B298", VA = "0xF5B298", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000134")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000DA6")]
				[Address(RVA = "0xF5B2E0", Offset = "0xF5B2E0", VA = "0xF5B2E0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000DA1")]
			[Address(RVA = "0xF5B0B4", Offset = "0xF5B0B4", VA = "0xF5B0B4")]
			[DebuggerHidden]
			public <ResetObject>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6000DA2")]
			[Address(RVA = "0xF5B0EC", Offset = "0xF5B0EC", VA = "0xF5B0EC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000DA3")]
			[Address(RVA = "0xF5B0F0", Offset = "0xF5B0F0", VA = "0xF5B0F0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000DA5")]
			[Address(RVA = "0xF5B2A0", Offset = "0xF5B2A0", VA = "0xF5B2A0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400105F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float resetDelay;

		[Token(Token = "0x4001060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Vector3 defaultPosition;

		[Token(Token = "0x4001061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Quaternion defaultRotation;

		[Token(Token = "0x4001062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform defaultParent;

		[Token(Token = "0x4001063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Rigidbody r;

		[Token(Token = "0x6000D9D")]
		[Address(RVA = "0xF5AF18", Offset = "0xF5AF18", VA = "0xF5AF18")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D9E")]
		[Address(RVA = "0xF5AFDC", Offset = "0xF5AFDC", VA = "0xF5AFDC")]
		private void OnPickUp(Transform t)
		{
		}

		[Token(Token = "0x6000D9F")]
		[Address(RVA = "0xF5B030", Offset = "0xF5B030", VA = "0xF5B030")]
		[IteratorStateMachine(typeof(<ResetObject>d__7))]
		private IEnumerator ResetObject(float resetTime)
		{
			return null;
		}

		[Token(Token = "0x6000DA0")]
		[Address(RVA = "0xF5B0DC", Offset = "0xF5B0DC", VA = "0xF5B0DC")]
		public ResetInteractionObject()
		{
		}
	}
	[Token(Token = "0x2000257")]
	public class SoccerDemo : MonoBehaviour
	{
		[Token(Token = "0x2000258")]
		[CompilerGenerated]
		private sealed class <ResetDelayed>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400106B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400106C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400106D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SoccerDemo <>4__this;

			[Token(Token = "0x17000135")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000DAD")]
				[Address(RVA = "0xF5B584", Offset = "0xF5B584", VA = "0xF5B584", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000136")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000DAF")]
				[Address(RVA = "0xF5B5CC", Offset = "0xF5B5CC", VA = "0xF5B5CC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000DAA")]
			[Address(RVA = "0xF5B410", Offset = "0xF5B410", VA = "0xF5B410")]
			[DebuggerHidden]
			public <ResetDelayed>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6000DAB")]
			[Address(RVA = "0xF5B440", Offset = "0xF5B440", VA = "0xF5B440", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000DAC")]
			[Address(RVA = "0xF5B444", Offset = "0xF5B444", VA = "0xF5B444", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000DAE")]
			[Address(RVA = "0xF5B58C", Offset = "0xF5B58C", VA = "0xF5B58C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Animator animator;

		[Token(Token = "0x4001069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 defaultPosition;

		[Token(Token = "0x400106A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion defaultRotation;

		[Token(Token = "0x6000DA7")]
		[Address(RVA = "0xF5B2E8", Offset = "0xF5B2E8", VA = "0xF5B2E8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DA8")]
		[Address(RVA = "0xF5B39C", Offset = "0xF5B39C", VA = "0xF5B39C")]
		[IteratorStateMachine(typeof(<ResetDelayed>d__4))]
		private IEnumerator ResetDelayed()
		{
			return null;
		}

		[Token(Token = "0x6000DA9")]
		[Address(RVA = "0xF5B438", Offset = "0xF5B438", VA = "0xF5B438")]
		public SoccerDemo()
		{
		}
	}
	[Token(Token = "0x2000259")]
	public class TouchWalls : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200025A")]
		public class EffectorLink
		{
			[Token(Token = "0x4001070")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool enabled;

			[Token(Token = "0x4001071")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public FullBodyBipedEffector effectorType;

			[Token(Token = "0x4001072")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public InteractionObject interactionObject;

			[Token(Token = "0x4001073")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform spherecastFrom;

			[Token(Token = "0x4001074")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float spherecastRadius;

			[Token(Token = "0x4001075")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float minDistance;

			[Token(Token = "0x4001076")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float distanceMlp;

			[Token(Token = "0x4001077")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public LayerMask touchLayers;

			[Token(Token = "0x4001078")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float lerpSpeed;

			[Token(Token = "0x4001079")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float minSwitchTime;

			[Token(Token = "0x400107A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public float releaseDistance;

			[Token(Token = "0x400107B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public bool sliding;

			[Token(Token = "0x400107C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Vector3 raycastDirectionLocal;

			[Token(Token = "0x400107D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private float raycastDistance;

			[Token(Token = "0x400107E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private bool inTouch;

			[Token(Token = "0x400107F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			private RaycastHit hit;

			[Token(Token = "0x4001080")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			private Vector3 targetPosition;

			[Token(Token = "0x4001081")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			private Quaternion targetRotation;

			[Token(Token = "0x4001082")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			private bool initiated;

			[Token(Token = "0x4001083")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			private float nextSwitchTime;

			[Token(Token = "0x4001084")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			private float speedF;

			[Token(Token = "0x6000DB4")]
			[Address(RVA = "0xF5B638", Offset = "0xF5B638", VA = "0xF5B638")]
			public void Initiate(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x6000DB5")]
			[Address(RVA = "0xF5C20C", Offset = "0xF5C20C", VA = "0xF5C20C")]
			private bool FindWalls(Vector3 direction)
			{
				return default(bool);
			}

			[Token(Token = "0x6000DB6")]
			[Address(RVA = "0xF5BA40", Offset = "0xF5BA40", VA = "0xF5BA40")]
			public void Update(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x6000DB7")]
			[Address(RVA = "0xF5C2F4", Offset = "0xF5C2F4", VA = "0xF5C2F4")]
			private void StopTouch(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x6000DB8")]
			[Address(RVA = "0xF5C3D8", Offset = "0xF5C3D8", VA = "0xF5C3D8")]
			private void OnInteractionStart(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
			{
			}

			[Token(Token = "0x6000DB9")]
			[Address(RVA = "0xF5C464", Offset = "0xF5C464", VA = "0xF5C464")]
			private void OnInteractionResume(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
			{
			}

			[Token(Token = "0x6000DBA")]
			[Address(RVA = "0xF5C4EC", Offset = "0xF5C4EC", VA = "0xF5C4EC")]
			private void OnInteractionStop(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
			{
			}

			[Token(Token = "0x6000DBB")]
			[Address(RVA = "0xF5BFF8", Offset = "0xF5BFF8", VA = "0xF5BFF8")]
			public void Destroy(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x6000DBC")]
			[Address(RVA = "0xF5C574", Offset = "0xF5C574", VA = "0xF5C574")]
			public EffectorLink()
			{
			}
		}

		[Token(Token = "0x400106E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x400106F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EffectorLink[] effectorLinks;

		[Token(Token = "0x6000DB0")]
		[Address(RVA = "0xF5B5D4", Offset = "0xF5B5D4", VA = "0xF5B5D4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DB1")]
		[Address(RVA = "0xF5B9E0", Offset = "0xF5B9E0", VA = "0xF5B9E0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000DB2")]
		[Address(RVA = "0xF5BF48", Offset = "0xF5BF48", VA = "0xF5BF48")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000DB3")]
		[Address(RVA = "0xF5C204", Offset = "0xF5C204", VA = "0xF5C204")]
		public TouchWalls()
		{
		}
	}
	[Token(Token = "0x200025B")]
	public class TransferMotion : MonoBehaviour
	{
		[Token(Token = "0x4001085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The Transform to transfer motion to.")]
		public Transform to;

		[Token(Token = "0x4001086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		[Tooltip("The amount of motion to transfer.")]
		public float transferMotion;

		[Token(Token = "0x4001087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 lastPosition;

		[Token(Token = "0x6000DBD")]
		[Address(RVA = "0xF5C5B0", Offset = "0xF5C5B0", VA = "0xF5C5B0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000DBE")]
		[Address(RVA = "0xF5C5E0", Offset = "0xF5C5E0", VA = "0xF5C5E0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DBF")]
		[Address(RVA = "0xF5C690", Offset = "0xF5C690", VA = "0xF5C690")]
		public TransferMotion()
		{
		}
	}
	[Token(Token = "0x200025C")]
	public class TwoHandedProp : MonoBehaviour
	{
		[Token(Token = "0x4001088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x4001089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The left hand target parented to the right hand.")]
		public Transform leftHandTarget;

		[Token(Token = "0x400108A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Left hand poser (poses fingers to match the left hand target).")]
		public Poser leftHandPoser;

		[Token(Token = "0x400108B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 1f)]
		[Tooltip("The weight of pinning the left hand to the prop.")]
		public float leftHandWeight;

		[Token(Token = "0x400108C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x400108D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 targetPosRelativeToRight;

		[Token(Token = "0x400108E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion targetRotRelativeToRight;

		[Token(Token = "0x6000DC0")]
		[Address(RVA = "0xF5C6A4", Offset = "0xF5C6A4", VA = "0xF5C6A4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DC1")]
		[Address(RVA = "0xF5C874", Offset = "0xF5C874", VA = "0xF5C874")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000DC2")]
		[Address(RVA = "0xF5CB6C", Offset = "0xF5CB6C", VA = "0xF5CB6C")]
		private void AfterFBBIK()
		{
		}

		[Token(Token = "0x6000DC3")]
		[Address(RVA = "0xF5CD0C", Offset = "0xF5CD0C", VA = "0xF5CD0C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000DC4")]
		[Address(RVA = "0xF5CE38", Offset = "0xF5CE38", VA = "0xF5CE38")]
		public TwoHandedProp()
		{
		}
	}
	[Token(Token = "0x200025D")]
	public class UserControlInteractions : UserControlThirdPerson
	{
		[Token(Token = "0x400108F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public CharacterThirdPerson character;

		[Token(Token = "0x4001090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x4001091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool disableInputInInteraction;

		[Token(Token = "0x4001092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float enableInputAtProgress;

		[Token(Token = "0x6000DC5")]
		[Address(RVA = "0xF5CE4C", Offset = "0xF5CE4C", VA = "0xF5CE4C", Slot = "5")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000DC6")]
		[Address(RVA = "0xF5D2A4", Offset = "0xF5D2A4", VA = "0xF5D2A4")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000DC7")]
		[Address(RVA = "0xF5D46C", Offset = "0xF5D46C", VA = "0xF5D46C")]
		public UserControlInteractions()
		{
		}
	}
	[Token(Token = "0x200025E")]
	public class GrounderDemo : MonoBehaviour
	{
		[Token(Token = "0x4001093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] characters;

		[Token(Token = "0x6000DC8")]
		[Address(RVA = "0xF5D4A0", Offset = "0xF5D4A0", VA = "0xF5D4A0")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000DC9")]
		[Address(RVA = "0xF5D6A8", Offset = "0xF5D6A8", VA = "0xF5D6A8")]
		public void Activate(int index)
		{
		}

		[Token(Token = "0x6000DCA")]
		[Address(RVA = "0xF5D714", Offset = "0xF5D714", VA = "0xF5D714")]
		public GrounderDemo()
		{
		}
	}
	[Token(Token = "0x200025F")]
	public class PlatformRotator : MonoBehaviour
	{
		[Token(Token = "0x2000260")]
		[CompilerGenerated]
		private sealed class <SwitchRotation>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40010A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40010A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40010A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlatformRotator <>4__this;

			[Token(Token = "0x17000137")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000DD4")]
				[Address(RVA = "0xF5DE84", Offset = "0xF5DE84", VA = "0xF5DE84", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000138")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000DD6")]
				[Address(RVA = "0xF5DECC", Offset = "0xF5DECC", VA = "0xF5DECC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000DD1")]
			[Address(RVA = "0xF5DB0C", Offset = "0xF5DB0C", VA = "0xF5DB0C")]
			[DebuggerHidden]
			public <SwitchRotation>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6000DD2")]
			[Address(RVA = "0xF5DCFC", Offset = "0xF5DCFC", VA = "0xF5DCFC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000DD3")]
			[Address(RVA = "0xF5DD00", Offset = "0xF5DD00", VA = "0xF5DD00", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000DD5")]
			[Address(RVA = "0xF5DE8C", Offset = "0xF5DE8C", VA = "0xF5DE8C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxAngle;

		[Token(Token = "0x4001095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float switchRotationTime;

		[Token(Token = "0x4001096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float random;

		[Token(Token = "0x4001097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float rotationSpeed;

		[Token(Token = "0x4001098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 movePosition;

		[Token(Token = "0x4001099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float moveSpeed;

		[Token(Token = "0x400109A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int characterLayer;

		[Token(Token = "0x400109B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion defaultRotation;

		[Token(Token = "0x400109C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion targetRotation;

		[Token(Token = "0x400109D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 targetPosition;

		[Token(Token = "0x400109E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 velocity;

		[Token(Token = "0x400109F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Rigidbody r;

		[Token(Token = "0x6000DCB")]
		[Address(RVA = "0xF5D71C", Offset = "0xF5D71C", VA = "0xF5D71C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DCC")]
		[Address(RVA = "0xF5D858", Offset = "0xF5D858", VA = "0xF5D858")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000DCD")]
		[Address(RVA = "0xF5D7E4", Offset = "0xF5D7E4", VA = "0xF5D7E4")]
		[IteratorStateMachine(typeof(<SwitchRotation>d__14))]
		private IEnumerator SwitchRotation()
		{
			return null;
		}

		[Token(Token = "0x6000DCE")]
		[Address(RVA = "0xF5DB34", Offset = "0xF5DB34", VA = "0xF5DB34")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000DCF")]
		[Address(RVA = "0xF5DC0C", Offset = "0xF5DC0C", VA = "0xF5DC0C")]
		private void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x6000DD0")]
		[Address(RVA = "0xF5DCE0", Offset = "0xF5DCE0", VA = "0xF5DCE0")]
		public PlatformRotator()
		{
		}
	}
	[Token(Token = "0x2000261")]
	public class BendGoal : MonoBehaviour
	{
		[Token(Token = "0x40010A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LimbIK limbIK;

		[Token(Token = "0x40010A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x6000DD7")]
		[Address(RVA = "0xF5DED4", Offset = "0xF5DED4", VA = "0xF5DED4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DD8")]
		[Address(RVA = "0xF5DF3C", Offset = "0xF5DF3C", VA = "0xF5DF3C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000DD9")]
		[Address(RVA = "0xF5DFE8", Offset = "0xF5DFE8", VA = "0xF5DFE8")]
		public BendGoal()
		{
		}
	}
	[Token(Token = "0x2000262")]
	public class Turret : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000263")]
		public class Part
		{
			[Token(Token = "0x40010A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x40010A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private RotationLimit rotationLimit;

			[Token(Token = "0x6000DDC")]
			[Address(RVA = "0xF5E05C", Offset = "0xF5E05C", VA = "0xF5E05C")]
			public void AimAt(Transform target)
			{
			}

			[Token(Token = "0x6000DDD")]
			[Address(RVA = "0xF5E198", Offset = "0xF5E198", VA = "0xF5E198")]
			public Part()
			{
			}
		}

		[Token(Token = "0x40010A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x40010A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Part[] parts;

		[Token(Token = "0x6000DDA")]
		[Address(RVA = "0xF5DFF8", Offset = "0xF5DFF8", VA = "0xF5DFF8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DDB")]
		[Address(RVA = "0xF5E190", Offset = "0xF5E190", VA = "0xF5E190")]
		public Turret()
		{
		}
	}
	[Token(Token = "0x2000264")]
	public class HitReactionVRIKTrigger : MonoBehaviour
	{
		[Token(Token = "0x40010A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HitReactionVRIK hitReaction;

		[Token(Token = "0x40010AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float hitForce;

		[Token(Token = "0x40010AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string colliderName;

		[Token(Token = "0x6000DDE")]
		[Address(RVA = "0xF5E1A0", Offset = "0xF5E1A0", VA = "0xF5E1A0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DDF")]
		[Address(RVA = "0xF5E2F0", Offset = "0xF5E2F0", VA = "0xF5E2F0")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000DE0")]
		[Address(RVA = "0xF5E454", Offset = "0xF5E454", VA = "0xF5E454")]
		public HitReactionVRIKTrigger()
		{
		}
	}
	[Token(Token = "0x2000265")]
	public class VRController : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000266")]
		public enum InputMode
		{
			[Token(Token = "0x40010B6")]
			Input,
			[Token(Token = "0x40010B7")]
			WASDOnly
		}

		[Token(Token = "0x40010AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InputMode inputMode;

		[Token(Token = "0x40010AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRIK ik;

		[Token(Token = "0x40010AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform centerEyeAnchor;

		[Token(Token = "0x40010AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float walkSpeed;

		[Token(Token = "0x40010B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float runSpeed;

		[Token(Token = "0x40010B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float walkForwardSpeedMlp;

		[Token(Token = "0x40010B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float runForwardSpeedMlp;

		[Token(Token = "0x40010B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 smoothInput;

		[Token(Token = "0x40010B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 smoothInputV;

		[Token(Token = "0x6000DE1")]
		[Address(RVA = "0xF5E464", Offset = "0xF5E464", VA = "0xF5E464")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DE2")]
		[Address(RVA = "0xF5E658", Offset = "0xF5E658", VA = "0xF5E658")]
		private Vector3 GetInput()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DE3")]
		[Address(RVA = "0xF5E9A0", Offset = "0xF5E9A0", VA = "0xF5E9A0")]
		public VRController()
		{
		}
	}
	[Token(Token = "0x2000267")]
	public class VRIKCalibrationBasic : MonoBehaviour
	{
		[Token(Token = "0x40010B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The VRIK component.")]
		public VRIK ik;

		[Token(Token = "0x40010B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Head")]
		[Tooltip("HMD.")]
		public Transform centerEyeAnchor;

		[Token(Token = "0x40010BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Position offset of the camera from the head bone (root space).")]
		public Vector3 headAnchorPositionOffset;

		[Token(Token = "0x40010BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Rotation offset of the camera from the head bone (root space).")]
		public Vector3 headAnchorRotationOffset;

		[Token(Token = "0x40010BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Hands")]
		[Tooltip("Left Hand Controller")]
		public Transform leftHandAnchor;

		[Token(Token = "0x40010BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Right Hand Controller")]
		public Transform rightHandAnchor;

		[Token(Token = "0x40010BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Position offset of the hand controller from the hand bone (controller space).")]
		public Vector3 handAnchorPositionOffset;

		[Token(Token = "0x40010BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Rotation offset of the hand controller from the hand bone (controller space).")]
		public Vector3 handAnchorRotationOffset;

		[Token(Token = "0x40010C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Scale")]
		[Tooltip("Multiplies the scale of the root.")]
		public float scaleMlp;

		[Token(Token = "0x40010C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Data stored by Calibration")]
		public VRIKCalibrator.CalibrationData data;

		[Token(Token = "0x6000DE4")]
		[Address(RVA = "0xF5E9B4", Offset = "0xF5E9B4", VA = "0xF5E9B4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000DE5")]
		[Address(RVA = "0xF5EB48", Offset = "0xF5EB48", VA = "0xF5EB48")]
		public VRIKCalibrationBasic()
		{
		}
	}
	[Token(Token = "0x2000268")]
	public class VRIKCalibrationController : MonoBehaviour
	{
		[Token(Token = "0x40010C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Reference to the VRIK component on the avatar.")]
		public VRIK ik;

		[Token(Token = "0x40010C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The settings for VRIK calibration.")]
		public VRIKCalibrator.Settings settings;

		[Token(Token = "0x40010C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The HMD.")]
		public Transform headTracker;

		[Token(Token = "0x40010C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("(Optional) A tracker placed anywhere on the body of the player, preferrably close to the pelvis, on the belt area.")]
		public Transform bodyTracker;

		[Token(Token = "0x40010C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("(Optional) A tracker or hand controller device placed anywhere on or in the player's left hand.")]
		public Transform leftHandTracker;

		[Token(Token = "0x40010C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("(Optional) A tracker or hand controller device placed anywhere on or in the player's right hand.")]
		public Transform rightHandTracker;

		[Token(Token = "0x40010C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("(Optional) A tracker placed anywhere on the ankle or toes of the player's left leg.")]
		public Transform leftFootTracker;

		[Token(Token = "0x40010C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("(Optional) A tracker placed anywhere on the ankle or toes of the player's right leg.")]
		public Transform rightFootTracker;

		[Token(Token = "0x40010CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Data stored by Calibration")]
		public VRIKCalibrator.CalibrationData data;

		[Token(Token = "0x6000DE6")]
		[Address(RVA = "0xF5EBC4", Offset = "0xF5EBC4", VA = "0xF5EBC4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0xF5ED28", Offset = "0xF5ED28", VA = "0xF5ED28")]
		public VRIKCalibrationController()
		{
		}
	}
	[Token(Token = "0x2000269")]
	public class VRIKPlatform : MonoBehaviour
	{
		[Token(Token = "0x40010CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRIK ik;

		[Token(Token = "0x40010CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 lastPosition;

		[Token(Token = "0x40010CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion lastRotation;

		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0xF5ED9C", Offset = "0xF5ED9C", VA = "0xF5ED9C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0xF5EDEC", Offset = "0xF5EDEC", VA = "0xF5EDEC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0xF5EFC4", Offset = "0xF5EFC4", VA = "0xF5EFC4")]
		public VRIKPlatform()
		{
		}
	}
	[Token(Token = "0x200026A")]
	public class VRIKPlatformController : MonoBehaviour
	{
		[Token(Token = "0x40010CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRIK ik;

		[Token(Token = "0x40010CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform trackingSpace;

		[Token(Token = "0x40010D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform platform;

		[Token(Token = "0x40010D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool moveToPlatform;

		[Token(Token = "0x40010D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform lastPlatform;

		[Token(Token = "0x40010D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 lastPosition;

		[Token(Token = "0x40010D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion lastRotation;

		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0xF5F01C", Offset = "0xF5F01C", VA = "0xF5F01C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0xF5F54C", Offset = "0xF5F54C", VA = "0xF5F54C")]
		public VRIKPlatformController()
		{
		}
	}
	[Token(Token = "0x200026B")]
	public abstract class CharacterAnimationBase : MonoBehaviour
	{
		[Token(Token = "0x40010D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool smoothFollow;

		[Token(Token = "0x40010D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float smoothFollowSpeed;

		[Token(Token = "0x40010D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected bool animatePhysics;

		[Token(Token = "0x40010D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 lastPosition;

		[Token(Token = "0x40010D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 localPosition;

		[Token(Token = "0x40010DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion localRotation;

		[Token(Token = "0x40010DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion lastRotation;

		[Token(Token = "0x17000139")]
		public virtual bool animationGrounded
		{
			[Token(Token = "0x6000DEE")]
			[Address(RVA = "0xF5F5C8", Offset = "0xF5F5C8", VA = "0xF5F5C8", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000DED")]
		[Address(RVA = "0xF5F5A8", Offset = "0xF5F5A8", VA = "0xF5F5A8", Slot = "4")]
		public virtual Vector3 GetPivotPoint()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DEF")]
		[Address(RVA = "0xF5F5D0", Offset = "0xF5F5D0", VA = "0xF5F5D0")]
		public float GetAngleFromForward(Vector3 worldDirection)
		{
			return default(float);
		}

		[Token(Token = "0x6000DF0")]
		[Address(RVA = "0xF5F630", Offset = "0xF5F630", VA = "0xF5F630", Slot = "6")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000DF1")]
		[Address(RVA = "0xF5F7B4", Offset = "0xF5F7B4", VA = "0xF5F7B4", Slot = "7")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6000DF2")]
		[Address(RVA = "0xF5FA30", Offset = "0xF5FA30", VA = "0xF5FA30", Slot = "8")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000DF3")]
		[Address(RVA = "0xF5F7C4", Offset = "0xF5F7C4", VA = "0xF5F7C4")]
		private void SmoothFollow()
		{
		}

		[Token(Token = "0x6000DF4")]
		[Address(RVA = "0xF5FA40", Offset = "0xF5FA40", VA = "0xF5FA40")]
		protected CharacterAnimationBase()
		{
		}
	}
	[Token(Token = "0x200026C")]
	public class CharacterAnimationSimple : CharacterAnimationBase
	{
		[Token(Token = "0x40010DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public CharacterThirdPerson characterController;

		[Token(Token = "0x40010DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float pivotOffset;

		[Token(Token = "0x40010DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public AnimationCurve moveSpeed;

		[Token(Token = "0x40010DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Animator animator;

		[Token(Token = "0x6000DF5")]
		[Address(RVA = "0xF5FA58", Offset = "0xF5FA58", VA = "0xF5FA58", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000DF6")]
		[Address(RVA = "0xF5FAB8", Offset = "0xF5FAB8", VA = "0xF5FAB8", Slot = "4")]
		public override Vector3 GetPivotPoint()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0xF5FB48", Offset = "0xF5FB48", VA = "0xF5FB48")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0xF5FC6C", Offset = "0xF5FC6C", VA = "0xF5FC6C")]
		public CharacterAnimationSimple()
		{
		}
	}
	[Token(Token = "0x200026D")]
	public class CharacterAnimationThirdPerson : CharacterAnimationBase
	{
		[Token(Token = "0x40010E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public CharacterThirdPerson characterController;

		[Token(Token = "0x40010E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private float turnSensitivity;

		[Token(Token = "0x40010E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		private float turnSpeed;

		[Token(Token = "0x40010E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private float runCycleLegOffset;

		[Token(Token = "0x40010E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Range(0.1f, 3f)]
		[SerializeField]
		private float animSpeedMultiplier;

		[Token(Token = "0x40010E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Animator animator;

		[Token(Token = "0x40010E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 lastForward;

		[Token(Token = "0x40010E7")]
		private const string groundedDirectional = "Grounded Directional";

		[Token(Token = "0x40010E8")]
		private const string groundedStrafe = "Grounded Strafe";

		[Token(Token = "0x40010E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float deltaAngle;

		[Token(Token = "0x40010EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float jumpLeg;

		[Token(Token = "0x40010EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool lastJump;

		[Token(Token = "0x1700013A")]
		public override bool animationGrounded
		{
			[Token(Token = "0x6000DFB")]
			[Address(RVA = "0xF5FD28", Offset = "0xF5FD28", VA = "0xF5FD28", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000DF9")]
		[Address(RVA = "0xF5FC84", Offset = "0xF5FC84", VA = "0xF5FC84", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000DFA")]
		[Address(RVA = "0xF5FD0C", Offset = "0xF5FD0C", VA = "0xF5FD0C", Slot = "4")]
		public override Vector3 GetPivotPoint()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DFC")]
		[Address(RVA = "0xF5FE1C", Offset = "0xF5FE1C", VA = "0xF5FE1C", Slot = "9")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0xF6020C", Offset = "0xF6020C", VA = "0xF6020C")]
		private void OnAnimatorMove()
		{
		}

		[Token(Token = "0x6000DFE")]
		[Address(RVA = "0xF60450", Offset = "0xF60450", VA = "0xF60450")]
		public CharacterAnimationThirdPerson()
		{
		}
	}
	[Token(Token = "0x200026E")]
	public abstract class CharacterBase : MonoBehaviour
	{
		[Token(Token = "0x40010EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If specified, will use the direction from the character to this Transform as the gravity vector instead of Physics.gravity. Physics.gravity.magnitude will be used as the magnitude of the gravity vector.")]
		[Header("Base Parameters")]
		public Transform gravityTarget;

		[Token(Token = "0x40010ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Multiplies gravity applied to the character even if 'Individual Gravity' is unchecked.")]
		public float gravityMultiplier;

		[Token(Token = "0x40010EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float airborneThreshold;

		[Token(Token = "0x40010EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float slopeStartAngle;

		[Token(Token = "0x40010F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float slopeEndAngle;

		[Token(Token = "0x40010F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float spherecastRadius;

		[Token(Token = "0x40010F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public LayerMask groundLayers;

		[Token(Token = "0x40010F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PhysicMaterial zeroFrictionMaterial;

		[Token(Token = "0x40010F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private PhysicMaterial highFrictionMaterial;

		[Token(Token = "0x40010F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Rigidbody r;

		[Token(Token = "0x40010F6")]
		protected const float half = 0.5f;

		[Token(Token = "0x40010F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected float originalHeight;

		[Token(Token = "0x40010F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		protected Vector3 originalCenter;

		[Token(Token = "0x40010F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected CapsuleCollider capsule;

		[Token(Token = "0x6000DFF")]
		public abstract void Move(Vector3 deltaPosition, Quaternion deltaRotation);

		[Token(Token = "0x6000E00")]
		[Address(RVA = "0xF60474", Offset = "0xF60474", VA = "0xF60474")]
		protected Vector3 GetGravity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E01")]
		[Address(RVA = "0xF60660", Offset = "0xF60660", VA = "0xF60660", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000E02")]
		[Address(RVA = "0xF6088C", Offset = "0xF6088C", VA = "0xF6088C", Slot = "6")]
		protected virtual RaycastHit GetSpherecastHit()
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x6000E03")]
		[Address(RVA = "0xF60A2C", Offset = "0xF60A2C", VA = "0xF60A2C")]
		public float GetAngleFromForward(Vector3 worldDirection)
		{
			return default(float);
		}

		[Token(Token = "0x6000E04")]
		[Address(RVA = "0xF60A8C", Offset = "0xF60A8C", VA = "0xF60A8C")]
		protected void RigidbodyRotateAround(Vector3 point, Vector3 axis, float angle)
		{
		}

		[Token(Token = "0x6000E05")]
		[Address(RVA = "0xF60BF0", Offset = "0xF60BF0", VA = "0xF60BF0")]
		protected void ScaleCapsule(float mlp)
		{
		}

		[Token(Token = "0x6000E06")]
		[Address(RVA = "0xF60DF4", Offset = "0xF60DF4", VA = "0xF60DF4")]
		protected void HighFriction()
		{
		}

		[Token(Token = "0x6000E07")]
		[Address(RVA = "0xF60E18", Offset = "0xF60E18", VA = "0xF60E18")]
		protected void ZeroFriction()
		{
		}

		[Token(Token = "0x6000E08")]
		[Address(RVA = "0xF60E3C", Offset = "0xF60E3C", VA = "0xF60E3C")]
		protected float GetSlopeDamper(Vector3 velocity, Vector3 groundNormal)
		{
			return default(float);
		}

		[Token(Token = "0x6000E09")]
		[Address(RVA = "0xF60F88", Offset = "0xF60F88", VA = "0xF60F88")]
		protected CharacterBase()
		{
		}
	}
	[Token(Token = "0x200026F")]
	public class CharacterThirdPerson : CharacterBase
	{
		[Serializable]
		[Token(Token = "0x2000270")]
		public enum MoveMode
		{
			[Token(Token = "0x4001135")]
			Directional,
			[Token(Token = "0x4001136")]
			Strafe
		}

		[Token(Token = "0x2000271")]
		public struct AnimState
		{
			[Token(Token = "0x4001137")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 moveDirection;

			[Token(Token = "0x4001138")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public bool jump;

			[Token(Token = "0x4001139")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
			public bool crouch;

			[Token(Token = "0x400113A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
			public bool onGround;

			[Token(Token = "0x400113B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF")]
			public bool isStrafing;

			[Token(Token = "0x400113C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float yVelocity;

			[Token(Token = "0x400113D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public bool doubleJump;
		}

		[Token(Token = "0x2000272")]
		[CompilerGenerated]
		private sealed class <JumpSmooth>d__79 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400113E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400113F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001140")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CharacterThirdPerson <>4__this;

			[Token(Token = "0x4001141")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 jumpVelocity;

			[Token(Token = "0x4001142")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private int <steps>5__2;

			[Token(Token = "0x4001143")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <stepsToTake>5__3;

			[Token(Token = "0x1700013D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E21")]
				[Address(RVA = "0xF63AA4", Offset = "0xF63AA4", VA = "0xF63AA4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700013E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E23")]
				[Address(RVA = "0xF63AEC", Offset = "0xF63AEC", VA = "0xF63AEC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E1E")]
			[Address(RVA = "0xF63864", Offset = "0xF63864", VA = "0xF63864")]
			[DebuggerHidden]
			public <JumpSmooth>d__79(int <>1__state)
			{
			}

			[Token(Token = "0x6000E1F")]
			[Address(RVA = "0xF639A0", Offset = "0xF639A0", VA = "0xF639A0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E20")]
			[Address(RVA = "0xF639A4", Offset = "0xF639A4", VA = "0xF639A4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E22")]
			[Address(RVA = "0xF63AAC", Offset = "0xF63AAC", VA = "0xF63AAC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40010FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("References")]
		public CharacterAnimationBase characterAnimation;

		[Token(Token = "0x40010FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UserControlThirdPerson userControl;

		[Token(Token = "0x40010FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public CameraController cam;

		[Token(Token = "0x40010FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Header("Movement")]
		public MoveMode moveMode;

		[Token(Token = "0x40010FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public bool smoothPhysics;

		[Token(Token = "0x40010FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float smoothAccelerationTime;

		[Token(Token = "0x4001100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float linearAccelerationSpeed;

		[Token(Token = "0x4001101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float platformFriction;

		[Token(Token = "0x4001102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float groundStickyEffect;

		[Token(Token = "0x4001103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float maxVerticalVelocityOnGround;

		[Token(Token = "0x4001104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float velocityToGroundTangentWeight;

		[Token(Token = "0x4001105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Header("Rotation")]
		public bool lookInCameraDirection;

		[Token(Token = "0x4001106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float turnSpeed;

		[Token(Token = "0x4001107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float stationaryTurnSpeedMlp;

		[Token(Token = "0x4001108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[Header("Jumping and Falling")]
		public bool smoothJump;

		[Token(Token = "0x4001109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float airSpeed;

		[Token(Token = "0x400110A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float airControl;

		[Token(Token = "0x400110B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float jumpPower;

		[Token(Token = "0x400110C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float jumpRepeatDelayTime;

		[Token(Token = "0x400110D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool doubleJumpEnabled;

		[Token(Token = "0x400110E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float doubleJumpPowerMlp;

		[Token(Token = "0x400110F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Header("Wall Running")]
		public LayerMask wallRunLayers;

		[Token(Token = "0x4001110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float wallRunMaxLength;

		[Token(Token = "0x4001111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public float wallRunMinMoveMag;

		[Token(Token = "0x4001112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public float wallRunMinVelocityY;

		[Token(Token = "0x4001113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public float wallRunRotationSpeed;

		[Token(Token = "0x4001114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public float wallRunMaxRotationAngle;

		[Token(Token = "0x4001115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public float wallRunWeightSpeed;

		[Token(Token = "0x4001116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[Header("Crouching")]
		public float crouchCapsuleScaleMlp;

		[Token(Token = "0x4001119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public AnimState animState;

		[Token(Token = "0x400111A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		protected Vector3 moveDirection;

		[Token(Token = "0x400111B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Animator animator;

		[Token(Token = "0x400111C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Vector3 normal;

		[Token(Token = "0x400111D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private Vector3 platformVelocity;

		[Token(Token = "0x400111E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Vector3 platformAngularVelocity;

		[Token(Token = "0x400111F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private RaycastHit hit;

		[Token(Token = "0x4001120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private float jumpLeg;

		[Token(Token = "0x4001121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private float jumpEndTime;

		[Token(Token = "0x4001122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private float forwardMlp;

		[Token(Token = "0x4001123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		private float groundDistance;

		[Token(Token = "0x4001124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private float lastAirTime;

		[Token(Token = "0x4001125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		private float stickyForce;

		[Token(Token = "0x4001126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private Vector3 wallNormal;

		[Token(Token = "0x4001127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		private Vector3 moveDirectionVelocity;

		[Token(Token = "0x4001128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private float wallRunWeight;

		[Token(Token = "0x4001129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		private float lastWallRunWeight;

		[Token(Token = "0x400112A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private float fixedDeltaTime;

		[Token(Token = "0x400112B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		private Vector3 fixedDeltaPosition;

		[Token(Token = "0x400112C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private Quaternion fixedDeltaRotation;

		[Token(Token = "0x400112D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private bool fixedFrame;

		[Token(Token = "0x400112E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		private float wallRunEndTime;

		[Token(Token = "0x400112F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private Vector3 gravity;

		[Token(Token = "0x4001130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		private Vector3 verticalVelocity;

		[Token(Token = "0x4001131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private float velocityY;

		[Token(Token = "0x4001132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		private bool doubleJumped;

		[Token(Token = "0x4001133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E5")]
		private bool jumpReleased;

		[Token(Token = "0x1700013B")]
		public bool fullRootMotion
		{
			[Token(Token = "0x6000E0A")]
			[Address(RVA = "0xF60FA8", Offset = "0xF60FA8", VA = "0xF60FA8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E0B")]
			[Address(RVA = "0xF60FB0", Offset = "0xF60FB0", VA = "0xF60FB0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700013C")]
		public bool onGround
		{
			[Token(Token = "0x6000E0C")]
			[Address(RVA = "0xF60FBC", Offset = "0xF60FBC", VA = "0xF60FBC")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E0D")]
			[Address(RVA = "0xF60FC4", Offset = "0xF60FC4", VA = "0xF60FC4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000E0E")]
		[Address(RVA = "0xF60FD0", Offset = "0xF60FD0", VA = "0xF60FD0", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000E0F")]
		[Address(RVA = "0xF611BC", Offset = "0xF611BC", VA = "0xF611BC")]
		private void OnAnimatorMove()
		{
		}

		[Token(Token = "0x6000E10")]
		[Address(RVA = "0xF61240", Offset = "0xF61240", VA = "0xF61240", Slot = "4")]
		public override void Move(Vector3 deltaPosition, Quaternion deltaRotation)
		{
		}

		[Token(Token = "0x6000E11")]
		[Address(RVA = "0xF61354", Offset = "0xF61354", VA = "0xF61354")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000E12")]
		[Address(RVA = "0xF623E8", Offset = "0xF623E8", VA = "0xF623E8", Slot = "7")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000E13")]
		[Address(RVA = "0xF62878", Offset = "0xF62878", VA = "0xF62878", Slot = "8")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6000E14")]
		[Address(RVA = "0xF61A48", Offset = "0xF61A48", VA = "0xF61A48")]
		private void MoveFixed(Vector3 deltaPosition)
		{
		}

		[Token(Token = "0x6000E15")]
		[Address(RVA = "0xF62950", Offset = "0xF62950", VA = "0xF62950")]
		private void WallRun()
		{
		}

		[Token(Token = "0x6000E16")]
		[Address(RVA = "0xF62FD8", Offset = "0xF62FD8", VA = "0xF62FD8")]
		private bool CanWallRun()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E17")]
		[Address(RVA = "0xF62474", Offset = "0xF62474", VA = "0xF62474")]
		private Vector3 GetMoveDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E18")]
		[Address(RVA = "0xF630D0", Offset = "0xF630D0", VA = "0xF630D0", Slot = "9")]
		protected virtual void Rotate()
		{
		}

		[Token(Token = "0x6000E19")]
		[Address(RVA = "0xF63550", Offset = "0xF63550", VA = "0xF63550")]
		private Vector3 GetForwardDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E1A")]
		[Address(RVA = "0xF63678", Offset = "0xF63678", VA = "0xF63678", Slot = "10")]
		protected virtual bool Jump()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E1B")]
		[Address(RVA = "0xF637CC", Offset = "0xF637CC", VA = "0xF637CC")]
		[IteratorStateMachine(typeof(<JumpSmooth>d__79))]
		private IEnumerator JumpSmooth(Vector3 jumpVelocity)
		{
			return null;
		}

		[Token(Token = "0x6000E1C")]
		[Address(RVA = "0xF61E7C", Offset = "0xF61E7C", VA = "0xF61E7C")]
		private void GroundCheck()
		{
		}

		[Token(Token = "0x6000E1D")]
		[Address(RVA = "0xF6388C", Offset = "0xF6388C", VA = "0xF6388C")]
		public CharacterThirdPerson()
		{
		}
	}
	[Token(Token = "0x2000273")]
	public class SimpleLocomotion : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000274")]
		public enum RotationMode
		{
			[Token(Token = "0x4001152")]
			Smooth,
			[Token(Token = "0x4001153")]
			Linear
		}

		[Token(Token = "0x4001144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The component that updates the camera.")]
		public CameraController cameraController;

		[Token(Token = "0x4001145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Acceleration of movement.")]
		public float accelerationTime;

		[Token(Token = "0x4001146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Turning speed.")]
		public float turnTime;

		[Token(Token = "0x4001147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If true, will run on left shift, if not will walk on left shift.")]
		public bool walkByDefault;

		[Token(Token = "0x4001148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Smooth or linear rotation.")]
		public RotationMode rotationMode;

		[Token(Token = "0x4001149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Procedural motion speed (if not using root motion).")]
		public float moveSpeed;

		[Token(Token = "0x400114B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Animator animator;

		[Token(Token = "0x400114C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float speed;

		[Token(Token = "0x400114D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float angleVel;

		[Token(Token = "0x400114E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float speedVel;

		[Token(Token = "0x400114F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 linearTargetDirection;

		[Token(Token = "0x4001150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private CharacterController characterController;

		[Token(Token = "0x1700013F")]
		public bool isGrounded
		{
			[Token(Token = "0x6000E24")]
			[Address(RVA = "0xF63AF4", Offset = "0xF63AF4", VA = "0xF63AF4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E25")]
			[Address(RVA = "0xF63AFC", Offset = "0xF63AFC", VA = "0xF63AFC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000E26")]
		[Address(RVA = "0xF63B08", Offset = "0xF63B08", VA = "0xF63B08")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E27")]
		[Address(RVA = "0xF63BB0", Offset = "0xF63BB0", VA = "0xF63BB0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E28")]
		[Address(RVA = "0xF641C8", Offset = "0xF641C8", VA = "0xF641C8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000E29")]
		[Address(RVA = "0xF63BF8", Offset = "0xF63BF8", VA = "0xF63BF8")]
		private void Rotate()
		{
		}

		[Token(Token = "0x6000E2A")]
		[Address(RVA = "0xF63F60", Offset = "0xF63F60", VA = "0xF63F60")]
		private void Move()
		{
		}

		[Token(Token = "0x6000E2B")]
		[Address(RVA = "0xF641F8", Offset = "0xF641F8", VA = "0xF641F8")]
		private Vector3 GetInputVector()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0xF64290", Offset = "0xF64290", VA = "0xF64290")]
		private Vector3 GetInputVectorRaw()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E2D")]
		[Address(RVA = "0xF64310", Offset = "0xF64310", VA = "0xF64310")]
		public SimpleLocomotion()
		{
		}
	}
	[Token(Token = "0x2000275")]
	public class UserControlAI : UserControlThirdPerson
	{
		[Token(Token = "0x4001154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform moveTarget;

		[Token(Token = "0x4001155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float stoppingDistance;

		[Token(Token = "0x4001156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float stoppingThreshold;

		[Token(Token = "0x4001157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Navigator navigator;

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0xF64338", Offset = "0xF64338", VA = "0xF64338", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0xF64480", Offset = "0xF64480", VA = "0xF64480", Slot = "5")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000E30")]
		[Address(RVA = "0xF64AF8", Offset = "0xF64AF8", VA = "0xF64AF8")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000E31")]
		[Address(RVA = "0xF64CE4", Offset = "0xF64CE4", VA = "0xF64CE4")]
		public UserControlAI()
		{
		}
	}
	[Token(Token = "0x2000276")]
	public class UserControlThirdPerson : MonoBehaviour
	{
		[Token(Token = "0x2000277")]
		public struct State
		{
			[Token(Token = "0x400115D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 move;

			[Token(Token = "0x400115E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 lookPos;

			[Token(Token = "0x400115F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool crouch;

			[Token(Token = "0x4001160")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
			public bool jump;

			[Token(Token = "0x4001161")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int actionIndex;
		}

		[Token(Token = "0x4001158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool walkByDefault;

		[Token(Token = "0x4001159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool canCrouch;

		[Token(Token = "0x400115A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool canJump;

		[Token(Token = "0x400115B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public State state;

		[Token(Token = "0x400115C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Transform cam;

		[Token(Token = "0x6000E32")]
		[Address(RVA = "0xF64374", Offset = "0xF64374", VA = "0xF64374", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000E33")]
		[Address(RVA = "0xF5CF60", Offset = "0xF5CF60", VA = "0xF5CF60", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000E34")]
		[Address(RVA = "0xF5D490", Offset = "0xF5D490", VA = "0xF5D490")]
		public UserControlThirdPerson()
		{
		}
	}
	[Token(Token = "0x2000278")]
	public class ApplicationQuit : MonoBehaviour
	{
		[Token(Token = "0x6000E35")]
		[Address(RVA = "0xF64D00", Offset = "0xF64D00", VA = "0xF64D00")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E36")]
		[Address(RVA = "0xF64D38", Offset = "0xF64D38", VA = "0xF64D38")]
		public ApplicationQuit()
		{
		}
	}
	[Token(Token = "0x2000279")]
	public class SlowMo : MonoBehaviour
	{
		[Token(Token = "0x4001162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public KeyCode[] keyCodes;

		[Token(Token = "0x4001163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool mouse0;

		[Token(Token = "0x4001164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool mouse1;

		[Token(Token = "0x4001165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float slowMoTimeScale;

		[Token(Token = "0x6000E37")]
		[Address(RVA = "0xF64D40", Offset = "0xF64D40", VA = "0xF64D40")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E38")]
		[Address(RVA = "0xF64D68", Offset = "0xF64D68", VA = "0xF64D68")]
		private bool IsSlowMotion()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E39")]
		[Address(RVA = "0xF64E0C", Offset = "0xF64E0C", VA = "0xF64E0C")]
		public SlowMo()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200027A")]
	public class Navigator
	{
		[Token(Token = "0x200027B")]
		public enum State
		{
			[Token(Token = "0x4001175")]
			Idle,
			[Token(Token = "0x4001176")]
			Seeking,
			[Token(Token = "0x4001177")]
			OnPath
		}

		[Token(Token = "0x4001166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("Should this Navigator be actively seeking a path.")]
		public bool activeTargetSeeking;

		[Token(Token = "0x4001167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Tooltip("Increase this value if the character starts running in a circle, not able to reach the corner because of a too large turning radius.")]
		public float cornerRadius;

		[Token(Token = "0x4001168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Recalculate path if target position has moved by this distance from the position it was at when the path was originally calculated")]
		public float recalculateOnPathDistance;

		[Token(Token = "0x4001169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Sample within this distance from sourcePosition.")]
		public float maxSampleDistance;

		[Token(Token = "0x400116A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Interval of updating the path")]
		public float nextPathInterval;

		[Token(Token = "0x400116D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform transform;

		[Token(Token = "0x400116E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int cornerIndex;

		[Token(Token = "0x400116F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3[] corners;

		[Token(Token = "0x4001170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private NavMeshPath path;

		[Token(Token = "0x4001171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 lastTargetPosition;

		[Token(Token = "0x4001172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool initiated;

		[Token(Token = "0x4001173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float nextPathTime;

		[Token(Token = "0x17000140")]
		public Vector3 normalizedDeltaPosition
		{
			[Token(Token = "0x6000E3A")]
			[Address(RVA = "0xF64E20", Offset = "0xF64E20", VA = "0xF64E20")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000E3B")]
			[Address(RVA = "0xF64E2C", Offset = "0xF64E2C", VA = "0xF64E2C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000141")]
		public State state
		{
			[Token(Token = "0x6000E3C")]
			[Address(RVA = "0xF64E38", Offset = "0xF64E38", VA = "0xF64E38")]
			[CompilerGenerated]
			get
			{
				return default(State);
			}
			[Token(Token = "0x6000E3D")]
			[Address(RVA = "0xF64E40", Offset = "0xF64E40", VA = "0xF64E40")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000E3E")]
		[Address(RVA = "0xF643A8", Offset = "0xF643A8", VA = "0xF643A8")]
		public void Initiate(Transform transform)
		{
		}

		[Token(Token = "0x6000E3F")]
		[Address(RVA = "0xF646A0", Offset = "0xF646A0", VA = "0xF646A0")]
		public void Update(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x6000E40")]
		[Address(RVA = "0xF64F20", Offset = "0xF64F20", VA = "0xF64F20")]
		private void CalculatePath(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x6000E41")]
		[Address(RVA = "0xF64F84", Offset = "0xF64F84", VA = "0xF64F84")]
		private bool Find(Vector3 targetPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E42")]
		[Address(RVA = "0xF64E48", Offset = "0xF64E48", VA = "0xF64E48")]
		private void Stop()
		{
		}

		[Token(Token = "0x6000E43")]
		[Address(RVA = "0xF64EA4", Offset = "0xF64EA4", VA = "0xF64EA4")]
		private float HorDistance(Vector3 p1, Vector3 p2)
		{
			return default(float);
		}

		[Token(Token = "0x6000E44")]
		[Address(RVA = "0xF64B20", Offset = "0xF64B20", VA = "0xF64B20")]
		public void Visualize()
		{
		}

		[Token(Token = "0x6000E45")]
		[Address(RVA = "0xF650B8", Offset = "0xF650B8", VA = "0xF650B8")]
		public Navigator()
		{
		}
	}
}
namespace RGBSchemes
{
	[Token(Token = "0x200027C")]
	[RequireComponent(typeof(AudioSource))]
	public class CollisionSound : MonoBehaviour
	{
		[Token(Token = "0x4001178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool RequireTags;

		[Token(Token = "0x4001179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<string> CollisionTags;

		[Token(Token = "0x400117A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AudioSource mAudioSource;

		[Token(Token = "0x6000E46")]
		[Address(RVA = "0xF65128", Offset = "0xF65128", VA = "0xF65128")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E47")]
		[Address(RVA = "0xF65180", Offset = "0xF65180", VA = "0xF65180")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000E48")]
		[Address(RVA = "0xF65220", Offset = "0xF65220", VA = "0xF65220")]
		public CollisionSound()
		{
		}
	}
	[Token(Token = "0x200027D")]
	public class AbsoluteHaptics : MonoBehaviour
	{
		[Token(Token = "0x400117B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<XRNode> XRNodes;

		[Token(Token = "0x400117C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HapticClip Haptic;

		[Token(Token = "0x400117D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool PlayOnAwake;

		[Token(Token = "0x400117E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool Loop;

		[Token(Token = "0x400117F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioSource SyncAudioSource;

		[Token(Token = "0x4001180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected int mSampleCopyIndex;

		[Token(Token = "0x4001181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected float mStartTime;

		[Token(Token = "0x4001182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected float mLastTime;

		[Token(Token = "0x4001183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected bool mPlaying;

		[Token(Token = "0x17000142")]
		public bool IsPlaying
		{
			[Token(Token = "0x6000E49")]
			[Address(RVA = "0xF652A8", Offset = "0xF652A8", VA = "0xF652A8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000E4A")]
		[Address(RVA = "0xF652B0", Offset = "0xF652B0", VA = "0xF652B0")]
		public void Play()
		{
		}

		[Token(Token = "0x6000E4B")]
		[Address(RVA = "0xF65310", Offset = "0xF65310", VA = "0xF65310")]
		public void Pause()
		{
		}

		[Token(Token = "0x6000E4C")]
		[Address(RVA = "0xF65318", Offset = "0xF65318", VA = "0xF65318")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000E4D")]
		[Address(RVA = "0xF65328", Offset = "0xF65328", VA = "0xF65328")]
		private void SendHapticData(HapticSamples samples)
		{
		}

		[Token(Token = "0x6000E4E")]
		[Address(RVA = "0xF657F8", Offset = "0xF657F8", VA = "0xF657F8")]
		protected void PlayHapticPiece(HapticSamples hapticSamples, int sampleLength)
		{
		}

		[Token(Token = "0x6000E4F")]
		[Address(RVA = "0xF65B70", Offset = "0xF65B70", VA = "0xF65B70")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E50")]
		[Address(RVA = "0xF65E48", Offset = "0xF65E48", VA = "0xF65E48")]
		protected void Update()
		{
		}

		[Token(Token = "0x6000E51")]
		[Address(RVA = "0xF66308", Offset = "0xF66308", VA = "0xF66308")]
		public AbsoluteHaptics()
		{
		}
	}
	[Token(Token = "0x200027E")]
	public class ButtonClickHaptics : InputHapticsBase
	{
		[Token(Token = "0x200027F")]
		public enum ButtonType
		{
			[Token(Token = "0x4001187")]
			PrimaryButton,
			[Token(Token = "0x4001188")]
			PrimaryTouch,
			[Token(Token = "0x4001189")]
			SecondaryButton,
			[Token(Token = "0x400118A")]
			SecondaryTouch,
			[Token(Token = "0x400118B")]
			GripButton,
			[Token(Token = "0x400118C")]
			TriggerButton,
			[Token(Token = "0x400118D")]
			MenuButton,
			[Token(Token = "0x400118E")]
			Primary2DAxisClick,
			[Token(Token = "0x400118F")]
			Primary2DAxisTouch
		}

		[Token(Token = "0x4001184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly InputFeatureUsage<bool>[] BUTTON_MAPPINGS;

		[Token(Token = "0x4001185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public ButtonType Button;

		[Token(Token = "0x6000E52")]
		[Address(RVA = "0xF66494", Offset = "0xF66494", VA = "0xF66494")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E53")]
		[Address(RVA = "0xF66630", Offset = "0xF66630", VA = "0xF66630")]
		public ButtonClickHaptics()
		{
		}
	}
	[Token(Token = "0x2000280")]
	public class SingleAxisClickHaptics : InputHapticsBase
	{
		[Token(Token = "0x2000281")]
		public enum AxisType
		{
			[Token(Token = "0x4001194")]
			Trigger,
			[Token(Token = "0x4001195")]
			Grip
		}

		[Token(Token = "0x4001190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly InputFeatureUsage<float>[] TRIGGER_MAPPINGS;

		[Token(Token = "0x4001191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public AxisType Axis;

		[Token(Token = "0x4001192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0f, 1f)]
		public float Threshold;

		[Token(Token = "0x6000E55")]
		[Address(RVA = "0xF66918", Offset = "0xF66918", VA = "0xF66918")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E56")]
		[Address(RVA = "0xF669D0", Offset = "0xF669D0", VA = "0xF669D0")]
		public SingleAxisClickHaptics()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000282")]
	public class HapticClip
	{
		[Token(Token = "0x2000283")]
		public enum Type
		{
			[Token(Token = "0x400119E")]
			Waveform,
			[Token(Token = "0x400119F")]
			Audio
		}

		[Token(Token = "0x4001196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Type ClipType;

		[Token(Token = "0x4001197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool LoadOnSeparateThread;

		[Token(Token = "0x4001198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AudioClip HapticAudioClip;

		[Token(Token = "0x4001199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private WaveformHapticCurve WaveformHapticCurve;

		[Token(Token = "0x400119A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private byte[] mHapticData;

		[Token(Token = "0x400119B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool mHaveCachedSamples;

		[Token(Token = "0x400119C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private HapticSamples mHapticSamples;

		[Token(Token = "0x17000143")]
		public HapticSamples Samples
		{
			[Token(Token = "0x6000E5C")]
			[Address(RVA = "0xF66130", Offset = "0xF66130", VA = "0xF66130")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E58")]
		[Address(RVA = "0xF66AD8", Offset = "0xF66AD8", VA = "0xF66AD8")]
		public void SetHapticSource(AudioClip clip)
		{
		}

		[Token(Token = "0x6000E59")]
		[Address(RVA = "0xF66B00", Offset = "0xF66B00", VA = "0xF66B00")]
		public void SetHapticSource(WaveformHapticCurve curve)
		{
		}

		[Token(Token = "0x6000E5A")]
		[Address(RVA = "0xF66B24", Offset = "0xF66B24", VA = "0xF66B24")]
		public HapticClip()
		{
		}

		[Token(Token = "0x6000E5B")]
		[Address(RVA = "0xF663D4", Offset = "0xF663D4", VA = "0xF663D4")]
		public HapticClip(float defaultWaveformTime = 1f, float defaultWaveformValue = 0.25f)
		{
		}

		[Token(Token = "0x6000E5D")]
		[Address(RVA = "0xF65BA4", Offset = "0xF65BA4", VA = "0xF65BA4")]
		public void GenerateClip()
		{
		}
	}
	[Token(Token = "0x2000284")]
	public abstract class HapticsAbstractClass : MonoBehaviour
	{
		[Token(Token = "0x40011A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static readonly System.Random RANDOM;

		[Token(Token = "0x40011A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected int eventID;

		[Token(Token = "0x6000E5E")]
		[Address(RVA = "0xF66F50", Offset = "0xF66F50", VA = "0xF66F50", Slot = "4")]
		protected virtual void DoRumble(int id, HapticSamples hapticSamples, bool mix = false)
		{
		}

		[Token(Token = "0x6000E5F")]
		[Address(RVA = "0xF66F58", Offset = "0xF66F58", VA = "0xF66F58")]
		public void transmitRumble(int id, HapticSamples hapticSamples, GameObject sendingObject, bool mix = false)
		{
		}

		[Token(Token = "0x6000E60")]
		[Address(RVA = "0xF66F7C", Offset = "0xF66F7C", VA = "0xF66F7C")]
		protected HapticsAbstractClass()
		{
		}
	}
	[Token(Token = "0x2000285")]
	public class HapticSamples
	{
		[Token(Token = "0x40011A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Thread mThread;

		[Token(Token = "0x40011A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private byte[] mSamples;

		[Token(Token = "0x40011A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int mLength;

		[Token(Token = "0x17000144")]
		public int Length
		{
			[Token(Token = "0x6000E62")]
			[Address(RVA = "0xF65A8C", Offset = "0xF65A8C", VA = "0xF65A8C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000E63")]
			[Address(RVA = "0xF67010", Offset = "0xF67010", VA = "0xF67010")]
			private set
			{
			}
		}

		[Token(Token = "0x17000145")]
		public byte[] Samples
		{
			[Token(Token = "0x6000E64")]
			[Address(RVA = "0xF65ABC", Offset = "0xF65ABC", VA = "0xF65ABC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E65")]
			[Address(RVA = "0xF67018", Offset = "0xF67018", VA = "0xF67018")]
			private set
			{
			}
		}

		[Token(Token = "0x6000E66")]
		[Address(RVA = "0xF66E60", Offset = "0xF66E60", VA = "0xF66E60")]
		public HapticSamples()
		{
		}

		[Token(Token = "0x6000E67")]
		[Address(RVA = "0xF65B28", Offset = "0xF65B28", VA = "0xF65B28")]
		public HapticSamples(byte[] samples, int samplesCount)
		{
		}

		[Token(Token = "0x6000E68")]
		[Address(RVA = "0xF66C30", Offset = "0xF66C30", VA = "0xF66C30")]
		public HapticSamples(AudioClip audioClip, bool loadSeparateThread = false, int channel = 0)
		{
		}

		[Token(Token = "0x6000E69")]
		[Address(RVA = "0xF67028", Offset = "0xF67028", VA = "0xF67028")]
		private void LoadAudio(int channelCount, float[] audioData, float frequency, int channel, uint controllerSampleRate)
		{
		}
	}
	[Token(Token = "0x2000287")]
	public class InputHapticsBase : MonoBehaviour
	{
		[Token(Token = "0x40011AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public XRNode DeviceNode;

		[Token(Token = "0x40011AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HapticClip ClickDownHaptic;

		[Token(Token = "0x40011AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HapticClip ClickUpHaptic;

		[Token(Token = "0x40011AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected InputDevice mInputDevice;

		[Token(Token = "0x40011AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected bool mPreviousState;

		[Token(Token = "0x6000E6C")]
		[Address(RVA = "0xF67280", Offset = "0xF67280", VA = "0xF67280")]
		protected void Awake()
		{
		}

		[Token(Token = "0x6000E6D")]
		[Address(RVA = "0xF672A8", Offset = "0xF672A8", VA = "0xF672A8")]
		protected void Start()
		{
		}

		[Token(Token = "0x6000E6E")]
		[Address(RVA = "0xF66540", Offset = "0xF66540", VA = "0xF66540")]
		protected void TriggerInputHaptic(bool trigger)
		{
		}

		[Token(Token = "0x6000E6F")]
		[Address(RVA = "0xF66634", Offset = "0xF66634", VA = "0xF66634")]
		public InputHapticsBase()
		{
		}
	}
	[Token(Token = "0x2000288")]
	public class StandardHapticsBase : HapticsAbstractClass
	{
		[Token(Token = "0x40011B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HapticClip Haptic;

		[Token(Token = "0x40011B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool Loop;

		[Token(Token = "0x40011B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioSource SyncAudioSource;

		[Token(Token = "0x40011B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected int mSampleCopyIndex;

		[Token(Token = "0x40011B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected float mStartTime;

		[Token(Token = "0x40011B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected float mLastTime;

		[Token(Token = "0x40011B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected bool mPlaying;

		[Token(Token = "0x40011B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected HashSet<HapticsAbstractClass> mHapticNodes;

		[Token(Token = "0x6000E70")]
		[Address(RVA = "0xF673C0", Offset = "0xF673C0", VA = "0xF673C0")]
		protected void Play()
		{
		}

		[Token(Token = "0x6000E71")]
		[Address(RVA = "0xF67420", Offset = "0xF67420", VA = "0xF67420")]
		protected void Stop()
		{
		}

		[Token(Token = "0x6000E72")]
		[Address(RVA = "0xF67430", Offset = "0xF67430", VA = "0xF67430", Slot = "4")]
		protected override void DoRumble(int id, HapticSamples hapticSamples, bool mix = false)
		{
		}

		[Token(Token = "0x6000E73")]
		[Address(RVA = "0xF67704", Offset = "0xF67704", VA = "0xF67704")]
		protected void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000E74")]
		[Address(RVA = "0xF677D8", Offset = "0xF677D8", VA = "0xF677D8")]
		protected void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000E75")]
		[Address(RVA = "0xF678AC", Offset = "0xF678AC", VA = "0xF678AC")]
		protected void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000E76")]
		[Address(RVA = "0xF679C4", Offset = "0xF679C4", VA = "0xF679C4")]
		protected void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x6000E77")]
		[Address(RVA = "0xF67ADC", Offset = "0xF67ADC", VA = "0xF67ADC")]
		protected void playHapticPiece(HapticSamples hapticSamples, int sampleLength)
		{
		}

		[Token(Token = "0x6000E78")]
		[Address(RVA = "0xF67E14", Offset = "0xF67E14", VA = "0xF67E14")]
		protected void Awake()
		{
		}

		[Token(Token = "0x6000E79")]
		[Address(RVA = "0xF67E2C", Offset = "0xF67E2C", VA = "0xF67E2C")]
		protected void Update()
		{
		}

		[Token(Token = "0x6000E7A")]
		[Address(RVA = "0xF68114", Offset = "0xF68114", VA = "0xF68114")]
		public StandardHapticsBase()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200028A")]
	public class WaveformHapticCurve
	{
		[Token(Token = "0x40011BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float Time;

		[Token(Token = "0x40011BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve HapticCurve;

		[Token(Token = "0x17000146")]
		public int FrameCount
		{
			[Token(Token = "0x6000E7F")]
			[Address(RVA = "0xF66ECC", Offset = "0xF66ECC", VA = "0xF66ECC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000E7E")]
		[Address(RVA = "0xF66B9C", Offset = "0xF66B9C", VA = "0xF66B9C")]
		public WaveformHapticCurve(float time, float value)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200028B")]
	public class CollisionHaptics : StandardHapticsBase
	{
		[Token(Token = "0x40011BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool TransferImmediate;

		[Token(Token = "0x6000E80")]
		[Address(RVA = "0xF682E0", Offset = "0xF682E0", VA = "0xF682E0")]
		private new void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000E81")]
		[Address(RVA = "0xF68478", Offset = "0xF68478", VA = "0xF68478")]
		public CollisionHaptics()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200028C")]
	public class ContinuousHaptics : StandardHapticsBase
	{
		[Token(Token = "0x40011BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool PlayOnAwake;

		[Token(Token = "0x6000E82")]
		[Address(RVA = "0xF6847C", Offset = "0xF6847C", VA = "0xF6847C")]
		public new void Play()
		{
		}

		[Token(Token = "0x6000E83")]
		[Address(RVA = "0xF68480", Offset = "0xF68480", VA = "0xF68480")]
		public void Pause()
		{
		}

		[Token(Token = "0x6000E84")]
		[Address(RVA = "0xF68488", Offset = "0xF68488", VA = "0xF68488")]
		public new void Stop()
		{
		}

		[Token(Token = "0x6000E85")]
		[Address(RVA = "0xF68498", Offset = "0xF68498", VA = "0xF68498")]
		private new void Awake()
		{
		}

		[Token(Token = "0x6000E86")]
		[Address(RVA = "0xF68530", Offset = "0xF68530", VA = "0xF68530")]
		public ContinuousHaptics()
		{
		}
	}
	[Token(Token = "0x200028D")]
	public class XRNodeHaptics : HapticsAbstractClass
	{
		[Token(Token = "0x40011BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public XRNode deviceNode;

		[Token(Token = "0x40011BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool DisableHaptics;

		[Token(Token = "0x6000E87")]
		[Address(RVA = "0xF68534", Offset = "0xF68534", VA = "0xF68534", Slot = "4")]
		protected override void DoRumble(int id, HapticSamples hapticSamples, bool mix = false)
		{
		}

		[Token(Token = "0x6000E88")]
		[Address(RVA = "0xF685C0", Offset = "0xF685C0", VA = "0xF685C0")]
		public void SetHapticsEnabled(bool enabled)
		{
		}

		[Token(Token = "0x6000E89")]
		[Address(RVA = "0xF685D0", Offset = "0xF685D0", VA = "0xF685D0")]
		public XRNodeHaptics()
		{
		}
	}
	[Token(Token = "0x200028E")]
	public static class HapticsUtils
	{
		[Token(Token = "0x40011C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<InputDevice> sInputDevices;

		[Token(Token = "0x40011C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static InputDevice sLastDeviceUsed;

		[Token(Token = "0x17000147")]
		private static HapticCapabilities Capabilities
		{
			[Token(Token = "0x6000E8A")]
			[Address(RVA = "0xF68638", Offset = "0xF68638", VA = "0xF68638")]
			get
			{
				return default(HapticCapabilities);
			}
		}

		[Token(Token = "0x17000148")]
		public static uint SampleRateHz
		{
			[Token(Token = "0x6000E8B")]
			[Address(RVA = "0xF66154", Offset = "0xF66154", VA = "0xF66154")]
			get
			{
				return default(uint);
			}
		}

		[Token(Token = "0x17000149")]
		public static uint MaxBufferSize
		{
			[Token(Token = "0x6000E8C")]
			[Address(RVA = "0xF66230", Offset = "0xF66230", VA = "0xF66230")]
			get
			{
				return default(uint);
			}
		}

		[Token(Token = "0x1700014A")]
		public static float DisplayFrequency
		{
			[Token(Token = "0x6000E8D")]
			[Address(RVA = "0xF66228", Offset = "0xF66228", VA = "0xF66228")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000E8E")]
		[Address(RVA = "0xF65490", Offset = "0xF65490", VA = "0xF65490")]
		public static void SendHapticData(XRNode node, HapticSamples hapticSamples, bool mix)
		{
		}

		[Token(Token = "0x6000E8F")]
		[Address(RVA = "0xF688BC", Offset = "0xF688BC", VA = "0xF688BC")]
		public static void StopAllHaptics(XRNode node)
		{
		}
	}
	[Token(Token = "0x200028F")]
	public static class HapticWaveformFileUtils
	{
	}
}
namespace ProjectorForSRP
{
	[Token(Token = "0x2000290")]
	[RequireComponent(typeof(Projector))]
	[ExecuteInEditMode]
	public abstract class ProjectorForSRP : MonoBehaviour
	{
		[Token(Token = "0x2000291")]
		[Flags]
		public enum RenderingLayerMask
		{
			[Token(Token = "0x40011DA")]
			Nothing = 0,
			[Token(Token = "0x40011DB")]
			Everything = -1,
			[Token(Token = "0x40011DC")]
			Layer1 = 1,
			[Token(Token = "0x40011DD")]
			Layer2 = 2,
			[Token(Token = "0x40011DE")]
			Layer3 = 4,
			[Token(Token = "0x40011DF")]
			Layer4 = 8,
			[Token(Token = "0x40011E0")]
			Layer5 = 0x10,
			[Token(Token = "0x40011E1")]
			Layer6 = 0x20,
			[Token(Token = "0x40011E2")]
			Layer7 = 0x40,
			[Token(Token = "0x40011E3")]
			Layer8 = 0x80,
			[Token(Token = "0x40011E4")]
			Layer9 = 0x100,
			[Token(Token = "0x40011E5")]
			Layer10 = 0x200,
			[Token(Token = "0x40011E6")]
			Layer11 = 0x400,
			[Token(Token = "0x40011E7")]
			Layer12 = 0x800,
			[Token(Token = "0x40011E8")]
			Layer13 = 0x1000,
			[Token(Token = "0x40011E9")]
			Layer14 = 0x2000,
			[Token(Token = "0x40011EA")]
			Layer15 = 0x4000,
			[Token(Token = "0x40011EB")]
			Layer16 = 0x8000,
			[Token(Token = "0x40011EC")]
			Layer17 = 0x10000,
			[Token(Token = "0x40011ED")]
			Layer18 = 0x20000,
			[Token(Token = "0x40011EE")]
			Layer19 = 0x40000,
			[Token(Token = "0x40011EF")]
			Layer20 = 0x80000,
			[Token(Token = "0x40011F0")]
			Layer21 = 0x100000,
			[Token(Token = "0x40011F1")]
			Layer22 = 0x200000,
			[Token(Token = "0x40011F2")]
			Layer23 = 0x400000,
			[Token(Token = "0x40011F3")]
			Layer24 = 0x800000,
			[Token(Token = "0x40011F4")]
			Layer25 = 0x1000000,
			[Token(Token = "0x40011F5")]
			Layer26 = 0x2000000,
			[Token(Token = "0x40011F6")]
			Layer27 = 0x4000000,
			[Token(Token = "0x40011F7")]
			Layer28 = 0x8000000,
			[Token(Token = "0x40011F8")]
			Layer29 = 0x10000000,
			[Token(Token = "0x40011F9")]
			Layer30 = 0x20000000,
			[Token(Token = "0x40011FA")]
			Layer31 = 0x40000000,
			[Token(Token = "0x40011FB")]
			Layer32 = int.MinValue
		}

		[Token(Token = "0x2000292")]
		public class PropertyBlock
		{
			[Token(Token = "0x40011FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private Dictionary<int, float> m_floatProperties;

			[Token(Token = "0x40011FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Dictionary<int, Color> m_colorProperties;

			[Token(Token = "0x40011FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Dictionary<int, Vector4> m_vectorProperties;

			[Token(Token = "0x40011FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Dictionary<int, Matrix4x4> m_matrixProperties;

			[Token(Token = "0x4001200")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Dictionary<int, Texture> m_textureProperties;

			[Token(Token = "0x6000EB5")]
			[Address(RVA = "0xF6BF40", Offset = "0xF6BF40", VA = "0xF6BF40")]
			public bool HasProperty(int id)
			{
				return default(bool);
			}

			[Token(Token = "0x6000EB6")]
			[Address(RVA = "0xF6C058", Offset = "0xF6C058", VA = "0xF6C058")]
			public void CopyPropertiesToMaterial(Material material)
			{
			}

			[Token(Token = "0x6000EB7")]
			[Address(RVA = "0xF6C6EC", Offset = "0xF6C6EC", VA = "0xF6C6EC")]
			public void SetTexture(int id, Texture value)
			{
			}

			[Token(Token = "0x6000EB8")]
			[Address(RVA = "0xF6C7AC", Offset = "0xF6C7AC", VA = "0xF6C7AC")]
			public void SetFloat(int id, float value)
			{
			}

			[Token(Token = "0x6000EB9")]
			[Address(RVA = "0xF6C86C", Offset = "0xF6C86C", VA = "0xF6C86C")]
			public void SetColor(int id, Color value)
			{
			}

			[Token(Token = "0x6000EBA")]
			[Address(RVA = "0xF6C94C", Offset = "0xF6C94C", VA = "0xF6C94C")]
			public void SetVector(int id, Vector4 value)
			{
			}

			[Token(Token = "0x6000EBB")]
			[Address(RVA = "0xF6CA2C", Offset = "0xF6CA2C", VA = "0xF6CA2C")]
			public void SetMatrix(int id, Matrix4x4 value)
			{
			}

			[Token(Token = "0x6000EBC")]
			[Address(RVA = "0xF6CB34", Offset = "0xF6CB34", VA = "0xF6CB34")]
			public Texture GetTexture(int id)
			{
				return null;
			}

			[Token(Token = "0x6000EBD")]
			[Address(RVA = "0xF6CBA8", Offset = "0xF6CBA8", VA = "0xF6CBA8")]
			public float GetFloat(int id)
			{
				return default(float);
			}

			[Token(Token = "0x6000EBE")]
			[Address(RVA = "0xF6CC28", Offset = "0xF6CC28", VA = "0xF6CC28")]
			public Color GetColor(int id)
			{
				return default(Color);
			}

			[Token(Token = "0x6000EBF")]
			[Address(RVA = "0xF6CCC8", Offset = "0xF6CCC8", VA = "0xF6CCC8")]
			public Vector4 GetVector(int id)
			{
				return default(Vector4);
			}

			[Token(Token = "0x6000EC0")]
			[Address(RVA = "0xF6CD88", Offset = "0xF6CD88", VA = "0xF6CD88")]
			public Matrix4x4 GetMatrix(int id)
			{
				return default(Matrix4x4);
			}

			[Token(Token = "0x6000EC1")]
			[Address(RVA = "0xF6CE30", Offset = "0xF6CE30", VA = "0xF6CE30")]
			public PropertyBlock()
			{
			}
		}

		[Token(Token = "0x2000293")]
		private class TemporaryData
		{
			[Token(Token = "0x4001201")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3[] m_vertices;

			[Token(Token = "0x4001202")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Plane[] m_clipPlanes;

			[Token(Token = "0x6000EC2")]
			[Address(RVA = "0xF6CE38", Offset = "0xF6CE38", VA = "0xF6CE38")]
			public TemporaryData()
			{
			}
		}

		[Token(Token = "0x40011C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Receiver Object Filter")]
		public RenderingLayerMask renderingLayerMask;

		[Token(Token = "0x40011C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int renderQueueLowerBound;

		[Token(Token = "0x40011C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int renderQueueUpperBound;

		[Token(Token = "0x40011C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public TerrainRenderFlags terrainRenderFlags;

		[Token(Token = "0x40011C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Terrain[] terrainsToBeFilteredWithRenderFlags;

		[Token(Token = "0x40011C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private string[] m_shaderTagList;

		[Token(Token = "0x40011C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected bool m_requiresCullingResult;

		[Token(Token = "0x40011CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected PropertyBlock m_propertyBlock;

		[Token(Token = "0x40011CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material m_copiedProjectorMaterial;

		[Token(Token = "0x40011CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ShaderTagId[] m_shaderTagIdList;

		[NonSerialized]
		[Token(Token = "0x40011CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool m_initialized;

		[Token(Token = "0x40011CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3[] m_frustumVertices;

		[Token(Token = "0x40011CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Matrix4x4 m_projectionMatrix;

		[Token(Token = "0x40011D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool s_isInitialized;

		[Token(Token = "0x40011D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static int s_shaderPropIdFsrWorldToProjector;

		[Token(Token = "0x40011D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int s_shaderPropIdFsrWorldProjectDir;

		[Token(Token = "0x40011D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly int[] s_frustumTriangles;

		[Token(Token = "0x40011D4")]
		private const string PROJECTOR_SHADER_KEYWORD = "FSR_PROJECTOR_FOR_LWRP";

		[Token(Token = "0x40011D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private ulong m_projectorFrustumHash;

		[Token(Token = "0x40011D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Dictionary<Camera, CullingResults> m_cullingResults;

		[Token(Token = "0x40011D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private TemporaryData m_temporaryData;

		[Token(Token = "0x40011D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private TerrainRenderFlags[] m_originalTerrainRenderFlags;

		[Token(Token = "0x1700014B")]
		public string[] shaderTagList
		{
			[Token(Token = "0x6000E91")]
			[Address(RVA = "0xF68AF4", Offset = "0xF68AF4", VA = "0xF68AF4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E92")]
			[Address(RVA = "0xF68AFC", Offset = "0xF68AFC", VA = "0xF68AFC")]
			set
			{
			}
		}

		[Token(Token = "0x1700014C")]
		public Projector projector
		{
			[Token(Token = "0x6000E93")]
			[Address(RVA = "0xF68C38", Offset = "0xF68C38", VA = "0xF68C38")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E94")]
			[Address(RVA = "0xF68C40", Offset = "0xF68C40", VA = "0xF68C40")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700014D")]
		public Matrix4x4 localToProjectorTexcoordMatrix
		{
			[Token(Token = "0x6000E95")]
			[Address(RVA = "0xF68C48", Offset = "0xF68C48", VA = "0xF68C48")]
			get
			{
				return default(Matrix4x4);
			}
		}

		[Token(Token = "0x1700014E")]
		public Matrix4x4 worldToProjectorTexcoordMatrix
		{
			[Token(Token = "0x6000E96")]
			[Address(RVA = "0xF68C5C", Offset = "0xF68C5C", VA = "0xF68C5C")]
			get
			{
				return default(Matrix4x4);
			}
		}

		[Token(Token = "0x1700014F")]
		public Vector3 localProjectorDirection
		{
			[Token(Token = "0x6000E97")]
			[Address(RVA = "0xF68CF0", Offset = "0xF68CF0", VA = "0xF68CF0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000150")]
		public Vector3 worldProjectorDirection
		{
			[Token(Token = "0x6000E98")]
			[Address(RVA = "0xF68D34", Offset = "0xF68D34", VA = "0xF68D34")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000151")]
		public PropertyBlock propertyBlock
		{
			[Token(Token = "0x6000E9A")]
			[Address(RVA = "0xF68DBC", Offset = "0xF68DBC", VA = "0xF68DBC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000152")]
		public abstract ShaderTagId[] defaultShaderTagIdList
		{
			[Token(Token = "0x6000EA1")]
			get;
		}

		[Token(Token = "0x6000E99")]
		[Address(RVA = "0xF68D54", Offset = "0xF68D54", VA = "0xF68D54")]
		internal bool TryGetCullingResults(Camera camera, out CullingResults cullingResults)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E9B")]
		[Address(RVA = "0xF68E34", Offset = "0xF68E34", VA = "0xF68E34")]
		protected Material GetDuplicatedProjectorMaterial([Optional] Material originalMaterial)
		{
			return null;
		}

		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0xF69084", Offset = "0xF69084", VA = "0xF69084")]
		internal void CheckProjectorForLWRPKeyword(Material material)
		{
		}

		[Token(Token = "0x6000E9D")]
		[Address(RVA = "0xF69088", Offset = "0xF69088", VA = "0xF69088")]
		protected void EnableProjectorForLWRPKeyword(Material material)
		{
		}

		[Token(Token = "0x6000E9E")]
		[Address(RVA = "0xF690DC", Offset = "0xF690DC", VA = "0xF690DC")]
		internal void SetupProjectorMatrix(Material material)
		{
		}

		[Token(Token = "0x6000E9F")]
		[Address(RVA = "0xF691B4", Offset = "0xF691B4", VA = "0xF691B4")]
		protected void GetDefaultDrawSettings(Camera camera, Material material, out DrawingSettings drawingSettings, out FilteringSettings filteringSettings)
		{
		}

		[Token(Token = "0x6000EA0")]
		[Address(RVA = "0xF68B18", Offset = "0xF68B18", VA = "0xF68B18")]
		public void UpdateShaderTagIdList()
		{
		}

		[Token(Token = "0x6000EA2")]
		[Address(RVA = "0xF693F0", Offset = "0xF693F0", VA = "0xF693F0", Slot = "5")]
		protected virtual void Initialize()
		{
		}

		[Token(Token = "0x6000EA3")]
		[Address(RVA = "0xF6981C", Offset = "0xF6981C", VA = "0xF6981C", Slot = "6")]
		protected virtual void Cleanup()
		{
		}

		[Token(Token = "0x6000EA4")]
		protected abstract void AddProjectorToRenderer(Camera camera);

		[Token(Token = "0x6000EA5")]
		[Address(RVA = "0xF69820", Offset = "0xF69820", VA = "0xF69820", Slot = "8")]
		protected virtual void OnProjectorFrustumChanged()
		{
		}

		[Token(Token = "0x6000EA6")]
		[Address(RVA = "0xF69824", Offset = "0xF69824", VA = "0xF69824", Slot = "9")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000EA7")]
		[Address(RVA = "0xF6984C", Offset = "0xF6984C", VA = "0xF6984C", Slot = "10")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000EA8")]
		[Address(RVA = "0xF69A0C", Offset = "0xF69A0C", VA = "0xF69A0C", Slot = "11")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000EA9")]
		[Address(RVA = "0xF69AB0", Offset = "0xF69AB0", VA = "0xF69AB0", Slot = "12")]
		protected virtual void OnValidate()
		{
		}

		[Token(Token = "0x6000EAA")]
		[Address(RVA = "0xF69AB4", Offset = "0xF69AB4", VA = "0xF69AB4")]
		protected void CreateProjectorFrustumMesh(Mesh mesh)
		{
		}

		[Token(Token = "0x6000EAB")]
		[Address(RVA = "0xF69B48", Offset = "0xF69B48", VA = "0xF69B48")]
		protected Vector3 GetProjectorFrustumVertex(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000EAC")]
		[Address(RVA = "0xF69938", Offset = "0xF69938", VA = "0xF69938")]
		protected static void StaticInitialize()
		{
		}

		[Token(Token = "0x6000EAD")]
		[Address(RVA = "0xF69B84", Offset = "0xF69B84", VA = "0xF69B84")]
		static ProjectorForSRP()
		{
		}

		[Token(Token = "0x6000EAE")]
		[Address(RVA = "0xF69C34", Offset = "0xF69C34", VA = "0xF69C34")]
		private void OnBeginFrameRendering(ScriptableRenderContext context, Camera[] cameras)
		{
		}

		[Token(Token = "0x6000EAF")]
		[Address(RVA = "0xF69738", Offset = "0xF69738", VA = "0xF69738")]
		private static ulong CalculateProjectorFrustumHash(Projector projector)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000EB0")]
		[Address(RVA = "0xF69514", Offset = "0xF69514", VA = "0xF69514")]
		private void UpdateFrustum()
		{
		}

		[Token(Token = "0x6000EB1")]
		[Address(RVA = "0xF69E14", Offset = "0xF69E14", VA = "0xF69E14")]
		private bool StartCullingIfVisible(ScriptableRenderContext context, Camera cam)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EB2")]
		[Address(RVA = "0xF6ADE4", Offset = "0xF6ADE4", VA = "0xF6ADE4")]
		private static bool IsStereoEnabled(Camera camera)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EB3")]
		[Address(RVA = "0xF6ABD8", Offset = "0xF6ABD8", VA = "0xF6ABD8")]
		private void UpdateProjectionMatrix()
		{
		}

		[Token(Token = "0x6000EB4")]
		[Address(RVA = "0xF6AE5C", Offset = "0xF6AE5C", VA = "0xF6AE5C")]
		protected ProjectorForSRP()
		{
		}
	}
}
namespace ProjectorForLWRP
{
	[Token(Token = "0x2000294")]
	[RequireComponent(typeof(ProjectorForLWRP))]
	[ExecuteAlways]
	public class AdditionalProjectorRenderer : MonoBehaviour, ICustomRenderer
	{
		[Token(Token = "0x4001203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Receiver Object Filter")]
		public global::ProjectorForSRP.ProjectorForSRP.RenderingLayerMask renderingLayerMask;

		[Token(Token = "0x4001204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int renderQueueLowerBound;

		[Token(Token = "0x4001205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int renderQueueUpperBound;

		[Token(Token = "0x4001206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private string[] m_shaderTagList;

		[Token(Token = "0x4001207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Projector Rendering")]
		[SerializeField]
		private RenderPassEvent m_renderPassEvent;

		[Token(Token = "0x4001208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private PerObjectData m_perObjectData;

		[Token(Token = "0x4001209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Material m_material;

		[Token(Token = "0x400120A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		private Material m_stencilPass;

		[Token(Token = "0x400120B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		[SerializeField]
		private ProjectorForLWRP.StencilTestOptions m_stencilTestOptions;

		[Token(Token = "0x400120C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private ProjectorForLWRP m_projectorForLWRP;

		[Token(Token = "0x400120D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material m_copiedMaterial;

		[Token(Token = "0x400120E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ShaderTagId[] m_shaderTagIdList;

		[Token(Token = "0x400120F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Action<Camera> m_actionOnAddProjectorToRenderer;

		[Token(Token = "0x4001210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material m_runtimeStencilPassMaterial;

		[Token(Token = "0x17000153")]
		public string[] shaderTagList
		{
			[Token(Token = "0x6000EC3")]
			[Address(RVA = "0xF6CED4", Offset = "0xF6CED4", VA = "0xF6CED4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EC4")]
			[Address(RVA = "0xF6CEDC", Offset = "0xF6CEDC", VA = "0xF6CEDC")]
			set
			{
			}
		}

		[Token(Token = "0x17000154")]
		public RenderPassEvent renderPassEvent
		{
			[Token(Token = "0x6000EC5")]
			[Address(RVA = "0xF6D020", Offset = "0xF6D020", VA = "0xF6D020", Slot = "4")]
			get
			{
				return default(RenderPassEvent);
			}
			[Token(Token = "0x6000EC6")]
			[Address(RVA = "0xF6D028", Offset = "0xF6D028", VA = "0xF6D028")]
			set
			{
			}
		}

		[Token(Token = "0x17000155")]
		public PerObjectData perObjectData
		{
			[Token(Token = "0x6000EC7")]
			[Address(RVA = "0xF6D030", Offset = "0xF6D030", VA = "0xF6D030")]
			get
			{
				return default(PerObjectData);
			}
			[Token(Token = "0x6000EC8")]
			[Address(RVA = "0xF6D038", Offset = "0xF6D038", VA = "0xF6D038")]
			set
			{
			}
		}

		[Token(Token = "0x17000156")]
		public bool useStencilTest
		{
			[Token(Token = "0x6000EC9")]
			[Address(RVA = "0xF6D040", Offset = "0xF6D040", VA = "0xF6D040")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000157")]
		public ProjectorForLWRP.StencilTestOptions stencilTestOptions
		{
			[Token(Token = "0x6000ECA")]
			[Address(RVA = "0xF6D0A0", Offset = "0xF6D0A0", VA = "0xF6D0A0")]
			get
			{
				return default(ProjectorForLWRP.StencilTestOptions);
			}
		}

		[Token(Token = "0x17000158")]
		public Material stencilPassMaterial
		{
			[Token(Token = "0x6000ECB")]
			[Address(RVA = "0xF6D0A8", Offset = "0xF6D0A8", VA = "0xF6D0A8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000ECC")]
			[Address(RVA = "0xF6D0B0", Offset = "0xF6D0B0", VA = "0xF6D0B0")]
			set
			{
			}
		}

		[Token(Token = "0x17000159")]
		private ProjectorForLWRP parentProjector
		{
			[Token(Token = "0x6000ECD")]
			[Address(RVA = "0xF6D0B8", Offset = "0xF6D0B8", VA = "0xF6D0B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015A")]
		public Material sharedMaterial
		{
			[Token(Token = "0x6000ECE")]
			[Address(RVA = "0xF6D0C0", Offset = "0xF6D0C0", VA = "0xF6D0C0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000ECF")]
			[Address(RVA = "0xF6D0C8", Offset = "0xF6D0C8", VA = "0xF6D0C8")]
			set
			{
			}
		}

		[Token(Token = "0x1700015B")]
		public Material material
		{
			[Token(Token = "0x6000ED0")]
			[Address(RVA = "0xF6D0D0", Offset = "0xF6D0D0", VA = "0xF6D0D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000ED1")]
		[Address(RVA = "0xF6CEF8", Offset = "0xF6CEF8", VA = "0xF6CEF8")]
		public void UpdateShaderTagIdList()
		{
		}

		[Token(Token = "0x6000ED2")]
		[Address(RVA = "0xF6D260", Offset = "0xF6D260", VA = "0xF6D260")]
		private void Initialize()
		{
		}

		[Token(Token = "0x6000ED3")]
		[Address(RVA = "0xF6D324", Offset = "0xF6D324", VA = "0xF6D324")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6000ED4")]
		[Address(RVA = "0xF6D3A0", Offset = "0xF6D3A0", VA = "0xF6D3A0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000ED5")]
		[Address(RVA = "0xF6D4D0", Offset = "0xF6D4D0", VA = "0xF6D4D0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000ED6")]
		[Address(RVA = "0xF6D5A0", Offset = "0xF6D5A0", VA = "0xF6D5A0")]
		private void AddRenderer(Camera camera)
		{
		}

		[Token(Token = "0x6000ED7")]
		[Address(RVA = "0xF6D794", Offset = "0xF6D794", VA = "0xF6D794")]
		protected void GetDefaultDrawSettings(ref RenderingData renderingData, Material material, out DrawingSettings drawingSettings, out FilteringSettings filteringSettings, out RenderStateBlock renderStateBlock)
		{
		}

		[Token(Token = "0x6000ED8")]
		[Address(RVA = "0xF6DB94", Offset = "0xF6DB94", VA = "0xF6DB94", Slot = "5")]
		public void Render(ScriptableRenderContext context, ref RenderingData renderingData)
		{
		}

		[Token(Token = "0x6000ED9")]
		[Address(RVA = "0xF6E774", Offset = "0xF6E774", VA = "0xF6E774")]
		public AdditionalProjectorRenderer()
		{
		}
	}
	[Token(Token = "0x2000295")]
	public interface ICustomRenderer
	{
		[Token(Token = "0x1700015C")]
		RenderPassEvent renderPassEvent
		{
			[Token(Token = "0x6000EDA")]
			get;
		}

		[Token(Token = "0x6000EDB")]
		void Render(ScriptableRenderContext context, ref RenderingData renderingData);
	}
	[Token(Token = "0x2000296")]
	public class CustomRendererPass : ScriptableRenderPass
	{
		[Token(Token = "0x4001211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private List<ICustomRenderer> m_customRenderers;

		[Token(Token = "0x4001212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static ProfilingSampler sampler;

		[Token(Token = "0x1700015D")]
		public int rendererCount
		{
			[Token(Token = "0x6000EDD")]
			[Address(RVA = "0xF6E980", Offset = "0xF6E980", VA = "0xF6E980")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700015E")]
		public bool isActive
		{
			[Token(Token = "0x6000EDF")]
			[Address(RVA = "0xF6EAF0", Offset = "0xF6EAF0", VA = "0xF6EAF0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000EDC")]
		[Address(RVA = "0xF6E824", Offset = "0xF6E824", VA = "0xF6E824")]
		static CustomRendererPass()
		{
		}

		[Token(Token = "0x6000EDE")]
		[Address(RVA = "0xF6E9C8", Offset = "0xF6E9C8", VA = "0xF6E9C8")]
		public void AddRenderer(ICustomRenderer renderer)
		{
		}

		[Token(Token = "0x6000EE0")]
		[Address(RVA = "0xF6EB40", Offset = "0xF6EB40", VA = "0xF6EB40", Slot = "6")]
		public override void Configure(CommandBuffer cmd, RenderTextureDescriptor cameraTextureDescriptor)
		{
		}

		[Token(Token = "0x6000EE1")]
		[Address(RVA = "0xF6EB78", Offset = "0xF6EB78", VA = "0xF6EB78", Slot = "9")]
		public override void Execute(ScriptableRenderContext context, ref RenderingData renderingData)
		{
		}

		[Token(Token = "0x6000EE2")]
		[Address(RVA = "0xF6EE9C", Offset = "0xF6EE9C", VA = "0xF6EE9C")]
		public CustomRendererPass()
		{
		}
	}
	[Token(Token = "0x2000298")]
	public class CustomRendererPassManager
	{
		[Token(Token = "0x4001215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ObjectPool<ObjectPool<CustomRendererPass>.AutoClearMap<RenderPassEvent>>.Map<Camera> m_cameraToPassMap;

		[Token(Token = "0x1700015F")]
		public static CustomRendererPassManager staticInstance
		{
			[Token(Token = "0x6000EE6")]
			[Address(RVA = "0xF6F010", Offset = "0xF6F010", VA = "0xF6F010")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EE7")]
			[Address(RVA = "0xF6F068", Offset = "0xF6F068", VA = "0xF6F068")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000EE8")]
		[Address(RVA = "0xF6F0D0", Offset = "0xF6F0D0", VA = "0xF6F0D0")]
		static CustomRendererPassManager()
		{
		}

		[Token(Token = "0x6000EE9")]
		[Address(RVA = "0xF6F16C", Offset = "0xF6F16C", VA = "0xF6F16C")]
		public CustomRendererPassManager()
		{
		}

		[Token(Token = "0x6000EEA")]
		[Address(RVA = "0xF6F26C", Offset = "0xF6F26C", VA = "0xF6F26C", Slot = "1")]
		~CustomRendererPassManager()
		{
		}

		[Token(Token = "0x6000EEB")]
		[Address(RVA = "0xF6D648", Offset = "0xF6D648", VA = "0xF6D648")]
		public void AddCustomRenderer(Camera camera, ICustomRenderer customRenderer)
		{
		}

		[Token(Token = "0x6000EEC")]
		[Address(RVA = "0xF6F49C", Offset = "0xF6F49C", VA = "0xF6F49C")]
		protected void OnEndFrameRendering(ScriptableRenderContext context, Camera[] cameras)
		{
		}
	}
	[Token(Token = "0x2000299")]
	[ExecuteAlways]
	[RequireComponent(typeof(Projector))]
	public class ProjectorForLWRP : global::ProjectorForSRP.ProjectorForSRP, ICustomRenderer
	{
		[Token(Token = "0x200029A")]
		[Flags]
		public enum StencilTestOptions
		{
			[Token(Token = "0x4001226")]
			None = 0,
			[Token(Token = "0x4001227")]
			ClearStencil = 1,
			[Token(Token = "0x4001228")]
			PreventOverwriting = 2
		}

		[Token(Token = "0x200029B")]
		private enum StencilTestState
		{
			[Token(Token = "0x400122A")]
			None,
			[Token(Token = "0x400122B")]
			BothSide,
			[Token(Token = "0x400122C")]
			BackfaceOnly
		}

		[Token(Token = "0x4001216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Header("Projector Rendering")]
		[SerializeField]
		private RenderPassEvent m_renderPassEvent;

		[Token(Token = "0x4001217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[SerializeField]
		private PerObjectData m_perObjectData;

		[Token(Token = "0x4001218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		[HideInInspector]
		private Material m_stencilPass;

		[Token(Token = "0x4001219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		[HideInInspector]
		private StencilTestOptions m_stencilTestOptions;

		[Token(Token = "0x400121A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static ShaderTagId[] s_defaultShaderTagIdList;

		[Token(Token = "0x400121B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Mesh m_meshFrustum;

		[Token(Token = "0x400121C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private bool m_meshFrustumDirty;

		[Token(Token = "0x400121D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static bool s_isInitialized;

		[Token(Token = "0x400121E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static int s_shaderPropIdStencilRef;

		[Token(Token = "0x400121F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static int s_shaderPropIdStencilMask;

		[Token(Token = "0x4001221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private StencilTestState m_stencilTestState;

		[Token(Token = "0x4001222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Mesh s_fullScreenMesh;

		[Token(Token = "0x4001223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static Material s_fullScreenClearStencilMaterial;

		[Token(Token = "0x4001224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Material m_runtimeStencilPassMaterial;

		[Token(Token = "0x17000160")]
		public RenderPassEvent renderPassEvent
		{
			[Token(Token = "0x6000EED")]
			[Address(RVA = "0xF6F4EC", Offset = "0xF6F4EC", VA = "0xF6F4EC", Slot = "13")]
			get
			{
				return default(RenderPassEvent);
			}
			[Token(Token = "0x6000EEE")]
			[Address(RVA = "0xF6F4F4", Offset = "0xF6F4F4", VA = "0xF6F4F4")]
			set
			{
			}
		}

		[Token(Token = "0x17000161")]
		public PerObjectData perObjectData
		{
			[Token(Token = "0x6000EEF")]
			[Address(RVA = "0xF6F4FC", Offset = "0xF6F4FC", VA = "0xF6F4FC")]
			get
			{
				return default(PerObjectData);
			}
			[Token(Token = "0x6000EF0")]
			[Address(RVA = "0xF6F504", Offset = "0xF6F504", VA = "0xF6F504")]
			set
			{
			}
		}

		[Token(Token = "0x17000162")]
		public bool useStencilTest
		{
			[Token(Token = "0x6000EF1")]
			[Address(RVA = "0xF6F50C", Offset = "0xF6F50C", VA = "0xF6F50C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000163")]
		public StencilTestOptions stencilTestOptions
		{
			[Token(Token = "0x6000EF2")]
			[Address(RVA = "0xF6F56C", Offset = "0xF6F56C", VA = "0xF6F56C")]
			get
			{
				return default(StencilTestOptions);
			}
		}

		[Token(Token = "0x17000164")]
		public Material stencilPassMaterial
		{
			[Token(Token = "0x6000EF3")]
			[Address(RVA = "0xF6F574", Offset = "0xF6F574", VA = "0xF6F574")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EF4")]
			[Address(RVA = "0xF6F57C", Offset = "0xF6F57C", VA = "0xF6F57C")]
			set
			{
			}
		}

		[Token(Token = "0x17000165")]
		public override ShaderTagId[] defaultShaderTagIdList
		{
			[Token(Token = "0x6000EF5")]
			[Address(RVA = "0xF6F584", Offset = "0xF6F584", VA = "0xF6F584", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000007")]
		internal event Action<Camera> onAddProjectorToRenderer
		{
			[Token(Token = "0x6000EFB")]
			[Address(RVA = "0xF6D420", Offset = "0xF6D420", VA = "0xF6D420")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000EFC")]
			[Address(RVA = "0xF6D4F0", Offset = "0xF6D4F0", VA = "0xF6D4F0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000EF6")]
		[Address(RVA = "0xF6F740", Offset = "0xF6F740", VA = "0xF6F740", Slot = "8")]
		protected override void OnProjectorFrustumChanged()
		{
		}

		[Token(Token = "0x6000EF7")]
		[Address(RVA = "0xF6F74C", Offset = "0xF6F74C", VA = "0xF6F74C")]
		public void CopySerializedPropertiesFrom(ProjectorForLWRP src)
		{
		}

		[Token(Token = "0x6000EF8")]
		[Address(RVA = "0xF6F780", Offset = "0xF6F780", VA = "0xF6F780")]
		public Mesh GetFrustumMesh()
		{
			return null;
		}

		[Token(Token = "0x6000EF9")]
		[Address(RVA = "0xF6F86C", Offset = "0xF6F86C", VA = "0xF6F86C")]
		protected new static void StaticInitialize()
		{
		}

		[Token(Token = "0x6000EFA")]
		[Address(RVA = "0xF6F96C", Offset = "0xF6F96C", VA = "0xF6F96C")]
		static ProjectorForLWRP()
		{
		}

		[Token(Token = "0x6000EFD")]
		[Address(RVA = "0xF6F9F8", Offset = "0xF6F9F8", VA = "0xF6F9F8", Slot = "7")]
		protected override void AddProjectorToRenderer(Camera camera)
		{
		}

		[Token(Token = "0x6000EFE")]
		[Address(RVA = "0xF6FACC", Offset = "0xF6FACC", VA = "0xF6FACC")]
		private new static void DestroyObject(UnityEngine.Object obj)
		{
		}

		[Token(Token = "0x6000EFF")]
		[Address(RVA = "0xF6FB54", Offset = "0xF6FB54", VA = "0xF6FB54", Slot = "6")]
		protected override void Cleanup()
		{
		}

		[Token(Token = "0x6000F00")]
		[Address(RVA = "0xF6FC04", Offset = "0xF6FC04", VA = "0xF6FC04")]
		private void ClearFullscreenStencil(CommandBuffer commandBuffer)
		{
		}

		[Token(Token = "0x6000F01")]
		[Address(RVA = "0xF6DDB8", Offset = "0xF6DDB8", VA = "0xF6DDB8")]
		internal void WriteFrustumStencil(ScriptableRenderContext context, Camera camera, Material nonSharedStencilMaterial)
		{
		}

		[Token(Token = "0x6000F02")]
		[Address(RVA = "0xF6E53C", Offset = "0xF6E53C", VA = "0xF6E53C")]
		internal void ClearStencil(ScriptableRenderContext context, Material nonSharedStencilMaterial, StencilTestOptions stencilTestOptions)
		{
		}

		[Token(Token = "0x6000F03")]
		[Address(RVA = "0xF701A4", Offset = "0xF701A4", VA = "0xF701A4")]
		protected void WriteFrustumStencil(ScriptableRenderContext context, Camera camera)
		{
		}

		[Token(Token = "0x6000F04")]
		[Address(RVA = "0xF70280", Offset = "0xF70280", VA = "0xF70280")]
		protected void ClearStencil(ScriptableRenderContext context)
		{
		}

		[Token(Token = "0x6000F05")]
		[Address(RVA = "0xF6E3B8", Offset = "0xF6E3B8", VA = "0xF6E3B8")]
		internal static void SetupCullingResultsForRendering(ref RenderingData renderingData, ref CullingResults cullingResults, PerObjectData perObjectData)
		{
		}

		[Token(Token = "0x6000F06")]
		[Address(RVA = "0xF6DA1C", Offset = "0xF6DA1C", VA = "0xF6DA1C")]
		internal RenderStateBlock GetDefaultRenderStateBlock(bool stencilTest, StencilTestOptions stencilTestOptions)
		{
			return default(RenderStateBlock);
		}

		[Token(Token = "0x6000F07")]
		[Address(RVA = "0xF7028C", Offset = "0xF7028C", VA = "0xF7028C")]
		protected void GetDefaultDrawSettings(ref RenderingData renderingData, Material material, out DrawingSettings drawingSettings, out FilteringSettings filteringSettings, out RenderStateBlock renderStateBlock)
		{
		}

		[Token(Token = "0x6000F08")]
		[Address(RVA = "0xF70318", Offset = "0xF70318", VA = "0xF70318", Slot = "15")]
		public virtual void Render(ScriptableRenderContext context, ref RenderingData renderingData)
		{
		}

		[Token(Token = "0x6000F09")]
		[Address(RVA = "0xF704D8", Offset = "0xF704D8", VA = "0xF704D8")]
		public ProjectorForLWRP()
		{
		}
	}
	[Token(Token = "0x200029C")]
	public class ProjectorRendererFeature : ScriptableRendererFeature
	{
		[Token(Token = "0x400122D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static ProjectorRendererFeature s_currentInstance;

		[Token(Token = "0x400122E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static ObjectPool<global::ProjectorForLWRP.Collections.AutoClearList<ScriptableRenderPass>>.Map<Camera> s_renderPassList;

		[Token(Token = "0x400122F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int m_stencilMask;

		[Token(Token = "0x6000F0A")]
		[Address(RVA = "0xF6F390", Offset = "0xF6F390", VA = "0xF6F390")]
		public static void AddRenderPass(Camera camera, ScriptableRenderPass pass)
		{
		}

		[Token(Token = "0x6000F0B")]
		[Address(RVA = "0xF70540", Offset = "0xF70540", VA = "0xF70540", Slot = "5")]
		public override void Create()
		{
		}

		[Token(Token = "0x6000F0C")]
		[Address(RVA = "0xF70658", Offset = "0xF70658", VA = "0xF70658")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000F0D")]
		[Address(RVA = "0xF707D8", Offset = "0xF707D8", VA = "0xF707D8", Slot = "7")]
		public override void AddRenderPasses(ScriptableRenderer renderer, ref RenderingData renderingData)
		{
		}

		[Token(Token = "0x6000F0E")]
		[Address(RVA = "0xF709A8", Offset = "0xF709A8", VA = "0xF709A8")]
		private static void OnEndFrameRendering(ScriptableRenderContext context, Camera[] cameras)
		{
		}

		[Token(Token = "0x6000F0F")]
		[Address(RVA = "0xF70A20", Offset = "0xF70A20", VA = "0xF70A20")]
		public ProjectorRendererFeature()
		{
		}
	}
	[Token(Token = "0x200029D")]
	public static class ObjectPool<T> where T : new()
	{
		[Token(Token = "0x200029E")]
		public class CollectionBase<CollectionType> where CollectionType : ICollection<T>, new()
		{
			[Token(Token = "0x4001232")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			protected CollectionType baseCollection;

			[Token(Token = "0x17000166")]
			public int Count
			{
				[Token(Token = "0x6000F15")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x6000F16")]
			public T AddNew()
			{
				return (T)null;
			}

			[Token(Token = "0x6000F17")]
			public bool Contains(T item)
			{
				return default(bool);
			}

			[Token(Token = "0x6000F18")]
			public bool Remove(T item)
			{
				return default(bool);
			}

			[Token(Token = "0x6000F19")]
			public CollectionBase()
			{
			}
		}

		[Token(Token = "0x200029F")]
		public class List : CollectionBase<List<T>>
		{
			[Token(Token = "0x17000167")]
			public T this[int index]
			{
				[Token(Token = "0x6000F1A")]
				get
				{
					return (T)null;
				}
			}

			[Token(Token = "0x6000F1B")]
			public void RemoveAt(int index)
			{
			}

			[Token(Token = "0x6000F1C")]
			public void Clear()
			{
			}

			[Token(Token = "0x6000F1D")]
			public List<T>.Enumerator GetEnumerator()
			{
				return default(List<T>.Enumerator);
			}

			[Token(Token = "0x6000F1E")]
			public List()
			{
			}
		}

		[Token(Token = "0x20002A0")]
		public class AutoClearList : List
		{
			[Token(Token = "0x6000F1F")]
			static AutoClearList()
			{
			}

			[Token(Token = "0x6000F20")]
			public AutoClearList()
			{
			}
		}

		[Token(Token = "0x20002A2")]
		public class Map<KeyType>
		{
			[Token(Token = "0x4001234")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Dictionary<KeyType, T> baseMap;

			[Token(Token = "0x17000168")]
			public T this[KeyType key]
			{
				[Token(Token = "0x6000F24")]
				get
				{
					return (T)null;
				}
			}

			[Token(Token = "0x17000169")]
			public Dictionary<KeyType, T>.KeyCollection Keys
			{
				[Token(Token = "0x6000F28")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700016A")]
			public Dictionary<KeyType, T>.ValueCollection Values
			{
				[Token(Token = "0x6000F29")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F25")]
			public void Clear()
			{
			}

			[Token(Token = "0x6000F26")]
			public bool ContainsKey(KeyType key)
			{
				return default(bool);
			}

			[Token(Token = "0x6000F27")]
			public void Remove(KeyType key)
			{
			}

			[Token(Token = "0x6000F2A")]
			public Dictionary<KeyType, T>.Enumerator GetEnumerator()
			{
				return default(Dictionary<KeyType, T>.Enumerator);
			}

			[Token(Token = "0x6000F2B")]
			public Map()
			{
			}
		}

		[Token(Token = "0x20002A3")]
		public class AutoClearMap<KeyType> : Map<KeyType>
		{
			[Token(Token = "0x6000F2C")]
			static AutoClearMap()
			{
			}

			[Token(Token = "0x6000F2D")]
			public AutoClearMap()
			{
			}
		}

		[Token(Token = "0x4001230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Action<T> clearFunction;

		[Token(Token = "0x4001231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Stack<T> m_pool;

		[Token(Token = "0x6000F11")]
		public static T Get()
		{
			return (T)null;
		}

		[Token(Token = "0x6000F12")]
		public static void Release(T obj)
		{
		}

		[Token(Token = "0x6000F13")]
		public static void Clear()
		{
		}
	}
	[Token(Token = "0x20002A5")]
	public static class StencilMaskAllocator
	{
		[Token(Token = "0x4001236")]
		private const int STENCIL_BIT_COUNT = 8;

		[Token(Token = "0x4001237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int s_availableBits;

		[Token(Token = "0x4001238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static int s_allocateCount;

		[Token(Token = "0x4001239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static bool s_loopFlag;

		[Token(Token = "0x1700016B")]
		public static int availableBits
		{
			[Token(Token = "0x6000F34")]
			[Address(RVA = "0xF70BA4", Offset = "0xF70BA4", VA = "0xF70BA4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700016C")]
		public static bool loopFlag
		{
			[Token(Token = "0x6000F35")]
			[Address(RVA = "0xF70BFC", Offset = "0xF70BFC", VA = "0xF70BFC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000F31")]
		[Address(RVA = "0xF700EC", Offset = "0xF700EC", VA = "0xF700EC")]
		public static void Init(int mask)
		{
		}

		[Token(Token = "0x6000F32")]
		[Address(RVA = "0xF70154", Offset = "0xF70154", VA = "0xF70154")]
		public static int AllocateSingleBit()
		{
			return default(int);
		}

		[Token(Token = "0x6000F33")]
		[Address(RVA = "0xF70030", Offset = "0xF70030", VA = "0xF70030")]
		public static int GetCurrentBit()
		{
			return default(int);
		}

		[Token(Token = "0x6000F36")]
		[Address(RVA = "0xF70094", Offset = "0xF70094", VA = "0xF70094")]
		public static void ClearLoopFlag()
		{
		}

		[Token(Token = "0x6000F37")]
		[Address(RVA = "0xF70ADC", Offset = "0xF70ADC", VA = "0xF70ADC")]
		private static void MoveNext()
		{
		}
	}
}
namespace ProjectorForLWRP.Test
{
	[Token(Token = "0x20002A6")]
	[ExecuteInEditMode]
	public class CullingTest : MonoBehaviour
	{
		[Token(Token = "0x20002A7")]
		private enum MouseButtonState
		{
			[Token(Token = "0x400124B")]
			Normal,
			[Token(Token = "0x400124C")]
			LeftButtonDown,
			[Token(Token = "0x400124D")]
			RightButtonDown
		}

		[Token(Token = "0x400123A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Camera camera;

		[Token(Token = "0x400123B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float cameraSpeed;

		[Token(Token = "0x400123C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform cameraTarget;

		[Token(Token = "0x400123D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool createTestCubes;

		[Token(Token = "0x400123E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float cubeSize;

		[Token(Token = "0x400123F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float gridInterval;

		[Token(Token = "0x4001240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int gridSizeX;

		[Token(Token = "0x4001241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int gridSizeY;

		[Token(Token = "0x4001242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int gridSizeZ;

		[Token(Token = "0x4001243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float layerCullingDistance;

		[Token(Token = "0x4001244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float[] m_layerCullingDistances;

		[Token(Token = "0x4001245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float m_cameraAngleX;

		[Token(Token = "0x4001246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float m_cameraAngleY;

		[Token(Token = "0x4001247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float m_distance;

		[Token(Token = "0x4001248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Vector3 m_mousePosition;

		[Token(Token = "0x4001249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private MouseButtonState m_mouseButtonState;

		[Token(Token = "0x6000F39")]
		[Address(RVA = "0xF70CA4", Offset = "0xF70CA4", VA = "0xF70CA4")]
		private void AddCubes()
		{
		}

		[Token(Token = "0x6000F3A")]
		[Address(RVA = "0xF70F14", Offset = "0xF70F14", VA = "0xF70F14")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F3B")]
		[Address(RVA = "0xF7101C", Offset = "0xF7101C", VA = "0xF7101C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F3C")]
		[Address(RVA = "0xF711A0", Offset = "0xF711A0", VA = "0xF711A0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000F3D")]
		[Address(RVA = "0xF71CF8", Offset = "0xF71CF8", VA = "0xF71CF8")]
		public CullingTest()
		{
		}
	}
}
namespace ProjectorForLWRP.Collections
{
	[Token(Token = "0x20002A8")]
	public class AutoClearList<T> : List<T>
	{
		[Token(Token = "0x6000F3E")]
		public AutoClearList()
		{
		}
	}
	[Token(Token = "0x20002AA")]
	public class AutoClearSet<T> : HashSet<T>
	{
		[Token(Token = "0x6000F42")]
		public AutoClearSet()
		{
		}
	}
	[Token(Token = "0x20002AC")]
	public class AutoClearMap<TKey, TValue> : Dictionary<TKey, TValue>
	{
		[Token(Token = "0x6000F46")]
		public AutoClearMap()
		{
		}
	}
}
namespace PDollarGestureRecognizer
{
	[Token(Token = "0x20002AE")]
	public class Geometry
	{
		[Token(Token = "0x6000F4A")]
		[Address(RVA = "0xF71D28", Offset = "0xF71D28", VA = "0xF71D28")]
		public static float SqrEuclideanDistance(Point a, Point b)
		{
			return default(float);
		}

		[Token(Token = "0x6000F4B")]
		[Address(RVA = "0xF71D54", Offset = "0xF71D54", VA = "0xF71D54")]
		public static float EuclideanDistance(Point a, Point b)
		{
			return default(float);
		}

		[Token(Token = "0x6000F4C")]
		[Address(RVA = "0xF71DCC", Offset = "0xF71DCC", VA = "0xF71DCC")]
		public Geometry()
		{
		}
	}
	[Token(Token = "0x20002AF")]
	public class Gesture
	{
		[Token(Token = "0x4001254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Point[] Points;

		[Token(Token = "0x4001255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Name;

		[Token(Token = "0x4001256")]
		private const int SAMPLING_RESOLUTION = 32;

		[Token(Token = "0x6000F4D")]
		[Address(RVA = "0xF71DD4", Offset = "0xF71DD4", VA = "0xF71DD4")]
		public Gesture(Point[] points, string gestureName = "")
		{
		}

		[Token(Token = "0x6000F4E")]
		[Address(RVA = "0xF71EB4", Offset = "0xF71EB4", VA = "0xF71EB4")]
		private Point[] Scale(Point[] points)
		{
			return null;
		}

		[Token(Token = "0x6000F4F")]
		[Address(RVA = "0xF7218C", Offset = "0xF7218C", VA = "0xF7218C")]
		private Point[] TranslateTo(Point[] points, Point p)
		{
			return null;
		}

		[Token(Token = "0x6000F50")]
		[Address(RVA = "0xF720CC", Offset = "0xF720CC", VA = "0xF720CC")]
		private Point Centroid(Point[] points)
		{
			return null;
		}

		[Token(Token = "0x6000F51")]
		[Address(RVA = "0xF722F4", Offset = "0xF722F4", VA = "0xF722F4")]
		public Point[] Resample(Point[] points, int n)
		{
			return null;
		}

		[Token(Token = "0x6000F52")]
		[Address(RVA = "0xF72704", Offset = "0xF72704", VA = "0xF72704")]
		private float PathLength(Point[] points)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20002B0")]
	public class GestureIO
	{
		[Token(Token = "0x6000F53")]
		[Address(RVA = "0xF727A8", Offset = "0xF727A8", VA = "0xF727A8")]
		public static Gesture ReadGestureFromXML(string xml)
		{
			return null;
		}

		[Token(Token = "0x6000F54")]
		[Address(RVA = "0xF72DA4", Offset = "0xF72DA4", VA = "0xF72DA4")]
		public static Gesture ReadGestureFromFile(string fileName)
		{
			return null;
		}

		[Token(Token = "0x6000F55")]
		[Address(RVA = "0xF728F4", Offset = "0xF728F4", VA = "0xF728F4")]
		private static Gesture ReadGesture(XmlTextReader xmlReader)
		{
			return null;
		}

		[Token(Token = "0x6000F56")]
		[Address(RVA = "0xF72EC8", Offset = "0xF72EC8", VA = "0xF72EC8")]
		public static void WriteGesture(Point[] points, string gestureName, string fileName)
		{
		}

		[Token(Token = "0x6000F57")]
		[Address(RVA = "0xF732AC", Offset = "0xF732AC", VA = "0xF732AC")]
		public GestureIO()
		{
		}
	}
	[Token(Token = "0x20002B1")]
	public class Point
	{
		[Token(Token = "0x4001257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float X;

		[Token(Token = "0x4001258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float Y;

		[Token(Token = "0x4001259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int StrokeID;

		[Token(Token = "0x6000F58")]
		[Address(RVA = "0xF726C8", Offset = "0xF726C8", VA = "0xF726C8")]
		public Point(float x, float y, int strokeId)
		{
		}
	}
	[Token(Token = "0x20002B2")]
	public class PointCloudRecognizer
	{
		[Token(Token = "0x6000F59")]
		[Address(RVA = "0xF732B4", Offset = "0xF732B4", VA = "0xF732B4")]
		public static Result Classify(Gesture candidate, Gesture[] trainingSet)
		{
			return default(Result);
		}

		[Token(Token = "0x6000F5A")]
		[Address(RVA = "0xF7341C", Offset = "0xF7341C", VA = "0xF7341C")]
		private static float GreedyCloudMatch(Point[] points1, Point[] points2)
		{
			return default(float);
		}

		[Token(Token = "0x6000F5B")]
		[Address(RVA = "0xF73554", Offset = "0xF73554", VA = "0xF73554")]
		private static float CloudDistance(Point[] points1, Point[] points2, int startIndex)
		{
			return default(float);
		}

		[Token(Token = "0x6000F5C")]
		[Address(RVA = "0xF73718", Offset = "0xF73718", VA = "0xF73718")]
		public PointCloudRecognizer()
		{
		}
	}
	[Token(Token = "0x20002B3")]
	public struct Result
	{
		[Token(Token = "0x400125A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string GestureClass;

		[Token(Token = "0x400125B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float Score;
	}
}
namespace nTools.PrefabPainter
{
	[Token(Token = "0x20002B4")]
	public class PrefabPainterSceneSettings : MonoBehaviour
	{
		[Token(Token = "0x400125C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject parentForPrefabs;

		[Token(Token = "0x6000F5D")]
		[Address(RVA = "0xF73720", Offset = "0xF73720", VA = "0xF73720")]
		public PrefabPainterSceneSettings()
		{
		}
	}
}
namespace Prime31.MessageKitLite
{
	[Token(Token = "0x20002B5")]
	public interface MessageReceiver
	{
		[Token(Token = "0x6000F5E")]
		void onMessageReceived(int messageType);
	}
	[Token(Token = "0x20002B6")]
	public interface MessageReceiver<T>
	{
		[Token(Token = "0x6000F5F")]
		void onMessageReceived(int messageType, T message);
	}
	[Token(Token = "0x20002B7")]
	public interface MessageReceiver<T, U>
	{
		[Token(Token = "0x6000F60")]
		void onMessageReceived(int messageType, T message, U other);
	}
	[Token(Token = "0x20002B8")]
	public static class MessageKitLite
	{
		[Token(Token = "0x400125D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<int, List<MessageReceiver>> _messageTable;

		[Token(Token = "0x6000F61")]
		[Address(RVA = "0xF73728", Offset = "0xF73728", VA = "0xF73728")]
		public static void addObserver(int messageType, MessageReceiver handler)
		{
		}

		[Token(Token = "0x6000F62")]
		[Address(RVA = "0xF73930", Offset = "0xF73930", VA = "0xF73930")]
		public static void removeObserver(int messageType, MessageReceiver handler)
		{
		}

		[Token(Token = "0x6000F63")]
		[Address(RVA = "0xF73A20", Offset = "0xF73A20", VA = "0xF73A20")]
		public static void post(int messageType)
		{
		}

		[Token(Token = "0x6000F64")]
		[Address(RVA = "0xF73B88", Offset = "0xF73B88", VA = "0xF73B88")]
		public static void clearMessageTable(int messageType)
		{
		}

		[Token(Token = "0x6000F65")]
		[Address(RVA = "0xF73C58", Offset = "0xF73C58", VA = "0xF73C58")]
		public static void clearMessageTable()
		{
		}
	}
	[Token(Token = "0x20002B9")]
	public static class MessageKitLite<U>
	{
		[Token(Token = "0x400125E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<int, List<MessageReceiver<U>>> _messageTable;

		[Token(Token = "0x6000F67")]
		public static void addObserver(int messageType, MessageReceiver<U> handler)
		{
		}

		[Token(Token = "0x6000F68")]
		public static void removeObserver(int messageType, MessageReceiver<U> handler)
		{
		}

		[Token(Token = "0x6000F69")]
		public static void post(int messageType, U param)
		{
		}

		[Token(Token = "0x6000F6A")]
		public static void clearMessageTable(int messageType)
		{
		}

		[Token(Token = "0x6000F6B")]
		public static void clearMessageTable()
		{
		}
	}
	[Token(Token = "0x20002BA")]
	public static class MessageKitLite<U, V>
	{
		[Token(Token = "0x400125F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<int, List<MessageReceiver<U, V>>> _messageTable;

		[Token(Token = "0x6000F6D")]
		public static void addObserver(int messageType, MessageReceiver<U, V> handler)
		{
		}

		[Token(Token = "0x6000F6E")]
		public static void removeObserver(int messageType, MessageReceiver<U, V> handler)
		{
		}

		[Token(Token = "0x6000F6F")]
		public static void post(int messageType, U firstParam, V secondParam)
		{
		}

		[Token(Token = "0x6000F70")]
		public static void clearMessageTable(int messageType)
		{
		}

		[Token(Token = "0x6000F71")]
		public static void clearMessageTable()
		{
		}
	}
}
namespace Prime31.MessageKit
{
	[Token(Token = "0x20002BB")]
	public static class MessageKit
	{
		[Token(Token = "0x4001260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<int, List<Action>> _messageTable;

		[Token(Token = "0x6000F73")]
		[Address(RVA = "0xF73D68", Offset = "0xF73D68", VA = "0xF73D68")]
		public static void addObserver(int messageType, Action handler)
		{
		}

		[Token(Token = "0x6000F74")]
		[Address(RVA = "0xF73F70", Offset = "0xF73F70", VA = "0xF73F70")]
		public static void removeObserver(int messageType, Action handler)
		{
		}

		[Token(Token = "0x6000F75")]
		[Address(RVA = "0xF74060", Offset = "0xF74060", VA = "0xF74060")]
		public static void post(int messageType)
		{
		}

		[Token(Token = "0x6000F76")]
		[Address(RVA = "0xF74160", Offset = "0xF74160", VA = "0xF74160")]
		public static void clearMessageTable(int messageType)
		{
		}

		[Token(Token = "0x6000F77")]
		[Address(RVA = "0xF74230", Offset = "0xF74230", VA = "0xF74230")]
		public static void clearMessageTable()
		{
		}

		[Token(Token = "0x6000F78")]
		[Address(RVA = "0xF742A8", Offset = "0xF742A8", VA = "0xF742A8")]
		public static void LogObservers(int messageType)
		{
		}
	}
	[Token(Token = "0x20002BC")]
	public static class MessageKit<U>
	{
		[Token(Token = "0x4001261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<int, List<Action<U>>> _messageTable;

		[Token(Token = "0x6000F7A")]
		public static void addObserver(int messageType, Action<U> handler)
		{
		}

		[Token(Token = "0x6000F7B")]
		public static void removeObserver(int messageType, Action<U> handler)
		{
		}

		[Token(Token = "0x6000F7C")]
		public static void post(int messageType, U param)
		{
		}

		[Token(Token = "0x6000F7D")]
		public static void clearMessageTable(int messageType)
		{
		}

		[Token(Token = "0x6000F7E")]
		public static void clearMessageTable()
		{
		}

		[Token(Token = "0x6000F7F")]
		public static void logObservers(int messageType)
		{
		}
	}
	[Token(Token = "0x20002BD")]
	public static class MessageKit<U, V>
	{
		[Token(Token = "0x4001262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<int, List<Action<U, V>>> _messageTable;

		[Token(Token = "0x6000F81")]
		public static void addObserver(int messageType, Action<U, V> handler)
		{
		}

		[Token(Token = "0x6000F82")]
		public static void removeObserver(int messageType, Action<U, V> handler)
		{
		}

		[Token(Token = "0x6000F83")]
		public static void post(int messageType, U firstParam, V secondParam)
		{
		}

		[Token(Token = "0x6000F84")]
		public static void clearMessageTable(int messageType)
		{
		}

		[Token(Token = "0x6000F85")]
		public static void clearMessageTable()
		{
		}

		[Token(Token = "0x6000F86")]
		public static void logObservers(int messageType)
		{
		}
	}
}
namespace MagicLightProbes
{
	[Token(Token = "0x20002BE")]
	[ExecuteInEditMode]
	public class Rotator : MonoBehaviour
	{
		[Token(Token = "0x4001263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 localRotationSpeed;

		[Token(Token = "0x4001264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 worldRotationSpeed;

		[Token(Token = "0x4001265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool executeInEditMode;

		[Token(Token = "0x4001266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool unscaledTime;

		[Token(Token = "0x6000F88")]
		[Address(RVA = "0xF7489C", Offset = "0xF7489C", VA = "0xF7489C")]
		private void OnRenderObject()
		{
		}

		[Token(Token = "0x6000F89")]
		[Address(RVA = "0xF74A5C", Offset = "0xF74A5C", VA = "0xF74A5C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F8A")]
		[Address(RVA = "0xF748CC", Offset = "0xF748CC", VA = "0xF748CC")]
		private void Rotate()
		{
		}

		[Token(Token = "0x6000F8B")]
		[Address(RVA = "0xF74A84", Offset = "0xF74A84", VA = "0xF74A84")]
		public Rotator()
		{
		}
	}
	[Token(Token = "0x20002BF")]
	[HelpURL("https://motion-games-studio.gitbook.io/magic-light-probes/system-components/main-component")]
	[ExecuteInEditMode]
	public class MagicLightProbes : MonoBehaviour
	{
		[Token(Token = "0x20002C0")]
		public struct VolumeParameters
		{
			[Token(Token = "0x400131C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int volumeIndex;

			[Token(Token = "0x400131D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public Vector3 position;

			[Token(Token = "0x400131E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 demensions;

			[Token(Token = "0x6000F91")]
			[Address(RVA = "0xF75794", Offset = "0xF75794", VA = "0xF75794")]
			public VolumeParameters(int _volumeIndex, Vector3 _position, Vector3 _demensions)
			{
			}
		}

		[Token(Token = "0x20002C1")]
		public enum FillingMode
		{
			[Token(Token = "0x4001320")]
			VerticalDublicating,
			[Token(Token = "0x4001321")]
			FullFilling,
			[Token(Token = "0x4001322")]
			SeparateFilling
		}

		[Token(Token = "0x20002C2")]
		public enum Workflow
		{
			[Token(Token = "0x4001324")]
			Simple,
			[Token(Token = "0x4001325")]
			Advanced
		}

		[Token(Token = "0x20002C3")]
		public enum BoundsDisplayMode
		{
			[Token(Token = "0x4001327")]
			Always,
			[Token(Token = "0x4001328")]
			OnSelection
		}

		[Token(Token = "0x20002C4")]
		public enum DebugPasses
		{
			[Token(Token = "0x400132A")]
			MaximumHeight,
			[Token(Token = "0x400132B")]
			GeometryCollision,
			[Token(Token = "0x400132C")]
			GeometryIntersections,
			[Token(Token = "0x400132D")]
			NearGeometry,
			[Token(Token = "0x400132E")]
			OutOfRange,
			[Token(Token = "0x400132F")]
			OutOfRangeBorders,
			[Token(Token = "0x4001330")]
			ShadingBorders,
			[Token(Token = "0x4001331")]
			ContrastAreas,
			[Token(Token = "0x4001332")]
			NearLights,
			[Token(Token = "0x4001333")]
			LightIntensity,
			[Token(Token = "0x4001334")]
			UnlitProbes,
			[Token(Token = "0x4001335")]
			EqualProbes,
			[Token(Token = "0x4001336")]
			GeometryEdges,
			[Token(Token = "0x4001337")]
			EqualColor
		}

		[Token(Token = "0x20002C5")]
		public enum DrawModes
		{
			[Token(Token = "0x4001339")]
			Accepted,
			[Token(Token = "0x400133A")]
			Culled,
			[Token(Token = "0x400133B")]
			Both
		}

		[Token(Token = "0x20002C6")]
		public enum CalculationTarget
		{
			[Token(Token = "0x400133D")]
			GeometryEdges,
			[Token(Token = "0x400133E")]
			GeneralCalculation
		}

		[Serializable]
		[Token(Token = "0x20002C7")]
		private struct TempPointData
		{
			[Token(Token = "0x400133F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float xPos;

			[Token(Token = "0x4001340")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float yPos;

			[Token(Token = "0x4001341")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float zPos;

			[Token(Token = "0x6000F92")]
			[Address(RVA = "0xF757A8", Offset = "0xF757A8", VA = "0xF757A8")]
			public TempPointData(Vector3 _position)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002C8")]
		public class WorkPathFoundEvent : UnityEvent<string>
		{
			[Token(Token = "0x6000F93")]
			[Address(RVA = "0xF757B4", Offset = "0xF757B4", VA = "0xF757B4")]
			public WorkPathFoundEvent()
			{
			}
		}

		[Token(Token = "0x4001267")]
		private const string COMPUTE_SHADERS_FOLDER = "/Passes/Compute Shaders/";

		[Token(Token = "0x4001268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IEnumerator colorThresholdRecalculationRoutine;

		[Token(Token = "0x4001269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IEnumerator lightProbesVolumeCalculatingRoutine;

		[Token(Token = "0x400126A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IEnumerator lightProbesVolumeCalculatingSubRoutine;

		[Token(Token = "0x400126B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IEnumerator executingPassesRoutine;

		[Token(Token = "0x400126C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IEnumerator volumeDivideingRoutine;

		[Token(Token = "0x400126D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool autoSaveSettings;

		[Token(Token = "0x400126E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public MLPSettings lastSettingsAsset;

		[Token(Token = "0x400126F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<string> groundAndFloorObjects;

		[Token(Token = "0x4001270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<string> storedGroundAndFloorKeywords;

		[Token(Token = "0x4001271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject probesVolume;

		[Token(Token = "0x4001272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool useDynamicDensity;

		[Token(Token = "0x4001273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float volumeSpacing;

		[Token(Token = "0x4001274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float volumeSpacingMin;

		[Token(Token = "0x4001275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float volumeSpacingMax;

		[Token(Token = "0x4001276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float cornersDetectionThreshold;

		[Token(Token = "0x4001277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float cornersDetectionThresholdMin;

		[Token(Token = "0x4001278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float cornersDetectionThresholdMax;

		[Token(Token = "0x4001279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float lastCornersDetectionThreshold;

		[Token(Token = "0x400127A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float lastCornersDetectionThresholdMin;

		[Token(Token = "0x400127B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float lastCornersDetectionThresholdMax;

		[Token(Token = "0x400127C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public int lastMaxProbesInVolume;

		[Token(Token = "0x400127D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public int maxProbesInVolume;

		[Token(Token = "0x400127E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public int defaultMaxProbesCount;

		[Token(Token = "0x400127F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float lastVolumeSpacing;

		[Token(Token = "0x4001280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float lastVolumeSpacingMin;

		[Token(Token = "0x4001281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float lastVolumeSpacingMax;

		[Token(Token = "0x4001282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public bool volumeSpacingChanged;

		[Token(Token = "0x4001283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA9")]
		public bool tooManySubVolumes;

		[Token(Token = "0x4001284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public FillingMode fillingMode;

		[Token(Token = "0x4001285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public MLPSettings settingsAsset;

		[Token(Token = "0x4001286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Workflow workflow;

		[Token(Token = "0x4001287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float maxHeightAboveGeometry;

		[Token(Token = "0x4001288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public float lastMaxHeightAboveGeometry;

		[Token(Token = "0x4001289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float maxHeightAboveTerrain;

		[Token(Token = "0x400128A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public bool considerDistanceToLights;

		[Token(Token = "0x400128B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float lightIntensityTreshold;

		[Token(Token = "0x400128C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public float colorTreshold;

		[Token(Token = "0x400128D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public float collisionDetectionRadius;

		[Token(Token = "0x400128E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public bool saveProbesNearbyGeometry;

		[Token(Token = "0x400128F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public float cornerProbesSpacing;

		[Token(Token = "0x4001290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public float nearbyGeometryDetectionRadius;

		[Token(Token = "0x4001291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public float nearbyGeometryDetectionRadiusMin;

		[Token(Token = "0x4001292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public float nearbyGeometryDetectionRadiusMax;

		[Token(Token = "0x4001293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public float distanceFromNearbyGeometry;

		[Token(Token = "0x4001294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public bool fillEquivalentVolume;

		[Token(Token = "0x4001295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public float equivalentVolumeFillingRate;

		[Token(Token = "0x4001296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public bool fillUnlitVolume;

		[Token(Token = "0x4001297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF9")]
		public bool fillFreeVolume;

		[Token(Token = "0x4001298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		public float unlitVolumeFillingRate;

		[Token(Token = "0x4001299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public float freeVolumeFillingRate;

		[Token(Token = "0x400129A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		public bool cullAcceptedVolume;

		[Token(Token = "0x400129B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public float acceptedVolumeFillingRate;

		[Token(Token = "0x400129C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public float nearbyGeometryVolumeFillingRate;

		[Token(Token = "0x400129D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public float verticalDublicatingHeight;

		[Token(Token = "0x400129E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public float verticalDublicatingStep;

		[Token(Token = "0x400129F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public LayerMask raycastFilter;

		[Token(Token = "0x40012A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public List<MLPLight> excludedLights;

		[Token(Token = "0x40012A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public LayerMask layerMask;

		[Token(Token = "0x40012A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		public int firstCollisionLayer;

		[Token(Token = "0x40012A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public bool useMultithreading;

		[Token(Token = "0x40012A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public GameObject previousSelection;

		[Token(Token = "0x40012A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public bool unloaded;

		[Token(Token = "0x40012A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x141")]
		public bool sceneChanging;

		[Token(Token = "0x40012A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x142")]
		public bool waitForPrevious;

		[Token(Token = "0x40012A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public MagicLightProbes previousVolume;

		[Token(Token = "0x40012A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public bool optimizeForMixedLighting;

		[Token(Token = "0x40012AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x151")]
		public bool lastOptimizeForMixedLightingValue;

		[Token(Token = "0x40012AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x152")]
		public bool lastUseDynamicDensityValue;

		[Token(Token = "0x40012AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x153")]
		public bool preventLeakageThroughWalls;

		[Token(Token = "0x40012AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		public bool useVolumeBottom;

		[Token(Token = "0x40012AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x155")]
		public bool placeProbesOnGeometryEdges;

		[Token(Token = "0x40012AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public float lastColorThreshold;

		[Token(Token = "0x40012B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		public float lastLightIntensityThreshold;

		[Token(Token = "0x40012B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public float lastEquivalentVolumeFillingRate;

		[Token(Token = "0x40012B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		public float lastUnlitVolumeFillingRate;

		[Token(Token = "0x40012B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public float lastFreeVolumeFillingRate;

		[Token(Token = "0x40012B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		public float lastCornerProbesSpacing;

		[Token(Token = "0x40012B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public float lastDistanceFromGeometry;

		[Token(Token = "0x40012B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		public bool debugMode;

		[Token(Token = "0x40012B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public float debugObjectScale;

		[Token(Token = "0x40012B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		public BoundsDisplayMode boundsDisplayMode;

		[Token(Token = "0x40012B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public DebugPasses debugPass;

		[Token(Token = "0x40012BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		public DrawModes drawMode;

		[Token(Token = "0x40012BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public bool debugShowLightIntensity;

		[Token(Token = "0x40012BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x189")]
		public bool showPreviewGrid;

		[Token(Token = "0x40012BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18A")]
		public bool nextStep;

		[Token(Token = "0x40012BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18B")]
		public bool cullByColor;

		[Token(Token = "0x40012BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		public bool forceSaveProbesOnShadingBorders;

		[Token(Token = "0x40012C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public string dataPath;

		[Token(Token = "0x40012C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public string workPath;

		[Token(Token = "0x40012C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public bool workPathFound;

		[Token(Token = "0x40012C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public List<Vector3> localFinishedPositions;

		[Token(Token = "0x40012C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public ComputeShader calculateVolumeFilling;

		[Token(Token = "0x40012C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public ComputeShader calculateProbeSpacing;

		[Token(Token = "0x40012C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public ComputeShader calculateDistanceFromGeometry;

		[Token(Token = "0x40012C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public MLPVolume currentVolume;

		[Token(Token = "0x40012C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public bool recalculationRequired;

		[Token(Token = "0x40012C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private List<Collider> lightColliders;

		[Token(Token = "0x40012CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private List<Collider> objectColliders;

		[Token(Token = "0x40012CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private List<MLPPointData> finalDebugAcceptedPoints;

		[Token(Token = "0x40012CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private List<MLPPointData> finalDebugCulledPoints;

		[Token(Token = "0x40012CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private List<GameObject> tempObjects;

		[Token(Token = "0x40012CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private List<GameObject> temporarilyDisabledDynamicObjects;

		[Token(Token = "0x40012CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private List<GameObject> staticObjectsWithoutCollider;

		[Token(Token = "0x40012D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		public List<GameObject> finalStaticGameObjectsList;

		[Token(Token = "0x40012D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private GameObject combinedVolumeObject;

		[Token(Token = "0x40012D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private VolumeParameters currentEditingVolume;

		[Token(Token = "0x40012D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23C")]
		private Vector3 currentSelectedObjectLastPosition;

		[Token(Token = "0x40012D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private GameObject lastSelectedObject;

		[Token(Token = "0x40012D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		public bool cancelCombination;

		[Token(Token = "0x40012D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		public List<IEnumerator> passesToExecute;

		[Token(Token = "0x40012D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		public List<GameObject> staticObjects;

		[Token(Token = "0x40012D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		public List<MLPLight> lights;

		[Token(Token = "0x40012D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		public List<MLPPointData> tmpSharedPointsArray;

		[Token(Token = "0x40012DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		public List<MLPPointData> tmpOutOfRangePoints;

		[Token(Token = "0x40012DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		public List<MLPPointData> tmpOutOfMaxHeightPoints;

		[Token(Token = "0x40012DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		public List<MLPPointData> tmpGeometryCollisionPoints;

		[Token(Token = "0x40012DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		public List<MLPPointData> tmpContrastOnOutOfRangePoints;

		[Token(Token = "0x40012DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		public List<MLPPointData> tmpContrastShadingBordersPoints;

		[Token(Token = "0x40012DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		public List<MLPPointData> tmpUnlitPoints;

		[Token(Token = "0x40012E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		public List<MLPPointData> tmpFreePoints;

		[Token(Token = "0x40012E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		public List<MLPPointData> tmpNearbyGeometryPoints;

		[Token(Token = "0x40012E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		public List<MLPPointData> tmpPointsNearGeometryIntersections;

		[Token(Token = "0x40012E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		public List<MLPPointData> tmpNearbyLightsPoints;

		[Token(Token = "0x40012E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		public List<MLPPointData> tmpEqualPoints;

		[Token(Token = "0x40012E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		public List<MLPPointData> debugCulledPoints;

		[Token(Token = "0x40012E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
		public List<MLPPointData> debugAcceptedPoints;

		[Token(Token = "0x40012E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
		public List<GameObject> subVolumesDivided;

		[Token(Token = "0x40012E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
		public List<Vector3> points;

		[Token(Token = "0x40012E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
		public List<VolumeParameters> innerVolumes;

		[Token(Token = "0x40012EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
		public List<VolumeParameters> subVolumesParameters;

		[Token(Token = "0x40012EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		public List<MagicLightProbes> innerVolumesObjects;

		[Token(Token = "0x40012EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		public List<LayerMask> layerMasks;

		[Token(Token = "0x40012ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
		public List<Vector3> transformedPoints;

		[Token(Token = "0x40012EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
		public string assetEditorPath;

		[Token(Token = "0x40012EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
		public MagicLightProbes parentVolume;

		[Token(Token = "0x40012F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool operationalDataLost;

		[Token(Token = "0x40012F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
		public bool localOperationalDataLost;

		[Token(Token = "0x40012F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x329")]
		public bool recombinationNeeded;

		[Token(Token = "0x40012F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32A")]
		public bool isInBackground;

		[Token(Token = "0x40012F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32B")]
		public bool realtimeEditing;

		[Token(Token = "0x40012F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32C")]
		public bool calculated;

		[Token(Token = "0x40012F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32D")]
		public bool calculatingError;

		[Token(Token = "0x40012F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
		public int xPointsCount;

		[Token(Token = "0x40012F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x334")]
		public int yPointsCount;

		[Token(Token = "0x40012F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x338")]
		public int zPointsCount;

		[Token(Token = "0x40012FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33C")]
		public float prevVolumeScaleX;

		[Token(Token = "0x40012FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
		public float prevVolumeScaleY;

		[Token(Token = "0x40012FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x344")]
		public float prevVolumeScaleZ;

		[Token(Token = "0x40012FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x348")]
		public int totalProbes;

		[Token(Token = "0x40012FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34C")]
		public int totalProbesInSubVolume;

		[Token(Token = "0x40012FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x350")]
		public int totalProbesInVolume;

		[Token(Token = "0x4001300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x354")]
		public bool calculatingVolume;

		[Token(Token = "0x4001301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x355")]
		public bool calculatingVolumeSubPass;

		[Token(Token = "0x4001302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x358")]
		public string currentPass;

		[Token(Token = "0x4001303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x360")]
		public int currentPassProgressCounter;

		[Token(Token = "0x4001304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x364")]
		public int currentPassProgressFrameSkipper;

		[Token(Token = "0x4001305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x368")]
		public float totalProgress;

		[Token(Token = "0x4001306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36C")]
		public float currentPassProgress;

		[Token(Token = "0x4001307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x370")]
		public int selectedTab;

		[Token(Token = "0x4001308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x374")]
		public bool showOptionsInManagerWindow;

		[Token(Token = "0x4001309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x375")]
		public bool restored;

		[Token(Token = "0x400130A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x378")]
		public int currentVolumePart;

		[Token(Token = "0x400130B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x37C")]
		public float eta;

		[Token(Token = "0x400130C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x380")]
		public bool changed;

		[Token(Token = "0x400130D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x381")]
		public bool redivideParts;

		[Token(Token = "0x400130E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x382")]
		public bool combinedVolumeError;

		[Token(Token = "0x400130F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x383")]
		public bool isInPrefab;

		[Token(Token = "0x4001310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x384")]
		public Vector3 prefabPosition;

		[Token(Token = "0x4001311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x390")]
		public GameObject prefabRoot;

		[Token(Token = "0x4001312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x398")]
		public MLPPrefab prefabConnectionObject;

		[Token(Token = "0x4001313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A0")]
		public string prefabRootName;

		[Token(Token = "0x4001314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A8")]
		public bool calculatedFromPrefab;

		[Token(Token = "0x4001315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B0")]
		public string prefabUID;

		[Token(Token = "0x4001316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B8")]
		private bool passesExecuting;

		[Token(Token = "0x4001317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3BC")]
		private int totalProgressCounter;

		[Token(Token = "0x4001318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C0")]
		private int totalProgressFrameSkipper;

		[Token(Token = "0x4001319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C4")]
		private float startTime;

		[Token(Token = "0x400131A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C8")]
		private float endTime;

		[Token(Token = "0x400131B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3CC")]
		private bool scenePreparing;

		[Token(Token = "0x6000F8C")]
		[Address(RVA = "0xF74A8C", Offset = "0xF74A8C", VA = "0xF74A8C")]
		public void CheckForNearContrast(MLPPointData pointForCheck)
		{
		}

		[Token(Token = "0x6000F8D")]
		[Address(RVA = "0xF74E74", Offset = "0xF74E74", VA = "0xF74E74")]
		public bool UpdateProgress(int count, int period = 100)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F8E")]
		[Address(RVA = "0xF74EBC", Offset = "0xF74EBC", VA = "0xF74EBC")]
		private bool UpdateTotalProgress(int count, int period = 100)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F8F")]
		[Address(RVA = "0xF74F04", Offset = "0xF74F04", VA = "0xF74F04")]
		public MagicLightProbes()
		{
		}
	}
	[Token(Token = "0x20002C9")]
	[HelpURL("https://motion-games-studio.gitbook.io/magic-light-probes/system-components/mlp-combined-volume")]
	[ExecuteInEditMode]
	public class MLPCombinedVolume : MonoBehaviour
	{
		[Token(Token = "0x6000F94")]
		[Address(RVA = "0xF757FC", Offset = "0xF757FC", VA = "0xF757FC")]
		public MLPCombinedVolume()
		{
		}
	}
	[Token(Token = "0x20002CA")]
	[ExecuteInEditMode]
	[DisallowMultipleComponent]
	[HelpURL("https://motion-games-studio.gitbook.io/magic-light-probes/system-components/mlp-light")]
	public class MLPLight : MonoBehaviour
	{
		[Token(Token = "0x20002CB")]
		public enum CalculationMode
		{
			[Token(Token = "0x4001367")]
			AccurateShadows,
			[Token(Token = "0x4001368")]
			LightIntensity
		}

		[Token(Token = "0x20002CC")]
		public enum MLPLightType
		{
			[Token(Token = "0x400136A")]
			Spot,
			[Token(Token = "0x400136B")]
			Directional,
			[Token(Token = "0x400136C")]
			Point,
			[Token(Token = "0x400136D")]
			Area,
			[Token(Token = "0x400136E")]
			Mesh
		}

		[Token(Token = "0x20002CD")]
		public enum MLPLightTypeMA
		{
			[Token(Token = "0x4001370")]
			Area = 3,
			[Token(Token = "0x4001371")]
			Mesh
		}

		[Token(Token = "0x20002CE")]
		public enum TracePointSettingMode
		{
			[Token(Token = "0x4001373")]
			Auto,
			[Token(Token = "0x4001374")]
			Custom
		}

		[Token(Token = "0x20002CF")]
		public enum ShadowmaskMode
		{
			[Token(Token = "0x4001376")]
			Shadowmask,
			[Token(Token = "0x4001377")]
			DistanceShadowmask
		}

		[Token(Token = "0x4001342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MLPLightType lightType;

		[Token(Token = "0x4001343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public MLPLightType lastLightType;

		[Token(Token = "0x4001344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MLPLightTypeMA lightTypeMA;

		[Token(Token = "0x4001345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public CalculationMode calculationMode;

		[Token(Token = "0x4001346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TracePointSettingMode tracePointSettingType;

		[Token(Token = "0x4001347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LightmapBakeType lightMode;

		[Token(Token = "0x4001348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ShadowmaskMode shadowmaskMode;

		[Token(Token = "0x4001349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Light targetLight;

		[Token(Token = "0x400134A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject parentGameObject;

		[Token(Token = "0x400134B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 position;

		[Token(Token = "0x400134C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Vector3 forward;

		[Token(Token = "0x400134D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool saveNearbyProbes;

		[Token(Token = "0x400134E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float saveRadius;

		[Token(Token = "0x400134F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float range;

		[Token(Token = "0x4001350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public bool useSourceParameters;

		[Token(Token = "0x4001351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		public bool reverseDirection;

		[Token(Token = "0x4001352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float angle;

		[Token(Token = "0x4001353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public bool customTracePoints;

		[Token(Token = "0x4001354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
		public bool accurateTrace;

		[Token(Token = "0x4001355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public int accuracy;

		[Token(Token = "0x4001356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public int lastAccuracy;

		[Token(Token = "0x4001357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool isDirectional;

		[Token(Token = "0x4001358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float tracePointSize;

		[Token(Token = "0x4001359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float lastTracePointSize;

		[Token(Token = "0x400135A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public MeshFilter lastMesh;

		[Token(Token = "0x400135B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public List<GameObject> tracePoints;

		[Token(Token = "0x400135C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public List<MLPTracePoint> tracePointsData;

		[Token(Token = "0x400135D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public MLPTracePoint mainTracePoint;

		[Token(Token = "0x400135E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public MagicLightProbes parentVolume;

		[Token(Token = "0x400135F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public bool showOptionsInManagerWindow;

		[Token(Token = "0x4001360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float intensity;

		[Token(Token = "0x4001361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool resetEditor;

		[Token(Token = "0x4001362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		public bool showLightOnScene;

		[Token(Token = "0x4001363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC2")]
		public bool saveOnOutOfRange;

		[Token(Token = "0x4001364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC3")]
		public bool isHDRP;

		[Token(Token = "0x4001365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public Vector2 hdrpAreaSize;

		[Token(Token = "0x6000F95")]
		[Address(RVA = "0xF75804", Offset = "0xF75804", VA = "0xF75804")]
		public MLPLight()
		{
		}
	}
	[Token(Token = "0x20002D0")]
	public class MLPPointData
	{
		[Token(Token = "0x4001378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float lightIntensity;

		[Token(Token = "0x4001379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float maxIntencity;

		[Token(Token = "0x400137A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 position;

		[Token(Token = "0x400137B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int col;

		[Token(Token = "0x400137C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int row;

		[Token(Token = "0x400137D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int depth;

		[Token(Token = "0x400137E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<float> distancesToLights;

		[Token(Token = "0x400137F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<Vector3> collisionPoints;

		[Token(Token = "0x4001380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<MLPPointData> nearbyPoints;

		[Token(Token = "0x4001381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<MLPPointData> nearbyPointsOptimaziable;

		[Token(Token = "0x4001382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool removed;

		[Token(Token = "0x4001383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool outOfRange;

		[Token(Token = "0x4001384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		public bool inSaveRange;

		[Token(Token = "0x4001385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		public bool savedNearGeometry;

		[Token(Token = "0x4001386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool contrastOnOutOfRangeArea;

		[Token(Token = "0x4001387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		public bool inRangeOfLight;

		[Token(Token = "0x4001388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
		public bool contrastOnShadingArea;

		[Token(Token = "0x4001389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x57")]
		public bool equalIntensity;

		[Token(Token = "0x400138A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool equalColor;

		[Token(Token = "0x400138B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		public bool borderPoint;

		[Token(Token = "0x400138C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		public bool outOfMaxHeight;

		[Token(Token = "0x400138D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float angleToLight;

		[Token(Token = "0x400138E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 contactPoint;

		[Token(Token = "0x400138F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public bool inCorner;

		[Token(Token = "0x4001390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		public bool lockForCull;

		[Token(Token = "0x4001391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6E")]
		public bool onGeometryEdge;

		[Token(Token = "0x4001392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6F")]
		public bool lightLeakLocked;

		[Token(Token = "0x4001393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Vector3 collisionNormal;

		[Token(Token = "0x4001394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public List<MLPLight> inRangeForLights;

		[Token(Token = "0x4001395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public List<MLPLight> inShadowForLights;

		[Token(Token = "0x4001396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public GameObject temporaryObject;

		[Token(Token = "0x4001397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public GameObject collisionObject;

		[Token(Token = "0x4001398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Color averagedColor;

		[Token(Token = "0x4001399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool xEndPoint;

		[Token(Token = "0x400139A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		public bool yEndPoint;

		[Token(Token = "0x400139B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB2")]
		public bool zEndPoint;

		[Token(Token = "0x400139C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB3")]
		public bool xStartPoint;

		[Token(Token = "0x400139D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public bool yStartPoint;

		[Token(Token = "0x400139E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB5")]
		public bool zStartPoint;

		[Token(Token = "0x400139F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public int equivalent;

		[Token(Token = "0x40013A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float avaragedColorValue;

		[Token(Token = "0x40013A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool isUnlit;

		[Token(Token = "0x6000F96")]
		[Address(RVA = "0xF758E8", Offset = "0xF758E8", VA = "0xF758E8")]
		public void SetPosition(Vector3 position)
		{
		}

		[Token(Token = "0x6000F97")]
		[Address(RVA = "0xF758F4", Offset = "0xF758F4", VA = "0xF758F4")]
		public void SetOutOfRange(bool visibility)
		{
		}

		[Token(Token = "0x6000F98")]
		[Address(RVA = "0xF75900", Offset = "0xF75900", VA = "0xF75900")]
		public void SetLightIntensity(float intensity)
		{
		}

		[Token(Token = "0x6000F99")]
		[Address(RVA = "0xF75908", Offset = "0xF75908", VA = "0xF75908")]
		public void SetInSaveRange(bool value)
		{
		}

		[Token(Token = "0x6000F9A")]
		[Address(RVA = "0xF75914", Offset = "0xF75914", VA = "0xF75914")]
		public void SetInContrastArea(bool value)
		{
		}

		[Token(Token = "0x6000F9B")]
		[Address(RVA = "0xF75920", Offset = "0xF75920", VA = "0xF75920")]
		public MLPPointData()
		{
		}
	}
	[Token(Token = "0x20002D1")]
	[ExecuteInEditMode]
	public class MLPPrefab : MonoBehaviour
	{
		[Token(Token = "0x40013A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public new string name;

		[Token(Token = "0x40013A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string uid;

		[Token(Token = "0x6000F9C")]
		[Address(RVA = "0xF75AF0", Offset = "0xF75AF0", VA = "0xF75AF0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000F9D")]
		[Address(RVA = "0xF75B6C", Offset = "0xF75B6C", VA = "0xF75B6C")]
		public MLPPrefab()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002D2")]
	public class MLPTracePoint
	{
		[Token(Token = "0x40013A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 position;

		[Token(Token = "0x40013A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 forward;

		[Token(Token = "0x40013A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string name;

		[Token(Token = "0x40013A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject pointGameObject;

		[Token(Token = "0x6000F9E")]
		[Address(RVA = "0xF75B74", Offset = "0xF75B74", VA = "0xF75B74")]
		public MLPTracePoint()
		{
		}
	}
	[Token(Token = "0x20002D3")]
	[ExecuteInEditMode]
	public class MLPVolume : MonoBehaviour
	{
		[Token(Token = "0x40013A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public MagicLightProbes parentRootComponent;

		[Token(Token = "0x40013A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public MeshRenderer selfRenderer;

		[Token(Token = "0x40013AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public bool showGizmo;

		[Token(Token = "0x40013AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool showGizmoSelected;

		[Token(Token = "0x40013AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool isPartVolume;

		[Token(Token = "0x40013AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		public bool isSubdividedPart;

		[Token(Token = "0x40013AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool isCalculated;

		[Token(Token = "0x40013AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool isInProcess;

		[Token(Token = "0x40013B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
		public bool skipped;

		[Token(Token = "0x40013B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int id;

		[Token(Token = "0x40013B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Color colorOnSelection;

		[Token(Token = "0x40013B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<MLPPointData> localAcceptedPoints;

		[Token(Token = "0x40013B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<MLPPointData> localNearbyGeometryPoints;

		[Token(Token = "0x40013B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<MLPPointData> localContrastPoints;

		[Token(Token = "0x40013B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<MLPPointData> localCornerPoints;

		[Token(Token = "0x40013B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public List<Vector3> localNearbyGeometryPointsPositions;

		[Token(Token = "0x40013B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<Vector3> resultNearbyGeometryPointsPositions;

		[Token(Token = "0x40013B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public List<Vector3> localCornerPointsPositions;

		[Token(Token = "0x40013BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public List<Vector3> resultLocalCornerPointsPositions;

		[Token(Token = "0x40013BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public List<Vector3> localEquivalentPointsPositions;

		[Token(Token = "0x40013BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public List<Vector3> resultLocalEquivalentPointsPositions;

		[Token(Token = "0x40013BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public List<Vector3> resultLocalFreePointsPositions;

		[Token(Token = "0x40013BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public List<Vector3> localUnlitPointsPositions;

		[Token(Token = "0x40013BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public List<Vector3> localFreePointsPositions;

		[Token(Token = "0x40013C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public List<Vector3> resultLocalUnlitPointsPositions;

		[Token(Token = "0x40013C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public List<Vector3> localDirections;

		[Token(Token = "0x40013C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public List<Vector3> localAvaragedDirections;

		[Token(Token = "0x40013C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public List<MLPPointData> localColorThresholdEditingPoints;

		[Token(Token = "0x40013C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public int objectsInside;

		[Token(Token = "0x6000F9F")]
		[Address(RVA = "0xF75B7C", Offset = "0xF75B7C", VA = "0xF75B7C")]
		public MLPVolume()
		{
		}
	}
	[Token(Token = "0x20002D4")]
	public class DublicateVertical
	{
		[Token(Token = "0x20002D5")]
		[CompilerGenerated]
		private sealed class <ExecutePass>d__0 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40013C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40013C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MagicLightProbes parent;

			[Token(Token = "0x40013C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <steps>5__2;

			[Token(Token = "0x40013C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private List<MLPPointData> <candidates>5__3;

			[Token(Token = "0x40013CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private List<MLPPointData> <savedNearGeometry>5__4;

			[Token(Token = "0x40013CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int <i>5__5;

			[Token(Token = "0x40013CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private List<MLPPointData>.Enumerator <>7__wrap5;

			[Token(Token = "0x1700016D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000FA6")]
				[Address(RVA = "0xF76B64", Offset = "0xF76B64", VA = "0xF76B64", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700016E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000FA8")]
				[Address(RVA = "0xF76BAC", Offset = "0xF76BAC", VA = "0xF76BAC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000FA2")]
			[Address(RVA = "0xF75F30", Offset = "0xF75F30", VA = "0xF75F30")]
			[DebuggerHidden]
			public <ExecutePass>d__0(int <>1__state)
			{
			}

			[Token(Token = "0x6000FA3")]
			[Address(RVA = "0xF75F60", Offset = "0xF75F60", VA = "0xF75F60", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000FA4")]
			[Address(RVA = "0xF75F7C", Offset = "0xF75F7C", VA = "0xF75F7C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000FA5")]
			[Address(RVA = "0xF76B14", Offset = "0xF76B14", VA = "0xF76B14")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6000FA7")]
			[Address(RVA = "0xF76B6C", Offset = "0xF76B6C", VA = "0xF76B6C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6000FA0")]
		[Address(RVA = "0xF75EBC", Offset = "0xF75EBC", VA = "0xF75EBC")]
		[IteratorStateMachine(typeof(<ExecutePass>d__0))]
		public IEnumerator ExecutePass(MagicLightProbes parent)
		{
			return null;
		}

		[Token(Token = "0x6000FA1")]
		[Address(RVA = "0xF75F58", Offset = "0xF75F58", VA = "0xF75F58")]
		public DublicateVertical()
		{
		}
	}
	[Token(Token = "0x20002D6")]
	public static class RandomGen
	{
		[Token(Token = "0x40013CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static System.Random _global;

		[Token(Token = "0x40013CE")]
		[ThreadStatic]
		private static System.Random _local;

		[Token(Token = "0x6000FA9")]
		[Address(RVA = "0xF76BB4", Offset = "0xF76BB4", VA = "0xF76BB4")]
		public static int Next(int min, int max)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002D7")]
	public class EquivalentProbesOptimization
	{
		[Token(Token = "0x20002D8")]
		[CompilerGenerated]
		private sealed class <ExecutePass>d__0 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40013D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40013D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MagicLightProbes parent;

			[Token(Token = "0x40013D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MLPVolume currentVolume;

			[Token(Token = "0x40013D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool realtimeEditing;

			[Token(Token = "0x40013D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Vector3[] <exit>5__2;

			[Token(Token = "0x40013D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private List<MLPPointData> <tempList>5__3;

			[Token(Token = "0x40013D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private int <i>5__4;

			[Token(Token = "0x1700016F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000FB0")]
				[Address(RVA = "0xF77698", Offset = "0xF77698", VA = "0xF77698", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000170")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000FB2")]
				[Address(RVA = "0xF776E0", Offset = "0xF776E0", VA = "0xF776E0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000FAD")]
			[Address(RVA = "0xF76ED4", Offset = "0xF76ED4", VA = "0xF76ED4")]
			[DebuggerHidden]
			public <ExecutePass>d__0(int <>1__state)
			{
			}

			[Token(Token = "0x6000FAE")]
			[Address(RVA = "0xF76F04", Offset = "0xF76F04", VA = "0xF76F04", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000FAF")]
			[Address(RVA = "0xF76F08", Offset = "0xF76F08", VA = "0xF76F08", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000FB1")]
			[Address(RVA = "0xF776A0", Offset = "0xF776A0", VA = "0xF776A0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6000FAB")]
		[Address(RVA = "0xF76E38", Offset = "0xF76E38", VA = "0xF76E38")]
		[IteratorStateMachine(typeof(<ExecutePass>d__0))]
		public IEnumerator ExecutePass(MagicLightProbes parent, [Optional] MLPVolume currentVolume, bool realtimeEditing = false)
		{
			return null;
		}

		[Token(Token = "0x6000FAC")]
		[Address(RVA = "0xF76EFC", Offset = "0xF76EFC", VA = "0xF76EFC")]
		public EquivalentProbesOptimization()
		{
		}
	}
	[Token(Token = "0x20002D9")]
	public class PartialVolumeFilling
	{
		[Token(Token = "0x20002DA")]
		public enum TargetPoint
		{
			[Token(Token = "0x40013D8")]
			Unlit,
			[Token(Token = "0x40013D9")]
			Equivalent,
			[Token(Token = "0x40013DA")]
			Free
		}

		[Token(Token = "0x20002DB")]
		[CompilerGenerated]
		private sealed class <ExecutePass>d__1 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40013DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40013DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TargetPoint targetPoint;

			[Token(Token = "0x40013DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MagicLightProbes parent;

			[Token(Token = "0x40013DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public MLPVolume currentVolume;

			[Token(Token = "0x40013E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool realtimeEditing;

			[Token(Token = "0x40013E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private List<MLPPointData> <tempList>5__2;

			[Token(Token = "0x40013E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private List<Vector3> <realTimeEditingList>5__3;

			[Token(Token = "0x40013E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private List<Vector3> <targetPoints>5__4;

			[Token(Token = "0x40013E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private float <fillingRate>5__5;

			[Token(Token = "0x40013E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Vector3[] <exit>5__6;

			[Token(Token = "0x40013E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private int <i>5__7;

			[Token(Token = "0x17000171")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000FB8")]
				[Address(RVA = "0xF787F8", Offset = "0xF787F8", VA = "0xF787F8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000172")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000FBA")]
				[Address(RVA = "0xF78840", Offset = "0xF78840", VA = "0xF78840", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000FB5")]
			[Address(RVA = "0xF77794", Offset = "0xF77794", VA = "0xF77794")]
			[DebuggerHidden]
			public <ExecutePass>d__1(int <>1__state)
			{
			}

			[Token(Token = "0x6000FB6")]
			[Address(RVA = "0xF777C4", Offset = "0xF777C4", VA = "0xF777C4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000FB7")]
			[Address(RVA = "0xF777C8", Offset = "0xF777C8", VA = "0xF777C8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000FB9")]
			[Address(RVA = "0xF78800", Offset = "0xF78800", VA = "0xF78800", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6000FB3")]
		[Address(RVA = "0xF776E8", Offset = "0xF776E8", VA = "0xF776E8")]
		[IteratorStateMachine(typeof(<ExecutePass>d__1))]
		public IEnumerator ExecutePass(MagicLightProbes parent, TargetPoint targetPoint, [Optional] MLPVolume currentVolume, bool realtimeEditing = false)
		{
			return null;
		}

		[Token(Token = "0x6000FB4")]
		[Address(RVA = "0xF777BC", Offset = "0xF777BC", VA = "0xF777BC")]
		public PartialVolumeFilling()
		{
		}
	}
	[Token(Token = "0x20002DC")]
	public class RemoveUnusedPoints
	{
		[Token(Token = "0x20002DD")]
		[CompilerGenerated]
		private sealed class <ExecutePass>d__0 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40013E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40013E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MagicLightProbes parent;

			[Token(Token = "0x40013EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private List<MLPPointData> <pointsToRemove>5__2;

			[Token(Token = "0x40013EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <i>5__3;

			[Token(Token = "0x17000173")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000FC0")]
				[Address(RVA = "0xF78C78", Offset = "0xF78C78", VA = "0xF78C78", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000174")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000FC2")]
				[Address(RVA = "0xF78CC0", Offset = "0xF78CC0", VA = "0xF78CC0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000FBD")]
			[Address(RVA = "0xF788BC", Offset = "0xF788BC", VA = "0xF788BC")]
			[DebuggerHidden]
			public <ExecutePass>d__0(int <>1__state)
			{
			}

			[Token(Token = "0x6000FBE")]
			[Address(RVA = "0xF788EC", Offset = "0xF788EC", VA = "0xF788EC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000FBF")]
			[Address(RVA = "0xF788F0", Offset = "0xF788F0", VA = "0xF788F0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000FC1")]
			[Address(RVA = "0xF78C80", Offset = "0xF78C80", VA = "0xF78C80", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6000FBB")]
		[Address(RVA = "0xF78848", Offset = "0xF78848", VA = "0xF78848")]
		[IteratorStateMachine(typeof(<ExecutePass>d__0))]
		public IEnumerator ExecutePass(MagicLightProbes parent)
		{
			return null;
		}

		[Token(Token = "0x6000FBC")]
		[Address(RVA = "0xF788E4", Offset = "0xF788E4", VA = "0xF788E4")]
		public RemoveUnusedPoints()
		{
		}
	}
	[Token(Token = "0x20002DE")]
	public class SetDistanceFromGeometry
	{
		[Token(Token = "0x20002DF")]
		[CompilerGenerated]
		private sealed class <ExecutePass>d__0 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40013ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40013EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MLPVolume currentVolume;

			[Token(Token = "0x40013EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MagicLightProbes parent;

			[Token(Token = "0x40013F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3[] <exit>5__2;

			[Token(Token = "0x40013F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <i>5__3;

			[Token(Token = "0x17000175")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000FC8")]
				[Address(RVA = "0xF7932C", Offset = "0xF7932C", VA = "0xF7932C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000176")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000FCA")]
				[Address(RVA = "0xF79374", Offset = "0xF79374", VA = "0xF79374", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000FC5")]
			[Address(RVA = "0xF78D58", Offset = "0xF78D58", VA = "0xF78D58")]
			[DebuggerHidden]
			public <ExecutePass>d__0(int <>1__state)
			{
			}

			[Token(Token = "0x6000FC6")]
			[Address(RVA = "0xF78D88", Offset = "0xF78D88", VA = "0xF78D88", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000FC7")]
			[Address(RVA = "0xF78D8C", Offset = "0xF78D8C", VA = "0xF78D8C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000FC9")]
			[Address(RVA = "0xF79334", Offset = "0xF79334", VA = "0xF79334", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6000FC3")]
		[Address(RVA = "0xF78CC8", Offset = "0xF78CC8", VA = "0xF78CC8")]
		[IteratorStateMachine(typeof(<ExecutePass>d__0))]
		public IEnumerator ExecutePass(MagicLightProbes parent, MLPVolume currentVolume)
		{
			return null;
		}

		[Token(Token = "0x6000FC4")]
		[Address(RVA = "0xF78D80", Offset = "0xF78D80", VA = "0xF78D80")]
		public SetDistanceFromGeometry()
		{
		}
	}
}
namespace LincolnCpp.HUDIndicator
{
	[Token(Token = "0x20002E0")]
	public class IndicatorCanvasOffScreen : IndicatorCanvas
	{
		[Token(Token = "0x40013F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private IndicatorOffScreen indicatorOffScreen;

		[Token(Token = "0x40013F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RawImage rawImage;

		[Token(Token = "0x40013F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RectTransform rectTransform;

		[Token(Token = "0x40013F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private IndicatorIconStyle style;

		[Token(Token = "0x40013F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GameObject arrowGameObject;

		[Token(Token = "0x40013F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private RawImage arrowRawImage;

		[Token(Token = "0x40013F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private RectTransform arrowRectTransform;

		[Token(Token = "0x40013F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private IndicatorArrowStyle arrowStyle;

		[Token(Token = "0x6000FCB")]
		[Address(RVA = "0xF7937C", Offset = "0xF7937C", VA = "0xF7937C", Slot = "4")]
		public override void Create(Indicator indicator, IndicatorRenderer renderer)
		{
		}

		[Token(Token = "0x6000FCC")]
		[Address(RVA = "0xF79920", Offset = "0xF79920", VA = "0xF79920", Slot = "5")]
		public override void Update()
		{
		}

		[Token(Token = "0x6000FCD")]
		[Address(RVA = "0xF797F4", Offset = "0xF797F4", VA = "0xF797F4")]
		private void UpdateStyle()
		{
		}

		[Token(Token = "0x6000FCE")]
		[Address(RVA = "0xF79864", Offset = "0xF79864", VA = "0xF79864")]
		private void UpdateArrowStyle()
		{
		}

		[Token(Token = "0x6000FCF")]
		[Address(RVA = "0xF799E8", Offset = "0xF799E8", VA = "0xF799E8")]
		private void UpdatePosition()
		{
		}

		[Token(Token = "0x6000FD0")]
		[Address(RVA = "0xF79E70", Offset = "0xF79E70", VA = "0xF79E70")]
		public IndicatorCanvasOffScreen()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002E1")]
	public class IndicatorOffScreen : Indicator
	{
		[Token(Token = "0x40013FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IndicatorIconStyle style;

		[Token(Token = "0x40013FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool showArrow;

		[Token(Token = "0x40013FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IndicatorArrowStyle arrowStyle;

		[Token(Token = "0x6000FD1")]
		[Address(RVA = "0xF79E80", Offset = "0xF79E80", VA = "0xF79E80", Slot = "4")]
		protected override void CreateIndicatorCanvas(IndicatorRenderer renderer)
		{
		}

		[Token(Token = "0x6000FD2")]
		[Address(RVA = "0xF79F28", Offset = "0xF79F28", VA = "0xF79F28")]
		public IndicatorOffScreen()
		{
		}
	}
	[Token(Token = "0x20002E2")]
	public class IndicatorCanvasOnScreen : IndicatorCanvas
	{
		[Token(Token = "0x40013FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private IndicatorOnScreen indicatorOnScreen;

		[Token(Token = "0x40013FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RawImage rawImage;

		[Token(Token = "0x40013FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RectTransform rectTransform;

		[Token(Token = "0x4001400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private IndicatorIconStyle style;

		[Token(Token = "0x6000FD3")]
		[Address(RVA = "0xF79FC4", Offset = "0xF79FC4", VA = "0xF79FC4", Slot = "4")]
		public override void Create(Indicator indicator, IndicatorRenderer renderer)
		{
		}

		[Token(Token = "0x6000FD4")]
		[Address(RVA = "0xF7A2EC", Offset = "0xF7A2EC", VA = "0xF7A2EC", Slot = "5")]
		public override void Update()
		{
		}

		[Token(Token = "0x6000FD5")]
		[Address(RVA = "0xF7A27C", Offset = "0xF7A27C", VA = "0xF7A27C")]
		private void UpdateStyle()
		{
		}

		[Token(Token = "0x6000FD6")]
		[Address(RVA = "0xF7A350", Offset = "0xF7A350", VA = "0xF7A350")]
		private void UpdatePosition()
		{
		}

		[Token(Token = "0x6000FD7")]
		[Address(RVA = "0xF7A58C", Offset = "0xF7A58C", VA = "0xF7A58C")]
		public IndicatorCanvasOnScreen()
		{
		}
	}
	[Token(Token = "0x20002E3")]
	public class IndicatorOnScreen : Indicator
	{
		[Token(Token = "0x4001401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IndicatorIconStyle style;

		[Token(Token = "0x6000FD8")]
		[Address(RVA = "0xF7A594", Offset = "0xF7A594", VA = "0xF7A594", Slot = "4")]
		protected override void CreateIndicatorCanvas(IndicatorRenderer renderer)
		{
		}

		[Token(Token = "0x6000FD9")]
		[Address(RVA = "0xF7A63C", Offset = "0xF7A63C", VA = "0xF7A63C")]
		public IndicatorOnScreen()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002E4")]
	public abstract class Indicator : MonoBehaviour
	{
		[Token(Token = "0x4001402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool visible;

		[Token(Token = "0x4001403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private List<IndicatorRenderer> renderers;

		[Token(Token = "0x4001404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Dictionary<IndicatorRenderer, IndicatorCanvas> indicatorsCanvas;

		[Token(Token = "0x6000FDA")]
		[Address(RVA = "0xF7A640", Offset = "0xF7A640", VA = "0xF7A640")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FDB")]
		[Address(RVA = "0xF7A778", Offset = "0xF7A778", VA = "0xF7A778")]
		private void Update()
		{
		}

		[Token(Token = "0x6000FDC")]
		[Address(RVA = "0xF7A8D8", Offset = "0xF7A8D8", VA = "0xF7A8D8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000FDD")]
		[Address(RVA = "0xF7AA38", Offset = "0xF7AA38", VA = "0xF7AA38")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000FDE")]
		[Address(RVA = "0xF7AB98", Offset = "0xF7AB98", VA = "0xF7AB98")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000FDF")]
		protected abstract void CreateIndicatorCanvas(IndicatorRenderer renderer);

		[Token(Token = "0x6000FE0")]
		[Address(RVA = "0xF7ACD8", Offset = "0xF7ACD8", VA = "0xF7ACD8")]
		private void DestroyIndicatorCanvas(IndicatorRenderer renderer)
		{
		}

		[Token(Token = "0x6000FE1")]
		[Address(RVA = "0xF79F34", Offset = "0xF79F34", VA = "0xF79F34")]
		protected Indicator()
		{
		}
	}
	[Token(Token = "0x20002E5")]
	public abstract class IndicatorCanvas
	{
		[Token(Token = "0x4001407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected GameObject gameObject;

		[Token(Token = "0x4001408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected bool active;

		[Token(Token = "0x17000177")]
		protected Indicator indicator
		{
			[Token(Token = "0x6000FE3")]
			[Address(RVA = "0xF7AD80", Offset = "0xF7AD80", VA = "0xF7AD80")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FE2")]
			[Address(RVA = "0xF7AD78", Offset = "0xF7AD78", VA = "0xF7AD78")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000178")]
		protected IndicatorRenderer renderer
		{
			[Token(Token = "0x6000FE5")]
			[Address(RVA = "0xF7AD90", Offset = "0xF7AD90", VA = "0xF7AD90")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FE4")]
			[Address(RVA = "0xF7AD88", Offset = "0xF7AD88", VA = "0xF7AD88")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000FE6")]
		[Address(RVA = "0xF797B8", Offset = "0xF797B8", VA = "0xF797B8", Slot = "4")]
		public virtual void Create(Indicator indicator, IndicatorRenderer renderer)
		{
		}

		[Token(Token = "0x6000FE7")]
		public abstract void Update();

		[Token(Token = "0x6000FE8")]
		[Address(RVA = "0xF7AD98", Offset = "0xF7AD98", VA = "0xF7AD98", Slot = "6")]
		public virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000FE9")]
		[Address(RVA = "0xF7AE20", Offset = "0xF7AE20", VA = "0xF7AE20", Slot = "7")]
		public virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000FEA")]
		[Address(RVA = "0xF7AEA4", Offset = "0xF7AEA4", VA = "0xF7AEA4", Slot = "8")]
		public virtual void Destroy()
		{
		}

		[Token(Token = "0x6000FEB")]
		[Address(RVA = "0xF799AC", Offset = "0xF799AC", VA = "0xF799AC")]
		public bool IsVisible()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FEC")]
		[Address(RVA = "0xF79E78", Offset = "0xF79E78", VA = "0xF79E78")]
		protected IndicatorCanvas()
		{
		}
	}
	[Token(Token = "0x20002E6")]
	public class IndicatorRenderer : MonoBehaviour
	{
		[Token(Token = "0x4001409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool visible;

		[Token(Token = "0x400140A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float margin;

		[Token(Token = "0x400140B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color canvasColor;

		[Token(Token = "0x400140C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Camera camera;

		[Token(Token = "0x400140D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RectTransform rectTransform;

		[Token(Token = "0x6000FED")]
		[Address(RVA = "0xF7AEA8", Offset = "0xF7AEA8", VA = "0xF7AEA8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000FEE")]
		[Address(RVA = "0xF79E48", Offset = "0xF79E48", VA = "0xF79E48")]
		public Rect GetRect()
		{
			return default(Rect);
		}

		[Token(Token = "0x6000FEF")]
		[Address(RVA = "0xF7B010", Offset = "0xF7B010", VA = "0xF7B010")]
		public RectTransform GetRectTransform()
		{
			return null;
		}

		[Token(Token = "0x6000FF0")]
		[Address(RVA = "0xF7AF6C", Offset = "0xF7AF6C", VA = "0xF7AF6C")]
		private Rect SetMarginToRect(Rect rect, float margin)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000FF1")]
		[Address(RVA = "0xF7B018", Offset = "0xF7B018", VA = "0xF7B018")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000FF2")]
		[Address(RVA = "0xF7B22C", Offset = "0xF7B22C", VA = "0xF7B22C")]
		public IndicatorRenderer()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002E7")]
	public class IndicatorArrowStyle
	{
		[Token(Token = "0x400140E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Texture texture;

		[Token(Token = "0x400140F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color color;

		[Token(Token = "0x4001410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float margin;

		[Token(Token = "0x4001411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float width;

		[Token(Token = "0x4001412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float height;

		[Token(Token = "0x6000FF3")]
		[Address(RVA = "0xF7B254", Offset = "0xF7B254", VA = "0xF7B254")]
		public IndicatorArrowStyle()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002E8")]
	public class IndicatorIconStyle
	{
		[Token(Token = "0x4001413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Texture texture;

		[Token(Token = "0x4001414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color color;

		[Token(Token = "0x4001415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float width;

		[Token(Token = "0x4001416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float height;

		[Token(Token = "0x6000FF4")]
		[Address(RVA = "0xF7B270", Offset = "0xF7B270", VA = "0xF7B270")]
		public IndicatorIconStyle()
		{
		}
	}
}
namespace UnityStandardAssets.Water
{
	[Token(Token = "0x20002E9")]
	[ExecuteInEditMode]
	public class WaterBasic : MonoBehaviour
	{
		[Token(Token = "0x4001417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float divider;

		[Token(Token = "0x4001418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Renderer renderer;

		[Token(Token = "0x4001419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material mat;

		[Token(Token = "0x400141A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly string waveSpeedParam;

		[Token(Token = "0x400141B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly string waveScaleParam;

		[Token(Token = "0x400141C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly string waveOffsetParam;

		[Token(Token = "0x6000FF5")]
		[Address(RVA = "0xF7B290", Offset = "0xF7B290", VA = "0xF7B290")]
		private void Update()
		{
		}

		[Token(Token = "0x6000FF6")]
		[Address(RVA = "0xF7B4D8", Offset = "0xF7B4D8", VA = "0xF7B4D8")]
		public WaterBasic()
		{
		}
	}
	[Token(Token = "0x20002EA")]
	[RequireComponent(typeof(WaterBase))]
	[ExecuteInEditMode]
	public class Displace : MonoBehaviour
	{
		[Token(Token = "0x6000FF7")]
		[Address(RVA = "0xF7B588", Offset = "0xF7B588", VA = "0xF7B588")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000FF8")]
		[Address(RVA = "0xF7B5A8", Offset = "0xF7B5A8", VA = "0xF7B5A8")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6000FF9")]
		[Address(RVA = "0xF7B60C", Offset = "0xF7B60C", VA = "0xF7B60C")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6000FFA")]
		[Address(RVA = "0xF7B670", Offset = "0xF7B670", VA = "0xF7B670")]
		public Displace()
		{
		}
	}
	[Token(Token = "0x20002EB")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(WaterBase))]
	public class GerstnerDisplace : Displace
	{
		[Token(Token = "0x6000FFB")]
		[Address(RVA = "0xF7B678", Offset = "0xF7B678", VA = "0xF7B678")]
		public GerstnerDisplace()
		{
		}
	}
	[Token(Token = "0x20002EC")]
	public class MeshContainer
	{
		[Token(Token = "0x400141D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Mesh mesh;

		[Token(Token = "0x400141E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3[] vertices;

		[Token(Token = "0x400141F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3[] normals;

		[Token(Token = "0x6000FFC")]
		[Address(RVA = "0xF7B680", Offset = "0xF7B680", VA = "0xF7B680")]
		public MeshContainer(Mesh m)
		{
		}

		[Token(Token = "0x6000FFD")]
		[Address(RVA = "0xF7B6F0", Offset = "0xF7B6F0", VA = "0xF7B6F0")]
		public void Update()
		{
		}
	}
	[Token(Token = "0x20002ED")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(WaterBase))]
	public class PlanarReflection : MonoBehaviour
	{
		[Token(Token = "0x4001420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LayerMask reflectionMask;

		[Token(Token = "0x4001421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool reflectSkybox;

		[Token(Token = "0x4001422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color clearColor;

		[Token(Token = "0x4001423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string reflectionSampler;

		[Token(Token = "0x4001424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float clipPlaneOffset;

		[Token(Token = "0x4001425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 m_Oldpos;

		[Token(Token = "0x4001426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Camera m_ReflectionCamera;

		[Token(Token = "0x4001427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material m_SharedMaterial;

		[Token(Token = "0x4001428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<Camera, bool> m_HelperCameras;

		[Token(Token = "0x6000FFE")]
		[Address(RVA = "0xF7B728", Offset = "0xF7B728", VA = "0xF7B728")]
		public void Start()
		{
		}

		[Token(Token = "0x6000FFF")]
		[Address(RVA = "0xF7B824", Offset = "0xF7B824", VA = "0xF7B824")]
		private Camera CreateReflectionCameraFor(Camera cam)
		{
			return null;
		}

		[Token(Token = "0x6001000")]
		[Address(RVA = "0xF7BB34", Offset = "0xF7BB34", VA = "0xF7BB34")]
		private void SetStandardCameraParameter(Camera cam, LayerMask mask)
		{
		}

		[Token(Token = "0x6001001")]
		[Address(RVA = "0xF7BBE8", Offset = "0xF7BBE8", VA = "0xF7BBE8")]
		private RenderTexture CreateTextureFor(Camera cam)
		{
			return null;
		}

		[Token(Token = "0x6001002")]
		[Address(RVA = "0xF7BD40", Offset = "0xF7BD40", VA = "0xF7BD40")]
		public void RenderHelpCameras(Camera currentCam)
		{
		}

		[Token(Token = "0x6001003")]
		[Address(RVA = "0xF7C5B4", Offset = "0xF7C5B4", VA = "0xF7C5B4")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x6001004")]
		[Address(RVA = "0xF7C60C", Offset = "0xF7C60C", VA = "0xF7C60C")]
		public void WaterTileBeingRendered(Transform tr, Camera currentCam)
		{
		}

		[Token(Token = "0x6001005")]
		[Address(RVA = "0xF7C6EC", Offset = "0xF7C6EC", VA = "0xF7C6EC")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6001006")]
		[Address(RVA = "0xF7C750", Offset = "0xF7C750", VA = "0xF7C750")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6001007")]
		[Address(RVA = "0xF7BEFC", Offset = "0xF7BEFC", VA = "0xF7BEFC")]
		private void RenderReflectionFor(Camera cam, Camera reflectCamera)
		{
		}

		[Token(Token = "0x6001008")]
		[Address(RVA = "0xF7C7B4", Offset = "0xF7C7B4", VA = "0xF7C7B4")]
		private void SaneCameraSettings(Camera helperCam)
		{
		}

		[Token(Token = "0x6001009")]
		[Address(RVA = "0xF7CA68", Offset = "0xF7CA68", VA = "0xF7CA68")]
		private static Matrix4x4 CalculateObliqueMatrix(Matrix4x4 projection, Vector4 clipPlane)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x600100A")]
		[Address(RVA = "0xF7C814", Offset = "0xF7C814", VA = "0xF7C814")]
		private static Matrix4x4 CalculateReflectionMatrix(Matrix4x4 reflectionMat, Vector4 plane)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x600100B")]
		[Address(RVA = "0xF7CBD4", Offset = "0xF7CBD4", VA = "0xF7CBD4")]
		private static float Sgn(float a)
		{
			return default(float);
		}

		[Token(Token = "0x600100C")]
		[Address(RVA = "0xF7C8B8", Offset = "0xF7C8B8", VA = "0xF7C8B8")]
		private Vector4 CameraSpacePlane(Camera cam, Vector3 pos, Vector3 normal, float sideSign)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600100D")]
		[Address(RVA = "0xF7CBF4", Offset = "0xF7CBF4", VA = "0xF7CBF4")]
		public PlanarReflection()
		{
		}
	}
	[Token(Token = "0x20002EE")]
	[RequireComponent(typeof(WaterBase))]
	[ExecuteInEditMode]
	public class SpecularLighting : MonoBehaviour
	{
		[Token(Token = "0x4001429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform specularLight;

		[Token(Token = "0x400142A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private WaterBase m_WaterBase;

		[Token(Token = "0x600100E")]
		[Address(RVA = "0xF7CC64", Offset = "0xF7CC64", VA = "0xF7CC64")]
		public void Start()
		{
		}

		[Token(Token = "0x600100F")]
		[Address(RVA = "0xF7CD8C", Offset = "0xF7CD8C", VA = "0xF7CD8C")]
		public void Update()
		{
		}

		[Token(Token = "0x6001010")]
		[Address(RVA = "0xF7CFA4", Offset = "0xF7CFA4", VA = "0xF7CFA4")]
		public SpecularLighting()
		{
		}
	}
	[Token(Token = "0x20002EF")]
	[ExecuteInEditMode]
	public class Water : MonoBehaviour
	{
		[Token(Token = "0x20002F0")]
		public enum WaterMode
		{
			[Token(Token = "0x400143A")]
			Simple,
			[Token(Token = "0x400143B")]
			Reflective,
			[Token(Token = "0x400143C")]
			Refractive
		}

		[Token(Token = "0x400142B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WaterMode waterMode;

		[Token(Token = "0x400142C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool disablePixelLights;

		[Token(Token = "0x400142D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int textureSize;

		[Token(Token = "0x400142E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float clipPlaneOffset;

		[Token(Token = "0x400142F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LayerMask reflectLayers;

		[Token(Token = "0x4001430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LayerMask refractLayers;

		[Token(Token = "0x4001431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<Camera, Camera> m_ReflectionCameras;

		[Token(Token = "0x4001432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Dictionary<Camera, Camera> m_RefractionCameras;

		[Token(Token = "0x4001433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RenderTexture m_ReflectionTexture;

		[Token(Token = "0x4001434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RenderTexture m_RefractionTexture;

		[Token(Token = "0x4001435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private WaterMode m_HardwareWaterSupport;

		[Token(Token = "0x4001436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int m_OldReflectionTextureSize;

		[Token(Token = "0x4001437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int m_OldRefractionTextureSize;

		[Token(Token = "0x4001438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool s_InsideWater;

		[Token(Token = "0x6001011")]
		[Address(RVA = "0xF7CFAC", Offset = "0xF7CFAC", VA = "0xF7CFAC")]
		public void OnWillRenderObject()
		{
		}

		[Token(Token = "0x6001012")]
		[Address(RVA = "0xF7E8F4", Offset = "0xF7E8F4", VA = "0xF7E8F4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001013")]
		[Address(RVA = "0xF7EC5C", Offset = "0xF7EC5C", VA = "0xF7EC5C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001014")]
		[Address(RVA = "0xF7E474", Offset = "0xF7E474", VA = "0xF7E474")]
		private void UpdateCameraModes(Camera src, Camera dest)
		{
		}

		[Token(Token = "0x6001015")]
		[Address(RVA = "0xF7DB08", Offset = "0xF7DB08", VA = "0xF7DB08")]
		private void CreateWaterObjects(Camera currentCamera, out Camera reflectionCamera, out Camera refractionCamera)
		{
		}

		[Token(Token = "0x6001016")]
		[Address(RVA = "0xF7DAF4", Offset = "0xF7DAF4", VA = "0xF7DAF4")]
		private WaterMode GetWaterMode()
		{
			return default(WaterMode);
		}

		[Token(Token = "0x6001017")]
		[Address(RVA = "0xF7D994", Offset = "0xF7D994", VA = "0xF7D994")]
		private WaterMode FindHardwareWaterSupport()
		{
			return default(WaterMode);
		}

		[Token(Token = "0x6001018")]
		[Address(RVA = "0xF7E744", Offset = "0xF7E744", VA = "0xF7E744")]
		private Vector4 CameraSpacePlane(Camera cam, Vector3 pos, Vector3 normal, float sideSign)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001019")]
		[Address(RVA = "0xF7E6B0", Offset = "0xF7E6B0", VA = "0xF7E6B0")]
		private static void CalculateReflectionMatrix(ref Matrix4x4 reflectionMat, Vector4 plane)
		{
		}

		[Token(Token = "0x600101A")]
		[Address(RVA = "0xF7EF08", Offset = "0xF7EF08", VA = "0xF7EF08")]
		public Water()
		{
		}
	}
	[Token(Token = "0x20002F1")]
	public enum WaterQuality
	{
		[Token(Token = "0x400143E")]
		High = 2,
		[Token(Token = "0x400143F")]
		Medium = 1,
		[Token(Token = "0x4001440")]
		Low = 0
	}
	[Token(Token = "0x20002F2")]
	[ExecuteInEditMode]
	public class WaterBase : MonoBehaviour
	{
		[Token(Token = "0x4001441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material sharedMaterial;

		[Token(Token = "0x4001442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WaterQuality waterQuality;

		[Token(Token = "0x4001443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool edgeBlend;

		[Token(Token = "0x600101B")]
		[Address(RVA = "0xF7F008", Offset = "0xF7F008", VA = "0xF7F008")]
		public void UpdateShader()
		{
		}

		[Token(Token = "0x600101C")]
		[Address(RVA = "0xF7F180", Offset = "0xF7F180", VA = "0xF7F180")]
		public void WaterTileBeingRendered(Transform tr, Camera currentCam)
		{
		}

		[Token(Token = "0x600101D")]
		[Address(RVA = "0xF7F224", Offset = "0xF7F224", VA = "0xF7F224")]
		public void Update()
		{
		}

		[Token(Token = "0x600101E")]
		[Address(RVA = "0xF7F298", Offset = "0xF7F298", VA = "0xF7F298")]
		public WaterBase()
		{
		}
	}
	[Token(Token = "0x20002F3")]
	[ExecuteInEditMode]
	public class WaterTile : MonoBehaviour
	{
		[Token(Token = "0x4001444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlanarReflection reflection;

		[Token(Token = "0x4001445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WaterBase waterBase;

		[Token(Token = "0x600101F")]
		[Address(RVA = "0xF7F2B0", Offset = "0xF7F2B0", VA = "0xF7F2B0")]
		public void Start()
		{
		}

		[Token(Token = "0x6001020")]
		[Address(RVA = "0xF7F2B4", Offset = "0xF7F2B4", VA = "0xF7F2B4")]
		private void AcquireComponents()
		{
		}

		[Token(Token = "0x6001021")]
		[Address(RVA = "0xF7F474", Offset = "0xF7F474", VA = "0xF7F474")]
		public void OnWillRenderObject()
		{
		}

		[Token(Token = "0x6001022")]
		[Address(RVA = "0xF7F558", Offset = "0xF7F558", VA = "0xF7F558")]
		public WaterTile()
		{
		}
	}
}
namespace UnityStandardAssets.ImageEffects
{
	[Token(Token = "0x20002F4")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	[AddComponentMenu("Image Effects/Bloom and Glow/Bloom")]
	public class Bloom : PostEffectsBase
	{
		[Token(Token = "0x20002F5")]
		public enum LensFlareStyle
		{
			[Token(Token = "0x4001465")]
			Ghosting,
			[Token(Token = "0x4001466")]
			Anamorphic,
			[Token(Token = "0x4001467")]
			Combined
		}

		[Token(Token = "0x20002F6")]
		public enum TweakMode
		{
			[Token(Token = "0x4001469")]
			Basic,
			[Token(Token = "0x400146A")]
			Complex
		}

		[Token(Token = "0x20002F7")]
		public enum HDRBloomMode
		{
			[Token(Token = "0x400146C")]
			Auto,
			[Token(Token = "0x400146D")]
			On,
			[Token(Token = "0x400146E")]
			Off
		}

		[Token(Token = "0x20002F8")]
		public enum BloomScreenBlendMode
		{
			[Token(Token = "0x4001470")]
			Screen,
			[Token(Token = "0x4001471")]
			Add
		}

		[Token(Token = "0x20002F9")]
		public enum BloomQuality
		{
			[Token(Token = "0x4001473")]
			Cheap,
			[Token(Token = "0x4001474")]
			High
		}

		[Token(Token = "0x4001446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TweakMode tweakMode;

		[Token(Token = "0x4001447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BloomScreenBlendMode screenBlendMode;

		[Token(Token = "0x4001448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public HDRBloomMode hdr;

		[Token(Token = "0x4001449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool doHdr;

		[Token(Token = "0x400144A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float sepBlurSpread;

		[Token(Token = "0x400144B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BloomQuality quality;

		[Token(Token = "0x400144C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float bloomIntensity;

		[Token(Token = "0x400144D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float bloomThreshold;

		[Token(Token = "0x400144E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Color bloomThresholdColor;

		[Token(Token = "0x400144F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int bloomBlurIterations;

		[Token(Token = "0x4001450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int hollywoodFlareBlurIterations;

		[Token(Token = "0x4001451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float flareRotation;

		[Token(Token = "0x4001452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public LensFlareStyle lensflareMode;

		[Token(Token = "0x4001453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float hollyStretchWidth;

		[Token(Token = "0x4001454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float lensflareIntensity;

		[Token(Token = "0x4001455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float lensflareThreshold;

		[Token(Token = "0x4001456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float lensFlareSaturation;

		[Token(Token = "0x4001457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Color flareColorA;

		[Token(Token = "0x4001458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public Color flareColorB;

		[Token(Token = "0x4001459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public Color flareColorC;

		[Token(Token = "0x400145A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public Color flareColorD;

		[Token(Token = "0x400145B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Texture2D lensFlareVignetteMask;

		[Token(Token = "0x400145C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Shader lensFlareShader;

		[Token(Token = "0x400145D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Material lensFlareMaterial;

		[Token(Token = "0x400145E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Shader screenBlendShader;

		[Token(Token = "0x400145F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Material screenBlend;

		[Token(Token = "0x4001460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Shader blurAndFlaresShader;

		[Token(Token = "0x4001461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Material blurAndFlaresMaterial;

		[Token(Token = "0x4001462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Shader brightPassFilterShader;

		[Token(Token = "0x4001463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Material brightPassFilterMaterial;

		[Token(Token = "0x6001023")]
		[Address(RVA = "0xF7F560", Offset = "0xF7F560", VA = "0xF7F560", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6001024")]
		[Address(RVA = "0xF7F64C", Offset = "0xF7F64C", VA = "0xF7F64C")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6001025")]
		[Address(RVA = "0xF807BC", Offset = "0xF807BC", VA = "0xF807BC")]
		private void AddTo(float intensity_, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6001026")]
		[Address(RVA = "0xF80624", Offset = "0xF80624", VA = "0xF80624")]
		private void BlendFlares(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6001027")]
		[Address(RVA = "0xF80378", Offset = "0xF80378", VA = "0xF80378")]
		private void BrightFilter(float thresh, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6001028")]
		[Address(RVA = "0xF802A4", Offset = "0xF802A4", VA = "0xF802A4")]
		private void BrightFilter(Color threshColor, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6001029")]
		[Address(RVA = "0xF80438", Offset = "0xF80438", VA = "0xF80438")]
		private void Vignette(float amount, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x600102A")]
		[Address(RVA = "0xF80880", Offset = "0xF80880", VA = "0xF80880")]
		public Bloom()
		{
		}
	}
	[Token(Token = "0x20002FA")]
	[RequireComponent(typeof(Camera))]
	[ExecuteInEditMode]
	public class PostEffectsBase : MonoBehaviour
	{
		[Token(Token = "0x4001475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected bool supportHDRTextures;

		[Token(Token = "0x4001476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		protected bool supportDX11;

		[Token(Token = "0x4001477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		protected bool isSupported;

		[Token(Token = "0x600102B")]
		[Address(RVA = "0xF80908", Offset = "0xF80908", VA = "0xF80908")]
		protected Material CheckShaderAndCreateMaterial(Shader s, Material m2Create)
		{
			return null;
		}

		[Token(Token = "0x600102C")]
		[Address(RVA = "0xF80D34", Offset = "0xF80D34", VA = "0xF80D34")]
		protected Material CreateMaterial(Shader s, Material m2Create)
		{
			return null;
		}

		[Token(Token = "0x600102D")]
		[Address(RVA = "0xF80F18", Offset = "0xF80F18", VA = "0xF80F18")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600102E")]
		[Address(RVA = "0xF80F24", Offset = "0xF80F24", VA = "0xF80F24")]
		protected bool CheckSupport()
		{
			return default(bool);
		}

		[Token(Token = "0x600102F")]
		[Address(RVA = "0xF81030", Offset = "0xF81030", VA = "0xF81030", Slot = "4")]
		public virtual bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6001030")]
		[Address(RVA = "0xF810F0", Offset = "0xF810F0", VA = "0xF810F0")]
		protected void Start()
		{
		}

		[Token(Token = "0x6001031")]
		[Address(RVA = "0xF80F2C", Offset = "0xF80F2C", VA = "0xF80F2C")]
		protected bool CheckSupport(bool needDepth)
		{
			return default(bool);
		}

		[Token(Token = "0x6001032")]
		[Address(RVA = "0xF810FC", Offset = "0xF810FC", VA = "0xF810FC")]
		protected bool CheckSupport(bool needDepth, bool needHdr)
		{
			return default(bool);
		}

		[Token(Token = "0x6001033")]
		[Address(RVA = "0xF81154", Offset = "0xF81154", VA = "0xF81154")]
		public bool Dx11Support()
		{
			return default(bool);
		}

		[Token(Token = "0x6001034")]
		[Address(RVA = "0xF8115C", Offset = "0xF8115C", VA = "0xF8115C")]
		protected void ReportAutoDisable()
		{
		}

		[Token(Token = "0x6001035")]
		[Address(RVA = "0xF81214", Offset = "0xF81214", VA = "0xF81214")]
		private bool CheckShader(Shader s)
		{
			return default(bool);
		}

		[Token(Token = "0x6001036")]
		[Address(RVA = "0xF80D14", Offset = "0xF80D14", VA = "0xF80D14")]
		protected void NotSupported()
		{
		}

		[Token(Token = "0x6001037")]
		[Address(RVA = "0xF81498", Offset = "0xF81498", VA = "0xF81498")]
		protected void DrawBorder(RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x6001038")]
		[Address(RVA = "0xF81810", Offset = "0xF81810", VA = "0xF81810")]
		public PostEffectsBase()
		{
		}
	}
}
namespace UnityStandardAssets.CinematicEffects
{
	[Token(Token = "0x20002FB")]
	[ExecuteInEditMode]
	[ImageEffectAllowedInSceneView]
	[AddComponentMenu("Image Effects/Cinematic/Bloom")]
	[RequireComponent(typeof(Camera))]
	public class Bloom : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20002FC")]
		public struct Settings
		{
			[Token(Token = "0x4001486")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Filters out pixels under this level of brightness.")]
			[SerializeField]
			public float threshold;

			[Token(Token = "0x4001487")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[SerializeField]
			[Range(0f, 1f)]
			[Tooltip("Makes transition between under/over-threshold gradual.")]
			public float softKnee;

			[Token(Token = "0x4001488")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[SerializeField]
			[Range(1f, 7f)]
			[Tooltip("Changes extent of veiling effects in a screen resolution-independent fashion.")]
			public float radius;

			[Token(Token = "0x4001489")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Tooltip("Blend factor of the result image.")]
			[SerializeField]
			public float intensity;

			[Token(Token = "0x400148A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Controls filter quality and buffer resolution.")]
			[SerializeField]
			public bool highQuality;

			[Token(Token = "0x400148B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
			[Tooltip("Reduces flashing noise with an additional filter.")]
			[SerializeField]
			public bool antiFlicker;

			[Token(Token = "0x400148C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Dirtiness texture to add smudges or dust to the lens.")]
			public Texture dirtTexture;

			[Token(Token = "0x400148D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Amount of lens dirtiness.")]
			[Min(0f)]
			public float dirtIntensity;

			[Token(Token = "0x1700017B")]
			public float thresholdGamma
			{
				[Token(Token = "0x6001041")]
				[Address(RVA = "0xF827AC", Offset = "0xF827AC", VA = "0xF827AC")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6001040")]
				[Address(RVA = "0xF827A4", Offset = "0xF827A4", VA = "0xF827A4")]
				set
				{
				}
			}

			[Token(Token = "0x1700017C")]
			public float thresholdLinear
			{
				[Token(Token = "0x6001043")]
				[Address(RVA = "0xF8264C", Offset = "0xF8264C", VA = "0xF8264C")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6001042")]
				[Address(RVA = "0xF827BC", Offset = "0xF827BC", VA = "0xF827BC")]
				set
				{
				}
			}

			[Token(Token = "0x1700017D")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6001044")]
				[Address(RVA = "0xF82748", Offset = "0xF82748", VA = "0xF82748")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4001478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Settings settings;

		[Token(Token = "0x4001479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		private Shader m_Shader;

		[Token(Token = "0x400147A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material m_Material;

		[Token(Token = "0x400147B")]
		private const int kMaxIterations = 16;

		[Token(Token = "0x400147C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private RenderTexture[] m_blurBuffer1;

		[Token(Token = "0x400147D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private RenderTexture[] m_blurBuffer2;

		[Token(Token = "0x400147E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int m_Threshold;

		[Token(Token = "0x400147F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int m_Curve;

		[Token(Token = "0x4001480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int m_PrefilterOffs;

		[Token(Token = "0x4001481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int m_SampleScale;

		[Token(Token = "0x4001482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int m_Intensity;

		[Token(Token = "0x4001483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int m_DirtTex;

		[Token(Token = "0x4001484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int m_DirtIntensity;

		[Token(Token = "0x4001485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int m_BaseTex;

		[Token(Token = "0x17000179")]
		public Shader shader
		{
			[Token(Token = "0x6001039")]
			[Address(RVA = "0xF81824", Offset = "0xF81824", VA = "0xF81824")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017A")]
		public Material material
		{
			[Token(Token = "0x600103A")]
			[Address(RVA = "0xF818C0", Offset = "0xF818C0", VA = "0xF818C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600103B")]
		[Address(RVA = "0xF81A1C", Offset = "0xF81A1C", VA = "0xF81A1C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600103C")]
		[Address(RVA = "0xF81B88", Offset = "0xF81B88", VA = "0xF81B88")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600103D")]
		[Address(RVA = "0xF81E30", Offset = "0xF81E30", VA = "0xF81E30")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600103E")]
		[Address(RVA = "0xF81EC4", Offset = "0xF81EC4", VA = "0xF81EC4")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600103F")]
		[Address(RVA = "0xF82660", Offset = "0xF82660", VA = "0xF82660")]
		public Bloom()
		{
		}
	}
	[Token(Token = "0x20002FD")]
	public static class ImageEffectHelper
	{
		[Token(Token = "0x1700017E")]
		public static bool supportsDX11
		{
			[Token(Token = "0x6001047")]
			[Address(RVA = "0xF827D8", Offset = "0xF827D8", VA = "0xF827D8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001045")]
		[Address(RVA = "0xF81BC4", Offset = "0xF81BC4", VA = "0xF81BC4")]
		public static bool IsSupported(Shader s, bool needDepth, bool needHdr, MonoBehaviour effect)
		{
			return default(bool);
		}

		[Token(Token = "0x6001046")]
		[Address(RVA = "0xF81954", Offset = "0xF81954", VA = "0xF81954")]
		public static Material CheckShaderAndCreateMaterial(Shader s)
		{
			return null;
		}
	}
	[Token(Token = "0x20002FE")]
	public sealed class MinAttribute : PropertyAttribute
	{
		[Token(Token = "0x400148E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly float min;

		[Token(Token = "0x6001048")]
		[Address(RVA = "0xF82804", Offset = "0xF82804", VA = "0xF82804")]
		public MinAttribute(float min)
		{
		}
	}
	[Token(Token = "0x20002FF")]
	public class RenderTextureUtility
	{
		[Token(Token = "0x400148F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<RenderTexture> m_TemporaryRTs;

		[Token(Token = "0x6001049")]
		[Address(RVA = "0xF8282C", Offset = "0xF8282C", VA = "0xF8282C")]
		public RenderTexture GetTemporaryRenderTexture(int width, int height, int depthBuffer = 0, RenderTextureFormat format = RenderTextureFormat.ARGBHalf, FilterMode filterMode = FilterMode.Bilinear)
		{
			return null;
		}

		[Token(Token = "0x600104A")]
		[Address(RVA = "0xF82960", Offset = "0xF82960", VA = "0xF82960")]
		public void ReleaseTemporaryRenderTexture(RenderTexture rt)
		{
		}

		[Token(Token = "0x600104B")]
		[Address(RVA = "0xF82AFC", Offset = "0xF82AFC", VA = "0xF82AFC")]
		public void ReleaseAllTemporaryRenderTextures()
		{
		}

		[Token(Token = "0x600104C")]
		[Address(RVA = "0xF82BBC", Offset = "0xF82BBC", VA = "0xF82BBC")]
		public RenderTextureUtility()
		{
		}
	}
}
namespace IL3DN
{
	[Token(Token = "0x2000300")]
	public class IL3DN_ChangeWalkingSound : MonoBehaviour
	{
		[Token(Token = "0x4001490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip[] footStepsOverride;

		[Token(Token = "0x4001491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioClip jumpSound;

		[Token(Token = "0x4001492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip landSound;

		[Token(Token = "0x600104D")]
		[Address(RVA = "0xF82C44", Offset = "0xF82C44", VA = "0xF82C44")]
		public IL3DN_ChangeWalkingSound()
		{
		}
	}
	[Token(Token = "0x2000301")]
	public class IL3DN_ColorController : MonoBehaviour
	{
		[Token(Token = "0x4001493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int slot;

		[Token(Token = "0x600104E")]
		[Address(RVA = "0xF82C4C", Offset = "0xF82C4C", VA = "0xF82C4C")]
		public IL3DN_ColorController()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000302")]
	public class ColorProperty
	{
		[Token(Token = "0x4001494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Color color;

		[Token(Token = "0x4001495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string name;

		[Token(Token = "0x600104F")]
		[Address(RVA = "0xF82C54", Offset = "0xF82C54", VA = "0xF82C54")]
		public ColorProperty(Color color, string name)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000303")]
	public class MaterialColors
	{
		[Token(Token = "0x4001496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<ColorProperty> colors;

		[Token(Token = "0x6001050")]
		[Address(RVA = "0xF82CAC", Offset = "0xF82CAC", VA = "0xF82CAC")]
		public MaterialColors(Material material)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000304")]
	public class MultipleColorProperties
	{
		[Token(Token = "0x4001497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Material meterial;

		[Token(Token = "0x4001498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<MaterialColors> properties;

		[Token(Token = "0x4001499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int selectedProperty;

		[Token(Token = "0x6001051")]
		[Address(RVA = "0xF82D34", Offset = "0xF82D34", VA = "0xF82D34")]
		public MultipleColorProperties(Material material)
		{
		}
	}
	[Token(Token = "0x2000305")]
	[RequireComponent(typeof(IL3DN_ColorController))]
	public class IL3DN_ColorManagerEffects : MonoBehaviour
	{
		[Token(Token = "0x400149A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<MultipleColorProperties> materials;

		[Token(Token = "0x6001052")]
		[Address(RVA = "0xF82E84", Offset = "0xF82E84", VA = "0xF82E84")]
		public void Refresh()
		{
		}

		[Token(Token = "0x6001053")]
		[Address(RVA = "0xF830DC", Offset = "0xF830DC", VA = "0xF830DC")]
		public void SetMaterialColors(int slot)
		{
		}

		[Token(Token = "0x6001054")]
		[Address(RVA = "0xF831B0", Offset = "0xF831B0", VA = "0xF831B0")]
		public IL3DN_ColorManagerEffects()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000306")]
	public class ShaderProperties
	{
		[Token(Token = "0x400149B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Color color;

		[Token(Token = "0x400149C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Texture2D mainTex;

		[Token(Token = "0x6001055")]
		[Address(RVA = "0xF83238", Offset = "0xF83238", VA = "0xF83238")]
		public ShaderProperties(Color color, Texture2D mainTex)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000307")]
	public class MaterialProperties
	{
		[Token(Token = "0x400149D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Material meterial;

		[Token(Token = "0x400149E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<ShaderProperties> properties;

		[Token(Token = "0x400149F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int selectedProperty;

		[Token(Token = "0x6001056")]
		[Address(RVA = "0xF83290", Offset = "0xF83290", VA = "0xF83290")]
		public MaterialProperties(Material material)
		{
		}
	}
	[Token(Token = "0x2000308")]
	[RequireComponent(typeof(IL3DN_ColorController))]
	public class IL3DN_ColorManagerTextures : MonoBehaviour
	{
		[Token(Token = "0x40014A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<MaterialProperties> materials;

		[Token(Token = "0x6001057")]
		[Address(RVA = "0xF83334", Offset = "0xF83334", VA = "0xF83334")]
		public void Refresh()
		{
		}

		[Token(Token = "0x6001058")]
		[Address(RVA = "0xF834D0", Offset = "0xF834D0", VA = "0xF834D0")]
		public void SetMaterialColors(int slot)
		{
		}

		[Token(Token = "0x6001059")]
		[Address(RVA = "0xF835A4", Offset = "0xF835A4", VA = "0xF835A4")]
		public IL3DN_ColorManagerTextures()
		{
		}
	}
	[Token(Token = "0x2000309")]
	[ExecuteInEditMode]
	[ImageEffectAllowedInSceneView]
	public class IL3DN_Fog : MonoBehaviour
	{
		[Token(Token = "0x40014A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material material;

		[Token(Token = "0x600105A")]
		[Address(RVA = "0xF8362C", Offset = "0xF8362C", VA = "0xF8362C")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture src, RenderTexture dest)
		{
		}

		[Token(Token = "0x600105B")]
		[Address(RVA = "0xF836A0", Offset = "0xF836A0", VA = "0xF836A0")]
		public IL3DN_Fog()
		{
		}
	}
	[Token(Token = "0x200030A")]
	public class IL3DN_PlayRandomSound : MonoBehaviour
	{
		[Token(Token = "0x40014A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioSource audioSource;

		[Token(Token = "0x40014A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioClip[] sounds;

		[Token(Token = "0x40014A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float minDelay;

		[Token(Token = "0x40014A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float maxDelay;

		[Token(Token = "0x40014A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float currentTime;

		[Token(Token = "0x40014A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float playTime;

		[Token(Token = "0x40014A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AudioClip currentSound;

		[Token(Token = "0x600105C")]
		[Address(RVA = "0xF836A8", Offset = "0xF836A8", VA = "0xF836A8")]
		private void Start()
		{
		}

		[Token(Token = "0x600105D")]
		[Address(RVA = "0xF836AC", Offset = "0xF836AC", VA = "0xF836AC")]
		private void SetupSound()
		{
		}

		[Token(Token = "0x600105E")]
		[Address(RVA = "0xF83718", Offset = "0xF83718", VA = "0xF83718")]
		private void Update()
		{
		}

		[Token(Token = "0x600105F")]
		[Address(RVA = "0xF83778", Offset = "0xF83778", VA = "0xF83778")]
		public IL3DN_PlayRandomSound()
		{
		}
	}
	[Token(Token = "0x200030B")]
	[RequireComponent(typeof(CharacterController))]
	[RequireComponent(typeof(AudioSource))]
	public class IL3DN_SimpleFPSController : MonoBehaviour
	{
		[Token(Token = "0x40014A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool m_IsWalking;

		[Token(Token = "0x40014AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float m_WalkSpeed;

		[Token(Token = "0x40014AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float m_RunSpeed;

		[Token(Token = "0x40014AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0f, 1f)]
		[SerializeField]
		private float m_RunstepLenghten;

		[Token(Token = "0x40014AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float m_JumpSpeed;

		[Token(Token = "0x40014AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float m_StickToGroundForce;

		[Token(Token = "0x40014AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float m_GravityMultiplier;

		[Token(Token = "0x40014B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private IL3DN_SimpleMouseLook m_MouseLook;

		[Token(Token = "0x40014B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private float m_StepInterval;

		[Token(Token = "0x40014B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private AudioClip[] m_FootstepSounds;

		[Token(Token = "0x40014B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private AudioClip m_JumpSound;

		[Token(Token = "0x40014B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private AudioClip m_LandSound;

		[Token(Token = "0x40014B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Camera m_Camera;

		[Token(Token = "0x40014B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool m_Jump;

		[Token(Token = "0x40014B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float m_YRotation;

		[Token(Token = "0x40014B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector2 m_Input;

		[Token(Token = "0x40014B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 m_MoveDir;

		[Token(Token = "0x40014BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private CharacterController m_CharacterController;

		[Token(Token = "0x40014BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private CollisionFlags m_CollisionFlags;

		[Token(Token = "0x40014BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool m_PreviouslyGrounded;

		[Token(Token = "0x40014BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float m_StepCycle;

		[Token(Token = "0x40014BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float m_NextStep;

		[Token(Token = "0x40014BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private bool m_Jumping;

		[Token(Token = "0x40014C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private AudioSource m_AudioSource;

		[Token(Token = "0x40014C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private AudioClip[] footStepsOverride;

		[Token(Token = "0x40014C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private AudioClip jumpSoundOverride;

		[Token(Token = "0x40014C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private AudioClip landSoundOverride;

		[Token(Token = "0x40014C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool isInSpecialSurface;

		[Token(Token = "0x6001060")]
		[Address(RVA = "0xF83780", Offset = "0xF83780", VA = "0xF83780")]
		private void Start()
		{
		}

		[Token(Token = "0x6001061")]
		[Address(RVA = "0xF838C4", Offset = "0xF838C4", VA = "0xF838C4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001062")]
		[Address(RVA = "0xF839E8", Offset = "0xF839E8", VA = "0xF839E8")]
		private void PlayLandingSound()
		{
		}

		[Token(Token = "0x6001063")]
		[Address(RVA = "0xF83A48", Offset = "0xF83A48", VA = "0xF83A48")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001064")]
		[Address(RVA = "0xF83FB8", Offset = "0xF83FB8", VA = "0xF83FB8")]
		private void PlayJumpSound()
		{
		}

		[Token(Token = "0x6001065")]
		[Address(RVA = "0xF84004", Offset = "0xF84004", VA = "0xF84004")]
		private void ProgressStepCycle(float speed)
		{
		}

		[Token(Token = "0x6001066")]
		[Address(RVA = "0xF84164", Offset = "0xF84164", VA = "0xF84164")]
		private void PlayFootStepAudio()
		{
		}

		[Token(Token = "0x6001067")]
		[Address(RVA = "0xF83E3C", Offset = "0xF83E3C", VA = "0xF83E3C")]
		private void GetInput(out float speed)
		{
		}

		[Token(Token = "0x6001068")]
		[Address(RVA = "0xF83998", Offset = "0xF83998", VA = "0xF83998")]
		private void RotateView()
		{
		}

		[Token(Token = "0x6001069")]
		[Address(RVA = "0xF846EC", Offset = "0xF846EC", VA = "0xF846EC")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600106A")]
		[Address(RVA = "0xF847C0", Offset = "0xF847C0", VA = "0xF847C0")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x600106B")]
		[Address(RVA = "0xF847C8", Offset = "0xF847C8", VA = "0xF847C8")]
		public IL3DN_SimpleFPSController()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200030C")]
	public class IL3DN_SimpleMouseLook
	{
		[Token(Token = "0x40014C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float XSensitivity;

		[Token(Token = "0x40014C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float YSensitivity;

		[Token(Token = "0x40014C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool clampVerticalRotation;

		[Token(Token = "0x40014C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float MinimumX;

		[Token(Token = "0x40014C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float MaximumX;

		[Token(Token = "0x40014CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool smooth;

		[Token(Token = "0x40014CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float smoothTime;

		[Token(Token = "0x40014CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool lockCursor;

		[Token(Token = "0x40014CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Quaternion m_CharacterTargetRot;

		[Token(Token = "0x40014CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Quaternion m_CameraTargetRot;

		[Token(Token = "0x40014CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool m_cursorIsLocked;

		[Token(Token = "0x600106C")]
		[Address(RVA = "0xF83874", Offset = "0xF83874", VA = "0xF83874")]
		public void Init(Transform character, Transform camera)
		{
		}

		[Token(Token = "0x600106D")]
		[Address(RVA = "0xF84390", Offset = "0xF84390", VA = "0xF84390")]
		public void LookRotation(Transform character, Transform camera)
		{
		}

		[Token(Token = "0x600106E")]
		[Address(RVA = "0xF848AC", Offset = "0xF848AC", VA = "0xF848AC")]
		public void SetCursorLock(bool value)
		{
		}

		[Token(Token = "0x600106F")]
		[Address(RVA = "0xF84154", Offset = "0xF84154", VA = "0xF84154")]
		public void UpdateCursorLock()
		{
		}

		[Token(Token = "0x6001070")]
		[Address(RVA = "0xF848E0", Offset = "0xF848E0", VA = "0xF848E0")]
		private void InternalLockUpdate()
		{
		}

		[Token(Token = "0x6001071")]
		[Address(RVA = "0xF84848", Offset = "0xF84848", VA = "0xF84848")]
		private Quaternion ClampRotationAroundXAxis(Quaternion q)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001072")]
		[Address(RVA = "0xF84958", Offset = "0xF84958", VA = "0xF84958")]
		public IL3DN_SimpleMouseLook()
		{
		}
	}
	[Token(Token = "0x200030D")]
	[ExecuteInEditMode]
	public class IL3DN_Snow : MonoBehaviour
	{
		[Token(Token = "0x40014D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool Snow;

		[Token(Token = "0x40014D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 20f)]
		public float SnowPines;

		[Token(Token = "0x40014D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 20f)]
		public float SnowLeaves;

		[Token(Token = "0x40014D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0f, 20f)]
		public float SnowBranches;

		[Token(Token = "0x40014D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 20f)]
		public float SnowRocks;

		[Token(Token = "0x40014D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0f, 20f)]
		public float SnowGrass;

		[Token(Token = "0x40014D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 1f)]
		public float SnowTerrain;

		[Token(Token = "0x40014D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(1f, 2.1f)]
		public float CutoffLeaves;

		[Token(Token = "0x6001073")]
		[Address(RVA = "0xF8498C", Offset = "0xF8498C", VA = "0xF8498C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001074")]
		[Address(RVA = "0xF84AF8", Offset = "0xF84AF8", VA = "0xF84AF8")]
		public IL3DN_Snow()
		{
		}
	}
	[Token(Token = "0x200030E")]
	[ExecuteInEditMode]
	public class IL3DN_Wind : MonoBehaviour
	{
		[Token(Token = "0x40014D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Texture2D NoiseTexture;

		[Token(Token = "0x40014D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool Wiggle;

		[Token(Token = "0x40014DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool Wind;

		[Token(Token = "0x40014DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0f, 1f)]
		public float WindStrenght;

		[Token(Token = "0x40014DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 1f)]
		public float WindSpeed;

		[Token(Token = "0x40014DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0f, 1f)]
		public float WindTurbulence;

		[Token(Token = "0x40014DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 1f)]
		public float LeavesWiggle;

		[Token(Token = "0x40014DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 1f)]
		public float GrassWiggle;

		[Token(Token = "0x40014E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float WindGizmo;

		[Token(Token = "0x6001075")]
		[Address(RVA = "0xF84B18", Offset = "0xF84B18", VA = "0xF84B18")]
		private void Update()
		{
		}

		[Token(Token = "0x6001076")]
		[Address(RVA = "0xF84D40", Offset = "0xF84D40", VA = "0xF84D40")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6001077")]
		[Address(RVA = "0xF8536C", Offset = "0xF8536C", VA = "0xF8536C")]
		public IL3DN_Wind()
		{
		}
	}
}
namespace FurFactory
{
	[Token(Token = "0x200030F")]
	public class Fur : MonoBehaviour
	{
		[Token(Token = "0x40014E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject AnimalModel;

		[Token(Token = "0x40014E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3[] Vertices;

		[Token(Token = "0x40014E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector4[] FurBaryCentrics;

		[Token(Token = "0x40014E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float Length;

		[Token(Token = "0x40014E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float Width;

		[Token(Token = "0x40014E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool IsSkinnedModel;

		[Token(Token = "0x6001078")]
		[Address(RVA = "0xF8538C", Offset = "0xF8538C", VA = "0xF8538C")]
		public Fur()
		{
		}
	}
	[Token(Token = "0x2000310")]
	public class Painter : MonoBehaviour
	{
		[Token(Token = "0x40014E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector3 _storedPos;

		[Token(Token = "0x6001079")]
		[Address(RVA = "0xF8539C", Offset = "0xF8539C", VA = "0xF8539C")]
		public static void PaintDirection(Transform animal, Vector3 pos, Mesh meshToPaint, Mesh FurMesh, Fur fur, float strength = 1f, float radius = 1f)
		{
		}

		[Token(Token = "0x600107A")]
		[Address(RVA = "0xF866BC", Offset = "0xF866BC", VA = "0xF866BC")]
		public static void PaintLength(Transform animal, Vector3 pos, Mesh meshToPaint, Mesh FurMesh, Fur fur, float strength = 1f, float radius = 1f, bool replace = false)
		{
		}

		[Token(Token = "0x600107B")]
		[Address(RVA = "0xF86920", Offset = "0xF86920", VA = "0xF86920")]
		public static void PaintLift(Transform animal, Vector3 pos, Mesh meshToPaint, Mesh FurMesh, Fur fur, float strength = 1f, float radius = 1f, bool replace = false)
		{
		}

		[Token(Token = "0x600107C")]
		[Address(RVA = "0xF85B0C", Offset = "0xF85B0C", VA = "0xF85B0C")]
		public static void SetHairs(Mesh FurMesh, Mesh meshToPaint, Fur fur, float strength)
		{
		}

		[Token(Token = "0x600107D")]
		[Address(RVA = "0xF86B78", Offset = "0xF86B78", VA = "0xF86B78")]
		public Painter()
		{
		}
	}
}
namespace Fluxy
{
	[Token(Token = "0x2000311")]
	public class ExecutionOrder : Attribute
	{
		[Token(Token = "0x40014E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int order;

		[Token(Token = "0x600107F")]
		[Address(RVA = "0xF86C04", Offset = "0xF86C04", VA = "0xF86C04")]
		public ExecutionOrder(int order)
		{
		}
	}
	[Token(Token = "0x2000312")]
	[ExecuteInEditMode]
	[AddComponentMenu("Physics/FluXY/Container", 800)]
	[ExecutionOrder(9998)]
	[RequireComponent(typeof(MeshFilter))]
	[RequireComponent(typeof(MeshRenderer))]
	public class FluxyContainer : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000313")]
		public struct BoundaryConditions
		{
			[Token(Token = "0x2000314")]
			public enum BoundaryType
			{
				[Token(Token = "0x4001507")]
				Open,
				[Token(Token = "0x4001508")]
				Solid,
				[Token(Token = "0x4001509")]
				Periodic
			}

			[Token(Token = "0x4001504")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public BoundaryType horizontalBoundary;

			[Token(Token = "0x4001505")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public BoundaryType verticalBoundary;

			[Token(Token = "0x6001095")]
			[Address(RVA = "0xF886F4", Offset = "0xF886F4", VA = "0xF886F4")]
			public static implicit operator Vector4(BoundaryConditions b)
			{
				return default(Vector4);
			}
		}

		[Serializable]
		[Token(Token = "0x2000315")]
		public struct EdgeFalloff
		{
			[Token(Token = "0x400150A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Min(0f)]
			public float densityEdgeWidth;

			[Token(Token = "0x400150B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Min(0f)]
			public float densityFalloffRate;

			[Token(Token = "0x400150C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Min(0f)]
			public float velocityEdgeWidth;

			[Token(Token = "0x400150D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Min(0f)]
			public float velocityFalloffRate;

			[Token(Token = "0x6001096")]
			[Address(RVA = "0xF88724", Offset = "0xF88724", VA = "0xF88724")]
			public static implicit operator Vector4(EdgeFalloff d)
			{
				return default(Vector4);
			}
		}

		[Token(Token = "0x2000316")]
		public enum LookAtMode
		{
			[Token(Token = "0x400150F")]
			LookAt,
			[Token(Token = "0x4001510")]
			CopyOrientation
		}

		[Token(Token = "0x40014E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Size of the container in local space.")]
		[Header("Container")]
		public Vector2 size;

		[Token(Token = "0x40014EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Method using for facing the lookAt transform: look to it, or copy its orientation.")]
		public LookAtMode lookAtMode;

		[Token(Token = "0x40014EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Transform that the container should be facing at all times. If unused, you can set the container's rotation manually.")]
		public Transform lookAt;

		[Token(Token = "0x40014EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Transform used as raycasting origin for splatting targets onto this container. If unused, simple planar projection will be used instead.")]
		public Transform projectFrom;

		[Token(Token = "0x40014ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Texture used for clearing the container's density buffer.")]
		public Texture2D clearTexture;

		[Token(Token = "0x40014EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Color used to tint the clear texture.")]
		public Color clearColor;

		[Token(Token = "0x40014EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Boundaries")]
		[Tooltip("Falloff controls for density and velocity near container edges.")]
		public EdgeFalloff edgeFalloff;

		[Token(Token = "0x40014F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Falloff controls for density and velocity near container edges.")]
		public BoundaryConditions boundaries;

		[Token(Token = "0x40014F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Range(0f, 1f)]
		[Header("World")]
		[Tooltip("Scale (0%-100%) of container's velocity. If set to zero, containers will be regarded as static.")]
		public float velocityScale;

		[Token(Token = "0x40014F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("Scale (0%-100%) of container's acceleration. This controls how much world-space inertia affects the fluid.")]
		[Range(0f, 1f)]
		public float accelerationScale;

		[Token(Token = "0x40014F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("World-space external force applied to the fluid.")]
		public Vector3 externalForce;

		[Token(Token = "0x40014F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("List of targets that should be splatted onto this container.")]
		public FluxyTarget[] targets;

		[Token(Token = "0x40014F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Header("Fluid")]
		[Range(0f, 1f)]
		[Tooltip("Scales fluid pressure.")]
		public float pressure;

		[Token(Token = "0x40014F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Tooltip("Scales fluid viscosity.")]
		[Range(0f, 1f)]
		public float viscosity;

		[Token(Token = "0x40014F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Amount of turbulence (vorticity) in the fluid.")]
		public float turbulence;

		[Token(Token = "0x40014F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Tooltip("Upwards buoyant force applied to fluid. It is directly proportional to the contents the density buffer's alpha channel (temperature).")]
		public float buoyancy;

		[Token(Token = "0x40014F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Amount of density dissipated per second.")]
		public Vector4 dissipation;

		[Token(Token = "0x40014FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[SerializeField]
		private FluxySolver m_Solver;

		[Token(Token = "0x40014FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 m_Velocity;

		[Token(Token = "0x40014FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Vector3 oldPosition;

		[Token(Token = "0x40014FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Vector3 oldVelocity;

		[Token(Token = "0x40014FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Mesh mesh;

		[Token(Token = "0x40014FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Vector3[] vertices;

		[Token(Token = "0x4001500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Vector3[] normals;

		[Token(Token = "0x4001501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Vector4[] tangents;

		[Token(Token = "0x4001502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Vector2[] uvs;

		[Token(Token = "0x4001503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private int[] triangles;

		[Token(Token = "0x1700017F")]
		public FluxySolver solver
		{
			[Token(Token = "0x6001080")]
			[Address(RVA = "0xF86C2C", Offset = "0xF86C2C", VA = "0xF86C2C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001081")]
			[Address(RVA = "0xF86C34", Offset = "0xF86C34", VA = "0xF86C34")]
			set
			{
			}
		}

		[Token(Token = "0x17000180")]
		public Vector3 velocity
		{
			[Token(Token = "0x6001082")]
			[Address(RVA = "0xF86D6C", Offset = "0xF86D6C", VA = "0xF86D6C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6001083")]
		[Address(RVA = "0xF86D78", Offset = "0xF86D78", VA = "0xF86D78")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001084")]
		[Address(RVA = "0xF87000", Offset = "0xF87000", VA = "0xF87000")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001085")]
		[Address(RVA = "0xF8706C", Offset = "0xF8706C", VA = "0xF8706C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001086")]
		[Address(RVA = "0xF87228", Offset = "0xF87228", VA = "0xF87228")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6001087")]
		[Address(RVA = "0xF86DC0", Offset = "0xF86DC0", VA = "0xF86DC0")]
		private void UpdateMesh()
		{
		}

		[Token(Token = "0x6001088")]
		[Address(RVA = "0xF86C68", Offset = "0xF86C68", VA = "0xF86C68")]
		private void SetSolver(FluxySolver newSolver, bool setMember)
		{
		}

		[Token(Token = "0x6001089")]
		[Address(RVA = "0xF87094", Offset = "0xF87094", VA = "0xF87094")]
		public void Clear()
		{
		}

		[Token(Token = "0x600108A")]
		[Address(RVA = "0xF878CC", Offset = "0xF878CC", VA = "0xF878CC")]
		public Vector3 TransformWorldVectorToUVSpace(in Vector3 vector, in Vector4 uvRect)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600108B")]
		[Address(RVA = "0xF8798C", Offset = "0xF8798C", VA = "0xF8798C")]
		public Vector3 TransformUVVectorToWorldSpace(in Vector3 vector, in Vector4 uvRect)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600108C")]
		[Address(RVA = "0xF87A54", Offset = "0xF87A54", VA = "0xF87A54")]
		public Vector3 TransformWorldPointToUVSpace(in Vector3 point, in Vector4 uvRect)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600108D")]
		[Address(RVA = "0xF87ABC", Offset = "0xF87ABC", VA = "0xF87ABC")]
		public void UpdateTransform()
		{
		}

		[Token(Token = "0x600108E")]
		[Address(RVA = "0xF87C44", Offset = "0xF87C44", VA = "0xF87C44")]
		public Vector4 ProjectTarget(in Vector3 targetPosition, float projectionSize, float aspectRatio)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600108F")]
		[Address(RVA = "0xF88000", Offset = "0xF88000", VA = "0xF88000")]
		public Vector3 UpdateVelocityAndGetAcceleration()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001090")]
		[Address(RVA = "0xF88094", Offset = "0xF88094", VA = "0xF88094")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001091")]
		[Address(RVA = "0xF87F38", Offset = "0xF87F38", VA = "0xF87F38")]
		private Vector3 GetProjectionOrigin(in Vector3 targetPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001092")]
		[Address(RVA = "0xF880D4", Offset = "0xF880D4", VA = "0xF880D4")]
		public Vector3 GetVelocityAt(Vector3 worldPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001093")]
		[Address(RVA = "0xF882EC", Offset = "0xF882EC", VA = "0xF882EC")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001094")]
		[Address(RVA = "0xF88394", Offset = "0xF88394", VA = "0xF88394")]
		public FluxyContainer()
		{
		}
	}
	[Token(Token = "0x2000317")]
	[AddComponentMenu("Physics/FluXY/Solver", 800)]
	public class FluxySolver : MonoBehaviour
	{
		[Token(Token = "0x2000318")]
		public enum PressureSolver
		{
			[Token(Token = "0x4001530")]
			Separable,
			[Token(Token = "0x4001531")]
			Iterative
		}

		[Token(Token = "0x2000319")]
		public delegate void SolverCallback(FluxySolver solver);

		[Token(Token = "0x4001511")]
		private const int MAX_TILES = 17;

		[Token(Token = "0x4001512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Storage used to store and manage simulation buffers.")]
		[Header("Storage")]
		public FluxyStorage storage;

		[Token(Token = "0x4001513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Min(16f)]
		[Tooltip("Desired buffer resolution.")]
		public int desiredResolution;

		[Token(Token = "0x4001514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Supersampling used by density buffer. Eg. a value of 4 will use a density buffer that's 4 times the size of the velocity buffer.")]
		[Range(1f, 8f)]
		public int densitySupersampling;

		[Token(Token = "0x4001515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Dispose of this solver's buffers when culled by LOD.")]
		public bool disposeWhenCulled;

		[Token(Token = "0x4001516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[Tooltip("Allows this solver's data to be read back from the CPU.")]
		public bool isReadable;

		[Token(Token = "0x4001517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Simulation")]
		[Tooltip("Material used to update fluid simulation.")]
		public Material simulationMaterial;

		[Token(Token = "0x4001518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Min(0.0001f)]
		[Tooltip("Maximum amount of time advanced in a single simulation step.")]
		public float maxTimestep;

		[Token(Token = "0x4001519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Min(1f)]
		[Tooltip("Maximum amount of simulation steps taken in a single frame.")]
		public float maxSteps;

		[Token(Token = "0x400151A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Type of pressure solver used: traditional, iterative Jacobi or separable poisson filter.")]
		public PressureSolver pressureSolver;

		[Token(Token = "0x400151B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Amount of iterations when the iterative pressure solver is being used.")]
		[Range(0f, 32f)]
		public int pressureIterations;

		[Token(Token = "0x400151C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private LODGroup lodGroup;

		[Token(Token = "0x400151D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int visibleLOD;

		[Token(Token = "0x400151E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool visible;

		[Token(Token = "0x400151F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<FluxyContainer> containers;

		[Token(Token = "0x4001520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int framebufferID;

		[Token(Token = "0x4001521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool tilesDirty;

		[Token(Token = "0x4001522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector4[] rects;

		[Token(Token = "0x4001523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int[] indices;

		[Token(Token = "0x4001524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector4[] externalForce;

		[Token(Token = "0x4001525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector4[] buoyancy;

		[Token(Token = "0x4001526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector4[] dissipation;

		[Token(Token = "0x4001527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float[] pressure;

		[Token(Token = "0x4001528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float[] viscosity;

		[Token(Token = "0x4001529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float[] turbulence;

		[Token(Token = "0x400152A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector4[] wrapmode;

		[Token(Token = "0x400152B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector4[] densityFalloff;

		[Token(Token = "0x400152C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector4[] offsets;

		[Token(Token = "0x17000181")]
		public FluxyStorage.Framebuffer framebuffer
		{
			[Token(Token = "0x6001099")]
			[Address(RVA = "0xF873BC", Offset = "0xF873BC", VA = "0xF873BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000182")]
		public Texture2D readbackTexture
		{
			[Token(Token = "0x600109A")]
			[Address(RVA = "0xF888E4", Offset = "0xF888E4", VA = "0xF888E4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600109B")]
			[Address(RVA = "0xF888EC", Offset = "0xF888EC", VA = "0xF888EC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x14000008")]
		public event SolverCallback OnStep
		{
			[Token(Token = "0x6001097")]
			[Address(RVA = "0xF88728", Offset = "0xF88728", VA = "0xF88728")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001098")]
			[Address(RVA = "0xF887C4", Offset = "0xF887C4", VA = "0xF887C4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600109C")]
		[Address(RVA = "0xF888F4", Offset = "0xF888F4", VA = "0xF888F4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600109D")]
		[Address(RVA = "0xF88D58", Offset = "0xF88D58", VA = "0xF88D58")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600109E")]
		[Address(RVA = "0xF88E04", Offset = "0xF88E04", VA = "0xF88E04")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x600109F")]
		[Address(RVA = "0xF88E08", Offset = "0xF88E08", VA = "0xF88E08")]
		public bool IsFull()
		{
			return default(bool);
		}

		[Token(Token = "0x60010A0")]
		[Address(RVA = "0xF872BC", Offset = "0xF872BC", VA = "0xF872BC")]
		public bool RegisterContainer(FluxyContainer container)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A1")]
		[Address(RVA = "0xF8722C", Offset = "0xF8722C", VA = "0xF8722C")]
		public void UnregisterContainer(FluxyContainer container)
		{
		}

		[Token(Token = "0x60010A2")]
		[Address(RVA = "0xF87444", Offset = "0xF87444", VA = "0xF87444")]
		public int GetContainerID(FluxyContainer container)
		{
			return default(int);
		}

		[Token(Token = "0x60010A3")]
		[Address(RVA = "0xF88208", Offset = "0xF88208", VA = "0xF88208")]
		public Vector4 GetUVRectForContainer(FluxyContainer container)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60010A4")]
		[Address(RVA = "0xF88B58", Offset = "0xF88B58", VA = "0xF88B58")]
		private void UpdateFramebuffer()
		{
		}

		[Token(Token = "0x60010A5")]
		[Address(RVA = "0xF88D5C", Offset = "0xF88D5C", VA = "0xF88D5C")]
		private void DisposeOfFramebuffer()
		{
		}

		[Token(Token = "0x60010A6")]
		[Address(RVA = "0xF8896C", Offset = "0xF8896C", VA = "0xF8896C")]
		private int GetCurrentLOD([Optional] Camera cam)
		{
			return default(int);
		}

		[Token(Token = "0x60010A7")]
		[Address(RVA = "0xF8938C", Offset = "0xF8938C", VA = "0xF8938C")]
		private void UpdateLOD()
		{
		}

		[Token(Token = "0x60010A8")]
		[Address(RVA = "0xF893CC", Offset = "0xF893CC", VA = "0xF893CC")]
		private void SimulationStep(FluxyStorage.Framebuffer fb, float deltaTime)
		{
		}

		[Token(Token = "0x60010A9")]
		[Address(RVA = "0xF8749C", Offset = "0xF8749C", VA = "0xF8749C")]
		public void UpdateTileData()
		{
		}

		[Token(Token = "0x60010AA")]
		[Address(RVA = "0xF89E90", Offset = "0xF89E90", VA = "0xF89E90")]
		private void UpdateContainerTransforms()
		{
		}

		[Token(Token = "0x60010AB")]
		[Address(RVA = "0xF89F18", Offset = "0xF89F18", VA = "0xF89F18")]
		private void UpdateContainers(FluxyStorage.Framebuffer fb, float deltaTime)
		{
		}

		[Token(Token = "0x60010AC")]
		[Address(RVA = "0xF8A6E4", Offset = "0xF8A6E4", VA = "0xF8A6E4")]
		private void Splat(FluxyStorage.Framebuffer fb)
		{
		}

		[Token(Token = "0x60010AD")]
		[Address(RVA = "0xF8AA20", Offset = "0xF8AA20", VA = "0xF8AA20")]
		private void Readback(FluxyStorage.Framebuffer fb)
		{
		}

		[Token(Token = "0x60010AE")]
		[Address(RVA = "0xF8AB0C", Offset = "0xF8AB0C", VA = "0xF8AB0C")]
		public void UpdateSolver(float deltaTime)
		{
		}

		[Token(Token = "0x60010AF")]
		[Address(RVA = "0xF8AC58", Offset = "0xF8AC58", VA = "0xF8AC58")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60010B0")]
		[Address(RVA = "0xF8AC74", Offset = "0xF8AC74", VA = "0xF8AC74")]
		public FluxySolver()
		{
		}
	}
	[Token(Token = "0x200031A")]
	[CreateAssetMenu(fileName = "FluxyStorage", menuName = "FluXY/FluxyStorage", order = 1)]
	public class FluxyStorage : ScriptableObject
	{
		[Token(Token = "0x200031B")]
		public class Framebuffer
		{
			[Token(Token = "0x4001538")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RenderTexture velocityA;

			[Token(Token = "0x4001539")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public RenderTexture velocityB;

			[Token(Token = "0x400153A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RenderTexture stateA;

			[Token(Token = "0x400153B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public RenderTexture stateB;

			[Token(Token = "0x400153C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public RenderTexture tileID;

			[Token(Token = "0x400153D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public int desiredResolution;

			[Token(Token = "0x400153E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public int stateSupersampling;

			[Token(Token = "0x60010BF")]
			[Address(RVA = "0xF8B15C", Offset = "0xF8B15C", VA = "0xF8B15C")]
			public Framebuffer(int desiredResolution, int stateSupersampling = 1)
			{
			}
		}

		[Token(Token = "0x200031C")]
		public enum FluidTexturePrecision
		{
			[Token(Token = "0x4001540")]
			Float,
			[Token(Token = "0x4001541")]
			Half,
			[Token(Token = "0x4001542")]
			Fixed
		}

		[Token(Token = "0x4001532")]
		public const int minFramebufferSize = 64;

		[Token(Token = "0x4001533")]
		public const int bytesPerMbyte = 1048576;

		[Token(Token = "0x4001534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Memory budget, expressed in megabytes. The combined memory used by all solvers sharing this asset will not be larger than this value. Note that supersampling is not taken into account.")]
		public int memoryBudget;

		[Token(Token = "0x4001535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Precision of the density textures.")]
		public FluidTexturePrecision densityPrecision;

		[Token(Token = "0x4001536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Precision of the velocity textures.")]
		public FluidTexturePrecision velocityPrecision;

		[Token(Token = "0x4001537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<Framebuffer> framebuffers;

		[Token(Token = "0x60010B6")]
		[Address(RVA = "0xF88E58", Offset = "0xF88E58", VA = "0xF88E58")]
		public int RequestFramebuffer(int desiredResolution, int stateSupersampling)
		{
			return default(int);
		}

		[Token(Token = "0x60010B7")]
		[Address(RVA = "0xF89210", Offset = "0xF89210", VA = "0xF89210")]
		public void DisposeFramebuffer(int framebufferID, bool expand = true)
		{
		}

		[Token(Token = "0x60010B8")]
		[Address(RVA = "0xF8B19C", Offset = "0xF8B19C", VA = "0xF8B19C")]
		private int PrevPowerTwo(int x)
		{
			return default(int);
		}

		[Token(Token = "0x60010B9")]
		[Address(RVA = "0xF88FF8", Offset = "0xF88FF8", VA = "0xF88FF8")]
		public void ResizeStorage()
		{
		}

		[Token(Token = "0x60010BA")]
		[Address(RVA = "0xF88860", Offset = "0xF88860", VA = "0xF88860")]
		public Framebuffer GetFramebuffer(int framebufferID)
		{
			return null;
		}

		[Token(Token = "0x60010BB")]
		[Address(RVA = "0xF8B5EC", Offset = "0xF8B5EC", VA = "0xF8B5EC")]
		private RenderTextureFormat GetRenderTextureFormat(FluidTexturePrecision precision)
		{
			return default(RenderTextureFormat);
		}

		[Token(Token = "0x60010BC")]
		[Address(RVA = "0xF8B1C4", Offset = "0xF8B1C4", VA = "0xF8B1C4")]
		private int GetBytesPerPixel(FluidTexturePrecision precision)
		{
			return default(int);
		}

		[Token(Token = "0x60010BD")]
		[Address(RVA = "0xF8B21C", Offset = "0xF8B21C", VA = "0xF8B21C")]
		private void ReallocateFramebuffer(int id, int resolution)
		{
		}

		[Token(Token = "0x60010BE")]
		[Address(RVA = "0xF8B64C", Offset = "0xF8B64C", VA = "0xF8B64C")]
		public FluxyStorage()
		{
		}
	}
	[Token(Token = "0x200031D")]
	[ExecutionOrder(9999)]
	[AddComponentMenu("Physics/FluXY/Target", 800)]
	public class FluxyTarget : MonoBehaviour
	{
		[Token(Token = "0x200031E")]
		public delegate void SplatCallback(FluxyTarget target, FluxyContainer container, FluxyStorage.Framebuffer fb, in Vector4 rect);

		[Token(Token = "0x4001543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Material used to splat this target's velocity and density onto containers.")]
		[Header("Splat")]
		public Material splatMaterial;

		[Token(Token = "0x4001544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Min(1f)]
		[Tooltip("Amount of splats performed per frame, interpolating splat position between frames. Increase this to ensure fast-moving targets yield continuous strokes.")]
		public int temporalSamples;

		[Token(Token = "0x4001545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Scale of the target's shape when splatted.")]
		public float size;

		[Token(Token = "0x4001546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float rotation;

		[Token(Token = "0x4001547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0f, 1f)]
		public float positionRandomness;

		[Token(Token = "0x4001548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 1f)]
		public float sizeRandomness;

		[Token(Token = "0x4001549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 1f)]
		public float rotationRandomness;

		[Token(Token = "0x400154A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 1f)]
		[Header("Velocity")]
		public float velocityWeight;

		[Token(Token = "0x400154B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Texture defining the target's splat shape.")]
		public Texture velocityTexture;

		[Token(Token = "0x400154C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Maximum relative velocity between a container and this target.")]
		[Min(0f)]
		public float maxRelativeVelocity;

		[Token(Token = "0x400154D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("World-space scale applied to this target's velocity vector.")]
		public Vector3 velocityScale;

		[Token(Token = "0x400154E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Local-space force applied by this target, regardless of its velocity")]
		public Vector3 force;

		[Token(Token = "0x400154F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Range(0f, 1f)]
		[Header("Density")]
		public float densityWeight;

		[Token(Token = "0x4001550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Texture defining the target's splat shape.")]
		public Texture densityTexture;

		[Token(Token = "0x4001551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Blend mode used for source fragments.")]
		public BlendMode srcBlend;

		[Token(Token = "0x4001552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("Blend mode used for destination fragments.")]
		public BlendMode dstBlend;

		[Token(Token = "0x4001553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Blend operation used when splatting density.")]
		public BlendOp blendOp;

		[Token(Token = "0x4001554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("Color splatted by this target onto the container's density buffer.")]
		public Color color;

		[Token(Token = "0x4001555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 oldPosition;

		[Token(Token = "0x17000183")]
		public Vector3 velocity
		{
			[Token(Token = "0x60010C2")]
			[Address(RVA = "0xF8B820", Offset = "0xF8B820", VA = "0xF8B820")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x14000009")]
		public event SplatCallback OnSplat
		{
			[Token(Token = "0x60010C0")]
			[Address(RVA = "0xF8B6E8", Offset = "0xF8B6E8", VA = "0xF8B6E8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60010C1")]
			[Address(RVA = "0xF8B784", Offset = "0xF8B784", VA = "0xF8B784")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60010C3")]
		[Address(RVA = "0xF8B884", Offset = "0xF8B884", VA = "0xF8B884")]
		public void Awake()
		{
		}

		[Token(Token = "0x60010C4")]
		[Address(RVA = "0xF8B8B4", Offset = "0xF8B8B4", VA = "0xF8B8B4")]
		public void Start()
		{
		}

		[Token(Token = "0x60010C5")]
		[Address(RVA = "0xF8B8B8", Offset = "0xF8B8B8", VA = "0xF8B8B8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60010C6")]
		[Address(RVA = "0xF8B8E8", Offset = "0xF8B8E8", VA = "0xF8B8E8", Slot = "4")]
		public virtual void Splat(FluxyContainer container, FluxyStorage.Framebuffer fb, in Vector4 rect)
		{
		}

		[Token(Token = "0x60010C7")]
		[Address(RVA = "0xF8BE70", Offset = "0xF8BE70", VA = "0xF8BE70")]
		public FluxyTarget()
		{
		}
	}
	[Token(Token = "0x200031F")]
	public static class FluxyUtils
	{
		[Token(Token = "0x4001557")]
		public const float epsilon = 1E-05f;

		[Token(Token = "0x60010CC")]
		[Address(RVA = "0xF89310", Offset = "0xF89310", VA = "0xF89310")]
		public static float RelativeScreenHeight(Camera camera, float distance, float size)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000320")]
	public static class RectPacking
	{
		[Token(Token = "0x2000321")]
		private class RectComparer : IComparer<Vector4>
		{
			[Token(Token = "0x60010CE")]
			[Address(RVA = "0xF8C14C", Offset = "0xF8C14C", VA = "0xF8C14C", Slot = "4")]
			public int Compare(Vector4 a, Vector4 b)
			{
				return default(int);
			}

			[Token(Token = "0x60010CF")]
			[Address(RVA = "0xF8C144", Offset = "0xF8C144", VA = "0xF8C144")]
			public RectComparer()
			{
			}
		}

		[Token(Token = "0x60010CD")]
		[Address(RVA = "0xF8976C", Offset = "0xF8976C", VA = "0xF8976C")]
		public static Vector2 Pack(Vector4[] rects, int[] indices, int first, int length, int margin)
		{
			return default(Vector2);
		}
	}
	[Token(Token = "0x2000322")]
	[AddComponentMenu("Physics/FluXY/TargetProviders/Target Detector", 800)]
	public class FluxyTargetDetector : FluxyTargetProvider
	{
		[Token(Token = "0x4001558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 size;

		[Token(Token = "0x4001559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int maxTargets;

		[Token(Token = "0x400155A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LayerMask layers;

		[Token(Token = "0x400155B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Collider[] colliders;

		[Token(Token = "0x400155C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private FluxyTarget[] targets;

		[Token(Token = "0x60010D0")]
		[Address(RVA = "0xF8C19C", Offset = "0xF8C19C", VA = "0xF8C19C")]
		public void OnValidate()
		{
		}

		[Token(Token = "0x60010D1")]
		[Address(RVA = "0xF8C214", Offset = "0xF8C214", VA = "0xF8C214")]
		public void Awake()
		{
		}

		[Token(Token = "0x60010D2")]
		[Address(RVA = "0xF8C28C", Offset = "0xF8C28C", VA = "0xF8C28C", Slot = "5")]
		public override FluxyTarget[] GetTargets(out int targetCount)
		{
			return null;
		}

		[Token(Token = "0x60010D3")]
		[Address(RVA = "0xF8C42C", Offset = "0xF8C42C", VA = "0xF8C42C")]
		public void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60010D4")]
		[Address(RVA = "0xF8C480", Offset = "0xF8C480", VA = "0xF8C480")]
		public FluxyTargetDetector()
		{
		}
	}
	[Token(Token = "0x2000323")]
	public interface IFluxyTargetProvider
	{
		[Token(Token = "0x60010D5")]
		FluxyTarget[] GetTargets(out int targetCount);
	}
	[Token(Token = "0x2000324")]
	[RequireComponent(typeof(FluxyContainer))]
	[DisallowMultipleComponent]
	public abstract class FluxyTargetProvider : MonoBehaviour, IFluxyTargetProvider
	{
		[Token(Token = "0x60010D6")]
		public abstract FluxyTarget[] GetTargets(out int targetCount);

		[Token(Token = "0x60010D7")]
		[Address(RVA = "0xF8C540", Offset = "0xF8C540", VA = "0xF8C540")]
		protected FluxyTargetProvider()
		{
		}
	}
}
namespace FluxySamples
{
	[Token(Token = "0x2000325")]
	[RequireComponent(typeof(Rigidbody))]
	public class AdvectRigidbody : MonoBehaviour
	{
		[Token(Token = "0x400155D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FluxyContainer container;

		[Token(Token = "0x400155E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Rigidbody rb;

		[Token(Token = "0x60010D8")]
		[Address(RVA = "0xF8C548", Offset = "0xF8C548", VA = "0xF8C548")]
		private void Awake()
		{
		}

		[Token(Token = "0x60010D9")]
		[Address(RVA = "0xF8C5A0", Offset = "0xF8C5A0", VA = "0xF8C5A0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60010DA")]
		[Address(RVA = "0xF8C5E4", Offset = "0xF8C5E4", VA = "0xF8C5E4")]
		public AdvectRigidbody()
		{
		}
	}
	[Token(Token = "0x2000326")]
	[RequireComponent(typeof(Rigidbody))]
	[RequireComponent(typeof(CapsuleCollider))]
	[RequireComponent(typeof(Animator))]
	public class FluxyCharacter : MonoBehaviour
	{
		[Token(Token = "0x400155F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float m_MovingTurnSpeed;

		[Token(Token = "0x4001560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float m_StationaryTurnSpeed;

		[Token(Token = "0x4001561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float m_JumpPower;

		[Token(Token = "0x4001562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		[Range(1f, 4f)]
		private float m_GravityMultiplier;

		[Token(Token = "0x4001563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float m_RunCycleLegOffset;

		[Token(Token = "0x4001564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float m_MoveSpeedMultiplier;

		[Token(Token = "0x4001565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float m_AnimSpeedMultiplier;

		[Token(Token = "0x4001566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private float m_GroundCheckDistance;

		[Token(Token = "0x4001567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody m_Rigidbody;

		[Token(Token = "0x4001568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Animator m_Animator;

		[Token(Token = "0x4001569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool m_IsGrounded;

		[Token(Token = "0x400156A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float m_OrigGroundCheckDistance;

		[Token(Token = "0x400156B")]
		private const float k_Half = 0.5f;

		[Token(Token = "0x400156C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float m_TurnAmount;

		[Token(Token = "0x400156D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float m_ForwardAmount;

		[Token(Token = "0x400156E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 m_GroundNormal;

		[Token(Token = "0x400156F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float m_CapsuleHeight;

		[Token(Token = "0x4001570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 m_CapsuleCenter;

		[Token(Token = "0x4001571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private CapsuleCollider m_Capsule;

		[Token(Token = "0x4001572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool m_Crouching;

		[Token(Token = "0x60010DB")]
		[Address(RVA = "0xF8C5EC", Offset = "0xF8C5EC", VA = "0xF8C5EC")]
		private void Start()
		{
		}

		[Token(Token = "0x60010DC")]
		[Address(RVA = "0xF8C764", Offset = "0xF8C764", VA = "0xF8C764")]
		public void Move(Vector3 move, bool crouch, bool jump)
		{
		}

		[Token(Token = "0x60010DD")]
		[Address(RVA = "0xF8CD80", Offset = "0xF8CD80", VA = "0xF8CD80")]
		private void ScaleCapsuleForCrouching(bool crouch)
		{
		}

		[Token(Token = "0x60010DE")]
		[Address(RVA = "0xF8CFA0", Offset = "0xF8CFA0", VA = "0xF8CFA0")]
		private void PreventStandingInLowHeadroom()
		{
		}

		[Token(Token = "0x60010DF")]
		[Address(RVA = "0xF8D120", Offset = "0xF8D120", VA = "0xF8D120")]
		private void UpdateAnimator(Vector3 move)
		{
		}

		[Token(Token = "0x60010E0")]
		[Address(RVA = "0xF8CCE8", Offset = "0xF8CCE8", VA = "0xF8CCE8")]
		private void HandleAirborneMovement()
		{
		}

		[Token(Token = "0x60010E1")]
		[Address(RVA = "0xF8CBCC", Offset = "0xF8CBCC", VA = "0xF8CBCC")]
		private void HandleGroundedMovement(bool crouch, bool jump)
		{
		}

		[Token(Token = "0x60010E2")]
		[Address(RVA = "0xF8CB48", Offset = "0xF8CB48", VA = "0xF8CB48")]
		private void ApplyExtraTurnRotation()
		{
		}

		[Token(Token = "0x60010E3")]
		[Address(RVA = "0xF8D3E0", Offset = "0xF8D3E0", VA = "0xF8D3E0")]
		public void OnAnimatorMove()
		{
		}

		[Token(Token = "0x60010E4")]
		[Address(RVA = "0xF8C9C0", Offset = "0xF8C9C0", VA = "0xF8C9C0")]
		private void CheckGroundStatus()
		{
		}

		[Token(Token = "0x60010E5")]
		[Address(RVA = "0xF8D470", Offset = "0xF8D470", VA = "0xF8D470")]
		public FluxyCharacter()
		{
		}
	}
	[Token(Token = "0x2000327")]
	[RequireComponent(typeof(FluxyCharacter))]
	public class SampleCharacterController : MonoBehaviour
	{
		[Token(Token = "0x4001573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private FluxyCharacter m_Character;

		[Token(Token = "0x4001574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform m_Cam;

		[Token(Token = "0x4001575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 m_CamForward;

		[Token(Token = "0x4001576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 m_Move;

		[Token(Token = "0x4001577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool m_Jump;

		[Token(Token = "0x60010E6")]
		[Address(RVA = "0xF8D490", Offset = "0xF8D490", VA = "0xF8D490")]
		private void Start()
		{
		}

		[Token(Token = "0x60010E7")]
		[Address(RVA = "0xF8D5A0", Offset = "0xF8D5A0", VA = "0xF8D5A0")]
		private void Update()
		{
		}

		[Token(Token = "0x60010E8")]
		[Address(RVA = "0xF8D8A4", Offset = "0xF8D8A4", VA = "0xF8D8A4")]
		public SampleCharacterController()
		{
		}
	}
	[Token(Token = "0x2000328")]
	public class FirstPersonLauncher : MonoBehaviour
	{
		[Token(Token = "0x4001578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject prefab;

		[Token(Token = "0x4001579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float power;

		[Token(Token = "0x60010E9")]
		[Address(RVA = "0xF8D8AC", Offset = "0xF8D8AC", VA = "0xF8D8AC")]
		private void Update()
		{
		}

		[Token(Token = "0x60010EA")]
		[Address(RVA = "0xF8DA70", Offset = "0xF8DA70", VA = "0xF8DA70")]
		public FirstPersonLauncher()
		{
		}
	}
	[Token(Token = "0x2000329")]
	[RequireComponent(typeof(Camera))]
	public class LookAroundCamera : MonoBehaviour
	{
		[Token(Token = "0x200032A")]
		public struct CameraShot
		{
			[Token(Token = "0x4001581")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 position;

			[Token(Token = "0x4001582")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Quaternion rotation;

			[Token(Token = "0x4001583")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 up;

			[Token(Token = "0x4001584")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float fieldOfView;

			[Token(Token = "0x60010F0")]
			[Address(RVA = "0xF8DBB4", Offset = "0xF8DBB4", VA = "0xF8DBB4")]
			public CameraShot(Vector3 position, Quaternion rotation, Vector3 up, float fieldOfView)
			{
			}
		}

		[Token(Token = "0x400157A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Camera cam;

		[Token(Token = "0x400157B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CameraShot currentShot;

		[Token(Token = "0x400157C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float movementSpeed;

		[Token(Token = "0x400157D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float rotationSpeed;

		[Token(Token = "0x400157E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float translationResponse;

		[Token(Token = "0x400157F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float rotationResponse;

		[Token(Token = "0x4001580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float fovResponse;

		[Token(Token = "0x60010EB")]
		[Address(RVA = "0xF8DA80", Offset = "0xF8DA80", VA = "0xF8DA80")]
		private void Awake()
		{
		}

		[Token(Token = "0x60010EC")]
		[Address(RVA = "0xF8DBDC", Offset = "0xF8DBDC", VA = "0xF8DBDC")]
		private void LookAt(Vector3 position, Vector3 up)
		{
		}

		[Token(Token = "0x60010ED")]
		[Address(RVA = "0xF8DC18", Offset = "0xF8DC18", VA = "0xF8DC18")]
		private void UpdateShot()
		{
		}

		[Token(Token = "0x60010EE")]
		[Address(RVA = "0xF8DDCC", Offset = "0xF8DDCC", VA = "0xF8DDCC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60010EF")]
		[Address(RVA = "0xF8E1E0", Offset = "0xF8E1E0", VA = "0xF8E1E0")]
		public LookAroundCamera()
		{
		}
	}
	[Token(Token = "0x200032B")]
	public class MoveAndRotate : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200032C")]
		public class Vector3andSpace
		{
			[Token(Token = "0x4001589")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 value;

			[Token(Token = "0x400158A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Space space;

			[Token(Token = "0x60010F4")]
			[Address(RVA = "0xF8E2DC", Offset = "0xF8E2DC", VA = "0xF8E2DC")]
			public Vector3andSpace()
			{
			}
		}

		[Token(Token = "0x4001585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3andSpace moveUnitsPerSecond;

		[Token(Token = "0x4001586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3andSpace rotateDegreesPerSecond;

		[Token(Token = "0x4001587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool ignoreTimescale;

		[Token(Token = "0x4001588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float m_LastRealTime;

		[Token(Token = "0x60010F1")]
		[Address(RVA = "0xF8E1FC", Offset = "0xF8E1FC", VA = "0xF8E1FC")]
		private void Start()
		{
		}

		[Token(Token = "0x60010F2")]
		[Address(RVA = "0xF8E218", Offset = "0xF8E218", VA = "0xF8E218")]
		private void Update()
		{
		}

		[Token(Token = "0x60010F3")]
		[Address(RVA = "0xF8E2D4", Offset = "0xF8E2D4", VA = "0xF8E2D4")]
		public MoveAndRotate()
		{
		}
	}
}
namespace DynamicShadowProjector
{
	[Token(Token = "0x200032D")]
	[DisallowMultipleComponent]
	[ExecuteAlways]
	[RequireComponent(typeof(ShadowTextureRenderer))]
	public class DrawSceneObject : MonoBehaviour
	{
		[Token(Token = "0x400158B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Shader m_replacementShader;

		[Token(Token = "0x400158C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private LayerMask m_cullingMask;

		[Token(Token = "0x400158D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ShadowTextureRenderer m_shadowTextureRenderer;

		[Token(Token = "0x400158E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private string[] m_shaderTagList;

		[Token(Token = "0x400158F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static ShaderTagId[] s_defaultShaderTagIdList;

		[Token(Token = "0x4001590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ShaderTagId[] m_shaderTagIdList;

		[Token(Token = "0x17000184")]
		public Shader replacementShader
		{
			[Token(Token = "0x60010F5")]
			[Address(RVA = "0xF8E2EC", Offset = "0xF8E2EC", VA = "0xF8E2EC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60010F6")]
			[Address(RVA = "0xF8E2F4", Offset = "0xF8E2F4", VA = "0xF8E2F4")]
			set
			{
			}
		}

		[Token(Token = "0x17000185")]
		public LayerMask cullingMask
		{
			[Token(Token = "0x60010F7")]
			[Address(RVA = "0xF8E4E4", Offset = "0xF8E4E4", VA = "0xF8E4E4")]
			get
			{
				return default(LayerMask);
			}
			[Token(Token = "0x60010F8")]
			[Address(RVA = "0xF8E4EC", Offset = "0xF8E4EC", VA = "0xF8E4EC")]
			set
			{
			}
		}

		[Token(Token = "0x17000186")]
		public ShadowTextureRenderer shadowTextureRenderer
		{
			[Token(Token = "0x60010F9")]
			[Address(RVA = "0xF8E364", Offset = "0xF8E364", VA = "0xF8E364")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000187")]
		public string[] shaderTagList
		{
			[Token(Token = "0x60010FE")]
			[Address(RVA = "0xF8E778", Offset = "0xF8E778", VA = "0xF8E778")]
			get
			{
				return null;
			}
			[Token(Token = "0x60010FF")]
			[Address(RVA = "0xF8E780", Offset = "0xF8E780", VA = "0xF8E780")]
			set
			{
			}
		}

		[Token(Token = "0x17000188")]
		public ShaderTagId[] shaderTagIds
		{
			[Token(Token = "0x6001100")]
			[Address(RVA = "0xF8E994", Offset = "0xF8E994", VA = "0xF8E994")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010FA")]
		[Address(RVA = "0xF8E5DC", Offset = "0xF8E5DC", VA = "0xF8E5DC")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x60010FB")]
		[Address(RVA = "0xF8E668", Offset = "0xF8E668", VA = "0xF8E668")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60010FC")]
		[Address(RVA = "0xF8E6D4", Offset = "0xF8E6D4", VA = "0xF8E6D4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60010FD")]
		[Address(RVA = "0xF8E728", Offset = "0xF8E728", VA = "0xF8E728")]
		private void OnVisibilityChanged(bool isVisible)
		{
		}

		[Token(Token = "0x6001101")]
		[Address(RVA = "0xF8E79C", Offset = "0xF8E79C", VA = "0xF8E79C")]
		public void UpdateShaderTagIdList()
		{
		}

		[Token(Token = "0x6001102")]
		[Address(RVA = "0xF8E9B8", Offset = "0xF8E9B8", VA = "0xF8E9B8")]
		public DrawSceneObject()
		{
		}
	}
	[Token(Token = "0x200032E")]
	[RequireComponent(typeof(ShadowTextureRenderer))]
	[ExecuteAlways]
	public class DrawTargetObject : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200032F")]
		public struct ReplaceShader
		{
			[Token(Token = "0x40015A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string renderType;

			[Token(Token = "0x40015A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Shader shader;
		}

		[Token(Token = "0x2000330")]
		public enum TextureAlignment
		{
			[Token(Token = "0x40015A4")]
			None,
			[Token(Token = "0x40015A5")]
			TargetAxisX,
			[Token(Token = "0x40015A6")]
			TargetAxisY,
			[Token(Token = "0x40015A7")]
			TargetAxisZ
		}

		[Token(Token = "0x2000331")]
		public enum UpdateFunction
		{
			[Token(Token = "0x40015A9")]
			OnPreCull,
			[Token(Token = "0x40015AA")]
			LateUpdate,
			[Token(Token = "0x40015AB")]
			UpdateTransform
		}

		[Token(Token = "0x2000332")]
		private struct CommandBufferHash
		{
			[Token(Token = "0x40015AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ulong hash;

			[Token(Token = "0x6001129")]
			[Address(RVA = "0xF8ECB4", Offset = "0xF8ECB4", VA = "0xF8ECB4")]
			public void Init()
			{
			}

			[Token(Token = "0x600112A")]
			[Address(RVA = "0xF8F7E0", Offset = "0xF8F7E0", VA = "0xF8F7E0")]
			public void AddRenderer(Renderer renderer)
			{
			}

			[Token(Token = "0x600112B")]
			[Address(RVA = "0xF8F7D0", Offset = "0xF8F7D0", VA = "0xF8F7D0")]
			public bool Equals(CommandBufferHash rhs)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4001591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform m_target;

		[Token(Token = "0x4001592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform m_targetDirection;

		[Token(Token = "0x4001593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private LayerMask m_layerMask;

		[Token(Token = "0x4001594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private TextureAlignment m_textureAlignment;

		[Token(Token = "0x4001595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private UpdateFunction m_updateFunction;

		[Token(Token = "0x4001596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Material m_shadowShader;

		[Token(Token = "0x4001597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private ReplaceShader[] m_replacementShaders;

		[Token(Token = "0x4001598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private bool m_renderChildren;

		[Token(Token = "0x4001599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		[SerializeField]
		private bool m_autoDetectHierarchyChanges;

		[Token(Token = "0x400159A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		[SerializeField]
		private bool m_followTarget;

		[Token(Token = "0x400159B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private CommandBufferHash m_commandBufferHash;

		[Token(Token = "0x400159C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool m_isCommandBufferDirty;

		[Token(Token = "0x400159D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CommandBuffer m_commandBuffer;

		[Token(Token = "0x400159E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private ShadowTextureRenderer m_shadowRenderer;

		[Token(Token = "0x400159F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector3 m_localTargetPosition;

		[Token(Token = "0x40015A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Dictionary<Material, Material> m_replacedMaterialCache;

		[Token(Token = "0x17000189")]
		public Transform target
		{
			[Token(Token = "0x6001103")]
			[Address(RVA = "0xF8E9C0", Offset = "0xF8E9C0", VA = "0xF8E9C0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001104")]
			[Address(RVA = "0xF8E9C8", Offset = "0xF8E9C8", VA = "0xF8E9C8")]
			set
			{
			}
		}

		[Token(Token = "0x1700018A")]
		public Transform targetDirection
		{
			[Token(Token = "0x6001105")]
			[Address(RVA = "0xF8EA64", Offset = "0xF8EA64", VA = "0xF8EA64")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001106")]
			[Address(RVA = "0xF8EA6C", Offset = "0xF8EA6C", VA = "0xF8EA6C")]
			set
			{
			}
		}

		[Token(Token = "0x1700018B")]
		public bool renderChildren
		{
			[Token(Token = "0x6001107")]
			[Address(RVA = "0xF8EA74", Offset = "0xF8EA74", VA = "0xF8EA74")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001108")]
			[Address(RVA = "0xF8EA7C", Offset = "0xF8EA7C", VA = "0xF8EA7C")]
			set
			{
			}
		}

		[Token(Token = "0x1700018C")]
		public bool autoDetectHierarchyChanges
		{
			[Token(Token = "0x6001109")]
			[Address(RVA = "0xF8EA9C", Offset = "0xF8EA9C", VA = "0xF8EA9C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600110A")]
			[Address(RVA = "0xF8EAA4", Offset = "0xF8EAA4", VA = "0xF8EAA4")]
			set
			{
			}
		}

		[Token(Token = "0x1700018D")]
		public LayerMask layerMask
		{
			[Token(Token = "0x600110B")]
			[Address(RVA = "0xF8EAB0", Offset = "0xF8EAB0", VA = "0xF8EAB0")]
			get
			{
				return default(LayerMask);
			}
			[Token(Token = "0x600110C")]
			[Address(RVA = "0xF8EAB8", Offset = "0xF8EAB8", VA = "0xF8EAB8")]
			set
			{
			}
		}

		[Token(Token = "0x1700018E")]
		public TextureAlignment textureAlignment
		{
			[Token(Token = "0x600110D")]
			[Address(RVA = "0xF8EB0C", Offset = "0xF8EB0C", VA = "0xF8EB0C")]
			get
			{
				return default(TextureAlignment);
			}
			[Token(Token = "0x600110E")]
			[Address(RVA = "0xF8EB14", Offset = "0xF8EB14", VA = "0xF8EB14")]
			set
			{
			}
		}

		[Token(Token = "0x1700018F")]
		public UpdateFunction updateFunction
		{
			[Token(Token = "0x600110F")]
			[Address(RVA = "0xF8EB1C", Offset = "0xF8EB1C", VA = "0xF8EB1C")]
			get
			{
				return default(UpdateFunction);
			}
			[Token(Token = "0x6001110")]
			[Address(RVA = "0xF8EB24", Offset = "0xF8EB24", VA = "0xF8EB24")]
			set
			{
			}
		}

		[Token(Token = "0x17000190")]
		public bool followTarget
		{
			[Token(Token = "0x6001111")]
			[Address(RVA = "0xF8EB2C", Offset = "0xF8EB2C", VA = "0xF8EB2C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001112")]
			[Address(RVA = "0xF8EB34", Offset = "0xF8EB34", VA = "0xF8EB34")]
			set
			{
			}
		}

		[Token(Token = "0x17000191")]
		public Material shadowShader
		{
			[Token(Token = "0x6001113")]
			[Address(RVA = "0xF8EB40", Offset = "0xF8EB40", VA = "0xF8EB40")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001114")]
			[Address(RVA = "0xF8EB48", Offset = "0xF8EB48", VA = "0xF8EB48")]
			set
			{
			}
		}

		[Token(Token = "0x17000192")]
		public ReplaceShader[] replacementShaders
		{
			[Token(Token = "0x6001115")]
			[Address(RVA = "0xF8EBD8", Offset = "0xF8EBD8", VA = "0xF8EBD8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001116")]
			[Address(RVA = "0xF8EBE0", Offset = "0xF8EBE0", VA = "0xF8EBE0")]
			set
			{
			}
		}

		[Token(Token = "0x17000193")]
		internal CommandBuffer commandBuffer
		{
			[Token(Token = "0x600111B")]
			[Address(RVA = "0xF8F1D0", Offset = "0xF8F1D0", VA = "0xF8F1D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001117")]
		[Address(RVA = "0xF8EA58", Offset = "0xF8EA58", VA = "0xF8EA58")]
		public void SetCommandBufferDirty()
		{
		}

		[Token(Token = "0x6001118")]
		[Address(RVA = "0xF8EC04", Offset = "0xF8EC04", VA = "0xF8EC04")]
		public void UpdateCommandBuffer()
		{
		}

		[Token(Token = "0x6001119")]
		[Address(RVA = "0xF8EF1C", Offset = "0xF8EF1C", VA = "0xF8EF1C")]
		public void UpdateMaterial(Material mat)
		{
		}

		[Token(Token = "0x600111A")]
		[Address(RVA = "0xF8EFA0", Offset = "0xF8EFA0", VA = "0xF8EFA0")]
		public void UpdateTransform()
		{
		}

		[Token(Token = "0x600111C")]
		[Address(RVA = "0xF8F1D8", Offset = "0xF8F1D8", VA = "0xF8F1D8")]
		private void Awake()
		{
		}

		[Token(Token = "0x600111D")]
		[Address(RVA = "0xF8F350", Offset = "0xF8F350", VA = "0xF8F350")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x600111E")]
		[Address(RVA = "0xF8F360", Offset = "0xF8F360", VA = "0xF8F360")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600111F")]
		[Address(RVA = "0xF8F450", Offset = "0xF8F450", VA = "0xF8F450")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001120")]
		[Address(RVA = "0xF8F4FC", Offset = "0xF8F4FC", VA = "0xF8F4FC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001121")]
		[Address(RVA = "0xF8F6BC", Offset = "0xF8F6BC", VA = "0xF8F6BC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001122")]
		[Address(RVA = "0xF8F76C", Offset = "0xF8F76C", VA = "0xF8F76C")]
		internal void OnPreCull()
		{
		}

		[Token(Token = "0x6001123")]
		[Address(RVA = "0xF8F7A0", Offset = "0xF8F7A0", VA = "0xF8F7A0")]
		private void OnVisibilityChanged(bool isVisible)
		{
		}

		[Token(Token = "0x6001124")]
		[Address(RVA = "0xF8F2C0", Offset = "0xF8F2C0", VA = "0xF8F2C0")]
		private void CreateCommandBuffer()
		{
		}

		[Token(Token = "0x6001125")]
		[Address(RVA = "0xF8F700", Offset = "0xF8F700", VA = "0xF8F700")]
		private bool IsTargetObjectTreeStructureChanged()
		{
			return default(bool);
		}

		[Token(Token = "0x6001126")]
		[Address(RVA = "0xF8ECBC", Offset = "0xF8ECBC", VA = "0xF8ECBC")]
		private void AddDrawCommandForGameObject(GameObject obj, bool recursive, ref CommandBufferHash commandBufferHash, bool hashOnly)
		{
		}

		[Token(Token = "0x6001127")]
		[Address(RVA = "0xF8F814", Offset = "0xF8F814", VA = "0xF8F814")]
		private void AddDrawCommand(Renderer renderer, int renderTypeIndex)
		{
		}

		[Token(Token = "0x6001128")]
		[Address(RVA = "0xF8FC80", Offset = "0xF8FC80", VA = "0xF8FC80")]
		public DrawTargetObject()
		{
		}
	}
	[Token(Token = "0x2000333")]
	public class FollowTargetObject : MonoBehaviour
	{
		[Token(Token = "0x2000334")]
		public enum TextureAlignment
		{
			[Token(Token = "0x40015B3")]
			None,
			[Token(Token = "0x40015B4")]
			TargetAxisX,
			[Token(Token = "0x40015B5")]
			TargetAxisY,
			[Token(Token = "0x40015B6")]
			TargetAxisZ
		}

		[Token(Token = "0x2000335")]
		public enum UpdateFunction
		{
			[Token(Token = "0x40015B8")]
			OnPreCull,
			[Token(Token = "0x40015B9")]
			LateUpdate,
			[Token(Token = "0x40015BA")]
			UpdateTransform
		}

		[Token(Token = "0x40015AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform m_target;

		[Token(Token = "0x40015AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform m_targetDirection;

		[Token(Token = "0x40015AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private TextureAlignment m_textureAlignment;

		[Token(Token = "0x40015B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private UpdateFunction m_updateFunction;

		[Token(Token = "0x40015B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 m_localTargetPosition;

		[Token(Token = "0x17000194")]
		public Transform target
		{
			[Token(Token = "0x600112C")]
			[Address(RVA = "0xF8FCB4", Offset = "0xF8FCB4", VA = "0xF8FCB4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600112D")]
			[Address(RVA = "0xF8FCBC", Offset = "0xF8FCBC", VA = "0xF8FCBC")]
			set
			{
			}
		}

		[Token(Token = "0x17000195")]
		public Transform targetDirection
		{
			[Token(Token = "0x600112E")]
			[Address(RVA = "0xF8FCC4", Offset = "0xF8FCC4", VA = "0xF8FCC4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600112F")]
			[Address(RVA = "0xF8FCCC", Offset = "0xF8FCCC", VA = "0xF8FCCC")]
			set
			{
			}
		}

		[Token(Token = "0x17000196")]
		public TextureAlignment textureAlignment
		{
			[Token(Token = "0x6001130")]
			[Address(RVA = "0xF8FCD4", Offset = "0xF8FCD4", VA = "0xF8FCD4")]
			get
			{
				return default(TextureAlignment);
			}
			[Token(Token = "0x6001131")]
			[Address(RVA = "0xF8FCDC", Offset = "0xF8FCDC", VA = "0xF8FCDC")]
			set
			{
			}
		}

		[Token(Token = "0x17000197")]
		public UpdateFunction updateFunction
		{
			[Token(Token = "0x6001132")]
			[Address(RVA = "0xF8FCE4", Offset = "0xF8FCE4", VA = "0xF8FCE4")]
			get
			{
				return default(UpdateFunction);
			}
			[Token(Token = "0x6001133")]
			[Address(RVA = "0xF8FCEC", Offset = "0xF8FCEC", VA = "0xF8FCEC")]
			set
			{
			}
		}

		[Token(Token = "0x6001134")]
		[Address(RVA = "0xF8FCF4", Offset = "0xF8FCF4", VA = "0xF8FCF4")]
		public void UpdateTransform()
		{
		}

		[Token(Token = "0x6001135")]
		[Address(RVA = "0xF8FF04", Offset = "0xF8FF04", VA = "0xF8FF04")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001136")]
		[Address(RVA = "0xF8FFAC", Offset = "0xF8FFAC", VA = "0xF8FFAC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001137")]
		[Address(RVA = "0xF8FFC0", Offset = "0xF8FFC0", VA = "0xF8FFC0")]
		private void OnPreCull()
		{
		}

		[Token(Token = "0x6001138")]
		[Address(RVA = "0xF8FFD0", Offset = "0xF8FFD0", VA = "0xF8FFD0")]
		public FollowTargetObject()
		{
		}
	}
	[Token(Token = "0x2000336")]
	[RequireComponent(typeof(ShadowTextureRenderer))]
	public class MipmappedShadowFallback : MonoBehaviour
	{
		[Token(Token = "0x40015BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.Object m_fallbackShaderOrMaterial;

		[Token(Token = "0x40015BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int m_blurLevel;

		[Token(Token = "0x40015BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float m_blurSize;

		[Token(Token = "0x40015BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool m_modifyTextureSize;

		[Token(Token = "0x40015BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public ShadowTextureRenderer.TextureMultiSample m_multiSampling;

		[Token(Token = "0x40015C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ShadowTextureRenderer.TextureSuperSample m_superSampling;

		[Token(Token = "0x40015C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int m_textureWidth;

		[Token(Token = "0x40015C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int m_textureHeight;

		[Token(Token = "0x40015C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader m_tex2DlodCheckShader;

		[Token(Token = "0x40015C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader m_glslCheckShader;

		[Token(Token = "0x6001139")]
		[Address(RVA = "0xF8FFE0", Offset = "0xF8FFE0", VA = "0xF8FFE0")]
		private void Awake()
		{
		}

		[Token(Token = "0x600113A")]
		[Address(RVA = "0xF901F8", Offset = "0xF901F8", VA = "0xF901F8")]
		public void ApplyFallback(Projector projector)
		{
		}

		[Token(Token = "0x600113B")]
		[Address(RVA = "0xF904D0", Offset = "0xF904D0", VA = "0xF904D0")]
		public MipmappedShadowFallback()
		{
		}
	}
	[Token(Token = "0x2000337")]
	[ExecuteAlways]
	public class PropertyBlockForTransparentReceiver : MonoBehaviour
	{
		[Token(Token = "0x2000338")]
		[Flags]
		public enum Options
		{
			[Token(Token = "0x40015D7")]
			CopyMainTexFromMaterial = 1,
			[Token(Token = "0x40015D8")]
			CopyAlphaCutoffFromMaterial = 2,
			[Token(Token = "0x40015D9")]
			CopyBaseColorFromMaterial = 4,
			[Token(Token = "0x40015DA")]
			EnableAlphaCutoffByKeyword = 8,
			[Token(Token = "0x40015DB")]
			EnableAlphaCutoff = 0x10,
			[Token(Token = "0x40015DC")]
			CopyCullModeFromMaterial = 0x20,
			[Token(Token = "0x40015DD")]
			CullFront = 0x40,
			[Token(Token = "0x40015DE")]
			CullBack = 0x80
		}

		[Token(Token = "0x2000339")]
		public enum CullMode
		{
			[Token(Token = "0x40015E0")]
			None = 0,
			[Token(Token = "0x40015E1")]
			Front = 0x40,
			[Token(Token = "0x40015E2")]
			Back = 0x80
		}

		[Token(Token = "0x40015C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Options m_options;

		[Token(Token = "0x40015C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Texture mainTexture;

		[Token(Token = "0x40015C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector4 mainTextureST;

		[Token(Token = "0x40015C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float baseAlpha;

		[Token(Token = "0x40015C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float alphaCutoff;

		[Token(Token = "0x40015CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string mainTextureName;

		[Token(Token = "0x40015CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string baseColorName;

		[Token(Token = "0x40015CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string alphaCutoffName;

		[Token(Token = "0x40015CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string alphaCutoffKeyword;

		[Token(Token = "0x40015CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string cullModeName;

		[Token(Token = "0x40015CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private string m_mainTextureSTName;

		[Token(Token = "0x40015D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Renderer m_renderer;

		[Token(Token = "0x40015D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private MaterialPropertyBlock m_propertyBlock;

		[Token(Token = "0x40015D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int s_dspBaseAlphaId;

		[Token(Token = "0x40015D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static int s_dspCullModeId;

		[Token(Token = "0x40015D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int s_dspMainTexId;

		[Token(Token = "0x40015D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static int s_dspMainTexStId;

		[Token(Token = "0x17000198")]
		public bool copyMainTexFromMaterial
		{
			[Token(Token = "0x600113E")]
			[Address(RVA = "0xF9051C", Offset = "0xF9051C", VA = "0xF9051C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600113F")]
			[Address(RVA = "0xF90528", Offset = "0xF90528", VA = "0xF90528")]
			set
			{
			}
		}

		[Token(Token = "0x17000199")]
		public bool copyBaseColorFromMaterial
		{
			[Token(Token = "0x6001140")]
			[Address(RVA = "0xF90544", Offset = "0xF90544", VA = "0xF90544")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001141")]
			[Address(RVA = "0xF90550", Offset = "0xF90550", VA = "0xF90550")]
			set
			{
			}
		}

		[Token(Token = "0x1700019A")]
		public bool copyAlphaCutoffFromMaterial
		{
			[Token(Token = "0x6001142")]
			[Address(RVA = "0xF9056C", Offset = "0xF9056C", VA = "0xF9056C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001143")]
			[Address(RVA = "0xF90578", Offset = "0xF90578", VA = "0xF90578")]
			set
			{
			}
		}

		[Token(Token = "0x1700019B")]
		public bool copyCullModeFromMaterial
		{
			[Token(Token = "0x6001144")]
			[Address(RVA = "0xF90594", Offset = "0xF90594", VA = "0xF90594")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001145")]
			[Address(RVA = "0xF905A0", Offset = "0xF905A0", VA = "0xF905A0")]
			set
			{
			}
		}

		[Token(Token = "0x1700019C")]
		public CullMode cullMode
		{
			[Token(Token = "0x6001146")]
			[Address(RVA = "0xF905BC", Offset = "0xF905BC", VA = "0xF905BC")]
			get
			{
				return default(CullMode);
			}
			[Token(Token = "0x6001147")]
			[Address(RVA = "0xF905C8", Offset = "0xF905C8", VA = "0xF905C8")]
			set
			{
			}
		}

		[Token(Token = "0x1700019D")]
		public bool enableAlphaCutoffByKeyword
		{
			[Token(Token = "0x6001148")]
			[Address(RVA = "0xF905DC", Offset = "0xF905DC", VA = "0xF905DC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001149")]
			[Address(RVA = "0xF905E8", Offset = "0xF905E8", VA = "0xF905E8")]
			set
			{
			}
		}

		[Token(Token = "0x1700019E")]
		public bool enableAlphaCutoff
		{
			[Token(Token = "0x600114A")]
			[Address(RVA = "0xF90604", Offset = "0xF90604", VA = "0xF90604")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600114B")]
			[Address(RVA = "0xF90618", Offset = "0xF90618", VA = "0xF90618")]
			set
			{
			}
		}

		[Token(Token = "0x600113C")]
		[Address(RVA = "0xF904F0", Offset = "0xF904F0", VA = "0xF904F0")]
		private bool GetOption(Options option)
		{
			return default(bool);
		}

		[Token(Token = "0x600113D")]
		[Address(RVA = "0xF90500", Offset = "0xF90500", VA = "0xF90500")]
		private void SetOption(Options option, bool value)
		{
		}

		[Token(Token = "0x600114C")]
		[Address(RVA = "0xF90634", Offset = "0xF90634", VA = "0xF90634")]
		static PropertyBlockForTransparentReceiver()
		{
		}

		[Token(Token = "0x600114D")]
		[Address(RVA = "0xF90638", Offset = "0xF90638", VA = "0xF90638")]
		private static void StaticInitialize()
		{
		}

		[Token(Token = "0x600114E")]
		[Address(RVA = "0xF90744", Offset = "0xF90744", VA = "0xF90744")]
		private Texture GetMaterialMainTexture()
		{
			return null;
		}

		[Token(Token = "0x600114F")]
		[Address(RVA = "0xF907F4", Offset = "0xF907F4", VA = "0xF907F4")]
		private Vector4 GetMaterialMainTextureST()
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001150")]
		[Address(RVA = "0xF908F8", Offset = "0xF908F8", VA = "0xF908F8")]
		private Color GetMaterialBaseColor()
		{
			return default(Color);
		}

		[Token(Token = "0x6001151")]
		[Address(RVA = "0xF90960", Offset = "0xF90960", VA = "0xF90960")]
		private float GetMaterialAlphaCutoff()
		{
			return default(float);
		}

		[Token(Token = "0x6001152")]
		[Address(RVA = "0xF909B4", Offset = "0xF909B4", VA = "0xF909B4")]
		private float GetMaterialCullMode()
		{
			return default(float);
		}

		[Token(Token = "0x6001153")]
		[Address(RVA = "0xF90A08", Offset = "0xF90A08", VA = "0xF90A08")]
		public void UpdatePropertyBlock()
		{
		}

		[Token(Token = "0x6001154")]
		[Address(RVA = "0xF90DD4", Offset = "0xF90DD4", VA = "0xF90DD4")]
		private void Initialize()
		{
		}

		[Token(Token = "0x6001155")]
		[Address(RVA = "0xF90EA8", Offset = "0xF90EA8", VA = "0xF90EA8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001156")]
		[Address(RVA = "0xF90EAC", Offset = "0xF90EAC", VA = "0xF90EAC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001157")]
		[Address(RVA = "0xF90EB0", Offset = "0xF90EB0", VA = "0xF90EB0")]
		public PropertyBlockForTransparentReceiver()
		{
		}
	}
	[Token(Token = "0x200033A")]
	[ExecuteAlways]
	[RequireComponent(typeof(Projector))]
	[DisallowMultipleComponent]
	public class ShadowTextureRenderer : MonoBehaviour, ISerializationCallbackReceiver
	{
		[Token(Token = "0x200033B")]
		public enum TextureMultiSample
		{
			[Token(Token = "0x4001621")]
			x1 = 1,
			[Token(Token = "0x4001622")]
			x2 = 2,
			[Token(Token = "0x4001623")]
			x4 = 4,
			[Token(Token = "0x4001624")]
			x8 = 8
		}

		[Token(Token = "0x200033C")]
		public enum TextureSuperSample
		{
			[Token(Token = "0x4001626")]
			x1 = 1,
			[Token(Token = "0x4001627")]
			x4 = 2,
			[Token(Token = "0x4001628")]
			x16 = 4
		}

		[Token(Token = "0x200033D")]
		public enum MipmapFalloff
		{
			[Token(Token = "0x400162A")]
			None,
			[Token(Token = "0x400162B")]
			Linear,
			[Token(Token = "0x400162C")]
			Custom
		}

		[Token(Token = "0x200033E")]
		public enum BlurFilter
		{
			[Token(Token = "0x400162E")]
			Uniform,
			[Token(Token = "0x400162F")]
			Gaussian
		}

		[Token(Token = "0x200033F")]
		private struct BlurParam
		{
			[Token(Token = "0x4001630")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int tap;

			[Token(Token = "0x4001631")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public Vector4 offset;

			[Token(Token = "0x4001632")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector4 weight;
		}

		[Token(Token = "0x2000340")]
		private struct ProjectorReference
		{
			[Token(Token = "0x4001633")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public global::ProjectorForLWRP.ProjectorForLWRP projectorForLWRP;
		}

		[Token(Token = "0x40015E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TextureMultiSample m_multiSampling;

		[Token(Token = "0x40015E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private TextureSuperSample m_superSampling;

		[Token(Token = "0x40015E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private MipmapFalloff m_mipmapFalloff;

		[Token(Token = "0x40015E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private BlurFilter m_blurFilter;

		[Token(Token = "0x40015E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private bool m_testViewClip;

		[Token(Token = "0x40015E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private int m_textureWidth;

		[Token(Token = "0x40015E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private int m_textureHeight;

		[Token(Token = "0x40015EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private int m_mipLevel;

		[Token(Token = "0x40015EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private int m_blurLevel;

		[Token(Token = "0x40015EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private float m_blurSize;

		[Token(Token = "0x40015ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private float m_mipmapBlurSize;

		[Token(Token = "0x40015EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		private bool m_singlePassMipmapBlur;

		[Token(Token = "0x40015EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Color m_shadowColor;

		[Token(Token = "0x40015F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Material m_blurShader;

		[Token(Token = "0x40015F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Material m_downsampleShader;

		[Token(Token = "0x40015F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private Material m_copyMipmapShader;

		[Token(Token = "0x40015F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Material m_eraseShadowShader;

		[Token(Token = "0x40015F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private float[] m_customMipmapFalloff;

		[Token(Token = "0x40015F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private RenderTextureFormat[] m_preferredTextureFormats;

		[Token(Token = "0x40015F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private Camera[] m_camerasForViewClipTest;

		[Token(Token = "0x40015F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int s_falloffParamID;

		[Token(Token = "0x40015F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static int s_blurOffsetHParamID;

		[Token(Token = "0x40015FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int s_blurOffsetVParamID;

		[Token(Token = "0x40015FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static int s_blurWeightHParamID;

		[Token(Token = "0x40015FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static int s_blurWeightVParamID;

		[Token(Token = "0x40015FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static int s_shadowColorParamID;

		[Token(Token = "0x40015FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static int s_downSampleBlurOffset0ParamID;

		[Token(Token = "0x40015FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private static int s_downSampleBlurOffset1ParamID;

		[Token(Token = "0x4001600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static int s_downSampleBlurOffset2ParamID;

		[Token(Token = "0x4001601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private static int s_downSampleBlurOffset3ParamID;

		[Token(Token = "0x4001602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static int s_downSampleBlurWeightParamID;

		[Token(Token = "0x4001603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private static int s_blitSrcTexParamID;

		[Token(Token = "0x4001604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static int s_blitSrcTexelSizeParamID;

		[Token(Token = "0x4001605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private static int s_shadowTexParamID;

		[Token(Token = "0x4001606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static int s_mipLevelParamID;

		[Token(Token = "0x4001607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Projector m_projector;

		[Token(Token = "0x4001608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Material m_projectorMaterial;

		[Token(Token = "0x4001609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private CommandBuffer m_commandBuffer;

		[Token(Token = "0x400160A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[SerializeField]
		private Camera m_camera;

		[Token(Token = "0x400160B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private CommandBuffer m_postProcessCommands;

		[Token(Token = "0x400160C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool m_isTexturePropertyChanged;

		[Token(Token = "0x400160D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		private bool m_isVisible;

		[Token(Token = "0x400160E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC2")]
		private bool m_shadowTextureValid;

		[Token(Token = "0x400160F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static HashSet<Material> s_sharedMaterials;

		[Token(Token = "0x4001610")]
		private const HideFlags CLONED_MATERIAL_HIDE_FLAGS = HideFlags.HideAndDontSave;

		[Token(Token = "0x4001611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static int[] s_temporaryRenderTargetNameIds;

		[Token(Token = "0x4001612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static RenderTargetIdentifier[] s_temporaryRenderTargetIdentifiers;

		[Token(Token = "0x4001613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private RenderTexture m_temporaryRenderTarget;

		[Token(Token = "0x4001614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private List<MaterialPropertyBlock> m_propertyBlockPool;

		[Token(Token = "0x4001615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private int m_propetyBlockCount;

		[Token(Token = "0x4001616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private static Dictionary<int, Mesh> s_borderMeshCache;

		[Token(Token = "0x4001617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private static readonly int[] s_borderMeshIndices;

		[Token(Token = "0x4001618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private static Mesh s_fullScreenQuad;

		[Token(Token = "0x4001619")]
		private const int MAX_BLUR_TAP_SIZE = 7;

		[Token(Token = "0x400161A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private static float[] s_blurWeights;

		[Token(Token = "0x400161B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private RenderShadowTexturePass m_renderPass;

		[Token(Token = "0x400161C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private int m_currentFrameCount;

		[Token(Token = "0x400161D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private ProjectorReference m_refProjector;

		[Token(Token = "0x1700019F")]
		public TextureMultiSample multiSampling
		{
			[Token(Token = "0x6001158")]
			[Address(RVA = "0xF90F28", Offset = "0xF90F28", VA = "0xF90F28")]
			get
			{
				return default(TextureMultiSample);
			}
			[Token(Token = "0x6001159")]
			[Address(RVA = "0xF9045C", Offset = "0xF9045C", VA = "0xF9045C")]
			set
			{
			}
		}

		[Token(Token = "0x170001A0")]
		public TextureSuperSample superSampling
		{
			[Token(Token = "0x600115A")]
			[Address(RVA = "0xF90F3C", Offset = "0xF90F3C", VA = "0xF90F3C")]
			get
			{
				return default(TextureSuperSample);
			}
			[Token(Token = "0x600115B")]
			[Address(RVA = "0xF90478", Offset = "0xF90478", VA = "0xF90478")]
			set
			{
			}
		}

		[Token(Token = "0x170001A1")]
		public int textureWidth
		{
			[Token(Token = "0x600115C")]
			[Address(RVA = "0xF90FB0", Offset = "0xF90FB0", VA = "0xF90FB0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600115D")]
			[Address(RVA = "0xF90424", Offset = "0xF90424", VA = "0xF90424")]
			set
			{
			}
		}

		[Token(Token = "0x170001A2")]
		public int textureHeight
		{
			[Token(Token = "0x600115E")]
			[Address(RVA = "0xF90FB8", Offset = "0xF90FB8", VA = "0xF90FB8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600115F")]
			[Address(RVA = "0xF90440", Offset = "0xF90440", VA = "0xF90440")]
			set
			{
			}
		}

		[Token(Token = "0x170001A3")]
		public RenderTextureFormat[] preferredTextureFormats
		{
			[Token(Token = "0x6001160")]
			[Address(RVA = "0xF90FC0", Offset = "0xF90FC0", VA = "0xF90FC0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001161")]
			[Address(RVA = "0xF90FC8", Offset = "0xF90FC8", VA = "0xF90FC8")]
			set
			{
			}
		}

		[Token(Token = "0x170001A4")]
		public int mipLevel
		{
			[Token(Token = "0x6001162")]
			[Address(RVA = "0xF90FEC", Offset = "0xF90FEC", VA = "0xF90FEC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001163")]
			[Address(RVA = "0xF90400", Offset = "0xF90400", VA = "0xF90400")]
			set
			{
			}
		}

		[Token(Token = "0x170001A5")]
		public int blurLevel
		{
			[Token(Token = "0x6001164")]
			[Address(RVA = "0xF90FF4", Offset = "0xF90FF4", VA = "0xF90FF4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001165")]
			[Address(RVA = "0xF903A8", Offset = "0xF903A8", VA = "0xF903A8")]
			set
			{
			}
		}

		[Token(Token = "0x170001A6")]
		public float blurSize
		{
			[Token(Token = "0x6001166")]
			[Address(RVA = "0xF90FFC", Offset = "0xF90FFC", VA = "0xF90FFC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001167")]
			[Address(RVA = "0xF91004", Offset = "0xF91004", VA = "0xF91004")]
			set
			{
			}
		}

		[Token(Token = "0x170001A7")]
		public BlurFilter blurFilter
		{
			[Token(Token = "0x6001168")]
			[Address(RVA = "0xF9100C", Offset = "0xF9100C", VA = "0xF9100C")]
			get
			{
				return default(BlurFilter);
			}
			[Token(Token = "0x6001169")]
			[Address(RVA = "0xF91014", Offset = "0xF91014", VA = "0xF91014")]
			set
			{
			}
		}

		[Token(Token = "0x170001A8")]
		public float mipmapBlurSize
		{
			[Token(Token = "0x600116A")]
			[Address(RVA = "0xF9101C", Offset = "0xF9101C", VA = "0xF9101C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600116B")]
			[Address(RVA = "0xF91024", Offset = "0xF91024", VA = "0xF91024")]
			set
			{
			}
		}

		[Token(Token = "0x170001A9")]
		public bool singlePassMipmapBlur
		{
			[Token(Token = "0x600116C")]
			[Address(RVA = "0xF9102C", Offset = "0xF9102C", VA = "0xF9102C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600116D")]
			[Address(RVA = "0xF91034", Offset = "0xF91034", VA = "0xF91034")]
			set
			{
			}
		}

		[Token(Token = "0x170001AA")]
		public MipmapFalloff mipmapFalloff
		{
			[Token(Token = "0x600116E")]
			[Address(RVA = "0xF91040", Offset = "0xF91040", VA = "0xF91040")]
			get
			{
				return default(MipmapFalloff);
			}
			[Token(Token = "0x600116F")]
			[Address(RVA = "0xF91048", Offset = "0xF91048", VA = "0xF91048")]
			set
			{
			}
		}

		[Token(Token = "0x170001AB")]
		public float[] customMipmapFalloff
		{
			[Token(Token = "0x6001170")]
			[Address(RVA = "0xF91050", Offset = "0xF91050", VA = "0xF91050")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001171")]
			[Address(RVA = "0xF91058", Offset = "0xF91058", VA = "0xF91058")]
			set
			{
			}
		}

		[Token(Token = "0x170001AC")]
		public Color shadowColor
		{
			[Token(Token = "0x6001172")]
			[Address(RVA = "0xF91060", Offset = "0xF91060", VA = "0xF91060")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6001173")]
			[Address(RVA = "0xF9106C", Offset = "0xF9106C", VA = "0xF9106C")]
			set
			{
			}
		}

		[Token(Token = "0x170001AD")]
		public Material blurShader
		{
			[Token(Token = "0x6001174")]
			[Address(RVA = "0xF9111C", Offset = "0xF9111C", VA = "0xF9111C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001175")]
			[Address(RVA = "0xF91124", Offset = "0xF91124", VA = "0xF91124")]
			set
			{
			}
		}

		[Token(Token = "0x170001AE")]
		public Material downsampleShader
		{
			[Token(Token = "0x6001176")]
			[Address(RVA = "0xF9112C", Offset = "0xF9112C", VA = "0xF9112C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001177")]
			[Address(RVA = "0xF91134", Offset = "0xF91134", VA = "0xF91134")]
			set
			{
			}
		}

		[Token(Token = "0x170001AF")]
		public Material copyMipmapShader
		{
			[Token(Token = "0x6001178")]
			[Address(RVA = "0xF9113C", Offset = "0xF9113C", VA = "0xF9113C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001179")]
			[Address(RVA = "0xF91144", Offset = "0xF91144", VA = "0xF91144")]
			set
			{
			}
		}

		[Token(Token = "0x170001B0")]
		public Material eraseShadowShader
		{
			[Token(Token = "0x600117A")]
			[Address(RVA = "0xF9114C", Offset = "0xF9114C", VA = "0xF9114C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600117B")]
			[Address(RVA = "0xF91154", Offset = "0xF91154", VA = "0xF91154")]
			set
			{
			}
		}

		[Token(Token = "0x170001B1")]
		public RenderTexture shadowTexture
		{
			[Token(Token = "0x600117C")]
			[Address(RVA = "0xF9115C", Offset = "0xF9115C", VA = "0xF9115C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600117D")]
			[Address(RVA = "0xF91164", Offset = "0xF91164", VA = "0xF91164")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001B2")]
		public bool testViewClip
		{
			[Token(Token = "0x600117E")]
			[Address(RVA = "0xF9116C", Offset = "0xF9116C", VA = "0xF9116C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600117F")]
			[Address(RVA = "0xF91174", Offset = "0xF91174", VA = "0xF91174")]
			set
			{
			}
		}

		[Token(Token = "0x170001B3")]
		public Camera[] camerasForViewClipTest
		{
			[Token(Token = "0x6001180")]
			[Address(RVA = "0xF91180", Offset = "0xF91180", VA = "0xF91180")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001181")]
			[Address(RVA = "0xF91188", Offset = "0xF91188", VA = "0xF91188")]
			set
			{
			}
		}

		[Token(Token = "0x170001B4")]
		public Camera projectorCamera
		{
			[Token(Token = "0x6001182")]
			[Address(RVA = "0xF91190", Offset = "0xF91190", VA = "0xF91190")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B5")]
		public float cameraNearClipPlane
		{
			[Token(Token = "0x6001183")]
			[Address(RVA = "0xF914E4", Offset = "0xF914E4", VA = "0xF914E4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001184")]
			[Address(RVA = "0xF91564", Offset = "0xF91564", VA = "0xF91564")]
			set
			{
			}
		}

		[Token(Token = "0x170001B6")]
		public LayerMask cameraCullingMask
		{
			[Token(Token = "0x6001185")]
			[Address(RVA = "0xF915F4", Offset = "0xF915F4", VA = "0xF915F4")]
			get
			{
				return default(LayerMask);
			}
			[Token(Token = "0x6001186")]
			[Address(RVA = "0xF8E53C", Offset = "0xF8E53C", VA = "0xF8E53C")]
			set
			{
			}
		}

		[Token(Token = "0x170001B7")]
		public bool isProjectorVisible
		{
			[Token(Token = "0x6001188")]
			[Address(RVA = "0xF91684", Offset = "0xF91684", VA = "0xF91684")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001B8")]
		private static bool isBuiltinRP
		{
			[Token(Token = "0x6001189")]
			[Address(RVA = "0xF9168C", Offset = "0xF9168C", VA = "0xF9168C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001B9")]
		private bool useIntermediateTexture
		{
			[Token(Token = "0x600118E")]
			[Address(RVA = "0xF90F44", Offset = "0xF90F44", VA = "0xF90F44")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001BA")]
		public CommandBuffer postProcessCommandBuffer
		{
			[Token(Token = "0x60011A0")]
			[Address(RVA = "0xF92EB8", Offset = "0xF92EB8", VA = "0xF92EB8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001BB")]
		public DrawTargetObject drawTargetObject
		{
			[Token(Token = "0x60011B8")]
			[Address(RVA = "0xF97248", Offset = "0xF97248", VA = "0xF97248")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60011B9")]
			[Address(RVA = "0xF97250", Offset = "0xF97250", VA = "0xF97250")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001BC")]
		public DrawSceneObject drawSceneObject
		{
			[Token(Token = "0x60011BA")]
			[Address(RVA = "0xF97258", Offset = "0xF97258", VA = "0xF97258")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60011BB")]
			[Address(RVA = "0xF97260", Offset = "0xF97260", VA = "0xF97260")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001BD")]
		private global::ProjectorForLWRP.ProjectorForLWRP projectorForLWRP
		{
			[Token(Token = "0x60011BC")]
			[Address(RVA = "0xF91DA8", Offset = "0xF91DA8", VA = "0xF91DA8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011BD")]
			[Address(RVA = "0xF91DB0", Offset = "0xF91DB0", VA = "0xF91DB0")]
			set
			{
			}
		}

		[Token(Token = "0x6001187")]
		[Address(RVA = "0xF8E40C", Offset = "0xF8E40C", VA = "0xF8E40C")]
		public void SetReplacementShader(Shader shader, string replacementTag)
		{
		}

		[Token(Token = "0x600118A")]
		[Address(RVA = "0xF90F30", Offset = "0xF90F30", VA = "0xF90F30")]
		public void SetTexturePropertyDirty()
		{
		}

		[Token(Token = "0x600118B")]
		[Address(RVA = "0xF916F4", Offset = "0xF916F4", VA = "0xF916F4")]
		public void CreateRenderTexture()
		{
		}

		[Token(Token = "0x600118C")]
		[Address(RVA = "0xF8F404", Offset = "0xF8F404", VA = "0xF8F404")]
		internal void AddCommandBuffer(CommandBuffer commandBuffer)
		{
		}

		[Token(Token = "0x600118D")]
		[Address(RVA = "0xF8F4D8", Offset = "0xF8F4D8", VA = "0xF8F4D8")]
		internal void RemoveCommandBuffer(CommandBuffer commandBuffer)
		{
		}

		[Token(Token = "0x600118F")]
		[Address(RVA = "0xF91D08", Offset = "0xF91D08", VA = "0xF91D08")]
		private void PartialInitialize()
		{
		}

		[Token(Token = "0x6001190")]
		[Address(RVA = "0xF91B0C", Offset = "0xF91B0C", VA = "0xF91B0C")]
		private void OnRenderTextureCreated()
		{
		}

		[Token(Token = "0x6001191")]
		[Address(RVA = "0xF91204", Offset = "0xF91204", VA = "0xF91204")]
		private bool Initialize()
		{
			return default(bool);
		}

		[Token(Token = "0x6001192")]
		[Address(RVA = "0xF91DB8", Offset = "0xF91DB8", VA = "0xF91DB8")]
		private bool IsInitialized()
		{
			return default(bool);
		}

		[Token(Token = "0x6001193")]
		[Address(RVA = "0xF92174", Offset = "0xF92174", VA = "0xF92174")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001194")]
		[Address(RVA = "0xF92178", Offset = "0xF92178", VA = "0xF92178")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001195")]
		[Address(RVA = "0xF9222C", Offset = "0xF9222C", VA = "0xF9222C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001196")]
		[Address(RVA = "0xF922B4", Offset = "0xF922B4", VA = "0xF922B4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001197")]
		[Address(RVA = "0xF9256C", Offset = "0xF9256C", VA = "0xF9256C")]
		private static bool IsPrefabAsset(UnityEngine.Object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001198")]
		[Address(RVA = "0xF91ABC", Offset = "0xF91ABC", VA = "0xF91ABC")]
		private bool IsPrefabAsset()
		{
			return default(bool);
		}

		[Token(Token = "0x6001199")]
		[Address(RVA = "0xF92574", Offset = "0xF92574", VA = "0xF92574")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x600119A")]
		[Address(RVA = "0xF92C00", Offset = "0xF92C00", VA = "0xF92C00")]
		private void OnApplicationPause(bool pause)
		{
		}

		[Token(Token = "0x600119B")]
		[Address(RVA = "0xF92C0C", Offset = "0xF92C0C", VA = "0xF92C0C")]
		private void OnApplicationFocus(bool focus)
		{
		}

		[Token(Token = "0x600119C")]
		[Address(RVA = "0xF91E50", Offset = "0xF91E50", VA = "0xF91E50")]
		private void CloneProjectorMaterialIfShared()
		{
		}

		[Token(Token = "0x600119D")]
		[Address(RVA = "0xF92C18", Offset = "0xF92C18", VA = "0xF92C18")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600119E")]
		[Address(RVA = "0xF92A1C", Offset = "0xF92A1C", VA = "0xF92A1C")]
		private bool IsReadyToExecute()
		{
			return default(bool);
		}

		[Token(Token = "0x600119F")]
		[Address(RVA = "0xF9298C", Offset = "0xF9298C", VA = "0xF9298C")]
		private void SetVisible(bool isVisible)
		{
		}

		[Token(Token = "0x60011A1")]
		[Address(RVA = "0xF92F30", Offset = "0xF92F30", VA = "0xF92F30")]
		private static void StaticInitialize()
		{
		}

		[Token(Token = "0x60011A2")]
		[Address(RVA = "0xF933E4", Offset = "0xF933E4", VA = "0xF933E4")]
		static ShadowTextureRenderer()
		{
		}

		[Token(Token = "0x60011A3")]
		[Address(RVA = "0xF93524", Offset = "0xF93524", VA = "0xF93524")]
		private void CreateTemporaryRenderTarget()
		{
		}

		[Token(Token = "0x60011A4")]
		[Address(RVA = "0xF935B4", Offset = "0xF935B4", VA = "0xF935B4")]
		private void ReleaseTemporaryRenderTarget()
		{
		}

		[Token(Token = "0x60011A5")]
		[Address(RVA = "0xF93640", Offset = "0xF93640", VA = "0xF93640")]
		private void ClearPropertyBlockPool()
		{
		}

		[Token(Token = "0x60011A6")]
		[Address(RVA = "0xF93648", Offset = "0xF93648", VA = "0xF93648")]
		private MaterialPropertyBlock AllocatePropertyBlock()
		{
			return null;
		}

		[Token(Token = "0x60011A7")]
		[Address(RVA = "0xF93770", Offset = "0xF93770", VA = "0xF93770")]
		private void AddPostRenderPassCommands(CommandBuffer cmd, RenderTargetIdentifier srcId)
		{
		}

		[Token(Token = "0x60011A8")]
		[Address(RVA = "0xF952C8", Offset = "0xF952C8", VA = "0xF952C8")]
		private void AddEraseShadowOnBorderCommand(CommandBuffer cmd, int w, int h)
		{
		}

		[Token(Token = "0x60011A9")]
		[Address(RVA = "0xF94DB4", Offset = "0xF94DB4", VA = "0xF94DB4")]
		private void AddBlitToCurrentTargetCommand(CommandBuffer cmd, RenderTargetIdentifier srcId, Material mat, int pass, MaterialPropertyBlock properties)
		{
		}

		[Token(Token = "0x60011AA")]
		[Address(RVA = "0xF95BA0", Offset = "0xF95BA0", VA = "0xF95BA0")]
		private void Update()
		{
		}

		[Token(Token = "0x60011AB")]
		[Address(RVA = "0xF95C48", Offset = "0xF95C48", VA = "0xF95C48")]
		private void OnPreCull()
		{
		}

		[Token(Token = "0x60011AC")]
		[Address(RVA = "0xF91CD4", Offset = "0xF91CD4", VA = "0xF91CD4")]
		private bool HasShadowColor()
		{
			return default(bool);
		}

		[Token(Token = "0x60011AD")]
		[Address(RVA = "0xF96470", Offset = "0xF96470", VA = "0xF96470")]
		private void PrepareRendering()
		{
		}

		[Token(Token = "0x60011AE")]
		[Address(RVA = "0xF96514", Offset = "0xF96514", VA = "0xF96514")]
		private void OnPreRender()
		{
		}

		[Token(Token = "0x60011AF")]
		[Address(RVA = "0xF96570", Offset = "0xF96570", VA = "0xF96570")]
		private void OnPostRender()
		{
		}

		[Token(Token = "0x60011B0")]
		[Address(RVA = "0xF9660C", Offset = "0xF9660C", VA = "0xF9660C")]
		private static BlurParam GetBlurParam(float blurSize, BlurFilter filter)
		{
			return default(BlurParam);
		}

		[Token(Token = "0x60011B1")]
		[Address(RVA = "0xF96F1C", Offset = "0xF96F1C", VA = "0xF96F1C")]
		private static BlurParam GetDownsampleBlurParam(float blurSize, BlurFilter filter)
		{
			return default(BlurParam);
		}

		[Token(Token = "0x60011B2")]
		[Address(RVA = "0xF95120", Offset = "0xF95120", VA = "0xF95120")]
		private void SetBlurShaderProperties(MaterialPropertyBlock dst, out BlurParam blurH, out BlurParam blurV)
		{
		}

		[Token(Token = "0x60011B3")]
		[Address(RVA = "0xF955DC", Offset = "0xF955DC", VA = "0xF955DC")]
		private void GetMipmapBlurParams(ref BlurParam blurH, ref BlurParam blurV)
		{
		}

		[Token(Token = "0x60011B4")]
		[Address(RVA = "0xF95ABC", Offset = "0xF95ABC", VA = "0xF95ABC")]
		private void SetMipmapBlurShaderProperties(MaterialPropertyBlock dst, BlurParam blurH, BlurParam blurV)
		{
		}

		[Token(Token = "0x60011B5")]
		[Address(RVA = "0xF95758", Offset = "0xF95758", VA = "0xF95758")]
		private void SetMipmapDownsampleWithBlurProperties(MaterialPropertyBlock dst, BlurParam blurH, BlurParam blurV, int w, int h)
		{
		}

		[Token(Token = "0x60011B6")]
		[Address(RVA = "0xF971BC", Offset = "0xF971BC", VA = "0xF971BC", Slot = "4")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x60011B7")]
		[Address(RVA = "0xF97244", Offset = "0xF97244", VA = "0xF97244", Slot = "5")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x60011BE")]
		[Address(RVA = "0xF97270", Offset = "0xF97270", VA = "0xF97270")]
		private void OnRenderProjector(Camera camera)
		{
		}

		[Token(Token = "0x60011BF")]
		[Address(RVA = "0xF973E4", Offset = "0xF973E4", VA = "0xF973E4")]
		internal void ConfigureRenderTarget(RenderShadowTexturePass pass)
		{
		}

		[Token(Token = "0x60011C0")]
		[Address(RVA = "0xF974AC", Offset = "0xF974AC", VA = "0xF974AC")]
		internal void ExecutePostRenderProcess(ScriptableRenderContext context)
		{
		}

		[Token(Token = "0x60011C1")]
		[Address(RVA = "0xF97580", Offset = "0xF97580", VA = "0xF97580")]
		public ShadowTextureRenderer()
		{
		}
	}
}
namespace DynamicShadowProjector.LWRP
{
	[Token(Token = "0x2000341")]
	[Obsolete]
	public class DynamicShadowProjectorRendererData : ScriptableRendererData
	{
		[Token(Token = "0x4001634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string[] m_sceneObjectShaderTagList;

		[Token(Token = "0x60011C2")]
		[Address(RVA = "0xF98648", Offset = "0xF98648", VA = "0xF98648", Slot = "4")]
		protected override ScriptableRenderer Create()
		{
			return null;
		}

		[Token(Token = "0x60011C3")]
		[Address(RVA = "0xF98650", Offset = "0xF98650", VA = "0xF98650")]
		public DynamicShadowProjectorRendererData()
		{
		}
	}
	[Token(Token = "0x2000342")]
	internal class RenderShadowTexturePass : ScriptableRenderPass
	{
		[Token(Token = "0x4001635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Material m_overrideOpaqueMaterial;

		[Token(Token = "0x4001636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Material m_overrideAlphaCutoffMaterial;

		[Token(Token = "0x4001637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Material m_overrideTransparentMaterial;

		[Token(Token = "0x4001638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private ShadowTextureRenderer m_renderer;

		[Token(Token = "0x4001639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private bool m_rendered;

		[Token(Token = "0x60011C4")]
		[Address(RVA = "0xF98784", Offset = "0xF98784", VA = "0xF98784")]
		public RenderShadowTexturePass(ShadowTextureRenderer renderer)
		{
		}

		[Token(Token = "0x60011C5")]
		[Address(RVA = "0xF987B8", Offset = "0xF987B8", VA = "0xF987B8")]
		public void ResetFrame()
		{
		}

		[Token(Token = "0x60011C6")]
		[Address(RVA = "0xF987C0", Offset = "0xF987C0", VA = "0xF987C0", Slot = "6")]
		public override void Configure(CommandBuffer cmd, RenderTextureDescriptor cameraTextureDescriptor)
		{
		}

		[Token(Token = "0x60011C7")]
		[Address(RVA = "0xF987F0", Offset = "0xF987F0", VA = "0xF987F0", Slot = "9")]
		public override void Execute(ScriptableRenderContext context, ref RenderingData renderingData)
		{
		}

		[Token(Token = "0x60011C8")]
		[Address(RVA = "0xF99150", Offset = "0xF99150", VA = "0xF99150", Slot = "4")]
		public override void FrameCleanup(CommandBuffer cmd)
		{
		}
	}
}
namespace DynamicShadowProjector.LWRP.Demo
{
	[Token(Token = "0x2000343")]
	[RequireComponent(typeof(PropertyBlockForTransparentReceiver))]
	public class FlowTexture : MonoBehaviour
	{
		[Token(Token = "0x400163A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int s_baseMapSTId;

		[Token(Token = "0x400163B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector2 velocity;

		[Token(Token = "0x400163C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Renderer m_renderer;

		[Token(Token = "0x400163D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PropertyBlockForTransparentReceiver m_propertyBlockForTransparentReceiver;

		[Token(Token = "0x400163E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private MaterialPropertyBlock m_materialPropertyBlock;

		[Token(Token = "0x400163F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector4 m_textureScaleOffset;

		[Token(Token = "0x60011C9")]
		[Address(RVA = "0xF99154", Offset = "0xF99154", VA = "0xF99154")]
		private void Start()
		{
		}

		[Token(Token = "0x60011CA")]
		[Address(RVA = "0xF99288", Offset = "0xF99288", VA = "0xF99288")]
		private void Update()
		{
		}

		[Token(Token = "0x60011CB")]
		[Address(RVA = "0xF993EC", Offset = "0xF993EC", VA = "0xF993EC")]
		public FlowTexture()
		{
		}
	}
}
namespace DynamicShadowProjector.Sample
{
	[Token(Token = "0x2000344")]
	public class FPSCheck : MonoBehaviour
	{
		[Token(Token = "0x4001640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int frameCount;

		[Token(Token = "0x4001641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float startTime;

		[Token(Token = "0x4001642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float fps;

		[Token(Token = "0x4001643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text text;

		[Token(Token = "0x60011CD")]
		[Address(RVA = "0xF9945C", Offset = "0xF9945C", VA = "0xF9945C")]
		private void Update()
		{
		}

		[Token(Token = "0x60011CE")]
		[Address(RVA = "0xF99664", Offset = "0xF99664", VA = "0xF99664")]
		public FPSCheck()
		{
		}
	}
	[Token(Token = "0x2000345")]
	public class Rotate : MonoBehaviour
	{
		[Token(Token = "0x4001644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float m_rotateSpeed;

		[Token(Token = "0x60011CF")]
		[Address(RVA = "0xF99674", Offset = "0xF99674", VA = "0xF99674")]
		private void Update()
		{
		}

		[Token(Token = "0x60011D0")]
		[Address(RVA = "0xF997A4", Offset = "0xF997A4", VA = "0xF997A4")]
		public Rotate()
		{
		}
	}
	[Token(Token = "0x2000346")]
	public class Swing : MonoBehaviour
	{
		[Token(Token = "0x4001645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float m_minAngle;

		[Token(Token = "0x4001646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float m_maxAngle;

		[Token(Token = "0x4001647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float m_swingSpeed;

		[Token(Token = "0x4001648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Quaternion m_initialRotation;

		[Token(Token = "0x4001649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float m_swing;

		[Token(Token = "0x60011D1")]
		[Address(RVA = "0xF997B4", Offset = "0xF997B4", VA = "0xF997B4")]
		private void Start()
		{
		}

		[Token(Token = "0x60011D2")]
		[Address(RVA = "0xF997E8", Offset = "0xF997E8", VA = "0xF997E8")]
		private void Update()
		{
		}

		[Token(Token = "0x60011D3")]
		[Address(RVA = "0xF99948", Offset = "0xF99948", VA = "0xF99948")]
		public Swing()
		{
		}
	}
}
namespace DG.Tweening
{
	[Token(Token = "0x2000347")]
	public static class DOTweenModuleAudio
	{
		[Token(Token = "0x60011D4")]
		[Address(RVA = "0xF99968", Offset = "0xF99968", VA = "0xF99968")]
		public static TweenerCore<float, float, FloatOptions> DOFade(this AudioSource target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x60011D5")]
		[Address(RVA = "0xF99B1C", Offset = "0xF99B1C", VA = "0xF99B1C")]
		public static TweenerCore<float, float, FloatOptions> DOPitch(this AudioSource target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x60011D6")]
		[Address(RVA = "0xF99CA8", Offset = "0xF99CA8", VA = "0xF99CA8")]
		public static TweenerCore<float, float, FloatOptions> DOSetFloat(this AudioMixer target, string floatName, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x60011D7")]
		[Address(RVA = "0xF99E48", Offset = "0xF99E48", VA = "0xF99E48")]
		public static int DOComplete(this AudioMixer target, bool withCallbacks = false)
		{
			return default(int);
		}

		[Token(Token = "0x60011D8")]
		[Address(RVA = "0xF99EB0", Offset = "0xF99EB0", VA = "0xF99EB0")]
		public static int DOKill(this AudioMixer target, bool complete = false)
		{
			return default(int);
		}

		[Token(Token = "0x60011D9")]
		[Address(RVA = "0xF99F18", Offset = "0xF99F18", VA = "0xF99F18")]
		public static int DOFlip(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x60011DA")]
		[Address(RVA = "0xF99F70", Offset = "0xF99F70", VA = "0xF99F70")]
		public static int DOGoto(this AudioMixer target, float to, bool andPlay = false)
		{
			return default(int);
		}

		[Token(Token = "0x60011DB")]
		[Address(RVA = "0xF99FE8", Offset = "0xF99FE8", VA = "0xF99FE8")]
		public static int DOPause(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x60011DC")]
		[Address(RVA = "0xF9A040", Offset = "0xF9A040", VA = "0xF9A040")]
		public static int DOPlay(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x60011DD")]
		[Address(RVA = "0xF9A098", Offset = "0xF9A098", VA = "0xF9A098")]
		public static int DOPlayBackwards(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x60011DE")]
		[Address(RVA = "0xF9A0F0", Offset = "0xF9A0F0", VA = "0xF9A0F0")]
		public static int DOPlayForward(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x60011DF")]
		[Address(RVA = "0xF9A148", Offset = "0xF9A148", VA = "0xF9A148")]
		public static int DORestart(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x60011E0")]
		[Address(RVA = "0xF9A1A8", Offset = "0xF9A1A8", VA = "0xF9A1A8")]
		public static int DORewind(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x60011E1")]
		[Address(RVA = "0xF9A204", Offset = "0xF9A204", VA = "0xF9A204")]
		public static int DOSmoothRewind(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x60011E2")]
		[Address(RVA = "0xF9A25C", Offset = "0xF9A25C", VA = "0xF9A25C")]
		public static int DOTogglePause(this AudioMixer target)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200034B")]
	public static class DOTweenModulePhysics
	{
		[Token(Token = "0x60011EC")]
		[Address(RVA = "0xF9A37C", Offset = "0xF9A37C", VA = "0xF9A37C")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOMove(this Rigidbody target, Vector3 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60011ED")]
		[Address(RVA = "0xF9A534", Offset = "0xF9A534", VA = "0xF9A534")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOMoveX(this Rigidbody target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60011EE")]
		[Address(RVA = "0xF9A6E0", Offset = "0xF9A6E0", VA = "0xF9A6E0")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOMoveY(this Rigidbody target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60011EF")]
		[Address(RVA = "0xF9A88C", Offset = "0xF9A88C", VA = "0xF9A88C")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOMoveZ(this Rigidbody target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60011F0")]
		[Address(RVA = "0xF9AA38", Offset = "0xF9AA38", VA = "0xF9AA38")]
		public static TweenerCore<Quaternion, Vector3, QuaternionOptions> DORotate(this Rigidbody target, Vector3 endValue, float duration, RotateMode mode = RotateMode.Fast)
		{
			return null;
		}

		[Token(Token = "0x60011F1")]
		[Address(RVA = "0xF9ABEC", Offset = "0xF9ABEC", VA = "0xF9ABEC")]
		public static TweenerCore<Quaternion, Vector3, QuaternionOptions> DOLookAt(this Rigidbody target, Vector3 towards, float duration, AxisConstraint axisConstraint = AxisConstraint.None, [Optional] Vector3? up)
		{
			return null;
		}

		[Token(Token = "0x60011F2")]
		[Address(RVA = "0xF9AE54", Offset = "0xF9AE54", VA = "0xF9AE54")]
		public static Sequence DOJump(this Rigidbody target, Vector3 endValue, float jumpPower, int numJumps, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60011F3")]
		[Address(RVA = "0xF9B360", Offset = "0xF9B360", VA = "0xF9B360")]
		public static TweenerCore<Vector3, Path, PathOptions> DOPath(this Rigidbody target, Vector3[] path, float duration, PathType pathType = PathType.Linear, PathMode pathMode = PathMode.Full3D, int resolution = 10, [Optional] Color? gizmoColor)
		{
			return null;
		}

		[Token(Token = "0x60011F4")]
		[Address(RVA = "0xF9B5D4", Offset = "0xF9B5D4", VA = "0xF9B5D4")]
		public static TweenerCore<Vector3, Path, PathOptions> DOLocalPath(this Rigidbody target, Vector3[] path, float duration, PathType pathType = PathType.Linear, PathMode pathMode = PathMode.Full3D, int resolution = 10, [Optional] Color? gizmoColor)
		{
			return null;
		}

		[Token(Token = "0x60011F5")]
		[Address(RVA = "0xF9B868", Offset = "0xF9B868", VA = "0xF9B868")]
		internal static TweenerCore<Vector3, Path, PathOptions> DOPath(this Rigidbody target, Path path, float duration, PathMode pathMode = PathMode.Full3D)
		{
			return null;
		}

		[Token(Token = "0x60011F6")]
		[Address(RVA = "0xF9BA3C", Offset = "0xF9BA3C", VA = "0xF9BA3C")]
		internal static TweenerCore<Vector3, Path, PathOptions> DOLocalPath(this Rigidbody target, Path path, float duration, PathMode pathMode = PathMode.Full3D)
		{
			return null;
		}
	}
	[Token(Token = "0x2000357")]
	public static class DOTweenModuleSprite
	{
		[Token(Token = "0x6001213")]
		[Address(RVA = "0xF9C050", Offset = "0xF9C050", VA = "0xF9C050")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this SpriteRenderer target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001214")]
		[Address(RVA = "0xF9C204", Offset = "0xF9C204", VA = "0xF9C204")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this SpriteRenderer target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001215")]
		[Address(RVA = "0xF9C390", Offset = "0xF9C390", VA = "0xF9C390")]
		public static Sequence DOGradientColor(this SpriteRenderer target, Gradient gradient, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001216")]
		[Address(RVA = "0xF9C56C", Offset = "0xF9C56C", VA = "0xF9C56C")]
		public static Tweener DOBlendableColor(this SpriteRenderer target, Color endValue, float duration)
		{
			return null;
		}
	}
	[Token(Token = "0x200035B")]
	public static class DOTweenModuleUI
	{
		[Token(Token = "0x200035C")]
		public static class Utils
		{
			[Token(Token = "0x6001249")]
			[Address(RVA = "0xFA112C", Offset = "0xFA112C", VA = "0xFA112C")]
			public static Vector2 SwitchToRectTransform(RectTransform from, RectTransform to)
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x6001220")]
		[Address(RVA = "0xF9C864", Offset = "0xF9C864", VA = "0xF9C864")]
		public static TweenerCore<float, float, FloatOptions> DOFade(this CanvasGroup target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001221")]
		[Address(RVA = "0xF9C9F0", Offset = "0xF9C9F0", VA = "0xF9C9F0")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this Graphic target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001222")]
		[Address(RVA = "0xF9CBA4", Offset = "0xF9CBA4", VA = "0xF9CBA4")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this Graphic target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001223")]
		[Address(RVA = "0xF9CD30", Offset = "0xF9CD30", VA = "0xF9CD30")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this Image target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001224")]
		[Address(RVA = "0xF9CEE4", Offset = "0xF9CEE4", VA = "0xF9CEE4")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this Image target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001225")]
		[Address(RVA = "0xF9D070", Offset = "0xF9D070", VA = "0xF9D070")]
		public static TweenerCore<float, float, FloatOptions> DOFillAmount(this Image target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001226")]
		[Address(RVA = "0xF9D220", Offset = "0xF9D220", VA = "0xF9D220")]
		public static Sequence DOGradientColor(this Image target, Gradient gradient, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001227")]
		[Address(RVA = "0xF9D404", Offset = "0xF9D404", VA = "0xF9D404")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOFlexibleSize(this LayoutElement target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001228")]
		[Address(RVA = "0xF9D5B0", Offset = "0xF9D5B0", VA = "0xF9D5B0")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOMinSize(this LayoutElement target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001229")]
		[Address(RVA = "0xF9D75C", Offset = "0xF9D75C", VA = "0xF9D75C")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOPreferredSize(this LayoutElement target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600122A")]
		[Address(RVA = "0xF9D908", Offset = "0xF9D908", VA = "0xF9D908")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this Outline target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x600122B")]
		[Address(RVA = "0xF9DABC", Offset = "0xF9DABC", VA = "0xF9DABC")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this Outline target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x600122C")]
		[Address(RVA = "0xF9DC48", Offset = "0xF9DC48", VA = "0xF9DC48")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOScale(this Outline target, Vector2 endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x600122D")]
		[Address(RVA = "0xF9DDE4", Offset = "0xF9DDE4", VA = "0xF9DDE4")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorPos(this RectTransform target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600122E")]
		[Address(RVA = "0xF9DF90", Offset = "0xF9DF90", VA = "0xF9DF90")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorPosX(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600122F")]
		[Address(RVA = "0xF9E134", Offset = "0xF9E134", VA = "0xF9E134")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorPosY(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001230")]
		[Address(RVA = "0xF9E2D8", Offset = "0xF9E2D8", VA = "0xF9E2D8")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3D(this RectTransform target, Vector3 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001231")]
		[Address(RVA = "0xF9E48C", Offset = "0xF9E48C", VA = "0xF9E48C")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3DX(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001232")]
		[Address(RVA = "0xF9E634", Offset = "0xF9E634", VA = "0xF9E634")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3DY(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001233")]
		[Address(RVA = "0xF9E7DC", Offset = "0xF9E7DC", VA = "0xF9E7DC")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3DZ(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001234")]
		[Address(RVA = "0xF9E984", Offset = "0xF9E984", VA = "0xF9E984")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorMax(this RectTransform target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001235")]
		[Address(RVA = "0xF9EB30", Offset = "0xF9EB30", VA = "0xF9EB30")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorMin(this RectTransform target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001236")]
		[Address(RVA = "0xF9ECDC", Offset = "0xF9ECDC", VA = "0xF9ECDC")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOPivot(this RectTransform target, Vector2 endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001237")]
		[Address(RVA = "0xF9EE78", Offset = "0xF9EE78", VA = "0xF9EE78")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOPivotX(this RectTransform target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001238")]
		[Address(RVA = "0xF9F018", Offset = "0xF9F018", VA = "0xF9F018")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOPivotY(this RectTransform target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001239")]
		[Address(RVA = "0xF9F1B8", Offset = "0xF9F1B8", VA = "0xF9F1B8")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOSizeDelta(this RectTransform target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600123A")]
		[Address(RVA = "0xF9F364", Offset = "0xF9F364", VA = "0xF9F364")]
		public static Tweener DOPunchAnchorPos(this RectTransform target, Vector2 punch, float duration, int vibrato = 10, float elasticity = 1f, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600123B")]
		[Address(RVA = "0xF9F520", Offset = "0xF9F520", VA = "0xF9F520")]
		public static Tweener DOShakeAnchorPos(this RectTransform target, float duration, float strength = 100f, int vibrato = 10, float randomness = 90f, bool snapping = false, bool fadeOut = true)
		{
			return null;
		}

		[Token(Token = "0x600123C")]
		[Address(RVA = "0xF9F704", Offset = "0xF9F704", VA = "0xF9F704")]
		public static Tweener DOShakeAnchorPos(this RectTransform target, float duration, Vector2 strength, int vibrato = 10, float randomness = 90f, bool snapping = false, bool fadeOut = true)
		{
			return null;
		}

		[Token(Token = "0x600123D")]
		[Address(RVA = "0xF9F8F0", Offset = "0xF9F8F0", VA = "0xF9F8F0")]
		public static Sequence DOJumpAnchorPos(this RectTransform target, Vector2 endValue, float jumpPower, int numJumps, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600123E")]
		[Address(RVA = "0xF9FD18", Offset = "0xF9FD18", VA = "0xF9FD18")]
		public static Tweener DONormalizedPos(this ScrollRect target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600123F")]
		[Address(RVA = "0xF9FEB8", Offset = "0xF9FEB8", VA = "0xF9FEB8")]
		public static Tweener DOHorizontalNormalizedPos(this ScrollRect target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001240")]
		[Address(RVA = "0xFA0048", Offset = "0xFA0048", VA = "0xFA0048")]
		public static Tweener DOVerticalNormalizedPos(this ScrollRect target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001241")]
		[Address(RVA = "0xFA01D8", Offset = "0xFA01D8", VA = "0xFA01D8")]
		public static TweenerCore<float, float, FloatOptions> DOValue(this Slider target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001242")]
		[Address(RVA = "0xFA0374", Offset = "0xFA0374", VA = "0xFA0374")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this Text target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001243")]
		[Address(RVA = "0xFA0528", Offset = "0xFA0528", VA = "0xFA0528")]
		public static TweenerCore<int, int, NoOptions> DOCounter(this Text target, int fromValue, int endValue, float duration, bool addThousandsSeparator = true, [Optional] CultureInfo culture)
		{
			return null;
		}

		[Token(Token = "0x6001244")]
		[Address(RVA = "0xFA0720", Offset = "0xFA0720", VA = "0xFA0720")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this Text target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001245")]
		[Address(RVA = "0xFA08AC", Offset = "0xFA08AC", VA = "0xFA08AC")]
		public static TweenerCore<string, string, StringOptions> DOText(this Text target, string endValue, float duration, bool richTextEnabled = true, ScrambleMode scrambleMode = ScrambleMode.None, [Optional] string scrambleChars)
		{
			return null;
		}

		[Token(Token = "0x6001246")]
		[Address(RVA = "0xFA0AE4", Offset = "0xFA0AE4", VA = "0xFA0AE4")]
		public static Tweener DOBlendableColor(this Graphic target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001247")]
		[Address(RVA = "0xFA0CFC", Offset = "0xFA0CFC", VA = "0xFA0CFC")]
		public static Tweener DOBlendableColor(this Image target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001248")]
		[Address(RVA = "0xFA0F14", Offset = "0xFA0F14", VA = "0xFA0F14")]
		public static Tweener DOBlendableColor(this Text target, Color endValue, float duration)
		{
			return null;
		}
	}
	[Token(Token = "0x2000385")]
	public static class DOTweenModuleUnityVersion
	{
		[StructLayout(3)]
		[Token(Token = "0x2000388")]
		[CompilerGenerated]
		private struct <AsyncWaitForCompletion>d__10 : IAsyncStateMachine
		{
			[Token(Token = "0x400169C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x400169D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x400169E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x400169F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x60012DC")]
			[Address(RVA = "0xFA34E8", Offset = "0xFA34E8", VA = "0xFA34E8", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60012DD")]
			[Address(RVA = "0xFA3720", Offset = "0xFA3720", VA = "0xFA3720", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x2000389")]
		[CompilerGenerated]
		private struct <AsyncWaitForRewind>d__11 : IAsyncStateMachine
		{
			[Token(Token = "0x40016A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x40016A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x40016A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x40016A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x60012DE")]
			[Address(RVA = "0xFA372C", Offset = "0xFA372C", VA = "0xFA372C", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60012DF")]
			[Address(RVA = "0xFA3988", Offset = "0xFA3988", VA = "0xFA3988", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x200038A")]
		[CompilerGenerated]
		private struct <AsyncWaitForKill>d__12 : IAsyncStateMachine
		{
			[Token(Token = "0x40016A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x40016A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x40016A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x40016A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x60012E0")]
			[Address(RVA = "0xFA3994", Offset = "0xFA3994", VA = "0xFA3994", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60012E1")]
			[Address(RVA = "0xFA3BB8", Offset = "0xFA3BB8", VA = "0xFA3BB8", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x200038B")]
		[CompilerGenerated]
		private struct <AsyncWaitForElapsedLoops>d__13 : IAsyncStateMachine
		{
			[Token(Token = "0x40016A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x40016A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x40016AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x40016AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int elapsedLoops;

			[Token(Token = "0x40016AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x60012E2")]
			[Address(RVA = "0xFA3BC4", Offset = "0xFA3BC4", VA = "0xFA3BC4", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60012E3")]
			[Address(RVA = "0xFA3E04", Offset = "0xFA3E04", VA = "0xFA3E04", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x200038C")]
		[CompilerGenerated]
		private struct <AsyncWaitForPosition>d__14 : IAsyncStateMachine
		{
			[Token(Token = "0x40016AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x40016AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x40016AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x40016B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float position;

			[Token(Token = "0x40016B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x60012E4")]
			[Address(RVA = "0xFA3E10", Offset = "0xFA3E10", VA = "0xFA3E10", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60012E5")]
			[Address(RVA = "0xFA4068", Offset = "0xFA4068", VA = "0xFA4068", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x200038D")]
		[CompilerGenerated]
		private struct <AsyncWaitForStart>d__15 : IAsyncStateMachine
		{
			[Token(Token = "0x40016B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x40016B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x40016B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x40016B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x60012E6")]
			[Address(RVA = "0xFA4074", Offset = "0xFA4074", VA = "0xFA4074", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60012E7")]
			[Address(RVA = "0xFA42A0", Offset = "0xFA42A0", VA = "0xFA42A0", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x60012C6")]
		[Address(RVA = "0xFA20B4", Offset = "0xFA20B4", VA = "0xFA20B4")]
		public static Sequence DOGradientColor(this Material target, Gradient gradient, float duration)
		{
			return null;
		}

		[Token(Token = "0x60012C7")]
		[Address(RVA = "0xFA2294", Offset = "0xFA2294", VA = "0xFA2294")]
		public static Sequence DOGradientColor(this Material target, Gradient gradient, string property, float duration)
		{
			return null;
		}

		[Token(Token = "0x60012C8")]
		[Address(RVA = "0xFA2480", Offset = "0xFA2480", VA = "0xFA2480")]
		public static CustomYieldInstruction WaitForCompletion(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x60012C9")]
		[Address(RVA = "0xFA257C", Offset = "0xFA257C", VA = "0xFA257C")]
		public static CustomYieldInstruction WaitForRewind(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x60012CA")]
		[Address(RVA = "0xFA2678", Offset = "0xFA2678", VA = "0xFA2678")]
		public static CustomYieldInstruction WaitForKill(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x60012CB")]
		[Address(RVA = "0xFA2774", Offset = "0xFA2774", VA = "0xFA2774")]
		public static CustomYieldInstruction WaitForElapsedLoops(this Tween t, int elapsedLoops, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x60012CC")]
		[Address(RVA = "0xFA2884", Offset = "0xFA2884", VA = "0xFA2884")]
		public static CustomYieldInstruction WaitForPosition(this Tween t, float position, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x60012CD")]
		[Address(RVA = "0xFA29A4", Offset = "0xFA29A4", VA = "0xFA29A4")]
		public static CustomYieldInstruction WaitForStart(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x60012CE")]
		[Address(RVA = "0xFA2AA0", Offset = "0xFA2AA0", VA = "0xFA2AA0")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOOffset(this Material target, Vector2 endValue, int propertyID, float duration)
		{
			return null;
		}

		[Token(Token = "0x60012CF")]
		[Address(RVA = "0xFA2CAC", Offset = "0xFA2CAC", VA = "0xFA2CAC")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOTiling(this Material target, Vector2 endValue, int propertyID, float duration)
		{
			return null;
		}

		[Token(Token = "0x60012D0")]
		[Address(RVA = "0xFA2EB8", Offset = "0xFA2EB8", VA = "0xFA2EB8")]
		[AsyncStateMachine(typeof(<AsyncWaitForCompletion>d__10))]
		public static Task AsyncWaitForCompletion(this Tween t)
		{
			return null;
		}

		[Token(Token = "0x60012D1")]
		[Address(RVA = "0xFA2FA4", Offset = "0xFA2FA4", VA = "0xFA2FA4")]
		[AsyncStateMachine(typeof(<AsyncWaitForRewind>d__11))]
		public static Task AsyncWaitForRewind(this Tween t)
		{
			return null;
		}

		[Token(Token = "0x60012D2")]
		[Address(RVA = "0xFA3090", Offset = "0xFA3090", VA = "0xFA3090")]
		[AsyncStateMachine(typeof(<AsyncWaitForKill>d__12))]
		public static Task AsyncWaitForKill(this Tween t)
		{
			return null;
		}

		[Token(Token = "0x60012D3")]
		[Address(RVA = "0xFA317C", Offset = "0xFA317C", VA = "0xFA317C")]
		[AsyncStateMachine(typeof(<AsyncWaitForElapsedLoops>d__13))]
		public static Task AsyncWaitForElapsedLoops(this Tween t, int elapsedLoops)
		{
			return null;
		}

		[Token(Token = "0x60012D4")]
		[Address(RVA = "0xFA3270", Offset = "0xFA3270", VA = "0xFA3270")]
		[AsyncStateMachine(typeof(<AsyncWaitForPosition>d__14))]
		public static Task AsyncWaitForPosition(this Tween t, float position)
		{
			return null;
		}

		[Token(Token = "0x60012D5")]
		[Address(RVA = "0xFA336C", Offset = "0xFA336C", VA = "0xFA336C")]
		[AsyncStateMachine(typeof(<AsyncWaitForStart>d__15))]
		public static Task AsyncWaitForStart(this Tween t)
		{
			return null;
		}
	}
	[Token(Token = "0x200038E")]
	public static class DOTweenCYInstruction
	{
		[Token(Token = "0x200038F")]
		public class WaitForCompletion : CustomYieldInstruction
		{
			[Token(Token = "0x40016B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x170001BE")]
			public override bool keepWaiting
			{
				[Token(Token = "0x60012E8")]
				[Address(RVA = "0xFA42AC", Offset = "0xFA42AC", VA = "0xFA42AC", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60012E9")]
			[Address(RVA = "0xFA254C", Offset = "0xFA254C", VA = "0xFA254C")]
			public WaitForCompletion(Tween tween)
			{
			}
		}

		[Token(Token = "0x2000390")]
		public class WaitForRewind : CustomYieldInstruction
		{
			[Token(Token = "0x40016B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x170001BF")]
			public override bool keepWaiting
			{
				[Token(Token = "0x60012EA")]
				[Address(RVA = "0xFA42DC", Offset = "0xFA42DC", VA = "0xFA42DC", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60012EB")]
			[Address(RVA = "0xFA2648", Offset = "0xFA2648", VA = "0xFA2648")]
			public WaitForRewind(Tween tween)
			{
			}
		}

		[Token(Token = "0x2000391")]
		public class WaitForKill : CustomYieldInstruction
		{
			[Token(Token = "0x40016B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x170001C0")]
			public override bool keepWaiting
			{
				[Token(Token = "0x60012EC")]
				[Address(RVA = "0xFA433C", Offset = "0xFA433C", VA = "0xFA433C", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60012ED")]
			[Address(RVA = "0xFA2744", Offset = "0xFA2744", VA = "0xFA2744")]
			public WaitForKill(Tween tween)
			{
			}
		}

		[Token(Token = "0x2000392")]
		public class WaitForElapsedLoops : CustomYieldInstruction
		{
			[Token(Token = "0x40016B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x40016BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly int elapsedLoops;

			[Token(Token = "0x170001C1")]
			public override bool keepWaiting
			{
				[Token(Token = "0x60012EE")]
				[Address(RVA = "0xFA4358", Offset = "0xFA4358", VA = "0xFA4358", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60012EF")]
			[Address(RVA = "0xFA2848", Offset = "0xFA2848", VA = "0xFA2848")]
			public WaitForElapsedLoops(Tween tween, int elapsedLoops)
			{
			}
		}

		[Token(Token = "0x2000393")]
		public class WaitForPosition : CustomYieldInstruction
		{
			[Token(Token = "0x40016BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x40016BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly float position;

			[Token(Token = "0x170001C2")]
			public override bool keepWaiting
			{
				[Token(Token = "0x60012F0")]
				[Address(RVA = "0xFA4398", Offset = "0xFA4398", VA = "0xFA4398", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60012F1")]
			[Address(RVA = "0xFA2960", Offset = "0xFA2960", VA = "0xFA2960")]
			public WaitForPosition(Tween tween, float position)
			{
			}
		}

		[Token(Token = "0x2000394")]
		public class WaitForStart : CustomYieldInstruction
		{
			[Token(Token = "0x40016BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x170001C3")]
			public override bool keepWaiting
			{
				[Token(Token = "0x60012F2")]
				[Address(RVA = "0xFA43F0", Offset = "0xFA43F0", VA = "0xFA43F0", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60012F3")]
			[Address(RVA = "0xFA2A70", Offset = "0xFA2A70", VA = "0xFA2A70")]
			public WaitForStart(Tween tween)
			{
			}
		}
	}
	[Token(Token = "0x2000395")]
	public static class DOTweenModuleUtils
	{
		[Token(Token = "0x2000396")]
		public static class Physics
		{
			[Token(Token = "0x60012F6")]
			[Address(RVA = "0xFA4580", Offset = "0xFA4580", VA = "0xFA4580")]
			public static void SetOrientationOnPath(PathOptions options, Tween t, Quaternion newRot, Transform trans)
			{
			}

			[Token(Token = "0x60012F7")]
			[Address(RVA = "0xFA4680", Offset = "0xFA4680", VA = "0xFA4680")]
			public static bool HasRigidbody2D(Component target)
			{
				return default(bool);
			}

			[Token(Token = "0x60012F8")]
			[Address(RVA = "0xFA4688", Offset = "0xFA4688", VA = "0xFA4688")]
			[Preserve]
			public static bool HasRigidbody(Component target)
			{
				return default(bool);
			}

			[Token(Token = "0x60012F9")]
			[Address(RVA = "0xFA4714", Offset = "0xFA4714", VA = "0xFA4714")]
			[Preserve]
			public static TweenerCore<Vector3, Path, PathOptions> CreateDOTweenPathTween(MonoBehaviour target, bool tweenRigidbody, bool isLocal, Path path, float duration, PathMode pathMode)
			{
				return null;
			}
		}

		[Token(Token = "0x40016BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool _initialized;

		[Token(Token = "0x60012F4")]
		[Address(RVA = "0xFA4424", Offset = "0xFA4424", VA = "0xFA4424")]
		[Preserve]
		public static void Init()
		{
		}

		[Token(Token = "0x60012F5")]
		[Address(RVA = "0xFA44D8", Offset = "0xFA44D8", VA = "0xFA44D8")]
		[Preserve]
		private static void Preserver()
		{
		}
	}
}
namespace UnityEngine.Timeline
{
	[Token(Token = "0x2000397")]
	public class VideoPlayableBehaviour : PlayableBehaviour
	{
		[Token(Token = "0x40016BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public VideoPlayer videoPlayer;

		[Token(Token = "0x40016C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VideoClip videoClip;

		[Token(Token = "0x40016C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool mute;

		[Token(Token = "0x40016C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool loop;

		[Token(Token = "0x40016C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public double preloadTime;

		[Token(Token = "0x40016C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public double clipInTime;

		[Token(Token = "0x40016C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool playedOnce;

		[Token(Token = "0x40016C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool preparing;

		[Token(Token = "0x60012FA")]
		[Address(RVA = "0xFA4858", Offset = "0xFA4858", VA = "0xFA4858")]
		public void PrepareVideo()
		{
		}

		[Token(Token = "0x60012FB")]
		[Address(RVA = "0xFA4BFC", Offset = "0xFA4BFC", VA = "0xFA4BFC")]
		private void LoopPointReached(VideoPlayer vp)
		{
		}

		[Token(Token = "0x60012FC")]
		[Address(RVA = "0xFA4C0C", Offset = "0xFA4C0C", VA = "0xFA4C0C", Slot = "19")]
		public override void PrepareFrame(Playable playable, FrameData info)
		{
		}

		[Token(Token = "0x60012FD")]
		[Address(RVA = "0xFA4EC4", Offset = "0xFA4EC4", VA = "0xFA4EC4", Slot = "17")]
		public override void OnBehaviourPlay(Playable playable, FrameData info)
		{
		}

		[Token(Token = "0x60012FE")]
		[Address(RVA = "0xFA5004", Offset = "0xFA5004", VA = "0xFA5004", Slot = "18")]
		public override void OnBehaviourPause(Playable playable, FrameData info)
		{
		}

		[Token(Token = "0x60012FF")]
		[Address(RVA = "0xFA5118", Offset = "0xFA5118", VA = "0xFA5118", Slot = "20")]
		public override void ProcessFrame(Playable playable, FrameData info, object playerData)
		{
		}

		[Token(Token = "0x6001300")]
		[Address(RVA = "0xFA52E4", Offset = "0xFA52E4", VA = "0xFA52E4", Slot = "13")]
		public override void OnGraphStart(Playable playable)
		{
		}

		[Token(Token = "0x6001301")]
		[Address(RVA = "0xFA52EC", Offset = "0xFA52EC", VA = "0xFA52EC", Slot = "14")]
		public override void OnGraphStop(Playable playable)
		{
		}

		[Token(Token = "0x6001302")]
		[Address(RVA = "0xFA5314", Offset = "0xFA5314", VA = "0xFA5314", Slot = "16")]
		public override void OnPlayableDestroy(Playable playable)
		{
		}

		[Token(Token = "0x6001303")]
		[Address(RVA = "0xFA4F68", Offset = "0xFA4F68", VA = "0xFA4F68")]
		public void PlayVideo()
		{
		}

		[Token(Token = "0x6001304")]
		[Address(RVA = "0xFA5098", Offset = "0xFA5098", VA = "0xFA5098")]
		public void PauseVideo()
		{
		}

		[Token(Token = "0x6001305")]
		[Address(RVA = "0xFA4B78", Offset = "0xFA4B78", VA = "0xFA4B78")]
		public void StopVideo()
		{
		}

		[Token(Token = "0x6001306")]
		[Address(RVA = "0xFA4D64", Offset = "0xFA4D64", VA = "0xFA4D64")]
		private void SyncVideoToPlayable(Playable playable)
		{
		}

		[Token(Token = "0x6001307")]
		[Address(RVA = "0xFA5318", Offset = "0xFA5318", VA = "0xFA5318")]
		public VideoPlayableBehaviour()
		{
		}
	}
	[Token(Token = "0x2000398")]
	public sealed class VideoSchedulerPlayableBehaviour : PlayableBehaviour
	{
		[Token(Token = "0x40016C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IEnumerable<TimelineClip> m_Clips;

		[Token(Token = "0x40016C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private PlayableDirector m_Director;

		[Token(Token = "0x170001C4")]
		internal PlayableDirector director
		{
			[Token(Token = "0x6001308")]
			[Address(RVA = "0xFA5334", Offset = "0xFA5334", VA = "0xFA5334")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001309")]
			[Address(RVA = "0xFA533C", Offset = "0xFA533C", VA = "0xFA533C")]
			set
			{
			}
		}

		[Token(Token = "0x170001C5")]
		internal IEnumerable<TimelineClip> clips
		{
			[Token(Token = "0x600130A")]
			[Address(RVA = "0xFA5344", Offset = "0xFA5344", VA = "0xFA5344")]
			get
			{
				return null;
			}
			[Token(Token = "0x600130B")]
			[Address(RVA = "0xFA534C", Offset = "0xFA534C", VA = "0xFA534C")]
			set
			{
			}
		}

		[Token(Token = "0x600130C")]
		[Address(RVA = "0xFA5354", Offset = "0xFA5354", VA = "0xFA5354", Slot = "20")]
		public override void ProcessFrame(Playable playable, FrameData info, object playerData)
		{
		}

		[Token(Token = "0x600130D")]
		[Address(RVA = "0xFA5808", Offset = "0xFA5808", VA = "0xFA5808")]
		public VideoSchedulerPlayableBehaviour()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000399")]
	public class VideoScriptPlayableAsset : PlayableAsset
	{
		[Token(Token = "0x40016C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ExposedReference<VideoPlayer> videoPlayer;

		[Token(Token = "0x40016CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[NotKeyable]
		public VideoClip videoClip;

		[Token(Token = "0x40016CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[NotKeyable]
		public bool mute;

		[Token(Token = "0x40016CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[NotKeyable]
		[SerializeField]
		public bool loop;

		[Token(Token = "0x40016CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[NotKeyable]
		public double preloadTime;

		[Token(Token = "0x40016CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[NotKeyable]
		public double clipInTime;

		[Token(Token = "0x600130E")]
		[Address(RVA = "0xFA5810", Offset = "0xFA5810", VA = "0xFA5810", Slot = "6")]
		public override Playable CreatePlayable(PlayableGraph graph, GameObject go)
		{
			return default(Playable);
		}

		[Token(Token = "0x600130F")]
		[Address(RVA = "0xFA5970", Offset = "0xFA5970", VA = "0xFA5970")]
		public VideoScriptPlayableAsset()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200039A")]
	[TrackClipType(typeof(VideoScriptPlayableAsset))]
	[TrackColor(0.008f, 0.698f, 0.655f)]
	public class VideoScriptPlayableTrack : TrackAsset
	{
		[Token(Token = "0x6001310")]
		[Address(RVA = "0xFA598C", Offset = "0xFA598C", VA = "0xFA598C", Slot = "24")]
		public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
		{
			return default(Playable);
		}

		[Token(Token = "0x6001311")]
		[Address(RVA = "0xFA5AF8", Offset = "0xFA5AF8", VA = "0xFA5AF8")]
		public VideoScriptPlayableTrack()
		{
		}
	}
}
namespace UnityEngine.UI
{
	[Token(Token = "0x200039B")]
	[AddComponentMenu("UI/Extensions/Extensions Toggle", 31)]
	[RequireComponent(typeof(RectTransform))]
	public class ExtensionsToggle : Selectable, IPointerClickHandler, IEventSystemHandler, ISubmitHandler, ICanvasElement
	{
		[Token(Token = "0x200039C")]
		public enum ToggleTransition
		{
			[Token(Token = "0x40016D7")]
			None,
			[Token(Token = "0x40016D8")]
			Fade
		}

		[Serializable]
		[Token(Token = "0x200039D")]
		public class ToggleEvent : UnityEvent<bool>
		{
			[Token(Token = "0x6001326")]
			[Address(RVA = "0xFA5EA0", Offset = "0xFA5EA0", VA = "0xFA5EA0")]
			public ToggleEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200039E")]
		public class ToggleEventObject : UnityEvent<ExtensionsToggle>
		{
			[Token(Token = "0x6001327")]
			[Address(RVA = "0xFA5EE8", Offset = "0xFA5EE8", VA = "0xFA5EE8")]
			public ToggleEventObject()
			{
			}
		}

		[Token(Token = "0x40016CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public string UniqueID;

		[Token(Token = "0x40016D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public ToggleTransition toggleTransition;

		[Token(Token = "0x40016D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public Graphic graphic;

		[Token(Token = "0x40016D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private ExtensionsToggleGroup m_Group;

		[Token(Token = "0x40016D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[Tooltip("Use this event if you only need the bool state of the toggle that was changed")]
		public ToggleEvent onValueChanged;

		[Token(Token = "0x40016D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[Tooltip("Use this event if you need access to the toggle that was changed")]
		public ToggleEventObject onToggleChanged;

		[Token(Token = "0x40016D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		[Tooltip("Is the toggle currently on or off?")]
		[FormerlySerializedAs("m_IsActive")]
		private bool m_IsOn;

		[Token(Token = "0x170001C6")]
		public ExtensionsToggleGroup Group
		{
			[Token(Token = "0x6001312")]
			[Address(RVA = "0xFA5B50", Offset = "0xFA5B50", VA = "0xFA5B50")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001313")]
			[Address(RVA = "0xFA5B58", Offset = "0xFA5B58", VA = "0xFA5B58")]
			set
			{
			}
		}

		[Token(Token = "0x170001C7")]
		public bool IsOn
		{
			[Token(Token = "0x600131C")]
			[Address(RVA = "0xFA6484", Offset = "0xFA6484", VA = "0xFA6484")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600131D")]
			[Address(RVA = "0xFA648C", Offset = "0xFA648C", VA = "0xFA648C")]
			set
			{
			}
		}

		[Token(Token = "0x6001314")]
		[Address(RVA = "0xFA5DCC", Offset = "0xFA5DCC", VA = "0xFA5DCC")]
		protected ExtensionsToggle()
		{
		}

		[Token(Token = "0x6001315")]
		[Address(RVA = "0xFA5F30", Offset = "0xFA5F30", VA = "0xFA5F30", Slot = "46")]
		public virtual void Rebuild(CanvasUpdate executing)
		{
		}

		[Token(Token = "0x6001316")]
		[Address(RVA = "0xFA5F34", Offset = "0xFA5F34", VA = "0xFA5F34", Slot = "47")]
		public virtual void LayoutComplete()
		{
		}

		[Token(Token = "0x6001317")]
		[Address(RVA = "0xFA5F38", Offset = "0xFA5F38", VA = "0xFA5F38", Slot = "48")]
		public virtual void GraphicUpdateComplete()
		{
		}

		[Token(Token = "0x6001318")]
		[Address(RVA = "0xFA5F3C", Offset = "0xFA5F3C", VA = "0xFA5F3C", Slot = "5")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001319")]
		[Address(RVA = "0xFA5F6C", Offset = "0xFA5F6C", VA = "0xFA5F6C", Slot = "7")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x600131A")]
		[Address(RVA = "0xFA5F90", Offset = "0xFA5F90", VA = "0xFA5F90", Slot = "13")]
		protected override void OnDidApplyAnimationProperties()
		{
		}

		[Token(Token = "0x600131B")]
		[Address(RVA = "0xFA5B8C", Offset = "0xFA5B8C", VA = "0xFA5B8C")]
		private void SetToggleGroup(ExtensionsToggleGroup newGroup, bool setMemberValue)
		{
		}

		[Token(Token = "0x600131E")]
		[Address(RVA = "0xFA60B8", Offset = "0xFA60B8", VA = "0xFA60B8")]
		private void Set(bool value)
		{
		}

		[Token(Token = "0x600131F")]
		[Address(RVA = "0xFA6498", Offset = "0xFA6498", VA = "0xFA6498")]
		private void Set(bool value, bool sendCallback)
		{
		}

		[Token(Token = "0x6001320")]
		[Address(RVA = "0xFA5D08", Offset = "0xFA5D08", VA = "0xFA5D08")]
		private void PlayEffect(bool instant)
		{
		}

		[Token(Token = "0x6001321")]
		[Address(RVA = "0xFA673C", Offset = "0xFA673C", VA = "0xFA673C", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001322")]
		[Address(RVA = "0xFA6744", Offset = "0xFA6744", VA = "0xFA6744")]
		private void InternalToggle()
		{
		}

		[Token(Token = "0x6001323")]
		[Address(RVA = "0xFA6798", Offset = "0xFA6798", VA = "0xFA6798", Slot = "49")]
		public virtual void OnPointerClick(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001324")]
		[Address(RVA = "0xFA67BC", Offset = "0xFA67BC", VA = "0xFA67BC", Slot = "50")]
		public virtual void OnSubmit(BaseEventData eventData)
		{
		}

		[SpecialName]
		[Token(Token = "0x6001325")]
		[Address(RVA = "0xFA67C0", Offset = "0xFA67C0", VA = "0xFA67C0", Slot = "42")]
		private Transform UnityEngine.UI.ICanvasElement.get_transform()
		{
			return null;
		}
	}
	[Token(Token = "0x200039F")]
	[AddComponentMenu("UI/Extensions/Extensions Toggle Group")]
	[DisallowMultipleComponent]
	public class ExtensionsToggleGroup : UIBehaviour
	{
		[Serializable]
		[Token(Token = "0x20003A0")]
		public class ToggleGroupEvent : UnityEvent<bool>
		{
			[Token(Token = "0x6001337")]
			[Address(RVA = "0xFA68D0", Offset = "0xFA68D0", VA = "0xFA68D0")]
			public ToggleGroupEvent()
			{
			}
		}

		[Token(Token = "0x40016D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool m_AllowSwitchOff;

		[Token(Token = "0x40016DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<ExtensionsToggle> m_Toggles;

		[Token(Token = "0x40016DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ToggleGroupEvent onToggleGroupChanged;

		[Token(Token = "0x40016DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ToggleGroupEvent onToggleGroupToggleChanged;

		[Token(Token = "0x170001C8")]
		public bool AllowSwitchOff
		{
			[Token(Token = "0x6001328")]
			[Address(RVA = "0xFA67C8", Offset = "0xFA67C8", VA = "0xFA67C8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001329")]
			[Address(RVA = "0xFA67D0", Offset = "0xFA67D0", VA = "0xFA67D0")]
			set
			{
			}
		}

		[Token(Token = "0x170001C9")]
		public ExtensionsToggle SelectedToggle
		{
			[Token(Token = "0x600132A")]
			[Address(RVA = "0xFA67DC", Offset = "0xFA67DC", VA = "0xFA67DC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600132B")]
			[Address(RVA = "0xFA67E4", Offset = "0xFA67E4", VA = "0xFA67E4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600132C")]
		[Address(RVA = "0xFA67EC", Offset = "0xFA67EC", VA = "0xFA67EC")]
		protected ExtensionsToggleGroup()
		{
		}

		[Token(Token = "0x600132D")]
		[Address(RVA = "0xFA6918", Offset = "0xFA6918", VA = "0xFA6918")]
		private void ValidateToggleIsInGroup(ExtensionsToggle toggle)
		{
		}

		[Token(Token = "0x600132E")]
		[Address(RVA = "0xFA632C", Offset = "0xFA632C", VA = "0xFA632C")]
		public void NotifyToggleOn(ExtensionsToggle toggle)
		{
		}

		[Token(Token = "0x600132F")]
		[Address(RVA = "0xFA60C4", Offset = "0xFA60C4", VA = "0xFA60C4")]
		public void UnregisterToggle(ExtensionsToggle toggle)
		{
		}

		[Token(Token = "0x6001330")]
		[Address(RVA = "0xFA6A70", Offset = "0xFA6A70", VA = "0xFA6A70")]
		private void NotifyToggleChanged(bool isOn)
		{
		}

		[Token(Token = "0x6001331")]
		[Address(RVA = "0xFA61CC", Offset = "0xFA61CC", VA = "0xFA61CC")]
		public void RegisterToggle(ExtensionsToggle toggle)
		{
		}

		[Token(Token = "0x6001332")]
		[Address(RVA = "0xFA65F8", Offset = "0xFA65F8", VA = "0xFA65F8")]
		public bool AnyTogglesOn()
		{
			return default(bool);
		}

		[Token(Token = "0x6001333")]
		[Address(RVA = "0xFA6AC8", Offset = "0xFA6AC8", VA = "0xFA6AC8")]
		public IEnumerable<ExtensionsToggle> ActiveToggles()
		{
			return null;
		}

		[Token(Token = "0x6001334")]
		[Address(RVA = "0xFA6BCC", Offset = "0xFA6BCC", VA = "0xFA6BCC")]
		public void SetAllTogglesOff()
		{
		}

		[Token(Token = "0x6001335")]
		[Address(RVA = "0xFA6C74", Offset = "0xFA6C74", VA = "0xFA6C74")]
		public void HasTheGroupToggle(bool value)
		{
		}

		[Token(Token = "0x6001336")]
		[Address(RVA = "0xFA6D30", Offset = "0xFA6D30", VA = "0xFA6D30")]
		public void HasAToggleFlipped(bool value)
		{
		}
	}
	[Token(Token = "0x20003A2")]
	[RequireComponent(typeof(InputField))]
	[AddComponentMenu("UI/Extensions/Return Key Trigger")]
	public class ReturnKeyTriggersButton : MonoBehaviour, ISubmitHandler, IEventSystemHandler
	{
		[Token(Token = "0x40016E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private EventSystem _system;

		[Token(Token = "0x40016E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Button button;

		[Token(Token = "0x40016E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool highlight;

		[Token(Token = "0x40016E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float highlightDuration;

		[Token(Token = "0x600133C")]
		[Address(RVA = "0xFA6E94", Offset = "0xFA6E94", VA = "0xFA6E94")]
		private void Start()
		{
		}

		[Token(Token = "0x600133D")]
		[Address(RVA = "0xFA6EF8", Offset = "0xFA6EF8", VA = "0xFA6EF8")]
		private void RemoveHighlight()
		{
		}

		[Token(Token = "0x600133E")]
		[Address(RVA = "0xFA6F74", Offset = "0xFA6F74", VA = "0xFA6F74", Slot = "4")]
		public void OnSubmit(BaseEventData eventData)
		{
		}

		[Token(Token = "0x600133F")]
		[Address(RVA = "0xFA707C", Offset = "0xFA707C", VA = "0xFA707C")]
		public ReturnKeyTriggersButton()
		{
		}
	}
}
namespace UnityEngine.UI.Extensions
{
	[Token(Token = "0x20003A3")]
	[RequireComponent(typeof(HorizontalOrVerticalLayoutGroup), typeof(ContentSizeFitter), typeof(ToggleGroup))]
	[AddComponentMenu("UI/Extensions/Accordion/Accordion Group")]
	public class Accordion : MonoBehaviour
	{
		[Token(Token = "0x20003A4")]
		public enum Transition
		{
			[Token(Token = "0x40016E9")]
			Instant,
			[Token(Token = "0x40016EA")]
			Tween
		}

		[Token(Token = "0x40016E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool m_expandVertical;

		[Token(Token = "0x40016E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private Transition m_Transition;

		[Token(Token = "0x40016E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float m_TransitionDuration;

		[Token(Token = "0x170001CA")]
		[HideInInspector]
		public bool ExpandVerticval
		{
			[Token(Token = "0x6001340")]
			[Address(RVA = "0xFA7098", Offset = "0xFA7098", VA = "0xFA7098")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001CB")]
		public Transition transition
		{
			[Token(Token = "0x6001341")]
			[Address(RVA = "0xFA70A0", Offset = "0xFA70A0", VA = "0xFA70A0")]
			get
			{
				return default(Transition);
			}
			[Token(Token = "0x6001342")]
			[Address(RVA = "0xFA70A8", Offset = "0xFA70A8", VA = "0xFA70A8")]
			set
			{
			}
		}

		[Token(Token = "0x170001CC")]
		public float transitionDuration
		{
			[Token(Token = "0x6001343")]
			[Address(RVA = "0xFA70B0", Offset = "0xFA70B0", VA = "0xFA70B0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001344")]
			[Address(RVA = "0xFA70B8", Offset = "0xFA70B8", VA = "0xFA70B8")]
			set
			{
			}
		}

		[Token(Token = "0x6001345")]
		[Address(RVA = "0xFA70C0", Offset = "0xFA70C0", VA = "0xFA70C0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001346")]
		[Address(RVA = "0xFA717C", Offset = "0xFA717C", VA = "0xFA717C")]
		public Accordion()
		{
		}
	}
	[Token(Token = "0x20003A5")]
	[AddComponentMenu("UI/Extensions/Accordion/Accordion Element")]
	[RequireComponent(typeof(RectTransform), typeof(LayoutElement))]
	public class AccordionElement : Toggle
	{
		[Token(Token = "0x40016EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[SerializeField]
		private float m_MinHeight;

		[Token(Token = "0x40016EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		private float m_MinWidth;

		[Token(Token = "0x40016ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Accordion m_Accordion;

		[Token(Token = "0x40016EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private RectTransform m_RectTransform;

		[Token(Token = "0x40016EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private LayoutElement m_LayoutElement;

		[NonSerialized]
		[Token(Token = "0x40016F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private readonly TweenRunner<FloatTween> m_FloatTweenRunner;

		[Token(Token = "0x170001CD")]
		public float MinHeight
		{
			[Token(Token = "0x6001347")]
			[Address(RVA = "0xFA7198", Offset = "0xFA7198", VA = "0xFA7198")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001CE")]
		public float MinWidth
		{
			[Token(Token = "0x6001348")]
			[Address(RVA = "0xFA71A0", Offset = "0xFA71A0", VA = "0xFA71A0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001349")]
		[Address(RVA = "0xFA71A8", Offset = "0xFA71A8", VA = "0xFA71A8")]
		protected AccordionElement()
		{
		}

		[Token(Token = "0x600134A")]
		[Address(RVA = "0xFA726C", Offset = "0xFA726C", VA = "0xFA726C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x600134B")]
		[Address(RVA = "0xFA7404", Offset = "0xFA7404", VA = "0xFA7404")]
		public void OnValueChanged(bool state)
		{
		}

		[Token(Token = "0x600134C")]
		[Address(RVA = "0xFA75BC", Offset = "0xFA75BC", VA = "0xFA75BC")]
		protected float GetExpandedHeight()
		{
			return default(float);
		}

		[Token(Token = "0x600134D")]
		[Address(RVA = "0xFA7814", Offset = "0xFA7814", VA = "0xFA7814")]
		protected float GetExpandedWidth()
		{
			return default(float);
		}

		[Token(Token = "0x600134E")]
		[Address(RVA = "0xFA76A0", Offset = "0xFA76A0", VA = "0xFA76A0")]
		protected void StartTween(float startFloat, float targetFloat)
		{
		}

		[Token(Token = "0x600134F")]
		[Address(RVA = "0xFA78F8", Offset = "0xFA78F8", VA = "0xFA78F8")]
		protected void SetHeight(float height)
		{
		}

		[Token(Token = "0x6001350")]
		[Address(RVA = "0xFA7998", Offset = "0xFA7998", VA = "0xFA7998")]
		protected void SetWidth(float width)
		{
		}
	}
	[Token(Token = "0x20003A6")]
	[AddComponentMenu("UI/Extensions/BoxSlider")]
	[RequireComponent(typeof(RectTransform))]
	public class BoxSlider : Selectable, IDragHandler, IEventSystemHandler, IInitializePotentialDragHandler, ICanvasElement
	{
		[Token(Token = "0x20003A7")]
		public enum Direction
		{
			[Token(Token = "0x40016FD")]
			LeftToRight,
			[Token(Token = "0x40016FE")]
			RightToLeft,
			[Token(Token = "0x40016FF")]
			BottomToTop,
			[Token(Token = "0x4001700")]
			TopToBottom
		}

		[Serializable]
		[Token(Token = "0x20003A8")]
		public class BoxSliderEvent : UnityEvent<float, float>
		{
			[Token(Token = "0x6001379")]
			[Address(RVA = "0xFA8380", Offset = "0xFA8380", VA = "0xFA8380")]
			public BoxSliderEvent()
			{
			}
		}

		[Token(Token = "0x20003A9")]
		private enum Axis
		{
			[Token(Token = "0x4001702")]
			Horizontal,
			[Token(Token = "0x4001703")]
			Vertical
		}

		[Token(Token = "0x40016F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private RectTransform m_HandleRect;

		[Token(Token = "0x40016F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Space(6f)]
		[SerializeField]
		private float m_MinValue;

		[Token(Token = "0x40016F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[SerializeField]
		private float m_MaxValue;

		[Token(Token = "0x40016F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		private bool m_WholeNumbers;

		[Token(Token = "0x40016F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[SerializeField]
		private float m_ValueX;

		[Token(Token = "0x40016F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private float m_ValueY;

		[Token(Token = "0x40016F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[Space(6f)]
		[SerializeField]
		private BoxSliderEvent m_OnValueChanged;

		[Token(Token = "0x40016F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Transform m_HandleTransform;

		[Token(Token = "0x40016F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private RectTransform m_HandleContainerRect;

		[Token(Token = "0x40016FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Vector2 m_Offset;

		[Token(Token = "0x40016FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private DrivenRectTransformTracker m_Tracker;

		[Token(Token = "0x170001CF")]
		public RectTransform HandleRect
		{
			[Token(Token = "0x6001351")]
			[Address(RVA = "0xFA7A38", Offset = "0xFA7A38", VA = "0xFA7A38")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001352")]
			[Address(RVA = "0xFA7A40", Offset = "0xFA7A40", VA = "0xFA7A40")]
			set
			{
			}
		}

		[Token(Token = "0x170001D0")]
		public float MinValue
		{
			[Token(Token = "0x6001353")]
			[Address(RVA = "0xFA7D18", Offset = "0xFA7D18", VA = "0xFA7D18")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001354")]
			[Address(RVA = "0xFA7D20", Offset = "0xFA7D20", VA = "0xFA7D20")]
			set
			{
			}
		}

		[Token(Token = "0x170001D1")]
		public float MaxValue
		{
			[Token(Token = "0x6001355")]
			[Address(RVA = "0xFA7DC4", Offset = "0xFA7DC4", VA = "0xFA7DC4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001356")]
			[Address(RVA = "0xFA7DCC", Offset = "0xFA7DCC", VA = "0xFA7DCC")]
			set
			{
			}
		}

		[Token(Token = "0x170001D2")]
		public bool WholeNumbers
		{
			[Token(Token = "0x6001357")]
			[Address(RVA = "0xFA7E60", Offset = "0xFA7E60", VA = "0xFA7E60")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001358")]
			[Address(RVA = "0xFA7E68", Offset = "0xFA7E68", VA = "0xFA7E68")]
			set
			{
			}
		}

		[Token(Token = "0x170001D3")]
		public float ValueX
		{
			[Token(Token = "0x6001359")]
			[Address(RVA = "0xFA7EFC", Offset = "0xFA7EFC", VA = "0xFA7EFC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600135A")]
			[Address(RVA = "0xFA7F9C", Offset = "0xFA7F9C", VA = "0xFA7F9C")]
			set
			{
			}
		}

		[Token(Token = "0x170001D4")]
		public float NormalizedValueX
		{
			[Token(Token = "0x600135B")]
			[Address(RVA = "0xFA7FA4", Offset = "0xFA7FA4", VA = "0xFA7FA4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600135C")]
			[Address(RVA = "0xFA807C", Offset = "0xFA807C", VA = "0xFA807C")]
			set
			{
			}
		}

		[Token(Token = "0x170001D5")]
		public float ValueY
		{
			[Token(Token = "0x600135D")]
			[Address(RVA = "0xFA80AC", Offset = "0xFA80AC", VA = "0xFA80AC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600135E")]
			[Address(RVA = "0xFA814C", Offset = "0xFA814C", VA = "0xFA814C")]
			set
			{
			}
		}

		[Token(Token = "0x170001D6")]
		public float NormalizedValueY
		{
			[Token(Token = "0x600135F")]
			[Address(RVA = "0xFA8154", Offset = "0xFA8154", VA = "0xFA8154")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001360")]
			[Address(RVA = "0xFA822C", Offset = "0xFA822C", VA = "0xFA822C")]
			set
			{
			}
		}

		[Token(Token = "0x170001D7")]
		public BoxSliderEvent OnValueChanged
		{
			[Token(Token = "0x6001361")]
			[Address(RVA = "0xFA825C", Offset = "0xFA825C", VA = "0xFA825C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001362")]
			[Address(RVA = "0xFA8264", Offset = "0xFA8264", VA = "0xFA8264")]
			set
			{
			}
		}

		[Token(Token = "0x170001D8")]
		private float StepSize
		{
			[Token(Token = "0x6001363")]
			[Address(RVA = "0xFA8274", Offset = "0xFA8274", VA = "0xFA8274")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001364")]
		[Address(RVA = "0xFA82A0", Offset = "0xFA82A0", VA = "0xFA82A0")]
		protected BoxSlider()
		{
		}

		[Token(Token = "0x6001365")]
		[Address(RVA = "0xFA83C8", Offset = "0xFA83C8", VA = "0xFA83C8", Slot = "46")]
		public virtual void Rebuild(CanvasUpdate executing)
		{
		}

		[Token(Token = "0x6001366")]
		[Address(RVA = "0xFA83CC", Offset = "0xFA83CC", VA = "0xFA83CC", Slot = "43")]
		public void LayoutComplete()
		{
		}

		[Token(Token = "0x6001367")]
		[Address(RVA = "0xFA83D0", Offset = "0xFA83D0", VA = "0xFA83D0", Slot = "44")]
		public void GraphicUpdateComplete()
		{
		}

		[Token(Token = "0x6001368")]
		public static bool SetClass<T>(ref T currentValue, T newValue) where T : class
		{
			return default(bool);
		}

		[Token(Token = "0x6001369")]
		public static bool SetStruct<T>(ref T currentValue, T newValue) where T : struct
		{
			return default(bool);
		}

		[Token(Token = "0x600136A")]
		[Address(RVA = "0xFA83D4", Offset = "0xFA83D4", VA = "0xFA83D4", Slot = "5")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x600136B")]
		[Address(RVA = "0xFA867C", Offset = "0xFA867C", VA = "0xFA867C", Slot = "7")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x600136C")]
		[Address(RVA = "0xFA7ABC", Offset = "0xFA7ABC", VA = "0xFA7ABC")]
		private void UpdateCachedReferences()
		{
		}

		[Token(Token = "0x600136D")]
		[Address(RVA = "0xFA7DB4", Offset = "0xFA7DB4", VA = "0xFA7DB4")]
		private void SetX(float input)
		{
		}

		[Token(Token = "0x600136E")]
		[Address(RVA = "0xFA8418", Offset = "0xFA8418", VA = "0xFA8418")]
		private void SetX(float input, bool sendCallback)
		{
		}

		[Token(Token = "0x600136F")]
		[Address(RVA = "0xFA7DBC", Offset = "0xFA7DBC", VA = "0xFA7DBC")]
		private void SetY(float input)
		{
		}

		[Token(Token = "0x6001370")]
		[Address(RVA = "0xFA854C", Offset = "0xFA854C", VA = "0xFA854C")]
		private void SetY(float input, bool sendCallback)
		{
		}

		[Token(Token = "0x6001371")]
		[Address(RVA = "0xFA86A0", Offset = "0xFA86A0", VA = "0xFA86A0", Slot = "10")]
		protected override void OnRectTransformDimensionsChange()
		{
		}

		[Token(Token = "0x6001372")]
		[Address(RVA = "0xFA7BDC", Offset = "0xFA7BDC", VA = "0xFA7BDC")]
		private void UpdateVisuals()
		{
		}

		[Token(Token = "0x6001373")]
		[Address(RVA = "0xFA86BC", Offset = "0xFA86BC", VA = "0xFA86BC")]
		private void UpdateDrag(PointerEventData eventData, Camera cam)
		{
		}

		[Token(Token = "0x6001374")]
		[Address(RVA = "0xFA88C4", Offset = "0xFA88C4", VA = "0xFA88C4")]
		private bool CanDrag(PointerEventData eventData)
		{
			return default(bool);
		}

		[Token(Token = "0x6001375")]
		[Address(RVA = "0xFA8928", Offset = "0xFA8928", VA = "0xFA8928", Slot = "32")]
		public override void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001376")]
		[Address(RVA = "0xFA8AFC", Offset = "0xFA8AFC", VA = "0xFA8AFC", Slot = "47")]
		public virtual void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001377")]
		[Address(RVA = "0xFA8B4C", Offset = "0xFA8B4C", VA = "0xFA8B4C", Slot = "48")]
		public virtual void OnInitializePotentialDrag(PointerEventData eventData)
		{
		}

		[SpecialName]
		[Token(Token = "0x6001378")]
		[Address(RVA = "0xFA8B64", Offset = "0xFA8B64", VA = "0xFA8B64", Slot = "42")]
		private Transform UnityEngine.UI.ICanvasElement.get_transform()
		{
			return null;
		}
	}
	[Token(Token = "0x20003AA")]
	public class TiltWindow : MonoBehaviour, IDragHandler, IEventSystemHandler
	{
		[Token(Token = "0x4001704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector2 range;

		[Token(Token = "0x4001705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform mTrans;

		[Token(Token = "0x4001706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Quaternion mStart;

		[Token(Token = "0x4001707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector2 mRot;

		[Token(Token = "0x4001708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector2 m_screenPos;

		[Token(Token = "0x600137A")]
		[Address(RVA = "0xFA8B6C", Offset = "0xFA8B6C", VA = "0xFA8B6C")]
		private void Start()
		{
		}

		[Token(Token = "0x600137B")]
		[Address(RVA = "0xFA8BBC", Offset = "0xFA8BBC", VA = "0xFA8BBC")]
		private void Update()
		{
		}

		[Token(Token = "0x600137C")]
		[Address(RVA = "0xFA8D14", Offset = "0xFA8D14", VA = "0xFA8D14", Slot = "4")]
		public void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600137D")]
		[Address(RVA = "0xFA8D30", Offset = "0xFA8D30", VA = "0xFA8D30")]
		public TiltWindow()
		{
		}
	}
	[Token(Token = "0x20003AB")]
	public enum AutoCompleteSearchType
	{
		[Token(Token = "0x400170A")]
		ArraySort,
		[Token(Token = "0x400170B")]
		Linq
	}
	[Token(Token = "0x20003AC")]
	[RequireComponent(typeof(RectTransform))]
	[AddComponentMenu("UI/Extensions/AutoComplete ComboBox")]
	public class AutoCompleteComboBox : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20003AD")]
		public class SelectionChangedEvent : UnityEvent<string, bool>
		{
			[Token(Token = "0x600139A")]
			[Address(RVA = "0xFAAFB0", Offset = "0xFAAFB0", VA = "0xFAAFB0")]
			public SelectionChangedEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003AE")]
		public class SelectionTextChangedEvent : UnityEvent<string>
		{
			[Token(Token = "0x600139B")]
			[Address(RVA = "0xFAAFF8", Offset = "0xFAAFF8", VA = "0xFAAFF8")]
			public SelectionTextChangedEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003AF")]
		public class SelectionValidityChangedEvent : UnityEvent<bool>
		{
			[Token(Token = "0x600139C")]
			[Address(RVA = "0xFAB040", Offset = "0xFAB040", VA = "0xFAB040")]
			public SelectionValidityChangedEvent()
			{
			}
		}

		[Token(Token = "0x400170C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color disabledTextColor;

		[Token(Token = "0x400170E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<string> AvailableOptions;

		[Token(Token = "0x400170F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool _isPanelActive;

		[Token(Token = "0x4001710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool _hasDrawnOnce;

		[Token(Token = "0x4001711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private InputField _mainInput;

		[Token(Token = "0x4001712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RectTransform _inputRT;

		[Token(Token = "0x4001713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private RectTransform _rectTransform;

		[Token(Token = "0x4001714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private RectTransform _overlayRT;

		[Token(Token = "0x4001715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private RectTransform _scrollPanelRT;

		[Token(Token = "0x4001716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private RectTransform _scrollBarRT;

		[Token(Token = "0x4001717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RectTransform _slidingAreaRT;

		[Token(Token = "0x4001718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private RectTransform _itemsPanelRT;

		[Token(Token = "0x4001719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Canvas _canvas;

		[Token(Token = "0x400171A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private RectTransform _canvasRT;

		[Token(Token = "0x400171B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private ScrollRect _scrollRect;

		[Token(Token = "0x400171C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private List<string> _panelItems;

		[Token(Token = "0x400171D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private List<string> _prunedPanelItems;

		[Token(Token = "0x400171E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Dictionary<string, GameObject> panelObjects;

		[Token(Token = "0x400171F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private GameObject itemTemplate;

		[Token(Token = "0x4001721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private float _scrollBarWidth;

		[Token(Token = "0x4001722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[SerializeField]
		private int _itemsToDisplay;

		[Token(Token = "0x4001723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public bool SelectFirstItemOnStart;

		[Token(Token = "0x4001724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
		[SerializeField]
		[Tooltip("Change input text color based on matching items")]
		private bool _ChangeInputTextColorBasedOnMatchingItems;

		[Token(Token = "0x4001725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float DropdownOffset;

		[Token(Token = "0x4001726")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Color ValidSelectionTextColor;

		[Token(Token = "0x4001727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Color MatchingItemsRemainingTextColor;

		[Token(Token = "0x4001728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Color NoItemsRemainingTextColor;

		[Token(Token = "0x4001729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public AutoCompleteSearchType autocompleteSearchType;

		[Token(Token = "0x400172A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private bool _selectionIsValid;

		[Token(Token = "0x400172B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public SelectionTextChangedEvent OnSelectionTextChanged;

		[Token(Token = "0x400172C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public SelectionValidityChangedEvent OnSelectionValidityChanged;

		[Token(Token = "0x400172D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public SelectionChangedEvent OnSelectionChanged;

		[Token(Token = "0x170001D9")]
		public DropDownListItem SelectedItem
		{
			[Token(Token = "0x600137E")]
			[Address(RVA = "0xFA8D94", Offset = "0xFA8D94", VA = "0xFA8D94")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600137F")]
			[Address(RVA = "0xFA8D9C", Offset = "0xFA8D9C", VA = "0xFA8D9C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001DA")]
		public string Text
		{
			[Token(Token = "0x6001380")]
			[Address(RVA = "0xFA8DA4", Offset = "0xFA8DA4", VA = "0xFA8DA4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001381")]
			[Address(RVA = "0xFA8DAC", Offset = "0xFA8DAC", VA = "0xFA8DAC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001DB")]
		public float ScrollBarWidth
		{
			[Token(Token = "0x6001382")]
			[Address(RVA = "0xFA8DB4", Offset = "0xFA8DB4", VA = "0xFA8DB4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001383")]
			[Address(RVA = "0xFA8DBC", Offset = "0xFA8DBC", VA = "0xFA8DBC")]
			set
			{
			}
		}

		[Token(Token = "0x170001DC")]
		public int ItemsToDisplay
		{
			[Token(Token = "0x6001384")]
			[Address(RVA = "0xFA9184", Offset = "0xFA9184", VA = "0xFA9184")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001385")]
			[Address(RVA = "0xFA918C", Offset = "0xFA918C", VA = "0xFA918C")]
			set
			{
			}
		}

		[Token(Token = "0x170001DD")]
		public bool InputColorMatching
		{
			[Token(Token = "0x6001386")]
			[Address(RVA = "0xFA9194", Offset = "0xFA9194", VA = "0xFA9194")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001387")]
			[Address(RVA = "0xFA919C", Offset = "0xFA919C", VA = "0xFA919C")]
			set
			{
			}
		}

		[Token(Token = "0x6001388")]
		[Address(RVA = "0xFA9274", Offset = "0xFA9274", VA = "0xFA9274")]
		public void Awake()
		{
		}

		[Token(Token = "0x6001389")]
		[Address(RVA = "0xFA9888", Offset = "0xFA9888", VA = "0xFA9888")]
		public void Start()
		{
		}

		[Token(Token = "0x600138A")]
		[Address(RVA = "0xFA9278", Offset = "0xFA9278", VA = "0xFA9278")]
		private bool Initialize()
		{
			return default(bool);
		}

		[Token(Token = "0x600138B")]
		[Address(RVA = "0xFAA42C", Offset = "0xFAA42C", VA = "0xFAA42C")]
		public void AddItem(string item)
		{
		}

		[Token(Token = "0x600138C")]
		[Address(RVA = "0xFAA4E0", Offset = "0xFAA4E0", VA = "0xFAA4E0")]
		public void RemoveItem(string item)
		{
		}

		[Token(Token = "0x600138D")]
		[Address(RVA = "0xFAA540", Offset = "0xFAA540", VA = "0xFAA540")]
		public void SetAvailableOptions(List<string> newOptions)
		{
		}

		[Token(Token = "0x600138E")]
		[Address(RVA = "0xFAA5C4", Offset = "0xFAA5C4", VA = "0xFAA5C4")]
		public void SetAvailableOptions(string[] newOptions)
		{
		}

		[Token(Token = "0x600138F")]
		[Address(RVA = "0xFAA6EC", Offset = "0xFAA6EC", VA = "0xFAA6EC")]
		public void ResetItems()
		{
		}

		[Token(Token = "0x6001390")]
		[Address(RVA = "0xFA99D4", Offset = "0xFA99D4", VA = "0xFA99D4")]
		private void RebuildPanel()
		{
		}

		[Token(Token = "0x6001391")]
		[Address(RVA = "0xFA998C", Offset = "0xFA998C", VA = "0xFA998C")]
		private void OnItemClicked(string item)
		{
		}

		[Token(Token = "0x6001392")]
		[Address(RVA = "0xFA8DC4", Offset = "0xFA8DC4", VA = "0xFA8DC4")]
		private void RedrawPanel()
		{
		}

		[Token(Token = "0x6001393")]
		[Address(RVA = "0xFAA760", Offset = "0xFAA760", VA = "0xFAA760")]
		public void OnValueChanged(string currText)
		{
		}

		[Token(Token = "0x6001394")]
		[Address(RVA = "0xFA91B0", Offset = "0xFA91B0", VA = "0xFA91B0")]
		private void SetInputTextColor()
		{
		}

		[Token(Token = "0x6001395")]
		[Address(RVA = "0xFA9928", Offset = "0xFA9928", VA = "0xFA9928")]
		public void ToggleDropdownPanel(bool directClick = false)
		{
		}

		[Token(Token = "0x6001396")]
		[Address(RVA = "0xFAA8E0", Offset = "0xFAA8E0", VA = "0xFAA8E0")]
		private void PruneItems(string currText)
		{
		}

		[Token(Token = "0x6001397")]
		[Address(RVA = "0xFAA8F4", Offset = "0xFAA8F4", VA = "0xFAA8F4")]
		private void PruneItemsLinq(string currText)
		{
		}

		[Token(Token = "0x6001398")]
		[Address(RVA = "0xFAAC84", Offset = "0xFAAC84", VA = "0xFAAC84")]
		private void PruneItemsArray(string currText)
		{
		}

		[Token(Token = "0x6001399")]
		[Address(RVA = "0xFAAF70", Offset = "0xFAAF70", VA = "0xFAAF70")]
		public AutoCompleteComboBox()
		{
		}
	}
	[Token(Token = "0x20003B2")]
	[RequireComponent(typeof(RectTransform))]
	[AddComponentMenu("UI/Extensions/ComboBox")]
	public class ComboBox : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20003B3")]
		public class SelectionChangedEvent : UnityEvent<string>
		{
			[Token(Token = "0x60013B7")]
			[Address(RVA = "0xFAC6DC", Offset = "0xFAC6DC", VA = "0xFAC6DC")]
			public SelectionChangedEvent()
			{
			}
		}

		[Token(Token = "0x4001731")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color disabledTextColor;

		[Token(Token = "0x4001733")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<string> AvailableOptions;

		[Token(Token = "0x4001734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private float _scrollBarWidth;

		[Token(Token = "0x4001735")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private int _itemsToDisplay;

		[Token(Token = "0x4001736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private bool _sortItems;

		[Token(Token = "0x4001737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public SelectionChangedEvent OnSelectionChanged;

		[Token(Token = "0x4001738")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool _isPanelActive;

		[Token(Token = "0x4001739")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		private bool _hasDrawnOnce;

		[Token(Token = "0x400173A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private InputField _mainInput;

		[Token(Token = "0x400173B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private RectTransform _inputRT;

		[Token(Token = "0x400173C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private RectTransform _rectTransform;

		[Token(Token = "0x400173D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RectTransform _overlayRT;

		[Token(Token = "0x400173E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private RectTransform _scrollPanelRT;

		[Token(Token = "0x400173F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private RectTransform _scrollBarRT;

		[Token(Token = "0x4001740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private RectTransform _slidingAreaRT;

		[Token(Token = "0x4001741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private RectTransform _itemsPanelRT;

		[Token(Token = "0x4001742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Canvas _canvas;

		[Token(Token = "0x4001743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private RectTransform _canvasRT;

		[Token(Token = "0x4001744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private ScrollRect _scrollRect;

		[Token(Token = "0x4001745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private List<string> _panelItems;

		[Token(Token = "0x4001746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Dictionary<string, GameObject> panelObjects;

		[Token(Token = "0x4001747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private GameObject itemTemplate;

		[Token(Token = "0x170001DE")]
		public DropDownListItem SelectedItem
		{
			[Token(Token = "0x60013A2")]
			[Address(RVA = "0xFAB0FC", Offset = "0xFAB0FC", VA = "0xFAB0FC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60013A3")]
			[Address(RVA = "0xFAB104", Offset = "0xFAB104", VA = "0xFAB104")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001DF")]
		public string Text
		{
			[Token(Token = "0x60013A4")]
			[Address(RVA = "0xFAB10C", Offset = "0xFAB10C", VA = "0xFAB10C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60013A5")]
			[Address(RVA = "0xFAB114", Offset = "0xFAB114", VA = "0xFAB114")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001E0")]
		public float ScrollBarWidth
		{
			[Token(Token = "0x60013A6")]
			[Address(RVA = "0xFAB11C", Offset = "0xFAB11C", VA = "0xFAB11C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60013A7")]
			[Address(RVA = "0xFAB124", Offset = "0xFAB124", VA = "0xFAB124")]
			set
			{
			}
		}

		[Token(Token = "0x170001E1")]
		public int ItemsToDisplay
		{
			[Token(Token = "0x60013A8")]
			[Address(RVA = "0xFAB4E4", Offset = "0xFAB4E4", VA = "0xFAB4E4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60013A9")]
			[Address(RVA = "0xFAB4EC", Offset = "0xFAB4EC", VA = "0xFAB4EC")]
			set
			{
			}
		}

		[Token(Token = "0x60013AA")]
		[Address(RVA = "0xFAB4F4", Offset = "0xFAB4F4", VA = "0xFAB4F4")]
		public void Awake()
		{
		}

		[Token(Token = "0x60013AB")]
		[Address(RVA = "0xFAB4F8", Offset = "0xFAB4F8", VA = "0xFAB4F8")]
		private bool Initialize()
		{
			return default(bool);
		}

		[Token(Token = "0x60013AC")]
		[Address(RVA = "0xFAC234", Offset = "0xFAC234", VA = "0xFAC234")]
		public void AddItem(string item)
		{
		}

		[Token(Token = "0x60013AD")]
		[Address(RVA = "0xFAC2E8", Offset = "0xFAC2E8", VA = "0xFAC2E8")]
		public void RemoveItem(string item)
		{
		}

		[Token(Token = "0x60013AE")]
		[Address(RVA = "0xFAC348", Offset = "0xFAC348", VA = "0xFAC348")]
		public void SetAvailableOptions(List<string> newOptions)
		{
		}

		[Token(Token = "0x60013AF")]
		[Address(RVA = "0xFAC3CC", Offset = "0xFAC3CC", VA = "0xFAC3CC")]
		public void SetAvailableOptions(string[] newOptions)
		{
		}

		[Token(Token = "0x60013B0")]
		[Address(RVA = "0xFAC4F4", Offset = "0xFAC4F4", VA = "0xFAC4F4")]
		public void ResetItems()
		{
		}

		[Token(Token = "0x60013B1")]
		[Address(RVA = "0xFABAC0", Offset = "0xFABAC0", VA = "0xFABAC0")]
		private void RebuildPanel()
		{
		}

		[Token(Token = "0x60013B2")]
		[Address(RVA = "0xFAC568", Offset = "0xFAC568", VA = "0xFAC568")]
		private void OnItemClicked(string item)
		{
		}

		[Token(Token = "0x60013B3")]
		[Address(RVA = "0xFAB12C", Offset = "0xFAB12C", VA = "0xFAB12C")]
		private void RedrawPanel()
		{
		}

		[Token(Token = "0x60013B4")]
		[Address(RVA = "0xFAC614", Offset = "0xFAC614", VA = "0xFAC614")]
		public void OnValueChanged(string currText)
		{
		}

		[Token(Token = "0x60013B5")]
		[Address(RVA = "0xFAC5B0", Offset = "0xFAC5B0", VA = "0xFAC5B0")]
		public void ToggleDropdownPanel(bool directClick)
		{
		}

		[Token(Token = "0x60013B6")]
		[Address(RVA = "0xFAC6C4", Offset = "0xFAC6C4", VA = "0xFAC6C4")]
		public ComboBox()
		{
		}
	}
	[Token(Token = "0x20003B5")]
	[RequireComponent(typeof(RectTransform))]
	[AddComponentMenu("UI/Extensions/Dropdown List")]
	public class DropDownList : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20003B6")]
		public class SelectionChangedEvent : UnityEvent<int>
		{
			[Token(Token = "0x60013D0")]
			[Address(RVA = "0xFAE4C8", Offset = "0xFAE4C8", VA = "0xFAE4C8")]
			public SelectionChangedEvent()
			{
			}
		}

		[Token(Token = "0x400174B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color disabledTextColor;

		[Token(Token = "0x400174D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<DropDownListItem> Items;

		[Token(Token = "0x400174E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool OverrideHighlighted;

		[Token(Token = "0x400174F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool _isPanelActive;

		[Token(Token = "0x4001750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		private bool _hasDrawnOnce;

		[Token(Token = "0x4001751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private DropDownListButton _mainButton;

		[Token(Token = "0x4001752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RectTransform _rectTransform;

		[Token(Token = "0x4001753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private RectTransform _overlayRT;

		[Token(Token = "0x4001754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private RectTransform _scrollPanelRT;

		[Token(Token = "0x4001755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private RectTransform _scrollBarRT;

		[Token(Token = "0x4001756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private RectTransform _slidingAreaRT;

		[Token(Token = "0x4001757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RectTransform _itemsPanelRT;

		[Token(Token = "0x4001758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Canvas _canvas;

		[Token(Token = "0x4001759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private RectTransform _canvasRT;

		[Token(Token = "0x400175A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private ScrollRect _scrollRect;

		[Token(Token = "0x400175B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private List<DropDownListButton> _panelItems;

		[Token(Token = "0x400175C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private GameObject _itemTemplate;

		[Token(Token = "0x400175D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private float _scrollBarWidth;

		[Token(Token = "0x400175E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private int _selectedIndex;

		[Token(Token = "0x400175F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private int _itemsToDisplay;

		[Token(Token = "0x4001760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public bool SelectFirstItemOnStart;

		[Token(Token = "0x4001761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public SelectionChangedEvent OnSelectionChanged;

		[Token(Token = "0x170001E2")]
		public DropDownListItem SelectedItem
		{
			[Token(Token = "0x60013BA")]
			[Address(RVA = "0xFAC744", Offset = "0xFAC744", VA = "0xFAC744")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60013BB")]
			[Address(RVA = "0xFAC74C", Offset = "0xFAC74C", VA = "0xFAC74C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001E3")]
		public float ScrollBarWidth
		{
			[Token(Token = "0x60013BC")]
			[Address(RVA = "0xFAC754", Offset = "0xFAC754", VA = "0xFAC754")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60013BD")]
			[Address(RVA = "0xFAC75C", Offset = "0xFAC75C", VA = "0xFAC75C")]
			set
			{
			}
		}

		[Token(Token = "0x170001E4")]
		public int ItemsToDisplay
		{
			[Token(Token = "0x60013BE")]
			[Address(RVA = "0xFACB2C", Offset = "0xFACB2C", VA = "0xFACB2C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60013BF")]
			[Address(RVA = "0xFACB34", Offset = "0xFACB34", VA = "0xFACB34")]
			set
			{
			}
		}

		[Token(Token = "0x60013C0")]
		[Address(RVA = "0xFACB3C", Offset = "0xFACB3C", VA = "0xFACB3C")]
		public void Start()
		{
		}

		[Token(Token = "0x60013C1")]
		[Address(RVA = "0xFACBBC", Offset = "0xFACBBC", VA = "0xFACBBC")]
		private bool Initialize()
		{
			return default(bool);
		}

		[Token(Token = "0x60013C2")]
		[Address(RVA = "0xFAD9B8", Offset = "0xFAD9B8", VA = "0xFAD9B8")]
		public void RefreshItems(params object[] list)
		{
		}

		[Token(Token = "0x60013C3")]
		[Address(RVA = "0xFADD80", Offset = "0xFADD80", VA = "0xFADD80")]
		public void AddItem(DropDownListItem item)
		{
		}

		[Token(Token = "0x60013C4")]
		[Address(RVA = "0xFADE34", Offset = "0xFADE34", VA = "0xFADE34")]
		public void AddItem(string item)
		{
		}

		[Token(Token = "0x60013C5")]
		[Address(RVA = "0xFADF40", Offset = "0xFADF40", VA = "0xFADF40")]
		public void AddItem(Sprite item)
		{
		}

		[Token(Token = "0x60013C6")]
		[Address(RVA = "0xFAE04C", Offset = "0xFAE04C", VA = "0xFAE04C")]
		public void RemoveItem(DropDownListItem item)
		{
		}

		[Token(Token = "0x60013C7")]
		[Address(RVA = "0xFAE0AC", Offset = "0xFAE0AC", VA = "0xFAE0AC")]
		public void RemoveItem(string item)
		{
		}

		[Token(Token = "0x60013C8")]
		[Address(RVA = "0xFAE168", Offset = "0xFAE168", VA = "0xFAE168")]
		public void RemoveItem(Sprite item)
		{
		}

		[Token(Token = "0x60013C9")]
		[Address(RVA = "0xFAE224", Offset = "0xFAE224", VA = "0xFAE224")]
		public void ResetItems()
		{
		}

		[Token(Token = "0x60013CA")]
		[Address(RVA = "0xFAD420", Offset = "0xFAD420", VA = "0xFAD420")]
		private void RebuildPanel()
		{
		}

		[Token(Token = "0x60013CB")]
		[Address(RVA = "0xFAD208", Offset = "0xFAD208", VA = "0xFAD208")]
		private void OnItemClicked(int indx)
		{
		}

		[Token(Token = "0x60013CC")]
		[Address(RVA = "0xFAE298", Offset = "0xFAE298", VA = "0xFAE298")]
		private void UpdateSelected()
		{
		}

		[Token(Token = "0x60013CD")]
		[Address(RVA = "0xFAC764", Offset = "0xFAC764", VA = "0xFAC764")]
		private void RedrawPanel()
		{
		}

		[Token(Token = "0x60013CE")]
		[Address(RVA = "0xFAD154", Offset = "0xFAD154", VA = "0xFAD154")]
		public void ToggleDropdownPanel(bool directClick)
		{
		}

		[Token(Token = "0x60013CF")]
		[Address(RVA = "0xFAE4AC", Offset = "0xFAE4AC", VA = "0xFAE4AC")]
		public DropDownList()
		{
		}
	}
	[Token(Token = "0x20003B8")]
	[RequireComponent(typeof(RectTransform), typeof(Button))]
	public class DropDownListButton
	{
		[Token(Token = "0x4001765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public RectTransform rectTransform;

		[Token(Token = "0x4001766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Button btn;

		[Token(Token = "0x4001767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text txt;

		[Token(Token = "0x4001768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Image btnImg;

		[Token(Token = "0x4001769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Image img;

		[Token(Token = "0x400176A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject gameobject;

		[Token(Token = "0x60013D3")]
		[Address(RVA = "0xFAD280", Offset = "0xFAD280", VA = "0xFAD280")]
		public DropDownListButton(GameObject btnObj)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003B9")]
	public class DropDownListItem
	{
		[Token(Token = "0x400176B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private string _caption;

		[Token(Token = "0x400176C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Sprite _image;

		[Token(Token = "0x400176D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool _isDisabled;

		[Token(Token = "0x400176E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private string _id;

		[Token(Token = "0x400176F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action OnSelect;

		[Token(Token = "0x4001770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal Action OnUpdate;

		[Token(Token = "0x170001E5")]
		public string Caption
		{
			[Token(Token = "0x60013D4")]
			[Address(RVA = "0xFAE558", Offset = "0xFAE558", VA = "0xFAE558")]
			get
			{
				return null;
			}
			[Token(Token = "0x60013D5")]
			[Address(RVA = "0xFAE560", Offset = "0xFAE560", VA = "0xFAE560")]
			set
			{
			}
		}

		[Token(Token = "0x170001E6")]
		public Sprite Image
		{
			[Token(Token = "0x60013D6")]
			[Address(RVA = "0xFAE598", Offset = "0xFAE598", VA = "0xFAE598")]
			get
			{
				return null;
			}
			[Token(Token = "0x60013D7")]
			[Address(RVA = "0xFAE5A0", Offset = "0xFAE5A0", VA = "0xFAE5A0")]
			set
			{
			}
		}

		[Token(Token = "0x170001E7")]
		public bool IsDisabled
		{
			[Token(Token = "0x60013D8")]
			[Address(RVA = "0xFAE5D8", Offset = "0xFAE5D8", VA = "0xFAE5D8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60013D9")]
			[Address(RVA = "0xFAE5E0", Offset = "0xFAE5E0", VA = "0xFAE5E0")]
			set
			{
			}
		}

		[Token(Token = "0x170001E8")]
		public string ID
		{
			[Token(Token = "0x60013DA")]
			[Address(RVA = "0xFAE604", Offset = "0xFAE604", VA = "0xFAE604")]
			get
			{
				return null;
			}
			[Token(Token = "0x60013DB")]
			[Address(RVA = "0xFAE60C", Offset = "0xFAE60C", VA = "0xFAE60C")]
			set
			{
			}
		}

		[Token(Token = "0x60013DC")]
		[Address(RVA = "0xFADCFC", Offset = "0xFADCFC", VA = "0xFADCFC")]
		public DropDownListItem(string caption = "", string inId = "", [Optional] Sprite image, bool disabled = false, [Optional] Action onSelect)
		{
		}
	}
	[Token(Token = "0x20003BA")]
	[AddComponentMenu("UI/Extensions/Cooldown Button")]
	public class CooldownButton : MonoBehaviour, IPointerDownHandler, IEventSystemHandler
	{
		[Serializable]
		[Token(Token = "0x20003BB")]
		public class CooldownButtonEvent : UnityEvent<PointerEventData.InputButton>
		{
			[Token(Token = "0x60013F1")]
			[Address(RVA = "0xFAF964", Offset = "0xFAF964", VA = "0xFAF964")]
			public CooldownButtonEvent()
			{
			}
		}

		[Token(Token = "0x4001771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float cooldownTimeout;

		[Token(Token = "0x4001772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float cooldownSpeed;

		[Token(Token = "0x4001773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[ReadOnly]
		private bool cooldownActive;

		[Token(Token = "0x4001774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[SerializeField]
		[ReadOnly]
		private bool cooldownInEffect;

		[Token(Token = "0x4001775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		[ReadOnly]
		private float cooldownTimeElapsed;

		[Token(Token = "0x4001776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[ReadOnly]
		private float cooldownTimeRemaining;

		[Token(Token = "0x4001777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[ReadOnly]
		[SerializeField]
		private int cooldownPercentRemaining;

		[Token(Token = "0x4001778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[ReadOnly]
		[SerializeField]
		private int cooldownPercentComplete;

		[Token(Token = "0x4001779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PointerEventData buttonSource;

		[Token(Token = "0x400177A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Event that fires when a button is initially pressed down")]
		public CooldownButtonEvent OnCooldownStart;

		[Token(Token = "0x400177B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Event that fires when a button is released")]
		public CooldownButtonEvent OnButtonClickDuringCooldown;

		[Token(Token = "0x400177C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Event that continually fires while a button is held down")]
		public CooldownButtonEvent OnCoolDownFinish;

		[Token(Token = "0x170001E9")]
		public float CooldownTimeout
		{
			[Token(Token = "0x60013DD")]
			[Address(RVA = "0xFAE614", Offset = "0xFAE614", VA = "0xFAE614")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60013DE")]
			[Address(RVA = "0xFAE61C", Offset = "0xFAE61C", VA = "0xFAE61C")]
			set
			{
			}
		}

		[Token(Token = "0x170001EA")]
		public float CooldownSpeed
		{
			[Token(Token = "0x60013DF")]
			[Address(RVA = "0xFAE624", Offset = "0xFAE624", VA = "0xFAE624")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60013E0")]
			[Address(RVA = "0xFAE62C", Offset = "0xFAE62C", VA = "0xFAE62C")]
			set
			{
			}
		}

		[Token(Token = "0x170001EB")]
		public bool CooldownInEffect
		{
			[Token(Token = "0x60013E1")]
			[Address(RVA = "0xFAE634", Offset = "0xFAE634", VA = "0xFAE634")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001EC")]
		public bool CooldownActive
		{
			[Token(Token = "0x60013E2")]
			[Address(RVA = "0xFAE63C", Offset = "0xFAE63C", VA = "0xFAE63C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60013E3")]
			[Address(RVA = "0xFAE644", Offset = "0xFAE644", VA = "0xFAE644")]
			set
			{
			}
		}

		[Token(Token = "0x170001ED")]
		public float CooldownTimeElapsed
		{
			[Token(Token = "0x60013E4")]
			[Address(RVA = "0xFAE650", Offset = "0xFAE650", VA = "0xFAE650")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60013E5")]
			[Address(RVA = "0xFAE658", Offset = "0xFAE658", VA = "0xFAE658")]
			set
			{
			}
		}

		[Token(Token = "0x170001EE")]
		public float CooldownTimeRemaining
		{
			[Token(Token = "0x60013E6")]
			[Address(RVA = "0xFAE660", Offset = "0xFAE660", VA = "0xFAE660")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001EF")]
		public int CooldownPercentRemaining
		{
			[Token(Token = "0x60013E7")]
			[Address(RVA = "0xFAE668", Offset = "0xFAE668", VA = "0xFAE668")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001F0")]
		public int CooldownPercentComplete
		{
			[Token(Token = "0x60013E8")]
			[Address(RVA = "0xFAE670", Offset = "0xFAE670", VA = "0xFAE670")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60013E9")]
		[Address(RVA = "0xFAE678", Offset = "0xFAE678", VA = "0xFAE678")]
		private void Update()
		{
		}

		[Token(Token = "0x60013EA")]
		[Address(RVA = "0xFAE794", Offset = "0xFAE794", VA = "0xFAE794")]
		public void PauseCooldown()
		{
		}

		[Token(Token = "0x60013EB")]
		[Address(RVA = "0xFAE7A4", Offset = "0xFAE7A4", VA = "0xFAE7A4")]
		public void RestartCooldown()
		{
		}

		[Token(Token = "0x60013EC")]
		[Address(RVA = "0xFAE7B8", Offset = "0xFAE7B8", VA = "0xFAE7B8")]
		public void StartCooldown()
		{
		}

		[Token(Token = "0x60013ED")]
		[Address(RVA = "0xFAE714", Offset = "0xFAE714", VA = "0xFAE714")]
		public void StopCooldown()
		{
		}

		[Token(Token = "0x60013EE")]
		[Address(RVA = "0xFAE898", Offset = "0xFAE898", VA = "0xFAE898")]
		public void CancelCooldown()
		{
		}

		[Token(Token = "0x60013EF")]
		[Address(RVA = "0xFAE8A0", Offset = "0xFAE8A0", VA = "0xFAE8A0", Slot = "4")]
		private void UnityEngine.EventSystems.IPointerDownHandler.OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60013F0")]
		[Address(RVA = "0xFAE954", Offset = "0xFAE954", VA = "0xFAE954")]
		public CooldownButton()
		{
		}
	}
	[Token(Token = "0x20003BC")]
	[RequireComponent(typeof(InputField))]
	[AddComponentMenu("UI/Extensions/InputFocus")]
	public class InputFocus : MonoBehaviour
	{
		[Token(Token = "0x400177D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected InputField _inputField;

		[Token(Token = "0x400177E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool _ignoreNextActivation;

		[Token(Token = "0x60013F2")]
		[Address(RVA = "0xFAF9AC", Offset = "0xFAF9AC", VA = "0xFAF9AC")]
		private void Start()
		{
		}

		[Token(Token = "0x60013F3")]
		[Address(RVA = "0xFAFA04", Offset = "0xFAFA04", VA = "0xFAFA04")]
		private void Update()
		{
		}

		[Token(Token = "0x60013F4")]
		[Address(RVA = "0xFAFA68", Offset = "0xFAFA68", VA = "0xFAFA68")]
		public void buttonPressed()
		{
		}

		[Token(Token = "0x60013F5")]
		[Address(RVA = "0xFAFB14", Offset = "0xFAFB14", VA = "0xFAFB14")]
		public void OnEndEdit(string textString)
		{
		}

		[Token(Token = "0x60013F6")]
		[Address(RVA = "0xFAFBA8", Offset = "0xFAFBA8", VA = "0xFAFBA8")]
		public InputFocus()
		{
		}
	}
	[Token(Token = "0x20003BD")]
	[AddComponentMenu("UI/Extensions/MultiTouchScrollRect")]
	public class MultiTouchScrollRect : ScrollRect
	{
		[Token(Token = "0x400177F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private int pid;

		[Token(Token = "0x60013F7")]
		[Address(RVA = "0xFAFBB0", Offset = "0xFAFBB0", VA = "0xFAFBB0", Slot = "44")]
		public override void OnBeginDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60013F8")]
		[Address(RVA = "0xFAFBD0", Offset = "0xFAFBD0", VA = "0xFAFBD0", Slot = "46")]
		public override void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60013F9")]
		[Address(RVA = "0xFAFC00", Offset = "0xFAFC00", VA = "0xFAFC00", Slot = "45")]
		public override void OnEndDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60013FA")]
		[Address(RVA = "0xFAFC10", Offset = "0xFAFC10", VA = "0xFAFC10")]
		public MultiTouchScrollRect()
		{
		}
	}
	[Token(Token = "0x20003BE")]
	[RequireComponent(typeof(Image))]
	[AddComponentMenu("UI/Extensions/Radial Slider")]
	public class RadialSlider : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerDownHandler, IPointerUpHandler, IDragHandler
	{
		[Serializable]
		[Token(Token = "0x20003BF")]
		public class RadialSliderValueChangedEvent : UnityEvent<int>
		{
			[Token(Token = "0x6001418")]
			[Address(RVA = "0xFB04D0", Offset = "0xFB04D0", VA = "0xFB04D0")]
			public RadialSliderValueChangedEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003C0")]
		public class RadialSliderTextValueChangedEvent : UnityEvent<string>
		{
			[Token(Token = "0x6001419")]
			[Address(RVA = "0xFB0518", Offset = "0xFB0518", VA = "0xFB0518")]
			public RadialSliderTextValueChangedEvent()
			{
			}
		}

		[Token(Token = "0x4001780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool isPointerDown;

		[Token(Token = "0x4001781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool isPointerReleased;

		[Token(Token = "0x4001782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		private bool lerpInProgress;

		[Token(Token = "0x4001783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Vector2 m_localPos;

		[Token(Token = "0x4001784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector2 m_screenPos;

		[Token(Token = "0x4001785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float m_targetAngle;

		[Token(Token = "0x4001786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float m_lerpTargetAngle;

		[Token(Token = "0x4001787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float m_startAngle;

		[Token(Token = "0x4001788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float m_currentLerpTime;

		[Token(Token = "0x4001789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float m_lerpTime;

		[Token(Token = "0x400178A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Camera m_eventCamera;

		[Token(Token = "0x400178B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Image m_image;

		[Token(Token = "0x400178C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[Tooltip("Radial Gradient Start Color")]
		private Color m_startColor;

		[Token(Token = "0x400178D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		[Tooltip("Radial Gradient End Color")]
		private Color m_endColor;

		[Token(Token = "0x400178E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		[Tooltip("Move slider absolute or use Lerping?\nDragging only supported with absolute")]
		private bool m_lerpToTarget;

		[Token(Token = "0x400178F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Curve to apply to the Lerp\nMust be set to enable Lerp")]
		[SerializeField]
		private AnimationCurve m_lerpCurve;

		[Token(Token = "0x4001790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		[Tooltip("Event fired when value of control changes, outputs an INT angle value")]
		private RadialSliderValueChangedEvent _onValueChanged;

		[Token(Token = "0x4001791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event fired when value of control changes, outputs a TEXT angle value")]
		[SerializeField]
		private RadialSliderTextValueChangedEvent _onTextValueChanged;

		[Token(Token = "0x170001F1")]
		public float Angle
		{
			[Token(Token = "0x60013FB")]
			[Address(RVA = "0xFAFC20", Offset = "0xFAFC20", VA = "0xFAFC20")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60013FC")]
			[Address(RVA = "0xFAFD30", Offset = "0xFAFD30", VA = "0xFAFD30")]
			set
			{
			}
		}

		[Token(Token = "0x170001F2")]
		public float Value
		{
			[Token(Token = "0x60013FD")]
			[Address(RVA = "0xFAFE0C", Offset = "0xFAFE0C", VA = "0xFAFE0C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60013FE")]
			[Address(RVA = "0xFAFE28", Offset = "0xFAFE28", VA = "0xFAFE28")]
			set
			{
			}
		}

		[Token(Token = "0x170001F3")]
		public Color EndColor
		{
			[Token(Token = "0x60013FF")]
			[Address(RVA = "0xFAFE38", Offset = "0xFAFE38", VA = "0xFAFE38")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6001400")]
			[Address(RVA = "0xFAFE44", Offset = "0xFAFE44", VA = "0xFAFE44")]
			set
			{
			}
		}

		[Token(Token = "0x170001F4")]
		public Color StartColor
		{
			[Token(Token = "0x6001401")]
			[Address(RVA = "0xFAFE50", Offset = "0xFAFE50", VA = "0xFAFE50")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6001402")]
			[Address(RVA = "0xFAFE5C", Offset = "0xFAFE5C", VA = "0xFAFE5C")]
			set
			{
			}
		}

		[Token(Token = "0x170001F5")]
		public bool LerpToTarget
		{
			[Token(Token = "0x6001403")]
			[Address(RVA = "0xFAFE68", Offset = "0xFAFE68", VA = "0xFAFE68")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001404")]
			[Address(RVA = "0xFAFE70", Offset = "0xFAFE70", VA = "0xFAFE70")]
			set
			{
			}
		}

		[Token(Token = "0x170001F6")]
		public AnimationCurve LerpCurve
		{
			[Token(Token = "0x6001405")]
			[Address(RVA = "0xFAFE7C", Offset = "0xFAFE7C", VA = "0xFAFE7C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001406")]
			[Address(RVA = "0xFAFE84", Offset = "0xFAFE84", VA = "0xFAFE84")]
			set
			{
			}
		}

		[Token(Token = "0x170001F7")]
		public bool LerpInProgress
		{
			[Token(Token = "0x6001407")]
			[Address(RVA = "0xFAFF0C", Offset = "0xFAFF0C", VA = "0xFAFF0C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001F8")]
		public Image RadialImage
		{
			[Token(Token = "0x6001408")]
			[Address(RVA = "0xFAFC48", Offset = "0xFAFC48", VA = "0xFAFC48")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F9")]
		public RadialSliderValueChangedEvent onValueChanged
		{
			[Token(Token = "0x6001409")]
			[Address(RVA = "0xFAFF14", Offset = "0xFAFF14", VA = "0xFAFF14")]
			get
			{
				return null;
			}
			[Token(Token = "0x600140A")]
			[Address(RVA = "0xFAFF1C", Offset = "0xFAFF1C", VA = "0xFAFF1C")]
			set
			{
			}
		}

		[Token(Token = "0x170001FA")]
		public RadialSliderTextValueChangedEvent onTextValueChanged
		{
			[Token(Token = "0x600140B")]
			[Address(RVA = "0xFAFF24", Offset = "0xFAFF24", VA = "0xFAFF24")]
			get
			{
				return null;
			}
			[Token(Token = "0x600140C")]
			[Address(RVA = "0xFAFF2C", Offset = "0xFAFF2C", VA = "0xFAFF2C")]
			set
			{
			}
		}

		[Token(Token = "0x600140D")]
		[Address(RVA = "0xFAFF34", Offset = "0xFAFF34", VA = "0xFAFF34")]
		private void Awake()
		{
		}

		[Token(Token = "0x600140E")]
		[Address(RVA = "0xFAFFD4", Offset = "0xFAFFD4", VA = "0xFAFFD4")]
		private void Update()
		{
		}

		[Token(Token = "0x600140F")]
		[Address(RVA = "0xFAFD4C", Offset = "0xFAFD4C", VA = "0xFAFD4C")]
		private void StartLerp(float targetAngle)
		{
		}

		[Token(Token = "0x6001410")]
		[Address(RVA = "0xFB0150", Offset = "0xFB0150", VA = "0xFB0150")]
		private float GetAngleFromMousePoint()
		{
			return default(float);
		}

		[Token(Token = "0x6001411")]
		[Address(RVA = "0xFAFD90", Offset = "0xFAFD90", VA = "0xFAFD90")]
		private void UpdateRadialImage(float targetAngle)
		{
		}

		[Token(Token = "0x6001412")]
		[Address(RVA = "0xFB024C", Offset = "0xFB024C", VA = "0xFB024C")]
		private void NotifyValueChanged()
		{
		}

		[Token(Token = "0x6001413")]
		[Address(RVA = "0xFB0324", Offset = "0xFB0324", VA = "0xFB0324", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001414")]
		[Address(RVA = "0xFB035C", Offset = "0xFB035C", VA = "0xFB035C", Slot = "5")]
		public void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001415")]
		[Address(RVA = "0xFB03A0", Offset = "0xFB03A0", VA = "0xFB03A0", Slot = "6")]
		public void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001416")]
		[Address(RVA = "0xFB03F8", Offset = "0xFB03F8", VA = "0xFB03F8", Slot = "7")]
		public void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001417")]
		[Address(RVA = "0xFB0414", Offset = "0xFB0414", VA = "0xFB0414")]
		public RadialSlider()
		{
		}
	}
	[Token(Token = "0x20003C1")]
	[AddComponentMenu("UI/Extensions/Range Slider", 34)]
	[ExecuteInEditMode]
	[RequireComponent(typeof(RectTransform))]
	public class RangeSlider : Selectable, IDragHandler, IEventSystemHandler, IInitializePotentialDragHandler, ICanvasElement
	{
		[Serializable]
		[Token(Token = "0x20003C2")]
		public class RangeSliderEvent : UnityEvent<float, float>
		{
			[Token(Token = "0x600144D")]
			[Address(RVA = "0xFB1598", Offset = "0xFB1598", VA = "0xFB1598")]
			public RangeSliderEvent()
			{
			}
		}

		[Token(Token = "0x20003C3")]
		private enum InteractionState
		{
			[Token(Token = "0x40017A8")]
			Low,
			[Token(Token = "0x40017A9")]
			High,
			[Token(Token = "0x40017AA")]
			Bar,
			[Token(Token = "0x40017AB")]
			None
		}

		[Token(Token = "0x4001792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private RectTransform m_FillRect;

		[Token(Token = "0x4001793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		private RectTransform m_LowHandleRect;

		[Token(Token = "0x4001794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		private RectTransform m_HighHandleRect;

		[Token(Token = "0x4001795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Space]
		[SerializeField]
		private float m_MinValue;

		[Token(Token = "0x4001796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		[SerializeField]
		private float m_MaxValue;

		[Token(Token = "0x4001797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		private bool m_WholeNumbers;

		[Token(Token = "0x4001798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[SerializeField]
		private float m_LowValue;

		[Token(Token = "0x4001799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		private float m_HighValue;

		[Token(Token = "0x400179A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		[Space]
		private RangeSliderEvent m_OnValueChanged;

		[Token(Token = "0x400179B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private InteractionState interactionState;

		[Token(Token = "0x400179C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Image m_FillImage;

		[Token(Token = "0x400179D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Transform m_FillTransform;

		[Token(Token = "0x400179E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private RectTransform m_FillContainerRect;

		[Token(Token = "0x400179F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private Transform m_HighHandleTransform;

		[Token(Token = "0x40017A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private RectTransform m_HighHandleContainerRect;

		[Token(Token = "0x40017A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private Transform m_LowHandleTransform;

		[Token(Token = "0x40017A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private RectTransform m_LowHandleContainerRect;

		[Token(Token = "0x40017A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private Vector2 m_LowOffset;

		[Token(Token = "0x40017A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private Vector2 m_HighOffset;

		[Token(Token = "0x40017A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private DrivenRectTransformTracker m_Tracker;

		[Token(Token = "0x40017A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x181")]
		private bool m_DelayedUpdateVisuals;

		[Token(Token = "0x170001FB")]
		public RectTransform FillRect
		{
			[Token(Token = "0x600141A")]
			[Address(RVA = "0xFB0560", Offset = "0xFB0560", VA = "0xFB0560")]
			get
			{
				return null;
			}
			[Token(Token = "0x600141B")]
			[Address(RVA = "0xFB0568", Offset = "0xFB0568", VA = "0xFB0568")]
			set
			{
			}
		}

		[Token(Token = "0x170001FC")]
		public RectTransform LowHandleRect
		{
			[Token(Token = "0x600141C")]
			[Address(RVA = "0xFB0D38", Offset = "0xFB0D38", VA = "0xFB0D38")]
			get
			{
				return null;
			}
			[Token(Token = "0x600141D")]
			[Address(RVA = "0xFB0D40", Offset = "0xFB0D40", VA = "0xFB0D40")]
			set
			{
			}
		}

		[Token(Token = "0x170001FD")]
		public RectTransform HighHandleRect
		{
			[Token(Token = "0x600141E")]
			[Address(RVA = "0xFB0DBC", Offset = "0xFB0DBC", VA = "0xFB0DBC")]
			get
			{
				return null;
			}
			[Token(Token = "0x600141F")]
			[Address(RVA = "0xFB0DC4", Offset = "0xFB0DC4", VA = "0xFB0DC4")]
			set
			{
			}
		}

		[Token(Token = "0x170001FE")]
		public float MinValue
		{
			[Token(Token = "0x6001420")]
			[Address(RVA = "0xFB0E40", Offset = "0xFB0E40", VA = "0xFB0E40")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001421")]
			[Address(RVA = "0xFB0E48", Offset = "0xFB0E48", VA = "0xFB0E48")]
			set
			{
			}
		}

		[Token(Token = "0x170001FF")]
		public float MaxValue
		{
			[Token(Token = "0x6001422")]
			[Address(RVA = "0xFB0F1C", Offset = "0xFB0F1C", VA = "0xFB0F1C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001423")]
			[Address(RVA = "0xFB0F24", Offset = "0xFB0F24", VA = "0xFB0F24")]
			set
			{
			}
		}

		[Token(Token = "0x17000200")]
		public bool WholeNumbers
		{
			[Token(Token = "0x6001424")]
			[Address(RVA = "0xFB0FD0", Offset = "0xFB0FD0", VA = "0xFB0FD0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001425")]
			[Address(RVA = "0xFB0FD8", Offset = "0xFB0FD8", VA = "0xFB0FD8")]
			set
			{
			}
		}

		[Token(Token = "0x17000201")]
		public virtual float LowValue
		{
			[Token(Token = "0x6001426")]
			[Address(RVA = "0xFB1084", Offset = "0xFB1084", VA = "0xFB1084", Slot = "46")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001427")]
			[Address(RVA = "0xFB1124", Offset = "0xFB1124", VA = "0xFB1124", Slot = "47")]
			set
			{
			}
		}

		[Token(Token = "0x17000202")]
		public float NormalizedLowValue
		{
			[Token(Token = "0x6001428")]
			[Address(RVA = "0xFB1138", Offset = "0xFB1138", VA = "0xFB1138")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001429")]
			[Address(RVA = "0xFB121C", Offset = "0xFB121C", VA = "0xFB121C")]
			set
			{
			}
		}

		[Token(Token = "0x17000203")]
		public virtual float HighValue
		{
			[Token(Token = "0x600142A")]
			[Address(RVA = "0xFB1254", Offset = "0xFB1254", VA = "0xFB1254", Slot = "48")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600142B")]
			[Address(RVA = "0xFB12F4", Offset = "0xFB12F4", VA = "0xFB12F4", Slot = "49")]
			set
			{
			}
		}

		[Token(Token = "0x17000204")]
		public float NormalizedHighValue
		{
			[Token(Token = "0x600142C")]
			[Address(RVA = "0xFB1308", Offset = "0xFB1308", VA = "0xFB1308")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600142D")]
			[Address(RVA = "0xFB13EC", Offset = "0xFB13EC", VA = "0xFB13EC")]
			set
			{
			}
		}

		[Token(Token = "0x17000205")]
		public RangeSliderEvent OnValueChanged
		{
			[Token(Token = "0x600142F")]
			[Address(RVA = "0xFB146C", Offset = "0xFB146C", VA = "0xFB146C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001430")]
			[Address(RVA = "0xFB1474", Offset = "0xFB1474", VA = "0xFB1474")]
			set
			{
			}
		}

		[Token(Token = "0x17000206")]
		private float StepSize
		{
			[Token(Token = "0x6001431")]
			[Address(RVA = "0xFB1484", Offset = "0xFB1484", VA = "0xFB1484")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600142E")]
		[Address(RVA = "0xFB1424", Offset = "0xFB1424", VA = "0xFB1424", Slot = "50")]
		public virtual void SetValueWithoutNotify(float low, float high)
		{
		}

		[Token(Token = "0x6001432")]
		[Address(RVA = "0xFB14B0", Offset = "0xFB14B0", VA = "0xFB14B0")]
		protected RangeSlider()
		{
		}

		[Token(Token = "0x6001433")]
		[Address(RVA = "0xFB15E0", Offset = "0xFB15E0", VA = "0xFB15E0", Slot = "51")]
		public virtual void Rebuild(CanvasUpdate executing)
		{
		}

		[Token(Token = "0x6001434")]
		[Address(RVA = "0xFB15E4", Offset = "0xFB15E4", VA = "0xFB15E4", Slot = "52")]
		public virtual void LayoutComplete()
		{
		}

		[Token(Token = "0x6001435")]
		[Address(RVA = "0xFB15E8", Offset = "0xFB15E8", VA = "0xFB15E8", Slot = "53")]
		public virtual void GraphicUpdateComplete()
		{
		}

		[Token(Token = "0x6001436")]
		public static bool SetClass<T>(ref T currentValue, T newValue) where T : class
		{
			return default(bool);
		}

		[Token(Token = "0x6001437")]
		public static bool SetStruct<T>(ref T currentValue, T newValue) where T : struct
		{
			return default(bool);
		}

		[Token(Token = "0x6001438")]
		[Address(RVA = "0xFB15EC", Offset = "0xFB15EC", VA = "0xFB15EC", Slot = "5")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001439")]
		[Address(RVA = "0xFB1668", Offset = "0xFB1668", VA = "0xFB1668", Slot = "7")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x600143A")]
		[Address(RVA = "0xFB168C", Offset = "0xFB168C", VA = "0xFB168C", Slot = "54")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x600143B")]
		[Address(RVA = "0xFB16A0", Offset = "0xFB16A0", VA = "0xFB16A0", Slot = "13")]
		protected override void OnDidApplyAnimationProperties()
		{
		}

		[Token(Token = "0x600143C")]
		[Address(RVA = "0xFB05E4", Offset = "0xFB05E4", VA = "0xFB05E4")]
		private void UpdateCachedReferences()
		{
		}

		[Token(Token = "0x600143D")]
		[Address(RVA = "0xFB0EF4", Offset = "0xFB0EF4", VA = "0xFB0EF4")]
		private void SetLow(float input)
		{
		}

		[Token(Token = "0x600143E")]
		[Address(RVA = "0xFB16A8", Offset = "0xFB16A8", VA = "0xFB16A8", Slot = "55")]
		protected virtual void SetLow(float input, bool sendCallback)
		{
		}

		[Token(Token = "0x600143F")]
		[Address(RVA = "0xFB0F08", Offset = "0xFB0F08", VA = "0xFB0F08")]
		private void SetHigh(float input)
		{
		}

		[Token(Token = "0x6001440")]
		[Address(RVA = "0xFB1828", Offset = "0xFB1828", VA = "0xFB1828", Slot = "56")]
		protected virtual void SetHigh(float input, bool sendCallback)
		{
		}

		[Token(Token = "0x6001441")]
		[Address(RVA = "0xFB1998", Offset = "0xFB1998", VA = "0xFB1998", Slot = "10")]
		protected override void OnRectTransformDimensionsChange()
		{
		}

		[Token(Token = "0x6001442")]
		[Address(RVA = "0xFB0A40", Offset = "0xFB0A40", VA = "0xFB0A40")]
		private void UpdateVisuals()
		{
		}

		[Token(Token = "0x6001443")]
		[Address(RVA = "0xFB19D0", Offset = "0xFB19D0", VA = "0xFB19D0")]
		private void UpdateDrag(PointerEventData eventData, Camera cam)
		{
		}

		[Token(Token = "0x6001444")]
		[Address(RVA = "0xFB1A88", Offset = "0xFB1A88", VA = "0xFB1A88")]
		private float CalculateDrag(PointerEventData eventData, Camera cam, RectTransform containerRect, Vector2 offset)
		{
			return default(float);
		}

		[Token(Token = "0x6001445")]
		[Address(RVA = "0xFB1C18", Offset = "0xFB1C18", VA = "0xFB1C18")]
		private void CalculateBarDrag(PointerEventData eventData, Camera cam)
		{
		}

		[Token(Token = "0x6001446")]
		[Address(RVA = "0xFB1EA0", Offset = "0xFB1EA0", VA = "0xFB1EA0")]
		private bool MayDrag(PointerEventData eventData)
		{
			return default(bool);
		}

		[Token(Token = "0x6001447")]
		[Address(RVA = "0xFB1F04", Offset = "0xFB1F04", VA = "0xFB1F04", Slot = "32")]
		public override void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001448")]
		[Address(RVA = "0xFB2210", Offset = "0xFB2210", VA = "0xFB2210", Slot = "57")]
		public virtual void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001449")]
		[Address(RVA = "0xFB2260", Offset = "0xFB2260", VA = "0xFB2260", Slot = "33")]
		public override void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600144A")]
		[Address(RVA = "0xFB2280", Offset = "0xFB2280", VA = "0xFB2280", Slot = "31")]
		public override void OnMove(AxisEventData eventData)
		{
		}

		[Token(Token = "0x600144B")]
		[Address(RVA = "0xFB2284", Offset = "0xFB2284", VA = "0xFB2284", Slot = "58")]
		public virtual void OnInitializePotentialDrag(PointerEventData eventData)
		{
		}

		[SpecialName]
		[Token(Token = "0x600144C")]
		[Address(RVA = "0xFB229C", Offset = "0xFB229C", VA = "0xFB229C", Slot = "42")]
		private Transform UnityEngine.UI.ICanvasElement.get_transform()
		{
			return null;
		}
	}
	[Token(Token = "0x20003C4")]
	[RequireComponent(typeof(RectTransform))]
	[DisallowMultipleComponent]
	[AddComponentMenu("UI/Extensions/Re-orderable list")]
	public class ReorderableList : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20003C5")]
		public struct ReorderableListEventStruct
		{
			[Token(Token = "0x40017BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public GameObject DroppedObject;

			[Token(Token = "0x40017C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int FromIndex;

			[Token(Token = "0x40017C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ReorderableList FromList;

			[Token(Token = "0x40017C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool IsAClone;

			[Token(Token = "0x40017C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameObject SourceObject;

			[Token(Token = "0x40017C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int ToIndex;

			[Token(Token = "0x40017C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public ReorderableList ToList;

			[Token(Token = "0x6001454")]
			[Address(RVA = "0xFB2B20", Offset = "0xFB2B20", VA = "0xFB2B20")]
			public void Cancel()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003C6")]
		public class ReorderableListHandler : UnityEvent<ReorderableListEventStruct>
		{
			[Token(Token = "0x6001455")]
			[Address(RVA = "0xFB2AD8", Offset = "0xFB2AD8", VA = "0xFB2AD8")]
			public ReorderableListHandler()
			{
			}
		}

		[Token(Token = "0x40017AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Child container with re-orderable items in a layout group")]
		public LayoutGroup ContentLayout;

		[Token(Token = "0x40017AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Parent area to draw the dragged element on top of containers. Defaults to the root Canvas")]
		public RectTransform DraggableArea;

		[Token(Token = "0x40017AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Can items be dragged from the container?")]
		public bool IsDraggable;

		[Token(Token = "0x40017AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[Tooltip("Should the draggable components be removed or cloned?")]
		public bool CloneDraggedObject;

		[Token(Token = "0x40017B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		[Tooltip("Can new draggable items be dropped in to the container?")]
		public bool IsDropable;

		[Token(Token = "0x40017B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		[Tooltip("Should dropped items displace a current item if the list is full?\n Depending on the dropped items origin list, the displaced item may be added, dropped in space or deleted.")]
		public bool IsDisplacable;

		[Token(Token = "0x40017B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Should items being dragged over this list have their sizes equalized?")]
		public bool EqualizeSizesOnDrag;

		[Token(Token = "0x40017B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int maxItems;

		[Token(Token = "0x40017B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("UI Re-orderable Events")]
		public ReorderableListHandler OnElementDropped;

		[Token(Token = "0x40017B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ReorderableListHandler OnElementGrabbed;

		[Token(Token = "0x40017B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ReorderableListHandler OnElementRemoved;

		[Token(Token = "0x40017B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ReorderableListHandler OnElementAdded;

		[Token(Token = "0x40017B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ReorderableListHandler OnElementDisplacedFrom;

		[Token(Token = "0x40017B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public ReorderableListHandler OnElementDisplacedTo;

		[Token(Token = "0x40017BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public ReorderableListHandler OnElementDisplacedFromReturned;

		[Token(Token = "0x40017BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public ReorderableListHandler OnElementDisplacedToReturned;

		[Token(Token = "0x40017BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public ReorderableListHandler OnElementDroppedWithMaxItems;

		[Token(Token = "0x40017BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private RectTransform _content;

		[Token(Token = "0x40017BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private ReorderableListContent _listContent;

		[Token(Token = "0x17000207")]
		public RectTransform Content
		{
			[Token(Token = "0x600144E")]
			[Address(RVA = "0xFB22A4", Offset = "0xFB22A4", VA = "0xFB22A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600144F")]
		[Address(RVA = "0xFB2354", Offset = "0xFB2354", VA = "0xFB2354")]
		private Canvas GetCanvas()
		{
			return null;
		}

		[Token(Token = "0x6001450")]
		[Address(RVA = "0xFB245C", Offset = "0xFB245C", VA = "0xFB245C")]
		public void Refresh()
		{
		}

		[Token(Token = "0x6001451")]
		[Address(RVA = "0xFB2634", Offset = "0xFB2634", VA = "0xFB2634")]
		private void Start()
		{
		}

		[Token(Token = "0x6001452")]
		[Address(RVA = "0xFB286C", Offset = "0xFB286C", VA = "0xFB286C")]
		public void TestReOrderableListTarget(ReorderableListEventStruct item)
		{
		}

		[Token(Token = "0x6001453")]
		[Address(RVA = "0xFB2934", Offset = "0xFB2934", VA = "0xFB2934")]
		public ReorderableList()
		{
		}
	}
	[Token(Token = "0x20003C7")]
	[DisallowMultipleComponent]
	public class ReorderableListContent : MonoBehaviour
	{
		[Token(Token = "0x20003C8")]
		[CompilerGenerated]
		private sealed class <RefreshChildren>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40017CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40017CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40017CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ReorderableListContent <>4__this;

			[Token(Token = "0x17000208")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600145E")]
				[Address(RVA = "0xFB3154", Offset = "0xFB3154", VA = "0xFB3154", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000209")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001460")]
				[Address(RVA = "0xFB319C", Offset = "0xFB319C", VA = "0xFB319C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600145B")]
			[Address(RVA = "0xFB2CAC", Offset = "0xFB2CAC", VA = "0xFB2CAC")]
			[DebuggerHidden]
			public <RefreshChildren>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x600145C")]
			[Address(RVA = "0xFB2CDC", Offset = "0xFB2CDC", VA = "0xFB2CDC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600145D")]
			[Address(RVA = "0xFB2CE0", Offset = "0xFB2CE0", VA = "0xFB2CE0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600145F")]
			[Address(RVA = "0xFB315C", Offset = "0xFB315C", VA = "0xFB315C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40017C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<Transform> _cachedChildren;

		[Token(Token = "0x40017C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<ReorderableListElement> _cachedListElement;

		[Token(Token = "0x40017C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ReorderableListElement _ele;

		[Token(Token = "0x40017C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ReorderableList _extList;

		[Token(Token = "0x40017CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RectTransform _rect;

		[Token(Token = "0x40017CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool _started;

		[Token(Token = "0x6001456")]
		[Address(RVA = "0xFB2B7C", Offset = "0xFB2B7C", VA = "0xFB2B7C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001457")]
		[Address(RVA = "0xFB2C74", Offset = "0xFB2C74", VA = "0xFB2C74")]
		public void OnTransformChildrenChanged()
		{
		}

		[Token(Token = "0x6001458")]
		[Address(RVA = "0xFB24D8", Offset = "0xFB24D8", VA = "0xFB24D8")]
		public void Init(ReorderableList extList)
		{
		}

		[Token(Token = "0x6001459")]
		[Address(RVA = "0xFB2C00", Offset = "0xFB2C00", VA = "0xFB2C00")]
		[IteratorStateMachine(typeof(<RefreshChildren>d__9))]
		private IEnumerator RefreshChildren()
		{
			return null;
		}

		[Token(Token = "0x600145A")]
		[Address(RVA = "0xFB2CD4", Offset = "0xFB2CD4", VA = "0xFB2CD4")]
		public ReorderableListContent()
		{
		}
	}
	[Token(Token = "0x20003C9")]
	public class ReorderableListDebug : MonoBehaviour
	{
		[Token(Token = "0x40017CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text DebugLabel;

		[Token(Token = "0x6001461")]
		[Address(RVA = "0xFB31A4", Offset = "0xFB31A4", VA = "0xFB31A4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001462")]
		[Address(RVA = "0xFB32E0", Offset = "0xFB32E0", VA = "0xFB32E0")]
		private void ElementDropped(ReorderableList.ReorderableListEventStruct droppedStruct)
		{
		}

		[Token(Token = "0x6001463")]
		[Address(RVA = "0xFB3684", Offset = "0xFB3684", VA = "0xFB3684")]
		public ReorderableListDebug()
		{
		}
	}
	[Token(Token = "0x20003CA")]
	[RequireComponent(typeof(RectTransform), typeof(LayoutElement))]
	public class ReorderableListElement : MonoBehaviour, IDragHandler, IEventSystemHandler, IBeginDragHandler, IEndDragHandler
	{
		[Token(Token = "0x40017D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Can this element be dragged?")]
		[SerializeField]
		private bool IsGrabbable;

		[Token(Token = "0x40017D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[SerializeField]
		[Tooltip("Can this element be transfered to another list")]
		private bool _isTransferable;

		[Token(Token = "0x40017D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		[SerializeField]
		[Tooltip("Can this element be dropped in space?")]
		private bool isDroppableInSpace;

		[Token(Token = "0x40017D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly List<RaycastResult> _raycastResults;

		[Token(Token = "0x40017D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ReorderableList _currentReorderableListRaycasted;

		[Token(Token = "0x40017D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int _fromIndex;

		[Token(Token = "0x40017D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RectTransform _draggingObject;

		[Token(Token = "0x40017D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private LayoutElement _draggingObjectLE;

		[Token(Token = "0x40017D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector2 _draggingObjectOriginalSize;

		[Token(Token = "0x40017D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private RectTransform _fakeElement;

		[Token(Token = "0x40017DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private LayoutElement _fakeElementLE;

		[Token(Token = "0x40017DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int _displacedFromIndex;

		[Token(Token = "0x40017DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private RectTransform _displacedObject;

		[Token(Token = "0x40017DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private LayoutElement _displacedObjectLE;

		[Token(Token = "0x40017DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector2 _displacedObjectOriginalSize;

		[Token(Token = "0x40017DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private ReorderableList _displacedObjectOriginList;

		[Token(Token = "0x40017E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool _isDragging;

		[Token(Token = "0x40017E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private RectTransform _rect;

		[Token(Token = "0x40017E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private ReorderableList _reorderableList;

		[Token(Token = "0x40017E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private CanvasGroup _canvasGroup;

		[Token(Token = "0x40017E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		internal bool isValid;

		[Token(Token = "0x1700020A")]
		public bool IsTransferable
		{
			[Token(Token = "0x6001464")]
			[Address(RVA = "0xFB368C", Offset = "0xFB368C", VA = "0xFB368C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001465")]
			[Address(RVA = "0xFB3694", Offset = "0xFB3694", VA = "0xFB3694")]
			set
			{
			}
		}

		[Token(Token = "0x6001466")]
		[Address(RVA = "0xFB3728", Offset = "0xFB3728", VA = "0xFB3728", Slot = "5")]
		public void OnBeginDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001467")]
		[Address(RVA = "0xFB41B0", Offset = "0xFB41B0", VA = "0xFB41B0", Slot = "4")]
		public void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001468")]
		[Address(RVA = "0xFB4CFC", Offset = "0xFB4CFC", VA = "0xFB4CFC")]
		private void displaceElement(int targetIndex, Transform displaced)
		{
		}

		[Token(Token = "0x6001469")]
		[Address(RVA = "0xFB494C", Offset = "0xFB494C", VA = "0xFB494C")]
		private void revertDisplacedElement()
		{
		}

		[Token(Token = "0x600146A")]
		[Address(RVA = "0xFB5244", Offset = "0xFB5244", VA = "0xFB5244")]
		public void finishDisplacingElement()
		{
		}

		[Token(Token = "0x600146B")]
		[Address(RVA = "0xFB5338", Offset = "0xFB5338", VA = "0xFB5338", Slot = "6")]
		public void OnEndDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600146C")]
		[Address(RVA = "0xFB3E4C", Offset = "0xFB3E4C", VA = "0xFB3E4C")]
		private void CancelDrag()
		{
		}

		[Token(Token = "0x600146D")]
		[Address(RVA = "0xFB3C48", Offset = "0xFB3C48", VA = "0xFB3C48")]
		private void RefreshSizes()
		{
		}

		[Token(Token = "0x600146E")]
		[Address(RVA = "0xFB30A8", Offset = "0xFB30A8", VA = "0xFB30A8")]
		public void Init(ReorderableList reorderableList)
		{
		}

		[Token(Token = "0x600146F")]
		[Address(RVA = "0xFB5A0C", Offset = "0xFB5A0C", VA = "0xFB5A0C")]
		public ReorderableListElement()
		{
		}
	}
	[Token(Token = "0x20003CB")]
	[AddComponentMenu("UI/Extensions/RescalePanels/RescaleDragPanel")]
	public class RescaleDragPanel : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IDragHandler
	{
		[Token(Token = "0x40017E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector2 pointerOffset;

		[Token(Token = "0x40017E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RectTransform canvasRectTransform;

		[Token(Token = "0x40017E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RectTransform panelRectTransform;

		[Token(Token = "0x40017E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform goTransform;

		[Token(Token = "0x6001470")]
		[Address(RVA = "0xFB5A9C", Offset = "0xFB5A9C", VA = "0xFB5A9C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001471")]
		[Address(RVA = "0xFB5C24", Offset = "0xFB5C24", VA = "0xFB5C24", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x6001472")]
		[Address(RVA = "0xFB5CD4", Offset = "0xFB5CD4", VA = "0xFB5CD4", Slot = "5")]
		public void OnDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6001473")]
		[Address(RVA = "0xFB5E3C", Offset = "0xFB5E3C", VA = "0xFB5E3C")]
		private Vector2 ClampToWindow(PointerEventData data)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001474")]
		[Address(RVA = "0xFB5EFC", Offset = "0xFB5EFC", VA = "0xFB5EFC")]
		public RescaleDragPanel()
		{
		}
	}
	[Token(Token = "0x20003CC")]
	[AddComponentMenu("UI/Extensions/RescalePanels/RescalePanel")]
	public class RescalePanel : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IDragHandler
	{
		[Token(Token = "0x40017E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector2 minSize;

		[Token(Token = "0x40017EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2 maxSize;

		[Token(Token = "0x40017EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RectTransform rectTransform;

		[Token(Token = "0x40017EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform goTransform;

		[Token(Token = "0x40017ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector2 currentPointerPosition;

		[Token(Token = "0x40017EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector2 previousPointerPosition;

		[Token(Token = "0x40017EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RectTransform thisRectTransform;

		[Token(Token = "0x40017F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector2 sizeDelta;

		[Token(Token = "0x6001475")]
		[Address(RVA = "0xFB5F04", Offset = "0xFB5F04", VA = "0xFB5F04")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001476")]
		[Address(RVA = "0xFB5FD8", Offset = "0xFB5FD8", VA = "0xFB5FD8", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x6001477")]
		[Address(RVA = "0xFB6088", Offset = "0xFB6088", VA = "0xFB6088", Slot = "5")]
		public void OnDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6001478")]
		[Address(RVA = "0xFB6228", Offset = "0xFB6228", VA = "0xFB6228")]
		public RescalePanel()
		{
		}
	}
	[Token(Token = "0x20003CD")]
	[AddComponentMenu("UI/Extensions/RescalePanels/ResizePanel")]
	public class ResizePanel : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IDragHandler
	{
		[Token(Token = "0x40017F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector2 minSize;

		[Token(Token = "0x40017F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2 maxSize;

		[Token(Token = "0x40017F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RectTransform rectTransform;

		[Token(Token = "0x40017F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector2 currentPointerPosition;

		[Token(Token = "0x40017F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector2 previousPointerPosition;

		[Token(Token = "0x40017F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float ratio;

		[Token(Token = "0x6001479")]
		[Address(RVA = "0xFB6230", Offset = "0xFB6230", VA = "0xFB6230")]
		private void Awake()
		{
		}

		[Token(Token = "0x600147A")]
		[Address(RVA = "0xFB6338", Offset = "0xFB6338", VA = "0xFB6338", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x600147B")]
		[Address(RVA = "0xFB63E8", Offset = "0xFB63E8", VA = "0xFB63E8", Slot = "5")]
		public void OnDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x600147C")]
		[Address(RVA = "0xFB6544", Offset = "0xFB6544", VA = "0xFB6544")]
		public ResizePanel()
		{
		}
	}
	[Token(Token = "0x20003CE")]
	[AddComponentMenu("UI/Extensions/Segmented Control/Segment")]
	[RequireComponent(typeof(Selectable))]
	public class Segment : UIBehaviour, IPointerClickHandler, IEventSystemHandler, ISubmitHandler, IPointerEnterHandler, IPointerExitHandler, IPointerDownHandler, IPointerUpHandler, ISelectHandler, IDeselectHandler
	{
		[Token(Token = "0x20003CF")]
		[CompilerGenerated]
		private sealed class <DelayedInit>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40017FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40017FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40017FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Segment <>4__this;

			[Token(Token = "0x1700020F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600149A")]
				[Address(RVA = "0xFB7560", Offset = "0xFB7560", VA = "0xFB7560", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000210")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600149C")]
				[Address(RVA = "0xFB75A8", Offset = "0xFB75A8", VA = "0xFB75A8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001497")]
			[Address(RVA = "0xFB6990", Offset = "0xFB6990", VA = "0xFB6990")]
			[DebuggerHidden]
			public <DelayedInit>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6001498")]
			[Address(RVA = "0xFB7490", Offset = "0xFB7490", VA = "0xFB7490", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001499")]
			[Address(RVA = "0xFB7494", Offset = "0xFB7494", VA = "0xFB7494", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600149B")]
			[Address(RVA = "0xFB7568", Offset = "0xFB7568", VA = "0xFB7568", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40017F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int index;

		[Token(Token = "0x40017F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal SegmentedControl segmentedControl;

		[Token(Token = "0x40017F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal Sprite cutSprite;

		[Token(Token = "0x1700020B")]
		internal bool leftmost
		{
			[Token(Token = "0x600147D")]
			[Address(RVA = "0xFB654C", Offset = "0xFB654C", VA = "0xFB654C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700020C")]
		internal bool rightmost
		{
			[Token(Token = "0x600147E")]
			[Address(RVA = "0xFB655C", Offset = "0xFB655C", VA = "0xFB655C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700020D")]
		public bool selected
		{
			[Token(Token = "0x600147F")]
			[Address(RVA = "0xFB65DC", Offset = "0xFB65DC", VA = "0xFB65DC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001480")]
			[Address(RVA = "0xFB66A0", Offset = "0xFB66A0", VA = "0xFB66A0")]
			set
			{
			}
		}

		[Token(Token = "0x1700020E")]
		internal Selectable button
		{
			[Token(Token = "0x6001481")]
			[Address(RVA = "0xFB6658", Offset = "0xFB6658", VA = "0xFB6658")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001482")]
		[Address(RVA = "0xFB68F4", Offset = "0xFB68F4", VA = "0xFB68F4")]
		protected Segment()
		{
		}

		[Token(Token = "0x6001483")]
		[Address(RVA = "0xFB68FC", Offset = "0xFB68FC", VA = "0xFB68FC", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001484")]
		[Address(RVA = "0xFB691C", Offset = "0xFB691C", VA = "0xFB691C")]
		[IteratorStateMachine(typeof(<DelayedInit>d__14))]
		private IEnumerator DelayedInit()
		{
			return null;
		}

		[Token(Token = "0x6001485")]
		[Address(RVA = "0xFB69B8", Offset = "0xFB69B8", VA = "0xFB69B8", Slot = "25")]
		public virtual void OnPointerClick(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001486")]
		[Address(RVA = "0xFB69E0", Offset = "0xFB69E0", VA = "0xFB69E0", Slot = "26")]
		public virtual void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001487")]
		[Address(RVA = "0xFB6A78", Offset = "0xFB6A78", VA = "0xFB6A78", Slot = "27")]
		public virtual void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001488")]
		[Address(RVA = "0xFB6A7C", Offset = "0xFB6A7C", VA = "0xFB6A7C", Slot = "28")]
		public virtual void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001489")]
		[Address(RVA = "0xFB6A80", Offset = "0xFB6A80", VA = "0xFB6A80", Slot = "29")]
		public virtual void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600148A")]
		[Address(RVA = "0xFB6A84", Offset = "0xFB6A84", VA = "0xFB6A84", Slot = "30")]
		public virtual void OnSelect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x600148B")]
		[Address(RVA = "0xFB6A88", Offset = "0xFB6A88", VA = "0xFB6A88", Slot = "31")]
		public virtual void OnDeselect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x600148C")]
		[Address(RVA = "0xFB6A8C", Offset = "0xFB6A8C", VA = "0xFB6A8C", Slot = "5")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x600148D")]
		[Address(RVA = "0xFB6B0C", Offset = "0xFB6B0C", VA = "0xFB6B0C", Slot = "32")]
		public virtual void OnSubmit(BaseEventData eventData)
		{
		}

		[Token(Token = "0x600148E")]
		[Address(RVA = "0xFB66A8", Offset = "0xFB66A8", VA = "0xFB66A8")]
		private void SetSelected(bool value)
		{
		}

		[Token(Token = "0x600148F")]
		[Address(RVA = "0xFB6B14", Offset = "0xFB6B14", VA = "0xFB6B14")]
		private void Deselect()
		{
		}

		[Token(Token = "0x6001490")]
		[Address(RVA = "0xFB69E4", Offset = "0xFB69E4", VA = "0xFB69E4")]
		private void MaintainSelection()
		{
		}

		[Token(Token = "0x6001491")]
		[Address(RVA = "0xFB6B90", Offset = "0xFB6B90", VA = "0xFB6B90")]
		internal void TransitionButton()
		{
		}

		[Token(Token = "0x6001492")]
		[Address(RVA = "0xFB6B98", Offset = "0xFB6B98", VA = "0xFB6B98")]
		internal void TransitionButton(bool instant)
		{
		}

		[Token(Token = "0x6001493")]
		[Address(RVA = "0xFB6E84", Offset = "0xFB6E84", VA = "0xFB6E84")]
		private void StartColorTween(Color targetColor, bool instant)
		{
		}

		[Token(Token = "0x6001494")]
		[Address(RVA = "0xFB6F8C", Offset = "0xFB6F8C", VA = "0xFB6F8C")]
		private void ChangeTextColor(Color targetColor)
		{
		}

		[Token(Token = "0x6001495")]
		[Address(RVA = "0xFB71D0", Offset = "0xFB71D0", VA = "0xFB71D0")]
		private void DoSpriteSwap(Sprite newSprite)
		{
		}

		[Token(Token = "0x6001496")]
		[Address(RVA = "0xFB7284", Offset = "0xFB7284", VA = "0xFB7284")]
		private void TriggerAnimation(string triggername)
		{
		}
	}
	[Token(Token = "0x20003D0")]
	[AddComponentMenu("UI/Extensions/Segmented Control/Segmented Control")]
	[RequireComponent(typeof(RectTransform))]
	public class SegmentedControl : UIBehaviour
	{
		[Serializable]
		[Token(Token = "0x20003D1")]
		public class SegmentSelectedEvent : UnityEvent<int>
		{
			[Token(Token = "0x60014AF")]
			[Address(RVA = "0xFB80B0", Offset = "0xFB80B0", VA = "0xFB80B0")]
			public SegmentSelectedEvent()
			{
			}
		}

		[Token(Token = "0x20003D2")]
		[CompilerGenerated]
		private sealed class <DelayedInit>d__27 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001804")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001805")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001806")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SegmentedControl <>4__this;

			[Token(Token = "0x17000217")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014B3")]
				[Address(RVA = "0xFB8468", Offset = "0xFB8468", VA = "0xFB8468", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000218")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014B5")]
				[Address(RVA = "0xFB84B0", Offset = "0xFB84B0", VA = "0xFB84B0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014B0")]
			[Address(RVA = "0xFB81D0", Offset = "0xFB81D0", VA = "0xFB81D0")]
			[DebuggerHidden]
			public <DelayedInit>d__27(int <>1__state)
			{
			}

			[Token(Token = "0x60014B1")]
			[Address(RVA = "0xFB83E4", Offset = "0xFB83E4", VA = "0xFB83E4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014B2")]
			[Address(RVA = "0xFB83E8", Offset = "0xFB83E8", VA = "0xFB83E8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014B4")]
			[Address(RVA = "0xFB8470", Offset = "0xFB8470", VA = "0xFB8470", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40017FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Selectable[] m_segments;

		[Token(Token = "0x40017FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("A GameObject with an Image to use as a separator between segments. Size of the RectTransform will determine the size of the separator used.\nNote, make sure to disable the separator GO so that it does not affect the scene")]
		[SerializeField]
		private Graphic m_separator;

		[Token(Token = "0x40017FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float m_separatorWidth;

		[Token(Token = "0x4001800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("When True, it allows each button to be toggled on/off")]
		[SerializeField]
		private bool m_allowSwitchingOff;

		[Token(Token = "0x4001801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The selected default for the control (zero indexed array)")]
		[SerializeField]
		private int m_selectedSegmentIndex;

		[Token(Token = "0x4001802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Event to fire once the selection has been changed")]
		[SerializeField]
		private SegmentSelectedEvent m_onValueChanged;

		[Token(Token = "0x4001803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal Selectable selectedSegment;

		[Token(Token = "0x17000211")]
		protected float SeparatorWidth
		{
			[Token(Token = "0x600149D")]
			[Address(RVA = "0xFB75B0", Offset = "0xFB75B0", VA = "0xFB75B0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000212")]
		public Selectable[] segments
		{
			[Token(Token = "0x600149E")]
			[Address(RVA = "0xFB6594", Offset = "0xFB6594", VA = "0xFB6594")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000213")]
		public Graphic separator
		{
			[Token(Token = "0x600149F")]
			[Address(RVA = "0xFB783C", Offset = "0xFB783C", VA = "0xFB783C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60014A0")]
			[Address(RVA = "0xFB7844", Offset = "0xFB7844", VA = "0xFB7844")]
			set
			{
			}
		}

		[Token(Token = "0x17000214")]
		public bool allowSwitchingOff
		{
			[Token(Token = "0x60014A1")]
			[Address(RVA = "0xFB7DE8", Offset = "0xFB7DE8", VA = "0xFB7DE8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60014A2")]
			[Address(RVA = "0xFB7DF0", Offset = "0xFB7DF0", VA = "0xFB7DF0")]
			set
			{
			}
		}

		[Token(Token = "0x17000215")]
		public int selectedSegmentIndex
		{
			[Token(Token = "0x60014A3")]
			[Address(RVA = "0xFB7DFC", Offset = "0xFB7DFC", VA = "0xFB7DFC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60014A4")]
			[Address(RVA = "0xFB7E4C", Offset = "0xFB7E4C", VA = "0xFB7E4C")]
			set
			{
			}
		}

		[Token(Token = "0x17000216")]
		public SegmentSelectedEvent onValueChanged
		{
			[Token(Token = "0x60014A5")]
			[Address(RVA = "0xFB8028", Offset = "0xFB8028", VA = "0xFB8028")]
			get
			{
				return null;
			}
			[Token(Token = "0x60014A6")]
			[Address(RVA = "0xFB8030", Offset = "0xFB8030", VA = "0xFB8030")]
			set
			{
			}
		}

		[Token(Token = "0x60014A7")]
		[Address(RVA = "0xFB8038", Offset = "0xFB8038", VA = "0xFB8038")]
		protected SegmentedControl()
		{
		}

		[Token(Token = "0x60014A8")]
		[Address(RVA = "0xFB80F8", Offset = "0xFB80F8", VA = "0xFB80F8", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60014A9")]
		[Address(RVA = "0xFB81B0", Offset = "0xFB81B0", VA = "0xFB81B0", Slot = "5")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x60014AA")]
		[Address(RVA = "0xFB813C", Offset = "0xFB813C", VA = "0xFB813C")]
		[IteratorStateMachine(typeof(<DelayedInit>d__27))]
		private IEnumerator DelayedInit()
		{
			return null;
		}

		[Token(Token = "0x60014AB")]
		[Address(RVA = "0xFB76D8", Offset = "0xFB76D8", VA = "0xFB76D8")]
		private Selectable[] GetChildSegments()
		{
			return null;
		}

		[Token(Token = "0x60014AC")]
		[Address(RVA = "0xFB81F8", Offset = "0xFB81F8", VA = "0xFB81F8")]
		private void RecreateSprites()
		{
		}

		[Token(Token = "0x60014AD")]
		[Address(RVA = "0xFB707C", Offset = "0xFB707C", VA = "0xFB707C")]
		internal static Sprite CutSprite(Sprite sprite, bool leftmost, bool rightmost)
		{
			return null;
		}

		[Token(Token = "0x60014AE")]
		[Address(RVA = "0xFB7864", Offset = "0xFB7864", VA = "0xFB7864")]
		public void LayoutSegments()
		{
		}
	}
	[Token(Token = "0x20003D3")]
	public class ExampleSelectable : MonoBehaviour, IBoxSelectable
	{
		[Token(Token = "0x4001807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool _selected;

		[Token(Token = "0x4001808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool _preSelected;

		[Token(Token = "0x4001809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private SpriteRenderer spriteRenderer;

		[Token(Token = "0x400180A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Image image;

		[Token(Token = "0x400180B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Text text;

		[Token(Token = "0x17000219")]
		public bool selected
		{
			[Token(Token = "0x60014B6")]
			[Address(RVA = "0xFB84B8", Offset = "0xFB84B8", VA = "0xFB84B8", Slot = "4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60014B7")]
			[Address(RVA = "0xFB84C0", Offset = "0xFB84C0", VA = "0xFB84C0", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x1700021A")]
		public bool preSelected
		{
			[Token(Token = "0x60014B8")]
			[Address(RVA = "0xFB84CC", Offset = "0xFB84CC", VA = "0xFB84CC", Slot = "6")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60014B9")]
			[Address(RVA = "0xFB84D4", Offset = "0xFB84D4", VA = "0xFB84D4", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x60014BA")]
		[Address(RVA = "0xFB84E0", Offset = "0xFB84E0", VA = "0xFB84E0")]
		private void Start()
		{
		}

		[Token(Token = "0x60014BB")]
		[Address(RVA = "0xFB85C0", Offset = "0xFB85C0", VA = "0xFB85C0")]
		private void Update()
		{
		}

		[Token(Token = "0x60014BC")]
		[Address(RVA = "0xFB87D0", Offset = "0xFB87D0", VA = "0xFB87D0")]
		public ExampleSelectable()
		{
		}

		[SpecialName]
		[Token(Token = "0x60014BD")]
		[Address(RVA = "0xFB87D8", Offset = "0xFB87D8", VA = "0xFB87D8", Slot = "8")]
		private Transform UnityEngine.UI.Extensions.IBoxSelectable.get_transform()
		{
			return null;
		}
	}
	[Token(Token = "0x20003D4")]
	public interface IBoxSelectable
	{
		[Token(Token = "0x1700021B")]
		bool selected
		{
			[Token(Token = "0x60014BE")]
			get;
			[Token(Token = "0x60014BF")]
			set;
		}

		[Token(Token = "0x1700021C")]
		bool preSelected
		{
			[Token(Token = "0x60014C0")]
			get;
			[Token(Token = "0x60014C1")]
			set;
		}

		[Token(Token = "0x1700021D")]
		Transform transform
		{
			[Token(Token = "0x60014C2")]
			get;
		}
	}
	[Token(Token = "0x20003D5")]
	[RequireComponent(typeof(Canvas))]
	[AddComponentMenu("UI/Extensions/Selection Box")]
	public class SelectionBox : MonoBehaviour
	{
		[Token(Token = "0x20003D6")]
		public class SelectionEvent : UnityEvent<IBoxSelectable[]>
		{
			[Token(Token = "0x60014D4")]
			[Address(RVA = "0xFBA6D0", Offset = "0xFBA6D0", VA = "0xFBA6D0")]
			public SelectionEvent()
			{
			}
		}

		[Token(Token = "0x400180C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color color;

		[Token(Token = "0x400180D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Sprite art;

		[Token(Token = "0x400180E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector2 origin;

		[Token(Token = "0x400180F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public RectTransform selectionMask;

		[Token(Token = "0x4001810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RectTransform boxRect;

		[Token(Token = "0x4001811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private IBoxSelectable[] selectables;

		[Token(Token = "0x4001812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private MonoBehaviour[] selectableGroup;

		[Token(Token = "0x4001813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private IBoxSelectable clickedBeforeDrag;

		[Token(Token = "0x4001814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private IBoxSelectable clickedAfterDrag;

		[Token(Token = "0x4001815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public SelectionEvent onSelectionChange;

		[Token(Token = "0x60014C3")]
		[Address(RVA = "0xFB87E0", Offset = "0xFB87E0", VA = "0xFB87E0")]
		private void ValidateCanvas()
		{
		}

		[Token(Token = "0x60014C4")]
		[Address(RVA = "0xFB89FC", Offset = "0xFB89FC", VA = "0xFB89FC")]
		private void SetSelectableGroup(IEnumerable<MonoBehaviour> behaviourCollection)
		{
		}

		[Token(Token = "0x60014C5")]
		[Address(RVA = "0xFB8E24", Offset = "0xFB8E24", VA = "0xFB8E24")]
		private void CreateBoxRect()
		{
		}

		[Token(Token = "0x60014C6")]
		[Address(RVA = "0xFB8F50", Offset = "0xFB8F50", VA = "0xFB8F50")]
		private void ResetBoxRect()
		{
		}

		[Token(Token = "0x60014C7")]
		[Address(RVA = "0xFB9138", Offset = "0xFB9138", VA = "0xFB9138")]
		private void BeginSelection()
		{
		}

		[Token(Token = "0x60014C8")]
		[Address(RVA = "0xFB9434", Offset = "0xFB9434", VA = "0xFB9434")]
		private bool PointIsValidAgainstSelectionMask(Vector2 screenPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x60014C9")]
		[Address(RVA = "0xFB9508", Offset = "0xFB9508", VA = "0xFB9508")]
		private IBoxSelectable GetSelectableAtMousePosition()
		{
			return null;
		}

		[Token(Token = "0x60014CA")]
		[Address(RVA = "0xFB9C78", Offset = "0xFB9C78", VA = "0xFB9C78")]
		private void DragSelection()
		{
		}

		[Token(Token = "0x60014CB")]
		[Address(RVA = "0xFB9F10", Offset = "0xFB9F10", VA = "0xFB9F10")]
		private void ApplySingleClickDeselection()
		{
		}

		[Token(Token = "0x60014CC")]
		[Address(RVA = "0xFBA1B0", Offset = "0xFBA1B0", VA = "0xFBA1B0")]
		private void ApplyPreSelections()
		{
		}

		[Token(Token = "0x60014CD")]
		[Address(RVA = "0xFB9A14", Offset = "0xFB9A14", VA = "0xFB9A14")]
		private Vector2 GetScreenPointOfSelectable(IBoxSelectable selectable)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60014CE")]
		[Address(RVA = "0xFB9880", Offset = "0xFB9880", VA = "0xFB9880")]
		private Camera GetScreenPointCamera(RectTransform rectTransform)
		{
			return null;
		}

		[Token(Token = "0x60014CF")]
		[Address(RVA = "0xFBA35C", Offset = "0xFBA35C", VA = "0xFBA35C")]
		public IBoxSelectable[] GetAllSelected()
		{
			return null;
		}

		[Token(Token = "0x60014D0")]
		[Address(RVA = "0xFBA554", Offset = "0xFBA554", VA = "0xFBA554")]
		private void EndSelection()
		{
		}

		[Token(Token = "0x60014D1")]
		[Address(RVA = "0xFBA620", Offset = "0xFBA620", VA = "0xFBA620")]
		private void Start()
		{
		}

		[Token(Token = "0x60014D2")]
		[Address(RVA = "0xFBA640", Offset = "0xFBA640", VA = "0xFBA640")]
		private void Update()
		{
		}

		[Token(Token = "0x60014D3")]
		[Address(RVA = "0xFBA660", Offset = "0xFBA660", VA = "0xFBA660")]
		public SelectionBox()
		{
		}
	}
	[Token(Token = "0x20003D7")]
	[AddComponentMenu("UI/Extensions/Stepper")]
	[RequireComponent(typeof(RectTransform))]
	public class Stepper : UIBehaviour
	{
		[Serializable]
		[Token(Token = "0x20003D8")]
		public class StepperValueChangedEvent : UnityEvent<int>
		{
			[Token(Token = "0x60014F1")]
			[Address(RVA = "0xFBAF3C", Offset = "0xFBAF3C", VA = "0xFBAF3C")]
			public StepperValueChangedEvent()
			{
			}
		}

		[Token(Token = "0x20003D9")]
		[CompilerGenerated]
		private sealed class <DelayedInit>d__38 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400181F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001820")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001821")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Stepper <>4__this;

			[Token(Token = "0x17000227")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014F5")]
				[Address(RVA = "0xFBB558", Offset = "0xFBB558", VA = "0xFBB558", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000228")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014F7")]
				[Address(RVA = "0xFBB5A0", Offset = "0xFBB5A0", VA = "0xFBB5A0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014F2")]
			[Address(RVA = "0xFBB050", Offset = "0xFBB050", VA = "0xFBB050")]
			[DebuggerHidden]
			public <DelayedInit>d__38(int <>1__state)
			{
			}

			[Token(Token = "0x60014F3")]
			[Address(RVA = "0xFBB4EC", Offset = "0xFBB4EC", VA = "0xFBB4EC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014F4")]
			[Address(RVA = "0xFBB4F0", Offset = "0xFBB4F0", VA = "0xFBB4F0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014F6")]
			[Address(RVA = "0xFBB560", Offset = "0xFBB560", VA = "0xFBB560", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Selectable[] _sides;

		[Token(Token = "0x4001817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Tooltip("The current step value of the control")]
		private int _value;

		[Token(Token = "0x4001818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("The minimum step value allowed by the control. When reached it will disable the '-' button")]
		[SerializeField]
		private int _minimum;

		[Token(Token = "0x4001819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The maximum step value allowed by the control. When reached it will disable the '+' button")]
		[SerializeField]
		private int _maximum;

		[Token(Token = "0x400181A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		[Tooltip("The step increment used to increment / decrement the step value")]
		private int _step;

		[Token(Token = "0x400181B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[Tooltip("Does the step value loop around from end to end")]
		private bool _wrap;

		[Token(Token = "0x400181C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("A GameObject with an Image to use as a separator between segments. Size of the RectTransform will determine the size of the separator used.\nNote, make sure to disable the separator GO so that it does not affect the scene")]
		[SerializeField]
		private Graphic _separator;

		[Token(Token = "0x400181D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float _separatorWidth;

		[Token(Token = "0x400181E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private StepperValueChangedEvent _onValueChanged;

		[Token(Token = "0x1700021E")]
		private float separatorWidth
		{
			[Token(Token = "0x60014D5")]
			[Address(RVA = "0xFBA718", Offset = "0xFBA718", VA = "0xFBA718")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700021F")]
		public Selectable[] sides
		{
			[Token(Token = "0x60014D6")]
			[Address(RVA = "0xFBA840", Offset = "0xFBA840", VA = "0xFBA840")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000220")]
		public int value
		{
			[Token(Token = "0x60014D7")]
			[Address(RVA = "0xFBA95C", Offset = "0xFBA95C", VA = "0xFBA95C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60014D8")]
			[Address(RVA = "0xFBA964", Offset = "0xFBA964", VA = "0xFBA964")]
			set
			{
			}
		}

		[Token(Token = "0x17000221")]
		public int minimum
		{
			[Token(Token = "0x60014D9")]
			[Address(RVA = "0xFBA96C", Offset = "0xFBA96C", VA = "0xFBA96C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60014DA")]
			[Address(RVA = "0xFBA974", Offset = "0xFBA974", VA = "0xFBA974")]
			set
			{
			}
		}

		[Token(Token = "0x17000222")]
		public int maximum
		{
			[Token(Token = "0x60014DB")]
			[Address(RVA = "0xFBA97C", Offset = "0xFBA97C", VA = "0xFBA97C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60014DC")]
			[Address(RVA = "0xFBA984", Offset = "0xFBA984", VA = "0xFBA984")]
			set
			{
			}
		}

		[Token(Token = "0x17000223")]
		public int step
		{
			[Token(Token = "0x60014DD")]
			[Address(RVA = "0xFBA98C", Offset = "0xFBA98C", VA = "0xFBA98C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60014DE")]
			[Address(RVA = "0xFBA994", Offset = "0xFBA994", VA = "0xFBA994")]
			set
			{
			}
		}

		[Token(Token = "0x17000224")]
		public bool wrap
		{
			[Token(Token = "0x60014DF")]
			[Address(RVA = "0xFBA99C", Offset = "0xFBA99C", VA = "0xFBA99C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60014E0")]
			[Address(RVA = "0xFBA9A4", Offset = "0xFBA9A4", VA = "0xFBA9A4")]
			set
			{
			}
		}

		[Token(Token = "0x17000225")]
		public Graphic separator
		{
			[Token(Token = "0x60014E1")]
			[Address(RVA = "0xFBA9B0", Offset = "0xFBA9B0", VA = "0xFBA9B0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60014E2")]
			[Address(RVA = "0xFBA9B8", Offset = "0xFBA9B8", VA = "0xFBA9B8")]
			set
			{
			}
		}

		[Token(Token = "0x17000226")]
		public StepperValueChangedEvent onValueChanged
		{
			[Token(Token = "0x60014E3")]
			[Address(RVA = "0xFBAEB0", Offset = "0xFBAEB0", VA = "0xFBAEB0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60014E4")]
			[Address(RVA = "0xFBAEB8", Offset = "0xFBAEB8", VA = "0xFBAEB8")]
			set
			{
			}
		}

		[Token(Token = "0x60014E5")]
		[Address(RVA = "0xFBAEC0", Offset = "0xFBAEC0", VA = "0xFBAEC0")]
		protected Stepper()
		{
		}

		[Token(Token = "0x60014E6")]
		[Address(RVA = "0xFBAF84", Offset = "0xFBAF84", VA = "0xFBAF84", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60014E7")]
		[Address(RVA = "0xFBB030", Offset = "0xFBB030", VA = "0xFBB030", Slot = "5")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x60014E8")]
		[Address(RVA = "0xFBAFBC", Offset = "0xFBAFBC", VA = "0xFBAFBC")]
		[IteratorStateMachine(typeof(<DelayedInit>d__38))]
		private IEnumerator DelayedInit()
		{
			return null;
		}

		[Token(Token = "0x60014E9")]
		[Address(RVA = "0xFBA888", Offset = "0xFBA888", VA = "0xFBA888")]
		private Selectable[] GetSides()
		{
			return null;
		}

		[Token(Token = "0x60014EA")]
		[Address(RVA = "0xFBB110", Offset = "0xFBB110", VA = "0xFBB110")]
		public void StepUp()
		{
		}

		[Token(Token = "0x60014EB")]
		[Address(RVA = "0xFBB210", Offset = "0xFBB210", VA = "0xFBB210")]
		public void StepDown()
		{
		}

		[Token(Token = "0x60014EC")]
		[Address(RVA = "0xFBB118", Offset = "0xFBB118", VA = "0xFBB118")]
		private void Step(int amount)
		{
		}

		[Token(Token = "0x60014ED")]
		[Address(RVA = "0xFBB078", Offset = "0xFBB078", VA = "0xFBB078")]
		private void DisableAtExtremes(Selectable[] sides)
		{
		}

		[Token(Token = "0x60014EE")]
		[Address(RVA = "0xFBB21C", Offset = "0xFBB21C", VA = "0xFBB21C")]
		private void RecreateSprites(Selectable[] sides)
		{
		}

		[Token(Token = "0x60014EF")]
		[Address(RVA = "0xFBB3A0", Offset = "0xFBB3A0", VA = "0xFBB3A0")]
		internal static Sprite CutSprite(Sprite sprite, bool leftmost)
		{
			return null;
		}

		[Token(Token = "0x60014F0")]
		[Address(RVA = "0xFBA9E4", Offset = "0xFBA9E4", VA = "0xFBA9E4")]
		public void LayoutSides([Optional] Selectable[] sides)
		{
		}
	}
	[Token(Token = "0x20003DA")]
	[RequireComponent(typeof(Selectable))]
	public class StepperSide : UIBehaviour, IPointerClickHandler, IEventSystemHandler, ISubmitHandler, IPointerEnterHandler, IPointerExitHandler, IPointerDownHandler, IPointerUpHandler, ISelectHandler, IDeselectHandler
	{
		[Token(Token = "0x4001822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal Sprite cutSprite;

		[Token(Token = "0x17000229")]
		private Selectable button
		{
			[Token(Token = "0x60014F8")]
			[Address(RVA = "0xFBB5A8", Offset = "0xFBB5A8", VA = "0xFBB5A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700022A")]
		private Stepper stepper
		{
			[Token(Token = "0x60014F9")]
			[Address(RVA = "0xFBB5F0", Offset = "0xFBB5F0", VA = "0xFBB5F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700022B")]
		private bool leftmost
		{
			[Token(Token = "0x60014FA")]
			[Address(RVA = "0xFBB638", Offset = "0xFBB638", VA = "0xFBB638")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60014FB")]
		[Address(RVA = "0xFBB6CC", Offset = "0xFBB6CC", VA = "0xFBB6CC")]
		protected StepperSide()
		{
		}

		[Token(Token = "0x60014FC")]
		[Address(RVA = "0xFBB6D4", Offset = "0xFBB6D4", VA = "0xFBB6D4", Slot = "25")]
		public virtual void OnPointerClick(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60014FD")]
		[Address(RVA = "0xFBB8A4", Offset = "0xFBB8A4", VA = "0xFBB8A4", Slot = "26")]
		public virtual void OnSubmit(BaseEventData eventData)
		{
		}

		[Token(Token = "0x60014FE")]
		[Address(RVA = "0xFBB8C0", Offset = "0xFBB8C0", VA = "0xFBB8C0", Slot = "27")]
		public virtual void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60014FF")]
		[Address(RVA = "0xFBB8C8", Offset = "0xFBB8C8", VA = "0xFBB8C8", Slot = "28")]
		public virtual void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001500")]
		[Address(RVA = "0xFBB8D0", Offset = "0xFBB8D0", VA = "0xFBB8D0", Slot = "29")]
		public virtual void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001501")]
		[Address(RVA = "0xFBB8D8", Offset = "0xFBB8D8", VA = "0xFBB8D8", Slot = "30")]
		public virtual void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001502")]
		[Address(RVA = "0xFBB8E0", Offset = "0xFBB8E0", VA = "0xFBB8E0", Slot = "31")]
		public virtual void OnSelect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6001503")]
		[Address(RVA = "0xFBB8E8", Offset = "0xFBB8E8", VA = "0xFBB8E8", Slot = "32")]
		public virtual void OnDeselect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6001504")]
		[Address(RVA = "0xFBB708", Offset = "0xFBB708", VA = "0xFBB708")]
		private void Press()
		{
		}

		[Token(Token = "0x6001505")]
		[Address(RVA = "0xFBB78C", Offset = "0xFBB78C", VA = "0xFBB78C")]
		private void AdjustSprite(bool restore)
		{
		}
	}
	[Token(Token = "0x20003DB")]
	[ExecuteInEditMode]
	[AddComponentMenu("UI/Extensions/TextPic")]
	public class TextPic : Text, IPointerClickHandler, IEventSystemHandler, IPointerExitHandler, IPointerEnterHandler, ISelectHandler
	{
		[Serializable]
		[Token(Token = "0x20003DC")]
		public struct IconName
		{
			[Token(Token = "0x4001849")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string name;

			[Token(Token = "0x400184A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Sprite sprite;

			[Token(Token = "0x400184B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector2 offset;

			[Token(Token = "0x400184C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector2 scale;
		}

		[Serializable]
		[Token(Token = "0x20003DD")]
		public class HrefClickEvent : UnityEvent<string>
		{
			[Token(Token = "0x600151C")]
			[Address(RVA = "0xFBEDDC", Offset = "0xFBEDDC", VA = "0xFBEDDC")]
			public HrefClickEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003DE")]
		public class HrefInfo
		{
			[Token(Token = "0x400184D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int startIndex;

			[Token(Token = "0x400184E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int endIndex;

			[Token(Token = "0x400184F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string name;

			[Token(Token = "0x4001850")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public readonly List<Rect> boxes;

			[Token(Token = "0x600151D")]
			[Address(RVA = "0xFBD680", Offset = "0xFBD680", VA = "0xFBD680")]
			public HrefInfo()
			{
			}
		}

		[Token(Token = "0x4001823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public IconName[] inspectorIconList;

		[Token(Token = "0x4001824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Tooltip("Global scaling factor for all images")]
		public float ImageScalingFactor;

		[Token(Token = "0x4001825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public string hyperlinkColor;

		[Token(Token = "0x4001826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public Vector2 imageOffset;

		[Token(Token = "0x4001827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public bool isCreating_m_HrefInfos;

		[Token(Token = "0x4001828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		private HrefClickEvent m_OnHrefClick;

		[Token(Token = "0x4001829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private readonly List<Image> m_ImagesPool;

		[Token(Token = "0x400182A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private readonly List<GameObject> culled_ImagesPool;

		[Token(Token = "0x400182B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private bool clearImages;

		[Token(Token = "0x400182C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Object thisLock;

		[Token(Token = "0x400182D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private readonly List<int> m_ImagesVertexIndex;

		[Token(Token = "0x400182E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Regex s_Regex;

		[Token(Token = "0x400182F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly Regex s_HrefRegex;

		[Token(Token = "0x4001830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private string fixedString;

		[Token(Token = "0x4001831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private bool updateQuad;

		[Token(Token = "0x4001832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private string m_OutputText;

		[Token(Token = "0x4001833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private Button button;

		[Token(Token = "0x4001834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private bool selected;

		[Token(Token = "0x4001835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private List<Vector2> positions;

		[Token(Token = "0x4001836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private string previousText;

		[Token(Token = "0x4001837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private readonly List<HrefInfo> m_HrefInfos;

		[Token(Token = "0x4001838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly StringBuilder s_TextBuilder;

		[Token(Token = "0x4001839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private MatchCollection matches;

		[Token(Token = "0x400183A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private MatchCollection href_matches;

		[Token(Token = "0x400183B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private MatchCollection removeCharacters;

		[Token(Token = "0x400183C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private int picIndex;

		[Token(Token = "0x400183D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		private int vertIndex;

		[Token(Token = "0x400183E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private bool usesNewRendering;

		[Token(Token = "0x400183F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly Regex remove_Regex;

		[Token(Token = "0x4001840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private List<int> indexes;

		[Token(Token = "0x4001841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private int charactersRemoved;

		[Token(Token = "0x4001842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		private int startCharactersRemoved;

		[Token(Token = "0x4001843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private int endCharactersRemoved;

		[Token(Token = "0x4001844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		private int count;

		[Token(Token = "0x4001845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private int indexText;

		[Token(Token = "0x4001846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private string originalText;

		[Token(Token = "0x4001847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private UIVertex vert;

		[Token(Token = "0x4001848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x254")]
		private Vector2 lp;

		[Token(Token = "0x1700022C")]
		public HrefClickEvent onHrefClick
		{
			[Token(Token = "0x6001506")]
			[Address(RVA = "0xFBB8F0", Offset = "0xFBB8F0", VA = "0xFBB8F0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001507")]
			[Address(RVA = "0xFBB8F8", Offset = "0xFBB8F8", VA = "0xFBB8F8")]
			set
			{
			}
		}

		[Token(Token = "0x1700022D")]
		public bool Selected
		{
			[Token(Token = "0x6001508")]
			[Address(RVA = "0xFBB908", Offset = "0xFBB908", VA = "0xFBB908")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001509")]
			[Address(RVA = "0xFBB910", Offset = "0xFBB910", VA = "0xFBB910")]
			set
			{
			}
		}

		[Token(Token = "0x600150A")]
		[Address(RVA = "0xFBB91C", Offset = "0xFBB91C", VA = "0xFBB91C")]
		public void ResetIconList()
		{
		}

		[Token(Token = "0x600150B")]
		[Address(RVA = "0xFBB9CC", Offset = "0xFBB9CC", VA = "0xFBB9CC")]
		protected void UpdateQuadImage()
		{
		}

		[Token(Token = "0x600150C")]
		[Address(RVA = "0xFBB938", Offset = "0xFBB938", VA = "0xFBB938")]
		private void Reset_m_HrefInfos()
		{
		}

		[Token(Token = "0x600150D")]
		[Address(RVA = "0xFBC4FC", Offset = "0xFBC4FC", VA = "0xFBC4FC")]
		protected string GetOutputText()
		{
			return null;
		}

		[Token(Token = "0x600150E")]
		[Address(RVA = "0xFBD708", Offset = "0xFBD708", VA = "0xFBD708", Slot = "89")]
		public virtual void OnHrefClick(string hrefName)
		{
		}

		[Token(Token = "0x600150F")]
		[Address(RVA = "0xFBD714", Offset = "0xFBD714", VA = "0xFBD714", Slot = "44")]
		protected override void OnPopulateMesh(VertexHelper toFill)
		{
		}

		[Token(Token = "0x6001510")]
		[Address(RVA = "0xFBDDBC", Offset = "0xFBDDBC", VA = "0xFBDDBC", Slot = "85")]
		public void OnPointerClick(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001511")]
		[Address(RVA = "0xFBDFB0", Offset = "0xFBDFB0", VA = "0xFBDFB0", Slot = "87")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001512")]
		[Address(RVA = "0xFBE0C8", Offset = "0xFBE0C8", VA = "0xFBE0C8", Slot = "86")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001513")]
		[Address(RVA = "0xFBE224", Offset = "0xFBE224", VA = "0xFBE224", Slot = "88")]
		public void OnSelect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6001514")]
		[Address(RVA = "0xFBE33C", Offset = "0xFBE33C", VA = "0xFBE33C")]
		public void OnDeselect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6001515")]
		[Address(RVA = "0xFBE450", Offset = "0xFBE450", VA = "0xFBE450", Slot = "28")]
		public override void SetVerticesDirty()
		{
		}

		[Token(Token = "0x6001516")]
		[Address(RVA = "0xFBE470", Offset = "0xFBE470", VA = "0xFBE470", Slot = "5")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001517")]
		[Address(RVA = "0xFBE704", Offset = "0xFBE704", VA = "0xFBE704", Slot = "7")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6001518")]
		[Address(RVA = "0xFBE868", Offset = "0xFBE868", VA = "0xFBE868")]
		private new void Start()
		{
		}

		[Token(Token = "0x6001519")]
		[Address(RVA = "0xFBE8D4", Offset = "0xFBE8D4", VA = "0xFBE8D4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600151A")]
		[Address(RVA = "0xFBEAD8", Offset = "0xFBEAD8", VA = "0xFBEAD8")]
		public TextPic()
		{
		}
	}
	[Token(Token = "0x20003E0")]
	[RequireComponent(typeof(Image))]
	[AddComponentMenu("UI/Extensions/UI_Knob")]
	public class UI_Knob : Selectable, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler, IPointerEnterHandler, IPointerExitHandler, IDragHandler, IInitializePotentialDragHandler
	{
		[Token(Token = "0x20003E1")]
		public enum Direction
		{
			[Token(Token = "0x4001866")]
			CW,
			[Token(Token = "0x4001867")]
			CCW
		}

		[Token(Token = "0x4001853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Tooltip("Direction of rotation CW - clockwise, CCW - counterClockwise")]
		public Direction direction;

		[Token(Token = "0x4001854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[HideInInspector]
		public float KnobValue;

		[Token(Token = "0x4001855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Tooltip("Max value of the knob, maximum RAW output value knob can reach, overrides snap step, IF set to 0 or higher than loops, max value will be set by loops")]
		public float MaxValue;

		[Token(Token = "0x4001856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[Tooltip("How many rotations knob can do, if higher than max value, the latter will limit max value")]
		public int Loops;

		[Token(Token = "0x4001857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Tooltip("Clamp output value between 0 and 1, useful with loops > 1")]
		public bool ClampOutput01;

		[Token(Token = "0x4001858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x109")]
		[Tooltip("snap to position?")]
		public bool SnapToPosition;

		[Token(Token = "0x4001859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[Tooltip("Number of positions to snap")]
		public int SnapStepsPerLoop;

		[Token(Token = "0x400185A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Tooltip("Parent touch area to extend the touch radius")]
		public RectTransform ParentTouchMask;

		[Token(Token = "0x400185B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[Tooltip("Default background color of the touch mask. Defaults as transparent")]
		public Color MaskBackground;

		[Token(Token = "0x400185C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[Space(30f)]
		public KnobFloatValueEvent OnValueChanged;

		[Token(Token = "0x400185D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private float _currentLoops;

		[Token(Token = "0x400185E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private float _previousValue;

		[Token(Token = "0x400185F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private float _initAngle;

		[Token(Token = "0x4001860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private float _currentAngle;

		[Token(Token = "0x4001861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Vector2 _currentVector;

		[Token(Token = "0x4001862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Quaternion _initRotation;

		[Token(Token = "0x4001863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private bool _canDrag;

		[Token(Token = "0x4001864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x159")]
		private bool _screenSpaceOverlay;

		[Token(Token = "0x6001521")]
		[Address(RVA = "0xFBF070", Offset = "0xFBF070", VA = "0xFBF070", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001522")]
		[Address(RVA = "0xFBF0E4", Offset = "0xFBF0E4", VA = "0xFBF0E4", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001523")]
		[Address(RVA = "0xFBF0E8", Offset = "0xFBF0E8", VA = "0xFBF0E8")]
		private void CheckForParentTouchMask()
		{
		}

		[Token(Token = "0x6001524")]
		[Address(RVA = "0xFBF6E4", Offset = "0xFBF6E4", VA = "0xFBF6E4", Slot = "33")]
		public override void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001525")]
		[Address(RVA = "0xFBF6EC", Offset = "0xFBF6EC", VA = "0xFBF6EC", Slot = "34")]
		public override void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001526")]
		[Address(RVA = "0xFBF6F8", Offset = "0xFBF6F8", VA = "0xFBF6F8", Slot = "35")]
		public override void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001527")]
		[Address(RVA = "0xFBF700", Offset = "0xFBF700", VA = "0xFBF700", Slot = "32")]
		public override void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001528")]
		[Address(RVA = "0xFBF7E8", Offset = "0xFBF7E8", VA = "0xFBF7E8", Slot = "39")]
		public void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001529")]
		[Address(RVA = "0xFBFB70", Offset = "0xFBFB70", VA = "0xFBFB70")]
		private void UpdateKnobValue()
		{
		}

		[Token(Token = "0x600152A")]
		[Address(RVA = "0xFBFD98", Offset = "0xFBFD98", VA = "0xFBFD98")]
		public void SetKnobValue(float value, int loops = 0)
		{
		}

		[Token(Token = "0x600152B")]
		[Address(RVA = "0xFBFAB4", Offset = "0xFBFAB4", VA = "0xFBFAB4")]
		private void SnapToPositionValue(ref float knobValue)
		{
		}

		[Token(Token = "0x600152C")]
		[Address(RVA = "0xFBFD24", Offset = "0xFBFD24", VA = "0xFBFD24")]
		private void InvokeEvents(float value)
		{
		}

		[Token(Token = "0x600152D")]
		[Address(RVA = "0xFBFEA4", Offset = "0xFBFEA4", VA = "0xFBFEA4", Slot = "41")]
		public virtual void OnInitializePotentialDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600152E")]
		[Address(RVA = "0xFBFEBC", Offset = "0xFBFEBC", VA = "0xFBFEBC")]
		public UI_Knob()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003E2")]
	public class KnobFloatValueEvent : UnityEvent<float>
	{
		[Token(Token = "0x6001534")]
		[Address(RVA = "0xFC01E4", Offset = "0xFC01E4", VA = "0xFC01E4")]
		public KnobFloatValueEvent()
		{
		}
	}
	[Token(Token = "0x20003E3")]
	[AddComponentMenu("UI/Effects/Extensions/BestFit Outline")]
	public class BestFitOutline : Shadow
	{
		[Token(Token = "0x6001535")]
		[Address(RVA = "0xFC022C", Offset = "0xFC022C", VA = "0xFC022C")]
		protected BestFitOutline()
		{
		}

		[Token(Token = "0x6001536")]
		[Address(RVA = "0xFC0234", Offset = "0xFC0234", VA = "0xFC0234", Slot = "19")]
		public override void ModifyMesh(Mesh mesh)
		{
		}
	}
	[Token(Token = "0x20003E4")]
	public class CUIBezierCurve : MonoBehaviour
	{
		[Token(Token = "0x4001868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int CubicBezierCurvePtNum;

		[Token(Token = "0x4001869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected Vector3[] controlPoints;

		[Token(Token = "0x400186A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action OnRefresh;

		[Token(Token = "0x1700022E")]
		public Vector3[] ControlPoints
		{
			[Token(Token = "0x6001537")]
			[Address(RVA = "0xFC1158", Offset = "0xFC1158", VA = "0xFC1158")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001538")]
		[Address(RVA = "0xFC1160", Offset = "0xFC1160", VA = "0xFC1160")]
		public void Refresh()
		{
		}

		[Token(Token = "0x6001539")]
		[Address(RVA = "0xFC117C", Offset = "0xFC117C", VA = "0xFC117C")]
		public Vector3 GetPoint(float _time)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600153A")]
		[Address(RVA = "0xFC1244", Offset = "0xFC1244", VA = "0xFC1244")]
		public Vector3 GetTangent(float _time)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600153B")]
		[Address(RVA = "0xFC1308", Offset = "0xFC1308", VA = "0xFC1308")]
		public void ReportSet()
		{
		}

		[Token(Token = "0x600153C")]
		[Address(RVA = "0xFC1440", Offset = "0xFC1440", VA = "0xFC1440")]
		public CUIBezierCurve()
		{
		}
	}
	[Token(Token = "0x20003E5")]
	[AddComponentMenu("UI/Effects/Extensions/Curly UI Graphic")]
	[RequireComponent(typeof(RectTransform))]
	[RequireComponent(typeof(Graphic))]
	[DisallowMultipleComponent]
	public class CUIGraphic : BaseMeshEffect
	{
		[Token(Token = "0x400186B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int bottomCurveIdx;

		[Token(Token = "0x400186C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static readonly int topCurveIdx;

		[Token(Token = "0x400186D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Set true to make the curve/morph to work. Set false to quickly see the original UI.")]
		[SerializeField]
		protected bool isCurved;

		[Token(Token = "0x400186E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[SerializeField]
		[Tooltip("Set true to dynamically change the curve according to the dynamic change of the UI layout")]
		protected bool isLockWithRatio;

		[Token(Token = "0x400186F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Pick a higher resolution to improve the quality of the curved graphic.")]
		[SerializeField]
		[Range(0.01f, 30f)]
		protected float resolution;

		[Token(Token = "0x4001870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected RectTransform rectTrans;

		[Token(Token = "0x4001871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[Tooltip("Put in the Graphic you want to curve/morph here.")]
		protected Graphic uiGraphic;

		[Token(Token = "0x4001872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Put in the reference Graphic that will be used to tune the bezier curves. Think button image and text.")]
		[SerializeField]
		protected CUIGraphic refCUIGraphic;

		[Token(Token = "0x4001873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Do not touch this unless you are sure what you are doing. The curves are (re)generated automatically.")]
		[SerializeField]
		protected CUIBezierCurve[] refCurves;

		[Token(Token = "0x4001874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		[SerializeField]
		protected Vector3_Array2D[] refCurvesControlRatioPoints;

		[Token(Token = "0x4001875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected List<UIVertex> reuse_quads;

		[Token(Token = "0x1700022F")]
		public bool IsCurved
		{
			[Token(Token = "0x600153E")]
			[Address(RVA = "0xFC1494", Offset = "0xFC1494", VA = "0xFC1494")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000230")]
		public bool IsLockWithRatio
		{
			[Token(Token = "0x600153F")]
			[Address(RVA = "0xFC149C", Offset = "0xFC149C", VA = "0xFC149C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000231")]
		public RectTransform RectTrans
		{
			[Token(Token = "0x6001540")]
			[Address(RVA = "0xFC14A4", Offset = "0xFC14A4", VA = "0xFC14A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000232")]
		public Graphic UIGraphic
		{
			[Token(Token = "0x6001541")]
			[Address(RVA = "0xFC14AC", Offset = "0xFC14AC", VA = "0xFC14AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000233")]
		public CUIGraphic RefCUIGraphic
		{
			[Token(Token = "0x6001542")]
			[Address(RVA = "0xFC14B4", Offset = "0xFC14B4", VA = "0xFC14B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000234")]
		public CUIBezierCurve[] RefCurves
		{
			[Token(Token = "0x6001543")]
			[Address(RVA = "0xFC14BC", Offset = "0xFC14BC", VA = "0xFC14BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000235")]
		public Vector3_Array2D[] RefCurvesControlRatioPoints
		{
			[Token(Token = "0x6001544")]
			[Address(RVA = "0xFC14C4", Offset = "0xFC14C4", VA = "0xFC14C4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001545")]
		[Address(RVA = "0xFC14CC", Offset = "0xFC14CC", VA = "0xFC14CC")]
		protected void solveDoubleEquationWithVector(float _x_1, float _y_1, float _x_2, float _y_2, Vector3 _constant_1, Vector3 _contant_2, out Vector3 _x, out Vector3 _y)
		{
		}

		[Token(Token = "0x6001546")]
		[Address(RVA = "0xFC15E8", Offset = "0xFC15E8", VA = "0xFC15E8")]
		protected UIVertex uiVertexLerp(UIVertex _a, UIVertex _b, float _time)
		{
			return default(UIVertex);
		}

		[Token(Token = "0x6001547")]
		[Address(RVA = "0xFC1AC4", Offset = "0xFC1AC4", VA = "0xFC1AC4")]
		protected UIVertex uiVertexBerp(UIVertex v_bottomLeft, UIVertex v_topLeft, UIVertex v_topRight, UIVertex v_bottomRight, float _xTime, float _yTime)
		{
			return default(UIVertex);
		}

		[Token(Token = "0x6001548")]
		[Address(RVA = "0xFC1BD0", Offset = "0xFC1BD0", VA = "0xFC1BD0")]
		protected void tessellateQuad(List<UIVertex> _quads, int _thisQuadIdx)
		{
		}

		[Token(Token = "0x6001549")]
		[Address(RVA = "0xFC2630", Offset = "0xFC2630", VA = "0xFC2630")]
		protected void tessellateGraphic(List<UIVertex> _verts)
		{
		}

		[Token(Token = "0x600154A")]
		[Address(RVA = "0xFC2EB0", Offset = "0xFC2EB0", VA = "0xFC2EB0", Slot = "10")]
		protected override void OnRectTransformDimensionsChange()
		{
		}

		[Token(Token = "0x600154B")]
		[Address(RVA = "0xFC30E4", Offset = "0xFC30E4", VA = "0xFC30E4")]
		public void Refresh()
		{
		}

		[Token(Token = "0x600154C")]
		[Address(RVA = "0xFC3388", Offset = "0xFC3388", VA = "0xFC3388", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x600154D")]
		[Address(RVA = "0xFC33AC", Offset = "0xFC33AC", VA = "0xFC33AC", Slot = "5")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x600154E")]
		[Address(RVA = "0xFC33D0", Offset = "0xFC33D0", VA = "0xFC33D0", Slot = "21")]
		public virtual void ReportSet()
		{
		}

		[Token(Token = "0x600154F")]
		[Address(RVA = "0xFC3904", Offset = "0xFC3904", VA = "0xFC3904")]
		public void FixTextToRectTrans()
		{
		}

		[Token(Token = "0x6001550")]
		[Address(RVA = "0xFC3B54", Offset = "0xFC3B54", VA = "0xFC3B54")]
		public void ReferenceCUIForBCurves()
		{
		}

		[Token(Token = "0x6001551")]
		[Address(RVA = "0xFC42A8", Offset = "0xFC42A8", VA = "0xFC42A8", Slot = "19")]
		public override void ModifyMesh(Mesh _mesh)
		{
		}

		[Token(Token = "0x6001552")]
		[Address(RVA = "0xFC446C", Offset = "0xFC446C", VA = "0xFC446C", Slot = "20")]
		public override void ModifyMesh(VertexHelper _vh)
		{
		}

		[Token(Token = "0x6001553")]
		[Address(RVA = "0xFC4544", Offset = "0xFC4544", VA = "0xFC4544", Slot = "22")]
		protected virtual void modifyVertices(List<UIVertex> _verts)
		{
		}

		[Token(Token = "0x6001554")]
		[Address(RVA = "0xFC2EC0", Offset = "0xFC2EC0", VA = "0xFC2EC0")]
		public void UpdateCurveControlPointPositions()
		{
		}

		[Token(Token = "0x6001555")]
		[Address(RVA = "0xFC4204", Offset = "0xFC4204", VA = "0xFC4204")]
		public Vector3 GetBCurveSandwichSpacePoint(float _xTime, float _yTime)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001556")]
		[Address(RVA = "0xFC4794", Offset = "0xFC4794", VA = "0xFC4794")]
		public Vector3 GetBCurveSandwichSpaceTangent(float _xTime, float _yTime)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001557")]
		[Address(RVA = "0xFC4838", Offset = "0xFC4838", VA = "0xFC4838")]
		public CUIGraphic()
		{
		}
	}
	[Token(Token = "0x20003E6")]
	[RequireComponent(typeof(RectTransform))]
	[RequireComponent(typeof(Image))]
	[AddComponentMenu("UI/Effects/Extensions/Curly UI Image")]
	public class CUIImage : CUIGraphic
	{
		[Token(Token = "0x4001876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int SlicedImageCornerRefVertexIdx;

		[Token(Token = "0x4001877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static int FilledImageCornerRefVertexIdx;

		[Token(Token = "0x4001878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("For changing the size of the corner for tiled or sliced Image")]
		[HideInInspector]
		[SerializeField]
		public Vector2 cornerPosRatio;

		[Token(Token = "0x4001879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		[SerializeField]
		protected Vector2 oriCornerPosRatio;

		[Token(Token = "0x17000236")]
		public Vector2 OriCornerPosRatio
		{
			[Token(Token = "0x600155A")]
			[Address(RVA = "0xFC4988", Offset = "0xFC4988", VA = "0xFC4988")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x17000237")]
		public Image UIImage
		{
			[Token(Token = "0x600155B")]
			[Address(RVA = "0xFC4990", Offset = "0xFC4990", VA = "0xFC4990")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001559")]
		[Address(RVA = "0xFC4920", Offset = "0xFC4920", VA = "0xFC4920")]
		public static int ImageTypeCornerRefVertexIdx(Image.Type _type)
		{
			return default(int);
		}

		[Token(Token = "0x600155C")]
		[Address(RVA = "0xFC4A08", Offset = "0xFC4A08", VA = "0xFC4A08", Slot = "21")]
		public override void ReportSet()
		{
		}

		[Token(Token = "0x600155D")]
		[Address(RVA = "0xFC4AB4", Offset = "0xFC4AB4", VA = "0xFC4AB4", Slot = "22")]
		protected override void modifyVertices(List<UIVertex> _verts)
		{
		}

		[Token(Token = "0x600155E")]
		[Address(RVA = "0xFC5190", Offset = "0xFC5190", VA = "0xFC5190")]
		public CUIImage()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003E7")]
	public struct Vector3_Array2D
	{
		[Token(Token = "0x400187A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		public Vector3[] array;

		[Token(Token = "0x17000238")]
		public Vector3 this[int _idx]
		{
			[Token(Token = "0x6001560")]
			[Address(RVA = "0xFC5284", Offset = "0xFC5284", VA = "0xFC5284")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001561")]
			[Address(RVA = "0xFC52C0", Offset = "0xFC52C0", VA = "0xFC52C0")]
			set
			{
			}
		}
	}
	[Token(Token = "0x20003E8")]
	[RequireComponent(typeof(Text))]
	[AddComponentMenu("UI/Effects/Extensions/Curly UI Text")]
	[RequireComponent(typeof(RectTransform))]
	public class CUIText : CUIGraphic
	{
		[Token(Token = "0x6001562")]
		[Address(RVA = "0xFC52FC", Offset = "0xFC52FC", VA = "0xFC52FC", Slot = "21")]
		public override void ReportSet()
		{
		}

		[Token(Token = "0x6001563")]
		[Address(RVA = "0xFC53A8", Offset = "0xFC53A8", VA = "0xFC53A8")]
		public CUIText()
		{
		}
	}
	[Token(Token = "0x20003E9")]
	[AddComponentMenu("UI/Effects/Extensions/Curved Text")]
	[RequireComponent(typeof(Text), typeof(RectTransform))]
	public class CurvedText : BaseMeshEffect
	{
		[Token(Token = "0x400187B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AnimationCurve _curveForText;

		[Token(Token = "0x400187C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float _curveMultiplier;

		[Token(Token = "0x400187D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RectTransform rectTrans;

		[Token(Token = "0x17000239")]
		public AnimationCurve CurveForText
		{
			[Token(Token = "0x6001564")]
			[Address(RVA = "0xFC5400", Offset = "0xFC5400", VA = "0xFC5400")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001565")]
			[Address(RVA = "0xFC5408", Offset = "0xFC5408", VA = "0xFC5408")]
			set
			{
			}
		}

		[Token(Token = "0x1700023A")]
		public float CurveMultiplier
		{
			[Token(Token = "0x6001566")]
			[Address(RVA = "0xFC5440", Offset = "0xFC5440", VA = "0xFC5440")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001567")]
			[Address(RVA = "0xFC5448", Offset = "0xFC5448", VA = "0xFC5448")]
			set
			{
			}
		}

		[Token(Token = "0x6001568")]
		[Address(RVA = "0xFC5474", Offset = "0xFC5474", VA = "0xFC5474", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001569")]
		[Address(RVA = "0xFC54E8", Offset = "0xFC54E8", VA = "0xFC54E8", Slot = "5")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x600156A")]
		[Address(RVA = "0xFC555C", Offset = "0xFC555C", VA = "0xFC555C", Slot = "20")]
		public override void ModifyMesh(VertexHelper vh)
		{
		}

		[Token(Token = "0x600156B")]
		[Address(RVA = "0xFC56CC", Offset = "0xFC56CC", VA = "0xFC56CC", Slot = "10")]
		protected override void OnRectTransformDimensionsChange()
		{
		}

		[Token(Token = "0x600156C")]
		[Address(RVA = "0xFC57EC", Offset = "0xFC57EC", VA = "0xFC57EC")]
		public CurvedText()
		{
		}
	}
	[Token(Token = "0x20003EA")]
	[AddComponentMenu("UI/Effects/Extensions/Cylinder Text")]
	[RequireComponent(typeof(Text), typeof(RectTransform))]
	public class CylinderText : BaseMeshEffect
	{
		[Token(Token = "0x400187E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float radius;

		[Token(Token = "0x600156D")]
		[Address(RVA = "0xFC5834", Offset = "0xFC5834", VA = "0xFC5834", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x600156E")]
		[Address(RVA = "0xFC5858", Offset = "0xFC5858", VA = "0xFC5858", Slot = "5")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x600156F")]
		[Address(RVA = "0xFC587C", Offset = "0xFC587C", VA = "0xFC587C", Slot = "20")]
		public override void ModifyMesh(VertexHelper vh)
		{
		}

		[Token(Token = "0x6001570")]
		[Address(RVA = "0xFC59BC", Offset = "0xFC59BC", VA = "0xFC59BC")]
		public CylinderText()
		{
		}
	}
	[Token(Token = "0x20003EB")]
	[AddComponentMenu("UI/Effects/Extensions/Gradient")]
	public class Gradient : BaseMeshEffect
	{
		[Token(Token = "0x400187F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GradientMode _gradientMode;

		[Token(Token = "0x4001880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private GradientDir _gradientDir;

		[Token(Token = "0x4001881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private bool _overwriteAllColor;

		[Token(Token = "0x4001882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private Color _vertex1;

		[Token(Token = "0x4001883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private Color _vertex2;

		[Token(Token = "0x4001884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Graphic targetGraphic;

		[Token(Token = "0x1700023B")]
		public GradientMode GradientMode
		{
			[Token(Token = "0x6001571")]
			[Address(RVA = "0xFC59C4", Offset = "0xFC59C4", VA = "0xFC59C4")]
			get
			{
				return default(GradientMode);
			}
			[Token(Token = "0x6001572")]
			[Address(RVA = "0xFC59CC", Offset = "0xFC59CC", VA = "0xFC59CC")]
			set
			{
			}
		}

		[Token(Token = "0x1700023C")]
		public GradientDir GradientDir
		{
			[Token(Token = "0x6001573")]
			[Address(RVA = "0xFC59F8", Offset = "0xFC59F8", VA = "0xFC59F8")]
			get
			{
				return default(GradientDir);
			}
			[Token(Token = "0x6001574")]
			[Address(RVA = "0xFC5A00", Offset = "0xFC5A00", VA = "0xFC5A00")]
			set
			{
			}
		}

		[Token(Token = "0x1700023D")]
		public bool OverwriteAllColor
		{
			[Token(Token = "0x6001575")]
			[Address(RVA = "0xFC5A2C", Offset = "0xFC5A2C", VA = "0xFC5A2C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001576")]
			[Address(RVA = "0xFC5A34", Offset = "0xFC5A34", VA = "0xFC5A34")]
			set
			{
			}
		}

		[Token(Token = "0x1700023E")]
		public Color Vertex1
		{
			[Token(Token = "0x6001577")]
			[Address(RVA = "0xFC5A64", Offset = "0xFC5A64", VA = "0xFC5A64")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6001578")]
			[Address(RVA = "0xFC5A70", Offset = "0xFC5A70", VA = "0xFC5A70")]
			set
			{
			}
		}

		[Token(Token = "0x1700023F")]
		public Color Vertex2
		{
			[Token(Token = "0x6001579")]
			[Address(RVA = "0xFC5AA0", Offset = "0xFC5AA0", VA = "0xFC5AA0")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x600157A")]
			[Address(RVA = "0xFC5AAC", Offset = "0xFC5AAC", VA = "0xFC5AAC")]
			set
			{
			}
		}

		[Token(Token = "0x600157B")]
		[Address(RVA = "0xFC5ADC", Offset = "0xFC5ADC", VA = "0xFC5ADC", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x600157C")]
		[Address(RVA = "0xFC5B34", Offset = "0xFC5B34", VA = "0xFC5B34", Slot = "20")]
		public override void ModifyMesh(VertexHelper vh)
		{
		}

		[Token(Token = "0x600157D")]
		[Address(RVA = "0xFC6820", Offset = "0xFC6820", VA = "0xFC6820")]
		private bool CompareCarefully(Color col1, Color col2)
		{
			return default(bool);
		}

		[Token(Token = "0x600157E")]
		[Address(RVA = "0xFC6868", Offset = "0xFC6868", VA = "0xFC6868")]
		public Gradient()
		{
		}
	}
	[Token(Token = "0x20003EC")]
	public enum GradientMode
	{
		[Token(Token = "0x4001886")]
		Global,
		[Token(Token = "0x4001887")]
		Local
	}
	[Token(Token = "0x20003ED")]
	public enum GradientDir
	{
		[Token(Token = "0x4001889")]
		Vertical,
		[Token(Token = "0x400188A")]
		Horizontal,
		[Token(Token = "0x400188B")]
		DiagonalLeftToRight,
		[Token(Token = "0x400188C")]
		DiagonalRightToLeft
	}
	[Token(Token = "0x20003EE")]
	[AddComponentMenu("UI/Effects/Extensions/Gradient2")]
	public class Gradient2 : BaseMeshEffect
	{
		[Token(Token = "0x20003EF")]
		public enum Type
		{
			[Token(Token = "0x4001894")]
			Horizontal,
			[Token(Token = "0x4001895")]
			Vertical,
			[Token(Token = "0x4001896")]
			Radial,
			[Token(Token = "0x4001897")]
			Diamond
		}

		[Token(Token = "0x20003F0")]
		public enum Blend
		{
			[Token(Token = "0x4001899")]
			Override,
			[Token(Token = "0x400189A")]
			Add,
			[Token(Token = "0x400189B")]
			Multiply
		}

		[Token(Token = "0x400188D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Type _gradientType;

		[Token(Token = "0x400188E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private Blend _blendMode;

		[Token(Token = "0x400188F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[Tooltip("Add vertices to display complex gradients. Turn off if your shape is already very complex, like text.")]
		private bool _modifyVertices;

		[Token(Token = "0x4001890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		[Range(-1f, 1f)]
		private float _offset;

		[Token(Token = "0x4001891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0.1f, 10f)]
		[SerializeField]
		private float _zoom;

		[Token(Token = "0x4001892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private UnityEngine.Gradient _effectGradient;

		[Token(Token = "0x17000240")]
		public Blend BlendMode
		{
			[Token(Token = "0x600157F")]
			[Address(RVA = "0xFC6884", Offset = "0xFC6884", VA = "0xFC6884")]
			get
			{
				return default(Blend);
			}
			[Token(Token = "0x6001580")]
			[Address(RVA = "0xFC688C", Offset = "0xFC688C", VA = "0xFC688C")]
			set
			{
			}
		}

		[Token(Token = "0x17000241")]
		public UnityEngine.Gradient EffectGradient
		{
			[Token(Token = "0x6001581")]
			[Address(RVA = "0xFC68B8", Offset = "0xFC68B8", VA = "0xFC68B8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001582")]
			[Address(RVA = "0xFC68C0", Offset = "0xFC68C0", VA = "0xFC68C0")]
			set
			{
			}
		}

		[Token(Token = "0x17000242")]
		public Type GradientType
		{
			[Token(Token = "0x6001583")]
			[Address(RVA = "0xFC68F8", Offset = "0xFC68F8", VA = "0xFC68F8")]
			get
			{
				return default(Type);
			}
			[Token(Token = "0x6001584")]
			[Address(RVA = "0xFC6900", Offset = "0xFC6900", VA = "0xFC6900")]
			set
			{
			}
		}

		[Token(Token = "0x17000243")]
		public bool ModifyVertices
		{
			[Token(Token = "0x6001585")]
			[Address(RVA = "0xFC692C", Offset = "0xFC692C", VA = "0xFC692C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001586")]
			[Address(RVA = "0xFC6934", Offset = "0xFC6934", VA = "0xFC6934")]
			set
			{
			}
		}

		[Token(Token = "0x17000244")]
		public float Offset
		{
			[Token(Token = "0x6001587")]
			[Address(RVA = "0xFC6964", Offset = "0xFC6964", VA = "0xFC6964")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001588")]
			[Address(RVA = "0xFC696C", Offset = "0xFC696C", VA = "0xFC696C")]
			set
			{
			}
		}

		[Token(Token = "0x17000245")]
		public float Zoom
		{
			[Token(Token = "0x6001589")]
			[Address(RVA = "0xFC69AC", Offset = "0xFC69AC", VA = "0xFC69AC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600158A")]
			[Address(RVA = "0xFC69B4", Offset = "0xFC69B4", VA = "0xFC69B4")]
			set
			{
			}
		}

		[Token(Token = "0x600158B")]
		[Address(RVA = "0xFC69F8", Offset = "0xFC69F8", VA = "0xFC69F8", Slot = "20")]
		public override void ModifyMesh(VertexHelper helper)
		{
		}

		[Token(Token = "0x600158C")]
		[Address(RVA = "0xFC854C", Offset = "0xFC854C", VA = "0xFC854C")]
		private Rect GetBounds(List<UIVertex> vertices)
		{
			return default(Rect);
		}

		[Token(Token = "0x600158D")]
		[Address(RVA = "0xFC86B4", Offset = "0xFC86B4", VA = "0xFC86B4")]
		private void SplitTrianglesAtGradientStops(List<UIVertex> _vertexList, Rect bounds, float zoomOffset, VertexHelper helper)
		{
		}

		[Token(Token = "0x600158E")]
		[Address(RVA = "0xFC9B98", Offset = "0xFC9B98", VA = "0xFC9B98")]
		private float[] GetPositions(List<UIVertex> _vertexList, int index)
		{
			return null;
		}

		[Token(Token = "0x600158F")]
		[Address(RVA = "0xFC97C8", Offset = "0xFC97C8", VA = "0xFC97C8")]
		private List<float> FindStops(float zoomOffset, Rect bounds)
		{
			return null;
		}

		[Token(Token = "0x6001590")]
		[Address(RVA = "0xFC9D1C", Offset = "0xFC9D1C", VA = "0xFC9D1C")]
		private UIVertex CreateSplitVertex(UIVertex vertex1, UIVertex vertex2, float stop)
		{
			return default(UIVertex);
		}

		[Token(Token = "0x6001591")]
		[Address(RVA = "0xFC977C", Offset = "0xFC977C", VA = "0xFC977C")]
		private Color BlendColor(Color colorA, Color colorB)
		{
			return default(Color);
		}

		[Token(Token = "0x6001592")]
		[Address(RVA = "0xFCA144", Offset = "0xFCA144", VA = "0xFCA144")]
		public Gradient2()
		{
		}
	}
	[Token(Token = "0x20003F2")]
	[AddComponentMenu("UI/Effects/Extensions/Letter Spacing")]
	public class LetterSpacing : BaseMeshEffect
	{
		[Token(Token = "0x400189F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float m_spacing;

		[Token(Token = "0x17000246")]
		public float spacing
		{
			[Token(Token = "0x6001598")]
			[Address(RVA = "0xFCA34C", Offset = "0xFCA34C", VA = "0xFCA34C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001599")]
			[Address(RVA = "0xFCA354", Offset = "0xFCA354", VA = "0xFCA354")]
			set
			{
			}
		}

		[Token(Token = "0x6001597")]
		[Address(RVA = "0xFCA344", Offset = "0xFCA344", VA = "0xFCA344")]
		protected LetterSpacing()
		{
		}

		[Token(Token = "0x600159A")]
		[Address(RVA = "0xFCA418", Offset = "0xFCA418", VA = "0xFCA418", Slot = "20")]
		public override void ModifyMesh(VertexHelper vh)
		{
		}
	}
	[Token(Token = "0x20003F3")]
	[RequireComponent(typeof(RectTransform))]
	[RequireComponent(typeof(Text))]
	[AddComponentMenu("UI/Effects/Extensions/Mono Spacing")]
	public class MonoSpacing : BaseMeshEffect
	{
		[Token(Token = "0x40018A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float m_spacing;

		[Token(Token = "0x40018A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float HalfCharWidth;

		[Token(Token = "0x40018A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool UseHalfCharWidth;

		[Token(Token = "0x40018A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RectTransform rectTransform;

		[Token(Token = "0x40018A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Text text;

		[Token(Token = "0x17000247")]
		public float Spacing
		{
			[Token(Token = "0x600159D")]
			[Address(RVA = "0xFCABB8", Offset = "0xFCABB8", VA = "0xFCABB8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600159E")]
			[Address(RVA = "0xFCABC0", Offset = "0xFCABC0", VA = "0xFCABC0")]
			set
			{
			}
		}

		[Token(Token = "0x600159B")]
		[Address(RVA = "0xFCAA80", Offset = "0xFCAA80", VA = "0xFCAA80")]
		protected MonoSpacing()
		{
		}

		[Token(Token = "0x600159C")]
		[Address(RVA = "0xFCAA90", Offset = "0xFCAA90", VA = "0xFCAA90", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x600159F")]
		[Address(RVA = "0xFCAC84", Offset = "0xFCAC84", VA = "0xFCAC84", Slot = "20")]
		public override void ModifyMesh(VertexHelper vh)
		{
		}
	}
	[Token(Token = "0x20003F4")]
	[AddComponentMenu("UI/Effects/Extensions/Nicer Outline")]
	public class NicerOutline : BaseMeshEffect
	{
		[Token(Token = "0x40018A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Color m_EffectColor;

		[Token(Token = "0x40018A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Vector2 m_EffectDistance;

		[Token(Token = "0x40018A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private bool m_UseGraphicAlpha;

		[Token(Token = "0x40018A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<UIVertex> m_Verts;

		[Token(Token = "0x17000248")]
		public Color effectColor
		{
			[Token(Token = "0x60015A0")]
			[Address(RVA = "0xFCB350", Offset = "0xFCB350", VA = "0xFCB350")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x60015A1")]
			[Address(RVA = "0xFCB35C", Offset = "0xFCB35C", VA = "0xFCB35C")]
			set
			{
			}
		}

		[Token(Token = "0x17000249")]
		public Vector2 effectDistance
		{
			[Token(Token = "0x60015A2")]
			[Address(RVA = "0xFCB430", Offset = "0xFCB430", VA = "0xFCB430")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x60015A3")]
			[Address(RVA = "0xFCB438", Offset = "0xFCB438", VA = "0xFCB438")]
			set
			{
			}
		}

		[Token(Token = "0x1700024A")]
		public bool useGraphicAlpha
		{
			[Token(Token = "0x60015A4")]
			[Address(RVA = "0xFCB53C", Offset = "0xFCB53C", VA = "0xFCB53C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60015A5")]
			[Address(RVA = "0xFCB544", Offset = "0xFCB544", VA = "0xFCB544")]
			set
			{
			}
		}

		[Token(Token = "0x60015A6")]
		[Address(RVA = "0xFCB5FC", Offset = "0xFCB5FC", VA = "0xFCB5FC")]
		protected void ApplyShadowZeroAlloc(List<UIVertex> verts, Color32 color, int start, int end, float x, float y)
		{
		}

		[Token(Token = "0x60015A7")]
		[Address(RVA = "0xFCB900", Offset = "0xFCB900", VA = "0xFCB900")]
		protected void ApplyShadow(List<UIVertex> verts, Color32 color, int start, int end, float x, float y)
		{
		}

		[Token(Token = "0x60015A8")]
		[Address(RVA = "0xFCB9DC", Offset = "0xFCB9DC", VA = "0xFCB9DC", Slot = "20")]
		public override void ModifyMesh(VertexHelper vh)
		{
		}

		[Token(Token = "0x60015A9")]
		[Address(RVA = "0xFCD24C", Offset = "0xFCD24C", VA = "0xFCD24C")]
		public NicerOutline()
		{
		}
	}
	[Token(Token = "0x20003F5")]
	[AddComponentMenu("UI/Extensions/Raycast Mask")]
	[RequireComponent(typeof(Image))]
	[RequireComponent(typeof(RectTransform))]
	public class RaycastMask : MonoBehaviour, ICanvasRaycastFilter
	{
		[Token(Token = "0x40018A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Image _image;

		[Token(Token = "0x40018AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Sprite _sprite;

		[Token(Token = "0x60015AA")]
		[Address(RVA = "0xFCD2F4", Offset = "0xFCD2F4", VA = "0xFCD2F4")]
		private void Start()
		{
		}

		[Token(Token = "0x60015AB")]
		[Address(RVA = "0xFCD34C", Offset = "0xFCD34C", VA = "0xFCD34C", Slot = "4")]
		public bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera)
		{
			return default(bool);
		}

		[Token(Token = "0x60015AC")]
		[Address(RVA = "0xFCD9EC", Offset = "0xFCD9EC", VA = "0xFCD9EC")]
		public RaycastMask()
		{
		}
	}
	[Token(Token = "0x20003F6")]
	[RequireComponent(typeof(RectTransform))]
	[ExecuteInEditMode]
	[AddComponentMenu("UI/Effects/Extensions/UIAdditiveEffect")]
	public class UIAdditiveEffect : MonoBehaviour
	{
		[Token(Token = "0x40018AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private MaskableGraphic mGraphic;

		[Token(Token = "0x60015AD")]
		[Address(RVA = "0xFCD9F4", Offset = "0xFCD9F4", VA = "0xFCD9F4")]
		private void Start()
		{
		}

		[Token(Token = "0x60015AE")]
		[Address(RVA = "0xFCD9F8", Offset = "0xFCD9F8", VA = "0xFCD9F8")]
		public void SetMaterial()
		{
		}

		[Token(Token = "0x60015AF")]
		[Address(RVA = "0xFCDC20", Offset = "0xFCDC20", VA = "0xFCDC20")]
		public void OnValidate()
		{
		}

		[Token(Token = "0x60015B0")]
		[Address(RVA = "0xFCDC24", Offset = "0xFCDC24", VA = "0xFCDC24")]
		public UIAdditiveEffect()
		{
		}
	}
	[Token(Token = "0x20003F7")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(RectTransform))]
	[AddComponentMenu("UI/Effects/Extensions/UIImageCrop")]
	public class UIImageCrop : MonoBehaviour
	{
		[Token(Token = "0x40018AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private MaskableGraphic mGraphic;

		[Token(Token = "0x40018AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material mat;

		[Token(Token = "0x40018AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int XCropProperty;

		[Token(Token = "0x40018AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int YCropProperty;

		[Token(Token = "0x40018B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float XCrop;

		[Token(Token = "0x40018B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float YCrop;

		[Token(Token = "0x60015B1")]
		[Address(RVA = "0xFCDC2C", Offset = "0xFCDC2C", VA = "0xFCDC2C")]
		private void Start()
		{
		}

		[Token(Token = "0x60015B2")]
		[Address(RVA = "0xFCDC30", Offset = "0xFCDC30", VA = "0xFCDC30")]
		public void SetMaterial()
		{
		}

		[Token(Token = "0x60015B3")]
		[Address(RVA = "0xFCDEC8", Offset = "0xFCDEC8", VA = "0xFCDEC8")]
		public void OnValidate()
		{
		}

		[Token(Token = "0x60015B4")]
		[Address(RVA = "0xFCDEF0", Offset = "0xFCDEF0", VA = "0xFCDEF0")]
		public void SetXCrop(float xcrop)
		{
		}

		[Token(Token = "0x60015B5")]
		[Address(RVA = "0xFCDF2C", Offset = "0xFCDF2C", VA = "0xFCDF2C")]
		public void SetYCrop(float ycrop)
		{
		}

		[Token(Token = "0x60015B6")]
		[Address(RVA = "0xFCDF68", Offset = "0xFCDF68", VA = "0xFCDF68")]
		public UIImageCrop()
		{
		}
	}
	[Token(Token = "0x20003F8")]
	[AddComponentMenu("UI/Effects/Extensions/UILinearDodgeEffect")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(RectTransform))]
	public class UILinearDodgeEffect : MonoBehaviour
	{
		[Token(Token = "0x40018B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private MaskableGraphic mGraphic;

		[Token(Token = "0x60015B7")]
		[Address(RVA = "0xFCDF70", Offset = "0xFCDF70", VA = "0xFCDF70")]
		private void Start()
		{
		}

		[Token(Token = "0x60015B8")]
		[Address(RVA = "0xFCDF74", Offset = "0xFCDF74", VA = "0xFCDF74")]
		public void SetMaterial()
		{
		}

		[Token(Token = "0x60015B9")]
		[Address(RVA = "0xFCE19C", Offset = "0xFCE19C", VA = "0xFCE19C")]
		public void OnValidate()
		{
		}

		[Token(Token = "0x60015BA")]
		[Address(RVA = "0xFCE1A0", Offset = "0xFCE1A0", VA = "0xFCE1A0")]
		public UILinearDodgeEffect()
		{
		}
	}
	[Token(Token = "0x20003F9")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(RectTransform))]
	[AddComponentMenu("UI/Effects/Extensions/UIMultiplyEffect")]
	public class UIMultiplyEffect : MonoBehaviour
	{
		[Token(Token = "0x40018B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private MaskableGraphic mGraphic;

		[Token(Token = "0x60015BB")]
		[Address(RVA = "0xFCE1A8", Offset = "0xFCE1A8", VA = "0xFCE1A8")]
		private void Start()
		{
		}

		[Token(Token = "0x60015BC")]
		[Address(RVA = "0xFCE1AC", Offset = "0xFCE1AC", VA = "0xFCE1AC")]
		public void SetMaterial()
		{
		}

		[Token(Token = "0x60015BD")]
		[Address(RVA = "0xFCE3D4", Offset = "0xFCE3D4", VA = "0xFCE3D4")]
		public void OnValidate()
		{
		}

		[Token(Token = "0x60015BE")]
		[Address(RVA = "0xFCE3D8", Offset = "0xFCE3D8", VA = "0xFCE3D8")]
		public UIMultiplyEffect()
		{
		}
	}
	[Token(Token = "0x20003FA")]
	[AddComponentMenu("UI/Effects/Extensions/UIScreenEffect")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(RectTransform))]
	public class UIScreenEffect : MonoBehaviour
	{
		[Token(Token = "0x40018B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private MaskableGraphic mGraphic;

		[Token(Token = "0x60015BF")]
		[Address(RVA = "0xFCE3E0", Offset = "0xFCE3E0", VA = "0xFCE3E0")]
		private void Start()
		{
		}

		[Token(Token = "0x60015C0")]
		[Address(RVA = "0xFCE3E4", Offset = "0xFCE3E4", VA = "0xFCE3E4")]
		public void SetMaterial()
		{
		}

		[Token(Token = "0x60015C1")]
		[Address(RVA = "0xFCE60C", Offset = "0xFCE60C", VA = "0xFCE60C")]
		public void OnValidate()
		{
		}

		[Token(Token = "0x60015C2")]
		[Address(RVA = "0xFCE610", Offset = "0xFCE610", VA = "0xFCE610")]
		public UIScreenEffect()
		{
		}
	}
	[Token(Token = "0x20003FB")]
	[AddComponentMenu("UI/Effects/Extensions/UISoftAdditiveEffect")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(RectTransform))]
	public class UISoftAdditiveEffect : MonoBehaviour
	{
		[Token(Token = "0x40018B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private MaskableGraphic mGraphic;

		[Token(Token = "0x60015C3")]
		[Address(RVA = "0xFCE618", Offset = "0xFCE618", VA = "0xFCE618")]
		private void Start()
		{
		}

		[Token(Token = "0x60015C4")]
		[Address(RVA = "0xFCE61C", Offset = "0xFCE61C", VA = "0xFCE61C")]
		public void SetMaterial()
		{
		}

		[Token(Token = "0x60015C5")]
		[Address(RVA = "0xFCE844", Offset = "0xFCE844", VA = "0xFCE844")]
		public void OnValidate()
		{
		}

		[Token(Token = "0x60015C6")]
		[Address(RVA = "0xFCE848", Offset = "0xFCE848", VA = "0xFCE848")]
		public UISoftAdditiveEffect()
		{
		}
	}
	[Token(Token = "0x20003FC")]
	public class ShineEffect : MaskableGraphic
	{
		[Token(Token = "0x40018B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private float yoffset;

		[Token(Token = "0x40018B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[SerializeField]
		private float width;

		[Token(Token = "0x1700024B")]
		public float Yoffset
		{
			[Token(Token = "0x60015C7")]
			[Address(RVA = "0xFCE850", Offset = "0xFCE850", VA = "0xFCE850")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60015C8")]
			[Address(RVA = "0xFCE858", Offset = "0xFCE858", VA = "0xFCE858")]
			set
			{
			}
		}

		[Token(Token = "0x1700024C")]
		public float Width
		{
			[Token(Token = "0x60015C9")]
			[Address(RVA = "0xFCE888", Offset = "0xFCE888", VA = "0xFCE888")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60015CA")]
			[Address(RVA = "0xFCE890", Offset = "0xFCE890", VA = "0xFCE890")]
			set
			{
			}
		}

		[Token(Token = "0x60015CB")]
		[Address(RVA = "0xFCE8C0", Offset = "0xFCE8C0", VA = "0xFCE8C0", Slot = "44")]
		protected override void OnPopulateMesh(VertexHelper vh)
		{
		}

		[Token(Token = "0x60015CC")]
		[Address(RVA = "0xFCEEE4", Offset = "0xFCEEE4", VA = "0xFCEEE4")]
		public void Triangulate(VertexHelper vh)
		{
		}

		[Token(Token = "0x60015CD")]
		[Address(RVA = "0xFCEFF4", Offset = "0xFCEFF4", VA = "0xFCEFF4")]
		public ShineEffect()
		{
		}
	}
	[Token(Token = "0x20003FD")]
	[AddComponentMenu("UI/Effects/Extensions/Shining Effect")]
	[RequireComponent(typeof(Image))]
	[ExecuteInEditMode]
	public class ShineEffector : MonoBehaviour
	{
		[Token(Token = "0x40018B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ShineEffect effector;

		[Token(Token = "0x40018B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[HideInInspector]
		private GameObject effectRoot;

		[Token(Token = "0x40018BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(-1f, 1f)]
		public float yOffset;

		[Token(Token = "0x40018BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0.1f, 1f)]
		public float width;

		[Token(Token = "0x40018BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RectTransform effectorRect;

		[Token(Token = "0x1700024D")]
		public float YOffset
		{
			[Token(Token = "0x60015CE")]
			[Address(RVA = "0xFCF008", Offset = "0xFCF008", VA = "0xFCF008")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60015CF")]
			[Address(RVA = "0xFCF010", Offset = "0xFCF010", VA = "0xFCF010")]
			set
			{
			}
		}

		[Token(Token = "0x60015D0")]
		[Address(RVA = "0xFCF0D4", Offset = "0xFCF0D4", VA = "0xFCF0D4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60015D1")]
		[Address(RVA = "0xFCF7AC", Offset = "0xFCF7AC", VA = "0xFCF7AC")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x60015D2")]
		[Address(RVA = "0xFCF034", Offset = "0xFCF034", VA = "0xFCF034")]
		private void ChangeVal(float value)
		{
		}

		[Token(Token = "0x60015D3")]
		[Address(RVA = "0xFCF868", Offset = "0xFCF868", VA = "0xFCF868")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60015D4")]
		[Address(RVA = "0xFCF8E4", Offset = "0xFCF8E4", VA = "0xFCF8E4")]
		public ShineEffector()
		{
		}
	}
	[Token(Token = "0x20003FE")]
	[AddComponentMenu("UI/Effects/Extensions/SoftMaskScript")]
	[ExecuteInEditMode]
	public class SoftMaskScript : MonoBehaviour
	{
		[Token(Token = "0x40018BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Material mat;

		[Token(Token = "0x40018BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Canvas cachedCanvas;

		[Token(Token = "0x40018BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform cachedCanvasTransform;

		[Token(Token = "0x40018C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly Vector3[] m_WorldCorners;

		[Token(Token = "0x40018C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly Vector3[] m_CanvasCorners;

		[Token(Token = "0x40018C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The area that is to be used as the container.")]
		public RectTransform MaskArea;

		[Token(Token = "0x40018C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Texture to be used to do the soft alpha")]
		public Texture AlphaMask;

		[Token(Token = "0x40018C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Range(0f, 1f)]
		[Tooltip("At what point to apply the alpha min range 0-1")]
		public float CutOff;

		[Token(Token = "0x40018C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("Implement a hard blend based on the Cutoff")]
		public bool HardBlend;

		[Token(Token = "0x40018C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		[Tooltip("Flip the masks alpha value")]
		public bool FlipAlphaMask;

		[Token(Token = "0x40018C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
		[Tooltip("If a different Mask Scaling Rect is given, and this value is true, the area around the mask will not be clipped")]
		public bool DontClipMaskScalingRect;

		[Token(Token = "0x40018C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector2 maskOffset;

		[Token(Token = "0x40018C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector2 maskScale;

		[Token(Token = "0x60015D5")]
		[Address(RVA = "0xFCF8F8", Offset = "0xFCF8F8", VA = "0xFCF8F8")]
		private void Start()
		{
		}

		[Token(Token = "0x60015D6")]
		[Address(RVA = "0xFCFCD0", Offset = "0xFCFCD0", VA = "0xFCFCD0")]
		private void Update()
		{
		}

		[Token(Token = "0x60015D7")]
		[Address(RVA = "0xFCFD48", Offset = "0xFCFD48", VA = "0xFCFD48")]
		private void SetMask()
		{
		}

		[Token(Token = "0x60015D8")]
		[Address(RVA = "0xFCFEE4", Offset = "0xFCFEE4", VA = "0xFCFEE4")]
		public Rect GetCanvasRect()
		{
			return default(Rect);
		}

		[Token(Token = "0x60015D9")]
		[Address(RVA = "0xFD0028", Offset = "0xFD0028", VA = "0xFD0028")]
		public SoftMaskScript()
		{
		}
	}
	[Token(Token = "0x20003FF")]
	[AddComponentMenu("UI/Effects/Extensions/Flippable")]
	[RequireComponent(typeof(RectTransform), typeof(Graphic))]
	[DisallowMultipleComponent]
	public class UIFlippable : BaseMeshEffect
	{
		[Token(Token = "0x40018CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool m_Horizontal;

		[Token(Token = "0x40018CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[SerializeField]
		private bool m_Veritical;

		[Token(Token = "0x1700024E")]
		public bool horizontal
		{
			[Token(Token = "0x60015DA")]
			[Address(RVA = "0xFD010C", Offset = "0xFD010C", VA = "0xFD010C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60015DB")]
			[Address(RVA = "0xFD0114", Offset = "0xFD0114", VA = "0xFD0114")]
			set
			{
			}
		}

		[Token(Token = "0x1700024F")]
		public bool vertical
		{
			[Token(Token = "0x60015DC")]
			[Address(RVA = "0xFD0120", Offset = "0xFD0120", VA = "0xFD0120")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60015DD")]
			[Address(RVA = "0xFD0128", Offset = "0xFD0128", VA = "0xFD0128")]
			set
			{
			}
		}

		[Token(Token = "0x60015DE")]
		[Address(RVA = "0xFD0134", Offset = "0xFD0134", VA = "0xFD0134", Slot = "20")]
		public override void ModifyMesh(VertexHelper verts)
		{
		}

		[Token(Token = "0x60015DF")]
		[Address(RVA = "0xFD02E8", Offset = "0xFD02E8", VA = "0xFD02E8")]
		public UIFlippable()
		{
		}
	}
	[Token(Token = "0x2000400")]
	[AddComponentMenu("UI/Effects/Extensions/UIParticleSystem")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(CanvasRenderer), typeof(ParticleSystem))]
	public class UIParticleSystem : MaskableGraphic
	{
		[Token(Token = "0x40018CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Having this enabled run the system in LateUpdate rather than in Update making it faster but less precise (more clunky)")]
		public bool fixedTime;

		[Token(Token = "0x40018CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
		[Tooltip("Enables 3d rotation for the particles")]
		public bool use3dRotation;

		[Token(Token = "0x40018CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Transform _transform;

		[Token(Token = "0x40018CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private ParticleSystem pSystem;

		[Token(Token = "0x40018D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private ParticleSystem.Particle[] particles;

		[Token(Token = "0x40018D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private UIVertex[] _quad;

		[Token(Token = "0x40018D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Vector4 imageUV;

		[Token(Token = "0x40018D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private ParticleSystem.TextureSheetAnimationModule textureSheetAnimation;

		[Token(Token = "0x40018D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private int textureSheetAnimationFrames;

		[Token(Token = "0x40018D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private Vector2 textureSheetAnimationFrameSize;

		[Token(Token = "0x40018D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private ParticleSystemRenderer pRenderer;

		[Token(Token = "0x40018D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private bool isInitialised;

		[Token(Token = "0x40018D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Material currentMaterial;

		[Token(Token = "0x40018D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Texture currentTexture;

		[Token(Token = "0x40018DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private ParticleSystem.MainModule mainModule;

		[Token(Token = "0x17000250")]
		public override Texture mainTexture
		{
			[Token(Token = "0x60015E0")]
			[Address(RVA = "0xFD02F0", Offset = "0xFD02F0", VA = "0xFD02F0", Slot = "35")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60015E1")]
		[Address(RVA = "0xFD02F8", Offset = "0xFD02F8", VA = "0xFD02F8")]
		protected bool Initialize()
		{
			return default(bool);
		}

		[Token(Token = "0x60015E2")]
		[Address(RVA = "0xFD083C", Offset = "0xFD083C", VA = "0xFD083C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60015E3")]
		[Address(RVA = "0xFD0874", Offset = "0xFD0874", VA = "0xFD0874", Slot = "44")]
		protected override void OnPopulateMesh(VertexHelper vh)
		{
		}

		[Token(Token = "0x60015E4")]
		[Address(RVA = "0xFD14E4", Offset = "0xFD14E4", VA = "0xFD14E4")]
		private void Update()
		{
		}

		[Token(Token = "0x60015E5")]
		[Address(RVA = "0xFD16DC", Offset = "0xFD16DC", VA = "0xFD16DC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60015E6")]
		[Address(RVA = "0xFD1948", Offset = "0xFD1948", VA = "0xFD1948", Slot = "8")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x60015E7")]
		[Address(RVA = "0xFD1974", Offset = "0xFD1974", VA = "0xFD1974")]
		public void StartParticleEmission()
		{
		}

		[Token(Token = "0x60015E8")]
		[Address(RVA = "0xFD19A8", Offset = "0xFD19A8", VA = "0xFD19A8")]
		public void StopParticleEmission()
		{
		}

		[Token(Token = "0x60015E9")]
		[Address(RVA = "0xFD19CC", Offset = "0xFD19CC", VA = "0xFD19CC")]
		public void PauseParticleEmission()
		{
		}

		[Token(Token = "0x60015EA")]
		[Address(RVA = "0xFD19F0", Offset = "0xFD19F0", VA = "0xFD19F0")]
		public UIParticleSystem()
		{
		}
	}
	[Token(Token = "0x2000401")]
	public class CardExpanding2D : MonoBehaviour
	{
		[Token(Token = "0x40018DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float lerpSpeed;

		[Token(Token = "0x40018DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private RectTransform buttonRect;

		[Token(Token = "0x40018DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector2 closeButtonMin;

		[Token(Token = "0x40018DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector2 closeButtonMax;

		[Token(Token = "0x40018DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Vector2 cardSize;

		[Token(Token = "0x40018E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Vector2 pageSize;

		[Token(Token = "0x40018E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector2 cardCenter;

		[Token(Token = "0x40018E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector2 pageCenter;

		[Token(Token = "0x40018E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector2 cardMin;

		[Token(Token = "0x40018E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector2 cardMax;

		[Token(Token = "0x40018E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector2 pageMin;

		[Token(Token = "0x40018E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector2 pageMax;

		[Token(Token = "0x40018E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private RectTransform rectTrans;

		[Token(Token = "0x40018E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int animationActive;

		[Token(Token = "0x60015EB")]
		[Address(RVA = "0xFD1A90", Offset = "0xFD1A90", VA = "0xFD1A90")]
		private void Start()
		{
		}

		[Token(Token = "0x60015EC")]
		[Address(RVA = "0xFD1BB4", Offset = "0xFD1BB4", VA = "0xFD1BB4")]
		private void Update()
		{
		}

		[Token(Token = "0x60015ED")]
		[Address(RVA = "0xFD2814", Offset = "0xFD2814", VA = "0xFD2814")]
		public void ToggleCard()
		{
		}

		[Token(Token = "0x60015EE")]
		[Address(RVA = "0xFD28DC", Offset = "0xFD28DC", VA = "0xFD28DC")]
		public CardExpanding2D()
		{
		}
	}
	[Token(Token = "0x2000402")]
	[RequireComponent(typeof(Rigidbody))]
	public class CardPopup2D : MonoBehaviour
	{
		[Token(Token = "0x40018E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float rotationSpeed;

		[Token(Token = "0x40018EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float centeringSpeed;

		[Token(Token = "0x40018EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool singleScene;

		[Token(Token = "0x40018EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Rigidbody rbody;

		[Token(Token = "0x40018ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool isFalling;

		[Token(Token = "0x40018EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 cardFallRotation;

		[Token(Token = "0x40018EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool fallToZero;

		[Token(Token = "0x40018F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float startZPos;

		[Token(Token = "0x60015EF")]
		[Address(RVA = "0xFD29B0", Offset = "0xFD29B0", VA = "0xFD29B0")]
		private void Start()
		{
		}

		[Token(Token = "0x60015F0")]
		[Address(RVA = "0xFD2A44", Offset = "0xFD2A44", VA = "0xFD2A44")]
		private void Update()
		{
		}

		[Token(Token = "0x60015F1")]
		[Address(RVA = "0xFD2E30", Offset = "0xFD2E30", VA = "0xFD2E30")]
		public void CardEnter()
		{
		}

		[Token(Token = "0x60015F2")]
		[Address(RVA = "0xFD2E3C", Offset = "0xFD2E3C", VA = "0xFD2E3C")]
		public void CardFallAway(float fallRotation)
		{
		}

		[Token(Token = "0x60015F3")]
		[Address(RVA = "0xFD2E88", Offset = "0xFD2E88", VA = "0xFD2E88")]
		public CardPopup2D()
		{
		}
	}
	[Token(Token = "0x2000403")]
	public class CardStack2D : MonoBehaviour
	{
		[Token(Token = "0x2000404")]
		[CompilerGenerated]
		private sealed class <ButtonCooldown>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40018FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40018FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40018FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CardStack2D <>4__this;

			[Token(Token = "0x17000251")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60015FC")]
				[Address(RVA = "0xFD37B4", Offset = "0xFD37B4", VA = "0xFD37B4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000252")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60015FE")]
				[Address(RVA = "0xFD37FC", Offset = "0xFD37FC", VA = "0xFD37FC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60015F9")]
			[Address(RVA = "0xFD35F4", Offset = "0xFD35F4", VA = "0xFD35F4")]
			[DebuggerHidden]
			public <ButtonCooldown>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x60015FA")]
			[Address(RVA = "0xFD36A0", Offset = "0xFD36A0", VA = "0xFD36A0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60015FB")]
			[Address(RVA = "0xFD36A4", Offset = "0xFD36A4", VA = "0xFD36A4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60015FD")]
			[Address(RVA = "0xFD37BC", Offset = "0xFD37BC", VA = "0xFD37BC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40018F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float cardMoveSpeed;

		[Token(Token = "0x40018F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float buttonCooldownTime;

		[Token(Token = "0x40018F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private int cardZMultiplier;

		[Token(Token = "0x40018F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private bool useDefaultUsedXPos;

		[Token(Token = "0x40018F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private int usedCardXPos;

		[Token(Token = "0x40018F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private KeyCode leftButton;

		[Token(Token = "0x40018F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private KeyCode rightButton;

		[Token(Token = "0x40018F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Transform[] cards;

		[Token(Token = "0x40018F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int cardArrayOffset;

		[Token(Token = "0x40018FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3[] cardPositions;

		[Token(Token = "0x40018FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int xPowerDifference;

		[Token(Token = "0x40018FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool canUseHorizontalAxis;

		[Token(Token = "0x60015F4")]
		[Address(RVA = "0xFD2E9C", Offset = "0xFD2E9C", VA = "0xFD2E9C")]
		private void Start()
		{
		}

		[Token(Token = "0x60015F5")]
		[Address(RVA = "0xFD3258", Offset = "0xFD3258", VA = "0xFD3258")]
		private void Update()
		{
		}

		[Token(Token = "0x60015F6")]
		[Address(RVA = "0xFD3580", Offset = "0xFD3580", VA = "0xFD3580")]
		[IteratorStateMachine(typeof(<ButtonCooldown>d__14))]
		private IEnumerator ButtonCooldown()
		{
			return null;
		}

		[Token(Token = "0x60015F7")]
		[Address(RVA = "0xFD361C", Offset = "0xFD361C", VA = "0xFD361C")]
		public CardStack2D()
		{
		}
	}
	[Token(Token = "0x2000405")]
	[ExecuteInEditMode]
	public class CardExpanding3D : MonoBehaviour
	{
		[Token(Token = "0x4001900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float lerpSpeed;

		[Token(Token = "0x4001901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float cornerSize;

		[Token(Token = "0x4001902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Parts")]
		public RectTransform[] cardCorners;

		[Token(Token = "0x4001903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RectTransform[] cardEdges;

		[Token(Token = "0x4001904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public RectTransform cardCenter;

		[Token(Token = "0x4001905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Positions and sizes card to its current transform.")]
		[Header("Card Info")]
		public bool cardAutoSize;

		[Token(Token = "0x4001906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector2 cardSize;

		[Token(Token = "0x4001907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector2 cardPosition;

		[Token(Token = "0x4001908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Range(1f, 96f)]
		public int cardSuperness;

		[Token(Token = "0x4001909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Page Info")]
		[Tooltip("Positions and sizes the page to the top third of the screen.")]
		public bool pageAutoSize;

		[Token(Token = "0x400190A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Vector2 pageSize;

		[Token(Token = "0x400190B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Vector2 pagePosition;

		[Token(Token = "0x400190C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Range(1f, 96f)]
		public int pageSuperness;

		[Token(Token = "0x400190D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int animationActive;

		[Token(Token = "0x400190E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector2[] nextCornerPos;

		[Token(Token = "0x400190F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector2[] nextEdgePos;

		[Token(Token = "0x4001910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector2[] nextEdgeScale;

		[Token(Token = "0x4001911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector2 nextCenterScale;

		[Token(Token = "0x4001912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector2 nextPos;

		[Token(Token = "0x4001913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int nextSuperness;

		[Token(Token = "0x4001914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private RectTransform rect;

		[Token(Token = "0x4001915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector2 nextMin;

		[Token(Token = "0x4001916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector2 nextMax;

		[Token(Token = "0x60015FF")]
		[Address(RVA = "0xFD3804", Offset = "0xFD3804", VA = "0xFD3804")]
		private void Start()
		{
		}

		[Token(Token = "0x6001600")]
		[Address(RVA = "0xFD39A0", Offset = "0xFD39A0", VA = "0xFD39A0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001601")]
		[Address(RVA = "0xFD4064", Offset = "0xFD4064", VA = "0xFD4064")]
		public void ToggleCard()
		{
		}

		[Token(Token = "0x6001602")]
		[Address(RVA = "0xFD46D4", Offset = "0xFD46D4", VA = "0xFD46D4")]
		public CardExpanding3D()
		{
		}
	}
	[Token(Token = "0x2000406")]
	[ExecuteInEditMode]
	public class MeshCreator : MonoBehaviour
	{
		[Token(Token = "0x6001603")]
		[Address(RVA = "0xFD4798", Offset = "0xFD4798", VA = "0xFD4798")]
		public void CreateMesh(List<Vector2> points)
		{
		}

		[Token(Token = "0x6001604")]
		[Address(RVA = "0xFD4DDC", Offset = "0xFD4DDC", VA = "0xFD4DDC")]
		public MeshCreator()
		{
		}
	}
	[Token(Token = "0x2000407")]
	[ExecuteInEditMode]
	public class SuperellipsePoints : MonoBehaviour
	{
		[Token(Token = "0x4001917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float xLimits;

		[Token(Token = "0x4001918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float yLimits;

		[Token(Token = "0x4001919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(1f, 96f)]
		public float superness;

		[Token(Token = "0x400191A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float lastXLim;

		[Token(Token = "0x400191B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float lastYLim;

		[Token(Token = "0x400191C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float lastSuper;

		[Token(Token = "0x400191D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(1f, 32f)]
		[Space]
		public int levelOfDetail;

		[Token(Token = "0x400191E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int lastLoD;

		[Token(Token = "0x400191F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Space]
		public Material material;

		[Token(Token = "0x4001920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Vector2> pointList;

		[Token(Token = "0x6001605")]
		[Address(RVA = "0xFD4DE4", Offset = "0xFD4DE4", VA = "0xFD4DE4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001606")]
		[Address(RVA = "0xFD50D8", Offset = "0xFD50D8", VA = "0xFD50D8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001607")]
		[Address(RVA = "0xFD4E64", Offset = "0xFD4E64", VA = "0xFD4E64")]
		private void RecalculateSuperellipse()
		{
		}

		[Token(Token = "0x6001608")]
		[Address(RVA = "0xFD5154", Offset = "0xFD5154", VA = "0xFD5154")]
		private float Superellipse(float a, float b, float x, float n)
		{
			return default(float);
		}

		[Token(Token = "0x6001609")]
		[Address(RVA = "0xFD5190", Offset = "0xFD5190", VA = "0xFD5190")]
		public SuperellipsePoints()
		{
		}
	}
	[Token(Token = "0x2000408")]
	[ExecuteInEditMode]
	public class Triangulator
	{
		[Token(Token = "0x4001921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<Vector2> m_points;

		[Token(Token = "0x600160A")]
		[Address(RVA = "0xFD4948", Offset = "0xFD4948", VA = "0xFD4948")]
		public Triangulator(Vector2[] points)
		{
		}

		[Token(Token = "0x600160B")]
		[Address(RVA = "0xFD4A20", Offset = "0xFD4A20", VA = "0xFD4A20")]
		public int[] Triangulate()
		{
			return null;
		}

		[Token(Token = "0x600160C")]
		[Address(RVA = "0xFD5230", Offset = "0xFD5230", VA = "0xFD5230")]
		private float Area()
		{
			return default(float);
		}

		[Token(Token = "0x600160D")]
		[Address(RVA = "0xFD5318", Offset = "0xFD5318", VA = "0xFD5318")]
		private bool Snip(int u, int v, int w, int n, int[] V)
		{
			return default(bool);
		}

		[Token(Token = "0x600160E")]
		[Address(RVA = "0xFD5508", Offset = "0xFD5508", VA = "0xFD5508")]
		private bool InsideTriangle(Vector2 A, Vector2 B, Vector2 C, Vector2 P)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000409")]
	[RequireComponent(typeof(ScrollRect))]
	[AddComponentMenu("UI/Extensions/ContentSnapScrollHorizontal")]
	[ExecuteInEditMode]
	public class ContentScrollSnapHorizontal : MonoBehaviour, IBeginDragHandler, IEventSystemHandler, IEndDragHandler
	{
		[Serializable]
		[Token(Token = "0x200040A")]
		public class StartMovementEvent : UnityEvent
		{
			[Token(Token = "0x6001638")]
			[Address(RVA = "0xFD8720", Offset = "0xFD8720", VA = "0xFD8720")]
			public StartMovementEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200040B")]
		public class CurrentItemChangeEvent : UnityEvent<int>
		{
			[Token(Token = "0x6001639")]
			[Address(RVA = "0xFD8728", Offset = "0xFD8728", VA = "0xFD8728")]
			public CurrentItemChangeEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200040C")]
		public class FoundItemToSnapToEvent : UnityEvent<int>
		{
			[Token(Token = "0x600163A")]
			[Address(RVA = "0xFD8770", Offset = "0xFD8770", VA = "0xFD8770")]
			public FoundItemToSnapToEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200040D")]
		public class SnappedToItemEvent : UnityEvent<int>
		{
			[Token(Token = "0x600163B")]
			[Address(RVA = "0xFD87B8", Offset = "0xFD87B8", VA = "0xFD87B8")]
			public SnappedToItemEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200040E")]
		public struct MoveInfo
		{
			[Token(Token = "0x200040F")]
			public enum IndexType
			{
				[Token(Token = "0x400193E")]
				childIndex,
				[Token(Token = "0x400193F")]
				positionIndex
			}

			[Token(Token = "0x4001939")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Child Index means the Index corresponds to the content item at that index in the hierarchy.\nPosition Index means the Index corresponds to the content item in that snap position.\nA higher Position Index in a Horizontal Scroll Snap means it would be further to the right.")]
			public IndexType indexType;

			[Token(Token = "0x400193A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Tooltip("Zero based")]
			public int index;

			[Token(Token = "0x400193B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("If this is true the snap scroll will jump to the index, otherwise it will lerp there.")]
			public bool jump;

			[Token(Token = "0x400193C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Tooltip("If jump is false this is the time it will take to lerp to the index")]
			public float duration;

			[Token(Token = "0x600163C")]
			[Address(RVA = "0xFD8800", Offset = "0xFD8800", VA = "0xFD8800")]
			public MoveInfo(IndexType _indexType, int _index)
			{
			}

			[Token(Token = "0x600163D")]
			[Address(RVA = "0xFD8814", Offset = "0xFD8814", VA = "0xFD8814")]
			public MoveInfo(IndexType _indexType, int _index, bool _jump, float _duration)
			{
			}
		}

		[Token(Token = "0x2000410")]
		[CompilerGenerated]
		private sealed class <SlideAndLerp>d__70 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001940")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001941")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001942")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ContentScrollSnapHorizontal <>4__this;

			[Token(Token = "0x1700025E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001641")]
				[Address(RVA = "0xFD8B48", Offset = "0xFD8B48", VA = "0xFD8B48", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700025F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001643")]
				[Address(RVA = "0xFD8B90", Offset = "0xFD8B90", VA = "0xFD8B90", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600163E")]
			[Address(RVA = "0xFD8828", Offset = "0xFD8828", VA = "0xFD8828")]
			[DebuggerHidden]
			public <SlideAndLerp>d__70(int <>1__state)
			{
			}

			[Token(Token = "0x600163F")]
			[Address(RVA = "0xFD8850", Offset = "0xFD8850", VA = "0xFD8850", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001640")]
			[Address(RVA = "0xFD8854", Offset = "0xFD8854", VA = "0xFD8854", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001642")]
			[Address(RVA = "0xFD8B50", Offset = "0xFD8B50", VA = "0xFD8B50", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000411")]
		[CompilerGenerated]
		private sealed class <LerpToContent>d__71 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001943")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001944")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001945")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ContentScrollSnapHorizontal <>4__this;

			[Token(Token = "0x4001946")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector3 <originalContentPos>5__2;

			[Token(Token = "0x4001947")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <elapsedTime>5__3;

			[Token(Token = "0x17000260")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001647")]
				[Address(RVA = "0xFD8D5C", Offset = "0xFD8D5C", VA = "0xFD8D5C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000261")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001649")]
				[Address(RVA = "0xFD8DA4", Offset = "0xFD8DA4", VA = "0xFD8DA4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001644")]
			[Address(RVA = "0xFD8B98", Offset = "0xFD8B98", VA = "0xFD8B98")]
			[DebuggerHidden]
			public <LerpToContent>d__71(int <>1__state)
			{
			}

			[Token(Token = "0x6001645")]
			[Address(RVA = "0xFD8BC0", Offset = "0xFD8BC0", VA = "0xFD8BC0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001646")]
			[Address(RVA = "0xFD8BC4", Offset = "0xFD8BC4", VA = "0xFD8BC4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001648")]
			[Address(RVA = "0xFD8D64", Offset = "0xFD8D64", VA = "0xFD8D64", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool ignoreInactiveItems;

		[Token(Token = "0x4001923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public MoveInfo startInfo;

		[Token(Token = "0x4001924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject prevButton;

		[Token(Token = "0x4001925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject nextButton;

		[Token(Token = "0x4001926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject pagination;

		[Token(Token = "0x4001927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The velocity below which the scroll rect will start to snap")]
		public int snappingVelocityThreshold;

		[Token(Token = "0x4001928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Header("Paging Info")]
		[Tooltip("Should the pagination & buttons jump or lerp to the items")]
		public bool jumpToItem;

		[Token(Token = "0x4001929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The time it will take for the pagination or buttons to move between items")]
		public float lerpTime;

		[Token(Token = "0x400192A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event is triggered whenever the scroll rect starts to move, even when triggered programmatically")]
		[SerializeField]
		[Header("Events")]
		private StartMovementEvent m_StartMovementEvent;

		[Token(Token = "0x400192B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event is triggered whenever the closest item to the center of the scrollrect changes")]
		[SerializeField]
		private CurrentItemChangeEvent m_CurrentItemChangeEvent;

		[Token(Token = "0x400192C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		[Tooltip("Event is triggered when the ContentSnapScroll decides which item it is going to snap to. Returns the index of the closest position.")]
		private FoundItemToSnapToEvent m_FoundItemToSnapToEvent;

		[Token(Token = "0x400192D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		[Tooltip("Event is triggered when we finally settle on an element. Returns the index of the item's position.")]
		private SnappedToItemEvent m_SnappedToItemEvent;

		[Token(Token = "0x400192E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private ScrollRect scrollRect;

		[Token(Token = "0x400192F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private RectTransform scrollRectTransform;

		[Token(Token = "0x4001930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private RectTransform contentTransform;

		[Token(Token = "0x4001931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private List<Vector3> contentPositions;

		[Token(Token = "0x4001932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 lerpTarget;

		[Token(Token = "0x4001933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private float totalScrollableWidth;

		[Token(Token = "0x4001934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private DrivenRectTransformTracker tracker;

		[Token(Token = "0x4001935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float mLerpTime;

		[Token(Token = "0x4001936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private int _closestItem;

		[Token(Token = "0x4001937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private bool mSliding;

		[Token(Token = "0x4001938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB5")]
		private bool mLerping;

		[Token(Token = "0x17000253")]
		public StartMovementEvent MovementStarted
		{
			[Token(Token = "0x600160F")]
			[Address(RVA = "0xFD5584", Offset = "0xFD5584", VA = "0xFD5584")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001610")]
			[Address(RVA = "0xFD558C", Offset = "0xFD558C", VA = "0xFD558C")]
			set
			{
			}
		}

		[Token(Token = "0x17000254")]
		public CurrentItemChangeEvent CurrentItemChanged
		{
			[Token(Token = "0x6001611")]
			[Address(RVA = "0xFD5594", Offset = "0xFD5594", VA = "0xFD5594")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001612")]
			[Address(RVA = "0xFD559C", Offset = "0xFD559C", VA = "0xFD559C")]
			set
			{
			}
		}

		[Token(Token = "0x17000255")]
		public FoundItemToSnapToEvent ItemFoundToSnap
		{
			[Token(Token = "0x6001613")]
			[Address(RVA = "0xFD55A4", Offset = "0xFD55A4", VA = "0xFD55A4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001614")]
			[Address(RVA = "0xFD55AC", Offset = "0xFD55AC", VA = "0xFD55AC")]
			set
			{
			}
		}

		[Token(Token = "0x17000256")]
		public SnappedToItemEvent ItemSnappedTo
		{
			[Token(Token = "0x6001615")]
			[Address(RVA = "0xFD55B4", Offset = "0xFD55B4", VA = "0xFD55B4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001616")]
			[Address(RVA = "0xFD55BC", Offset = "0xFD55BC", VA = "0xFD55BC")]
			set
			{
			}
		}

		[Token(Token = "0x17000257")]
		private bool ContentIsHorizonalLayoutGroup
		{
			[Token(Token = "0x6001617")]
			[Address(RVA = "0xFD55C4", Offset = "0xFD55C4", VA = "0xFD55C4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000258")]
		public bool Moving
		{
			[Token(Token = "0x6001618")]
			[Address(RVA = "0xFD5650", Offset = "0xFD5650", VA = "0xFD5650")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000259")]
		public bool Sliding
		{
			[Token(Token = "0x6001619")]
			[Address(RVA = "0xFD5670", Offset = "0xFD5670", VA = "0xFD5670")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700025A")]
		public bool Lerping
		{
			[Token(Token = "0x600161A")]
			[Address(RVA = "0xFD5678", Offset = "0xFD5678", VA = "0xFD5678")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700025B")]
		public int ClosestItemIndex
		{
			[Token(Token = "0x600161B")]
			[Address(RVA = "0xFD5680", Offset = "0xFD5680", VA = "0xFD5680")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700025C")]
		public int LerpTargetIndex
		{
			[Token(Token = "0x600161C")]
			[Address(RVA = "0xFD5934", Offset = "0xFD5934", VA = "0xFD5934")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700025D")]
		private bool IsScrollRectAvailable
		{
			[Token(Token = "0x600161F")]
			[Address(RVA = "0xFD5C1C", Offset = "0xFD5C1C", VA = "0xFD5C1C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600161D")]
		[Address(RVA = "0xFD598C", Offset = "0xFD598C", VA = "0xFD598C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600161E")]
		[Address(RVA = "0xFD60C8", Offset = "0xFD60C8", VA = "0xFD60C8")]
		public void SetNewItems(ref List<Transform> newItems)
		{
		}

		[Token(Token = "0x6001620")]
		[Address(RVA = "0xFD63E4", Offset = "0xFD63E4", VA = "0xFD63E4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001621")]
		[Address(RVA = "0xFD5CCC", Offset = "0xFD5CCC", VA = "0xFD5CCC")]
		private void SetupDrivenTransforms()
		{
		}

		[Token(Token = "0x6001622")]
		[Address(RVA = "0xFD5FF0", Offset = "0xFD5FF0", VA = "0xFD5FF0")]
		private void SetupSnapScroll()
		{
		}

		[Token(Token = "0x6001623")]
		[Address(RVA = "0xFD63F0", Offset = "0xFD63F0", VA = "0xFD63F0")]
		private void SetupWithHorizontalLayoutGroup()
		{
		}

		[Token(Token = "0x6001624")]
		[Address(RVA = "0xFD682C", Offset = "0xFD682C", VA = "0xFD682C")]
		private void SetupWithCalculatedSpacing()
		{
		}

		[Token(Token = "0x6001625")]
		[Address(RVA = "0xFD6018", Offset = "0xFD6018", VA = "0xFD6018")]
		public void GoTo(MoveInfo info)
		{
		}

		[Token(Token = "0x6001626")]
		[Address(RVA = "0xFD6CF8", Offset = "0xFD6CF8", VA = "0xFD6CF8")]
		private void GoToChild(int index, bool jump)
		{
		}

		[Token(Token = "0x6001627")]
		[Address(RVA = "0xFD6FA4", Offset = "0xFD6FA4", VA = "0xFD6FA4")]
		private void GoToContentPos(int index, bool jump)
		{
		}

		[Token(Token = "0x6001628")]
		[Address(RVA = "0xFD7130", Offset = "0xFD7130", VA = "0xFD7130")]
		public void NextItem()
		{
		}

		[Token(Token = "0x6001629")]
		[Address(RVA = "0xFD7190", Offset = "0xFD7190", VA = "0xFD7190")]
		public void PreviousItem()
		{
		}

		[Token(Token = "0x600162A")]
		[Address(RVA = "0xFD71F0", Offset = "0xFD71F0", VA = "0xFD71F0")]
		public void UpdateLayout()
		{
		}

		[Token(Token = "0x600162B")]
		[Address(RVA = "0xFD7208", Offset = "0xFD7208", VA = "0xFD7208")]
		public void UpdateLayoutAndMoveTo(MoveInfo info)
		{
		}

		[Token(Token = "0x600162C")]
		[Address(RVA = "0xFD7240", Offset = "0xFD7240", VA = "0xFD7240", Slot = "4")]
		public void OnBeginDrag(PointerEventData ped)
		{
		}

		[Token(Token = "0x600162D")]
		[Address(RVA = "0xFD727C", Offset = "0xFD727C", VA = "0xFD727C", Slot = "5")]
		public void OnEndDrag(PointerEventData ped)
		{
		}

		[Token(Token = "0x600162E")]
		[Address(RVA = "0xFD72E0", Offset = "0xFD72E0", VA = "0xFD72E0")]
		private void Update()
		{
		}

		[Token(Token = "0x600162F")]
		[Address(RVA = "0xFD7480", Offset = "0xFD7480", VA = "0xFD7480")]
		[IteratorStateMachine(typeof(<SlideAndLerp>d__70))]
		private IEnumerator SlideAndLerp()
		{
			return null;
		}

		[Token(Token = "0x6001630")]
		[Address(RVA = "0xFD74F4", Offset = "0xFD74F4", VA = "0xFD74F4")]
		[IteratorStateMachine(typeof(<LerpToContent>d__71))]
		private IEnumerator LerpToContent()
		{
			return null;
		}

		[Token(Token = "0x6001631")]
		[Address(RVA = "0xFD707C", Offset = "0xFD707C", VA = "0xFD707C")]
		private void StopMovement()
		{
		}

		[Token(Token = "0x6001632")]
		[Address(RVA = "0xFD7384", Offset = "0xFD7384", VA = "0xFD7384")]
		private void ChangePaginationInfo(int targetScreen)
		{
		}

		[Token(Token = "0x6001633")]
		[Address(RVA = "0xFD6C54", Offset = "0xFD6C54", VA = "0xFD6C54")]
		private Vector2 DstFromTopLeftOfTransformToTopLeftOfParent(RectTransform rt)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001634")]
		[Address(RVA = "0xFD56EC", Offset = "0xFD56EC", VA = "0xFD56EC")]
		private Vector3 FindClosestFrom(Vector3 start)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001635")]
		[Address(RVA = "0xFD7568", Offset = "0xFD7568", VA = "0xFD7568")]
		public ContentScrollSnapHorizontal()
		{
		}
	}
	[Token(Token = "0x2000412")]
	[AddComponentMenu("Layout/Extensions/Curved Layout")]
	public class CurvedLayout : LayoutGroup
	{
		[Token(Token = "0x4001948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector3 CurveOffset;

		[Token(Token = "0x4001949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("axis along which to place the items, Normalized before use")]
		public Vector3 itemAxis;

		[Token(Token = "0x400194A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("size of each item along the Normalized axis")]
		public float itemSize;

		[Token(Token = "0x400194B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float centerpoint;

		[Token(Token = "0x600164A")]
		[Address(RVA = "0xFD8DAC", Offset = "0xFD8DAC", VA = "0xFD8DAC", Slot = "5")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x600164B")]
		[Address(RVA = "0xFD913C", Offset = "0xFD913C", VA = "0xFD913C", Slot = "37")]
		public override void SetLayoutHorizontal()
		{
		}

		[Token(Token = "0x600164C")]
		[Address(RVA = "0xFD9140", Offset = "0xFD9140", VA = "0xFD9140", Slot = "38")]
		public override void SetLayoutVertical()
		{
		}

		[Token(Token = "0x600164D")]
		[Address(RVA = "0xFD9144", Offset = "0xFD9144", VA = "0xFD9144", Slot = "29")]
		public override void CalculateLayoutInputVertical()
		{
		}

		[Token(Token = "0x600164E")]
		[Address(RVA = "0xFD9148", Offset = "0xFD9148", VA = "0xFD9148", Slot = "28")]
		public override void CalculateLayoutInputHorizontal()
		{
		}

		[Token(Token = "0x600164F")]
		[Address(RVA = "0xFD8DC8", Offset = "0xFD8DC8", VA = "0xFD8DC8")]
		private void CalculateRadial()
		{
		}

		[Token(Token = "0x6001650")]
		[Address(RVA = "0xFD914C", Offset = "0xFD914C", VA = "0xFD914C")]
		public CurvedLayout()
		{
		}
	}
	[Token(Token = "0x2000413")]
	public abstract class FancyCell<TItemData, TContext> : MonoBehaviour where TContext : class, new()
	{
		[Token(Token = "0x17000262")]
		public int Index
		{
			[Token(Token = "0x6001651")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001652")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000263")]
		public virtual bool IsVisible
		{
			[Token(Token = "0x6001653")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000264")]
		protected TContext Context
		{
			[Token(Token = "0x6001654")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001655")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001656")]
		public virtual void SetContext(TContext context)
		{
		}

		[Token(Token = "0x6001657")]
		public virtual void Initialize()
		{
		}

		[Token(Token = "0x6001658")]
		public virtual void SetVisible(bool visible)
		{
		}

		[Token(Token = "0x6001659")]
		public abstract void UpdateContent(TItemData itemData);

		[Token(Token = "0x600165A")]
		public abstract void UpdatePosition(float position);

		[Token(Token = "0x600165B")]
		protected FancyCell()
		{
		}
	}
	[Token(Token = "0x2000414")]
	public abstract class FancyCell<TItemData> : FancyCell<TItemData, NullContext>
	{
		[Token(Token = "0x600165C")]
		public sealed override void SetContext(NullContext context)
		{
		}

		[Token(Token = "0x600165D")]
		protected FancyCell()
		{
		}
	}
	[Token(Token = "0x2000415")]
	public abstract class FancyScrollView<TItemData, TContext> : MonoBehaviour where TContext : class, new()
	{
		[Token(Token = "0x400194E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		[Range(0.01f, 1f)]
		protected float cellInterval;

		[Token(Token = "0x400194F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		[Range(0f, 1f)]
		protected float scrollOffset;

		[Token(Token = "0x4001950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		protected bool loop;

		[Token(Token = "0x4001951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		protected Transform cellContainer;

		[Token(Token = "0x4001952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IList<FancyCell<TItemData, TContext>> pool;

		[Token(Token = "0x4001953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected bool initialized;

		[Token(Token = "0x4001954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected float currentPosition;

		[Token(Token = "0x17000265")]
		protected abstract GameObject CellPrefab
		{
			[Token(Token = "0x600165E")]
			get;
		}

		[Token(Token = "0x17000266")]
		protected IList<TItemData> ItemsSource
		{
			[Token(Token = "0x600165F")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001660")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000267")]
		protected TContext Context
		{
			[Token(Token = "0x6001661")]
			[CompilerGenerated]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001662")]
		protected virtual void Initialize()
		{
		}

		[Token(Token = "0x6001663")]
		protected virtual void UpdateContents(IList<TItemData> itemsSource)
		{
		}

		[Token(Token = "0x6001664")]
		protected virtual void Relayout()
		{
		}

		[Token(Token = "0x6001665")]
		protected virtual void Refresh()
		{
		}

		[Token(Token = "0x6001666")]
		protected virtual void UpdatePosition(float position)
		{
		}

		[Token(Token = "0x6001667")]
		private void UpdatePosition(float position, bool forceRefresh)
		{
		}

		[Token(Token = "0x6001668")]
		private void ResizePool(float firstPosition)
		{
		}

		[Token(Token = "0x6001669")]
		private void UpdateCells(float firstPosition, int firstIndex, bool forceRefresh)
		{
		}

		[Token(Token = "0x600166A")]
		private int CircularIndex(int i, int size)
		{
			return default(int);
		}

		[Token(Token = "0x600166B")]
		protected FancyScrollView()
		{
		}
	}
	[Token(Token = "0x2000416")]
	public sealed class NullContext
	{
		[Token(Token = "0x600166C")]
		[Address(RVA = "0xFD915C", Offset = "0xFD915C", VA = "0xFD915C")]
		public NullContext()
		{
		}
	}
	[Token(Token = "0x2000417")]
	public abstract class FancyScrollView<TItemData> : FancyScrollView<TItemData, NullContext>
	{
		[Token(Token = "0x600166D")]
		protected FancyScrollView()
		{
		}
	}
	[Token(Token = "0x2000418")]
	public abstract class FancyCellGroup<TItemData, TContext> : FancyCell<TItemData[], TContext> where TContext : class, IFancyCellGroupContext, new()
	{
		[Token(Token = "0x17000268")]
		protected virtual FancyCell<TItemData, TContext>[] Cells
		{
			[Token(Token = "0x600166E")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600166F")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001670")]
		protected virtual FancyCell<TItemData, TContext>[] InstantiateCells()
		{
			return null;
		}

		[Token(Token = "0x6001671")]
		public override void Initialize()
		{
		}

		[Token(Token = "0x6001672")]
		public override void UpdateContent(TItemData[] contents)
		{
		}

		[Token(Token = "0x6001673")]
		public override void UpdatePosition(float position)
		{
		}

		[Token(Token = "0x6001674")]
		protected FancyCellGroup()
		{
		}
	}
	[Token(Token = "0x200041A")]
	public abstract class FancyGridView<TItemData, TContext> : FancyScrollRect<TItemData[], TContext> where TContext : class, IFancyGridViewContext, new()
	{
		[Token(Token = "0x200041B")]
		protected abstract class DefaultCellGroup : FancyCellGroup<TItemData, TContext>
		{
			[Token(Token = "0x6001689")]
			protected DefaultCellGroup()
			{
			}
		}

		[Token(Token = "0x400195A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		protected float startAxisSpacing;

		[Token(Token = "0x400195B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		protected int startAxisCellCount;

		[Token(Token = "0x400195C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		protected Vector2 cellSize;

		[Token(Token = "0x400195E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private GameObject cellGroupTemplate;

		[Token(Token = "0x17000269")]
		protected sealed override GameObject CellPrefab
		{
			[Token(Token = "0x6001679")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700026A")]
		protected override float CellSize
		{
			[Token(Token = "0x600167A")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700026B")]
		public int DataCount
		{
			[Token(Token = "0x600167B")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600167C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600167D")]
		protected override void Initialize()
		{
		}

		[Token(Token = "0x600167E")]
		protected abstract void SetupCellTemplate();

		[Token(Token = "0x600167F")]
		protected virtual void Setup<TGroup>(FancyCell<TItemData, TContext> cellTemplate) where TGroup : FancyCell<TItemData[], TContext>
		{
		}

		[Token(Token = "0x6001680")]
		public virtual void UpdateContents(IList<TItemData> items)
		{
		}

		[Token(Token = "0x6001681")]
		protected override void JumpTo(int itemIndex, float alignment = 0.5f)
		{
		}

		[Token(Token = "0x6001682")]
		protected override void ScrollTo(int itemIndex, float duration, float alignment = 0.5f, [Optional] Action onComplete)
		{
		}

		[Token(Token = "0x6001683")]
		protected override void ScrollTo(int itemIndex, float duration, Ease easing, float alignment = 0.5f, [Optional] Action onComplete)
		{
		}

		[Token(Token = "0x6001684")]
		protected FancyGridView()
		{
		}
	}
	[Token(Token = "0x200041D")]
	public abstract class FancyGridView<TItemData> : FancyGridView<TItemData, FancyGridViewContext>
	{
		[Token(Token = "0x600168F")]
		protected FancyGridView()
		{
		}
	}
	[Token(Token = "0x200041E")]
	public abstract class FancyGridViewCell<TItemData, TContext> : FancyScrollRectCell<TItemData, TContext> where TContext : class, IFancyGridViewContext, new()
	{
		[Token(Token = "0x6001690")]
		protected override void UpdatePosition(float normalizedPosition, float localPosition)
		{
		}

		[Token(Token = "0x6001691")]
		protected FancyGridViewCell()
		{
		}
	}
	[Token(Token = "0x200041F")]
	public abstract class FancyGridViewCell<TItemData> : FancyGridViewCell<TItemData, FancyGridViewContext>
	{
		[Token(Token = "0x6001692")]
		public sealed override void SetContext(FancyGridViewContext context)
		{
		}

		[Token(Token = "0x6001693")]
		protected FancyGridViewCell()
		{
		}
	}
	[Token(Token = "0x2000420")]
	public class FancyGridViewContext : IFancyGridViewContext, IFancyScrollRectContext, IFancyCellGroupContext
	{
		[Token(Token = "0x1700026C")]
		private ScrollDirection UnityEngine.UI.Extensions.IFancyScrollRectContext.ScrollDirection
		{
			[Token(Token = "0x6001694")]
			[Address(RVA = "0xFD9164", Offset = "0xFD9164", VA = "0xFD9164", Slot = "8")]
			[CompilerGenerated]
			get
			{
				return default(ScrollDirection);
			}
			[Token(Token = "0x6001695")]
			[Address(RVA = "0xFD916C", Offset = "0xFD916C", VA = "0xFD916C", Slot = "9")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700026D")]
		private Func<(float ScrollSize, float ReuseMargin)> UnityEngine.UI.Extensions.IFancyScrollRectContext.CalculateScrollSize
		{
			[Token(Token = "0x6001696")]
			[Address(RVA = "0xFD9174", Offset = "0xFD9174", VA = "0xFD9174", Slot = "10")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001697")]
			[Address(RVA = "0xFD917C", Offset = "0xFD917C", VA = "0xFD917C", Slot = "11")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700026E")]
		private GameObject UnityEngine.UI.Extensions.IFancyCellGroupContext.CellTemplate
		{
			[Token(Token = "0x6001698")]
			[Address(RVA = "0xFD9184", Offset = "0xFD9184", VA = "0xFD9184", Slot = "12")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001699")]
			[Address(RVA = "0xFD918C", Offset = "0xFD918C", VA = "0xFD918C", Slot = "13")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700026F")]
		private Func<int> UnityEngine.UI.Extensions.IFancyCellGroupContext.GetGroupCount
		{
			[Token(Token = "0x600169A")]
			[Address(RVA = "0xFD9194", Offset = "0xFD9194", VA = "0xFD9194", Slot = "14")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600169B")]
			[Address(RVA = "0xFD919C", Offset = "0xFD919C", VA = "0xFD919C", Slot = "15")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000270")]
		private Func<float> UnityEngine.UI.Extensions.IFancyGridViewContext.GetStartAxisSpacing
		{
			[Token(Token = "0x600169C")]
			[Address(RVA = "0xFD91A4", Offset = "0xFD91A4", VA = "0xFD91A4", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600169D")]
			[Address(RVA = "0xFD91AC", Offset = "0xFD91AC", VA = "0xFD91AC", Slot = "5")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000271")]
		private Func<float> UnityEngine.UI.Extensions.IFancyGridViewContext.GetCellSize
		{
			[Token(Token = "0x600169E")]
			[Address(RVA = "0xFD91B4", Offset = "0xFD91B4", VA = "0xFD91B4", Slot = "6")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600169F")]
			[Address(RVA = "0xFD91BC", Offset = "0xFD91BC", VA = "0xFD91BC", Slot = "7")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60016A0")]
		[Address(RVA = "0xFD91C4", Offset = "0xFD91C4", VA = "0xFD91C4")]
		public FancyGridViewContext()
		{
		}
	}
	[Token(Token = "0x2000421")]
	public interface IFancyCellGroupContext
	{
		[Token(Token = "0x17000272")]
		GameObject CellTemplate
		{
			[Token(Token = "0x60016A1")]
			get;
			[Token(Token = "0x60016A2")]
			set;
		}

		[Token(Token = "0x17000273")]
		Func<int> GetGroupCount
		{
			[Token(Token = "0x60016A3")]
			get;
			[Token(Token = "0x60016A4")]
			set;
		}
	}
	[Token(Token = "0x2000422")]
	public interface IFancyGridViewContext : IFancyScrollRectContext, IFancyCellGroupContext
	{
		[Token(Token = "0x17000274")]
		Func<float> GetStartAxisSpacing
		{
			[Token(Token = "0x60016A5")]
			get;
			[Token(Token = "0x60016A6")]
			set;
		}

		[Token(Token = "0x17000275")]
		Func<float> GetCellSize
		{
			[Token(Token = "0x60016A7")]
			get;
			[Token(Token = "0x60016A8")]
			set;
		}
	}
	[Token(Token = "0x2000423")]
	public enum MovementDirection
	{
		[Token(Token = "0x400196A")]
		Left,
		[Token(Token = "0x400196B")]
		Right,
		[Token(Token = "0x400196C")]
		Up,
		[Token(Token = "0x400196D")]
		Down
	}
	[Token(Token = "0x2000424")]
	public enum MovementType
	{
		[Token(Token = "0x400196F")]
		Unrestricted,
		[Token(Token = "0x4001970")]
		Elastic,
		[Token(Token = "0x4001971")]
		Clamped
	}
	[Token(Token = "0x2000425")]
	public enum ScrollDirection
	{
		[Token(Token = "0x4001973")]
		Vertical,
		[Token(Token = "0x4001974")]
		Horizontal
	}
	[Token(Token = "0x2000426")]
	public class Scroller : UIBehaviour, IPointerUpHandler, IEventSystemHandler, IPointerDownHandler, IBeginDragHandler, IEndDragHandler, IDragHandler, IScrollHandler
	{
		[Serializable]
		[Token(Token = "0x2000427")]
		private class Snap
		{
			[Token(Token = "0x400198C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool Enable;

			[Token(Token = "0x400198D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float VelocityThreshold;

			[Token(Token = "0x400198E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float Duration;

			[Token(Token = "0x400198F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Ease Easing;

			[Token(Token = "0x60016D5")]
			[Address(RVA = "0xFDAB8C", Offset = "0xFDAB8C", VA = "0xFDAB8C")]
			public Snap()
			{
			}
		}

		[Token(Token = "0x2000428")]
		private class AutoScrollState
		{
			[Token(Token = "0x4001990")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool Enable;

			[Token(Token = "0x4001991")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
			public bool Elastic;

			[Token(Token = "0x4001992")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float Duration;

			[Token(Token = "0x4001993")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public EasingFunction EasingFunction;

			[Token(Token = "0x4001994")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float StartTime;

			[Token(Token = "0x4001995")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float EndPosition;

			[Token(Token = "0x4001996")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Action OnComplete;

			[Token(Token = "0x60016D6")]
			[Address(RVA = "0xFD9318", Offset = "0xFD9318", VA = "0xFD9318")]
			public void Reset()
			{
			}

			[Token(Token = "0x60016D7")]
			[Address(RVA = "0xFDAA64", Offset = "0xFDAA64", VA = "0xFDAA64")]
			public void Complete()
			{
			}

			[Token(Token = "0x60016D8")]
			[Address(RVA = "0xFDAB94", Offset = "0xFDAB94", VA = "0xFDAB94")]
			public AutoScrollState()
			{
			}
		}

		[Token(Token = "0x4001975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private RectTransform viewport;

		[Token(Token = "0x4001976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private ScrollDirection scrollDirection;

		[Token(Token = "0x4001977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private MovementType movementType;

		[Token(Token = "0x4001978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float elasticity;

		[Token(Token = "0x4001979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float scrollSensitivity;

		[Token(Token = "0x400197A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private bool inertia;

		[Token(Token = "0x400197B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private float decelerationRate;

		[Token(Token = "0x400197C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Snap snap;

		[Token(Token = "0x400197D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private bool draggable;

		[Token(Token = "0x400197E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Scrollbar scrollbar;

		[Token(Token = "0x400197F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly AutoScrollState autoScrollState;

		[Token(Token = "0x4001980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Action<float> onValueChanged;

		[Token(Token = "0x4001981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Action<int> onSelectionChanged;

		[Token(Token = "0x4001982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector2 beginDragPointerPosition;

		[Token(Token = "0x4001983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float scrollStartPosition;

		[Token(Token = "0x4001984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float prevPosition;

		[Token(Token = "0x4001985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float currentPosition;

		[Token(Token = "0x4001986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int totalCount;

		[Token(Token = "0x4001987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool hold;

		[Token(Token = "0x4001988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		private bool scrolling;

		[Token(Token = "0x4001989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x82")]
		private bool dragging;

		[Token(Token = "0x400198A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float velocity;

		[Token(Token = "0x400198B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly EasingFunction DefaultEasingFunction;

		[Token(Token = "0x17000276")]
		public float ViewportSize
		{
			[Token(Token = "0x60016A9")]
			[Address(RVA = "0xFD91CC", Offset = "0xFD91CC", VA = "0xFD91CC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000277")]
		public ScrollDirection ScrollDirection
		{
			[Token(Token = "0x60016AA")]
			[Address(RVA = "0xFD921C", Offset = "0xFD921C", VA = "0xFD921C")]
			get
			{
				return default(ScrollDirection);
			}
		}

		[Token(Token = "0x17000278")]
		public MovementType MovementType
		{
			[Token(Token = "0x60016AB")]
			[Address(RVA = "0xFD9224", Offset = "0xFD9224", VA = "0xFD9224")]
			get
			{
				return default(MovementType);
			}
			[Token(Token = "0x60016AC")]
			[Address(RVA = "0xFD922C", Offset = "0xFD922C", VA = "0xFD922C")]
			set
			{
			}
		}

		[Token(Token = "0x17000279")]
		public float Elasticity
		{
			[Token(Token = "0x60016AD")]
			[Address(RVA = "0xFD9234", Offset = "0xFD9234", VA = "0xFD9234")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016AE")]
			[Address(RVA = "0xFD923C", Offset = "0xFD923C", VA = "0xFD923C")]
			set
			{
			}
		}

		[Token(Token = "0x1700027A")]
		public float ScrollSensitivity
		{
			[Token(Token = "0x60016AF")]
			[Address(RVA = "0xFD9244", Offset = "0xFD9244", VA = "0xFD9244")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016B0")]
			[Address(RVA = "0xFD924C", Offset = "0xFD924C", VA = "0xFD924C")]
			set
			{
			}
		}

		[Token(Token = "0x1700027B")]
		public bool Inertia
		{
			[Token(Token = "0x60016B1")]
			[Address(RVA = "0xFD9254", Offset = "0xFD9254", VA = "0xFD9254")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60016B2")]
			[Address(RVA = "0xFD925C", Offset = "0xFD925C", VA = "0xFD925C")]
			set
			{
			}
		}

		[Token(Token = "0x1700027C")]
		public float DecelerationRate
		{
			[Token(Token = "0x60016B3")]
			[Address(RVA = "0xFD9268", Offset = "0xFD9268", VA = "0xFD9268")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016B4")]
			[Address(RVA = "0xFD9270", Offset = "0xFD9270", VA = "0xFD9270")]
			set
			{
			}
		}

		[Token(Token = "0x1700027D")]
		public bool SnapEnabled
		{
			[Token(Token = "0x60016B5")]
			[Address(RVA = "0xFD9278", Offset = "0xFD9278", VA = "0xFD9278")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60016B6")]
			[Address(RVA = "0xFD9294", Offset = "0xFD9294", VA = "0xFD9294")]
			set
			{
			}
		}

		[Token(Token = "0x1700027E")]
		public bool Draggable
		{
			[Token(Token = "0x60016B7")]
			[Address(RVA = "0xFD92B4", Offset = "0xFD92B4", VA = "0xFD92B4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60016B8")]
			[Address(RVA = "0xFD92BC", Offset = "0xFD92BC", VA = "0xFD92BC")]
			set
			{
			}
		}

		[Token(Token = "0x1700027F")]
		public Scrollbar Scrollbar
		{
			[Token(Token = "0x60016B9")]
			[Address(RVA = "0xFD92C8", Offset = "0xFD92C8", VA = "0xFD92C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000280")]
		public float Position
		{
			[Token(Token = "0x60016BA")]
			[Address(RVA = "0xFD92D0", Offset = "0xFD92D0", VA = "0xFD92D0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016BB")]
			[Address(RVA = "0xFD92D8", Offset = "0xFD92D8", VA = "0xFD92D8")]
			set
			{
			}
		}

		[Token(Token = "0x60016BC")]
		[Address(RVA = "0xFD9488", Offset = "0xFD9488", VA = "0xFD9488", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60016BD")]
		[Address(RVA = "0xFD9580", Offset = "0xFD9580", VA = "0xFD9580")]
		public void OnValueChanged(Action<float> callback)
		{
		}

		[Token(Token = "0x60016BE")]
		[Address(RVA = "0xFD9588", Offset = "0xFD9588", VA = "0xFD9588")]
		public void OnSelectionChanged(Action<int> callback)
		{
		}

		[Token(Token = "0x60016BF")]
		[Address(RVA = "0xFD9590", Offset = "0xFD9590", VA = "0xFD9590")]
		public void SetTotalCount(int totalCount)
		{
		}

		[Token(Token = "0x60016C0")]
		[Address(RVA = "0xFD9598", Offset = "0xFD9598", VA = "0xFD9598")]
		public void ScrollTo(float position, float duration, [Optional] Action onComplete)
		{
		}

		[Token(Token = "0x60016C1")]
		[Address(RVA = "0xFD95E4", Offset = "0xFD95E4", VA = "0xFD95E4")]
		public void ScrollTo(float position, float duration, Ease easing, [Optional] Action onComplete)
		{
		}

		[Token(Token = "0x60016C2")]
		[Address(RVA = "0xFD9630", Offset = "0xFD9630", VA = "0xFD9630")]
		public void ScrollTo(float position, float duration, EasingFunction easingFunction, [Optional] Action onComplete)
		{
		}

		[Token(Token = "0x60016C3")]
		[Address(RVA = "0xFD9A58", Offset = "0xFD9A58", VA = "0xFD9A58")]
		public void JumpTo(int index)
		{
		}

		[Token(Token = "0x60016C4")]
		[Address(RVA = "0xFD9AF8", Offset = "0xFD9AF8", VA = "0xFD9AF8")]
		public MovementDirection GetMovementDirection(int sourceIndex, int destIndex)
		{
			return default(MovementDirection);
		}

		[Token(Token = "0x60016C5")]
		[Address(RVA = "0xFD9B40", Offset = "0xFD9B40", VA = "0xFD9B40", Slot = "18")]
		private void UnityEngine.EventSystems.IPointerDownHandler.OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60016C6")]
		[Address(RVA = "0xFD9B84", Offset = "0xFD9B84", VA = "0xFD9B84", Slot = "17")]
		private void UnityEngine.EventSystems.IPointerUpHandler.OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60016C7")]
		[Address(RVA = "0xFD9DCC", Offset = "0xFD9DCC", VA = "0xFD9DCC", Slot = "22")]
		private void UnityEngine.EventSystems.IScrollHandler.OnScroll(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60016C8")]
		[Address(RVA = "0xFD9F1C", Offset = "0xFD9F1C", VA = "0xFD9F1C", Slot = "19")]
		private void UnityEngine.EventSystems.IBeginDragHandler.OnBeginDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60016C9")]
		[Address(RVA = "0xFDA000", Offset = "0xFDA000", VA = "0xFDA000", Slot = "21")]
		private void UnityEngine.EventSystems.IDragHandler.OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60016CA")]
		[Address(RVA = "0xFDA1D8", Offset = "0xFDA1D8", VA = "0xFDA1D8", Slot = "20")]
		private void UnityEngine.EventSystems.IEndDragHandler.OnEndDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60016CB")]
		[Address(RVA = "0xFD9EDC", Offset = "0xFD9EDC", VA = "0xFD9EDC")]
		private float CalculateOffset(float position)
		{
			return default(float);
		}

		[Token(Token = "0x60016CC")]
		[Address(RVA = "0xFD939C", Offset = "0xFD939C", VA = "0xFD939C")]
		private void UpdatePosition(float position, bool updateScrollbar = true)
		{
		}

		[Token(Token = "0x60016CD")]
		[Address(RVA = "0xFD9A3C", Offset = "0xFD9A3C", VA = "0xFD9A3C")]
		private void UpdateSelection(int index)
		{
		}

		[Token(Token = "0x60016CE")]
		[Address(RVA = "0xFDA19C", Offset = "0xFDA19C", VA = "0xFDA19C")]
		private float RubberDelta(float overStretching, float viewSize)
		{
			return default(float);
		}

		[Token(Token = "0x60016CF")]
		[Address(RVA = "0xFDA200", Offset = "0xFDA200", VA = "0xFDA200")]
		private void Update()
		{
		}

		[Token(Token = "0x60016D0")]
		[Address(RVA = "0xFD9934", Offset = "0xFD9934", VA = "0xFD9934")]
		private float CalculateMovementAmount(float sourcePosition, float destPosition)
		{
			return default(float);
		}

		[Token(Token = "0x60016D1")]
		[Address(RVA = "0xFD98E4", Offset = "0xFD98E4", VA = "0xFD98E4")]
		private float CircularPosition(float p, int size)
		{
			return default(float);
		}

		[Token(Token = "0x60016D2")]
		[Address(RVA = "0xFDAA90", Offset = "0xFDAA90", VA = "0xFDAA90")]
		public Scroller()
		{
		}
	}
	[Token(Token = "0x2000429")]
	[RequireComponent(typeof(Scroller))]
	public abstract class FancyScrollRect<TItemData, TContext> : FancyScrollView<TItemData, TContext> where TContext : class, IFancyScrollRectContext, new()
	{
		[Token(Token = "0x4001997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		protected float reuseCellMarginCount;

		[Token(Token = "0x4001998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		protected float paddingHead;

		[Token(Token = "0x4001999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		protected float paddingTail;

		[Token(Token = "0x400199A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		protected float spacing;

		[Token(Token = "0x400199B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Scroller cachedScroller;

		[Token(Token = "0x17000281")]
		protected abstract float CellSize
		{
			[Token(Token = "0x60016D9")]
			get;
		}

		[Token(Token = "0x17000282")]
		protected virtual bool Scrollable
		{
			[Token(Token = "0x60016DA")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000283")]
		protected Scroller Scroller
		{
			[Token(Token = "0x60016DB")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000284")]
		private float ScrollLength
		{
			[Token(Token = "0x60016DC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000285")]
		private float ViewportLength
		{
			[Token(Token = "0x60016DD")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000286")]
		private float PaddingHeadLength
		{
			[Token(Token = "0x60016DE")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000287")]
		private float MaxScrollPosition
		{
			[Token(Token = "0x60016DF")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60016E0")]
		protected override void Initialize()
		{
		}

		[Token(Token = "0x60016E1")]
		private void OnScrollerValueChanged(float p)
		{
		}

		[Token(Token = "0x60016E2")]
		private void ShrinkScrollbar(float offset)
		{
		}

		[Token(Token = "0x60016E3")]
		protected override void Refresh()
		{
		}

		[Token(Token = "0x60016E4")]
		protected override void Relayout()
		{
		}

		[Token(Token = "0x60016E5")]
		protected void RefreshScroller()
		{
		}

		[Token(Token = "0x60016E6")]
		protected override void UpdateContents(IList<TItemData> items)
		{
		}

		[Token(Token = "0x60016E7")]
		protected new void UpdatePosition(float position)
		{
		}

		[Token(Token = "0x60016E8")]
		protected virtual void JumpTo(int itemIndex, float alignment = 0.5f)
		{
		}

		[Token(Token = "0x60016E9")]
		protected virtual void ScrollTo(int index, float duration, float alignment = 0.5f, [Optional] Action onComplete)
		{
		}

		[Token(Token = "0x60016EA")]
		protected virtual void ScrollTo(int index, float duration, Ease easing, float alignment = 0.5f, [Optional] Action onComplete)
		{
		}

		[Token(Token = "0x60016EB")]
		protected void UpdateScrollbarSize(float viewportLength)
		{
		}

		[Token(Token = "0x60016EC")]
		protected float ToFancyScrollViewPosition(float position)
		{
			return default(float);
		}

		[Token(Token = "0x60016ED")]
		protected float ToScrollerPosition(float position)
		{
			return default(float);
		}

		[Token(Token = "0x60016EE")]
		protected float ToScrollerPosition(float position, float alignment = 0.5f)
		{
			return default(float);
		}

		[Token(Token = "0x60016EF")]
		protected void AdjustCellIntervalAndScrollOffset()
		{
		}

		[Token(Token = "0x60016F0")]
		protected virtual void OnValidate()
		{
		}

		[Token(Token = "0x60016F1")]
		protected FancyScrollRect()
		{
		}
	}
	[Token(Token = "0x200042A")]
	public abstract class FancyScrollRect<TItemData> : FancyScrollRect<TItemData, FancyScrollRectContext>
	{
		[Token(Token = "0x60016F3")]
		protected FancyScrollRect()
		{
		}
	}
	[Token(Token = "0x200042B")]
	public abstract class FancyScrollRectCell<TItemData, TContext> : FancyCell<TItemData, TContext> where TContext : class, IFancyScrollRectContext, new()
	{
		[Token(Token = "0x60016F4")]
		public override void UpdatePosition(float position)
		{
		}

		[Token(Token = "0x60016F5")]
		protected virtual void UpdatePosition(float normalizedPosition, float localPosition)
		{
		}

		[Token(Token = "0x60016F6")]
		protected FancyScrollRectCell()
		{
		}
	}
	[Token(Token = "0x200042C")]
	public abstract class FancyScrollRectCell<TItemData> : FancyScrollRectCell<TItemData, FancyScrollRectContext>
	{
		[Token(Token = "0x60016F7")]
		public sealed override void SetContext(FancyScrollRectContext context)
		{
		}

		[Token(Token = "0x60016F8")]
		protected FancyScrollRectCell()
		{
		}
	}
	[Token(Token = "0x200042D")]
	public class FancyScrollRectContext : IFancyScrollRectContext
	{
		[Token(Token = "0x17000288")]
		private ScrollDirection UnityEngine.UI.Extensions.IFancyScrollRectContext.ScrollDirection
		{
			[Token(Token = "0x60016F9")]
			[Address(RVA = "0xFDAC18", Offset = "0xFDAC18", VA = "0xFDAC18", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return default(ScrollDirection);
			}
			[Token(Token = "0x60016FA")]
			[Address(RVA = "0xFDAC20", Offset = "0xFDAC20", VA = "0xFDAC20", Slot = "5")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000289")]
		private Func<(float ScrollSize, float ReuseMargin)> UnityEngine.UI.Extensions.IFancyScrollRectContext.CalculateScrollSize
		{
			[Token(Token = "0x60016FB")]
			[Address(RVA = "0xFDAC28", Offset = "0xFDAC28", VA = "0xFDAC28", Slot = "6")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60016FC")]
			[Address(RVA = "0xFDAC30", Offset = "0xFDAC30", VA = "0xFDAC30", Slot = "7")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60016FD")]
		[Address(RVA = "0xFDAC38", Offset = "0xFDAC38", VA = "0xFDAC38")]
		public FancyScrollRectContext()
		{
		}
	}
	[Token(Token = "0x200042E")]
	public interface IFancyScrollRectContext
	{
		[Token(Token = "0x1700028A")]
		ScrollDirection ScrollDirection
		{
			[Token(Token = "0x60016FE")]
			get;
			[Token(Token = "0x60016FF")]
			set;
		}

		[Token(Token = "0x1700028B")]
		Func<(float ScrollSize, float ReuseMargin)> CalculateScrollSize
		{
			[Token(Token = "0x6001700")]
			get;
			[Token(Token = "0x6001701")]
			set;
		}
	}
	[Token(Token = "0x200042F")]
	[AddComponentMenu("Layout/Extensions/Flow Layout Group")]
	public class FlowLayoutGroup : LayoutGroup
	{
		[Token(Token = "0x2000430")]
		public enum Axis
		{
			[Token(Token = "0x40019A9")]
			Horizontal,
			[Token(Token = "0x40019AA")]
			Vertical
		}

		[Token(Token = "0x400199E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float SpacingX;

		[Token(Token = "0x400199F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float SpacingY;

		[Token(Token = "0x40019A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool ExpandHorizontalSpacing;

		[Token(Token = "0x40019A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		public bool ChildForceExpandWidth;

		[Token(Token = "0x40019A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		public bool ChildForceExpandHeight;

		[Token(Token = "0x40019A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		public bool invertOrder;

		[Token(Token = "0x40019A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float _layoutHeight;

		[Token(Token = "0x40019A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float _layoutWidth;

		[Token(Token = "0x40019A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		protected Axis m_StartAxis;

		[Token(Token = "0x40019A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly IList<RectTransform> _itemList;

		[Token(Token = "0x1700028C")]
		public Axis startAxis
		{
			[Token(Token = "0x6001702")]
			[Address(RVA = "0xFDAC40", Offset = "0xFDAC40", VA = "0xFDAC40")]
			get
			{
				return default(Axis);
			}
			[Token(Token = "0x6001703")]
			[Address(RVA = "0xFDAC48", Offset = "0xFDAC48", VA = "0xFDAC48")]
			set
			{
			}
		}

		[Token(Token = "0x1700028D")]
		protected bool IsCenterAlign
		{
			[Token(Token = "0x6001708")]
			[Address(RVA = "0xFDB78C", Offset = "0xFDB78C", VA = "0xFDB78C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700028E")]
		protected bool IsRightAlign
		{
			[Token(Token = "0x6001709")]
			[Address(RVA = "0xFDB7B8", Offset = "0xFDB7B8", VA = "0xFDB7B8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700028F")]
		protected bool IsMiddleAlign
		{
			[Token(Token = "0x600170A")]
			[Address(RVA = "0xFDB7E4", Offset = "0xFDB7E4", VA = "0xFDB7E4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000290")]
		protected bool IsLowerAlign
		{
			[Token(Token = "0x600170B")]
			[Address(RVA = "0xFDB808", Offset = "0xFDB808", VA = "0xFDB808")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001704")]
		[Address(RVA = "0xFDACA4", Offset = "0xFDACA4", VA = "0xFDACA4", Slot = "28")]
		public override void CalculateLayoutInputHorizontal()
		{
		}

		[Token(Token = "0x6001705")]
		[Address(RVA = "0xFDB620", Offset = "0xFDB620", VA = "0xFDB620", Slot = "37")]
		public override void SetLayoutHorizontal()
		{
		}

		[Token(Token = "0x6001706")]
		[Address(RVA = "0xFDB62C", Offset = "0xFDB62C", VA = "0xFDB62C", Slot = "38")]
		public override void SetLayoutVertical()
		{
		}

		[Token(Token = "0x6001707")]
		[Address(RVA = "0xFDB638", Offset = "0xFDB638", VA = "0xFDB638", Slot = "29")]
		public override void CalculateLayoutInputVertical()
		{
		}

		[Token(Token = "0x600170C")]
		[Address(RVA = "0xFDADF8", Offset = "0xFDADF8", VA = "0xFDADF8")]
		public float SetLayout(int axis, bool layoutInput)
		{
			return default(float);
		}

		[Token(Token = "0x600170D")]
		[Address(RVA = "0xFDB82C", Offset = "0xFDB82C", VA = "0xFDB82C")]
		private float CalculateRowVerticalOffset(float groupHeight, float yOffset, float currentRowHeight)
		{
			return default(float);
		}

		[Token(Token = "0x600170E")]
		[Address(RVA = "0xFDBE4C", Offset = "0xFDBE4C", VA = "0xFDBE4C")]
		private float CalculateColHorizontalOffset(float groupWidth, float xOffset, float currentColWidth)
		{
			return default(float);
		}

		[Token(Token = "0x600170F")]
		[Address(RVA = "0xFDB874", Offset = "0xFDB874", VA = "0xFDB874")]
		protected void LayoutRow(IList<RectTransform> contents, float rowWidth, float rowHeight, float maxWidth, float xOffset, float yOffset, int axis)
		{
		}

		[Token(Token = "0x6001710")]
		[Address(RVA = "0xFDBEA4", Offset = "0xFDBEA4", VA = "0xFDBEA4")]
		protected void LayoutCol(IList<RectTransform> contents, float colWidth, float colHeight, float maxHeight, float xOffset, float yOffset, int axis)
		{
		}

		[Token(Token = "0x6001711")]
		[Address(RVA = "0xFDAD58", Offset = "0xFDAD58", VA = "0xFDAD58")]
		public float GetGreatestMinimumChildWidth()
		{
			return default(float);
		}

		[Token(Token = "0x6001712")]
		[Address(RVA = "0xFDB6EC", Offset = "0xFDB6EC", VA = "0xFDB6EC")]
		public float GetGreatestMinimumChildHeigth()
		{
			return default(float);
		}

		[Token(Token = "0x6001713")]
		[Address(RVA = "0xFDC490", Offset = "0xFDC490", VA = "0xFDC490")]
		public FlowLayoutGroup()
		{
		}
	}
	[Token(Token = "0x2000431")]
	[RequireComponent(typeof(ScrollRect))]
	[AddComponentMenu("Layout/Extensions/Horizontal Scroll Snap")]
	public class HorizontalScrollSnap : ScrollSnapBase
	{
		[Token(Token = "0x40019AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private bool updated;

		[Token(Token = "0x6001714")]
		[Address(RVA = "0xFDC518", Offset = "0xFDC518", VA = "0xFDC518")]
		private void Start()
		{
		}

		[Token(Token = "0x6001715")]
		[Address(RVA = "0xFDC63C", Offset = "0xFDC63C", VA = "0xFDC63C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001716")]
		[Address(RVA = "0xFDCDF8", Offset = "0xFDCDF8", VA = "0xFDCDF8")]
		private bool IsRectMovingSlowerThanThreshold(float startingSpeed)
		{
			return default(bool);
		}

		[Token(Token = "0x6001717")]
		[Address(RVA = "0xFDCE58", Offset = "0xFDCE58", VA = "0xFDCE58")]
		public void DistributePages()
		{
		}

		[Token(Token = "0x6001718")]
		[Address(RVA = "0xFDD0B0", Offset = "0xFDD0B0", VA = "0xFDD0B0")]
		public void AddChild(GameObject GO)
		{
		}

		[Token(Token = "0x6001719")]
		[Address(RVA = "0xFDD0B8", Offset = "0xFDD0B8", VA = "0xFDD0B8")]
		public void AddChild(GameObject GO, bool WorldPositionStays)
		{
		}

		[Token(Token = "0x600171A")]
		[Address(RVA = "0xFDD7F4", Offset = "0xFDD7F4", VA = "0xFDD7F4")]
		public void RemoveChild(int index, out GameObject ChildRemoved)
		{
		}

		[Token(Token = "0x600171B")]
		[Address(RVA = "0xFDD800", Offset = "0xFDD800", VA = "0xFDD800")]
		public void RemoveChild(int index, bool WorldPositionStays, out GameObject ChildRemoved)
		{
		}

		[Token(Token = "0x600171C")]
		[Address(RVA = "0xFDD958", Offset = "0xFDD958", VA = "0xFDD958")]
		public void RemoveAllChildren(out GameObject[] ChildrenRemoved)
		{
		}

		[Token(Token = "0x600171D")]
		[Address(RVA = "0xFDD964", Offset = "0xFDD964", VA = "0xFDD964")]
		public void RemoveAllChildren(bool WorldPositionStays, out GameObject[] ChildrenRemoved)
		{
		}

		[Token(Token = "0x600171E")]
		[Address(RVA = "0xFDD784", Offset = "0xFDD784", VA = "0xFDD784")]
		private void SetScrollContainerPosition()
		{
		}

		[Token(Token = "0x600171F")]
		[Address(RVA = "0xFDC5A4", Offset = "0xFDC5A4", VA = "0xFDC5A4")]
		public void UpdateLayout()
		{
		}

		[Token(Token = "0x6001720")]
		[Address(RVA = "0xFDDB60", Offset = "0xFDDB60", VA = "0xFDDB60")]
		private void OnRectTransformDimensionsChange()
		{
		}

		[Token(Token = "0x6001721")]
		[Address(RVA = "0xFDDBE8", Offset = "0xFDDBE8", VA = "0xFDDBE8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001722")]
		[Address(RVA = "0xFDDD0C", Offset = "0xFDDD0C", VA = "0xFDDD0C", Slot = "12")]
		public override void OnEndDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001723")]
		[Address(RVA = "0xFDE0F8", Offset = "0xFDE0F8", VA = "0xFDE0F8")]
		public HorizontalScrollSnap()
		{
		}
	}
	[Token(Token = "0x2000432")]
	internal interface IScrollSnap
	{
		[Token(Token = "0x6001724")]
		void ChangePage(int page);

		[Token(Token = "0x6001725")]
		void SetLerp(bool value);

		[Token(Token = "0x6001726")]
		int CurrentPage();

		[Token(Token = "0x6001727")]
		void StartScreenChange();
	}
	[Token(Token = "0x2000433")]
	[AddComponentMenu("Layout/Extensions/Radial Layout")]
	public class RadialLayout : LayoutGroup
	{
		[Token(Token = "0x40019AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float fDistance;

		[Token(Token = "0x40019AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Range(0f, 360f)]
		public float MinAngle;

		[Token(Token = "0x40019AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Range(0f, 360f)]
		public float MaxAngle;

		[Token(Token = "0x40019AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Range(0f, 360f)]
		public float StartAngle;

		[Token(Token = "0x40019B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool OnlyLayoutVisible;

		[Token(Token = "0x6001728")]
		[Address(RVA = "0xFDE220", Offset = "0xFDE220", VA = "0xFDE220", Slot = "5")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001729")]
		[Address(RVA = "0xFDE558", Offset = "0xFDE558", VA = "0xFDE558", Slot = "37")]
		public override void SetLayoutHorizontal()
		{
		}

		[Token(Token = "0x600172A")]
		[Address(RVA = "0xFDE55C", Offset = "0xFDE55C", VA = "0xFDE55C", Slot = "38")]
		public override void SetLayoutVertical()
		{
		}

		[Token(Token = "0x600172B")]
		[Address(RVA = "0xFDE560", Offset = "0xFDE560", VA = "0xFDE560", Slot = "29")]
		public override void CalculateLayoutInputVertical()
		{
		}

		[Token(Token = "0x600172C")]
		[Address(RVA = "0xFDE564", Offset = "0xFDE564", VA = "0xFDE564", Slot = "28")]
		public override void CalculateLayoutInputHorizontal()
		{
		}

		[Token(Token = "0x600172D")]
		[Address(RVA = "0xFDE23C", Offset = "0xFDE23C", VA = "0xFDE23C")]
		private void CalculateRadial()
		{
		}

		[Token(Token = "0x600172E")]
		[Address(RVA = "0xFDE568", Offset = "0xFDE568", VA = "0xFDE568")]
		public RadialLayout()
		{
		}
	}
	[Token(Token = "0x2000434")]
	public class ScrollPositionController : UIBehaviour, IBeginDragHandler, IEventSystemHandler, IEndDragHandler, IDragHandler
	{
		[Token(Token = "0x2000435")]
		private enum ScrollDirection
		{
			[Token(Token = "0x40019C4")]
			Vertical,
			[Token(Token = "0x40019C5")]
			Horizontal
		}

		[Token(Token = "0x2000436")]
		private enum MovementType
		{
			[Token(Token = "0x40019C7")]
			Unrestricted,
			[Token(Token = "0x40019C8")]
			Elastic,
			[Token(Token = "0x40019C9")]
			Clamped
		}

		[Serializable]
		[Token(Token = "0x2000437")]
		private struct Snap
		{
			[Token(Token = "0x40019CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool Enable;

			[Token(Token = "0x40019CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float VelocityThreshold;

			[Token(Token = "0x40019CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float Duration;
		}

		[Token(Token = "0x2000438")]
		private class AutoScrollState
		{
			[Token(Token = "0x40019CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool Enable;

			[Token(Token = "0x40019CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
			public bool Elastic;

			[Token(Token = "0x40019CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float Duration;

			[Token(Token = "0x40019D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float StartTime;

			[Token(Token = "0x40019D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float EndScrollPosition;

			[Token(Token = "0x6001742")]
			[Address(RVA = "0xFDE75C", Offset = "0xFDE75C", VA = "0xFDE75C")]
			public void Reset()
			{
			}

			[Token(Token = "0x6001743")]
			[Address(RVA = "0xFDF728", Offset = "0xFDF728", VA = "0xFDF728")]
			public AutoScrollState()
			{
			}
		}

		[Token(Token = "0x40019B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private RectTransform viewport;

		[Token(Token = "0x40019B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private ScrollDirection directionOfRecognize;

		[Token(Token = "0x40019B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private MovementType movementType;

		[Token(Token = "0x40019B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float elasticity;

		[Token(Token = "0x40019B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float scrollSensitivity;

		[Token(Token = "0x40019B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private bool inertia;

		[Token(Token = "0x40019B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Only used when inertia is enabled")]
		[SerializeField]
		private float decelerationRate;

		[Token(Token = "0x40019B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Only used when inertia is enabled")]
		[SerializeField]
		private Snap snap;

		[Token(Token = "0x40019B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		private int dataCount;

		[Token(Token = "0x40019BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly AutoScrollState autoScrollState;

		[Token(Token = "0x40019BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Action<float> onUpdatePosition;

		[Token(Token = "0x40019BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Action<int> onItemSelected;

		[Token(Token = "0x40019BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector2 pointerStartLocalPosition;

		[Token(Token = "0x40019BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float dragStartScrollPosition;

		[Token(Token = "0x40019BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float prevScrollPosition;

		[Token(Token = "0x40019C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float currentScrollPosition;

		[Token(Token = "0x40019C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private bool dragging;

		[Token(Token = "0x40019C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float velocity;

		[Token(Token = "0x600172F")]
		[Address(RVA = "0xFDE570", Offset = "0xFDE570", VA = "0xFDE570")]
		public void OnUpdatePosition(Action<float> onUpdatePosition)
		{
		}

		[Token(Token = "0x6001730")]
		[Address(RVA = "0xFDE578", Offset = "0xFDE578", VA = "0xFDE578")]
		public void OnItemSelected(Action<int> onItemSelected)
		{
		}

		[Token(Token = "0x6001731")]
		[Address(RVA = "0xFDE580", Offset = "0xFDE580", VA = "0xFDE580")]
		public void SetDataCount(int dataCount)
		{
		}

		[Token(Token = "0x6001732")]
		[Address(RVA = "0xFDE588", Offset = "0xFDE588", VA = "0xFDE588")]
		public void ScrollTo(int index, float duration)
		{
		}

		[Token(Token = "0x6001733")]
		[Address(RVA = "0xFDE7F8", Offset = "0xFDE7F8", VA = "0xFDE7F8")]
		public void JumpTo(int index)
		{
		}

		[Token(Token = "0x6001734")]
		[Address(RVA = "0xFDE8C8", Offset = "0xFDE8C8", VA = "0xFDE8C8", Slot = "17")]
		private void UnityEngine.EventSystems.IBeginDragHandler.OnBeginDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001735")]
		[Address(RVA = "0xFDE9D4", Offset = "0xFDE9D4", VA = "0xFDE9D4", Slot = "19")]
		private void UnityEngine.EventSystems.IDragHandler.OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001736")]
		[Address(RVA = "0xFDEC44", Offset = "0xFDEC44", VA = "0xFDEC44", Slot = "18")]
		private void UnityEngine.EventSystems.IEndDragHandler.OnEndDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001737")]
		[Address(RVA = "0xFDEB78", Offset = "0xFDEB78", VA = "0xFDEB78")]
		private float GetViewportSize()
		{
			return default(float);
		}

		[Token(Token = "0x6001738")]
		[Address(RVA = "0xFDEBC8", Offset = "0xFDEBC8", VA = "0xFDEBC8")]
		private float CalculateOffset(float position)
		{
			return default(float);
		}

		[Token(Token = "0x6001739")]
		[Address(RVA = "0xFDE8A8", Offset = "0xFDE8A8", VA = "0xFDE8A8")]
		private void UpdatePosition(float position)
		{
		}

		[Token(Token = "0x600173A")]
		[Address(RVA = "0xFDE7DC", Offset = "0xFDE7DC", VA = "0xFDE7DC")]
		private void ItemSelected(int index)
		{
		}

		[Token(Token = "0x600173B")]
		[Address(RVA = "0xFDEC08", Offset = "0xFDEC08", VA = "0xFDEC08")]
		private float RubberDelta(float overStretching, float viewSize)
		{
			return default(float);
		}

		[Token(Token = "0x600173C")]
		[Address(RVA = "0xFDEC64", Offset = "0xFDEC64", VA = "0xFDEC64")]
		private void Update()
		{
		}

		[Token(Token = "0x600173D")]
		[Address(RVA = "0xFDE76C", Offset = "0xFDE76C", VA = "0xFDE76C")]
		private int CalculateDestinationIndex(int index)
		{
			return default(int);
		}

		[Token(Token = "0x600173E")]
		[Address(RVA = "0xFDF4E0", Offset = "0xFDF4E0", VA = "0xFDF4E0")]
		private int CalculateClosestIndex(int index)
		{
			return default(int);
		}

		[Token(Token = "0x600173F")]
		[Address(RVA = "0xFDE798", Offset = "0xFDE798", VA = "0xFDE798")]
		private float GetCircularPosition(float position, int length)
		{
			return default(float);
		}

		[Token(Token = "0x6001740")]
		[Address(RVA = "0xFDF488", Offset = "0xFDF488", VA = "0xFDF488")]
		private float EaseInOutCubic(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001741")]
		[Address(RVA = "0xFDF678", Offset = "0xFDF678", VA = "0xFDF678")]
		public ScrollPositionController()
		{
		}
	}
	[Token(Token = "0x2000439")]
	[AddComponentMenu("UI/Extensions/Scroll Snap")]
	[RequireComponent(typeof(ScrollRect))]
	[ExecuteInEditMode]
	public class ScrollSnap : MonoBehaviour, IBeginDragHandler, IEventSystemHandler, IEndDragHandler, IDragHandler, IScrollSnap
	{
		[Token(Token = "0x200043A")]
		public enum ScrollDirection
		{
			[Token(Token = "0x40019F3")]
			Horizontal,
			[Token(Token = "0x40019F4")]
			Vertical
		}

		[Token(Token = "0x200043B")]
		public delegate void PageSnapChange(int page);

		[Token(Token = "0x40019D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ScrollRect _scroll_rect;

		[Token(Token = "0x40019D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RectTransform _scrollRectTransform;

		[Token(Token = "0x40019D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform _listContainerTransform;

		[Token(Token = "0x40019D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int _pages;

		[Token(Token = "0x40019D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int _startingPage;

		[Token(Token = "0x40019D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3[] _pageAnchorPositions;

		[Token(Token = "0x40019D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 _lerpTarget;

		[Token(Token = "0x40019D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool _lerp;

		[Token(Token = "0x40019DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float _listContainerMinPosition;

		[Token(Token = "0x40019DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float _listContainerMaxPosition;

		[Token(Token = "0x40019DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float _listContainerSize;

		[Token(Token = "0x40019DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private RectTransform _listContainerRectTransform;

		[Token(Token = "0x40019DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector2 _listContainerCachedSize;

		[Token(Token = "0x40019DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float _itemSize;

		[Token(Token = "0x40019E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int _itemsCount;

		[Token(Token = "0x40019E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool _startDrag;

		[Token(Token = "0x40019E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Vector3 _positionOnDragStart;

		[Token(Token = "0x40019E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int _pageOnDragStart;

		[Token(Token = "0x40019E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private bool _fastSwipeTimer;

		[Token(Token = "0x40019E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int _fastSwipeCounter;

		[Token(Token = "0x40019E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private int _fastSwipeTarget;

		[Token(Token = "0x40019E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Button to go to the next page. (optional)")]
		public Button NextButton;

		[Token(Token = "0x40019E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Button to go to the previous page. (optional)")]
		public Button PrevButton;

		[Token(Token = "0x40019E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Number of items visible in one page of scroll frame.")]
		[Range(1f, 100f)]
		public int ItemsVisibleAtOnce;

		[Token(Token = "0x40019EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[Tooltip("Sets minimum width of list items to 1/itemsVisibleAtOnce.")]
		public bool AutoLayoutItems;

		[Token(Token = "0x40019EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAD")]
		[Tooltip("If you wish to update scrollbar numberOfSteps to number of active children on list.")]
		public bool LinkScrolbarSteps;

		[Token(Token = "0x40019EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAE")]
		[Tooltip("If you wish to update scrollrect sensitivity to size of list element.")]
		public bool LinkScrolrectScrollSensitivity;

		[Token(Token = "0x40019ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAF")]
		public bool UseFastSwipe;

		[Token(Token = "0x40019EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public int FastSwipeThreshold;

		[Token(Token = "0x40019F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public ScrollDirection direction;

		[Token(Token = "0x40019F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private bool fastSwipe;

		[Token(Token = "0x1400000A")]
		public event PageSnapChange onPageChange
		{
			[Token(Token = "0x6001744")]
			[Address(RVA = "0xFDF730", Offset = "0xFDF730", VA = "0xFDF730")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001745")]
			[Address(RVA = "0xFDF7CC", Offset = "0xFDF7CC", VA = "0xFDF7CC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001746")]
		[Address(RVA = "0xFDF868", Offset = "0xFDF868", VA = "0xFDF868")]
		private void Start()
		{
		}

		[Token(Token = "0x6001747")]
		[Address(RVA = "0xFDFBD8", Offset = "0xFDFBD8", VA = "0xFDFBD8")]
		public void UpdateListItemsSize()
		{
		}

		[Token(Token = "0x6001748")]
		[Address(RVA = "0xFE039C", Offset = "0xFE039C", VA = "0xFE039C")]
		public void UpdateListItemPositions()
		{
		}

		[Token(Token = "0x6001749")]
		[Address(RVA = "0xFE0D58", Offset = "0xFE0D58", VA = "0xFE0D58")]
		public void ResetPage()
		{
		}

		[Token(Token = "0x600174A")]
		[Address(RVA = "0xFE0BF4", Offset = "0xFE0BF4", VA = "0xFE0BF4")]
		private void UpdateScrollbar(bool linkSteps)
		{
		}

		[Token(Token = "0x600174B")]
		[Address(RVA = "0xFE0DD4", Offset = "0xFE0DD4", VA = "0xFE0DD4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600174C")]
		[Address(RVA = "0xFE1004", Offset = "0xFE1004", VA = "0xFE1004")]
		public void NextScreen()
		{
		}

		[Token(Token = "0x600174D")]
		[Address(RVA = "0xFE10A0", Offset = "0xFE10A0", VA = "0xFE10A0")]
		public void PreviousScreen()
		{
		}

		[Token(Token = "0x600174E")]
		[Address(RVA = "0xFE1134", Offset = "0xFE1134", VA = "0xFE1134")]
		private void NextScreenCommand()
		{
		}

		[Token(Token = "0x600174F")]
		[Address(RVA = "0xFE11AC", Offset = "0xFE11AC", VA = "0xFE11AC")]
		private void PrevScreenCommand()
		{
		}

		[Token(Token = "0x6001750")]
		[Address(RVA = "0xFE09AC", Offset = "0xFE09AC", VA = "0xFE09AC", Slot = "9")]
		public int CurrentPage()
		{
			return default(int);
		}

		[Token(Token = "0x6001751")]
		[Address(RVA = "0xFE1218", Offset = "0xFE1218", VA = "0xFE1218", Slot = "8")]
		public void SetLerp(bool value)
		{
		}

		[Token(Token = "0x6001752")]
		[Address(RVA = "0xFE1224", Offset = "0xFE1224", VA = "0xFE1224", Slot = "7")]
		public void ChangePage(int page)
		{
		}

		[Token(Token = "0x6001753")]
		[Address(RVA = "0xFE0AF8", Offset = "0xFE0AF8", VA = "0xFE0AF8")]
		private void PageChanged(int currentPage)
		{
		}

		[Token(Token = "0x6001754")]
		[Address(RVA = "0xFE1288", Offset = "0xFE1288", VA = "0xFE1288", Slot = "4")]
		public void OnBeginDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001755")]
		[Address(RVA = "0xFE12D8", Offset = "0xFE12D8", VA = "0xFE12D8", Slot = "5")]
		public void OnEndDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001756")]
		[Address(RVA = "0xFE1420", Offset = "0xFE1420", VA = "0xFE1420", Slot = "6")]
		public void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001757")]
		[Address(RVA = "0xFE1444", Offset = "0xFE1444", VA = "0xFE1444", Slot = "10")]
		public void StartScreenChange()
		{
		}

		[Token(Token = "0x6001758")]
		[Address(RVA = "0xFE1448", Offset = "0xFE1448", VA = "0xFE1448")]
		public ScrollSnap()
		{
		}
	}
	[Token(Token = "0x200043C")]
	public class ScrollSnapBase : MonoBehaviour, IBeginDragHandler, IEventSystemHandler, IDragHandler, IEndDragHandler, IScrollSnap, IPointerClickHandler
	{
		[Serializable]
		[Token(Token = "0x200043D")]
		public class SelectionChangeStartEvent : UnityEvent
		{
			[Token(Token = "0x6001786")]
			[Address(RVA = "0xFE2580", Offset = "0xFE2580", VA = "0xFE2580")]
			public SelectionChangeStartEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200043E")]
		public class SelectionPageChangedEvent : UnityEvent<int>
		{
			[Token(Token = "0x6001787")]
			[Address(RVA = "0xFE2588", Offset = "0xFE2588", VA = "0xFE2588")]
			public SelectionPageChangedEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200043F")]
		public class SelectionChangeEndEvent : UnityEvent<int>
		{
			[Token(Token = "0x6001788")]
			[Address(RVA = "0xFE25D0", Offset = "0xFE25D0", VA = "0xFE25D0")]
			public SelectionChangeEndEvent()
			{
			}
		}

		[Token(Token = "0x40019F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal Rect panelDimensions;

		[Token(Token = "0x40019F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal RectTransform _screensContainer;

		[Token(Token = "0x40019F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal bool _isVertical;

		[Token(Token = "0x40019F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal int _screens;

		[Token(Token = "0x40019F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal float _scrollStartPosition;

		[Token(Token = "0x40019FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		internal float _childSize;

		[Token(Token = "0x40019FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float _childPos;

		[Token(Token = "0x40019FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float _maskSize;

		[Token(Token = "0x40019FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal Vector2 _childAnchorPoint;

		[Token(Token = "0x40019FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal ScrollRect _scroll_rect;

		[Token(Token = "0x40019FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal Vector3 _lerp_target;

		[Token(Token = "0x4001A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		internal bool _lerp;

		[Token(Token = "0x4001A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		internal bool _pointerDown;

		[Token(Token = "0x4001A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
		internal bool _settled;

		[Token(Token = "0x4001A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal Vector3 _startPosition;

		[Token(Token = "0x4001A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("The currently active page")]
		internal int _currentPage;

		[Token(Token = "0x4001A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal int _previousPage;

		[Token(Token = "0x4001A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		internal int _halfNoVisibleItems;

		[Token(Token = "0x4001A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal bool _isInfinite;

		[Token(Token = "0x4001A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		internal int _infiniteWindow;

		[Token(Token = "0x4001A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal float _infiniteOffset;

		[Token(Token = "0x4001A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private int _bottomItem;

		[Token(Token = "0x4001A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int _topItem;

		[Token(Token = "0x4001A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		internal bool _startEventCalled;

		[Token(Token = "0x4001A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
		internal bool _endEventCalled;

		[Token(Token = "0x4001A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x96")]
		internal bool _suspendEvents;

		[Token(Token = "0x4001A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		[Tooltip("The screen / page to start the control on\n*Note, this is a 0 indexed array")]
		public int StartingScreen;

		[Token(Token = "0x4001A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Range(0f, 8f)]
		[SerializeField]
		[Tooltip("The distance between two pages based on page height, by default pages are next to each other")]
		public float PageStep;

		[Token(Token = "0x4001A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("The gameobject that contains toggles which suggest pagination. (optional)")]
		public GameObject Pagination;

		[Token(Token = "0x4001A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Button to go to the previous page. (optional)")]
		public GameObject PrevButton;

		[Token(Token = "0x4001A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Button to go to the next page. (optional)")]
		public GameObject NextButton;

		[Token(Token = "0x4001A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("Transition speed between pages. (optional)")]
		public float transitionSpeed;

		[Token(Token = "0x4001A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[Tooltip("Hard Swipe forces to swiping to the next / previous page (optional)")]
		public bool UseHardSwipe;

		[Token(Token = "0x4001A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBD")]
		[Tooltip("Fast Swipe makes swiping page next / previous (optional)")]
		public bool UseFastSwipe;

		[Token(Token = "0x4001A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBE")]
		[Tooltip("Swipe Delta Threshold looks at the speed of input to decide if a swipe will be initiated (optional)")]
		public bool UseSwipeDeltaThreshold;

		[Token(Token = "0x4001A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("Offset for how far a swipe has to travel to initiate a page change (optional)")]
		public int FastSwipeThreshold;

		[Token(Token = "0x4001A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[Tooltip("Speed at which the ScrollRect will keep scrolling before slowing down and stopping (optional)")]
		public int SwipeVelocityThreshold;

		[Token(Token = "0x4001A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Threshold for swipe speed to initiate a swipe, below threshold will return to closest page (optional)")]
		public float SwipeDeltaThreshold;

		[Token(Token = "0x4001A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[Tooltip("Use time scale instead of unscaled time (optional)")]
		public bool UseTimeScale;

		[Token(Token = "0x4001A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("The visible bounds area, controls which items are visible/enabled. *Note Should use a RectMask. (optional)")]
		public RectTransform MaskArea;

		[Token(Token = "0x4001A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("Pixel size to buffer around Mask Area. (optional)")]
		public float MaskBuffer;

		[Token(Token = "0x4001A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[Tooltip("By default the container will lerp to the start when enabled in the scene, this option overrides this and forces it to simply jump without lerping")]
		public bool JumpOnEnable;

		[Token(Token = "0x4001A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDD")]
		[Tooltip("By default the container will return to the original starting page when enabled, this option overrides this behaviour and stays on the current selection")]
		public bool RestartOnEnable;

		[Token(Token = "0x4001A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDE")]
		[Tooltip("(Experimental)\nBy default, child array objects will use the parent transform\nHowever you can disable this for some interesting effects")]
		public bool UseParentTransform;

		[Token(Token = "0x4001A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("Scroll Snap children. (optional)\nEither place objects in the scene as children OR\nPrefabs in this array, NOT BOTH")]
		public GameObject[] ChildObjects;

		[Token(Token = "0x4001A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		[Tooltip("Event fires when a user starts to change the selection")]
		private SelectionChangeStartEvent m_OnSelectionChangeStartEvent;

		[Token(Token = "0x4001A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		[Tooltip("Event fires as the page changes, while dragging or jumping")]
		private SelectionPageChangedEvent m_OnSelectionPageChangedEvent;

		[Token(Token = "0x4001A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Tooltip("Event fires when the page settles after a user has dragged")]
		[SerializeField]
		private SelectionChangeEndEvent m_OnSelectionChangeEndEvent;

		[Token(Token = "0x17000291")]
		public int CurrentPage
		{
			[Token(Token = "0x600175F")]
			[Address(RVA = "0xFE15F4", Offset = "0xFE15F4", VA = "0xFE15F4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001760")]
			[Address(RVA = "0xFDCC10", Offset = "0xFDCC10", VA = "0xFDCC10")]
			internal set
			{
			}
		}

		[Token(Token = "0x17000292")]
		public SelectionChangeStartEvent OnSelectionChangeStartEvent
		{
			[Token(Token = "0x6001761")]
			[Address(RVA = "0xFE1650", Offset = "0xFE1650", VA = "0xFE1650")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001762")]
			[Address(RVA = "0xFE1658", Offset = "0xFE1658", VA = "0xFE1658")]
			set
			{
			}
		}

		[Token(Token = "0x17000293")]
		public SelectionPageChangedEvent OnSelectionPageChangedEvent
		{
			[Token(Token = "0x6001763")]
			[Address(RVA = "0xFE1660", Offset = "0xFE1660", VA = "0xFE1660")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001764")]
			[Address(RVA = "0xFE1668", Offset = "0xFE1668", VA = "0xFE1668")]
			set
			{
			}
		}

		[Token(Token = "0x17000294")]
		public SelectionChangeEndEvent OnSelectionChangeEndEvent
		{
			[Token(Token = "0x6001765")]
			[Address(RVA = "0xFE1670", Offset = "0xFE1670", VA = "0xFE1670")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001766")]
			[Address(RVA = "0xFE1678", Offset = "0xFE1678", VA = "0xFE1678")]
			set
			{
			}
		}

		[Token(Token = "0x6001767")]
		[Address(RVA = "0xFE1680", Offset = "0xFE1680", VA = "0xFE1680")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001768")]
		[Address(RVA = "0xFE1A0C", Offset = "0xFE1A0C", VA = "0xFE1A0C")]
		internal void InitialiseChildObjects()
		{
		}

		[Token(Token = "0x6001769")]
		[Address(RVA = "0xFDD184", Offset = "0xFDD184", VA = "0xFDD184")]
		internal void InitialiseChildObjectsFromScene()
		{
		}

		[Token(Token = "0x600176A")]
		[Address(RVA = "0xFE1B54", Offset = "0xFE1B54", VA = "0xFE1B54")]
		internal void InitialiseChildObjectsFromArray()
		{
		}

		[Token(Token = "0x600176B")]
		[Address(RVA = "0xFDD340", Offset = "0xFDD340", VA = "0xFDD340")]
		internal void UpdateVisible()
		{
		}

		[Token(Token = "0x600176C")]
		[Address(RVA = "0xFDDFC8", Offset = "0xFDDFC8", VA = "0xFDDFC8")]
		public void NextScreen()
		{
		}

		[Token(Token = "0x600176D")]
		[Address(RVA = "0xFDE064", Offset = "0xFDE064", VA = "0xFDE064")]
		public void PreviousScreen()
		{
		}

		[Token(Token = "0x600176E")]
		[Address(RVA = "0xFDDC98", Offset = "0xFDDC98", VA = "0xFDDC98")]
		public void GoToScreen(int screenIndex)
		{
		}

		[Token(Token = "0x600176F")]
		[Address(RVA = "0xFDCAFC", Offset = "0xFDCAFC", VA = "0xFDCAFC")]
		internal int GetPageforPosition(Vector3 pos)
		{
			return default(int);
		}

		[Token(Token = "0x6001770")]
		[Address(RVA = "0xFDC8E0", Offset = "0xFDC8E0", VA = "0xFDC8E0")]
		internal bool IsRectSettledOnaPage(Vector3 pos)
		{
			return default(bool);
		}

		[Token(Token = "0x6001771")]
		[Address(RVA = "0xFE1DF4", Offset = "0xFE1DF4", VA = "0xFE1DF4")]
		internal void GetPositionforPage(int page, ref Vector3 target)
		{
		}

		[Token(Token = "0x6001772")]
		[Address(RVA = "0xFDCA0C", Offset = "0xFDCA0C", VA = "0xFDCA0C")]
		internal void ScrollToClosestElement()
		{
		}

		[Token(Token = "0x6001773")]
		[Address(RVA = "0xFDDB38", Offset = "0xFDDB38", VA = "0xFDDB38")]
		internal void OnCurrentScreenChange(int currentScreen)
		{
		}

		[Token(Token = "0x6001774")]
		[Address(RVA = "0xFE1F1C", Offset = "0xFE1F1C", VA = "0xFE1F1C")]
		private void ChangeBulletsInfo(int targetScreen)
		{
		}

		[Token(Token = "0x6001775")]
		[Address(RVA = "0xFE2018", Offset = "0xFE2018", VA = "0xFE2018")]
		private void ToggleNavigationButtons(int targetScreen)
		{
		}

		[Token(Token = "0x6001776")]
		[Address(RVA = "0xFE214C", Offset = "0xFE214C", VA = "0xFE214C")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6001777")]
		[Address(RVA = "0xFE1DB8", Offset = "0xFE1DB8", VA = "0xFE1DB8", Slot = "10")]
		public void StartScreenChange()
		{
		}

		[Token(Token = "0x6001778")]
		[Address(RVA = "0xFE15FC", Offset = "0xFE15FC", VA = "0xFE15FC")]
		internal void ScreenChange()
		{
		}

		[Token(Token = "0x6001779")]
		[Address(RVA = "0xFDCA80", Offset = "0xFDCA80", VA = "0xFDCA80")]
		internal void EndScreenChange()
		{
		}

		[Token(Token = "0x600177A")]
		[Address(RVA = "0xFE2468", Offset = "0xFE2468", VA = "0xFE2468")]
		public Transform CurrentPageObject()
		{
			return null;
		}

		[Token(Token = "0x600177B")]
		[Address(RVA = "0xFE248C", Offset = "0xFE248C", VA = "0xFE248C")]
		public void CurrentPageObject(out Transform returnObject)
		{
		}

		[Token(Token = "0x600177C")]
		[Address(RVA = "0xFE24C4", Offset = "0xFE24C4", VA = "0xFE24C4", Slot = "4")]
		public void OnBeginDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600177D")]
		[Address(RVA = "0xFE24FC", Offset = "0xFE24FC", VA = "0xFE24FC", Slot = "5")]
		public void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600177E")]
		[Address(RVA = "0xFE2504", Offset = "0xFE2504", VA = "0xFE2504", Slot = "12")]
		public virtual void OnEndDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600177F")]
		[Address(RVA = "0xFE2508", Offset = "0xFE2508", VA = "0xFE2508", Slot = "9")]
		private int UnityEngine.UI.Extensions.IScrollSnap.CurrentPage()
		{
			return default(int);
		}

		[Token(Token = "0x6001780")]
		[Address(RVA = "0xFE2554", Offset = "0xFE2554", VA = "0xFE2554", Slot = "8")]
		public void SetLerp(bool value)
		{
		}

		[Token(Token = "0x6001781")]
		[Address(RVA = "0xFE2560", Offset = "0xFE2560", VA = "0xFE2560", Slot = "7")]
		public void ChangePage(int page)
		{
		}

		[Token(Token = "0x6001782")]
		[Address(RVA = "0xFE2564", Offset = "0xFE2564", VA = "0xFE2564", Slot = "11")]
		public void OnPointerClick(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001783")]
		[Address(RVA = "0xFDE104", Offset = "0xFDE104", VA = "0xFDE104")]
		public ScrollSnapBase()
		{
		}
	}
	[Token(Token = "0x2000440")]
	[DisallowMultipleComponent]
	public class ScrollSnapScrollbarHelper : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler, IBeginDragHandler, IEndDragHandler, IDragHandler
	{
		[Token(Token = "0x4001A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal IScrollSnap ss;

		[Token(Token = "0x6001789")]
		[Address(RVA = "0xFE2620", Offset = "0xFE2620", VA = "0xFE2620", Slot = "6")]
		public void OnBeginDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600178A")]
		[Address(RVA = "0xFE273C", Offset = "0xFE273C", VA = "0xFE273C", Slot = "8")]
		public void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600178B")]
		[Address(RVA = "0xFE27E0", Offset = "0xFE27E0", VA = "0xFE27E0", Slot = "7")]
		public void OnEndDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600178C")]
		[Address(RVA = "0xFE2950", Offset = "0xFE2950", VA = "0xFE2950", Slot = "4")]
		public void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600178D")]
		[Address(RVA = "0xFE2954", Offset = "0xFE2954", VA = "0xFE2954", Slot = "5")]
		public void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600178E")]
		[Address(RVA = "0xFE2624", Offset = "0xFE2624", VA = "0xFE2624")]
		private void OnScrollBarDown()
		{
		}

		[Token(Token = "0x600178F")]
		[Address(RVA = "0xFE27E4", Offset = "0xFE27E4", VA = "0xFE27E4")]
		private void OnScrollBarUp()
		{
		}

		[Token(Token = "0x6001790")]
		[Address(RVA = "0xFE2958", Offset = "0xFE2958", VA = "0xFE2958")]
		public ScrollSnapScrollbarHelper()
		{
		}
	}
	[Token(Token = "0x2000441")]
	[AddComponentMenu("Layout/Extensions/Table Layout Group")]
	public class TableLayoutGroup : LayoutGroup
	{
		[Token(Token = "0x2000442")]
		public enum Corner
		{
			[Token(Token = "0x4001A2E")]
			UpperLeft,
			[Token(Token = "0x4001A2F")]
			UpperRight,
			[Token(Token = "0x4001A30")]
			LowerLeft,
			[Token(Token = "0x4001A31")]
			LowerRight
		}

		[Token(Token = "0x4001A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		protected Corner startCorner;

		[Token(Token = "0x4001A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		protected float[] columnWidths;

		[Token(Token = "0x4001A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		protected float minimumRowHeight;

		[Token(Token = "0x4001A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		protected bool flexibleRowHeight;

		[Token(Token = "0x4001A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		protected float columnSpacing;

		[Token(Token = "0x4001A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[SerializeField]
		protected float rowSpacing;

		[Token(Token = "0x4001A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float[] preferredRowHeights;

		[Token(Token = "0x17000295")]
		public Corner StartCorner
		{
			[Token(Token = "0x6001791")]
			[Address(RVA = "0xFE2960", Offset = "0xFE2960", VA = "0xFE2960")]
			get
			{
				return default(Corner);
			}
			[Token(Token = "0x6001792")]
			[Address(RVA = "0xFE2968", Offset = "0xFE2968", VA = "0xFE2968")]
			set
			{
			}
		}

		[Token(Token = "0x17000296")]
		public float[] ColumnWidths
		{
			[Token(Token = "0x6001793")]
			[Address(RVA = "0xFE29C4", Offset = "0xFE29C4", VA = "0xFE29C4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001794")]
			[Address(RVA = "0xFE29CC", Offset = "0xFE29CC", VA = "0xFE29CC")]
			set
			{
			}
		}

		[Token(Token = "0x17000297")]
		public float MinimumRowHeight
		{
			[Token(Token = "0x6001795")]
			[Address(RVA = "0xFE2A28", Offset = "0xFE2A28", VA = "0xFE2A28")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001796")]
			[Address(RVA = "0xFE2A30", Offset = "0xFE2A30", VA = "0xFE2A30")]
			set
			{
			}
		}

		[Token(Token = "0x17000298")]
		public bool FlexibleRowHeight
		{
			[Token(Token = "0x6001797")]
			[Address(RVA = "0xFE2A8C", Offset = "0xFE2A8C", VA = "0xFE2A8C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001798")]
			[Address(RVA = "0xFE2A94", Offset = "0xFE2A94", VA = "0xFE2A94")]
			set
			{
			}
		}

		[Token(Token = "0x17000299")]
		public float ColumnSpacing
		{
			[Token(Token = "0x6001799")]
			[Address(RVA = "0xFE2AF0", Offset = "0xFE2AF0", VA = "0xFE2AF0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600179A")]
			[Address(RVA = "0xFE2AF8", Offset = "0xFE2AF8", VA = "0xFE2AF8")]
			set
			{
			}
		}

		[Token(Token = "0x1700029A")]
		public float RowSpacing
		{
			[Token(Token = "0x600179B")]
			[Address(RVA = "0xFE2B54", Offset = "0xFE2B54", VA = "0xFE2B54")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600179C")]
			[Address(RVA = "0xFE2B5C", Offset = "0xFE2B5C", VA = "0xFE2B5C")]
			set
			{
			}
		}

		[Token(Token = "0x600179D")]
		[Address(RVA = "0xFE2BB8", Offset = "0xFE2BB8", VA = "0xFE2BB8", Slot = "28")]
		public override void CalculateLayoutInputHorizontal()
		{
		}

		[Token(Token = "0x600179E")]
		[Address(RVA = "0xFE2C94", Offset = "0xFE2C94", VA = "0xFE2C94", Slot = "29")]
		public override void CalculateLayoutInputVertical()
		{
		}

		[Token(Token = "0x600179F")]
		[Address(RVA = "0xFE2F48", Offset = "0xFE2F48", VA = "0xFE2F48", Slot = "37")]
		public override void SetLayoutHorizontal()
		{
		}

		[Token(Token = "0x60017A0")]
		[Address(RVA = "0xFE3184", Offset = "0xFE3184", VA = "0xFE3184", Slot = "38")]
		public override void SetLayoutVertical()
		{
		}

		[Token(Token = "0x60017A1")]
		[Address(RVA = "0xFE338C", Offset = "0xFE338C", VA = "0xFE338C")]
		public TableLayoutGroup()
		{
		}
	}
	[Token(Token = "0x2000443")]
	[AddComponentMenu("Layout/Extensions/Tile Size Fitter")]
	[RequireComponent(typeof(RectTransform))]
	[ExecuteInEditMode]
	public class TileSizeFitter : UIBehaviour, ILayoutSelfController, ILayoutController
	{
		[Token(Token = "0x4001A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Vector2 m_Border;

		[Token(Token = "0x4001A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Vector2 m_TileSize;

		[NonSerialized]
		[Token(Token = "0x4001A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RectTransform m_Rect;

		[Token(Token = "0x4001A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private DrivenRectTransformTracker m_Tracker;

		[Token(Token = "0x1700029B")]
		public Vector2 Border
		{
			[Token(Token = "0x60017A2")]
			[Address(RVA = "0xFE341C", Offset = "0xFE341C", VA = "0xFE341C")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x60017A3")]
			[Address(RVA = "0xFE3424", Offset = "0xFE3424", VA = "0xFE3424")]
			set
			{
			}
		}

		[Token(Token = "0x1700029C")]
		public Vector2 TileSize
		{
			[Token(Token = "0x60017A4")]
			[Address(RVA = "0xFE34E0", Offset = "0xFE34E0", VA = "0xFE34E0")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x60017A5")]
			[Address(RVA = "0xFE34E8", Offset = "0xFE34E8", VA = "0xFE34E8")]
			set
			{
			}
		}

		[Token(Token = "0x1700029D")]
		private RectTransform rectTransform
		{
			[Token(Token = "0x60017A6")]
			[Address(RVA = "0xFE3578", Offset = "0xFE3578", VA = "0xFE3578")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60017A7")]
		[Address(RVA = "0xFE3620", Offset = "0xFE3620", VA = "0xFE3620", Slot = "5")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x60017A8")]
		[Address(RVA = "0xFE3658", Offset = "0xFE3658", VA = "0xFE3658", Slot = "7")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x60017A9")]
		[Address(RVA = "0xFE36D8", Offset = "0xFE36D8", VA = "0xFE36D8", Slot = "10")]
		protected override void OnRectTransformDimensionsChange()
		{
		}

		[Token(Token = "0x60017AA")]
		[Address(RVA = "0xFE36DC", Offset = "0xFE36DC", VA = "0xFE36DC")]
		private void UpdateRect()
		{
		}

		[Token(Token = "0x60017AB")]
		[Address(RVA = "0xFE38D8", Offset = "0xFE38D8", VA = "0xFE38D8")]
		private Vector2 GetParentSize()
		{
			return default(Vector2);
		}

		[Token(Token = "0x60017AC")]
		[Address(RVA = "0xFE39E8", Offset = "0xFE39E8", VA = "0xFE39E8", Slot = "19")]
		public virtual void SetLayoutHorizontal()
		{
		}

		[Token(Token = "0x60017AD")]
		[Address(RVA = "0xFE39EC", Offset = "0xFE39EC", VA = "0xFE39EC", Slot = "20")]
		public virtual void SetLayoutVertical()
		{
		}

		[Token(Token = "0x60017AE")]
		[Address(RVA = "0xFE34B4", Offset = "0xFE34B4", VA = "0xFE34B4")]
		protected void SetDirty()
		{
		}

		[Token(Token = "0x60017AF")]
		[Address(RVA = "0xFE39F0", Offset = "0xFE39F0", VA = "0xFE39F0")]
		public TileSizeFitter()
		{
		}
	}
	[Token(Token = "0x2000444")]
	[AddComponentMenu("Layout/Extensions/Vertical Scroller")]
	[RequireComponent(typeof(ScrollRect))]
	public class UIVerticalScroller : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000445")]
		public class IntEvent : UnityEvent<int>
		{
			[Token(Token = "0x60017C1")]
			[Address(RVA = "0xFE4AFC", Offset = "0xFE4AFC", VA = "0xFE4AFC")]
			public IntEvent()
			{
			}
		}

		[Token(Token = "0x4001A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("desired ScrollRect")]
		public ScrollRect scrollRect;

		[Token(Token = "0x4001A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Center display area (position of zoomed content)")]
		public RectTransform center;

		[Token(Token = "0x4001A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Size / spacing of elements")]
		public RectTransform elementSize;

		[Token(Token = "0x4001A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Scale = 1/ (1+distance from center * shrinkage)")]
		public Vector2 elementShrinkage;

		[Token(Token = "0x4001A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Minimum element scale (furthest from center)")]
		public Vector2 minScale;

		[Token(Token = "0x4001A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Select the item to be in center on start.")]
		public int startingIndex;

		[Token(Token = "0x4001A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Stop scrolling past last element from inertia.")]
		public bool stopMomentumOnEnd;

		[Token(Token = "0x4001A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		[Tooltip("Set Items out of center to not interactible.")]
		public bool disableUnfocused;

		[Token(Token = "0x4001A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Button to go to the next page. (optional)")]
		public GameObject scrollUpButton;

		[Token(Token = "0x4001A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Button to go to the previous page. (optional)")]
		public GameObject scrollDownButton;

		[Token(Token = "0x4001A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event fired when a specific item is clicked, exposes index number of item. (optional)")]
		public IntEvent OnButtonClicked;

		[Token(Token = "0x4001A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event fired when the focused item is Changed. (optional)")]
		public IntEvent OnFocusChanged;

		[Token(Token = "0x4001A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public GameObject[] _arrayOfElements;

		[Token(Token = "0x4001A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float[] distReposition;

		[Token(Token = "0x4001A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float[] distance;

		[Token(Token = "0x1700029E")]
		public int focusedElementIndex
		{
			[Token(Token = "0x60017B0")]
			[Address(RVA = "0xFE3A54", Offset = "0xFE3A54", VA = "0xFE3A54")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60017B1")]
			[Address(RVA = "0xFE3A5C", Offset = "0xFE3A5C", VA = "0xFE3A5C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700029F")]
		public string result
		{
			[Token(Token = "0x60017B2")]
			[Address(RVA = "0xFE3A64", Offset = "0xFE3A64", VA = "0xFE3A64")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60017B3")]
			[Address(RVA = "0xFE3A6C", Offset = "0xFE3A6C", VA = "0xFE3A6C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170002A0")]
		[HideInInspector]
		public RectTransform scrollingPanel
		{
			[Token(Token = "0x60017B4")]
			[Address(RVA = "0xFE3A74", Offset = "0xFE3A74", VA = "0xFE3A74")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60017B5")]
		[Address(RVA = "0xFE3A90", Offset = "0xFE3A90", VA = "0xFE3A90")]
		public UIVerticalScroller()
		{
		}

		[Token(Token = "0x60017B6")]
		[Address(RVA = "0xFE3AB4", Offset = "0xFE3AB4", VA = "0xFE3AB4")]
		public UIVerticalScroller(RectTransform center, RectTransform elementSize, ScrollRect scrollRect, GameObject[] arrayOfElements)
		{
		}

		[Token(Token = "0x60017B7")]
		[Address(RVA = "0xFE3B44", Offset = "0xFE3B44", VA = "0xFE3B44")]
		public void Awake()
		{
		}

		[Token(Token = "0x60017B8")]
		[Address(RVA = "0xFE3D9C", Offset = "0xFE3D9C", VA = "0xFE3D9C")]
		public void updateChildren(int startingIndex = -1, [Optional] GameObject[] arrayOfElements)
		{
		}

		[Token(Token = "0x60017B9")]
		[Address(RVA = "0xFE4284", Offset = "0xFE4284", VA = "0xFE4284")]
		public void Start()
		{
		}

		[Token(Token = "0x60017BA")]
		[Address(RVA = "0xFE4414", Offset = "0xFE4414", VA = "0xFE4414")]
		public void Update()
		{
		}

		[Token(Token = "0x60017BB")]
		[Address(RVA = "0xFE489C", Offset = "0xFE489C", VA = "0xFE489C")]
		private void ScrollingElements()
		{
		}

		[Token(Token = "0x60017BC")]
		[Address(RVA = "0xFE41EC", Offset = "0xFE41EC", VA = "0xFE41EC")]
		public void SnapToElement(int element)
		{
		}

		[Token(Token = "0x60017BD")]
		[Address(RVA = "0xFE4978", Offset = "0xFE4978", VA = "0xFE4978")]
		public void ScrollUp()
		{
		}

		[Token(Token = "0x60017BE")]
		[Address(RVA = "0xFE4A44", Offset = "0xFE4A44", VA = "0xFE4A44")]
		public void ScrollDown()
		{
		}
	}
	[Token(Token = "0x2000447")]
	[RequireComponent(typeof(ScrollRect))]
	[AddComponentMenu("Layout/Extensions/Vertical Scroll Snap")]
	public class VerticalScrollSnap : ScrollSnapBase
	{
		[Token(Token = "0x4001A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private bool updated;

		[Token(Token = "0x60017C4")]
		[Address(RVA = "0xFE4BA0", Offset = "0xFE4BA0", VA = "0xFE4BA0")]
		private void Start()
		{
		}

		[Token(Token = "0x60017C5")]
		[Address(RVA = "0xFE4CC8", Offset = "0xFE4CC8", VA = "0xFE4CC8")]
		private void Update()
		{
		}

		[Token(Token = "0x60017C6")]
		[Address(RVA = "0xFE4F60", Offset = "0xFE4F60", VA = "0xFE4F60")]
		private bool IsRectMovingSlowerThanThreshold(float startingSpeed)
		{
			return default(bool);
		}

		[Token(Token = "0x60017C7")]
		[Address(RVA = "0xFE4FC0", Offset = "0xFE4FC0", VA = "0xFE4FC0")]
		public void DistributePages()
		{
		}

		[Token(Token = "0x60017C8")]
		[Address(RVA = "0xFE5218", Offset = "0xFE5218", VA = "0xFE5218")]
		public void AddChild(GameObject GO)
		{
		}

		[Token(Token = "0x60017C9")]
		[Address(RVA = "0xFE5220", Offset = "0xFE5220", VA = "0xFE5220")]
		public void AddChild(GameObject GO, bool WorldPositionStays)
		{
		}

		[Token(Token = "0x60017CA")]
		[Address(RVA = "0xFE535C", Offset = "0xFE535C", VA = "0xFE535C")]
		public void RemoveChild(int index, out GameObject ChildRemoved)
		{
		}

		[Token(Token = "0x60017CB")]
		[Address(RVA = "0xFE5368", Offset = "0xFE5368", VA = "0xFE5368")]
		public void RemoveChild(int index, bool WorldPositionStays, out GameObject ChildRemoved)
		{
		}

		[Token(Token = "0x60017CC")]
		[Address(RVA = "0xFE54C0", Offset = "0xFE54C0", VA = "0xFE54C0")]
		public void RemoveAllChildren(out GameObject[] ChildrenRemoved)
		{
		}

		[Token(Token = "0x60017CD")]
		[Address(RVA = "0xFE54CC", Offset = "0xFE54CC", VA = "0xFE54CC")]
		public void RemoveAllChildren(bool WorldPositionStays, out GameObject[] ChildrenRemoved)
		{
		}

		[Token(Token = "0x60017CE")]
		[Address(RVA = "0xFE52EC", Offset = "0xFE52EC", VA = "0xFE52EC")]
		private void SetScrollContainerPosition()
		{
		}

		[Token(Token = "0x60017CF")]
		[Address(RVA = "0xFE4C30", Offset = "0xFE4C30", VA = "0xFE4C30")]
		public void UpdateLayout()
		{
		}

		[Token(Token = "0x60017D0")]
		[Address(RVA = "0xFE56A0", Offset = "0xFE56A0", VA = "0xFE56A0")]
		private void OnRectTransformDimensionsChange()
		{
		}

		[Token(Token = "0x60017D1")]
		[Address(RVA = "0xFE5728", Offset = "0xFE5728", VA = "0xFE5728")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60017D2")]
		[Address(RVA = "0xFE57D8", Offset = "0xFE57D8", VA = "0xFE57D8", Slot = "12")]
		public override void OnEndDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60017D3")]
		[Address(RVA = "0xFE5A9C", Offset = "0xFE5A9C", VA = "0xFE5A9C")]
		public VerticalScrollSnap()
		{
		}
	}
	[Token(Token = "0x2000448")]
	public abstract class Menu<T> : Menu where T : Menu<T>
	{
		[Token(Token = "0x170002A1")]
		public static T Instance
		{
			[Token(Token = "0x60017D4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60017D5")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60017D6")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60017D7")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x60017D8")]
		protected static void Open()
		{
		}

		[Token(Token = "0x60017D9")]
		protected static void Close()
		{
		}

		[Token(Token = "0x60017DA")]
		public override void OnBackPressed()
		{
		}

		[Token(Token = "0x60017DB")]
		protected Menu()
		{
		}
	}
	[Token(Token = "0x2000449")]
	public abstract class Menu : MonoBehaviour
	{
		[Token(Token = "0x4001A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Destroy the Game Object when menu is closed (reduces memory usage)")]
		public bool DestroyWhenClosed;

		[Token(Token = "0x4001A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[Tooltip("Disable menus that are under this one in the stack")]
		public bool DisableMenusUnderneath;

		[Token(Token = "0x60017DC")]
		public abstract void OnBackPressed();

		[Token(Token = "0x60017DD")]
		[Address(RVA = "0xFE5AA8", Offset = "0xFE5AA8", VA = "0xFE5AA8")]
		protected Menu()
		{
		}
	}
	[Token(Token = "0x200044A")]
	[AddComponentMenu("UI/Extensions/Menu Manager")]
	[DisallowMultipleComponent]
	public class MenuManager : MonoBehaviour
	{
		[Token(Token = "0x4001A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Menu[] menuScreens;

		[Token(Token = "0x4001A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private int startScreen;

		[Token(Token = "0x4001A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Stack<Menu> menuStack;

		[Token(Token = "0x170002A2")]
		public Menu[] MenuScreens
		{
			[Token(Token = "0x60017DE")]
			[Address(RVA = "0xFE5AB8", Offset = "0xFE5AB8", VA = "0xFE5AB8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60017DF")]
			[Address(RVA = "0xFE5AC0", Offset = "0xFE5AC0", VA = "0xFE5AC0")]
			set
			{
			}
		}

		[Token(Token = "0x170002A3")]
		public int StartScreen
		{
			[Token(Token = "0x60017E0")]
			[Address(RVA = "0xFE5AC8", Offset = "0xFE5AC8", VA = "0xFE5AC8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60017E1")]
			[Address(RVA = "0xFE5AD0", Offset = "0xFE5AD0", VA = "0xFE5AD0")]
			set
			{
			}
		}

		[Token(Token = "0x170002A4")]
		public static MenuManager Instance
		{
			[Token(Token = "0x60017E2")]
			[Address(RVA = "0xFE5AD8", Offset = "0xFE5AD8", VA = "0xFE5AD8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60017E3")]
			[Address(RVA = "0xFE5B20", Offset = "0xFE5B20", VA = "0xFE5B20")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60017E4")]
		[Address(RVA = "0xFE5B78", Offset = "0xFE5B78", VA = "0xFE5B78")]
		private void Start()
		{
		}

		[Token(Token = "0x60017E5")]
		[Address(RVA = "0xFE5FE4", Offset = "0xFE5FE4", VA = "0xFE5FE4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60017E6")]
		[Address(RVA = "0xFE5C88", Offset = "0xFE5C88", VA = "0xFE5C88")]
		public GameObject CreateInstance(string MenuName)
		{
			return null;
		}

		[Token(Token = "0x60017E7")]
		[Address(RVA = "0xFE6128", Offset = "0xFE6128", VA = "0xFE6128")]
		public void CreateInstance(string MenuName, out GameObject menuInstance)
		{
		}

		[Token(Token = "0x60017E8")]
		[Address(RVA = "0xFE5D78", Offset = "0xFE5D78", VA = "0xFE5D78")]
		public void OpenMenu(Menu menuInstance)
		{
		}

		[Token(Token = "0x60017E9")]
		[Address(RVA = "0xFE6030", Offset = "0xFE6030", VA = "0xFE6030")]
		private GameObject GetPrefab(string PrefabName)
		{
			return null;
		}

		[Token(Token = "0x60017EA")]
		[Address(RVA = "0xFE61DC", Offset = "0xFE61DC", VA = "0xFE61DC")]
		public void CloseMenu(Menu menu)
		{
		}

		[Token(Token = "0x60017EB")]
		[Address(RVA = "0xFE63C8", Offset = "0xFE63C8", VA = "0xFE63C8")]
		public void CloseTopMenu()
		{
		}

		[Token(Token = "0x60017EC")]
		[Address(RVA = "0xFE65D8", Offset = "0xFE65D8", VA = "0xFE65D8")]
		private void Update()
		{
		}

		[Token(Token = "0x60017ED")]
		[Address(RVA = "0xFE666C", Offset = "0xFE666C", VA = "0xFE666C")]
		public MenuManager()
		{
		}
	}
	[Token(Token = "0x200044B")]
	public static class MenuExtensions
	{
		[Token(Token = "0x60017EE")]
		[Address(RVA = "0xFE5D28", Offset = "0xFE5D28", VA = "0xFE5D28")]
		public static Menu GetMenu(this GameObject go)
		{
			return null;
		}
	}
	[Token(Token = "0x200044C")]
	public abstract class SimpleMenu<T> : Menu<T> where T : SimpleMenu<T>
	{
		[Token(Token = "0x60017EF")]
		public static void Show()
		{
		}

		[Token(Token = "0x60017F0")]
		public static void Hide()
		{
		}

		[Token(Token = "0x60017F1")]
		protected SimpleMenu()
		{
		}
	}
	[Token(Token = "0x200044D")]
	[AddComponentMenu("UI/Extensions/Primitives/Diamond Graph")]
	public class DiamondGraph : UIPrimitiveBase
	{
		[Token(Token = "0x4001A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private float m_a;

		[Token(Token = "0x4001A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[SerializeField]
		private float m_b;

		[Token(Token = "0x4001A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		private float m_c;

		[Token(Token = "0x4001A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[SerializeField]
		private float m_d;

		[Token(Token = "0x170002A5")]
		public float A
		{
			[Token(Token = "0x60017F2")]
			[Address(RVA = "0xFE66F4", Offset = "0xFE66F4", VA = "0xFE66F4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60017F3")]
			[Address(RVA = "0xFE66FC", Offset = "0xFE66FC", VA = "0xFE66FC")]
			set
			{
			}
		}

		[Token(Token = "0x170002A6")]
		public float B
		{
			[Token(Token = "0x60017F4")]
			[Address(RVA = "0xFE6704", Offset = "0xFE6704", VA = "0xFE6704")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60017F5")]
			[Address(RVA = "0xFE670C", Offset = "0xFE670C", VA = "0xFE670C")]
			set
			{
			}
		}

		[Token(Token = "0x170002A7")]
		public float C
		{
			[Token(Token = "0x60017F6")]
			[Address(RVA = "0xFE6714", Offset = "0xFE6714", VA = "0xFE6714")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60017F7")]
			[Address(RVA = "0xFE671C", Offset = "0xFE671C", VA = "0xFE671C")]
			set
			{
			}
		}

		[Token(Token = "0x170002A8")]
		public float D
		{
			[Token(Token = "0x60017F8")]
			[Address(RVA = "0xFE6724", Offset = "0xFE6724", VA = "0xFE6724")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60017F9")]
			[Address(RVA = "0xFE672C", Offset = "0xFE672C", VA = "0xFE672C")]
			set
			{
			}
		}

		[Token(Token = "0x60017FA")]
		[Address(RVA = "0xFE6734", Offset = "0xFE6734", VA = "0xFE6734", Slot = "44")]
		protected override void OnPopulateMesh(VertexHelper vh)
		{
		}

		[Token(Token = "0x60017FB")]
		[Address(RVA = "0xFE6C44", Offset = "0xFE6C44", VA = "0xFE6C44")]
		public DiamondGraph()
		{
		}
	}
	[Token(Token = "0x200044E")]
	[AddComponentMenu("UI/Extensions/Primitives/UI Circle")]
	public class UICircle : UIPrimitiveBase
	{
		[Token(Token = "0x4001A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF5")]
		[Tooltip("The Arc Invert property will invert the construction of the Arc.")]
		public bool ArcInvert;

		[Token(Token = "0x4001A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Tooltip("The Arc property is a percentage of the entire circumference of the circle.")]
		[Range(0f, 1f)]
		public float Arc;

		[Token(Token = "0x4001A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[Tooltip("The Arc Steps property defines the number of segments that the Arc will be divided into.")]
		[Range(0f, 1000f)]
		public int ArcSteps;

		[Token(Token = "0x4001A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Tooltip("The Arc Rotation property permits adjusting the geometry orientation around the Z axis.")]
		[Range(0f, 360f)]
		public int ArcRotation;

		[Token(Token = "0x4001A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[Tooltip("The Progress property allows the primitive to be used as a progression indicator.")]
		[Range(0f, 1f)]
		public float Progress;

		[Token(Token = "0x4001A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private float _progress;

		[Token(Token = "0x4001A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public Color ProgressColor;

		[Token(Token = "0x4001A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		public bool Fill;

		[Token(Token = "0x4001A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public float Thickness;

		[Token(Token = "0x4001A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		public int Padding;

		[Token(Token = "0x4001A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private List<int> indices;

		[Token(Token = "0x4001A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private List<UIVertex> vertices;

		[Token(Token = "0x4001A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Vector2 uvCenter;

		[Token(Token = "0x60017FC")]
		[Address(RVA = "0xFE6C54", Offset = "0xFE6C54", VA = "0xFE6C54", Slot = "44")]
		protected override void OnPopulateMesh(VertexHelper vh)
		{
		}

		[Token(Token = "0x60017FD")]
		[Address(RVA = "0xFE8058", Offset = "0xFE8058", VA = "0xFE8058")]
		public void SetProgress(float progress)
		{
		}

		[Token(Token = "0x60017FE")]
		[Address(RVA = "0xFE806C", Offset = "0xFE806C", VA = "0xFE806C")]
		public void SetArcSteps(int steps)
		{
		}

		[Token(Token = "0x60017FF")]
		[Address(RVA = "0xFE8080", Offset = "0xFE8080", VA = "0xFE8080")]
		public void SetInvertArc(bool invert)
		{
		}

		[Token(Token = "0x6001800")]
		[Address(RVA = "0xFE8098", Offset = "0xFE8098", VA = "0xFE8098")]
		public void SetArcRotation(int rotation)
		{
		}

		[Token(Token = "0x6001801")]
		[Address(RVA = "0xFE80AC", Offset = "0xFE80AC", VA = "0xFE80AC")]
		public void SetFill(bool fill)
		{
		}

		[Token(Token = "0x6001802")]
		[Address(RVA = "0xFE80C4", Offset = "0xFE80C4", VA = "0xFE80C4")]
		public void SetBaseColor(Color color)
		{
		}

		[Token(Token = "0x6001803")]
		[Address(RVA = "0xFE80F4", Offset = "0xFE80F4", VA = "0xFE80F4")]
		public void UpdateBaseAlpha(float value)
		{
		}

		[Token(Token = "0x6001804")]
		[Address(RVA = "0xFE8148", Offset = "0xFE8148", VA = "0xFE8148")]
		public void SetProgressColor(Color color)
		{
		}

		[Token(Token = "0x6001805")]
		[Address(RVA = "0xFE8168", Offset = "0xFE8168", VA = "0xFE8168")]
		public void UpdateProgressAlpha(float value)
		{
		}

		[Token(Token = "0x6001806")]
		[Address(RVA = "0xFE817C", Offset = "0xFE817C", VA = "0xFE817C")]
		public void SetPadding(int padding)
		{
		}

		[Token(Token = "0x6001807")]
		[Address(RVA = "0xFE8190", Offset = "0xFE8190", VA = "0xFE8190")]
		public void SetThickness(int thickness)
		{
		}

		[Token(Token = "0x6001808")]
		[Address(RVA = "0xFE81A8", Offset = "0xFE81A8", VA = "0xFE81A8")]
		public UICircle()
		{
		}
	}
	[Token(Token = "0x200044F")]
	[AddComponentMenu("UI/Extensions/Primitives/Cut Corners")]
	public class UICornerCut : UIPrimitiveBase
	{
		[Token(Token = "0x4001A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public Vector2 cornerSize;

		[Token(Token = "0x4001A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		[Header("Corners to cut")]
		private bool m_cutUL;

		[Token(Token = "0x4001A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x101")]
		[SerializeField]
		private bool m_cutUR;

		[Token(Token = "0x4001A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x102")]
		[SerializeField]
		private bool m_cutLL;

		[Token(Token = "0x4001A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x103")]
		[SerializeField]
		private bool m_cutLR;

		[Token(Token = "0x4001A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[Tooltip("Up-Down colors become Left-Right colors")]
		[SerializeField]
		private bool m_makeColumns;

		[Token(Token = "0x4001A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x105")]
		[Header("Color the cut bars differently")]
		[SerializeField]
		private bool m_useColorUp;

		[Token(Token = "0x4001A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		private Color32 m_colorUp;

		[Token(Token = "0x4001A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[SerializeField]
		private bool m_useColorDown;

		[Token(Token = "0x4001A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private Color32 m_colorDown;

		[Token(Token = "0x170002A9")]
		public bool CutUL
		{
			[Token(Token = "0x6001809")]
			[Address(RVA = "0xFE82B8", Offset = "0xFE82B8", VA = "0xFE82B8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600180A")]
			[Address(RVA = "0xFE82C0", Offset = "0xFE82C0", VA = "0xFE82C0")]
			set
			{
			}
		}

		[Token(Token = "0x170002AA")]
		public bool CutUR
		{
			[Token(Token = "0x600180B")]
			[Address(RVA = "0xFE82D8", Offset = "0xFE82D8", VA = "0xFE82D8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600180C")]
			[Address(RVA = "0xFE82E0", Offset = "0xFE82E0", VA = "0xFE82E0")]
			set
			{
			}
		}

		[Token(Token = "0x170002AB")]
		public bool CutLL
		{
			[Token(Token = "0x600180D")]
			[Address(RVA = "0xFE82F8", Offset = "0xFE82F8", VA = "0xFE82F8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600180E")]
			[Address(RVA = "0xFE8300", Offset = "0xFE8300", VA = "0xFE8300")]
			set
			{
			}
		}

		[Token(Token = "0x170002AC")]
		public bool CutLR
		{
			[Token(Token = "0x600180F")]
			[Address(RVA = "0xFE8318", Offset = "0xFE8318", VA = "0xFE8318")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001810")]
			[Address(RVA = "0xFE8320", Offset = "0xFE8320", VA = "0xFE8320")]
			set
			{
			}
		}

		[Token(Token = "0x170002AD")]
		public bool MakeColumns
		{
			[Token(Token = "0x6001811")]
			[Address(RVA = "0xFE8338", Offset = "0xFE8338", VA = "0xFE8338")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001812")]
			[Address(RVA = "0xFE8340", Offset = "0xFE8340", VA = "0xFE8340")]
			set
			{
			}
		}

		[Token(Token = "0x170002AE")]
		public bool UseColorUp
		{
			[Token(Token = "0x6001813")]
			[Address(RVA = "0xFE8358", Offset = "0xFE8358", VA = "0xFE8358")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001814")]
			[Address(RVA = "0xFE8360", Offset = "0xFE8360", VA = "0xFE8360")]
			set
			{
			}
		}

		[Token(Token = "0x170002AF")]
		public Color32 ColorUp
		{
			[Token(Token = "0x6001815")]
			[Address(RVA = "0xFE836C", Offset = "0xFE836C", VA = "0xFE836C")]
			get
			{
				return default(Color32);
			}
			[Token(Token = "0x6001816")]
			[Address(RVA = "0xFE8374", Offset = "0xFE8374", VA = "0xFE8374")]
			set
			{
			}
		}

		[Token(Token = "0x170002B0")]
		public bool UseColorDown
		{
			[Token(Token = "0x6001817")]
			[Address(RVA = "0xFE837C", Offset = "0xFE837C", VA = "0xFE837C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001818")]
			[Address(RVA = "0xFE8384", Offset = "0xFE8384", VA = "0xFE8384")]
			set
			{
			}
		}

		[Token(Token = "0x170002B1")]
		public Color32 ColorDown
		{
			[Token(Token = "0x6001819")]
			[Address(RVA = "0xFE8390", Offset = "0xFE8390", VA = "0xFE8390")]
			get
			{
				return default(Color32);
			}
			[Token(Token = "0x600181A")]
			[Address(RVA = "0xFE8398", Offset = "0xFE8398", VA = "0xFE8398")]
			set
			{
			}
		}

		[Token(Token = "0x600181B")]
		[Address(RVA = "0xFE83A0", Offset = "0xFE83A0", VA = "0xFE83A0", Slot = "44")]
		protected override void OnPopulateMesh(VertexHelper vh)
		{
		}

		[Token(Token = "0x600181C")]
		[Address(RVA = "0xFE8D2C", Offset = "0xFE8D2C", VA = "0xFE8D2C")]
		private static void AddSquare(Rect rect, Rect rectUV, Color32 color32, VertexHelper vh)
		{
		}

		[Token(Token = "0x600181D")]
		[Address(RVA = "0xFE8C00", Offset = "0xFE8C00", VA = "0xFE8C00")]
		private static void AddSquare(Vector2 a, Vector2 b, Vector2 c, Vector2 d, Rect rectUV, Color32 color32, VertexHelper vh)
		{
		}

		[Token(Token = "0x600181E")]
		[Address(RVA = "0xFE8ED4", Offset = "0xFE8ED4", VA = "0xFE8ED4")]
		private static int AddVert(float x, float y, Rect area, Color32 color32, VertexHelper vh)
		{
			return default(int);
		}

		[Token(Token = "0x600181F")]
		[Address(RVA = "0xFE8FEC", Offset = "0xFE8FEC", VA = "0xFE8FEC")]
		public UICornerCut()
		{
		}
	}
	[Token(Token = "0x2000450")]
	[AddComponentMenu("UI/Extensions/Primitives/UIGridRenderer")]
	public class UIGridRenderer : UILineRenderer
	{
		[Token(Token = "0x4001A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		private int m_GridColumns;

		[Token(Token = "0x4001A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		[SerializeField]
		private int m_GridRows;

		[Token(Token = "0x170002B2")]
		public int GridColumns
		{
			[Token(Token = "0x6001820")]
			[Address(RVA = "0xFE9004", Offset = "0xFE9004", VA = "0xFE9004")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001821")]
			[Address(RVA = "0xFE900C", Offset = "0xFE900C", VA = "0xFE900C")]
			set
			{
			}
		}

		[Token(Token = "0x170002B3")]
		public int GridRows
		{
			[Token(Token = "0x6001822")]
			[Address(RVA = "0xFE9030", Offset = "0xFE9030", VA = "0xFE9030")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001823")]
			[Address(RVA = "0xFE9038", Offset = "0xFE9038", VA = "0xFE9038")]
			set
			{
			}
		}

		[Token(Token = "0x6001824")]
		[Address(RVA = "0xFE905C", Offset = "0xFE905C", VA = "0xFE905C", Slot = "44")]
		protected override void OnPopulateMesh(VertexHelper vh)
		{
		}

		[Token(Token = "0x6001825")]
		[Address(RVA = "0xFE93C4", Offset = "0xFE93C4", VA = "0xFE93C4")]
		public UIGridRenderer()
		{
		}
	}
	[Token(Token = "0x2000451")]
	[AddComponentMenu("UI/Extensions/Primitives/UILineRenderer")]
	[RequireComponent(typeof(RectTransform))]
	public class UILineRenderer : UIPrimitiveBase
	{
		[Token(Token = "0x2000452")]
		private enum SegmentType
		{
			[Token(Token = "0x4001A87")]
			Start,
			[Token(Token = "0x4001A88")]
			Middle,
			[Token(Token = "0x4001A89")]
			End,
			[Token(Token = "0x4001A8A")]
			Full
		}

		[Token(Token = "0x2000453")]
		public enum JoinType
		{
			[Token(Token = "0x4001A8C")]
			Bevel,
			[Token(Token = "0x4001A8D")]
			Miter
		}

		[Token(Token = "0x2000454")]
		public enum BezierType
		{
			[Token(Token = "0x4001A8F")]
			None,
			[Token(Token = "0x4001A90")]
			Quick,
			[Token(Token = "0x4001A91")]
			Basic,
			[Token(Token = "0x4001A92")]
			Improved,
			[Token(Token = "0x4001A93")]
			Catenary
		}

		[Token(Token = "0x4001A6E")]
		private const float MIN_MITER_JOIN = (float)Math.PI / 12f;

		[Token(Token = "0x4001A6F")]
		private const float MIN_BEVEL_NICE_JOIN = (float)Math.PI / 6f;

		[Token(Token = "0x4001A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector2 UV_TOP_LEFT;

		[Token(Token = "0x4001A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Vector2 UV_BOTTOM_LEFT;

		[Token(Token = "0x4001A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Vector2 UV_TOP_CENTER_LEFT;

		[Token(Token = "0x4001A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Vector2 UV_TOP_CENTER_RIGHT;

		[Token(Token = "0x4001A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static Vector2 UV_BOTTOM_CENTER_LEFT;

		[Token(Token = "0x4001A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static Vector2 UV_BOTTOM_CENTER_RIGHT;

		[Token(Token = "0x4001A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static Vector2 UV_TOP_RIGHT;

		[Token(Token = "0x4001A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static Vector2 UV_BOTTOM_RIGHT;

		[Token(Token = "0x4001A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static Vector2[] startUvs;

		[Token(Token = "0x4001A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static Vector2[] middleUvs;

		[Token(Token = "0x4001A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static Vector2[] endUvs;

		[Token(Token = "0x4001A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private static Vector2[] fullUvs;

		[Token(Token = "0x4001A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		[Tooltip("Points to draw lines between\n Can be improved using the Resolution Option")]
		internal Vector2[] m_points;

		[Token(Token = "0x4001A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		[Tooltip("Segments to be drawn\n This is a list of arrays of points")]
		internal List<Vector2[]> m_segments;

		[Token(Token = "0x4001A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		[Tooltip("Thickness of the line")]
		internal float lineThickness;

		[Token(Token = "0x4001A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[Tooltip("Use the relative bounds of the Rect Transform (0,0 -> 0,1) or screen space coordinates")]
		[SerializeField]
		internal bool relativeSize;

		[Token(Token = "0x4001A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10D")]
		[SerializeField]
		[Tooltip("Do the points identify a single line or split pairs of lines")]
		internal bool lineList;

		[Token(Token = "0x4001A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10E")]
		[SerializeField]
		[Tooltip("Add end caps to each line\nMultiple caps when used with Line List")]
		internal bool lineCaps;

		[Token(Token = "0x4001A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		[Tooltip("Resolution of the Bezier curve, different to line Resolution")]
		internal int bezierSegmentsPerCurve;

		[Token(Token = "0x4001A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		[Tooltip("The type of Join used between lines, Square/Mitre or Curved/Bevel")]
		public JoinType LineJoins;

		[Token(Token = "0x4001A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[Tooltip("Bezier method to apply to line, see docs for options\nCan't be used in conjunction with Resolution as Bezier already changes the resolution")]
		public BezierType BezierMode;

		[Token(Token = "0x4001A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[HideInInspector]
		public bool drivenExternally;

		[Token(Token = "0x170002B4")]
		public float LineThickness
		{
			[Token(Token = "0x6001826")]
			[Address(RVA = "0xFE93F4", Offset = "0xFE93F4", VA = "0xFE93F4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001827")]
			[Address(RVA = "0xFE93FC", Offset = "0xFE93FC", VA = "0xFE93FC")]
			set
			{
			}
		}

		[Token(Token = "0x170002B5")]
		public bool RelativeSize
		{
			[Token(Token = "0x6001828")]
			[Address(RVA = "0xFE9410", Offset = "0xFE9410", VA = "0xFE9410")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001829")]
			[Address(RVA = "0xFE9418", Offset = "0xFE9418", VA = "0xFE9418")]
			set
			{
			}
		}

		[Token(Token = "0x170002B6")]
		public bool LineList
		{
			[Token(Token = "0x600182A")]
			[Address(RVA = "0xFE9430", Offset = "0xFE9430", VA = "0xFE9430")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600182B")]
			[Address(RVA = "0xFE9438", Offset = "0xFE9438", VA = "0xFE9438")]
			set
			{
			}
		}

		[Token(Token = "0x170002B7")]
		public bool LineCaps
		{
			[Token(Token = "0x600182C")]
			[Address(RVA = "0xFE9450", Offset = "0xFE9450", VA = "0xFE9450")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600182D")]
			[Address(RVA = "0xFE9458", Offset = "0xFE9458", VA = "0xFE9458")]
			set
			{
			}
		}

		[Token(Token = "0x170002B8")]
		public int BezierSegmentsPerCurve
		{
			[Token(Token = "0x600182E")]
			[Address(RVA = "0xFE9470", Offset = "0xFE9470", VA = "0xFE9470")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600182F")]
			[Address(RVA = "0xFE9478", Offset = "0xFE9478", VA = "0xFE9478")]
			set
			{
			}
		}

		[Token(Token = "0x170002B9")]
		public Vector2[] Points
		{
			[Token(Token = "0x6001830")]
			[Address(RVA = "0xFE9480", Offset = "0xFE9480", VA = "0xFE9480")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001831")]
			[Address(RVA = "0xFE9488", Offset = "0xFE9488", VA = "0xFE9488")]
			set
			{
			}
		}

		[Token(Token = "0x170002BA")]
		public List<Vector2[]> Segments
		{
			[Token(Token = "0x6001832")]
			[Address(RVA = "0xFE94C4", Offset = "0xFE94C4", VA = "0xFE94C4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001833")]
			[Address(RVA = "0xFE94CC", Offset = "0xFE94CC", VA = "0xFE94CC")]
			set
			{
			}
		}

		[Token(Token = "0x6001834")]
		[Address(RVA = "0xFE94F8", Offset = "0xFE94F8", VA = "0xFE94F8")]
		private void PopulateMesh(VertexHelper vh, Vector2[] pointsToDraw)
		{
		}

		[Token(Token = "0x6001835")]
		[Address(RVA = "0xFE92A0", Offset = "0xFE92A0", VA = "0xFE92A0", Slot = "44")]
		protected override void OnPopulateMesh(VertexHelper vh)
		{
		}

		[Token(Token = "0x6001836")]
		[Address(RVA = "0xFEB27C", Offset = "0xFEB27C", VA = "0xFEB27C")]
		private UIVertex[] CreateLineCap(Vector2 start, Vector2 end, SegmentType type)
		{
			return null;
		}

		[Token(Token = "0x6001837")]
		[Address(RVA = "0xFEB4DC", Offset = "0xFEB4DC", VA = "0xFEB4DC")]
		private UIVertex[] CreateLineSegment(Vector2 start, Vector2 end, SegmentType type, [Optional] UIVertex[] previousVert)
		{
			return null;
		}

		[Token(Token = "0x6001838")]
		[Address(RVA = "0xFEBC58", Offset = "0xFEBC58", VA = "0xFEBC58", Slot = "75")]
		protected override void GeneratedUVs()
		{
		}

		[Token(Token = "0x6001839")]
		[Address(RVA = "0xFEC0E0", Offset = "0xFEC0E0", VA = "0xFEC0E0", Slot = "76")]
		protected override void ResolutionToNativeSize(float distance)
		{
		}

		[Token(Token = "0x600183A")]
		[Address(RVA = "0xFEC288", Offset = "0xFEC288", VA = "0xFEC288")]
		private int GetSegmentPointCount()
		{
			return default(int);
		}

		[Token(Token = "0x600183B")]
		[Address(RVA = "0xFEC400", Offset = "0xFEC400", VA = "0xFEC400")]
		public Vector2 GetPosition(int index, int segmentIndex = 0)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600183C")]
		[Address(RVA = "0xFEC614", Offset = "0xFEC614", VA = "0xFEC614")]
		public Vector2 GetPositionBySegment(int index, int segment)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600183D")]
		[Address(RVA = "0xFEC6A0", Offset = "0xFEC6A0", VA = "0xFEC6A0")]
		public Vector2 GetClosestPoint(Vector2 p1, Vector2 p2, Vector2 p3)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600183E")]
		[Address(RVA = "0xFE93E0", Offset = "0xFE93E0", VA = "0xFE93E0")]
		public UILineRenderer()
		{
		}
	}
	[Token(Token = "0x2000455")]
	[RequireComponent(typeof(RectTransform))]
	[AddComponentMenu("UI/Extensions/Primitives/UILineRendererList")]
	public class UILineRendererList : UIPrimitiveBase
	{
		[Token(Token = "0x2000456")]
		private enum SegmentType
		{
			[Token(Token = "0x4001AAC")]
			Start,
			[Token(Token = "0x4001AAD")]
			Middle,
			[Token(Token = "0x4001AAE")]
			End,
			[Token(Token = "0x4001AAF")]
			Full
		}

		[Token(Token = "0x2000457")]
		public enum JoinType
		{
			[Token(Token = "0x4001AB1")]
			Bevel,
			[Token(Token = "0x4001AB2")]
			Miter
		}

		[Token(Token = "0x2000458")]
		public enum BezierType
		{
			[Token(Token = "0x4001AB4")]
			None,
			[Token(Token = "0x4001AB5")]
			Quick,
			[Token(Token = "0x4001AB6")]
			Basic,
			[Token(Token = "0x4001AB7")]
			Improved,
			[Token(Token = "0x4001AB8")]
			Catenary
		}

		[Token(Token = "0x4001A94")]
		private const float MIN_MITER_JOIN = (float)Math.PI / 12f;

		[Token(Token = "0x4001A95")]
		private const float MIN_BEVEL_NICE_JOIN = (float)Math.PI / 6f;

		[Token(Token = "0x4001A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector2 UV_TOP_LEFT;

		[Token(Token = "0x4001A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Vector2 UV_BOTTOM_LEFT;

		[Token(Token = "0x4001A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Vector2 UV_TOP_CENTER_LEFT;

		[Token(Token = "0x4001A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Vector2 UV_TOP_CENTER_RIGHT;

		[Token(Token = "0x4001A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static Vector2 UV_BOTTOM_CENTER_LEFT;

		[Token(Token = "0x4001A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static Vector2 UV_BOTTOM_CENTER_RIGHT;

		[Token(Token = "0x4001A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static Vector2 UV_TOP_RIGHT;

		[Token(Token = "0x4001A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static Vector2 UV_BOTTOM_RIGHT;

		[Token(Token = "0x4001A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static Vector2[] startUvs;

		[Token(Token = "0x4001A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static Vector2[] middleUvs;

		[Token(Token = "0x4001AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static Vector2[] endUvs;

		[Token(Token = "0x4001AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private static Vector2[] fullUvs;

		[Token(Token = "0x4001AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		[Tooltip("Points to draw lines between\n Can be improved using the Resolution Option")]
		internal List<Vector2> m_points;

		[Token(Token = "0x4001AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		[Tooltip("Thickness of the line")]
		internal float lineThickness;

		[Token(Token = "0x4001AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[Tooltip("Use the relative bounds of the Rect Transform (0,0 -> 0,1) or screen space coordinates")]
		[SerializeField]
		internal bool relativeSize;

		[Token(Token = "0x4001AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x105")]
		[Tooltip("Do the points identify a single line or split pairs of lines")]
		[SerializeField]
		internal bool lineList;

		[Token(Token = "0x4001AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x106")]
		[Tooltip("Add end caps to each line\nMultiple caps when used with Line List")]
		[SerializeField]
		internal bool lineCaps;

		[Token(Token = "0x4001AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Tooltip("Resolution of the Bezier curve, different to line Resolution")]
		[SerializeField]
		internal int bezierSegmentsPerCurve;

		[Token(Token = "0x4001AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[Tooltip("The type of Join used between lines, Square/Mitre or Curved/Bevel")]
		public JoinType LineJoins;

		[Token(Token = "0x4001AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Tooltip("Bezier method to apply to line, see docs for options\nCan't be used in conjunction with Resolution as Bezier already changes the resolution")]
		public BezierType BezierMode;

		[Token(Token = "0x4001AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		[HideInInspector]
		public bool drivenExternally;

		[Token(Token = "0x170002BB")]
		public float LineThickness
		{
			[Token(Token = "0x600183F")]
			[Address(RVA = "0xFEC88C", Offset = "0xFEC88C", VA = "0xFEC88C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001840")]
			[Address(RVA = "0xFEC894", Offset = "0xFEC894", VA = "0xFEC894")]
			set
			{
			}
		}

		[Token(Token = "0x170002BC")]
		public bool RelativeSize
		{
			[Token(Token = "0x6001841")]
			[Address(RVA = "0xFEC8A8", Offset = "0xFEC8A8", VA = "0xFEC8A8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001842")]
			[Address(RVA = "0xFEC8B0", Offset = "0xFEC8B0", VA = "0xFEC8B0")]
			set
			{
			}
		}

		[Token(Token = "0x170002BD")]
		public bool LineList
		{
			[Token(Token = "0x6001843")]
			[Address(RVA = "0xFEC8C8", Offset = "0xFEC8C8", VA = "0xFEC8C8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001844")]
			[Address(RVA = "0xFEC8D0", Offset = "0xFEC8D0", VA = "0xFEC8D0")]
			set
			{
			}
		}

		[Token(Token = "0x170002BE")]
		public bool LineCaps
		{
			[Token(Token = "0x6001845")]
			[Address(RVA = "0xFEC8E8", Offset = "0xFEC8E8", VA = "0xFEC8E8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001846")]
			[Address(RVA = "0xFEC8F0", Offset = "0xFEC8F0", VA = "0xFEC8F0")]
			set
			{
			}
		}

		[Token(Token = "0x170002BF")]
		public int BezierSegmentsPerCurve
		{
			[Token(Token = "0x6001847")]
			[Address(RVA = "0xFEC908", Offset = "0xFEC908", VA = "0xFEC908")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001848")]
			[Address(RVA = "0xFEC910", Offset = "0xFEC910", VA = "0xFEC910")]
			set
			{
			}
		}

		[Token(Token = "0x170002C0")]
		public List<Vector2> Points
		{
			[Token(Token = "0x6001849")]
			[Address(RVA = "0xFEC918", Offset = "0xFEC918", VA = "0xFEC918")]
			get
			{
				return null;
			}
			[Token(Token = "0x600184A")]
			[Address(RVA = "0xFEC920", Offset = "0xFEC920", VA = "0xFEC920")]
			set
			{
			}
		}

		[Token(Token = "0x600184B")]
		[Address(RVA = "0xFEC95C", Offset = "0xFEC95C", VA = "0xFEC95C")]
		public void AddPoint(Vector2 pointToAdd)
		{
		}

		[Token(Token = "0x600184C")]
		[Address(RVA = "0xFECA20", Offset = "0xFECA20", VA = "0xFECA20")]
		public void RemovePoint(Vector2 pointToRemove)
		{
		}

		[Token(Token = "0x600184D")]
		[Address(RVA = "0xFECA9C", Offset = "0xFECA9C", VA = "0xFECA9C")]
		public void ClearPoints()
		{
		}

		[Token(Token = "0x600184E")]
		[Address(RVA = "0xFECAFC", Offset = "0xFECAFC", VA = "0xFECAFC")]
		private void PopulateMesh(VertexHelper vh, List<Vector2> pointsToDraw)
		{
		}

		[Token(Token = "0x600184F")]
		[Address(RVA = "0xFEE8DC", Offset = "0xFEE8DC", VA = "0xFEE8DC", Slot = "44")]
		protected override void OnPopulateMesh(VertexHelper vh)
		{
		}

		[Token(Token = "0x6001850")]
		[Address(RVA = "0xFEE3BC", Offset = "0xFEE3BC", VA = "0xFEE3BC")]
		private UIVertex[] CreateLineCap(Vector2 start, Vector2 end, SegmentType type)
		{
			return null;
		}

		[Token(Token = "0x6001851")]
		[Address(RVA = "0xFEE618", Offset = "0xFEE618", VA = "0xFEE618")]
		private UIVertex[] CreateLineSegment(Vector2 start, Vector2 end, SegmentType type)
		{
			return null;
		}

		[Token(Token = "0x6001852")]
		[Address(RVA = "0xFEE96C", Offset = "0xFEE96C", VA = "0xFEE96C", Slot = "75")]
		protected override void GeneratedUVs()
		{
		}

		[Token(Token = "0x6001853")]
		[Address(RVA = "0xFEED7C", Offset = "0xFEED7C", VA = "0xFEED7C", Slot = "76")]
		protected override void ResolutionToNativeSize(float distance)
		{
		}

		[Token(Token = "0x6001854")]
		[Address(RVA = "0xFEEE28", Offset = "0xFEEE28", VA = "0xFEEE28")]
		public UILineRendererList()
		{
		}
	}
	[Token(Token = "0x2000459")]
	[AddComponentMenu("UI/Extensions/Primitives/UILineTextureRenderer")]
	public class UILineTextureRenderer : UIPrimitiveBase
	{
		[Token(Token = "0x4001AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private Rect m_UVRect;

		[Token(Token = "0x4001ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		private Vector2[] m_points;

		[Token(Token = "0x4001ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public float LineThickness;

		[Token(Token = "0x4001ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public bool UseMargins;

		[Token(Token = "0x4001ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public Vector2 Margin;

		[Token(Token = "0x4001ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public bool relativeSize;

		[Token(Token = "0x170002C1")]
		public Rect uvRect
		{
			[Token(Token = "0x6001855")]
			[Address(RVA = "0xFEEE3C", Offset = "0xFEEE3C", VA = "0xFEEE3C")]
			get
			{
				return default(Rect);
			}
			[Token(Token = "0x6001856")]
			[Address(RVA = "0xFEEE4C", Offset = "0xFEEE4C", VA = "0xFEEE4C")]
			set
			{
			}
		}

		[Token(Token = "0x170002C2")]
		public Vector2[] Points
		{
			[Token(Token = "0x6001857")]
			[Address(RVA = "0xFEEED4", Offset = "0xFEEED4", VA = "0xFEEED4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001858")]
			[Address(RVA = "0xFEEEDC", Offset = "0xFEEEDC", VA = "0xFEEEDC")]
			set
			{
			}
		}

		[Token(Token = "0x6001859")]
		[Address(RVA = "0xFEEF1C", Offset = "0xFEEF1C", VA = "0xFEEF1C", Slot = "44")]
		protected override void OnPopulateMesh(VertexHelper vh)
		{
		}

		[Token(Token = "0x600185A")]
		[Address(RVA = "0xFEF9B8", Offset = "0xFEF9B8", VA = "0xFEF9B8")]
		public Vector3 RotatePointAroundPivot(Vector3 point, Vector3 pivot, Vector3 angles)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600185B")]
		[Address(RVA = "0xFEFA38", Offset = "0xFEFA38", VA = "0xFEFA38")]
		public UILineTextureRenderer()
		{
		}
	}
	[Token(Token = "0x200045A")]
	[AddComponentMenu("UI/Extensions/Primitives/UI Polygon")]
	public class UIPolygon : UIPrimitiveBase
	{
		[Token(Token = "0x4001ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF5")]
		public bool fill;

		[Token(Token = "0x4001AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public float thickness;

		[Token(Token = "0x4001AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[Range(3f, 360f)]
		public int sides;

		[Token(Token = "0x4001AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Range(0f, 360f)]
		public float rotation;

		[Token(Token = "0x4001AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Range(0f, 1f)]
		public float[] VerticesDistances;

		[Token(Token = "0x4001AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private float size;

		[Token(Token = "0x600185C")]
		[Address(RVA = "0xFEFA88", Offset = "0xFEFA88", VA = "0xFEFA88")]
		public void DrawPolygon(int _sides)
		{
		}

		[Token(Token = "0x600185D")]
		[Address(RVA = "0xFEFB50", Offset = "0xFEFB50", VA = "0xFEFB50")]
		public void DrawPolygon(int _sides, float[] _VerticesDistances)
		{
		}

		[Token(Token = "0x600185E")]
		[Address(RVA = "0xFEFB88", Offset = "0xFEFB88", VA = "0xFEFB88")]
		public void DrawPolygon(int _sides, float[] _VerticesDistances, float _rotation)
		{
		}

		[Token(Token = "0x600185F")]
		[Address(RVA = "0xFEFBCC", Offset = "0xFEFBCC", VA = "0xFEFBCC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001860")]
		[Address(RVA = "0xFEFCE4", Offset = "0xFEFCE4", VA = "0xFEFCE4", Slot = "44")]
		protected override void OnPopulateMesh(VertexHelper vh)
		{
		}

		[Token(Token = "0x6001861")]
		[Address(RVA = "0xFF00B4", Offset = "0xFF00B4", VA = "0xFF00B4")]
		public UIPolygon()
		{
		}
	}
	[Token(Token = "0x200045B")]
	public enum ResolutionMode
	{
		[Token(Token = "0x4001AC6")]
		None,
		[Token(Token = "0x4001AC7")]
		PerSegment,
		[Token(Token = "0x4001AC8")]
		PerLine
	}
	[Token(Token = "0x200045C")]
	[RequireComponent(typeof(CanvasRenderer))]
	public class UIPrimitiveBase : MaskableGraphic, ILayoutElement, ICanvasRaycastFilter
	{
		[Token(Token = "0x4001AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static Material s_ETC1DefaultUI;

		[Token(Token = "0x4001ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private List<Vector2> outputList;

		[Token(Token = "0x4001ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private Sprite m_Sprite;

		[NonSerialized]
		[Token(Token = "0x4001ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Sprite m_OverrideSprite;

		[Token(Token = "0x4001ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		internal float m_EventAlphaThreshold;

		[Token(Token = "0x4001ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[SerializeField]
		private ResolutionMode m_improveResolution;

		[Token(Token = "0x4001ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		protected float m_Resolution;

		[Token(Token = "0x4001AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[SerializeField]
		private bool m_useNativeSize;

		[Token(Token = "0x170002C3")]
		public Sprite sprite
		{
			[Token(Token = "0x6001862")]
			[Address(RVA = "0xFF0128", Offset = "0xFF0128", VA = "0xFF0128")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001863")]
			[Address(RVA = "0xFF0130", Offset = "0xFF0130", VA = "0xFF0130")]
			set
			{
			}
		}

		[Token(Token = "0x170002C4")]
		public Sprite overrideSprite
		{
			[Token(Token = "0x6001864")]
			[Address(RVA = "0xFF01B4", Offset = "0xFF01B4", VA = "0xFF01B4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001865")]
			[Address(RVA = "0xFF01B8", Offset = "0xFF01B8", VA = "0xFF01B8")]
			set
			{
			}
		}

		[Token(Token = "0x170002C5")]
		protected Sprite activeSprite
		{
			[Token(Token = "0x6001866")]
			[Address(RVA = "0xFEC068", Offset = "0xFEC068", VA = "0xFEC068")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002C6")]
		public float eventAlphaThreshold
		{
			[Token(Token = "0x6001867")]
			[Address(RVA = "0xFF023C", Offset = "0xFF023C", VA = "0xFF023C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001868")]
			[Address(RVA = "0xFF0244", Offset = "0xFF0244", VA = "0xFF0244")]
			set
			{
			}
		}

		[Token(Token = "0x170002C7")]
		public ResolutionMode ImproveResolution
		{
			[Token(Token = "0x6001869")]
			[Address(RVA = "0xFF024C", Offset = "0xFF024C", VA = "0xFF024C")]
			get
			{
				return default(ResolutionMode);
			}
			[Token(Token = "0x600186A")]
			[Address(RVA = "0xFF0254", Offset = "0xFF0254", VA = "0xFF0254")]
			set
			{
			}
		}

		[Token(Token = "0x170002C8")]
		public float Resolution
		{
			[Token(Token = "0x600186B")]
			[Address(RVA = "0xFF0268", Offset = "0xFF0268", VA = "0xFF0268")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600186C")]
			[Address(RVA = "0xFF0270", Offset = "0xFF0270", VA = "0xFF0270")]
			set
			{
			}
		}

		[Token(Token = "0x170002C9")]
		public bool UseNativeSize
		{
			[Token(Token = "0x600186D")]
			[Address(RVA = "0xFF0284", Offset = "0xFF0284", VA = "0xFF0284")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600186E")]
			[Address(RVA = "0xFF028C", Offset = "0xFF028C", VA = "0xFF028C")]
			set
			{
			}
		}

		[Token(Token = "0x170002CA")]
		public static Material defaultETC1GraphicMaterial
		{
			[Token(Token = "0x6001870")]
			[Address(RVA = "0xFF02A4", Offset = "0xFF02A4", VA = "0xFF02A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002CB")]
		public override Texture mainTexture
		{
			[Token(Token = "0x6001871")]
			[Address(RVA = "0xFF0354", Offset = "0xFF0354", VA = "0xFF0354", Slot = "35")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002CC")]
		public bool hasBorder
		{
			[Token(Token = "0x6001872")]
			[Address(RVA = "0xFF04CC", Offset = "0xFF04CC", VA = "0xFF04CC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002CD")]
		public float pixelsPerUnit
		{
			[Token(Token = "0x6001873")]
			[Address(RVA = "0xFEC18C", Offset = "0xFEC18C", VA = "0xFEC18C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002CE")]
		public override Material material
		{
			[Token(Token = "0x6001874")]
			[Address(RVA = "0xFF0584", Offset = "0xFF0584", VA = "0xFF0584", Slot = "32")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001875")]
			[Address(RVA = "0xFF068C", Offset = "0xFF068C", VA = "0xFF068C", Slot = "33")]
			set
			{
			}
		}

		[Token(Token = "0x170002CF")]
		public virtual float minWidth
		{
			[Token(Token = "0x600187D")]
			[Address(RVA = "0xFF06A4", Offset = "0xFF06A4", VA = "0xFF06A4", Slot = "79")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002D0")]
		public virtual float preferredWidth
		{
			[Token(Token = "0x600187E")]
			[Address(RVA = "0xFF06AC", Offset = "0xFF06AC", VA = "0xFF06AC", Slot = "80")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002D1")]
		public virtual float flexibleWidth
		{
			[Token(Token = "0x600187F")]
			[Address(RVA = "0xFF0774", Offset = "0xFF0774", VA = "0xFF0774", Slot = "81")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002D2")]
		public virtual float minHeight
		{
			[Token(Token = "0x6001880")]
			[Address(RVA = "0xFF077C", Offset = "0xFF077C", VA = "0xFF077C", Slot = "82")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002D3")]
		public virtual float preferredHeight
		{
			[Token(Token = "0x6001881")]
			[Address(RVA = "0xFF0784", Offset = "0xFF0784", VA = "0xFF0784", Slot = "83")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002D4")]
		public virtual float flexibleHeight
		{
			[Token(Token = "0x6001882")]
			[Address(RVA = "0xFF084C", Offset = "0xFF084C", VA = "0xFF084C", Slot = "84")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002D5")]
		public virtual int layoutPriority
		{
			[Token(Token = "0x6001883")]
			[Address(RVA = "0xFF0854", Offset = "0xFF0854", VA = "0xFF0854", Slot = "85")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600186F")]
		[Address(RVA = "0xFEC7F4", Offset = "0xFEC7F4", VA = "0xFEC7F4")]
		protected UIPrimitiveBase()
		{
		}

		[Token(Token = "0x6001876")]
		[Address(RVA = "0xFEB7E8", Offset = "0xFEB7E8", VA = "0xFEB7E8")]
		protected UIVertex[] SetVbo(Vector2[] vertices, Vector2[] uvs)
		{
			return null;
		}

		[Token(Token = "0x6001877")]
		[Address(RVA = "0xFEB1D4", Offset = "0xFEB1D4", VA = "0xFEB1D4")]
		protected Vector2[] IncreaseResolution(Vector2[] input)
		{
			return null;
		}

		[Token(Token = "0x6001878")]
		[Address(RVA = "0xFEDDC0", Offset = "0xFEDDC0", VA = "0xFEDDC0")]
		protected List<Vector2> IncreaseResolution(List<Vector2> input)
		{
			return null;
		}

		[Token(Token = "0x6001879")]
		[Address(RVA = "0xFF0694", Offset = "0xFF0694", VA = "0xFF0694", Slot = "75")]
		protected virtual void GeneratedUVs()
		{
		}

		[Token(Token = "0x600187A")]
		[Address(RVA = "0xFF0698", Offset = "0xFF0698", VA = "0xFF0698", Slot = "76")]
		protected virtual void ResolutionToNativeSize(float distance)
		{
		}

		[Token(Token = "0x600187B")]
		[Address(RVA = "0xFF069C", Offset = "0xFF069C", VA = "0xFF069C", Slot = "77")]
		public virtual void CalculateLayoutInputHorizontal()
		{
		}

		[Token(Token = "0x600187C")]
		[Address(RVA = "0xFF06A0", Offset = "0xFF06A0", VA = "0xFF06A0", Slot = "78")]
		public virtual void CalculateLayoutInputVertical()
		{
		}

		[Token(Token = "0x6001884")]
		[Address(RVA = "0xFF085C", Offset = "0xFF085C", VA = "0xFF085C", Slot = "86")]
		public virtual bool IsRaycastLocationValid(Vector2 screenPoint, Camera eventCamera)
		{
			return default(bool);
		}

		[Token(Token = "0x6001885")]
		[Address(RVA = "0xFF0C50", Offset = "0xFF0C50", VA = "0xFF0C50")]
		private Vector2 MapCoordinate(Vector2 local, Rect rect)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001886")]
		[Address(RVA = "0xFF0CC0", Offset = "0xFF0CC0", VA = "0xFF0CC0")]
		private Vector4 GetAdjustedBorders(Vector4 border, Rect rect)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001887")]
		[Address(RVA = "0xFF0D98", Offset = "0xFF0D98", VA = "0xFF0D98", Slot = "5")]
		protected override void OnEnable()
		{
		}
	}
	[Token(Token = "0x200045D")]
	[AddComponentMenu("UI/Extensions/Primitives/Squircle")]
	public class UISquircle : UIPrimitiveBase
	{
		[Token(Token = "0x200045E")]
		public enum Type
		{
			[Token(Token = "0x4001ADB")]
			Classic,
			[Token(Token = "0x4001ADC")]
			Scaled
		}

		[Token(Token = "0x4001AD1")]
		private const float C = 1f;

		[Token(Token = "0x4001AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Space]
		public Type squircleType;

		[Token(Token = "0x4001AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[Range(1f, 40f)]
		public float n;

		[Token(Token = "0x4001AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Min(0.1f)]
		public float delta;

		[Token(Token = "0x4001AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		public float quality;

		[Token(Token = "0x4001AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Min(0f)]
		public float radius;

		[Token(Token = "0x4001AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private float a;

		[Token(Token = "0x4001AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private float b;

		[Token(Token = "0x4001AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private List<Vector2> vert;

		[Token(Token = "0x6001888")]
		[Address(RVA = "0xFF0DC0", Offset = "0xFF0DC0", VA = "0xFF0DC0")]
		private float SquircleFunc(float t, bool xByY)
		{
			return default(float);
		}

		[Token(Token = "0x6001889")]
		[Address(RVA = "0xFF0ECC", Offset = "0xFF0ECC", VA = "0xFF0ECC", Slot = "44")]
		protected override void OnPopulateMesh(VertexHelper vh)
		{
		}

		[Token(Token = "0x600188A")]
		[Address(RVA = "0xFF1FD8", Offset = "0xFF1FD8", VA = "0xFF1FD8")]
		public UISquircle()
		{
		}
	}
	[Token(Token = "0x2000460")]
	public enum NavigationMode
	{
		[Token(Token = "0x4001AE1")]
		Auto,
		[Token(Token = "0x4001AE2")]
		Manual
	}
	[Token(Token = "0x2000461")]
	[AddComponentMenu("Event/Extensions/Tab Navigation Helper")]
	[RequireComponent(typeof(EventSystem))]
	public class TabNavigationHelper : MonoBehaviour
	{
		[Token(Token = "0x4001AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private EventSystem _system;

		[Token(Token = "0x4001AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Selectable StartingObject;

		[Token(Token = "0x4001AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Selectable LastObject;

		[Token(Token = "0x4001AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The path to take when user is tabbing through ui components.")]
		public Selectable[] NavigationPath;

		[Token(Token = "0x4001AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Use the default Unity navigation system or a manual fixed order using Navigation Path")]
		public NavigationMode NavigationMode;

		[Token(Token = "0x4001AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("If True, this will loop the tab order from last to first automatically")]
		public bool CircularNavigation;

		[Token(Token = "0x600188F")]
		[Address(RVA = "0xFF20F8", Offset = "0xFF20F8", VA = "0xFF20F8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001890")]
		[Address(RVA = "0xFF2350", Offset = "0xFF2350", VA = "0xFF2350")]
		public void Update()
		{
		}

		[Token(Token = "0x6001891")]
		[Address(RVA = "0xFF2294", Offset = "0xFF2294", VA = "0xFF2294")]
		private void SelectDefaultObject(out Selectable next)
		{
		}

		[Token(Token = "0x6001892")]
		[Address(RVA = "0xFF2838", Offset = "0xFF2838", VA = "0xFF2838")]
		private void selectGameObject(Selectable selectable)
		{
		}

		[Token(Token = "0x6001893")]
		[Address(RVA = "0xFF29BC", Offset = "0xFF29BC", VA = "0xFF29BC")]
		public TabNavigationHelper()
		{
		}
	}
	[Token(Token = "0x2000462")]
	[AddComponentMenu("UI/Extensions/Bound Tooltip/Bound Tooltip Item")]
	public class BoundTooltipItem : MonoBehaviour
	{
		[Token(Token = "0x4001AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text TooltipText;

		[Token(Token = "0x4001AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 ToolTipOffset;

		[Token(Token = "0x4001AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static BoundTooltipItem instance;

		[Token(Token = "0x170002D6")]
		public bool IsActive
		{
			[Token(Token = "0x6001894")]
			[Address(RVA = "0xFF29C4", Offset = "0xFF29C4", VA = "0xFF29C4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002D7")]
		public static BoundTooltipItem Instance
		{
			[Token(Token = "0x6001898")]
			[Address(RVA = "0xFF2BA0", Offset = "0xFF2BA0", VA = "0xFF2BA0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001895")]
		[Address(RVA = "0xFF29E4", Offset = "0xFF29E4", VA = "0xFF29E4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001896")]
		[Address(RVA = "0xFF2ADC", Offset = "0xFF2ADC", VA = "0xFF2ADC")]
		public void ShowTooltip(string text, Vector3 pos)
		{
		}

		[Token(Token = "0x6001897")]
		[Address(RVA = "0xFF2AB8", Offset = "0xFF2AB8", VA = "0xFF2AB8")]
		public void HideTooltip()
		{
		}

		[Token(Token = "0x6001899")]
		[Address(RVA = "0xFF2C74", Offset = "0xFF2C74", VA = "0xFF2C74")]
		public BoundTooltipItem()
		{
		}
	}
	[Token(Token = "0x2000463")]
	[AddComponentMenu("UI/Extensions/Bound Tooltip/Bound Tooltip Trigger")]
	public class BoundTooltipTrigger : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler, ISelectHandler, IDeselectHandler
	{
		[Token(Token = "0x4001AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[TextArea]
		public string text;

		[Token(Token = "0x4001AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool useMousePosition;

		[Token(Token = "0x4001AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 offset;

		[Token(Token = "0x600189A")]
		[Address(RVA = "0xFF2C7C", Offset = "0xFF2C7C", VA = "0xFF2C7C", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600189B")]
		[Address(RVA = "0xFF2D20", Offset = "0xFF2D20", VA = "0xFF2D20", Slot = "6")]
		public void OnSelect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x600189C")]
		[Address(RVA = "0xFF2D4C", Offset = "0xFF2D4C", VA = "0xFF2D4C", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600189D")]
		[Address(RVA = "0xFF2D68", Offset = "0xFF2D68", VA = "0xFF2D68", Slot = "7")]
		public void OnDeselect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x600189E")]
		[Address(RVA = "0xFF2CD8", Offset = "0xFF2CD8", VA = "0xFF2CD8")]
		private void StartHover(Vector3 position)
		{
		}

		[Token(Token = "0x600189F")]
		[Address(RVA = "0xFF2D50", Offset = "0xFF2D50", VA = "0xFF2D50")]
		private void StopHover()
		{
		}

		[Token(Token = "0x60018A0")]
		[Address(RVA = "0xFF2D6C", Offset = "0xFF2D6C", VA = "0xFF2D6C")]
		public BoundTooltipTrigger()
		{
		}
	}
	[Token(Token = "0x2000464")]
	[AddComponentMenu("UI/Extensions/HoverTooltip")]
	public class HoverTooltip : MonoBehaviour
	{
		[Token(Token = "0x4001AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int horizontalPadding;

		[Token(Token = "0x4001AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int verticalPadding;

		[Token(Token = "0x4001AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text thisText;

		[Token(Token = "0x4001AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HorizontalLayoutGroup hlG;

		[Token(Token = "0x4001AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public RectTransform bgImage;

		[Token(Token = "0x4001AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Image bgImageSource;

		[Token(Token = "0x4001AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool firstUpdate;

		[Token(Token = "0x4001AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		private bool inside;

		[Token(Token = "0x4001AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private RenderMode GUIMode;

		[Token(Token = "0x4001AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Camera GUICamera;

		[Token(Token = "0x4001AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 lowerLeft;

		[Token(Token = "0x4001AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 upperRight;

		[Token(Token = "0x4001AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float currentYScaleFactor;

		[Token(Token = "0x4001AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float currentXScaleFactor;

		[Token(Token = "0x4001AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float defaultYOffset;

		[Token(Token = "0x4001AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float defaultXOffset;

		[Token(Token = "0x4001AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float tooltipRealHeight;

		[Token(Token = "0x4001B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float tooltipRealWidth;

		[Token(Token = "0x60018A1")]
		[Address(RVA = "0xFF2D74", Offset = "0xFF2D74", VA = "0xFF2D74")]
		private void Start()
		{
		}

		[Token(Token = "0x60018A2")]
		[Address(RVA = "0xFF2F84", Offset = "0xFF2F84", VA = "0xFF2F84")]
		public void SetTooltip(string text)
		{
		}

		[Token(Token = "0x60018A3")]
		[Address(RVA = "0xFF3530", Offset = "0xFF3530", VA = "0xFF3530")]
		public void SetTooltip(string[] texts)
		{
		}

		[Token(Token = "0x60018A4")]
		[Address(RVA = "0xFF3628", Offset = "0xFF3628", VA = "0xFF3628")]
		public void SetTooltip(string text, bool test)
		{
		}

		[Token(Token = "0x60018A5")]
		[Address(RVA = "0xFF30E4", Offset = "0xFF30E4", VA = "0xFF30E4")]
		public void OnScreenSpaceCamera()
		{
		}

		[Token(Token = "0x60018A6")]
		[Address(RVA = "0xFF366C", Offset = "0xFF366C", VA = "0xFF366C")]
		public void HideTooltip()
		{
		}

		[Token(Token = "0x60018A7")]
		[Address(RVA = "0xFF3728", Offset = "0xFF3728", VA = "0xFF3728")]
		private void Update()
		{
		}

		[Token(Token = "0x60018A8")]
		[Address(RVA = "0xFF375C", Offset = "0xFF375C", VA = "0xFF375C")]
		private void LayoutInit()
		{
		}

		[Token(Token = "0x60018A9")]
		[Address(RVA = "0xFF2FC8", Offset = "0xFF2FC8", VA = "0xFF2FC8")]
		private void NewTooltip()
		{
		}

		[Token(Token = "0x60018AA")]
		[Address(RVA = "0xFF38A0", Offset = "0xFF38A0", VA = "0xFF38A0")]
		public void ActivateTooltipVisibility()
		{
		}

		[Token(Token = "0x60018AB")]
		[Address(RVA = "0xFF2EBC", Offset = "0xFF2EBC", VA = "0xFF2EBC")]
		public void HideTooltipVisibility()
		{
		}

		[Token(Token = "0x60018AC")]
		[Address(RVA = "0xFF396C", Offset = "0xFF396C", VA = "0xFF396C")]
		public HoverTooltip()
		{
		}
	}
	[Token(Token = "0x2000465")]
	[RequireComponent(typeof(RectTransform))]
	[AddComponentMenu("UI/Extensions/Tooltip/Tooltip")]
	public class ToolTip : MonoBehaviour
	{
		[Token(Token = "0x4001B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Text _text;

		[Token(Token = "0x4001B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RectTransform _rectTransform;

		[Token(Token = "0x4001B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RectTransform canvasRectTransform;

		[Token(Token = "0x4001B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The canvas used by the tooltip as positioning and scaling reference. Should usually be the root Canvas of the hierarchy this component is in")]
		public Canvas canvas;

		[Token(Token = "0x4001B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Sets if tooltip triggers will run ForceUpdateCanvases and refresh the tooltip's layout group (if any) when hovered, in order to prevent momentousness misplacement sometimes caused by ContentSizeFitters")]
		public bool tooltipTriggersCanForceCanvasUpdate;

		[Token(Token = "0x4001B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private LayoutGroup _layoutGroup;

		[Token(Token = "0x4001B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool _inside;

		[Token(Token = "0x4001B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float width;

		[Token(Token = "0x4001B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float height;

		[Token(Token = "0x4001B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float YShift;

		[Token(Token = "0x4001B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float xShift;

		[Token(Token = "0x4001B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[HideInInspector]
		public RenderMode guiMode;

		[Token(Token = "0x4001B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Camera _guiCamera;

		[Token(Token = "0x4001B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 screenLowerLeft;

		[Token(Token = "0x4001B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector3 screenUpperRight;

		[Token(Token = "0x4001B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 shiftingVector;

		[Token(Token = "0x4001B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 baseTooltipPos;

		[Token(Token = "0x4001B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 newTTPos;

		[Token(Token = "0x4001B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 adjustedNewTTPos;

		[Token(Token = "0x4001B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 adjustedTTLocalPos;

		[Token(Token = "0x4001B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Vector3 shifterForBorders;

		[Token(Token = "0x4001B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float borderTest;

		[Token(Token = "0x4001B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static ToolTip instance;

		[Token(Token = "0x170002D8")]
		public Camera GuiCamera
		{
			[Token(Token = "0x60018AD")]
			[Address(RVA = "0xFF3974", Offset = "0xFF3974", VA = "0xFF3974")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002D9")]
		public static ToolTip Instance
		{
			[Token(Token = "0x60018AE")]
			[Address(RVA = "0xFF39F4", Offset = "0xFF39F4", VA = "0xFF39F4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018AF")]
		[Address(RVA = "0xFF3AC8", Offset = "0xFF3AC8", VA = "0xFF3AC8")]
		private void Reset()
		{
		}

		[Token(Token = "0x60018B0")]
		[Address(RVA = "0xFF3B44", Offset = "0xFF3B44", VA = "0xFF3B44")]
		public void Awake()
		{
		}

		[Token(Token = "0x60018B1")]
		[Address(RVA = "0xFF3D40", Offset = "0xFF3D40", VA = "0xFF3D40")]
		public void SetTooltip(string ttext)
		{
		}

		[Token(Token = "0x60018B2")]
		[Address(RVA = "0xFF3D80", Offset = "0xFF3D80", VA = "0xFF3D80")]
		public void SetTooltip(string ttext, Vector3 basePos, bool refreshCanvasesBeforeGetSize = false)
		{
		}

		[Token(Token = "0x60018B3")]
		[Address(RVA = "0xFF3EAC", Offset = "0xFF3EAC", VA = "0xFF3EAC")]
		public void HideTooltip()
		{
		}

		[Token(Token = "0x60018B4")]
		[Address(RVA = "0xFF3EDC", Offset = "0xFF3EDC", VA = "0xFF3EDC")]
		private void Update()
		{
		}

		[Token(Token = "0x60018B5")]
		[Address(RVA = "0xFF3EF0", Offset = "0xFF3EF0", VA = "0xFF3EF0")]
		public void RefreshTooltipSize()
		{
		}

		[Token(Token = "0x60018B6")]
		[Address(RVA = "0xFF3E88", Offset = "0xFF3E88", VA = "0xFF3E88")]
		public void ContextualTooltipUpdate(bool refreshCanvasesBeforeGettingSize = false)
		{
		}

		[Token(Token = "0x60018B7")]
		[Address(RVA = "0xFF3F98", Offset = "0xFF3F98", VA = "0xFF3F98")]
		public void OnScreenSpaceCamera(bool refreshCanvasesBeforeGettingSize = false)
		{
		}

		[Token(Token = "0x60018B8")]
		[Address(RVA = "0xFF42F8", Offset = "0xFF42F8", VA = "0xFF42F8")]
		public void OnScreenSpaceOverlay(bool refreshCanvasesBeforeGettingSize = false)
		{
		}

		[Token(Token = "0x60018B9")]
		[Address(RVA = "0xFF4528", Offset = "0xFF4528", VA = "0xFF4528")]
		public ToolTip()
		{
		}
	}
	[Token(Token = "0x2000466")]
	[RequireComponent(typeof(RectTransform))]
	[AddComponentMenu("UI/Extensions/Tooltip/Tooltip Trigger")]
	public class TooltipTrigger : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler, ISelectHandler, IDeselectHandler
	{
		[Token(Token = "0x2000467")]
		public enum TooltipPositioningType
		{
			[Token(Token = "0x4001B1E")]
			mousePosition,
			[Token(Token = "0x4001B1F")]
			mousePositionAndFollow,
			[Token(Token = "0x4001B20")]
			transformPosition
		}

		[Token(Token = "0x2000468")]
		[CompilerGenerated]
		private sealed class <HoveredMouseFollowingLoop>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001B21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001B22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001B23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TooltipTrigger <>4__this;

			[Token(Token = "0x170002DB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60018C7")]
				[Address(RVA = "0xFF499C", Offset = "0xFF499C", VA = "0xFF499C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002DC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60018C9")]
				[Address(RVA = "0xFF49E4", Offset = "0xFF49E4", VA = "0xFF49E4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60018C4")]
			[Address(RVA = "0xFF4820", Offset = "0xFF4820", VA = "0xFF4820")]
			[DebuggerHidden]
			public <HoveredMouseFollowingLoop>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x60018C5")]
			[Address(RVA = "0xFF4910", Offset = "0xFF4910", VA = "0xFF4910", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60018C6")]
			[Address(RVA = "0xFF4914", Offset = "0xFF4914", VA = "0xFF4914", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60018C8")]
			[Address(RVA = "0xFF49A4", Offset = "0xFF49A4", VA = "0xFF49A4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[TextArea]
		public string text;

		[Token(Token = "0x4001B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Defines where the tooltip will be placed and how that placement will occur. Transform position will always be used if this element wasn't selected via mouse")]
		public TooltipPositioningType tooltipPositioningType;

		[Token(Token = "0x4001B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool isChildOfOverlayCanvas;

		[Token(Token = "0x4001B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		private bool hovered;

		[Token(Token = "0x4001B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 offset;

		[Token(Token = "0x170002DA")]
		public bool WorldToScreenIsRequired
		{
			[Token(Token = "0x60018BB")]
			[Address(RVA = "0xFF45E0", Offset = "0xFF45E0", VA = "0xFF45E0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60018BA")]
		[Address(RVA = "0xFF4530", Offset = "0xFF4530", VA = "0xFF4530")]
		private void Start()
		{
		}

		[Token(Token = "0x60018BC")]
		[Address(RVA = "0xFF463C", Offset = "0xFF463C", VA = "0xFF463C", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60018BD")]
		[Address(RVA = "0xFF47AC", Offset = "0xFF47AC", VA = "0xFF47AC")]
		[IteratorStateMachine(typeof(<HoveredMouseFollowingLoop>d__10))]
		private IEnumerator HoveredMouseFollowingLoop()
		{
			return null;
		}

		[Token(Token = "0x60018BE")]
		[Address(RVA = "0xFF4848", Offset = "0xFF4848", VA = "0xFF4848", Slot = "6")]
		public void OnSelect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x60018BF")]
		[Address(RVA = "0xFF48E4", Offset = "0xFF48E4", VA = "0xFF48E4", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60018C0")]
		[Address(RVA = "0xFF4904", Offset = "0xFF4904", VA = "0xFF4904", Slot = "7")]
		public void OnDeselect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x60018C1")]
		[Address(RVA = "0xFF4754", Offset = "0xFF4754", VA = "0xFF4754")]
		private void StartHover(Vector3 position, bool shouldCanvasUpdate = false)
		{
		}

		[Token(Token = "0x60018C2")]
		[Address(RVA = "0xFF48E8", Offset = "0xFF48E8", VA = "0xFF48E8")]
		private void StopHover()
		{
		}

		[Token(Token = "0x60018C3")]
		[Address(RVA = "0xFF4908", Offset = "0xFF4908", VA = "0xFF4908")]
		public TooltipTrigger()
		{
		}
	}
	[Token(Token = "0x2000469")]
	[AddComponentMenu("UI/Extensions/UI Window Base")]
	[RequireComponent(typeof(RectTransform))]
	public class UIWindowBase : MonoBehaviour, IBeginDragHandler, IEventSystemHandler, IDragHandler, IEndDragHandler
	{
		[Token(Token = "0x4001B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool _isDragging;

		[Token(Token = "0x4001B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool ResetCoords;

		[Token(Token = "0x4001B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Vector3 m_originalCoods;

		[Token(Token = "0x4001B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Canvas m_canvas;

		[Token(Token = "0x4001B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RectTransform m_canvasRectTransform;

		[Token(Token = "0x4001B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Number of pixels of the window that must stay inside the canvas view.")]
		public int KeepWindowInCanvas;

		[Token(Token = "0x4001B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The transform that is moved when dragging, can be left empty in which case its own transform is used.")]
		public RectTransform RootTransform;

		[Token(Token = "0x60018CA")]
		[Address(RVA = "0xFF49EC", Offset = "0xFF49EC", VA = "0xFF49EC")]
		private void Start()
		{
		}

		[Token(Token = "0x60018CB")]
		[Address(RVA = "0xFF4AFC", Offset = "0xFF4AFC", VA = "0xFF4AFC")]
		private void Update()
		{
		}

		[Token(Token = "0x60018CC")]
		[Address(RVA = "0xFF4BC4", Offset = "0xFF4BC4", VA = "0xFF4BC4", Slot = "5")]
		public void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60018CD")]
		[Address(RVA = "0xFF4FD8", Offset = "0xFF4FD8", VA = "0xFF4FD8", Slot = "4")]
		public void OnBeginDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60018CE")]
		[Address(RVA = "0xFF5088", Offset = "0xFF5088", VA = "0xFF5088", Slot = "6")]
		public void OnEndDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60018CF")]
		[Address(RVA = "0xFF4B5C", Offset = "0xFF4B5C", VA = "0xFF4B5C")]
		private void resetCoordinatePosition()
		{
		}

		[Token(Token = "0x60018D0")]
		[Address(RVA = "0xFF4C78", Offset = "0xFF4C78", VA = "0xFF4C78")]
		private Vector3 ScreenToCanvas(Vector3 screenPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60018D1")]
		[Address(RVA = "0xFF5090", Offset = "0xFF5090", VA = "0xFF5090")]
		public UIWindowBase()
		{
		}
	}
	[Token(Token = "0x200046A")]
	public class BezierPath
	{
		[Token(Token = "0x4001B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int SegmentsPerCurve;

		[Token(Token = "0x4001B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float MINIMUM_SQR_DISTANCE;

		[Token(Token = "0x4001B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float DIVISION_THRESHOLD;

		[Token(Token = "0x4001B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Vector2> controlPoints;

		[Token(Token = "0x4001B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int curveCount;

		[Token(Token = "0x60018D2")]
		[Address(RVA = "0xFEA650", Offset = "0xFEA650", VA = "0xFEA650")]
		public BezierPath()
		{
		}

		[Token(Token = "0x60018D3")]
		[Address(RVA = "0xFEDC50", Offset = "0xFEDC50", VA = "0xFEDC50")]
		public void SetControlPoints(List<Vector2> newControlPoints)
		{
		}

		[Token(Token = "0x60018D4")]
		[Address(RVA = "0xFEA6EC", Offset = "0xFEA6EC", VA = "0xFEA6EC")]
		public void SetControlPoints(Vector2[] newControlPoints)
		{
		}

		[Token(Token = "0x60018D5")]
		[Address(RVA = "0xFF50F8", Offset = "0xFF50F8", VA = "0xFF50F8")]
		public List<Vector2> GetControlPoints()
		{
			return null;
		}

		[Token(Token = "0x60018D6")]
		[Address(RVA = "0xFF5100", Offset = "0xFF5100", VA = "0xFF5100")]
		public void Interpolate(List<Vector2> segmentPoints, float scale)
		{
		}

		[Token(Token = "0x60018D7")]
		[Address(RVA = "0xFF5694", Offset = "0xFF5694", VA = "0xFF5694")]
		public void SamplePoints(List<Vector2> sourcePoints, float minSqrDistance, float maxSqrDistance, float scale)
		{
		}

		[Token(Token = "0x60018D8")]
		[Address(RVA = "0xFF5AE0", Offset = "0xFF5AE0", VA = "0xFF5AE0")]
		public Vector2 CalculateBezierPoint(int curveIndex, float t)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60018D9")]
		[Address(RVA = "0xFEA798", Offset = "0xFEA798", VA = "0xFEA798")]
		public List<Vector2> GetDrawingPoints0()
		{
			return null;
		}

		[Token(Token = "0x60018DA")]
		[Address(RVA = "0xFEA93C", Offset = "0xFEA93C", VA = "0xFEA93C")]
		public List<Vector2> GetDrawingPoints1()
		{
			return null;
		}

		[Token(Token = "0x60018DB")]
		[Address(RVA = "0xFEABDC", Offset = "0xFEABDC", VA = "0xFEABDC")]
		public List<Vector2> GetDrawingPoints2()
		{
			return null;
		}

		[Token(Token = "0x60018DC")]
		[Address(RVA = "0xFF5C50", Offset = "0xFF5C50", VA = "0xFF5C50")]
		private List<Vector2> FindDrawingPoints(int curveIndex)
		{
			return null;
		}

		[Token(Token = "0x60018DD")]
		[Address(RVA = "0xFF5DF8", Offset = "0xFF5DF8", VA = "0xFF5DF8")]
		private int FindDrawingPoints(int curveIndex, float t0, float t1, List<Vector2> pointList, int insertionIndex)
		{
			return default(int);
		}

		[Token(Token = "0x60018DE")]
		[Address(RVA = "0xFF5BE4", Offset = "0xFF5BE4", VA = "0xFF5BE4")]
		private Vector2 CalculateBezierPoint(float t, Vector2 p0, Vector2 p1, Vector2 p2, Vector2 p3)
		{
			return default(Vector2);
		}
	}
	[Serializable]
	[Token(Token = "0x200046B")]
	public class CableCurve
	{
		[Token(Token = "0x4001B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private Vector2 m_start;

		[Token(Token = "0x4001B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Vector2 m_end;

		[Token(Token = "0x4001B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float m_slack;

		[Token(Token = "0x4001B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private int m_steps;

		[Token(Token = "0x4001B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private bool m_regen;

		[Token(Token = "0x4001B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector2[] emptyCurve;

		[Token(Token = "0x4001B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Vector2[] points;

		[Token(Token = "0x170002DD")]
		public bool regenPoints
		{
			[Token(Token = "0x60018DF")]
			[Address(RVA = "0xFF60D0", Offset = "0xFF60D0", VA = "0xFF60D0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60018E0")]
			[Address(RVA = "0xFF60D8", Offset = "0xFF60D8", VA = "0xFF60D8")]
			set
			{
			}
		}

		[Token(Token = "0x170002DE")]
		public Vector2 start
		{
			[Token(Token = "0x60018E1")]
			[Address(RVA = "0xFF60E4", Offset = "0xFF60E4", VA = "0xFF60E4")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x60018E2")]
			[Address(RVA = "0xFF60EC", Offset = "0xFF60EC", VA = "0xFF60EC")]
			set
			{
			}
		}

		[Token(Token = "0x170002DF")]
		public Vector2 end
		{
			[Token(Token = "0x60018E3")]
			[Address(RVA = "0xFF6124", Offset = "0xFF6124", VA = "0xFF6124")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x60018E4")]
			[Address(RVA = "0xFF612C", Offset = "0xFF612C", VA = "0xFF612C")]
			set
			{
			}
		}

		[Token(Token = "0x170002E0")]
		public float slack
		{
			[Token(Token = "0x60018E5")]
			[Address(RVA = "0xFF6164", Offset = "0xFF6164", VA = "0xFF6164")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018E6")]
			[Address(RVA = "0xFEAD54", Offset = "0xFEAD54", VA = "0xFEAD54")]
			set
			{
			}
		}

		[Token(Token = "0x170002E1")]
		public int steps
		{
			[Token(Token = "0x60018E7")]
			[Address(RVA = "0xFF616C", Offset = "0xFF616C", VA = "0xFF616C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60018E8")]
			[Address(RVA = "0xFEAD78", Offset = "0xFEAD78", VA = "0xFEAD78")]
			set
			{
			}
		}

		[Token(Token = "0x170002E2")]
		public Vector2 midPoint
		{
			[Token(Token = "0x60018E9")]
			[Address(RVA = "0xFF6174", Offset = "0xFF6174", VA = "0xFF6174")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x60018EA")]
		[Address(RVA = "0xFF624C", Offset = "0xFF624C", VA = "0xFF624C")]
		public CableCurve()
		{
		}

		[Token(Token = "0x60018EB")]
		[Address(RVA = "0xFEACE0", Offset = "0xFEACE0", VA = "0xFEACE0")]
		public CableCurve(Vector2[] inputPoints)
		{
		}

		[Token(Token = "0x60018EC")]
		[Address(RVA = "0xFEDCFC", Offset = "0xFEDCFC", VA = "0xFEDCFC")]
		public CableCurve(List<Vector2> inputPoints)
		{
		}

		[Token(Token = "0x60018ED")]
		[Address(RVA = "0xFF634C", Offset = "0xFF634C", VA = "0xFF634C")]
		public CableCurve(CableCurve v)
		{
		}

		[Token(Token = "0x60018EE")]
		[Address(RVA = "0xFEADA0", Offset = "0xFEADA0", VA = "0xFEADA0")]
		public Vector2[] Points()
		{
			return null;
		}
	}
	[Token(Token = "0x200046C")]
	public class Circle
	{
		[Token(Token = "0x4001B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private float xAxis;

		[Token(Token = "0x4001B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private float yAxis;

		[Token(Token = "0x4001B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private int steps;

		[Token(Token = "0x170002E3")]
		public float X
		{
			[Token(Token = "0x60018F0")]
			[Address(RVA = "0xFF6448", Offset = "0xFF6448", VA = "0xFF6448")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018F1")]
			[Address(RVA = "0xFF6450", Offset = "0xFF6450", VA = "0xFF6450")]
			set
			{
			}
		}

		[Token(Token = "0x170002E4")]
		public float Y
		{
			[Token(Token = "0x60018F2")]
			[Address(RVA = "0xFF6458", Offset = "0xFF6458", VA = "0xFF6458")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018F3")]
			[Address(RVA = "0xFF6460", Offset = "0xFF6460", VA = "0xFF6460")]
			set
			{
			}
		}

		[Token(Token = "0x170002E5")]
		public int Steps
		{
			[Token(Token = "0x60018F4")]
			[Address(RVA = "0xFF6468", Offset = "0xFF6468", VA = "0xFF6468")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60018F5")]
			[Address(RVA = "0xFF6470", Offset = "0xFF6470", VA = "0xFF6470")]
			set
			{
			}
		}

		[Token(Token = "0x60018F6")]
		[Address(RVA = "0xFF6478", Offset = "0xFF6478", VA = "0xFF6478")]
		public Circle(float radius)
		{
		}

		[Token(Token = "0x60018F7")]
		[Address(RVA = "0xFF64A8", Offset = "0xFF64A8", VA = "0xFF64A8")]
		public Circle(float radius, int steps)
		{
		}

		[Token(Token = "0x60018F8")]
		[Address(RVA = "0xFF64E0", Offset = "0xFF64E0", VA = "0xFF64E0")]
		public Circle(float xAxis, float yAxis)
		{
		}

		[Token(Token = "0x60018F9")]
		[Address(RVA = "0xFF6514", Offset = "0xFF6514", VA = "0xFF6514")]
		public Circle(float xAxis, float yAxis, int steps)
		{
		}

		[Token(Token = "0x60018FA")]
		[Address(RVA = "0xFF6550", Offset = "0xFF6550", VA = "0xFF6550")]
		public Vector2 Evaluate(float t)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60018FB")]
		[Address(RVA = "0xFF65A8", Offset = "0xFF65A8", VA = "0xFF65A8")]
		public void Evaluate(float t, out Vector2 eval)
		{
		}
	}
	[Token(Token = "0x200046D")]
	public static class CLZF2
	{
		[Token(Token = "0x4001B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly uint HLOG;

		[Token(Token = "0x4001B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly uint HSIZE;

		[Token(Token = "0x4001B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly uint MAX_LIT;

		[Token(Token = "0x4001B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static readonly uint MAX_OFF;

		[Token(Token = "0x4001B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly uint MAX_REF;

		[Token(Token = "0x4001B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly long[] HashTable;

		[Token(Token = "0x60018FC")]
		[Address(RVA = "0xFF6614", Offset = "0xFF6614", VA = "0xFF6614")]
		public static byte[] Compress(byte[] inputBytes)
		{
			return null;
		}

		[Token(Token = "0x60018FD")]
		[Address(RVA = "0xFF6E04", Offset = "0xFF6E04", VA = "0xFF6E04")]
		public static byte[] Decompress(byte[] inputBytes)
		{
			return null;
		}

		[Token(Token = "0x60018FE")]
		[Address(RVA = "0xFF6704", Offset = "0xFF6704", VA = "0xFF6704")]
		public static int lzf_compress(byte[] input, ref byte[] output)
		{
			return default(int);
		}

		[Token(Token = "0x60018FF")]
		[Address(RVA = "0xFF6EF4", Offset = "0xFF6EF4", VA = "0xFF6EF4")]
		public static int lzf_decompress(byte[] input, ref byte[] output)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200046E")]
	[AddComponentMenu("UI/Extensions/DragCorrector")]
	[RequireComponent(typeof(EventSystem))]
	public class DragCorrector : MonoBehaviour
	{
		[Token(Token = "0x4001B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int baseTH;

		[Token(Token = "0x4001B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int basePPI;

		[Token(Token = "0x4001B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int dragTH;

		[Token(Token = "0x6001901")]
		[Address(RVA = "0xFF716C", Offset = "0xFF716C", VA = "0xFF716C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001902")]
		[Address(RVA = "0xFF7240", Offset = "0xFF7240", VA = "0xFF7240")]
		public DragCorrector()
		{
		}
	}
	[Token(Token = "0x200046F")]
	public static class ExtentionMethods
	{
		[Token(Token = "0x6001903")]
		public static T GetOrAddComponent<T>(this GameObject child) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6001904")]
		[Address(RVA = "0xFF7254", Offset = "0xFF7254", VA = "0xFF7254")]
		public static bool IsPrefab(this GameObject gameObject)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000470")]
	[AddComponentMenu("UI/Extensions/Input Field Submit")]
	[RequireComponent(typeof(InputField))]
	public class InputFieldEnterSubmit : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000471")]
		public class EnterSubmitEvent : UnityEvent<string>
		{
			[Token(Token = "0x6001908")]
			[Address(RVA = "0xFF7538", Offset = "0xFF7538", VA = "0xFF7538")]
			public EnterSubmitEvent()
			{
			}
		}

		[Token(Token = "0x4001B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EnterSubmitEvent EnterSubmit;

		[Token(Token = "0x4001B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool defocusInput;

		[Token(Token = "0x4001B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private InputField _input;

		[Token(Token = "0x6001905")]
		[Address(RVA = "0xFF7384", Offset = "0xFF7384", VA = "0xFF7384")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001906")]
		[Address(RVA = "0xFF7460", Offset = "0xFF7460", VA = "0xFF7460")]
		public void OnEndEdit(string txt)
		{
		}

		[Token(Token = "0x6001907")]
		[Address(RVA = "0xFF7528", Offset = "0xFF7528", VA = "0xFF7528")]
		public InputFieldEnterSubmit()
		{
		}
	}
	[Token(Token = "0x2000472")]
	[AddComponentMenu("Layout/Extensions/NonDrawingGraphic")]
	public class NonDrawingGraphic : MaskableGraphic
	{
		[Token(Token = "0x6001909")]
		[Address(RVA = "0xFF7580", Offset = "0xFF7580", VA = "0xFF7580", Slot = "29")]
		public override void SetMaterialDirty()
		{
		}

		[Token(Token = "0x600190A")]
		[Address(RVA = "0xFF7584", Offset = "0xFF7584", VA = "0xFF7584", Slot = "28")]
		public override void SetVerticesDirty()
		{
		}

		[Token(Token = "0x600190B")]
		[Address(RVA = "0xFF7588", Offset = "0xFF7588", VA = "0xFF7588", Slot = "44")]
		protected override void OnPopulateMesh(VertexHelper vh)
		{
		}

		[Token(Token = "0x600190C")]
		[Address(RVA = "0xFF75A0", Offset = "0xFF75A0", VA = "0xFF75A0")]
		public NonDrawingGraphic()
		{
		}
	}
	[Token(Token = "0x2000473")]
	[AddComponentMenu("UI/Extensions/Pagination Manager")]
	public class PaginationManager : ToggleGroup
	{
		[Token(Token = "0x4001B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Toggle> m_PaginationChildren;

		[Token(Token = "0x4001B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private ScrollSnapBase scrollSnap;

		[Token(Token = "0x4001B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool isAClick;

		[Token(Token = "0x170002E6")]
		public int CurrentPage
		{
			[Token(Token = "0x600190D")]
			[Address(RVA = "0xFF75A8", Offset = "0xFF75A8", VA = "0xFF75A8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600190E")]
		[Address(RVA = "0xFF75C4", Offset = "0xFF75C4", VA = "0xFF75C4")]
		protected PaginationManager()
		{
		}

		[Token(Token = "0x600190F")]
		[Address(RVA = "0xFF75CC", Offset = "0xFF75CC", VA = "0xFF75CC", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001910")]
		[Address(RVA = "0xFF77B0", Offset = "0xFF77B0", VA = "0xFF77B0")]
		public void ResetPaginationChildren()
		{
		}

		[Token(Token = "0x6001911")]
		[Address(RVA = "0xFF7A84", Offset = "0xFF7A84", VA = "0xFF7A84")]
		public void GoToScreen(int pageNo)
		{
		}

		[Token(Token = "0x6001912")]
		[Address(RVA = "0xFF7AA0", Offset = "0xFF7AA0", VA = "0xFF7AA0")]
		private void ToggleClick(Toggle target)
		{
		}

		[Token(Token = "0x6001913")]
		[Address(RVA = "0xFF7B30", Offset = "0xFF7B30", VA = "0xFF7B30")]
		private void ToggleClick(bool toggle)
		{
		}

		[Token(Token = "0x6001914")]
		[Address(RVA = "0xFF7BE8", Offset = "0xFF7BE8", VA = "0xFF7BE8")]
		private void ToggleClick(int target)
		{
		}

		[Token(Token = "0x6001915")]
		[Address(RVA = "0xFF7A08", Offset = "0xFF7A08", VA = "0xFF7A08")]
		private void SetToggleGraphics(int pageNo)
		{
		}

		[Token(Token = "0x6001916")]
		[Address(RVA = "0xFF7C10", Offset = "0xFF7C10", VA = "0xFF7C10")]
		private void OnPageChangeEnd(int pageNo)
		{
		}
	}
	[Token(Token = "0x2000474")]
	[AddComponentMenu("UI/Extensions/PPIViewer")]
	[RequireComponent(typeof(Text))]
	public class PPIViewer : MonoBehaviour
	{
		[Token(Token = "0x4001B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Text label;

		[Token(Token = "0x6001917")]
		[Address(RVA = "0xFF7C18", Offset = "0xFF7C18", VA = "0xFF7C18")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001918")]
		[Address(RVA = "0xFF7C70", Offset = "0xFF7C70", VA = "0xFF7C70")]
		private void Start()
		{
		}

		[Token(Token = "0x6001919")]
		[Address(RVA = "0xFF7D48", Offset = "0xFF7D48", VA = "0xFF7D48")]
		public PPIViewer()
		{
		}
	}
	[Token(Token = "0x2000475")]
	public class ReadOnlyAttribute : PropertyAttribute
	{
		[Token(Token = "0x600191A")]
		[Address(RVA = "0xFF7D50", Offset = "0xFF7D50", VA = "0xFF7D50")]
		public ReadOnlyAttribute()
		{
		}
	}
	[Token(Token = "0x2000476")]
	[AddComponentMenu("UI/Extensions/Scrollrect Conflict Manager")]
	[RequireComponent(typeof(ScrollRect))]
	public class ScrollConflictManager : MonoBehaviour, IBeginDragHandler, IEventSystemHandler, IEndDragHandler, IDragHandler
	{
		[Token(Token = "0x4001B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The parent ScrollRect control hosting this ScrollSnap")]
		public ScrollRect ParentScrollRect;

		[Token(Token = "0x4001B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The parent ScrollSnap control hosting this Scroll Snap.\nIf left empty, it will use the ScrollSnap of the ParentScrollRect")]
		private ScrollSnapBase ParentScrollSnap;

		[Token(Token = "0x4001B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ScrollRect _myScrollRect;

		[Token(Token = "0x4001B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private IBeginDragHandler[] _beginDragHandlers;

		[Token(Token = "0x4001B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private IEndDragHandler[] _endDragHandlers;

		[Token(Token = "0x4001B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private IDragHandler[] _dragHandlers;

		[Token(Token = "0x4001B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool scrollOther;

		[Token(Token = "0x4001B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		private bool scrollOtherHorizontally;

		[Token(Token = "0x600191B")]
		[Address(RVA = "0xFF7D58", Offset = "0xFF7D58", VA = "0xFF7D58")]
		private void Awake()
		{
		}

		[Token(Token = "0x600191C")]
		[Address(RVA = "0xFF7DCC", Offset = "0xFF7DCC", VA = "0xFF7DCC")]
		private void InitialiseConflictManager()
		{
		}

		[Token(Token = "0x600191D")]
		[Address(RVA = "0xFF7FB0", Offset = "0xFF7FB0", VA = "0xFF7FB0")]
		private void Start()
		{
		}

		[Token(Token = "0x600191E")]
		[Address(RVA = "0xFF8024", Offset = "0xFF8024", VA = "0xFF8024")]
		private void AssignScrollRectHandlers()
		{
		}

		[Token(Token = "0x600191F")]
		[Address(RVA = "0xFF80F4", Offset = "0xFF80F4", VA = "0xFF80F4")]
		public void SetParentScrollRect(ScrollRect parentScrollRect)
		{
		}

		[Token(Token = "0x6001920")]
		[Address(RVA = "0xFF8118", Offset = "0xFF8118", VA = "0xFF8118", Slot = "4")]
		public void OnBeginDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001921")]
		[Address(RVA = "0xFF83A0", Offset = "0xFF83A0", VA = "0xFF83A0", Slot = "5")]
		public void OnEndDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001922")]
		[Address(RVA = "0xFF850C", Offset = "0xFF850C", VA = "0xFF850C", Slot = "6")]
		public void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001923")]
		[Address(RVA = "0xFF865C", Offset = "0xFF865C", VA = "0xFF865C")]
		public ScrollConflictManager()
		{
		}
	}
	[Token(Token = "0x2000477")]
	[AddComponentMenu("UI/Extensions/ScrollRectEx")]
	public class ScrollRectEx : ScrollRect
	{
		[Token(Token = "0x4001B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private bool routeToParent;

		[Token(Token = "0x6001924")]
		private void DoForParents<T>(Action<T> action) where T : IEventSystemHandler
		{
		}

		[Token(Token = "0x6001925")]
		[Address(RVA = "0xFF8664", Offset = "0xFF8664", VA = "0xFF8664", Slot = "43")]
		public override void OnInitializePotentialDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001926")]
		[Address(RVA = "0xFF875C", Offset = "0xFF875C", VA = "0xFF875C", Slot = "46")]
		public override void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001927")]
		[Address(RVA = "0xFF886C", Offset = "0xFF886C", VA = "0xFF886C", Slot = "44")]
		public override void OnBeginDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001928")]
		[Address(RVA = "0xFF8A20", Offset = "0xFF8A20", VA = "0xFF8A20", Slot = "45")]
		public override void OnEndDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001929")]
		[Address(RVA = "0xFF8B30", Offset = "0xFF8B30", VA = "0xFF8B30", Slot = "42")]
		public override void OnScroll(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600192A")]
		[Address(RVA = "0xFF8CE4", Offset = "0xFF8CE4", VA = "0xFF8CE4")]
		public ScrollRectEx()
		{
		}
	}
	[Token(Token = "0x200047D")]
	public static class ScrollRectExtensions
	{
		[Token(Token = "0x6001935")]
		[Address(RVA = "0xFF9034", Offset = "0xFF9034", VA = "0xFF9034")]
		public static void ScrollToTop(this ScrollRect scrollRect)
		{
		}

		[Token(Token = "0x6001936")]
		[Address(RVA = "0xFF9050", Offset = "0xFF9050", VA = "0xFF9050")]
		public static void ScrollToBottom(this ScrollRect scrollRect)
		{
		}
	}
	[Token(Token = "0x200047E")]
	[AddComponentMenu("UI/Extensions/ScrollRectLinker")]
	[RequireComponent(typeof(ScrollRect))]
	public class ScrollRectLinker : MonoBehaviour
	{
		[Token(Token = "0x4001B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool clamp;

		[Token(Token = "0x4001B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private ScrollRect controllingScrollRect;

		[Token(Token = "0x4001B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ScrollRect scrollRect;

		[Token(Token = "0x6001937")]
		[Address(RVA = "0xFF906C", Offset = "0xFF906C", VA = "0xFF906C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001938")]
		[Address(RVA = "0xFF919C", Offset = "0xFF919C", VA = "0xFF919C")]
		private void MirrorPos(Vector2 scrollPos)
		{
		}

		[Token(Token = "0x6001939")]
		[Address(RVA = "0xFF91E8", Offset = "0xFF91E8", VA = "0xFF91E8")]
		public ScrollRectLinker()
		{
		}
	}
	[Token(Token = "0x200047F")]
	[AddComponentMenu("UI/Extensions/ScrollRectTweener")]
	[RequireComponent(typeof(ScrollRect))]
	public class ScrollRectTweener : MonoBehaviour, IDragHandler, IEventSystemHandler
	{
		[Token(Token = "0x2000480")]
		[CompilerGenerated]
		private sealed class <DoMove>d__17 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001B62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001B63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001B64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float duration;

			[Token(Token = "0x4001B65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ScrollRectTweener <>4__this;

			[Token(Token = "0x4001B66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector2 <posOffset>5__2;

			[Token(Token = "0x4001B67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <currentTime>5__3;

			[Token(Token = "0x170002E7")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600194E")]
				[Address(RVA = "0xFF98C0", Offset = "0xFF98C0", VA = "0xFF98C0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002E8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001950")]
				[Address(RVA = "0xFF9908", Offset = "0xFF9908", VA = "0xFF9908", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600194B")]
			[Address(RVA = "0xFF9680", Offset = "0xFF9680", VA = "0xFF9680")]
			[DebuggerHidden]
			public <DoMove>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x600194C")]
			[Address(RVA = "0xFF9780", Offset = "0xFF9780", VA = "0xFF9780", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600194D")]
			[Address(RVA = "0xFF9784", Offset = "0xFF9784", VA = "0xFF9784", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600194F")]
			[Address(RVA = "0xFF98C8", Offset = "0xFF98C8", VA = "0xFF98C8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ScrollRect scrollRect;

		[Token(Token = "0x4001B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector2 startPos;

		[Token(Token = "0x4001B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector2 targetPos;

		[Token(Token = "0x4001B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool wasHorizontal;

		[Token(Token = "0x4001B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool wasVertical;

		[Token(Token = "0x4001B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float moveSpeed;

		[Token(Token = "0x4001B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool disableDragWhileTweening;

		[Token(Token = "0x600193A")]
		[Address(RVA = "0xFF91F8", Offset = "0xFF91F8", VA = "0xFF91F8")]
		private void Awake()
		{
		}

		[Token(Token = "0x600193B")]
		[Address(RVA = "0xFF9274", Offset = "0xFF9274", VA = "0xFF9274")]
		public void ScrollHorizontal(float normalizedX)
		{
		}

		[Token(Token = "0x600193C")]
		[Address(RVA = "0xFF92FC", Offset = "0xFF92FC", VA = "0xFF92FC")]
		public void ScrollHorizontal(float normalizedX, float duration)
		{
		}

		[Token(Token = "0x600193D")]
		[Address(RVA = "0xFF93B4", Offset = "0xFF93B4", VA = "0xFF93B4")]
		public void ScrollVertical(float normalizedY)
		{
		}

		[Token(Token = "0x600193E")]
		[Address(RVA = "0xFF9404", Offset = "0xFF9404", VA = "0xFF9404")]
		public void ScrollVertical(float normalizedY, float duration)
		{
		}

		[Token(Token = "0x600193F")]
		[Address(RVA = "0xFF92C8", Offset = "0xFF92C8", VA = "0xFF92C8")]
		public void Scroll(Vector2 normalizedPos)
		{
		}

		[Token(Token = "0x6001940")]
		[Address(RVA = "0xFF9444", Offset = "0xFF9444", VA = "0xFF9444")]
		private float GetScrollDuration(Vector2 normalizedPos)
		{
			return default(float);
		}

		[Token(Token = "0x6001941")]
		[Address(RVA = "0xFF9540", Offset = "0xFF9540", VA = "0xFF9540")]
		private Vector2 DeNormalize(Vector2 normalizedPos)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001942")]
		[Address(RVA = "0xFF94F8", Offset = "0xFF94F8", VA = "0xFF94F8")]
		private Vector2 GetCurrentPos()
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001943")]
		[Address(RVA = "0xFF9340", Offset = "0xFF9340", VA = "0xFF9340")]
		public void Scroll(Vector2 normalizedPos, float duration)
		{
		}

		[Token(Token = "0x6001944")]
		[Address(RVA = "0xFF95FC", Offset = "0xFF95FC", VA = "0xFF95FC")]
		[IteratorStateMachine(typeof(<DoMove>d__17))]
		private IEnumerator DoMove(float duration)
		{
			return null;
		}

		[Token(Token = "0x6001945")]
		[Address(RVA = "0xFF96A8", Offset = "0xFF96A8", VA = "0xFF96A8")]
		public Vector2 EaseVector(float currentTime, Vector2 startValue, Vector2 changeInValue, float duration)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001946")]
		[Address(RVA = "0xFF96F8", Offset = "0xFF96F8", VA = "0xFF96F8", Slot = "4")]
		public void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001947")]
		[Address(RVA = "0xFF9708", Offset = "0xFF9708", VA = "0xFF9708")]
		private void StopScroll()
		{
		}

		[Token(Token = "0x6001948")]
		[Address(RVA = "0xFF95E0", Offset = "0xFF95E0", VA = "0xFF95E0")]
		private void LockScrollability()
		{
		}

		[Token(Token = "0x6001949")]
		[Address(RVA = "0xFF9744", Offset = "0xFF9744", VA = "0xFF9744")]
		private void RestoreScrollability()
		{
		}

		[Token(Token = "0x600194A")]
		[Address(RVA = "0xFF976C", Offset = "0xFF976C", VA = "0xFF976C")]
		public ScrollRectTweener()
		{
		}
	}
	[Token(Token = "0x2000481")]
	[RequireComponent(typeof(Button))]
	[AddComponentMenu("UI/Extensions/Selectable Scalar")]
	public class SelectableScaler : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler
	{
		[Token(Token = "0x2000482")]
		[CompilerGenerated]
		private sealed class <ScaleIN>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001B6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001B6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001B6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SelectableScaler <>4__this;

			[Token(Token = "0x4001B70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <t>5__2;

			[Token(Token = "0x4001B71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <maxT>5__3;

			[Token(Token = "0x170002EA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600195C")]
				[Address(RVA = "0x100A1B8", Offset = "0x100A1B8", VA = "0x100A1B8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002EB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600195E")]
				[Address(RVA = "0x100A200", Offset = "0x100A200", VA = "0x100A200", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001959")]
			[Address(RVA = "0x1009FE0", Offset = "0x1009FE0", VA = "0x1009FE0")]
			[DebuggerHidden]
			public <ScaleIN>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x600195A")]
			[Address(RVA = "0x100A008", Offset = "0x100A008", VA = "0x100A008", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600195B")]
			[Address(RVA = "0x100A00C", Offset = "0x100A00C", VA = "0x100A00C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600195D")]
			[Address(RVA = "0x100A1C0", Offset = "0x100A1C0", VA = "0x100A1C0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000483")]
		[CompilerGenerated]
		private sealed class <ScaleOUT>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001B72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001B73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001B74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SelectableScaler <>4__this;

			[Token(Token = "0x4001B75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <t>5__2;

			[Token(Token = "0x4001B76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <maxT>5__3;

			[Token(Token = "0x170002EC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001962")]
				[Address(RVA = "0x100A3F0", Offset = "0x100A3F0", VA = "0x100A3F0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002ED")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001964")]
				[Address(RVA = "0x100A438", Offset = "0x100A438", VA = "0x100A438", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600195F")]
			[Address(RVA = "0x100A208", Offset = "0x100A208", VA = "0x100A208")]
			[DebuggerHidden]
			public <ScaleOUT>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x6001960")]
			[Address(RVA = "0x100A230", Offset = "0x100A230", VA = "0x100A230", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001961")]
			[Address(RVA = "0x100A234", Offset = "0x100A234", VA = "0x100A234", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001963")]
			[Address(RVA = "0x100A3F8", Offset = "0x100A3F8", VA = "0x100A3F8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve animCurve;

		[Token(Token = "0x4001B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Animation speed multiplier")]
		public float speed;

		[Token(Token = "0x4001B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 initScale;

		[Token(Token = "0x4001B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform target;

		[Token(Token = "0x4001B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Selectable selectable;

		[Token(Token = "0x170002E9")]
		public Selectable Target
		{
			[Token(Token = "0x6001951")]
			[Address(RVA = "0xFF9910", Offset = "0xFF9910", VA = "0xFF9910")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001952")]
		[Address(RVA = "0xFF99B8", Offset = "0xFF99B8", VA = "0xFF99B8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001953")]
		[Address(RVA = "0xFF9A64", Offset = "0xFF9A64", VA = "0xFF9A64")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001954")]
		[Address(RVA = "0xFF9A8C", Offset = "0xFF9A8C", VA = "0xFF9A8C", Slot = "4")]
		public void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001955")]
		[Address(RVA = "0xFF9B68", Offset = "0xFF9B68", VA = "0xFF9B68", Slot = "5")]
		public void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001956")]
		[Address(RVA = "0xFF9C44", Offset = "0xFF9C44", VA = "0xFF9C44")]
		[IteratorStateMachine(typeof(<ScaleIN>d__11))]
		private IEnumerator ScaleIN()
		{
			return null;
		}

		[Token(Token = "0x6001957")]
		[Address(RVA = "0xFF9CB8", Offset = "0xFF9CB8", VA = "0xFF9CB8")]
		[IteratorStateMachine(typeof(<ScaleOUT>d__12))]
		private IEnumerator ScaleOUT()
		{
			return null;
		}

		[Token(Token = "0x6001958")]
		[Address(RVA = "0xFF9D2C", Offset = "0xFF9D2C", VA = "0xFF9D2C")]
		public SelectableScaler()
		{
		}
	}
	[Token(Token = "0x2000484")]
	internal static class SetPropertyUtility
	{
		[Token(Token = "0x6001965")]
		[Address(RVA = "0x100A440", Offset = "0x100A440", VA = "0x100A440")]
		public static bool SetColor(ref Color currentValue, Color newValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6001966")]
		public static bool SetStruct<T>(ref T currentValue, T newValue) where T : struct
		{
			return default(bool);
		}

		[Token(Token = "0x6001967")]
		public static bool SetClass<T>(ref T currentValue, T newValue) where T : class
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000485")]
	public static class ShaderLibrary
	{
		[Token(Token = "0x4001B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Dictionary<string, Shader> shaderInstances;

		[Token(Token = "0x4001B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Shader[] preLoadedShaders;

		[Token(Token = "0x6001968")]
		[Address(RVA = "0x100A488", Offset = "0x100A488", VA = "0x100A488")]
		public static Shader GetShaderInstance(string shaderName)
		{
			return null;
		}
	}
	[Token(Token = "0x2000486")]
	public static class RectTransformExtension
	{
		[Token(Token = "0x600196A")]
		[Address(RVA = "0x100A684", Offset = "0x100A684", VA = "0x100A684")]
		public static Vector2 switchToRectTransform(this RectTransform from, RectTransform to)
		{
			return default(Vector2);
		}
	}
	[Token(Token = "0x2000487")]
	public static class UIExtensionMethods
	{
		[Token(Token = "0x600196B")]
		[Address(RVA = "0x100A8F0", Offset = "0x100A8F0", VA = "0x100A8F0")]
		public static Canvas GetParentCanvas(this RectTransform rt)
		{
			return null;
		}

		[Token(Token = "0x600196C")]
		[Address(RVA = "0x100AA2C", Offset = "0x100AA2C", VA = "0x100AA2C")]
		public static Vector2 TransformInputBasedOnCanvasType(this Vector2 input, Canvas canvas)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600196D")]
		[Address(RVA = "0x100AB28", Offset = "0x100AB28", VA = "0x100AB28")]
		public static Vector3 TransformInputBasedOnCanvasType(this Vector2 input, RectTransform rt)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600196E")]
		[Address(RVA = "0x100AA90", Offset = "0x100AA90", VA = "0x100AA90")]
		public static Camera GetEventCamera(this Canvas input)
		{
			return null;
		}
	}
	[Token(Token = "0x2000488")]
	public static class UIExtensionsInputManager
	{
		[Token(Token = "0x170002EE")]
		public static Vector3 MousePosition
		{
			[Token(Token = "0x6001979")]
			[Address(RVA = "0x100ACC8", Offset = "0x100ACC8", VA = "0x100ACC8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170002EF")]
		public static Vector3 MouseScrollDelta
		{
			[Token(Token = "0x600197A")]
			[Address(RVA = "0x100ACD0", Offset = "0x100ACD0", VA = "0x100ACD0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x600196F")]
		[Address(RVA = "0x100AC78", Offset = "0x100AC78", VA = "0x100AC78")]
		public static bool GetMouseButton(int button)
		{
			return default(bool);
		}

		[Token(Token = "0x6001970")]
		[Address(RVA = "0x100AC80", Offset = "0x100AC80", VA = "0x100AC80")]
		public static bool GetMouseButtonDown(int button)
		{
			return default(bool);
		}

		[Token(Token = "0x6001971")]
		[Address(RVA = "0x100AC88", Offset = "0x100AC88", VA = "0x100AC88")]
		public static bool GetMouseButtonUp(int button)
		{
			return default(bool);
		}

		[Token(Token = "0x6001972")]
		[Address(RVA = "0x100AC90", Offset = "0x100AC90", VA = "0x100AC90")]
		public static bool GetButton(string input)
		{
			return default(bool);
		}

		[Token(Token = "0x6001973")]
		[Address(RVA = "0x100AC98", Offset = "0x100AC98", VA = "0x100AC98")]
		public static bool GetButtonDown(string input)
		{
			return default(bool);
		}

		[Token(Token = "0x6001974")]
		[Address(RVA = "0x100ACA0", Offset = "0x100ACA0", VA = "0x100ACA0")]
		public static bool GetButtonUp(string input)
		{
			return default(bool);
		}

		[Token(Token = "0x6001975")]
		[Address(RVA = "0x100ACA8", Offset = "0x100ACA8", VA = "0x100ACA8")]
		public static bool GetKey(KeyCode key)
		{
			return default(bool);
		}

		[Token(Token = "0x6001976")]
		[Address(RVA = "0x100ACB0", Offset = "0x100ACB0", VA = "0x100ACB0")]
		public static bool GetKeyDown(KeyCode key)
		{
			return default(bool);
		}

		[Token(Token = "0x6001977")]
		[Address(RVA = "0x100ACB8", Offset = "0x100ACB8", VA = "0x100ACB8")]
		public static bool GetKeyUp(KeyCode key)
		{
			return default(bool);
		}

		[Token(Token = "0x6001978")]
		[Address(RVA = "0x100ACC0", Offset = "0x100ACC0", VA = "0x100ACC0")]
		public static float GetAxisRaw(string axis)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000489")]
	[AddComponentMenu("UI/Extensions/UI Highlightable Extension")]
	[RequireComponent(typeof(RectTransform), typeof(Graphic))]
	public class UIHighlightable : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler, IPointerDownHandler, IPointerUpHandler
	{
		[Serializable]
		[Token(Token = "0x200048A")]
		public class InteractableChangedEvent : UnityEvent<bool>
		{
			[Token(Token = "0x6001986")]
			[Address(RVA = "0x100AF74", Offset = "0x100AF74", VA = "0x100AF74")]
			public InteractableChangedEvent()
			{
			}
		}

		[Token(Token = "0x4001B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Graphic m_Graphic;

		[Token(Token = "0x4001B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool m_Highlighted;

		[Token(Token = "0x4001B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private bool m_Pressed;

		[Token(Token = "0x4001B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		[SerializeField]
		[Tooltip("Can this panel be interacted with or is it disabled? (does not affect child components)")]
		private bool m_Interactable;

		[Token(Token = "0x4001B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		[Tooltip("Does the panel remain in the pressed state when clicked? (default false)")]
		[SerializeField]
		private bool m_ClickToHold;

		[Token(Token = "0x4001B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("The default color for the panel")]
		public Color NormalColor;

		[Token(Token = "0x4001B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("The color for the panel when a mouse is over it or it is in focus")]
		public Color HighlightedColor;

		[Token(Token = "0x4001B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("The color for the panel when it is clicked/held")]
		public Color PressedColor;

		[Token(Token = "0x4001B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("The color for the panel when it is not interactable (see Interactable)")]
		public Color DisabledColor;

		[Token(Token = "0x4001B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event for when the panel is enabled / disabled, to enable disabling / enabling of child or other gameobjects")]
		public InteractableChangedEvent OnInteractableChanged;

		[Token(Token = "0x170002F0")]
		public bool Interactable
		{
			[Token(Token = "0x600197B")]
			[Address(RVA = "0x100ACE8", Offset = "0x100ACE8", VA = "0x100ACE8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600197C")]
			[Address(RVA = "0x100ACF0", Offset = "0x100ACF0", VA = "0x100ACF0")]
			set
			{
			}
		}

		[Token(Token = "0x170002F1")]
		public bool ClickToHold
		{
			[Token(Token = "0x600197D")]
			[Address(RVA = "0x100ADC0", Offset = "0x100ADC0", VA = "0x100ADC0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600197E")]
			[Address(RVA = "0x100ADC8", Offset = "0x100ADC8", VA = "0x100ADC8")]
			set
			{
			}
		}

		[Token(Token = "0x600197F")]
		[Address(RVA = "0x100ADD4", Offset = "0x100ADD4", VA = "0x100ADD4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001980")]
		[Address(RVA = "0x100AE2C", Offset = "0x100AE2C", VA = "0x100AE2C", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001981")]
		[Address(RVA = "0x100AE7C", Offset = "0x100AE7C", VA = "0x100AE7C", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001982")]
		[Address(RVA = "0x100AEC8", Offset = "0x100AEC8", VA = "0x100AEC8", Slot = "6")]
		public void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001983")]
		[Address(RVA = "0x100AF18", Offset = "0x100AF18", VA = "0x100AF18", Slot = "7")]
		public void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001984")]
		[Address(RVA = "0x100AD58", Offset = "0x100AD58", VA = "0x100AD58")]
		private void HighlightInteractable(Graphic graphic)
		{
		}

		[Token(Token = "0x6001985")]
		[Address(RVA = "0x100AF2C", Offset = "0x100AF2C", VA = "0x100AF2C")]
		public UIHighlightable()
		{
		}
	}
	[Token(Token = "0x200048B")]
	[AddComponentMenu("UI/Extensions/UI Line Connector")]
	[RequireComponent(typeof(UILineRenderer))]
	[ExecuteInEditMode]
	public class UILineConnector : MonoBehaviour
	{
		[Token(Token = "0x4001B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RectTransform[] transforms;

		[Token(Token = "0x4001B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector2[] previousPositions;

		[Token(Token = "0x4001B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RectTransform canvas;

		[Token(Token = "0x4001B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RectTransform rt;

		[Token(Token = "0x4001B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private UILineRenderer lr;

		[Token(Token = "0x6001987")]
		[Address(RVA = "0x100AFBC", Offset = "0x100AFBC", VA = "0x100AFBC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001988")]
		[Address(RVA = "0x100B088", Offset = "0x100B088", VA = "0x100B088")]
		private void Update()
		{
		}

		[Token(Token = "0x6001989")]
		[Address(RVA = "0x100B440", Offset = "0x100B440", VA = "0x100B440")]
		public UILineConnector()
		{
		}
	}
	[Token(Token = "0x200048C")]
	[RequireComponent(typeof(ScrollRect))]
	[AddComponentMenu("UI/Extensions/UIScrollToSelection")]
	public class UIScrollToSelection : MonoBehaviour
	{
		[Token(Token = "0x200048D")]
		public enum ScrollType
		{
			[Token(Token = "0x4001B92")]
			VERTICAL,
			[Token(Token = "0x4001B93")]
			HORIZONTAL,
			[Token(Token = "0x4001B94")]
			BOTH
		}

		[Token(Token = "0x4001B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Header("[ Settings ]")]
		private ScrollType scrollDirection;

		[Token(Token = "0x4001B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float scrollSpeed;

		[Token(Token = "0x4001B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Header("[ Input ]")]
		private bool cancelScrollOnInput;

		[Token(Token = "0x4001B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private List<KeyCode> cancelScrollKeycodes;

		[Token(Token = "0x170002F2")]
		protected RectTransform LayoutListGroup
		{
			[Token(Token = "0x600198A")]
			[Address(RVA = "0x100B448", Offset = "0x100B448", VA = "0x100B448")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F3")]
		protected ScrollType ScrollDirection
		{
			[Token(Token = "0x600198B")]
			[Address(RVA = "0x100B4C8", Offset = "0x100B4C8", VA = "0x100B4C8")]
			get
			{
				return default(ScrollType);
			}
		}

		[Token(Token = "0x170002F4")]
		protected float ScrollSpeed
		{
			[Token(Token = "0x600198C")]
			[Address(RVA = "0x100B4D0", Offset = "0x100B4D0", VA = "0x100B4D0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002F5")]
		protected bool CancelScrollOnInput
		{
			[Token(Token = "0x600198D")]
			[Address(RVA = "0x100B4D8", Offset = "0x100B4D8", VA = "0x100B4D8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002F6")]
		protected List<KeyCode> CancelScrollKeycodes
		{
			[Token(Token = "0x600198E")]
			[Address(RVA = "0x100B4E0", Offset = "0x100B4E0", VA = "0x100B4E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F7")]
		protected RectTransform ScrollWindow
		{
			[Token(Token = "0x600198F")]
			[Address(RVA = "0x100B4E8", Offset = "0x100B4E8", VA = "0x100B4E8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001990")]
			[Address(RVA = "0x100B4F0", Offset = "0x100B4F0", VA = "0x100B4F0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170002F8")]
		protected ScrollRect TargetScrollRect
		{
			[Token(Token = "0x6001991")]
			[Address(RVA = "0x100B4F8", Offset = "0x100B4F8", VA = "0x100B4F8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001992")]
			[Address(RVA = "0x100B500", Offset = "0x100B500", VA = "0x100B500")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170002F9")]
		protected EventSystem CurrentEventSystem
		{
			[Token(Token = "0x6001993")]
			[Address(RVA = "0x100B508", Offset = "0x100B508", VA = "0x100B508")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002FA")]
		protected GameObject LastCheckedGameObject
		{
			[Token(Token = "0x6001994")]
			[Address(RVA = "0x100B558", Offset = "0x100B558", VA = "0x100B558")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001995")]
			[Address(RVA = "0x100B560", Offset = "0x100B560", VA = "0x100B560")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170002FB")]
		protected GameObject CurrentSelectedGameObject
		{
			[Token(Token = "0x6001996")]
			[Address(RVA = "0x100B568", Offset = "0x100B568", VA = "0x100B568")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002FC")]
		protected RectTransform CurrentTargetRectTransform
		{
			[Token(Token = "0x6001997")]
			[Address(RVA = "0x100B5C8", Offset = "0x100B5C8", VA = "0x100B5C8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001998")]
			[Address(RVA = "0x100B5D0", Offset = "0x100B5D0", VA = "0x100B5D0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170002FD")]
		protected bool IsManualScrollingAvailable
		{
			[Token(Token = "0x6001999")]
			[Address(RVA = "0x100B5D8", Offset = "0x100B5D8", VA = "0x100B5D8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600199A")]
			[Address(RVA = "0x100B5E0", Offset = "0x100B5E0", VA = "0x100B5E0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x600199B")]
		[Address(RVA = "0x100B5EC", Offset = "0x100B5EC", VA = "0x100B5EC", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x600199C")]
		[Address(RVA = "0x100B680", Offset = "0x100B680", VA = "0x100B680", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x600199D")]
		[Address(RVA = "0x100B684", Offset = "0x100B684", VA = "0x100B684", Slot = "6")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x600199E")]
		[Address(RVA = "0x100B6A4", Offset = "0x100B6A4", VA = "0x100B6A4")]
		private void UpdateReferences()
		{
		}

		[Token(Token = "0x600199F")]
		[Address(RVA = "0x100B834", Offset = "0x100B834", VA = "0x100B834")]
		private void CheckIfScrollingShouldBeLocked()
		{
		}

		[Token(Token = "0x60019A0")]
		[Address(RVA = "0x100B8D8", Offset = "0x100B8D8", VA = "0x100B8D8")]
		private void ScrollRectToLevelSelection()
		{
		}

		[Token(Token = "0x60019A1")]
		[Address(RVA = "0x100BA8C", Offset = "0x100BA8C", VA = "0x100BA8C")]
		private void UpdateVerticalScrollPosition(RectTransform selection)
		{
		}

		[Token(Token = "0x60019A2")]
		[Address(RVA = "0x100BC34", Offset = "0x100BC34", VA = "0x100BC34")]
		private void UpdateHorizontalScrollPosition(RectTransform selection)
		{
		}

		[Token(Token = "0x60019A3")]
		[Address(RVA = "0x100BDE0", Offset = "0x100BDE0", VA = "0x100BDE0")]
		private float GetScrollOffset(float position, float listAnchorPosition, float targetLength, float maskLength)
		{
			return default(float);
		}

		[Token(Token = "0x60019A4")]
		[Address(RVA = "0x100BE20", Offset = "0x100BE20", VA = "0x100BE20")]
		public UIScrollToSelection()
		{
		}
	}
	[Token(Token = "0x200048E")]
	[AddComponentMenu("UI/Extensions/UI ScrollTo Selection XY")]
	[RequireComponent(typeof(ScrollRect))]
	public class UIScrollToSelectionXY : MonoBehaviour
	{
		[Token(Token = "0x4001B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float scrollSpeed;

		[Token(Token = "0x4001B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private RectTransform layoutListGroup;

		[Token(Token = "0x4001B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RectTransform targetScrollObject;

		[Token(Token = "0x4001B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool scrollToSelection;

		[Token(Token = "0x4001B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RectTransform scrollWindow;

		[Token(Token = "0x4001B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ScrollRect targetScrollRect;

		[Token(Token = "0x60019A5")]
		[Address(RVA = "0x100BEB4", Offset = "0x100BEB4", VA = "0x100BEB4")]
		private void Start()
		{
		}

		[Token(Token = "0x60019A6")]
		[Address(RVA = "0x100BF48", Offset = "0x100BF48", VA = "0x100BF48")]
		private void Update()
		{
		}

		[Token(Token = "0x60019A7")]
		[Address(RVA = "0x100BF4C", Offset = "0x100BF4C", VA = "0x100BF4C")]
		private void ScrollRectToLevelSelection()
		{
		}

		[Token(Token = "0x60019A8")]
		[Address(RVA = "0x100C2D8", Offset = "0x100C2D8", VA = "0x100C2D8")]
		public UIScrollToSelectionXY()
		{
		}
	}
	[Token(Token = "0x200048F")]
	[RequireComponent(typeof(Selectable))]
	[AddComponentMenu("UI/Extensions/UI Selectable Extension")]
	public class UISelectableExtension : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler
	{
		[Serializable]
		[Token(Token = "0x2000490")]
		public class UIButtonEvent : UnityEvent<PointerEventData.InputButton>
		{
			[Token(Token = "0x60019B2")]
			[Address(RVA = "0x100C464", Offset = "0x100C464", VA = "0x100C464")]
			public UIButtonEvent()
			{
			}
		}

		[Token(Token = "0x4001B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Event that fires when a button is initially pressed down")]
		public UIButtonEvent OnButtonPress;

		[Token(Token = "0x4001B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Event that fires when a button is released")]
		public UIButtonEvent OnButtonRelease;

		[Token(Token = "0x4001B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Event that continually fires while a button is held down")]
		public UIButtonEvent OnButtonHeld;

		[Token(Token = "0x4001B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool _pressed;

		[Token(Token = "0x4001B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PointerEventData _heldEventData;

		[Token(Token = "0x60019A9")]
		[Address(RVA = "0x100C2F0", Offset = "0x100C2F0", VA = "0x100C2F0", Slot = "4")]
		private void UnityEngine.EventSystems.IPointerDownHandler.OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60019AA")]
		[Address(RVA = "0x100C364", Offset = "0x100C364", VA = "0x100C364", Slot = "5")]
		private void UnityEngine.EventSystems.IPointerUpHandler.OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60019AB")]
		[Address(RVA = "0x100C3D4", Offset = "0x100C3D4", VA = "0x100C3D4")]
		private void Update()
		{
		}

		[Token(Token = "0x60019AC")]
		[Address(RVA = "0x100C444", Offset = "0x100C444", VA = "0x100C444")]
		public void TestClicked()
		{
		}

		[Token(Token = "0x60019AD")]
		[Address(RVA = "0x100C448", Offset = "0x100C448", VA = "0x100C448")]
		public void TestPressed()
		{
		}

		[Token(Token = "0x60019AE")]
		[Address(RVA = "0x100C44C", Offset = "0x100C44C", VA = "0x100C44C")]
		public void TestReleased()
		{
		}

		[Token(Token = "0x60019AF")]
		[Address(RVA = "0x100C450", Offset = "0x100C450", VA = "0x100C450")]
		public void TestHold()
		{
		}

		[Token(Token = "0x60019B0")]
		[Address(RVA = "0x100C454", Offset = "0x100C454", VA = "0x100C454")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60019B1")]
		[Address(RVA = "0x100C45C", Offset = "0x100C45C", VA = "0x100C45C")]
		public UISelectableExtension()
		{
		}
	}
	[Token(Token = "0x2000491")]
	[AddComponentMenu("UI/Extensions/UI Infinite Scroll")]
	public class UI_InfiniteScroll : MonoBehaviour
	{
		[Token(Token = "0x4001BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If false, will Init automatically, otherwise you need to call Init() method")]
		public bool InitByUser;

		[Token(Token = "0x4001BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected ScrollRect _scrollRect;

		[Token(Token = "0x4001BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ContentSizeFitter _contentSizeFitter;

		[Token(Token = "0x4001BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private VerticalLayoutGroup _verticalLayoutGroup;

		[Token(Token = "0x4001BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private HorizontalLayoutGroup _horizontalLayoutGroup;

		[Token(Token = "0x4001BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GridLayoutGroup _gridLayoutGroup;

		[Token(Token = "0x4001BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected bool _isVertical;

		[Token(Token = "0x4001BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		protected bool _isHorizontal;

		[Token(Token = "0x4001BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float _disableMarginX;

		[Token(Token = "0x4001BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float _disableMarginY;

		[Token(Token = "0x4001BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool _hasDisabledGridComponents;

		[Token(Token = "0x4001BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected List<RectTransform> items;

		[Token(Token = "0x4001BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector2 _newAnchoredPosition;

		[Token(Token = "0x4001BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float _threshold;

		[Token(Token = "0x4001BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int _itemCount;

		[Token(Token = "0x4001BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float _recordOffsetX;

		[Token(Token = "0x4001BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float _recordOffsetY;

		[Token(Token = "0x60019B3")]
		[Address(RVA = "0x100C4AC", Offset = "0x100C4AC", VA = "0x100C4AC", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60019B4")]
		[Address(RVA = "0x100C8A4", Offset = "0x100C8A4", VA = "0x100C8A4", Slot = "5")]
		public virtual void SetNewItems(ref List<Transform> newItems)
		{
		}

		[Token(Token = "0x60019B5")]
		[Address(RVA = "0x100CB3C", Offset = "0x100CB3C", VA = "0x100CB3C")]
		private void SetItems()
		{
		}

		[Token(Token = "0x60019B6")]
		[Address(RVA = "0x100C4BC", Offset = "0x100C4BC", VA = "0x100C4BC")]
		public void Init()
		{
		}

		[Token(Token = "0x60019B7")]
		[Address(RVA = "0x100CC78", Offset = "0x100CC78", VA = "0x100CC78")]
		private void DisableGridComponents()
		{
		}

		[Token(Token = "0x60019B8")]
		[Address(RVA = "0x100CEF0", Offset = "0x100CEF0", VA = "0x100CEF0")]
		public void OnScroll(Vector2 pos)
		{
		}

		[Token(Token = "0x60019B9")]
		[Address(RVA = "0x100D39C", Offset = "0x100D39C", VA = "0x100D39C")]
		public UI_InfiniteScroll()
		{
		}
	}
	[Token(Token = "0x2000492")]
	[RequireComponent(typeof(ScrollRect))]
	[AddComponentMenu("UI/Extensions/UI Magnetic Infinite Scroll")]
	public class UI_MagneticInfiniteScroll : UI_InfiniteScroll, IDragHandler, IEventSystemHandler, IEndDragHandler, IScrollHandler
	{
		[Token(Token = "0x2000493")]
		[CompilerGenerated]
		private sealed class <SetInitContent>d__25 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001BC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001BC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001BC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UI_MagneticInfiniteScroll <>4__this;

			[Token(Token = "0x170002FF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60019CC")]
				[Address(RVA = "0x100E028", Offset = "0x100E028", VA = "0x100E028", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000300")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60019CE")]
				[Address(RVA = "0x100E070", Offset = "0x100E070", VA = "0x100E070", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60019C9")]
			[Address(RVA = "0x100DE70", Offset = "0x100DE70", VA = "0x100DE70")]
			[DebuggerHidden]
			public <SetInitContent>d__25(int <>1__state)
			{
			}

			[Token(Token = "0x60019CA")]
			[Address(RVA = "0x100DF64", Offset = "0x100DF64", VA = "0x100DF64", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60019CB")]
			[Address(RVA = "0x100DF68", Offset = "0x100DF68", VA = "0x100DF68", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60019CD")]
			[Address(RVA = "0x100E030", Offset = "0x100E030", VA = "0x100E030", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		[Tooltip("The pointer to the pivot, the visual element for centering objects.")]
		private RectTransform pivot;

		[Token(Token = "0x4001BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		[Tooltip("The maximum speed that allows you to activate the magnet to center on the pivot")]
		private float maxSpeedForMagnetic;

		[Token(Token = "0x4001BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[SerializeField]
		[Tooltip("The index of the object which must be initially centered")]
		private int indexStart;

		[Token(Token = "0x4001BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		[Tooltip("The time to decelerate and aim to the pivot")]
		private float timeForDeceleration;

		[Token(Token = "0x4001BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float _pastPositionMouseSpeed;

		[Token(Token = "0x4001BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float _initMovementDirection;

		[Token(Token = "0x4001BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float _pastPosition;

		[Token(Token = "0x4001BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float _currentSpeed;

		[Token(Token = "0x4001BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private float _stopValue;

		[Token(Token = "0x4001BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private readonly float _waitForContentSet;

		[Token(Token = "0x4001BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float _currentTime;

		[Token(Token = "0x4001BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private int _nearestIndex;

		[Token(Token = "0x4001BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private bool _useMagnetic;

		[Token(Token = "0x4001BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB5")]
		private bool _isStopping;

		[Token(Token = "0x4001BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB6")]
		private bool _isMovement;

		[Token(Token = "0x170002FE")]
		public List<RectTransform> Items
		{
			[Token(Token = "0x60019BC")]
			[Address(RVA = "0x100D5C4", Offset = "0x100D5C4", VA = "0x100D5C4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1400000B")]
		public event Action<GameObject> OnNewSelect
		{
			[Token(Token = "0x60019BA")]
			[Address(RVA = "0x100D464", Offset = "0x100D464", VA = "0x100D464")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60019BB")]
			[Address(RVA = "0x100D514", Offset = "0x100D514", VA = "0x100D514")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60019BD")]
		[Address(RVA = "0x100D5CC", Offset = "0x100D5CC", VA = "0x100D5CC", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60019BE")]
		[Address(RVA = "0x100D674", Offset = "0x100D674", VA = "0x100D674")]
		private void Update()
		{
		}

		[Token(Token = "0x60019BF")]
		[Address(RVA = "0x100DB44", Offset = "0x100DB44", VA = "0x100DB44", Slot = "5")]
		public override void SetNewItems(ref List<Transform> newItems)
		{
		}

		[Token(Token = "0x60019C0")]
		[Address(RVA = "0x100DD6C", Offset = "0x100DD6C", VA = "0x100DD6C")]
		public void SetContentInPivot(int index)
		{
		}

		[Token(Token = "0x60019C1")]
		[Address(RVA = "0x100D600", Offset = "0x100D600", VA = "0x100D600")]
		[IteratorStateMachine(typeof(<SetInitContent>d__25))]
		private IEnumerator SetInitContent()
		{
			return null;
		}

		[Token(Token = "0x60019C2")]
		[Address(RVA = "0x100DA40", Offset = "0x100DA40", VA = "0x100DA40")]
		private float GetAnchoredPositionForPivot(int index)
		{
			return default(float);
		}

		[Token(Token = "0x60019C3")]
		[Address(RVA = "0x100DE98", Offset = "0x100DE98", VA = "0x100DE98")]
		private void FinishPrepareMovement()
		{
		}

		[Token(Token = "0x60019C4")]
		[Address(RVA = "0x100DA30", Offset = "0x100DA30", VA = "0x100DA30")]
		private float GetRightAxis(Vector2 vector)
		{
			return default(float);
		}

		[Token(Token = "0x60019C5")]
		[Address(RVA = "0x100DEAC", Offset = "0x100DEAC", VA = "0x100DEAC", Slot = "6")]
		public void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60019C6")]
		[Address(RVA = "0x100DEF4", Offset = "0x100DEF4", VA = "0x100DEF4", Slot = "7")]
		public void OnEndDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60019C7")]
		[Address(RVA = "0x100DF08", Offset = "0x100DF08", VA = "0x100DF08", Slot = "8")]
		public void OnScroll(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60019C8")]
		[Address(RVA = "0x100DF38", Offset = "0x100DF38", VA = "0x100DF38")]
		public UI_MagneticInfiniteScroll()
		{
		}
	}
	[Token(Token = "0x2000494")]
	[AddComponentMenu("UI/Extensions/UI Scrollrect Occlusion")]
	public class UI_ScrollRectOcclusion : MonoBehaviour
	{
		[Token(Token = "0x4001BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool InitByUser;

		[Token(Token = "0x4001BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ScrollRect _scrollRect;

		[Token(Token = "0x4001BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ContentSizeFitter _contentSizeFitter;

		[Token(Token = "0x4001BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private VerticalLayoutGroup _verticalLayoutGroup;

		[Token(Token = "0x4001BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private HorizontalLayoutGroup _horizontalLayoutGroup;

		[Token(Token = "0x4001BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GridLayoutGroup _gridLayoutGroup;

		[Token(Token = "0x4001BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool _isVertical;

		[Token(Token = "0x4001BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		private bool _isHorizontal;

		[Token(Token = "0x4001BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float _disableMarginX;

		[Token(Token = "0x4001BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float _disableMarginY;

		[Token(Token = "0x4001BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool hasDisabledGridComponents;

		[Token(Token = "0x4001BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<RectTransform> items;

		[Token(Token = "0x60019CF")]
		[Address(RVA = "0x100E078", Offset = "0x100E078", VA = "0x100E078")]
		private void Awake()
		{
		}

		[Token(Token = "0x60019D0")]
		[Address(RVA = "0x100E088", Offset = "0x100E088", VA = "0x100E088")]
		public void Init()
		{
		}

		[Token(Token = "0x60019D1")]
		[Address(RVA = "0x100E540", Offset = "0x100E540", VA = "0x100E540")]
		private void DisableGridComponents()
		{
		}

		[Token(Token = "0x60019D2")]
		[Address(RVA = "0x100E77C", Offset = "0x100E77C", VA = "0x100E77C")]
		public void OnScroll(Vector2 pos)
		{
		}

		[Token(Token = "0x60019D3")]
		[Address(RVA = "0x100EAE0", Offset = "0x100EAE0", VA = "0x100EAE0")]
		public UI_ScrollRectOcclusion()
		{
		}
	}
	[Token(Token = "0x2000495")]
	[AddComponentMenu("UI/Extensions/UI Tween Scale")]
	public class UI_TweenScale : MonoBehaviour
	{
		[Token(Token = "0x2000496")]
		[CompilerGenerated]
		private sealed class <Tween>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001BDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001BDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001BDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UI_TweenScale <>4__this;

			[Token(Token = "0x4001BDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <t>5__2;

			[Token(Token = "0x4001BDE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <maxT>5__3;

			[Token(Token = "0x17000301")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60019DC")]
				[Address(RVA = "0x100EFA4", Offset = "0x100EFA4", VA = "0x100EFA4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000302")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60019DE")]
				[Address(RVA = "0x100EFEC", Offset = "0x100EFEC", VA = "0x100EFEC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60019D9")]
			[Address(RVA = "0x100ECBC", Offset = "0x100ECBC", VA = "0x100ECBC")]
			[DebuggerHidden]
			public <Tween>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x60019DA")]
			[Address(RVA = "0x100EDB8", Offset = "0x100EDB8", VA = "0x100EDB8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60019DB")]
			[Address(RVA = "0x100EDBC", Offset = "0x100EDBC", VA = "0x100EDBC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60019DD")]
			[Address(RVA = "0x100EFAC", Offset = "0x100EFAC", VA = "0x100EFAC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve animCurve;

		[Token(Token = "0x4001BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Animation speed multiplier")]
		public float speed;

		[Token(Token = "0x4001BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("If true animation will loop, for best effect set animation curve to loop on start and end point")]
		public bool isLoop;

		[Token(Token = "0x4001BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		[Tooltip("If true animation will start automatically, otherwise you need to call Play() method to start the animation")]
		public bool playAtAwake;

		[Token(Token = "0x4001BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		[Space(10f)]
		[Tooltip("If true component will scale by the same amount in X and Y axis, otherwise use animCurve for X scale and animCurveY for Y scale")]
		[Header("Non uniform scale")]
		public bool isUniform;

		[Token(Token = "0x4001BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve animCurveY;

		[Token(Token = "0x4001BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 initScale;

		[Token(Token = "0x4001BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform myTransform;

		[Token(Token = "0x4001BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 newScale;

		[Token(Token = "0x60019D4")]
		[Address(RVA = "0x100EB68", Offset = "0x100EB68", VA = "0x100EB68")]
		private void Awake()
		{
		}

		[Token(Token = "0x60019D5")]
		[Address(RVA = "0x100EBFC", Offset = "0x100EBFC", VA = "0x100EBFC")]
		public void Play()
		{
		}

		[Token(Token = "0x60019D6")]
		[Address(RVA = "0x100EC48", Offset = "0x100EC48", VA = "0x100EC48")]
		[IteratorStateMachine(typeof(<Tween>d__11))]
		private IEnumerator Tween()
		{
			return null;
		}

		[Token(Token = "0x60019D7")]
		[Address(RVA = "0x100ECE4", Offset = "0x100ECE4", VA = "0x100ECE4")]
		public void ResetTween()
		{
		}

		[Token(Token = "0x60019D8")]
		[Address(RVA = "0x100ED4C", Offset = "0x100ED4C", VA = "0x100ED4C")]
		public UI_TweenScale()
		{
		}
	}
}
namespace UnityEngine.UI.Extensions.EasingCore
{
	[Token(Token = "0x2000497")]
	public enum Ease
	{
		[Token(Token = "0x4001BE0")]
		Linear,
		[Token(Token = "0x4001BE1")]
		InBack,
		[Token(Token = "0x4001BE2")]
		InBounce,
		[Token(Token = "0x4001BE3")]
		InCirc,
		[Token(Token = "0x4001BE4")]
		InCubic,
		[Token(Token = "0x4001BE5")]
		InElastic,
		[Token(Token = "0x4001BE6")]
		InExpo,
		[Token(Token = "0x4001BE7")]
		InQuad,
		[Token(Token = "0x4001BE8")]
		InQuart,
		[Token(Token = "0x4001BE9")]
		InQuint,
		[Token(Token = "0x4001BEA")]
		InSine,
		[Token(Token = "0x4001BEB")]
		OutBack,
		[Token(Token = "0x4001BEC")]
		OutBounce,
		[Token(Token = "0x4001BED")]
		OutCirc,
		[Token(Token = "0x4001BEE")]
		OutCubic,
		[Token(Token = "0x4001BEF")]
		OutElastic,
		[Token(Token = "0x4001BF0")]
		OutExpo,
		[Token(Token = "0x4001BF1")]
		OutQuad,
		[Token(Token = "0x4001BF2")]
		OutQuart,
		[Token(Token = "0x4001BF3")]
		OutQuint,
		[Token(Token = "0x4001BF4")]
		OutSine,
		[Token(Token = "0x4001BF5")]
		InOutBack,
		[Token(Token = "0x4001BF6")]
		InOutBounce,
		[Token(Token = "0x4001BF7")]
		InOutCirc,
		[Token(Token = "0x4001BF8")]
		InOutCubic,
		[Token(Token = "0x4001BF9")]
		InOutElastic,
		[Token(Token = "0x4001BFA")]
		InOutExpo,
		[Token(Token = "0x4001BFB")]
		InOutQuad,
		[Token(Token = "0x4001BFC")]
		InOutQuart,
		[Token(Token = "0x4001BFD")]
		InOutQuint,
		[Token(Token = "0x4001BFE")]
		InOutSine
	}
	[Token(Token = "0x2000498")]
	public delegate float EasingFunction(float t);
	[Token(Token = "0x2000499")]
	public static class Easing
	{
		[Token(Token = "0x60019E3")]
		[Address(RVA = "0x100F188", Offset = "0x100F188", VA = "0x100F188")]
		public static EasingFunction Get(Ease type)
		{
			return null;
		}
	}
}
namespace UnityEngine.UI.Extensions.ColorPicker
{
	[Token(Token = "0x200049A")]
	[RequireComponent(typeof(Image))]
	public class ColorImage : MonoBehaviour
	{
		[Token(Token = "0x4001BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ColorPickerControl picker;

		[Token(Token = "0x4001C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Image image;

		[Token(Token = "0x6001A03")]
		[Address(RVA = "0x100FE9C", Offset = "0x100FE9C", VA = "0x100FE9C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001A04")]
		[Address(RVA = "0x100FF78", Offset = "0x100FF78", VA = "0x100FF78")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001A05")]
		[Address(RVA = "0x1010020", Offset = "0x1010020", VA = "0x1010020")]
		private void ColorChanged(Color newColor)
		{
		}

		[Token(Token = "0x6001A06")]
		[Address(RVA = "0x1010044", Offset = "0x1010044", VA = "0x1010044")]
		public ColorImage()
		{
		}
	}
	[Token(Token = "0x200049B")]
	[RequireComponent(typeof(Text))]
	public class ColorLabel : MonoBehaviour
	{
		[Token(Token = "0x4001C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ColorPickerControl picker;

		[Token(Token = "0x4001C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ColorValues type;

		[Token(Token = "0x4001C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string prefix;

		[Token(Token = "0x4001C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float minValue;

		[Token(Token = "0x4001C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float maxValue;

		[Token(Token = "0x4001C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int precision;

		[Token(Token = "0x4001C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Text label;

		[Token(Token = "0x6001A07")]
		[Address(RVA = "0x101004C", Offset = "0x101004C", VA = "0x101004C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001A08")]
		[Address(RVA = "0x10100A4", Offset = "0x10100A4", VA = "0x10100A4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001A09")]
		[Address(RVA = "0x101021C", Offset = "0x101021C", VA = "0x101021C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001A0A")]
		[Address(RVA = "0x1010388", Offset = "0x1010388", VA = "0x1010388")]
		private void ColorChanged(Color color)
		{
		}

		[Token(Token = "0x6001A0B")]
		[Address(RVA = "0x1010480", Offset = "0x1010480", VA = "0x1010480")]
		private void HSVChanged(float hue, float sateration, float value)
		{
		}

		[Token(Token = "0x6001A0C")]
		[Address(RVA = "0x101038C", Offset = "0x101038C", VA = "0x101038C")]
		private void UpdateValue()
		{
		}

		[Token(Token = "0x6001A0D")]
		[Address(RVA = "0x1010538", Offset = "0x1010538", VA = "0x1010538")]
		private string ConvertToDisplayString(float value)
		{
			return null;
		}

		[Token(Token = "0x6001A0E")]
		[Address(RVA = "0x1010638", Offset = "0x1010638", VA = "0x1010638")]
		public ColorLabel()
		{
		}
	}
	[Token(Token = "0x200049C")]
	[ExecuteInEditMode]
	public class ColorPickerControl : MonoBehaviour
	{
		[Token(Token = "0x4001C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float _hue;

		[Token(Token = "0x4001C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float _saturation;

		[Token(Token = "0x4001C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float _brightness;

		[Token(Token = "0x4001C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float _red;

		[Token(Token = "0x4001C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float _green;

		[Token(Token = "0x4001C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float _blue;

		[Token(Token = "0x4001C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float _alpha;

		[Token(Token = "0x4001C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ColorChangedEvent onValueChanged;

		[Token(Token = "0x4001C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public HSVChangedEvent onHSVChanged;

		[Token(Token = "0x4001C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private bool hsvSlidersOn;

		[Token(Token = "0x4001C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private List<GameObject> hsvSliders;

		[Token(Token = "0x4001C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private bool rgbSlidersOn;

		[Token(Token = "0x4001C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private List<GameObject> rgbSliders;

		[Token(Token = "0x4001C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private GameObject alphaSlider;

		[Token(Token = "0x17000303")]
		public Color CurrentColor
		{
			[Token(Token = "0x6001A12")]
			[Address(RVA = "0x1010A34", Offset = "0x1010A34", VA = "0x1010A34")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6001A13")]
			[Address(RVA = "0x1010A40", Offset = "0x1010A40", VA = "0x1010A40")]
			set
			{
			}
		}

		[Token(Token = "0x17000304")]
		public float H
		{
			[Token(Token = "0x6001A15")]
			[Address(RVA = "0x1010B70", Offset = "0x1010B70", VA = "0x1010B70")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001A16")]
			[Address(RVA = "0x1010B78", Offset = "0x1010B78", VA = "0x1010B78")]
			set
			{
			}
		}

		[Token(Token = "0x17000305")]
		public float S
		{
			[Token(Token = "0x6001A17")]
			[Address(RVA = "0x1010BE8", Offset = "0x1010BE8", VA = "0x1010BE8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001A18")]
			[Address(RVA = "0x1010BF0", Offset = "0x1010BF0", VA = "0x1010BF0")]
			set
			{
			}
		}

		[Token(Token = "0x17000306")]
		public float V
		{
			[Token(Token = "0x6001A19")]
			[Address(RVA = "0x1010C20", Offset = "0x1010C20", VA = "0x1010C20")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001A1A")]
			[Address(RVA = "0x1010C28", Offset = "0x1010C28", VA = "0x1010C28")]
			set
			{
			}
		}

		[Token(Token = "0x17000307")]
		public float R
		{
			[Token(Token = "0x6001A1B")]
			[Address(RVA = "0x1010C58", Offset = "0x1010C58", VA = "0x1010C58")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001A1C")]
			[Address(RVA = "0x1010C60", Offset = "0x1010C60", VA = "0x1010C60")]
			set
			{
			}
		}

		[Token(Token = "0x17000308")]
		public float G
		{
			[Token(Token = "0x6001A1D")]
			[Address(RVA = "0x1010C90", Offset = "0x1010C90", VA = "0x1010C90")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001A1E")]
			[Address(RVA = "0x1010C98", Offset = "0x1010C98", VA = "0x1010C98")]
			set
			{
			}
		}

		[Token(Token = "0x17000309")]
		public float B
		{
			[Token(Token = "0x6001A1F")]
			[Address(RVA = "0x1010CC8", Offset = "0x1010CC8", VA = "0x1010CC8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001A20")]
			[Address(RVA = "0x1010CD0", Offset = "0x1010CD0", VA = "0x1010CD0")]
			set
			{
			}
		}

		[Token(Token = "0x1700030A")]
		private float A
		{
			[Token(Token = "0x6001A21")]
			[Address(RVA = "0x1010D00", Offset = "0x1010D00", VA = "0x1010D00")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001A22")]
			[Address(RVA = "0x1010D08", Offset = "0x1010D08", VA = "0x1010D08")]
			set
			{
			}
		}

		[Token(Token = "0x6001A0F")]
		[Address(RVA = "0x1010698", Offset = "0x1010698", VA = "0x1010698")]
		public void SetHSVSlidersOn(bool value)
		{
		}

		[Token(Token = "0x6001A10")]
		[Address(RVA = "0x1010864", Offset = "0x1010864", VA = "0x1010864")]
		public void SetRGBSlidersOn(bool value)
		{
		}

		[Token(Token = "0x6001A11")]
		[Address(RVA = "0x1010A30", Offset = "0x1010A30", VA = "0x1010A30")]
		private void Update()
		{
		}

		[Token(Token = "0x6001A14")]
		[Address(RVA = "0x1010B6C", Offset = "0x1010B6C", VA = "0x1010B6C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001A23")]
		[Address(RVA = "0x1010AAC", Offset = "0x1010AAC", VA = "0x1010AAC")]
		private void RGBChanged()
		{
		}

		[Token(Token = "0x6001A24")]
		[Address(RVA = "0x1010BA8", Offset = "0x1010BA8", VA = "0x1010BA8")]
		private void HSVChanged()
		{
		}

		[Token(Token = "0x6001A25")]
		[Address(RVA = "0x1010AE8", Offset = "0x1010AE8", VA = "0x1010AE8")]
		private void SendChangedEvent()
		{
		}

		[Token(Token = "0x6001A26")]
		[Address(RVA = "0x1010EA0", Offset = "0x1010EA0", VA = "0x1010EA0")]
		public void AssignColor(ColorValues type, float value)
		{
		}

		[Token(Token = "0x6001A27")]
		[Address(RVA = "0x1010484", Offset = "0x1010484", VA = "0x1010484")]
		public float GetValue(ColorValues type)
		{
			return default(float);
		}

		[Token(Token = "0x6001A28")]
		[Address(RVA = "0x1010EF4", Offset = "0x1010EF4", VA = "0x1010EF4")]
		public ColorPickerControl()
		{
		}
	}
	[Token(Token = "0x200049D")]
	public class ColorPickerPresets : MonoBehaviour
	{
		[Token(Token = "0x200049E")]
		public enum SaveType
		{
			[Token(Token = "0x4001C20")]
			None,
			[Token(Token = "0x4001C21")]
			PlayerPrefs,
			[Token(Token = "0x4001C22")]
			JsonFile
		}

		[Token(Token = "0x200049F")]
		protected class JsonColor
		{
			[Token(Token = "0x4001C23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Color32[] colors;

			[Token(Token = "0x6001A35")]
			[Address(RVA = "0x1011984", Offset = "0x1011984", VA = "0x1011984")]
			public void SetColors(Color[] colorsIn)
			{
			}

			[Token(Token = "0x6001A36")]
			[Address(RVA = "0x1011620", Offset = "0x1011620", VA = "0x1011620")]
			public Color[] GetColors()
			{
				return null;
			}

			[Token(Token = "0x6001A37")]
			[Address(RVA = "0x101197C", Offset = "0x101197C", VA = "0x101197C")]
			public JsonColor()
			{
			}
		}

		[Token(Token = "0x4001C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ColorPickerControl picker;

		[Token(Token = "0x4001C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected GameObject presetPrefab;

		[Token(Token = "0x4001C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		protected int maxPresets;

		[Token(Token = "0x4001C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected Color[] predefinedPresets;

		[Token(Token = "0x4001C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected List<Color> presets;

		[Token(Token = "0x4001C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Image createPresetImage;

		[Token(Token = "0x4001C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform createButton;

		[Token(Token = "0x4001C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		public SaveType saveMode;

		[Token(Token = "0x4001C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		protected string playerPrefsKey;

		[Token(Token = "0x1700030B")]
		public virtual string JsonFilePath
		{
			[Token(Token = "0x6001A29")]
			[Address(RVA = "0x1011048", Offset = "0x1011048", VA = "0x1011048", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A2A")]
		[Address(RVA = "0x10110BC", Offset = "0x10110BC", VA = "0x10110BC", Slot = "5")]
		protected virtual void Reset()
		{
		}

		[Token(Token = "0x6001A2B")]
		[Address(RVA = "0x1011144", Offset = "0x1011144", VA = "0x1011144", Slot = "6")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001A2C")]
		[Address(RVA = "0x10112B4", Offset = "0x10112B4", VA = "0x10112B4", Slot = "7")]
		public virtual void CreatePresetButton()
		{
		}

		[Token(Token = "0x6001A2D")]
		[Address(RVA = "0x10112DC", Offset = "0x10112DC", VA = "0x10112DC", Slot = "8")]
		public virtual void LoadPresets(SaveType saveType)
		{
		}

		[Token(Token = "0x6001A2E")]
		[Address(RVA = "0x101171C", Offset = "0x101171C", VA = "0x101171C", Slot = "9")]
		public virtual void SavePresets(SaveType saveType)
		{
		}

		[Token(Token = "0x6001A2F")]
		[Address(RVA = "0x1011D04", Offset = "0x1011D04", VA = "0x1011D04", Slot = "10")]
		public virtual void CreatePreset(Color color, bool loading)
		{
		}

		[Token(Token = "0x6001A30")]
		[Address(RVA = "0x1011F54", Offset = "0x1011F54", VA = "0x1011F54", Slot = "11")]
		public virtual void CreatePreset(Color color)
		{
		}

		[Token(Token = "0x6001A31")]
		[Address(RVA = "0x1011F64", Offset = "0x1011F64", VA = "0x1011F64", Slot = "12")]
		public virtual void PresetSelect(Image sender)
		{
		}

		[Token(Token = "0x6001A32")]
		[Address(RVA = "0x1011F9C", Offset = "0x1011F9C", VA = "0x1011F9C", Slot = "13")]
		protected virtual void HSVChanged(float h, float s, float v)
		{
		}

		[Token(Token = "0x6001A33")]
		[Address(RVA = "0x1011FE4", Offset = "0x1011FE4", VA = "0x1011FE4", Slot = "14")]
		protected virtual void ColorChanged(Color color)
		{
		}

		[Token(Token = "0x6001A34")]
		[Address(RVA = "0x1012008", Offset = "0x1012008", VA = "0x1012008")]
		public ColorPickerPresets()
		{
		}
	}
	[Token(Token = "0x20004A0")]
	public class ColorPickerTester : MonoBehaviour
	{
		[Token(Token = "0x4001C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Renderer pickerRenderer;

		[Token(Token = "0x4001C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ColorPickerControl picker;

		[Token(Token = "0x6001A38")]
		[Address(RVA = "0x1012098", Offset = "0x1012098", VA = "0x1012098")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001A39")]
		[Address(RVA = "0x10120F0", Offset = "0x10120F0", VA = "0x10120F0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001A3A")]
		[Address(RVA = "0x1012198", Offset = "0x1012198", VA = "0x1012198")]
		public ColorPickerTester()
		{
		}
	}
	[Token(Token = "0x20004A1")]
	public class ColorSampler : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler, IDragHandler
	{
		[Token(Token = "0x4001C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector2 m_screenPos;

		[Token(Token = "0x4001C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected Button sampler;

		[Token(Token = "0x4001C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RectTransform sampleRectTransform;

		[Token(Token = "0x4001C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected Outline samplerOutline;

		[Token(Token = "0x4001C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Texture2D screenCapture;

		[Token(Token = "0x4001C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ColorChangedEvent oncolorSelected;

		[Token(Token = "0x4001C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Color color;

		[Token(Token = "0x6001A3C")]
		[Address(RVA = "0x10121F8", Offset = "0x10121F8", VA = "0x10121F8", Slot = "7")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001A3D")]
		[Address(RVA = "0x10122F0", Offset = "0x10122F0", VA = "0x10122F0", Slot = "8")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001A3E")]
		[Address(RVA = "0x10123C8", Offset = "0x10123C8", VA = "0x10123C8", Slot = "9")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001A3F")]
		[Address(RVA = "0x10124A4", Offset = "0x10124A4", VA = "0x10124A4", Slot = "10")]
		protected virtual void HandleSamplerColoring()
		{
		}

		[Token(Token = "0x6001A40")]
		[Address(RVA = "0x10125A4", Offset = "0x10125A4", VA = "0x10125A4", Slot = "11")]
		protected virtual void SelectColor()
		{
		}

		[Token(Token = "0x6001A41")]
		[Address(RVA = "0x1012608", Offset = "0x1012608", VA = "0x1012608", Slot = "4")]
		public void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001A42")]
		[Address(RVA = "0x1012624", Offset = "0x1012624", VA = "0x1012624", Slot = "5")]
		public void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001A43")]
		[Address(RVA = "0x1012674", Offset = "0x1012674", VA = "0x1012674", Slot = "6")]
		public void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001A44")]
		[Address(RVA = "0x1012690", Offset = "0x1012690", VA = "0x1012690")]
		public ColorSampler()
		{
		}
	}
	[Token(Token = "0x20004A2")]
	[RequireComponent(typeof(Slider))]
	public class ColorSlider : MonoBehaviour
	{
		[Token(Token = "0x4001C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ColorPickerControl ColorPicker;

		[Token(Token = "0x4001C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ColorValues type;

		[Token(Token = "0x4001C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Slider slider;

		[Token(Token = "0x4001C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool listen;

		[Token(Token = "0x6001A45")]
		[Address(RVA = "0x1012704", Offset = "0x1012704", VA = "0x1012704")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001A46")]
		[Address(RVA = "0x10128E0", Offset = "0x10128E0", VA = "0x10128E0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001A47")]
		[Address(RVA = "0x1012A80", Offset = "0x1012A80", VA = "0x1012A80")]
		private void ColorChanged(Color newColor)
		{
		}

		[Token(Token = "0x6001A48")]
		[Address(RVA = "0x1012AFC", Offset = "0x1012AFC", VA = "0x1012AFC")]
		private void HSVChanged(float hue, float saturation, float value)
		{
		}

		[Token(Token = "0x6001A49")]
		[Address(RVA = "0x1012B60", Offset = "0x1012B60", VA = "0x1012B60")]
		private void SliderChanged(float newValue)
		{
		}

		[Token(Token = "0x6001A4A")]
		[Address(RVA = "0x1012BA4", Offset = "0x1012BA4", VA = "0x1012BA4")]
		public ColorSlider()
		{
		}
	}
	[Token(Token = "0x20004A3")]
	[RequireComponent(typeof(RawImage))]
	[ExecuteInEditMode]
	public class ColorSliderImage : MonoBehaviour
	{
		[Token(Token = "0x4001C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ColorPickerControl picker;

		[Token(Token = "0x4001C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ColorValues type;

		[Token(Token = "0x4001C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Slider.Direction direction;

		[Token(Token = "0x4001C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RawImage image;

		[Token(Token = "0x1700030C")]
		private RectTransform RectTransform
		{
			[Token(Token = "0x6001A4B")]
			[Address(RVA = "0x1012BB4", Offset = "0x1012BB4", VA = "0x1012BB4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A4C")]
		[Address(RVA = "0x1012C14", Offset = "0x1012C14", VA = "0x1012C14")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001A4D")]
		[Address(RVA = "0x1013DF0", Offset = "0x1013DF0", VA = "0x1013DF0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001A4E")]
		[Address(RVA = "0x1013F68", Offset = "0x1013F68", VA = "0x1013F68")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001A4F")]
		[Address(RVA = "0x10140D4", Offset = "0x10140D4", VA = "0x10140D4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001A50")]
		[Address(RVA = "0x1014178", Offset = "0x1014178", VA = "0x1014178")]
		private void ColorChanged(Color newColor)
		{
		}

		[Token(Token = "0x6001A51")]
		[Address(RVA = "0x10141A0", Offset = "0x10141A0", VA = "0x10141A0")]
		private void ColorChanged(float hue, float saturation, float value)
		{
		}

		[Token(Token = "0x6001A52")]
		[Address(RVA = "0x1012D48", Offset = "0x1012D48", VA = "0x1012D48")]
		private void RegenerateTexture()
		{
		}

		[Token(Token = "0x6001A53")]
		[Address(RVA = "0x10141C8", Offset = "0x10141C8", VA = "0x10141C8")]
		public ColorSliderImage()
		{
		}
	}
	[Token(Token = "0x20004A4")]
	public enum ColorValues
	{
		[Token(Token = "0x4001C36")]
		R,
		[Token(Token = "0x4001C37")]
		G,
		[Token(Token = "0x4001C38")]
		B,
		[Token(Token = "0x4001C39")]
		A,
		[Token(Token = "0x4001C3A")]
		Hue,
		[Token(Token = "0x4001C3B")]
		Saturation,
		[Token(Token = "0x4001C3C")]
		Value
	}
	[Token(Token = "0x20004A5")]
	[RequireComponent(typeof(InputField))]
	public class HexColorField : MonoBehaviour
	{
		[Token(Token = "0x4001C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ColorPickerControl ColorPicker;

		[Token(Token = "0x4001C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool displayAlpha;

		[Token(Token = "0x4001C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private InputField hexInputField;

		[Token(Token = "0x4001C40")]
		private const string hexRegex = "^#?(?:[0-9a-fA-F]{3,4}){1,2}$";

		[Token(Token = "0x6001A54")]
		[Address(RVA = "0x10141D0", Offset = "0x10141D0", VA = "0x10141D0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001A55")]
		[Address(RVA = "0x1014328", Offset = "0x1014328", VA = "0x1014328")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001A56")]
		[Address(RVA = "0x101444C", Offset = "0x101444C", VA = "0x101444C")]
		private void UpdateHex(Color newColor)
		{
		}

		[Token(Token = "0x6001A57")]
		[Address(RVA = "0x1014994", Offset = "0x1014994", VA = "0x1014994")]
		private void UpdateColor(string newHex)
		{
		}

		[Token(Token = "0x6001A58")]
		[Address(RVA = "0x101473C", Offset = "0x101473C", VA = "0x101473C")]
		private string ColorToHex(Color32 color)
		{
			return null;
		}

		[Token(Token = "0x6001A59")]
		[Address(RVA = "0x1014A74", Offset = "0x1014A74", VA = "0x1014A74")]
		public static bool HexToColor(string hex, out Color32 color)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A5A")]
		[Address(RVA = "0x1014EA4", Offset = "0x1014EA4", VA = "0x1014EA4")]
		public HexColorField()
		{
		}
	}
	[Token(Token = "0x20004A6")]
	public static class HSVUtil
	{
		[Token(Token = "0x6001A5B")]
		[Address(RVA = "0x1010D20", Offset = "0x1010D20", VA = "0x1010D20")]
		public static HsvColor ConvertRgbToHsv(Color color)
		{
			return default(HsvColor);
		}

		[Token(Token = "0x6001A5C")]
		[Address(RVA = "0x1014EAC", Offset = "0x1014EAC", VA = "0x1014EAC")]
		public static HsvColor ConvertRgbToHsv(double r, double b, double g)
		{
			return default(HsvColor);
		}

		[Token(Token = "0x6001A5D")]
		[Address(RVA = "0x1010DA8", Offset = "0x1010DA8", VA = "0x1010DA8")]
		public static Color ConvertHsvToRgb(double h, double s, double v, float alpha)
		{
			return default(Color);
		}
	}
	[Token(Token = "0x20004A7")]
	public struct HsvColor
	{
		[Token(Token = "0x4001C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double H;

		[Token(Token = "0x4001C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double S;

		[Token(Token = "0x4001C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double V;

		[Token(Token = "0x1700030D")]
		public float NormalizedH
		{
			[Token(Token = "0x6001A5E")]
			[Address(RVA = "0x1010D78", Offset = "0x1010D78", VA = "0x1010D78")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001A5F")]
			[Address(RVA = "0x1014FF4", Offset = "0x1014FF4", VA = "0x1014FF4")]
			set
			{
			}
		}

		[Token(Token = "0x1700030E")]
		public float NormalizedS
		{
			[Token(Token = "0x6001A60")]
			[Address(RVA = "0x1010D90", Offset = "0x1010D90", VA = "0x1010D90")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001A61")]
			[Address(RVA = "0x101500C", Offset = "0x101500C", VA = "0x101500C")]
			set
			{
			}
		}

		[Token(Token = "0x1700030F")]
		public float NormalizedV
		{
			[Token(Token = "0x6001A62")]
			[Address(RVA = "0x1010D9C", Offset = "0x1010D9C", VA = "0x1010D9C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001A63")]
			[Address(RVA = "0x1015018", Offset = "0x1015018", VA = "0x1015018")]
			set
			{
			}
		}

		[Token(Token = "0x6001A64")]
		[Address(RVA = "0x1015024", Offset = "0x1015024", VA = "0x1015024")]
		public HsvColor(double h, double s, double v)
		{
		}

		[Token(Token = "0x6001A65")]
		[Address(RVA = "0x1015030", Offset = "0x1015030", VA = "0x1015030", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20004A8")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(BoxSlider), typeof(RawImage))]
	public class SVBoxSlider : MonoBehaviour
	{
		[Token(Token = "0x4001C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ColorPickerControl picker;

		[Token(Token = "0x4001C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private BoxSlider slider;

		[Token(Token = "0x4001C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RawImage image;

		[Token(Token = "0x4001C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float lastH;

		[Token(Token = "0x4001C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool listen;

		[Token(Token = "0x17000310")]
		public RectTransform RectTransform
		{
			[Token(Token = "0x6001A66")]
			[Address(RVA = "0x10152EC", Offset = "0x10152EC", VA = "0x10152EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A67")]
		[Address(RVA = "0x101534C", Offset = "0x101534C", VA = "0x101534C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001A68")]
		[Address(RVA = "0x10158BC", Offset = "0x10158BC", VA = "0x10158BC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001A69")]
		[Address(RVA = "0x1015A34", Offset = "0x1015A34", VA = "0x1015A34")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001A6A")]
		[Address(RVA = "0x1015BA0", Offset = "0x1015BA0", VA = "0x1015BA0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001A6B")]
		[Address(RVA = "0x1015C44", Offset = "0x1015C44", VA = "0x1015C44")]
		private void SliderChanged(float saturation, float value)
		{
		}

		[Token(Token = "0x6001A6C")]
		[Address(RVA = "0x1015C90", Offset = "0x1015C90", VA = "0x1015C90")]
		private void HSVChanged(float h, float s, float v)
		{
		}

		[Token(Token = "0x6001A6D")]
		[Address(RVA = "0x10153E4", Offset = "0x10153E4", VA = "0x10153E4")]
		private void RegenerateSVTexture()
		{
		}

		[Token(Token = "0x6001A6E")]
		[Address(RVA = "0x1015D34", Offset = "0x1015D34", VA = "0x1015D34")]
		public SVBoxSlider()
		{
		}
	}
}
namespace UnityEngine.UI.Extensions.Tweens
{
	[Token(Token = "0x20004A9")]
	public struct FloatTween : ITweenValue
	{
		[Token(Token = "0x20004AA")]
		public class FloatTweenCallback : UnityEvent<float>
		{
			[Token(Token = "0x6001A7E")]
			[Address(RVA = "0x1015EC4", Offset = "0x1015EC4", VA = "0x1015EC4")]
			public FloatTweenCallback()
			{
			}
		}

		[Token(Token = "0x20004AB")]
		public class FloatFinishCallback : UnityEvent
		{
			[Token(Token = "0x6001A7F")]
			[Address(RVA = "0x1015F94", Offset = "0x1015F94", VA = "0x1015F94")]
			public FloatFinishCallback()
			{
			}
		}

		[Token(Token = "0x4001C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private float m_StartFloat;

		[Token(Token = "0x4001C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private float m_TargetFloat;

		[Token(Token = "0x4001C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private float m_Duration;

		[Token(Token = "0x4001C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private bool m_IgnoreTimeScale;

		[Token(Token = "0x4001C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private FloatTweenCallback m_Target;

		[Token(Token = "0x4001C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private FloatFinishCallback m_Finish;

		[Token(Token = "0x17000311")]
		public float startFloat
		{
			[Token(Token = "0x6001A6F")]
			[Address(RVA = "0x1015D4C", Offset = "0x1015D4C", VA = "0x1015D4C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001A70")]
			[Address(RVA = "0x1015D54", Offset = "0x1015D54", VA = "0x1015D54")]
			set
			{
			}
		}

		[Token(Token = "0x17000312")]
		public float targetFloat
		{
			[Token(Token = "0x6001A71")]
			[Address(RVA = "0x1015D5C", Offset = "0x1015D5C", VA = "0x1015D5C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001A72")]
			[Address(RVA = "0x1015D64", Offset = "0x1015D64", VA = "0x1015D64")]
			set
			{
			}
		}

		[Token(Token = "0x17000313")]
		public float duration
		{
			[Token(Token = "0x6001A73")]
			[Address(RVA = "0x1015D6C", Offset = "0x1015D6C", VA = "0x1015D6C", Slot = "6")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001A74")]
			[Address(RVA = "0x1015D74", Offset = "0x1015D74", VA = "0x1015D74")]
			set
			{
			}
		}

		[Token(Token = "0x17000314")]
		public bool ignoreTimeScale
		{
			[Token(Token = "0x6001A75")]
			[Address(RVA = "0x1015D7C", Offset = "0x1015D7C", VA = "0x1015D7C", Slot = "5")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A76")]
			[Address(RVA = "0x1015D84", Offset = "0x1015D84", VA = "0x1015D84")]
			set
			{
			}
		}

		[Token(Token = "0x6001A77")]
		[Address(RVA = "0x1015D90", Offset = "0x1015D90", VA = "0x1015D90", Slot = "4")]
		public void TweenValue(float floatPercentage)
		{
		}

		[Token(Token = "0x6001A78")]
		[Address(RVA = "0x1015E2C", Offset = "0x1015E2C", VA = "0x1015E2C")]
		public void AddOnChangedCallback(UnityAction<float> callback)
		{
		}

		[Token(Token = "0x6001A79")]
		[Address(RVA = "0x1015F0C", Offset = "0x1015F0C", VA = "0x1015F0C")]
		public void AddOnFinishCallback(UnityAction callback)
		{
		}

		[Token(Token = "0x6001A7A")]
		[Address(RVA = "0x1015F9C", Offset = "0x1015F9C", VA = "0x1015F9C")]
		public bool GetIgnoreTimescale()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A7B")]
		[Address(RVA = "0x1015FA4", Offset = "0x1015FA4", VA = "0x1015FA4")]
		public float GetDuration()
		{
			return default(float);
		}

		[Token(Token = "0x6001A7C")]
		[Address(RVA = "0x1015E1C", Offset = "0x1015E1C", VA = "0x1015E1C", Slot = "7")]
		public bool ValidTarget()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A7D")]
		[Address(RVA = "0x1015FAC", Offset = "0x1015FAC", VA = "0x1015FAC", Slot = "8")]
		public void Finished()
		{
		}
	}
	[Token(Token = "0x20004AC")]
	internal interface ITweenValue
	{
		[Token(Token = "0x17000315")]
		bool ignoreTimeScale
		{
			[Token(Token = "0x6001A81")]
			get;
		}

		[Token(Token = "0x17000316")]
		float duration
		{
			[Token(Token = "0x6001A82")]
			get;
		}

		[Token(Token = "0x6001A80")]
		void TweenValue(float floatPercentage);

		[Token(Token = "0x6001A83")]
		bool ValidTarget();

		[Token(Token = "0x6001A84")]
		void Finished();
	}
	[Token(Token = "0x20004AD")]
	internal class TweenRunner<T> where T : struct, ITweenValue
	{
		[Token(Token = "0x20004AE")]
		[CompilerGenerated]
		private sealed class <Start>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001C51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x4001C52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object <>2__current;

			[Token(Token = "0x4001C53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T tweenInfo;

			[Token(Token = "0x4001C54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private float <elapsedTime>5__2;

			[Token(Token = "0x17000317")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001A8C")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000318")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001A8E")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001A89")]
			[DebuggerHidden]
			public <Start>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x6001A8A")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001A8B")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001A8D")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected MonoBehaviour m_CoroutineContainer;

		[Token(Token = "0x4001C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected IEnumerator m_Tween;

		[Token(Token = "0x6001A85")]
		[IteratorStateMachine(typeof(TweenRunner<>.<Start>d__2))]
		private static IEnumerator Start(T tweenInfo)
		{
			return null;
		}

		[Token(Token = "0x6001A86")]
		public void Init(MonoBehaviour coroutineContainer)
		{
		}

		[Token(Token = "0x6001A87")]
		public void StartTween(T info)
		{
		}

		[Token(Token = "0x6001A88")]
		public TweenRunner()
		{
		}
	}
}
namespace EasyGameStudio.Aura
{
	[Token(Token = "0x20004AF")]
	public class Demo_control : MonoBehaviour
	{
		[Token(Token = "0x4001C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioSource audio_source;

		[Token(Token = "0x4001C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioClip ka;

		[Token(Token = "0x4001C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject[] game_objects;

		[Token(Token = "0x4001C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int index;

		[Token(Token = "0x4001C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Text text_title;

		[Token(Token = "0x4001C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string[] str_titles;

		[Token(Token = "0x6001A8F")]
		[Address(RVA = "0x1015FC0", Offset = "0x1015FC0", VA = "0x1015FC0")]
		public void on_previous_btn()
		{
		}

		[Token(Token = "0x6001A90")]
		[Address(RVA = "0x1016098", Offset = "0x1016098", VA = "0x1016098")]
		public void on_next_btn()
		{
		}

		[Token(Token = "0x6001A91")]
		[Address(RVA = "0x1016170", Offset = "0x1016170", VA = "0x1016170")]
		public Demo_control()
		{
		}
	}
}
