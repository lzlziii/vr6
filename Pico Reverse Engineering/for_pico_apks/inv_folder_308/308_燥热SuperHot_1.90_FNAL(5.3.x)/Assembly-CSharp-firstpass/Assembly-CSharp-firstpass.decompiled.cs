using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters;
using System.Security;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Xml;
using Edelweiss.DecalSystem;
using Il2CppDummyDll;
using MP;
using Microsoft.Win32.SafeHandles;
using Newtonsoft.Json;
using Newtonsoft.Json.Bson;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Schema;
using Newtonsoft.Json.Serialization;
using Newtonsoft.Json.Utilities;
using UnityEngine;
using UnityEngine.Audio;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A37AC", Offset = "0x9A37AC")]
internal sealed class <>f__AnonymousType0<<Count>j__TPar, <Members>j__TPar>
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x9A6A84", Offset = "0x9A6A84")]
	private readonly <Count>j__TPar <Count>i__Field;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x9A6A98", Offset = "0x9A6A98")]
	private readonly <Members>j__TPar <Members>i__Field;

	[Token(Token = "0x17000001")]
	public <Count>j__TPar Count
	{
		[Token(Token = "0x6000001")]
		get
		{
			return (<Count>j__TPar)null;
		}
	}

	[Token(Token = "0x17000002")]
	public <Members>j__TPar Members
	{
		[Token(Token = "0x6000002")]
		get
		{
			return (<Members>j__TPar)null;
		}
	}

	[Token(Token = "0x6000003")]
	[DebuggerHidden]
	public <>f__AnonymousType0(<Count>j__TPar Count, <Members>j__TPar Members)
	{
	}

	[Token(Token = "0x6000004")]
	[DebuggerHidden]
	public override bool Equals(object value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000005")]
	[DebuggerHidden]
	public override int GetHashCode()
	{
		return default(int);
	}

	[Token(Token = "0x6000006")]
	[DebuggerHidden]
	public override string ToString()
	{
		return null;
	}
}
[Token(Token = "0x2000003")]
public class DS_DecalProjector : DecalProjectorComponent
{
	[Token(Token = "0x6000007")]
	[Address(RVA = "0x19EA040", Offset = "0x19EA040", VA = "0x19EA040")]
	public DS_DecalProjector()
	{
	}
}
[Token(Token = "0x2000004")]
public class DS_DecalProjectorGroup : DecalProjectorGroup
{
	[Token(Token = "0x6000008")]
	[Address(RVA = "0x19EA048", Offset = "0x19EA048", VA = "0x19EA048")]
	public DS_DecalProjectorGroup()
	{
	}
}
[Token(Token = "0x2000005")]
public class DS_Decals : Decals
{
	[Token(Token = "0x6000009")]
	[Address(RVA = "0x19EA050", Offset = "0x19EA050", VA = "0x19EA050", Slot = "20")]
	protected override DecalsMeshRenderer AddDecalsMeshRendererComponentToGameObject(GameObject a_GameObject)
	{
		return null;
	}

	[Token(Token = "0x600000A")]
	[Address(RVA = "0x19EA0AC", Offset = "0x19EA0AC", VA = "0x19EA0AC")]
	public DS_Decals()
	{
	}
}
[Token(Token = "0x2000006")]
public class DS_DecalsMeshRenderer : DecalsMeshRenderer
{
	[Token(Token = "0x600000B")]
	[Address(RVA = "0x19EA0B4", Offset = "0x19EA0B4", VA = "0x19EA0B4")]
	public DS_DecalsMeshRenderer()
	{
	}
}
[Token(Token = "0x2000007")]
public class DS_SkinnedDecalProjector : SkinnedDecalProjectorComponent
{
	[Token(Token = "0x600000C")]
	[Address(RVA = "0x19EA0BC", Offset = "0x19EA0BC", VA = "0x19EA0BC")]
	public DS_SkinnedDecalProjector()
	{
	}
}
[Token(Token = "0x2000008")]
public class DS_SkinnedDecalProjectorGroup : SkinnedDecalProjectorGroup
{
	[Token(Token = "0x600000D")]
	[Address(RVA = "0x19EA0C4", Offset = "0x19EA0C4", VA = "0x19EA0C4")]
	public DS_SkinnedDecalProjectorGroup()
	{
	}
}
[Token(Token = "0x2000009")]
public class DS_SkinnedDecals : SkinnedDecals
{
	[Token(Token = "0x600000E")]
	[Address(RVA = "0x19EA0CC", Offset = "0x19EA0CC", VA = "0x19EA0CC", Slot = "20")]
	protected override SkinnedDecalsMeshRenderer AddSkinnedDecalsMeshRendererComponentToGameObject(GameObject a_GameObject)
	{
		return null;
	}

	[Token(Token = "0x600000F")]
	[Address(RVA = "0x19EA128", Offset = "0x19EA128", VA = "0x19EA128")]
	public DS_SkinnedDecals()
	{
	}
}
[Token(Token = "0x200000A")]
public class DS_SkinnedDecalsMeshRenderer : SkinnedDecalsMeshRenderer
{
	[Token(Token = "0x6000010")]
	[Address(RVA = "0x19EA130", Offset = "0x19EA130", VA = "0x19EA130")]
	public DS_SkinnedDecalsMeshRenderer()
	{
	}
}
[Token(Token = "0x200000B")]
public static class ExtensionMethods
{
	[Serializable]
	[Token(Token = "0x200029D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A64CC", Offset = "0x9A64CC")]
	private sealed class <>c__2<T> where T : ICloneable
	{
		[Token(Token = "0x4000D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c__2<T> <>9;

		[Token(Token = "0x4000D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Func<T, T> <>9__2_0;

		[Token(Token = "0x60014DE")]
		public <>c__2()
		{
		}

		[Token(Token = "0x60014DF")]
		internal T <Clone>b__2_0(T item)
		{
			return (T)null;
		}
	}

	[Token(Token = "0x6000011")]
	public static T GetCopyOf<T>(this UnityEngine.Component comp, T other) where T : UnityEngine.Component
	{
		return null;
	}

	[Token(Token = "0x6000012")]
	public static T AddComponent<T>(this GameObject go, T toAdd) where T : UnityEngine.Component
	{
		return null;
	}

	[Token(Token = "0x6000013")]
	public static IList<T> Clone<T>(this IList<T> listToClone) where T : ICloneable
	{
		return null;
	}

	[Token(Token = "0x6000014")]
	[Address(RVA = "0x19EA1B0", Offset = "0x19EA1B0", VA = "0x19EA1B0")]
	public static void SetLayerRecursively(this GameObject go, int layer)
	{
	}

	[Token(Token = "0x6000015")]
	[Address(RVA = "0x19EA288", Offset = "0x19EA288", VA = "0x19EA288")]
	public static Transform FindChildRecursive(this Transform t, string name, bool onlyActive = false)
	{
		return null;
	}

	[Token(Token = "0x6000016")]
	public static T FindComponent<T>(this GameObject gameObject)
	{
		return (T)null;
	}

	[Token(Token = "0x6000017")]
	[Address(RVA = "0x19EA3FC", Offset = "0x19EA3FC", VA = "0x19EA3FC")]
	public static object FindComponent(this GameObject gameObject, Type type)
	{
		return null;
	}

	[Token(Token = "0x6000018")]
	[Address(RVA = "0x19EA4CC", Offset = "0x19EA4CC", VA = "0x19EA4CC")]
	public static void ResetLocalTransform(this Transform transform)
	{
	}
}
[Token(Token = "0x200000C")]
public static class AnimationHelpers
{
	[Token(Token = "0x4000003")]
	public const float defaultSamplingFrequency = 1E-05f;

	[Token(Token = "0x6000019")]
	[Address(RVA = "0x19D1164", Offset = "0x19D1164", VA = "0x19D1164")]
	public static bool AreCurvesEqual(AnimationCurve c1, AnimationCurve c2)
	{
		return default(bool);
	}

	[Token(Token = "0x600001A")]
	[Address(RVA = "0x19D1214", Offset = "0x19D1214", VA = "0x19D1214")]
	public static bool AreKeyframesEqual(Keyframe[] k1, Keyframe[] k2)
	{
		return default(bool);
	}

	[Token(Token = "0x600001B")]
	[Address(RVA = "0x19D1424", Offset = "0x19D1424", VA = "0x19D1424")]
	public static void ReverseCurve(AnimationCurve curve)
	{
	}

	[Token(Token = "0x600001C")]
	[Address(RVA = "0x19D1A10", Offset = "0x19D1A10", VA = "0x19D1A10")]
	public static void NormalizeCurveDomain(AnimationCurve curve)
	{
	}

	[Token(Token = "0x600001D")]
	[Address(RVA = "0x19D15C4", Offset = "0x19D15C4", VA = "0x19D15C4")]
	public static void TransformCurveDomain(AnimationCurve curve, float min, float max)
	{
	}

	[Token(Token = "0x600001E")]
	[Address(RVA = "0x19D1A1C", Offset = "0x19D1A1C", VA = "0x19D1A1C")]
	public static void FlipCurve(AnimationCurve curve, float samplingFrequency)
	{
	}

	[Token(Token = "0x600001F")]
	[Address(RVA = "0x19D2008", Offset = "0x19D2008", VA = "0x19D2008")]
	public static void NormalizeCurveRange(AnimationCurve curve, float samplingFrequency)
	{
	}

	[Token(Token = "0x6000020")]
	[Address(RVA = "0x19D2018", Offset = "0x19D2018", VA = "0x19D2018")]
	public static void TransformCurveRange(AnimationCurve curve, float min, float max, float samplingFrequency)
	{
	}

	[Token(Token = "0x6000021")]
	[Address(RVA = "0x19D1DC4", Offset = "0x19D1DC4", VA = "0x19D1DC4")]
	private static void TransformCurveRange(AnimationCurve curve, float min, float max, float low, float high)
	{
	}

	[Token(Token = "0x6000022")]
	[Address(RVA = "0x19D1A64", Offset = "0x19D1A64", VA = "0x19D1A64")]
	public static void GetCurveRange(AnimationCurve curve, ref float high, ref float low, float samplingFrequency)
	{
	}

	[Token(Token = "0x6000023")]
	[Address(RVA = "0x19D206C", Offset = "0x19D206C", VA = "0x19D206C")]
	public static float GetTimeAtParameter(AnimationCurve curve, float t)
	{
		return default(float);
	}

	[Token(Token = "0x6000024")]
	[Address(RVA = "0x19D21D0", Offset = "0x19D21D0", VA = "0x19D21D0")]
	public static Keyframe[] ReorderKeyframes(Keyframe[] keys)
	{
		return null;
	}

	[Token(Token = "0x6000025")]
	[Address(RVA = "0x19D2244", Offset = "0x19D2244", VA = "0x19D2244")]
	public static void SmoothAnimationCurveTangents(AnimationCurve curve)
	{
	}

	[Token(Token = "0x6000026")]
	[Address(RVA = "0x19D26E4", Offset = "0x19D26E4", VA = "0x19D26E4")]
	public static AnimationClip CreatePoseSnapshot(Animation relativeTo)
	{
		return null;
	}

	[Token(Token = "0x6000027")]
	[Address(RVA = "0x19D2D38", Offset = "0x19D2D38", VA = "0x19D2D38")]
	private static void AddPoseKey(AnimationClip clip, string pathTo, string propertyName, float val)
	{
	}

	[Token(Token = "0x6000028")]
	[Address(RVA = "0x19D2F04", Offset = "0x19D2F04", VA = "0x19D2F04")]
	public static AnimationCurve GetTrimmedCurve(AnimationCurve curve, int startFrame, int endFrame, float frameRate, float tangentSamplingFrequency = 1E-05f)
	{
		return null;
	}

	[Token(Token = "0x6000029")]
	[Address(RVA = "0x19D2F20", Offset = "0x19D2F20", VA = "0x19D2F20")]
	public static AnimationCurve GetTrimmedCurve(AnimationCurve curve, float startTime, float endTime, float tangentSamplingFrequency = 1E-05f)
	{
		return null;
	}
}
[Token(Token = "0x200000D")]
public class CenterOfMassDistributionAttribute : Attribute
{
	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public readonly float parameter;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly string childPartName;

	[Token(Token = "0x600002A")]
	[Address(RVA = "0x19E848C", Offset = "0x19E848C", VA = "0x19E848C")]
	public CenterOfMassDistributionAttribute(float parameter, string childPartName)
	{
	}

	[Token(Token = "0x600002B")]
	[Address(RVA = "0x19DF3E4", Offset = "0x19DF3E4", VA = "0x19DF3E4")]
	public BodyPart GetChildPart(Biped instance)
	{
		return null;
	}

	[Token(Token = "0x600002C")]
	[Address(RVA = "0x19DF2F8", Offset = "0x19DF2F8", VA = "0x19DF2F8")]
	public static CenterOfMassDistributionAttribute ForField(FieldInfo field)
	{
		return null;
	}
}
[Token(Token = "0x200000E")]
public class DefaultJointLimitsAttribute : Attribute
{
	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public readonly float xMin;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public readonly float xMax;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public readonly float yMax;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public readonly float zMax;

	[Token(Token = "0x600002D")]
	[Address(RVA = "0x19EA138", Offset = "0x19EA138", VA = "0x19EA138")]
	public DefaultJointLimitsAttribute(float xMin, float xMax, float yMax, float zMax)
	{
	}

	[Token(Token = "0x600002E")]
	[Address(RVA = "0x19DE980", Offset = "0x19DE980", VA = "0x19DE980")]
	public static DefaultJointLimitsAttribute ForField(FieldInfo field)
	{
		return null;
	}
}
[Token(Token = "0x200000F")]
public enum ShapeType
{
	[Token(Token = "0x400000B")]
	None,
	[Token(Token = "0x400000C")]
	Box,
	[Token(Token = "0x400000D")]
	Capsule,
	[Token(Token = "0x400000E")]
	Sphere
}
[Token(Token = "0x2000010")]
public class DefaultShapeTypeAttribute : Attribute
{
	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public readonly ShapeType shapeType;

	[Token(Token = "0x600002F")]
	[Address(RVA = "0x19EA184", Offset = "0x19EA184", VA = "0x19EA184")]
	public DefaultShapeTypeAttribute(ShapeType shapeType)
	{
	}

	[Token(Token = "0x6000030")]
	[Address(RVA = "0x19DB0E8", Offset = "0x19DB0E8", VA = "0x19DB0E8")]
	public static DefaultShapeTypeAttribute ForField(FieldInfo field)
	{
		return null;
	}
}
[Token(Token = "0x2000011")]
public class MassPercentageAttribute : Attribute
{
	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public readonly float percentage;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly string redistributeTo;

	[Token(Token = "0x6000031")]
	[Address(RVA = "0x15D9830", Offset = "0x15D9830", VA = "0x15D9830")]
	public MassPercentageAttribute(float percentage)
	{
	}

	[Token(Token = "0x6000032")]
	[Address(RVA = "0x15D989C", Offset = "0x15D989C", VA = "0x15D989C")]
	public MassPercentageAttribute(float percentage, string redistributeTo)
	{
	}

	[Token(Token = "0x6000033")]
	[Address(RVA = "0x15D98D8", Offset = "0x15D98D8", VA = "0x15D98D8")]
	public BodyPart GetPartToRedistributeTo(Biped instance)
	{
		return null;
	}

	[Token(Token = "0x6000034")]
	[Address(RVA = "0x15D9A34", Offset = "0x15D9A34", VA = "0x15D9A34")]
	public static MassPercentageAttribute ForField(FieldInfo field)
	{
		return null;
	}
}
[Token(Token = "0x2000012")]
public class NonfunctionalPartAttribute : Attribute
{
	[Token(Token = "0x6000035")]
	[Address(RVA = "0x16C6210", Offset = "0x16C6210", VA = "0x16C6210")]
	public NonfunctionalPartAttribute()
	{
	}
}
[Token(Token = "0x2000013")]
public enum DefinitionRequirement
{
	[Token(Token = "0x4000013")]
	Mandatory,
	[Token(Token = "0x4000014")]
	Optional
}
[Token(Token = "0x2000014")]
public class RequirementAttribute : Attribute
{
	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public readonly DefinitionRequirement type;

	[Token(Token = "0x6000036")]
	[Address(RVA = "0x16C661C", Offset = "0x16C661C", VA = "0x16C661C")]
	public RequirementAttribute(DefinitionRequirement requirementType)
	{
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0x16C6648", Offset = "0x16C6648", VA = "0x16C6648")]
	public static RequirementAttribute ForField(FieldInfo field)
	{
		return null;
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0x16C6734", Offset = "0x16C6734", VA = "0x16C6734")]
	public static bool IsMandatory(FieldInfo field)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000015")]
public class RequireXLimitCalculationAttribute : Attribute
{
	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public readonly string childName;

	[Token(Token = "0x6000039")]
	[Address(RVA = "0x16C6504", Offset = "0x16C6504", VA = "0x16C6504")]
	public RequireXLimitCalculationAttribute(string childName)
	{
	}

	[Token(Token = "0x600003A")]
	[Address(RVA = "0x16C6530", Offset = "0x16C6530", VA = "0x16C6530")]
	public static RequireXLimitCalculationAttribute ForField(FieldInfo field)
	{
		return null;
	}
}
[Token(Token = "0x2000016")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A37CC", Offset = "0x9A37CC")]
public class Biped : MonoBehaviour
{
	[Token(Token = "0x200029E")]
	public class DefinitionException : Exception
	{
		[Token(Token = "0x60014E0")]
		[Address(RVA = "0x19D7768", Offset = "0x19D7768", VA = "0x19D7768")]
		public DefinitionException(Biped biped)
		{
		}
	}

	[Token(Token = "0x200029F")]
	public enum CharacterizationMode
	{
		[Token(Token = "0x4000D5C")]
		Simple,
		[Token(Token = "0x4000D5D")]
		Advanced
	}

	[Serializable]
	[Token(Token = "0x20002A0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A64DC", Offset = "0x9A64DC")]
	private sealed class <>c
	{
		[Token(Token = "0x4000D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4000D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Comparison<GameObject> <>9__70_0;

		[Token(Token = "0x60014E2")]
		[Address(RVA = "0x19E2BAC", Offset = "0x19E2BAC", VA = "0x19E2BAC")]
		public <>c()
		{
		}

		[Token(Token = "0x60014E3")]
		[Address(RVA = "0x19E2BB4", Offset = "0x19E2BB4", VA = "0x19E2BB4")]
		internal int <PopulateAxialChainBonesUsingNamingConvention>b__70_0(GameObject x, GameObject y)
		{
			return default(int);
		}
	}

	[Token(Token = "0x20002A1")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A64EC", Offset = "0x9A64EC")]
	private sealed class <>c__DisplayClass88_0
	{
		[Token(Token = "0x4000D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform rootBone;

		[Token(Token = "0x60014E4")]
		[Address(RVA = "0x19DE3B4", Offset = "0x19DE3B4", VA = "0x19DE3B4")]
		public <>c__DisplayClass88_0()
		{
		}

		[Token(Token = "0x60014E5")]
		[Address(RVA = "0x19E2C24", Offset = "0x19E2C24", VA = "0x19E2C24")]
		internal bool <GetHeightEstimate>b__0(Transform item)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x20002A2")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A64FC", Offset = "0x9A64FC")]
	private sealed class <GetUp>d__113 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Biped <>4__this;

		[Token(Token = "0x4000D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float crossFadeTime;

		[Token(Token = "0x4000D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float energyLevel;

		[Token(Token = "0x4000D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string nextAnimation;

		[Token(Token = "0x1700022E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60014E9")]
			[Address(RVA = "0x19E2DF8", Offset = "0x19E2DF8", VA = "0x19E2DF8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700022F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60014EB")]
			[Address(RVA = "0x19E2E68", Offset = "0x19E2E68", VA = "0x19E2E68", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014E6")]
		[Address(RVA = "0x19E1B0C", Offset = "0x19E1B0C", VA = "0x19E1B0C")]
		[DebuggerHidden]
		public <GetUp>d__113(int <>1__state)
		{
		}

		[Token(Token = "0x60014E7")]
		[Address(RVA = "0x19E2CA0", Offset = "0x19E2CA0", VA = "0x19E2CA0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60014E8")]
		[Address(RVA = "0x19E2CA4", Offset = "0x19E2CA4", VA = "0x19E2CA4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60014EA")]
		[Address(RVA = "0x19E2E00", Offset = "0x19E2E00", VA = "0x19E2E00", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002A3")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A650C", Offset = "0x9A650C")]
	private sealed class <GetUpWithAnimation>d__117 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Biped <>4__this;

		[Token(Token = "0x4000D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float energyLevel;

		[Token(Token = "0x4000D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float crossFadeTime;

		[Token(Token = "0x4000D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string nextAnimation;

		[Token(Token = "0x4000D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GetUpAnimation <getUp>5__2;

		[Token(Token = "0x4000D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <transitionTime>5__3;

		[Token(Token = "0x4000D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float <div>5__4;

		[Token(Token = "0x4000D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float <targetBlendWeight>5__5;

		[Token(Token = "0x17000230")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60014EF")]
			[Address(RVA = "0x19E356C", Offset = "0x19E356C", VA = "0x19E356C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000231")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60014F1")]
			[Address(RVA = "0x19E35DC", Offset = "0x19E35DC", VA = "0x19E35DC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014EC")]
		[Address(RVA = "0x19E22B0", Offset = "0x19E22B0", VA = "0x19E22B0")]
		[DebuggerHidden]
		public <GetUpWithAnimation>d__117(int <>1__state)
		{
		}

		[Token(Token = "0x60014ED")]
		[Address(RVA = "0x19E2E70", Offset = "0x19E2E70", VA = "0x19E2E70", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60014EE")]
		[Address(RVA = "0x19E2E74", Offset = "0x19E2E74", VA = "0x19E2E74", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60014F0")]
		[Address(RVA = "0x19E3574", Offset = "0x19E3574", VA = "0x19E3574", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002A4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A651C", Offset = "0x9A651C")]
	private sealed class <GetUpWithAnimator>d__121 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Biped <>4__this;

		[Token(Token = "0x4000D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float energyLevel;

		[Token(Token = "0x4000D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float crossFadeTime;

		[Token(Token = "0x4000D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 <newPosition>5__2;

		[Token(Token = "0x4000D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion <newOrientation>5__3;

		[Token(Token = "0x4000D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool <applyRootMotion>5__4;

		[Token(Token = "0x4000D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Biped <rd>5__5;

		[Token(Token = "0x4000D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float <transitionTime>5__6;

		[Token(Token = "0x4000D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float <div>5__7;

		[Token(Token = "0x17000232")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60014F5")]
			[Address(RVA = "0x19E3DBC", Offset = "0x19E3DBC", VA = "0x19E3DBC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000233")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60014F7")]
			[Address(RVA = "0x19E3E2C", Offset = "0x19E3E2C", VA = "0x19E3E2C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014F2")]
		[Address(RVA = "0x19E291C", Offset = "0x19E291C", VA = "0x19E291C")]
		[DebuggerHidden]
		public <GetUpWithAnimator>d__121(int <>1__state)
		{
		}

		[Token(Token = "0x60014F3")]
		[Address(RVA = "0x19E35E4", Offset = "0x19E35E4", VA = "0x19E35E4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60014F4")]
		[Address(RVA = "0x19E35E8", Offset = "0x19E35E8", VA = "0x19E35E8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60014F6")]
		[Address(RVA = "0x19E3DC4", Offset = "0x19E3DC4", VA = "0x19E3DC4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static FieldInfo[] m_bodyPartAndChainFields;

	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BipedNamingConvention namingConvention;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0x9A6AAC", Offset = "0x9A6AAC")]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0x9A6AAC", Offset = "0x9A6AAC")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0x9A6AAC", Offset = "0x9A6AAC")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0x9A6AAC", Offset = "0x9A6AAC")]
	public BodyPart pelvis;

	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0x9A6B24", Offset = "0x9A6B24")]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0x9A6B24", Offset = "0x9A6B24")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0x9A6B24", Offset = "0x9A6B24")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0x9A6B24", Offset = "0x9A6B24")]
	[AttributeAttribute(Name = "CenterOfMassDistributionAttribute", RVA = "0x9A6B24", Offset = "0x9A6B24")]
	public BodyPart leftHip;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0x9A6BD4", Offset = "0x9A6BD4")]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0x9A6BD4", Offset = "0x9A6BD4")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0x9A6BD4", Offset = "0x9A6BD4")]
	[AttributeAttribute(Name = "RequireXLimitCalculationAttribute", RVA = "0x9A6BD4", Offset = "0x9A6BD4")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0x9A6BD4", Offset = "0x9A6BD4")]
	[AttributeAttribute(Name = "CenterOfMassDistributionAttribute", RVA = "0x9A6BD4", Offset = "0x9A6BD4")]
	public BodyPart leftLowerLeg;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0x9A6CA8", Offset = "0x9A6CA8")]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0x9A6CA8", Offset = "0x9A6CA8")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0x9A6CA8", Offset = "0x9A6CA8")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0x9A6CA8", Offset = "0x9A6CA8")]
	public BodyPart leftFoot;

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0x9A6D24", Offset = "0x9A6D24")]
	[NonfunctionalPart]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0x9A6D24", Offset = "0x9A6D24")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0x9A6D24", Offset = "0x9A6D24")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0x9A6D24", Offset = "0x9A6D24")]
	public BodyPart leftToe;

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0x9A6DC0", Offset = "0x9A6DC0")]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0x9A6DC0", Offset = "0x9A6DC0")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0x9A6DC0", Offset = "0x9A6DC0")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0x9A6DC0", Offset = "0x9A6DC0")]
	[AttributeAttribute(Name = "CenterOfMassDistributionAttribute", RVA = "0x9A6DC0", Offset = "0x9A6DC0")]
	public BodyPart rightHip;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0x9A6E70", Offset = "0x9A6E70")]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0x9A6E70", Offset = "0x9A6E70")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0x9A6E70", Offset = "0x9A6E70")]
	[AttributeAttribute(Name = "RequireXLimitCalculationAttribute", RVA = "0x9A6E70", Offset = "0x9A6E70")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0x9A6E70", Offset = "0x9A6E70")]
	[AttributeAttribute(Name = "CenterOfMassDistributionAttribute", RVA = "0x9A6E70", Offset = "0x9A6E70")]
	public BodyPart rightLowerLeg;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0x9A6F44", Offset = "0x9A6F44")]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0x9A6F44", Offset = "0x9A6F44")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0x9A6F44", Offset = "0x9A6F44")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0x9A6F44", Offset = "0x9A6F44")]
	public BodyPart rightFoot;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0x9A6FC0", Offset = "0x9A6FC0")]
	[NonfunctionalPart]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0x9A6FC0", Offset = "0x9A6FC0")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0x9A6FC0", Offset = "0x9A6FC0")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0x9A6FC0", Offset = "0x9A6FC0")]
	public BodyPart rightToe;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0x9A705C", Offset = "0x9A705C")]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0x9A705C", Offset = "0x9A705C")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0x9A705C", Offset = "0x9A705C")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0x9A705C", Offset = "0x9A705C")]
	public BodyPartChain spine;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0x9A70E4", Offset = "0x9A70E4")]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0x9A70E4", Offset = "0x9A70E4")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0x9A70E4", Offset = "0x9A70E4")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0x9A70E4", Offset = "0x9A70E4")]
	[AttributeAttribute(Name = "CenterOfMassDistributionAttribute", RVA = "0x9A70E4", Offset = "0x9A70E4")]
	public BodyPart leftCollar;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0x9A7198", Offset = "0x9A7198")]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0x9A7198", Offset = "0x9A7198")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0x9A7198", Offset = "0x9A7198")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0x9A7198", Offset = "0x9A7198")]
	[AttributeAttribute(Name = "CenterOfMassDistributionAttribute", RVA = "0x9A7198", Offset = "0x9A7198")]
	public BodyPart leftUpperArm;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0x9A7248", Offset = "0x9A7248")]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0x9A7248", Offset = "0x9A7248")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0x9A7248", Offset = "0x9A7248")]
	[AttributeAttribute(Name = "RequireXLimitCalculationAttribute", RVA = "0x9A7248", Offset = "0x9A7248")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0x9A7248", Offset = "0x9A7248")]
	[AttributeAttribute(Name = "CenterOfMassDistributionAttribute", RVA = "0x9A7248", Offset = "0x9A7248")]
	public BodyPart leftForearm;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0x9A731C", Offset = "0x9A731C")]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0x9A731C", Offset = "0x9A731C")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0x9A731C", Offset = "0x9A731C")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0x9A731C", Offset = "0x9A731C")]
	public BodyPart leftHand;

	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0x9A739C", Offset = "0x9A739C")]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0x9A739C", Offset = "0x9A739C")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0x9A739C", Offset = "0x9A739C")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0x9A739C", Offset = "0x9A739C")]
	[AttributeAttribute(Name = "CenterOfMassDistributionAttribute", RVA = "0x9A739C", Offset = "0x9A739C")]
	public BodyPart rightCollar;

	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0x9A7450", Offset = "0x9A7450")]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0x9A7450", Offset = "0x9A7450")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0x9A7450", Offset = "0x9A7450")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0x9A7450", Offset = "0x9A7450")]
	[AttributeAttribute(Name = "CenterOfMassDistributionAttribute", RVA = "0x9A7450", Offset = "0x9A7450")]
	public BodyPart rightUpperArm;

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0x9A7500", Offset = "0x9A7500")]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0x9A7500", Offset = "0x9A7500")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0x9A7500", Offset = "0x9A7500")]
	[AttributeAttribute(Name = "RequireXLimitCalculationAttribute", RVA = "0x9A7500", Offset = "0x9A7500")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0x9A7500", Offset = "0x9A7500")]
	[AttributeAttribute(Name = "CenterOfMassDistributionAttribute", RVA = "0x9A7500", Offset = "0x9A7500")]
	public BodyPart rightForearm;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0x9A75D4", Offset = "0x9A75D4")]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0x9A75D4", Offset = "0x9A75D4")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0x9A75D4", Offset = "0x9A75D4")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0x9A75D4", Offset = "0x9A75D4")]
	public BodyPart rightHand;

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0x9A7654", Offset = "0x9A7654")]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0x9A7654", Offset = "0x9A7654")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0x9A7654", Offset = "0x9A7654")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0x9A7654", Offset = "0x9A7654")]
	public BodyPartChain neck;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[AttributeAttribute(Name = "RequirementAttribute", RVA = "0x9A76E0", Offset = "0x9A76E0")]
	[AttributeAttribute(Name = "DefaultShapeTypeAttribute", RVA = "0x9A76E0", Offset = "0x9A76E0")]
	[AttributeAttribute(Name = "DefaultJointLimitsAttribute", RVA = "0x9A76E0", Offset = "0x9A76E0")]
	[AttributeAttribute(Name = "MassPercentageAttribute", RVA = "0x9A76E0", Offset = "0x9A76E0")]
	public BodyPart head;

	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public float mass;

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	public bool autoDistributeMass;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC5")]
	public bool addCollidersOnStart;

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7758", Offset = "0x9A7758")]
	private Biped <ragdoll>k__BackingField;

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Biped previousRagdoll;

	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private MimicBiped m_mimic;

	[Token(Token = "0x4000033")]
	public const string tempPoseClipName = "Temporary Ragdoll Pose";

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Animation anim;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public LayerMask walkableSurfaces;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	public float getUpRaycastHeightOffset;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public GetUpAnimation[] proneGetUpAnimations;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public GetUpAnimation[] supineGetUpAnimations;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public string isRagdollAnimatorParam;

	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public Animator animator;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public string isSupineAnimatorParam;

	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public string energyLevelAnimatorParam;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public GetUpAnimation.RootLocation defaultProneGetUpLocation;

	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	public GetUpAnimation.RootLocation defaultSupineGetUpLocation;

	[Token(Token = "0x17000003")]
	public static FieldInfo[] bodyPartAndChainFields
	{
		[Token(Token = "0x600003B")]
		[Address(RVA = "0x19D39F0", Offset = "0x19D39F0", VA = "0x19D39F0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000004")]
	public BodyPart[] allParts
	{
		[Token(Token = "0x600003C")]
		[Address(RVA = "0x19D3CA4", Offset = "0x19D3CA4", VA = "0x19D3CA4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000005")]
	public bool satisfiesMinimumDefinition
	{
		[Token(Token = "0x600003D")]
		[Address(RVA = "0x19D44BC", Offset = "0x19D44BC", VA = "0x19D44BC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000006")]
	public bool isCharacterized
	{
		[Token(Token = "0x600003E")]
		[Address(RVA = "0x19D46D4", Offset = "0x19D46D4", VA = "0x19D46D4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000007")]
	public bool isRagdoll
	{
		[Token(Token = "0x600003F")]
		[Address(RVA = "0x19D4804", Offset = "0x19D4804", VA = "0x19D4804")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000008")]
	public Biped ragdoll
	{
		[Token(Token = "0x6000040")]
		[Address(RVA = "0x19D4874", Offset = "0x19D4874", VA = "0x19D4874")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8798", Offset = "0x9A8798")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000041")]
		[Address(RVA = "0x19D487C", Offset = "0x19D487C", VA = "0x19D487C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A87A8", Offset = "0x9A87A8")]
		private set
		{
		}
	}

	[Token(Token = "0x17000009")]
	public MimicBiped mimic
	{
		[Token(Token = "0x6000042")]
		[Address(RVA = "0x19D4884", Offset = "0x19D4884", VA = "0x19D4884")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000A")]
	public bool satisfiesGetUpRequirements
	{
		[Token(Token = "0x6000043")]
		[Address(RVA = "0x19D498C", Offset = "0x19D498C", VA = "0x19D498C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700000B")]
	public bool hasAnimatorWithValidHumanAvatar
	{
		[Token(Token = "0x6000044")]
		[Address(RVA = "0x19D4BA0", Offset = "0x19D4BA0", VA = "0x19D4BA0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000045")]
	[Address(RVA = "0x19D4CEC", Offset = "0x19D4CEC", VA = "0x19D4CEC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0x19D5450", Offset = "0x19D5450", VA = "0x19D5450")]
	public void RemoveColliders()
	{
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0x19D50FC", Offset = "0x19D50FC", VA = "0x19D50FC")]
	public void AddColliders()
	{
	}

	[Token(Token = "0x6000048")]
	[Address(RVA = "0x19D524C", Offset = "0x19D524C", VA = "0x19D524C")]
	private void AddGetupAnimationsToAnimationComponentIfNecessary()
	{
	}

	[Token(Token = "0x6000049")]
	[Address(RVA = "0x19D5C08", Offset = "0x19D5C08", VA = "0x19D5C08")]
	public void AutoDetectNamingConvention()
	{
	}

	[Token(Token = "0x600004A")]
	[Address(RVA = "0x19D65E8", Offset = "0x19D65E8", VA = "0x19D65E8")]
	public void FindBodyPartsUsingNamingConvention(BipedNamingConvention.DCCApplication fromApplication = BipedNamingConvention.DCCApplication.Custom)
	{
	}

	[Token(Token = "0x600004B")]
	[Address(RVA = "0x19D7468", Offset = "0x19D7468", VA = "0x19D7468")]
	public void Characterize(AxisAlignmentMode symmetryAlignmentMode = AxisAlignmentMode.Cardinal, CharacterizationMode characterizationMode = CharacterizationMode.Simple)
	{
	}

	[Token(Token = "0x600004C")]
	[Address(RVA = "0x19D6CDC", Offset = "0x19D6CDC", VA = "0x19D6CDC")]
	private BodyPart GetBodyPartOnTransformWithName(string boneName, Transform[] hierarchy)
	{
		return null;
	}

	[Token(Token = "0x600004D")]
	[Address(RVA = "0x19DA470", Offset = "0x19DA470", VA = "0x19DA470")]
	private BodyPart GetBodyPartOnTransform(Transform bone)
	{
		return null;
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0x19D6D20", Offset = "0x19D6D20", VA = "0x19D6D20")]
	private void PopulateAxialChainBonesUsingNamingConvention(BodyPartChain axialSkeletonChain, string searchPattern, BodyPart head)
	{
	}

	[Token(Token = "0x600004F")]
	[Address(RVA = "0x19DA614", Offset = "0x19DA614", VA = "0x19DA614")]
	private BodyPart GetDefaultLimbTip(BodyPart tipParent)
	{
		return null;
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0x19DA6FC", Offset = "0x19DA6FC", VA = "0x19DA6FC")]
	private void InitializeDefaultPartProperties(BodyPart part)
	{
	}

	[Token(Token = "0x6000051")]
	[Address(RVA = "0x19DA8A8", Offset = "0x19DA8A8", VA = "0x19DA8A8")]
	private void SetDefaultFunctionalPartPropertyOverrides(BodyPart part)
	{
	}

	[Token(Token = "0x6000052")]
	[Address(RVA = "0x19D781C", Offset = "0x19D781C", VA = "0x19D781C")]
	private void InitializeDefaultPartPropertiesBasedOnFunctionality()
	{
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0x19D7B60", Offset = "0x19D7B60", VA = "0x19D7B60")]
	private void MapSymmetry(AxisAlignmentMode alignMode = AxisAlignmentMode.Cardinal)
	{
	}

	[Token(Token = "0x6000054")]
	[Address(RVA = "0x19DAFFC", Offset = "0x19DAFFC", VA = "0x19DAFFC")]
	private void AssignParentPart(BodyPart part, BodyPart parent)
	{
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0x19D7DAC", Offset = "0x19D7DAC", VA = "0x19D7DAC")]
	private void SetParentParts()
	{
	}

	[Token(Token = "0x6000056")]
	[Address(RVA = "0x19D81E4", Offset = "0x19D81E4", VA = "0x19D81E4")]
	private void SetDefaultShapeTypes()
	{
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0x19D84E8", Offset = "0x19D84E8", VA = "0x19D84E8")]
	private void SetDefaultCapsuleDirections()
	{
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0x19DB1D4", Offset = "0x19DB1D4", VA = "0x19DB1D4")]
	private void SetDefaultHeadColliderShapeSizeAndCenter(float characterHeight)
	{
	}

	[Token(Token = "0x6000059")]
	[Address(RVA = "0x19DB564", Offset = "0x19DB564", VA = "0x19DB564")]
	private void SetDefaultNeckColliderShapeSizeAndCenter(float characterHeight)
	{
	}

	[Token(Token = "0x600005A")]
	[Address(RVA = "0x19DBA20", Offset = "0x19DBA20", VA = "0x19DBA20")]
	private void SetDefaultSpineColliderShapeSizeAndCenter(float characterHeight)
	{
	}

	[Token(Token = "0x600005B")]
	[Address(RVA = "0x19DC220", Offset = "0x19DC220", VA = "0x19DC220")]
	private void CleanUpSpineColliderOverlap(float characterHeight)
	{
	}

	[Token(Token = "0x600005C")]
	[Address(RVA = "0x19DC4C0", Offset = "0x19DC4C0", VA = "0x19DC4C0")]
	private float ComputeSphereColliderOverlap(BodyPart p1, BodyPart p2)
	{
		return default(float);
	}

	[Token(Token = "0x600005D")]
	[Address(RVA = "0x19DC64C", Offset = "0x19DC64C", VA = "0x19DC64C")]
	private void SetDefaultPelvisColliderShapeSizeAndCenter(float characterHeight)
	{
	}

	[Token(Token = "0x600005E")]
	[Address(RVA = "0x19DC7D8", Offset = "0x19DC7D8", VA = "0x19DC7D8")]
	private void SetDefaultLegColliderShapeSizeAndCenter(BodyPart hip, BodyPart lowerLeg, BodyPart foot, BodyPart toe, float characterHeight)
	{
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0x19DD1C0", Offset = "0x19DD1C0", VA = "0x19DD1C0")]
	private void SetDefaultArmColliderShapeSizeAndCenter(BodyPart collarBone, BodyPart upperArm, BodyPart forearm, BodyPart hand, float characterHeight)
	{
	}

	[Token(Token = "0x6000060")]
	[Address(RVA = "0x19DDBF0", Offset = "0x19DDBF0", VA = "0x19DDBF0")]
	public float GetHeightEstimate()
	{
		return default(float);
	}

	[Token(Token = "0x6000061")]
	[Address(RVA = "0x19DA234", Offset = "0x19DA234", VA = "0x19DA234")]
	private void SetDefaultColliderSizeAndCenter()
	{
	}

	[Token(Token = "0x6000062")]
	[Address(RVA = "0x19D87C0", Offset = "0x19D87C0", VA = "0x19D87C0")]
	private void StoreInitialRotations()
	{
	}

	[Token(Token = "0x6000063")]
	[Address(RVA = "0x19D8844", Offset = "0x19D8844", VA = "0x19D8844")]
	private void SetDefaultJointAxes(AxisAlignmentMode alignMode)
	{
	}

	[Token(Token = "0x6000064")]
	[Address(RVA = "0x19DE4AC", Offset = "0x19DE4AC", VA = "0x19DE4AC")]
	private void SetBodyPartDefaultJointLimits(BodyPart part, DefaultJointLimitsAttribute jointLimits)
	{
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0x19DE5AC", Offset = "0x19DE5AC", VA = "0x19DE5AC")]
	private void SetBodyPartChainDefaultJointLimits(BodyPartChain chain, DefaultJointLimitsAttribute jointLimits)
	{
	}

	[Token(Token = "0x6000066")]
	[Address(RVA = "0x19D9DEC", Offset = "0x19D9DEC", VA = "0x19D9DEC")]
	private void SetDefaultJointLimits()
	{
	}

	[Token(Token = "0x6000067")]
	[Address(RVA = "0x19D4F8C", Offset = "0x19D4F8C", VA = "0x19D4F8C")]
	public void DistributeMass()
	{
	}

	[Token(Token = "0x6000068")]
	[Address(RVA = "0x19DEA6C", Offset = "0x19DEA6C", VA = "0x19DEA6C")]
	private void AssignMassToPartOrChain(FieldInfo field)
	{
	}

	[Token(Token = "0x6000069")]
	[Address(RVA = "0x19DED90", Offset = "0x19DED90", VA = "0x19DED90")]
	private void AssignCenterOfMassToPartOrChain(FieldInfo field)
	{
	}

	[Token(Token = "0x600006A")]
	[Address(RVA = "0x19DF444", Offset = "0x19DF444", VA = "0x19DF444")]
	public void FindBodyPartsUsingAvatarDefinition()
	{
	}

	[Token(Token = "0x600006B")]
	[Address(RVA = "0x19DF8B4", Offset = "0x19DF8B4", VA = "0x19DF8B4")]
	private BodyPart GetBodyPartOnHumanBone(HumanBodyBones bone)
	{
		return null;
	}

	[Token(Token = "0x600006C")]
	[Address(RVA = "0x19DF8F4", Offset = "0x19DF8F4", VA = "0x19DF8F4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600006D")]
	[Address(RVA = "0x19DFAA0", Offset = "0x19DFAA0", VA = "0x19DFAA0")]
	public void RestorePoseToSnapshot()
	{
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0x19DFE14", Offset = "0x19DFE14", VA = "0x19DFE14")]
	public void SetRagdollPhysicalProperties(float resistance, float maxForce)
	{
	}

	[Token(Token = "0x600006F")]
	[Address(RVA = "0x19DFF20", Offset = "0x19DFF20", VA = "0x19DFF20")]
	public void EnableRagdoll()
	{
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0x19E045C", Offset = "0x19E045C", VA = "0x19E045C")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9A87B8", Offset = "0x9A87B8")]
	public void EnableRagdoll(float resistance, float maxForce)
	{
	}

	[Token(Token = "0x6000071")]
	[Address(RVA = "0x19DFF30", Offset = "0x19DFF30", VA = "0x19DFF30")]
	private void EnableRagdoll(float resistance = 15f, float maxForce = 85f, bool overridePhysicalProperties = false)
	{
	}

	[Token(Token = "0x6000072")]
	[Address(RVA = "0x19E0B04", Offset = "0x19E0B04", VA = "0x19E0B04")]
	private BodyPart GetCorrespondingPart(BodyPart sourcePart, List<Transform> sourceHierarchy, List<Transform> duplicateHierarchy, int indexOffset)
	{
		return null;
	}

	[Token(Token = "0x6000073")]
	[Address(RVA = "0x19E0C20", Offset = "0x19E0C20", VA = "0x19E0C20")]
	private BodyPartChain GetCorrespondingChain(BodyPartChain sourceChain, List<Transform> sourceHierarchy, List<Transform> duplicateHierarchy, int indexOffset)
	{
		return null;
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0x19E047C", Offset = "0x19E047C", VA = "0x19E047C")]
	private Biped SetUpBipedOnDuplicateHierarchy(List<Transform> sourceHierarchy, List<Transform> duplicateHierarchy)
	{
		return null;
	}

	[Token(Token = "0x6000075")]
	[Address(RVA = "0x19E0FA4", Offset = "0x19E0FA4", VA = "0x19E0FA4")]
	public void DisableRagdoll(DisableRagdollMode disableMode = DisableRagdollMode.Normal)
	{
	}

	[Token(Token = "0x6000076")]
	[Address(RVA = "0x19E0FE8", Offset = "0x19E0FE8", VA = "0x19E0FE8")]
	public void DisableRagdoll(RemoveRagdollMode removeMode, DisableRagdollMode disableMode = DisableRagdollMode.Normal)
	{
	}

	[Token(Token = "0x6000077")]
	[Address(RVA = "0x19E1948", Offset = "0x19E1948", VA = "0x19E1948")]
	public void GetUp(float crossFadeTime = 1f, string nextAnimation = "")
	{
	}

	[Token(Token = "0x6000078")]
	[Address(RVA = "0x19E1B04", Offset = "0x19E1B04", VA = "0x19E1B04")]
	public void GetUp(string nextAnimation)
	{
	}

	[Token(Token = "0x6000079")]
	[Address(RVA = "0x19E1A3C", Offset = "0x19E1A3C", VA = "0x19E1A3C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x9A87F0", Offset = "0x9A87F0")]
	public IEnumerator GetUp(float crossFadeTime, float energyLevel, string nextAnimation = "")
	{
		return null;
	}

	[Token(Token = "0x600007A")]
	[Address(RVA = "0x19E1B38", Offset = "0x19E1B38", VA = "0x19E1B38")]
	private static void GetNewRootPositionAndOrientationForGetUp(Biped biped, Vector3 raycastFrom, out Vector3 newPosition, out Quaternion newOrientation)
	{
	}

	[Token(Token = "0x600007B")]
	[Address(RVA = "0x19E1E30", Offset = "0x19E1E30", VA = "0x19E1E30")]
	private static Vector3 GetFeetMidpoint(Biped biped)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600007C")]
	[Address(RVA = "0x19E2000", Offset = "0x19E2000", VA = "0x19E2000")]
	private GetUpAnimation SelectBestGetUpAnimation(float energyLevel)
	{
		return null;
	}

	[Token(Token = "0x600007D")]
	[Address(RVA = "0x19E21E8", Offset = "0x19E21E8", VA = "0x19E21E8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x9A8854", Offset = "0x9A8854")]
	private IEnumerator GetUpWithAnimation(float crossFadeTime, float energyLevel, string nextAnimation)
	{
		return null;
	}

	[Token(Token = "0x600007E")]
	[Address(RVA = "0x19E22DC", Offset = "0x19E22DC", VA = "0x19E22DC")]
	public Vector3 GetCharacterPelvisForwardDirection()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600007F")]
	[Address(RVA = "0x19E1F4C", Offset = "0x19E1F4C", VA = "0x19E1F4C")]
	public LyingOrientation GetCharacterLyingOrientation()
	{
		return default(LyingOrientation);
	}

	[Token(Token = "0x6000080")]
	[Address(RVA = "0x19E270C", Offset = "0x19E270C", VA = "0x19E270C")]
	private void SetAnimatorGetUpParameters(float energyLevel, LyingOrientation lyingOrientation)
	{
	}

	[Token(Token = "0x6000081")]
	[Address(RVA = "0x19E2870", Offset = "0x19E2870", VA = "0x19E2870")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x9A88B8", Offset = "0x9A88B8")]
	private IEnumerator GetUpWithAnimator(float crossFadeTime, float energyLevel, DisableRagdollMode disableMode = DisableRagdollMode.Normal)
	{
		return null;
	}

	[Token(Token = "0x6000082")]
	[Address(RVA = "0x19E2948", Offset = "0x19E2948", VA = "0x19E2948")]
	public Biped()
	{
	}
}
[Serializable]
[Token(Token = "0x2000017")]
public class BipedNamingConvention
{
	[Token(Token = "0x20002A5")]
	public enum DCCApplication
	{
		[Token(Token = "0x4000D7D")]
		Max,
		[Token(Token = "0x4000D7E")]
		Maya,
		[Token(Token = "0x4000D7F")]
		HumanIK,
		[Token(Token = "0x4000D80")]
		Custom
	}

	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string characterNamePrefix;

	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string centerPrefix;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string leftPrefix;

	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string rightPrefix;

	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string head;

	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string neck;

	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string spine;

	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string pelvis;

	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string upperLeg;

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public string lowerLeg;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string foot;

	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public string toe;

	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public string collar;

	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public string upperArm;

	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public string forearm;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public string hand;

	[Token(Token = "0x1700000C")]
	public string expectedHeadName
	{
		[Token(Token = "0x6000084")]
		[Address(RVA = "0x19D6CC8", Offset = "0x19D6CC8", VA = "0x19D6CC8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000D")]
	public string expectedNeckName
	{
		[Token(Token = "0x6000085")]
		[Address(RVA = "0x19D6D0C", Offset = "0x19D6D0C", VA = "0x19D6D0C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000E")]
	public string expectedSpineName
	{
		[Token(Token = "0x6000086")]
		[Address(RVA = "0x19D72FC", Offset = "0x19D72FC", VA = "0x19D72FC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000F")]
	public string expectedPelvisName
	{
		[Token(Token = "0x6000087")]
		[Address(RVA = "0x19D65D4", Offset = "0x19D65D4", VA = "0x19D65D4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000010")]
	public string expectedLeftUpperLegName
	{
		[Token(Token = "0x6000088")]
		[Address(RVA = "0x19D7328", Offset = "0x19D7328", VA = "0x19D7328")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000011")]
	public string expectedLeftLowerLegName
	{
		[Token(Token = "0x6000089")]
		[Address(RVA = "0x19D733C", Offset = "0x19D733C", VA = "0x19D733C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000012")]
	public string expectedLeftFootName
	{
		[Token(Token = "0x600008A")]
		[Address(RVA = "0x19D7350", Offset = "0x19D7350", VA = "0x19D7350")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000013")]
	public string expectedLeftToeName
	{
		[Token(Token = "0x600008B")]
		[Address(RVA = "0x19D7364", Offset = "0x19D7364", VA = "0x19D7364")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000014")]
	public string expectedRightUpperLegName
	{
		[Token(Token = "0x600008C")]
		[Address(RVA = "0x19D7378", Offset = "0x19D7378", VA = "0x19D7378")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000015")]
	public string expectedRightLowerLegName
	{
		[Token(Token = "0x600008D")]
		[Address(RVA = "0x19D738C", Offset = "0x19D738C", VA = "0x19D738C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000016")]
	public string expectedRightFootName
	{
		[Token(Token = "0x600008E")]
		[Address(RVA = "0x19D73A0", Offset = "0x19D73A0", VA = "0x19D73A0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000017")]
	public string expectedRightToeName
	{
		[Token(Token = "0x600008F")]
		[Address(RVA = "0x19D73B4", Offset = "0x19D73B4", VA = "0x19D73B4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000018")]
	public string expectedLeftCollarName
	{
		[Token(Token = "0x6000090")]
		[Address(RVA = "0x19D73C8", Offset = "0x19D73C8", VA = "0x19D73C8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000019")]
	public string expectedLeftUpperArmName
	{
		[Token(Token = "0x6000091")]
		[Address(RVA = "0x19D73DC", Offset = "0x19D73DC", VA = "0x19D73DC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700001A")]
	public string expectedLeftForearmName
	{
		[Token(Token = "0x6000092")]
		[Address(RVA = "0x19D73F0", Offset = "0x19D73F0", VA = "0x19D73F0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700001B")]
	public string expectedLeftHandName
	{
		[Token(Token = "0x6000093")]
		[Address(RVA = "0x19D7404", Offset = "0x19D7404", VA = "0x19D7404")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700001C")]
	public string expectedRightCollarName
	{
		[Token(Token = "0x6000094")]
		[Address(RVA = "0x19D7418", Offset = "0x19D7418", VA = "0x19D7418")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700001D")]
	public string expectedRightUpperArmName
	{
		[Token(Token = "0x6000095")]
		[Address(RVA = "0x19D742C", Offset = "0x19D742C", VA = "0x19D742C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700001E")]
	public string expectedRightForearmName
	{
		[Token(Token = "0x6000096")]
		[Address(RVA = "0x19D7440", Offset = "0x19D7440", VA = "0x19D7440")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700001F")]
	public string expectedRightHandName
	{
		[Token(Token = "0x6000097")]
		[Address(RVA = "0x19D7454", Offset = "0x19D7454", VA = "0x19D7454")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0x19E3E34", Offset = "0x19E3E34", VA = "0x19E3E34", Slot = "4")]
	protected virtual string GetExpectedName(string sidePrefix, string partName)
	{
		return null;
	}

	[Token(Token = "0x6000099")]
	[Address(RVA = "0x19D62C8", Offset = "0x19D62C8", VA = "0x19D62C8")]
	public static BipedNamingConvention Max(Biped biped)
	{
		return null;
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0x19E4210", Offset = "0x19E4210", VA = "0x19E4210")]
	public static BipedNamingConvention Max(string characterNamePrefix)
	{
		return null;
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0x19E4640", Offset = "0x19E4640", VA = "0x19E4640")]
	public static BipedNamingConvention Maya(Biped biped)
	{
		return null;
	}

	[Token(Token = "0x600009C")]
	[Address(RVA = "0x19D62DC", Offset = "0x19D62DC", VA = "0x19D62DC")]
	public static BipedNamingConvention Maya(string characterNamePrefix = "")
	{
		return null;
	}

	[Token(Token = "0x600009D")]
	[Address(RVA = "0x19E4654", Offset = "0x19E4654", VA = "0x19E4654")]
	public static BipedNamingConvention HumanIK(Biped biped)
	{
		return null;
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0x19D5FD0", Offset = "0x19D5FD0", VA = "0x19D5FD0")]
	public static BipedNamingConvention HumanIK(string characterNamePrefix = "")
	{
		return null;
	}

	[Token(Token = "0x600009F")]
	[Address(RVA = "0x19E4668", Offset = "0x19E4668", VA = "0x19E4668")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9A891C", Offset = "0x9A891C")]
	public static string GetCharacterNamePrefixOn3DSMaxBiped(Biped biped)
	{
		return null;
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0x19E3EA0", Offset = "0x19E3EA0", VA = "0x19E3EA0")]
	public static string GetCharacterNamePrefix(Biped biped)
	{
		return null;
	}

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0x19E466C", Offset = "0x19E466C", VA = "0x19E466C")]
	public BipedNamingConvention Clone()
	{
		return null;
	}

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0x19E4508", Offset = "0x19E4508", VA = "0x19E4508")]
	public BipedNamingConvention()
	{
	}
}
[Token(Token = "0x2000018")]
public enum CapsuleDirection
{
	[Token(Token = "0x4000050")]
	X,
	[Token(Token = "0x4000051")]
	Y,
	[Token(Token = "0x4000052")]
	Z
}
[Token(Token = "0x2000019")]
public enum DisableRagdollMode
{
	[Token(Token = "0x4000054")]
	Normal,
	[Token(Token = "0x4000055")]
	Kill
}
[Token(Token = "0x200001A")]
public enum EnableRagdollMode
{
	[Token(Token = "0x4000057")]
	Normal,
	[Token(Token = "0x4000058")]
	Duplicate
}
[Token(Token = "0x200001B")]
public enum RemoveRagdollMode
{
	[Token(Token = "0x400005A")]
	RemoveCollidersAndRigidbodies,
	[Token(Token = "0x400005B")]
	RetainColliders,
	[Token(Token = "0x400005C")]
	RetainCollidersAndRigidbodies
}
[Token(Token = "0x200001C")]
public enum RigidbodyMode
{
	[Token(Token = "0x400005E")]
	NotKinematic,
	[Token(Token = "0x400005F")]
	Kinematic
}
[Token(Token = "0x200001D")]
public enum SymmetryMode
{
	[Token(Token = "0x4000061")]
	Normal,
	[Token(Token = "0x4000062")]
	MatchScale
}
[Token(Token = "0x200001E")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A3804", Offset = "0x9A3804")]
public class BodyPart : MonoBehaviour
{
	[Token(Token = "0x4000063")]
	public const string ragdollDuplicateSuffix = " (Ragdoll Duplicate)";

	[Token(Token = "0x4000064")]
	public const float minimumMass = 0.05f;

	[Token(Token = "0x4000065")]
	public const float defaultMaxResistance = 15f;

	[Token(Token = "0x4000066")]
	public const float defaultMaxForce = 85f;

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static FieldInfo[] fieldsToCopy;

	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static PropertyInfo[] propertiesToCopy;

	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform m_bone;

	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Quaternion m_initialRotation;

	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 positionSnapshot;

	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Quaternion rotationSnapshot;

	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float mass;

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool isCenterOfMassManual;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	private Vector3 m_centerOfMass;

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool isRigidbody;

	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public ShapeType shapeType;

	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public CapsuleDirection capsuleDirection;

	[Token(Token = "0x4000073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public Vector3 shapeCenter;

	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Vector3 shapeSize;

	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public Quaternion shapeRotation;

	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public bool isCollider;

	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7778", Offset = "0x9A7778")]
	private Collider <generatedCollider>k__BackingField;

	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private MimicBodyPart m_mimic;

	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7788", Offset = "0x9A7788")]
	private BodyPart <ragdoll>k__BackingField;

	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private float m_resistance;

	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	[SerializeField]
	private float m_maxForce;

	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A77B8", Offset = "0x9A77B8")]
	private CharacterJoint <joint>k__BackingField;

	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Vector3 jointAxis;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	public Vector3 jointSecondaryAxis;

	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public float xMin;

	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	public float xMax;

	[Token(Token = "0x4000081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public float yMax;

	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public float zMax;

	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public BodyPart parentPart;

	[Token(Token = "0x4000084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public BodyPart oppositePart;

	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public Vector3 oppositeRight;

	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	public Vector3 oppositeUp;

	[Token(Token = "0x4000087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public Vector3 oppositeForward;

	[Token(Token = "0x17000020")]
	public Transform bone
	{
		[Token(Token = "0x60000A3")]
		[Address(RVA = "0x19DA584", Offset = "0x19DA584", VA = "0x19DA584")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000021")]
	public Quaternion parentRotation
	{
		[Token(Token = "0x60000A4")]
		[Address(RVA = "0x19E4FCC", Offset = "0x19E4FCC", VA = "0x19E4FCC")]
		get
		{
			return default(Quaternion);
		}
	}

	[Token(Token = "0x17000022")]
	public Quaternion initialRotation
	{
		[Token(Token = "0x60000A5")]
		[Address(RVA = "0x19E50CC", Offset = "0x19E50CC", VA = "0x19E50CC")]
		get
		{
			return default(Quaternion);
		}
	}

	[Token(Token = "0x17000023")]
	public Vector3 centerOfMass
	{
		[Token(Token = "0x60000A6")]
		[Address(RVA = "0x19E512C", Offset = "0x19E512C", VA = "0x19E512C")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x60000A7")]
		[Address(RVA = "0x19DA89C", Offset = "0x19DA89C", VA = "0x19DA89C")]
		set
		{
		}
	}

	[Token(Token = "0x17000024")]
	public bool isRagdoll
	{
		[Token(Token = "0x60000A8")]
		[Address(RVA = "0x19E51C0", Offset = "0x19E51C0", VA = "0x19E51C0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000025")]
	public Collider generatedCollider
	{
		[Token(Token = "0x60000A9")]
		[Address(RVA = "0x19E1940", Offset = "0x19E1940", VA = "0x19E1940")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8954", Offset = "0x9A8954")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000AA")]
		[Address(RVA = "0x19E5238", Offset = "0x19E5238", VA = "0x19E5238")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8964", Offset = "0x9A8964")]
		private set
		{
		}
	}

	[Token(Token = "0x17000026")]
	public MimicBodyPart mimic
	{
		[Token(Token = "0x60000AB")]
		[Address(RVA = "0x19DA468", Offset = "0x19DA468", VA = "0x19DA468")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000027")]
	public BodyPart ragdoll
	{
		[Token(Token = "0x60000AC")]
		[Address(RVA = "0x19E5230", Offset = "0x19E5230", VA = "0x19E5230")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8974", Offset = "0x9A8974")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000AD")]
		[Address(RVA = "0x19E5240", Offset = "0x19E5240", VA = "0x19E5240")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8984", Offset = "0x9A8984")]
		private set
		{
		}
	}

	[Token(Token = "0x17000028")]
	public bool canRagdollBeDisabledOnSelf
	{
		[Token(Token = "0x60000AE")]
		[Address(RVA = "0x19E5248", Offset = "0x19E5248", VA = "0x19E5248")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000029")]
	public BodyPart topMostRagdollParent
	{
		[Token(Token = "0x60000AF")]
		[Address(RVA = "0x19E52FC", Offset = "0x19E52FC", VA = "0x19E52FC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700002A")]
	public float resistance
	{
		[Token(Token = "0x60000B0")]
		[Address(RVA = "0x19E5354", Offset = "0x19E5354", VA = "0x19E5354")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60000B1")]
		[Address(RVA = "0x19E535C", Offset = "0x19E535C", VA = "0x19E535C")]
		set
		{
		}
	}

	[Token(Token = "0x1700002B")]
	public float maxForce
	{
		[Token(Token = "0x60000B2")]
		[Address(RVA = "0x19E5390", Offset = "0x19E5390", VA = "0x19E5390")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60000B3")]
		[Address(RVA = "0x19E5398", Offset = "0x19E5398", VA = "0x19E5398")]
		set
		{
		}
	}

	[Token(Token = "0x1700002C")]
	public CharacterJoint joint
	{
		[Token(Token = "0x60000B4")]
		[Address(RVA = "0x19E53CC", Offset = "0x19E53CC", VA = "0x19E53CC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8994", Offset = "0x9A8994")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000B5")]
		[Address(RVA = "0x19E53D4", Offset = "0x19E53D4", VA = "0x19E53D4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A89A4", Offset = "0x9A89A4")]
		private set
		{
		}
	}

	[Token(Token = "0x1700002D")]
	public Quaternion jointFrameOffset
	{
		[Token(Token = "0x60000B6")]
		[Address(RVA = "0x19E53DC", Offset = "0x19E53DC", VA = "0x19E53DC")]
		get
		{
			return default(Quaternion);
		}
	}

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0x19E547C", Offset = "0x19E547C", VA = "0x19E547C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0x19E5628", Offset = "0x19E5628", VA = "0x19E5628")]
	public JointAngularLimits GetJointAngularLimits()
	{
		return null;
	}

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0x19E5700", Offset = "0x19E5700", VA = "0x19E5700")]
	public void SetJointAngularLimits(JointAngularLimits limits)
	{
	}

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0x19DE3BC", Offset = "0x19DE3BC", VA = "0x19DE3BC")]
	public void StoreInitialRotation()
	{
	}

	[Token(Token = "0x60000BB")]
	[Address(RVA = "0x19E578C", Offset = "0x19E578C", VA = "0x19E578C")]
	public void StoreInitialRotation(Quaternion localRotation)
	{
	}

	[Token(Token = "0x60000BC")]
	[Address(RVA = "0x19E5568", Offset = "0x19E5568", VA = "0x19E5568")]
	public void StoreRotationSnapshot()
	{
	}

	[Token(Token = "0x60000BD")]
	[Address(RVA = "0x19DFD24", Offset = "0x19DFD24", VA = "0x19DFD24")]
	public void ResetToRotationSnapshot()
	{
	}

	[Token(Token = "0x60000BE")]
	[Address(RVA = "0x19E54A8", Offset = "0x19E54A8", VA = "0x19E54A8")]
	public void StorePositionSnapshot()
	{
	}

	[Token(Token = "0x60000BF")]
	[Address(RVA = "0x19DFC3C", Offset = "0x19DFC3C", VA = "0x19DFC3C")]
	public void ResetToPositionSnapshot()
	{
	}

	[Token(Token = "0x60000C0")]
	[Address(RVA = "0x19E5798", Offset = "0x19E5798", VA = "0x19E5798")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9A89B4", Offset = "0x9A89B4")]
	public void FindParentPart()
	{
	}

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0x19DB8C0", Offset = "0x19DB8C0", VA = "0x19DB8C0")]
	public void SetParentShapeCenter()
	{
	}

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0x19DE3FC", Offset = "0x19DE3FC", VA = "0x19DE3FC")]
	public void SetJointAxesFromWorldVectors(Vector3 axis, Vector3 secondaryAxis)
	{
	}

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0x19E58B4", Offset = "0x19E58B4", VA = "0x19E58B4")]
	public void FlipCapsule(CapsuleDirection toDirection)
	{
	}

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0x19DD194", Offset = "0x19DD194", VA = "0x19DD194")]
	public void SetCapsuleLength(float length)
	{
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0x19DA8F8", Offset = "0x19DA8F8", VA = "0x19DA8F8")]
	public void MatchTo(BodyPart other, AxisAlignmentMode alignMode)
	{
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0x19E5958", Offset = "0x19E5958", VA = "0x19E5958")]
	public Quaternion TransformRotationToOpposite(Quaternion q)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0x19E5AB8", Offset = "0x19E5AB8", VA = "0x19E5AB8")]
	public Vector3 TransformPointToOpposite(Vector3 p, SymmetryMode scaleMode)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0x19E5DA8", Offset = "0x19E5DA8", VA = "0x19E5DA8")]
	public void PasteShapeSizeToOpposite(SymmetryMode scaleMode)
	{
	}

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0x19E5FF0", Offset = "0x19E5FF0", VA = "0x19E5FF0")]
	public static void CopyBodyPartComponentsInHierarchy(List<Transform> sourceHierarchy, List<Transform> destinationHierarchy)
	{
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0x19E61C8", Offset = "0x19E61C8", VA = "0x19E61C8")]
	private static BodyPart CreateDuplicateBodyPart(BodyPart source, GameObject destinationGameObject)
	{
		return null;
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0x19E6498", Offset = "0x19E6498", VA = "0x19E6498")]
	private static BodyPart CopyBodyPartFieldValue(BodyPart sourceFieldValue, List<Transform> sourceHierarchy, List<Transform> destinationHierarchy)
	{
		return null;
	}

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0x19E6664", Offset = "0x19E6664", VA = "0x19E6664")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0x19E0A9C", Offset = "0x19E0A9C", VA = "0x19E0A9C")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9A89EC", Offset = "0x9A89EC")]
	public BodyPart[] EnableRagdoll(float resistance, float maxForce, EnableRagdollMode ragdollMode = EnableRagdollMode.Duplicate)
	{
		return null;
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0x19E0ACC", Offset = "0x19E0ACC", VA = "0x19E0ACC")]
	public BodyPart[] EnableRagdoll(EnableRagdollMode ragdollMode = EnableRagdollMode.Duplicate)
	{
		return null;
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0x19E0464", Offset = "0x19E0464", VA = "0x19E0464")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9A8A24", Offset = "0x9A8A24")]
	public BodyPart[] EnableRagdoll(out List<Transform> ragdollHierarchy, float resistance = 15f, float maxForce = 85f, EnableRagdollMode ragdollMode = EnableRagdollMode.Duplicate)
	{
		return null;
	}

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0x19E046C", Offset = "0x19E046C", VA = "0x19E046C")]
	public BodyPart[] EnableRagdoll(out List<Transform> ragdollHierarchy, EnableRagdollMode ragdollMode = EnableRagdollMode.Duplicate)
	{
		return null;
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0x19E6768", Offset = "0x19E6768", VA = "0x19E6768")]
	private BodyPart[] EnableRagdoll(out List<Transform> ragdollHierarchy, float resistance = 15f, float maxForce = 85f, EnableRagdollMode ragdollMode = EnableRagdollMode.Duplicate, bool overridePhysicalProperties = false)
	{
		return null;
	}

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0x19E73AC", Offset = "0x19E73AC", VA = "0x19E73AC")]
	private static void StopRigidbody(Rigidbody rigidbody)
	{
	}

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0x19D5800", Offset = "0x19D5800", VA = "0x19D5800")]
	public void ConnectToParent()
	{
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0x19E1520", Offset = "0x19E1520", VA = "0x19E1520")]
	public bool DisableRagdoll(RemoveRagdollMode removeMode)
	{
		return default(bool);
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0x19E6DC0", Offset = "0x19E6DC0", VA = "0x19E6DC0")]
	private void DestroyRagdollDuplicate(BodyPart[] hierarchy)
	{
	}

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0x19DFF18", Offset = "0x19DFF18", VA = "0x19DFF18")]
	public void SetRagdollPhysicalProperties(float resistance, float maxForce)
	{
	}

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0x19E7498", Offset = "0x19E7498", VA = "0x19E7498")]
	private GameObject GetGameObjectForCollider()
	{
		return null;
	}

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0x19E7060", Offset = "0x19E7060", VA = "0x19E7060")]
	public void AddCollider(RigidbodyMode rigidbodyMode = RigidbodyMode.Kinematic)
	{
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0x19E7744", Offset = "0x19E7744", VA = "0x19E7744")]
	private void AddBoxCollider(GameObject colliderHolder)
	{
	}

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0x19E78A4", Offset = "0x19E78A4", VA = "0x19E78A4")]
	private void AddCapsuleCollider(GameObject colliderHolder)
	{
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0x19E7B0C", Offset = "0x19E7B0C", VA = "0x19E7B0C")]
	private void AddSphereCollider(GameObject colliderHolder)
	{
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0x19D56D0", Offset = "0x19D56D0", VA = "0x19D56D0")]
	public void RemoveCollider()
	{
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0x19E7D18", Offset = "0x19E7D18", VA = "0x19E7D18")]
	public BodyPart()
	{
	}
}
[Serializable]
[Token(Token = "0x200001F")]
public class BodyPartChain
{
	[Token(Token = "0x4000088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public BodyPart[] parts;

	[Token(Token = "0x4000089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BodyPart terminalJoint;

	[Token(Token = "0x400008A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AngularLimitDistribution angularLimitDistribution;

	[Token(Token = "0x1700002E")]
	public BodyPart lastPart
	{
		[Token(Token = "0x60000DF")]
		[Address(RVA = "0x19DB08C", Offset = "0x19DB08C", VA = "0x19DB08C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700002F")]
	public float length
	{
		[Token(Token = "0x60000E0")]
		[Address(RVA = "0x19E7F3C", Offset = "0x19E7F3C", VA = "0x19E7F3C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000030")]
	public int Count
	{
		[Token(Token = "0x60000E1")]
		[Address(RVA = "0x19D7310", Offset = "0x19D7310", VA = "0x19D7310")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000031")]
	public bool isValid
	{
		[Token(Token = "0x60000E2")]
		[Address(RVA = "0x19E826C", Offset = "0x19E826C", VA = "0x19E826C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0x19E837C", Offset = "0x19E837C", VA = "0x19E837C")]
	public BodyPartChain()
	{
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0x19E0DB8", Offset = "0x19E0DB8", VA = "0x19E0DB8")]
	public BodyPartChain(BodyPart[] parts, BodyPart terminalJoint, AngularLimitDistribution angularLimitDistribution)
	{
	}

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0x19E2A0C", Offset = "0x19E2A0C", VA = "0x19E2A0C")]
	public static BodyPartChain GetDefaultSpineChain()
	{
		return null;
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0x19E2AA8", Offset = "0x19E2AA8", VA = "0x19E2AA8")]
	public static BodyPartChain GetDefaultNeckChain()
	{
		return null;
	}

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0x19DBF80", Offset = "0x19DBF80", VA = "0x19DBF80")]
	public float[] GetChainParameterValues(float parameterOffset)
	{
		return null;
	}

	[Token(Token = "0x60000E8")]
	[Address(RVA = "0x19DE6A0", Offset = "0x19DE6A0", VA = "0x19DE6A0")]
	public void ApplyAngularLimitsToJointChain()
	{
	}

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0x19DF068", Offset = "0x19DF068", VA = "0x19DF068")]
	public void DistributeMassToChainParts(float mass)
	{
	}

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0x19E8384", Offset = "0x19E8384", VA = "0x19E8384")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9A8A5C", Offset = "0x9A8A5C")]
	public void EnableRagdoll(float resistance = 15f, float maxForce = 85f, EnableRagdollMode ragdollMode = EnableRagdollMode.Duplicate)
	{
	}

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0x19E8410", Offset = "0x19E8410", VA = "0x19E8410")]
	public void EnableRagdoll(EnableRagdollMode ragdollMode = EnableRagdollMode.Duplicate)
	{
	}
}
[Token(Token = "0x2000020")]
public enum LyingOrientation
{
	[Token(Token = "0x400008C")]
	Supine,
	[Token(Token = "0x400008D")]
	Prone
}
[Serializable]
[Token(Token = "0x2000021")]
public class GetUpAnimation
{
	[Token(Token = "0x20002A6")]
	public enum RootLocation
	{
		[Token(Token = "0x4000D82")]
		Feet,
		[Token(Token = "0x4000D83")]
		Pelvis
	}

	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string name;

	[Token(Token = "0x400008F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationClip clip;

	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public RootLocation rootStartLocation;

	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float energyLevel;

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0x19EAB94", Offset = "0x19EAB94", VA = "0x19EAB94")]
	public GetUpAnimation()
	{
	}
}
[Token(Token = "0x2000022")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x9A383C", Offset = "0x9A383C")]
public class MimicBiped : MonoBehaviour
{
	[Token(Token = "0x20002A7")]
	public class MismatchException : Exception
	{
		[Token(Token = "0x60014F8")]
		[Address(RVA = "0x15DA800", Offset = "0x15DA800", VA = "0x15DA800")]
		public MismatchException(string[] mismatches)
		{
		}

		[Token(Token = "0x60014F9")]
		[Address(RVA = "0x15DBA74", Offset = "0x15DBA74", VA = "0x15DBA74")]
		public static string GetErrorMessage(string[] mismatches)
		{
			return null;
		}
	}

	[Token(Token = "0x4000092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[HideInInspector]
	private Biped m_biped;

	[Token(Token = "0x4000093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Biped m_target;

	[Token(Token = "0x4000094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float m_blendWeight;

	[Token(Token = "0x4000095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private MimicTransformationMode m_pelvisTransformationMode;

	[Token(Token = "0x17000032")]
	public Biped biped
	{
		[Token(Token = "0x60000ED")]
		[Address(RVA = "0x15D9D90", Offset = "0x15D9D90", VA = "0x15D9D90")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000033")]
	public Biped target
	{
		[Token(Token = "0x60000EE")]
		[Address(RVA = "0x15D9E28", Offset = "0x15D9E28", VA = "0x15D9E28")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000EF")]
		[Address(RVA = "0x15D9E30", Offset = "0x15D9E30", VA = "0x15D9E30")]
		set
		{
		}
	}

	[Token(Token = "0x17000034")]
	public bool isTargetValid
	{
		[Token(Token = "0x60000F0")]
		[Address(RVA = "0x15DA06C", Offset = "0x15DA06C", VA = "0x15DA06C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000035")]
	public float blendWeight
	{
		[Token(Token = "0x60000F1")]
		[Address(RVA = "0x15DAC80", Offset = "0x15DAC80", VA = "0x15DAC80")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60000F2")]
		[Address(RVA = "0x15DAC88", Offset = "0x15DAC88", VA = "0x15DAC88")]
		set
		{
		}
	}

	[Token(Token = "0x17000036")]
	public MimicTransformationMode pelvisTransformationMode
	{
		[Token(Token = "0x60000F3")]
		[Address(RVA = "0x15DAE34", Offset = "0x15DAE34", VA = "0x15DAE34")]
		get
		{
			return default(MimicTransformationMode);
		}
		[Token(Token = "0x60000F4")]
		[Address(RVA = "0x15DAE3C", Offset = "0x15DAE3C", VA = "0x15DAE3C")]
		set
		{
		}
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0x15DAE98", Offset = "0x15DAE98", VA = "0x15DAE98")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0x15DAED0", Offset = "0x15DAED0", VA = "0x15DAED0")]
	private void Start()
	{
	}

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0x15DAFC4", Offset = "0x15DAFC4", VA = "0x15DAFC4")]
	public void CopySettingsFrom(MimicBiped other)
	{
	}

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0x15DA090", Offset = "0x15DA090", VA = "0x15DA090")]
	public string[] GetProblems()
	{
		return null;
	}

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0x15DB078", Offset = "0x15DB078", VA = "0x15DB078")]
	private void OnAnimatorIK(int layerIndex)
	{
	}

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0x15DB4D0", Offset = "0x15DB4D0", VA = "0x15DB4D0")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0x15DBA60", Offset = "0x15DBA60", VA = "0x15DBA60")]
	public MimicBiped()
	{
	}
}
[Token(Token = "0x2000023")]
public enum MimicPropagationMode
{
	[Token(Token = "0x4000097")]
	Self,
	[Token(Token = "0x4000098")]
	Hierarchy
}
[Token(Token = "0x2000024")]
public enum MimicTransformationMode
{
	[Token(Token = "0x400009A")]
	LocalRotation,
	[Token(Token = "0x400009B")]
	WorldPositionAndRotation
}
[Token(Token = "0x2000025")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x9A38A0", Offset = "0x9A38A0")]
public class MimicBodyPart : MonoBehaviour
{
	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[HideInInspector]
	private BodyPart m_bodyPart;

	[Token(Token = "0x400009D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private BodyPart m_target;

	[Token(Token = "0x400009E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float m_blendWeight;

	[Token(Token = "0x400009F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7888", Offset = "0x9A7888")]
	private Vector3 <currentMimicTargetPosition>k__BackingField;

	[Token(Token = "0x40000A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7898", Offset = "0x9A7898")]
	private Quaternion <currentMimicTargetRotation>k__BackingField;

	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public MimicTransformationMode transformationMode;

	[Token(Token = "0x17000037")]
	public BodyPart bodyPart
	{
		[Token(Token = "0x60000FC")]
		[Address(RVA = "0x15DBB8C", Offset = "0x15DBB8C", VA = "0x15DBB8C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000038")]
	public BodyPart target
	{
		[Token(Token = "0x60000FD")]
		[Address(RVA = "0x15DBC24", Offset = "0x15DBC24", VA = "0x15DBC24")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000FE")]
		[Address(RVA = "0x15DA888", Offset = "0x15DA888", VA = "0x15DA888")]
		set
		{
		}
	}

	[Token(Token = "0x17000039")]
	public float blendWeight
	{
		[Token(Token = "0x60000FF")]
		[Address(RVA = "0x15DBC2C", Offset = "0x15DBC2C", VA = "0x15DBC2C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000100")]
		[Address(RVA = "0x15DADB8", Offset = "0x15DADB8", VA = "0x15DADB8")]
		set
		{
		}
	}

	[Token(Token = "0x1700003A")]
	public Vector3 currentMimicTargetPosition
	{
		[Token(Token = "0x6000101")]
		[Address(RVA = "0x15DBC34", Offset = "0x15DBC34", VA = "0x15DBC34")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8A94", Offset = "0x9A8A94")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000102")]
		[Address(RVA = "0x15DBC40", Offset = "0x15DBC40", VA = "0x15DBC40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8AA4", Offset = "0x9A8AA4")]
		private set
		{
		}
	}

	[Token(Token = "0x1700003B")]
	public Quaternion currentMimicTargetRotation
	{
		[Token(Token = "0x6000103")]
		[Address(RVA = "0x15DBC4C", Offset = "0x15DBC4C", VA = "0x15DBC4C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8AB4", Offset = "0x9A8AB4")]
		get
		{
			return default(Quaternion);
		}
		[Token(Token = "0x6000104")]
		[Address(RVA = "0x15DBC58", Offset = "0x15DBC58", VA = "0x15DBC58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8AC4", Offset = "0x9A8AC4")]
		private set
		{
		}
	}

	[Token(Token = "0x6000105")]
	[Address(RVA = "0x15DBC64", Offset = "0x15DBC64", VA = "0x15DBC64")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0x15DBC6C", Offset = "0x15DBC6C", VA = "0x15DBC6C")]
	public void SetBlendWeight(float weight, MimicPropagationMode mode = MimicPropagationMode.Self)
	{
	}

	[Token(Token = "0x6000107")]
	[Address(RVA = "0x15DBD4C", Offset = "0x15DBD4C", VA = "0x15DBD4C")]
	public void CopySettingsFrom(MimicBodyPart other)
	{
	}

	[Token(Token = "0x6000108")]
	[Address(RVA = "0x15DAFA0", Offset = "0x15DAFA0", VA = "0x15DAFA0")]
	public void ApplyMimicTransformationsNow()
	{
	}

	[Token(Token = "0x6000109")]
	[Address(RVA = "0x15DB7B4", Offset = "0x15DB7B4", VA = "0x15DB7B4")]
	public void ApplyMimicTransformations()
	{
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0x15DB174", Offset = "0x15DB174", VA = "0x15DB174")]
	public void ComputeMimicTransformations()
	{
	}

	[Token(Token = "0x600010B")]
	[Address(RVA = "0x15DBDF8", Offset = "0x15DBDF8", VA = "0x15DBDF8")]
	public MimicBodyPart()
	{
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0x15DBE08", Offset = "0x15DBE08", VA = "0x15DBE08")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8AD4", Offset = "0x9A8AD4")]
	private bool <set_target>b__5_0(CollisionBroadcaster item)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000026")]
public enum GUIAnchor
{
	[Token(Token = "0x40000A3")]
	LowerLeft,
	[Token(Token = "0x40000A4")]
	LowerRight,
	[Token(Token = "0x40000A5")]
	TopLeft,
	[Token(Token = "0x40000A6")]
	TopRight
}
[Token(Token = "0x2000027")]
public enum MouseState
{
	[Token(Token = "0x40000A8")]
	None,
	[Token(Token = "0x40000A9")]
	LeftButtonDown,
	[Token(Token = "0x40000AA")]
	LeftButtonHeld,
	[Token(Token = "0x40000AB")]
	RightButtonDown,
	[Token(Token = "0x40000AC")]
	RightButtonHeld
}
[Token(Token = "0x2000028")]
public static class GUIHelpers
{
	[Token(Token = "0x40000AD")]
	public const float defaultLineHeight = 22f;

	[Token(Token = "0x600010D")]
	[Address(RVA = "0x19EA608", Offset = "0x19EA608", VA = "0x19EA608")]
	public static MouseState GetCurrentMouseState()
	{
		return default(MouseState);
	}

	[Token(Token = "0x600010E")]
	[Address(RVA = "0x19EA71C", Offset = "0x19EA71C", VA = "0x19EA71C")]
	public static Vector3 MouseToGUIPosition(Vector3 inputPosition)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600010F")]
	[Address(RVA = "0x19EA760", Offset = "0x19EA760", VA = "0x19EA760")]
	public static Vector3 GUIToMousePosition(Vector3 guiPosition)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000110")]
	[Address(RVA = "0x19EA7A4", Offset = "0x19EA7A4", VA = "0x19EA7A4")]
	public static float GetHeightOfOnePixelInWorldSpace(Camera camera, float depth)
	{
		return default(float);
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0x19EA948", Offset = "0x19EA948", VA = "0x19EA948")]
	public static GUIStyleState CopyGUIStyleState(GUIStyleState source)
	{
		return null;
	}

	[Token(Token = "0x6000112")]
	[Address(RVA = "0x19EAA48", Offset = "0x19EAA48", VA = "0x19EAA48")]
	public static int GetFontSizeFromFontNameSuffix(Font font)
	{
		return default(int);
	}
}
[Token(Token = "0x2000029")]
public struct AxisTripod
{
	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector3 right;

	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Vector3 up;

	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 forward;

	[Token(Token = "0x1700003C")]
	public Vector3 left
	{
		[Token(Token = "0x6000113")]
		[Address(RVA = "0xA7EDD0", Offset = "0xA7EDD0", VA = "0xA7EDD0")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000114")]
		[Address(RVA = "0xA7EDD8", Offset = "0xA7EDD8", VA = "0xA7EDD8")]
		set
		{
		}
	}

	[Token(Token = "0x1700003D")]
	public Vector3 down
	{
		[Token(Token = "0x6000115")]
		[Address(RVA = "0xA7EDE0", Offset = "0xA7EDE0", VA = "0xA7EDE0")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000116")]
		[Address(RVA = "0xA7EDE8", Offset = "0xA7EDE8", VA = "0xA7EDE8")]
		set
		{
		}
	}

	[Token(Token = "0x1700003E")]
	public Vector3 back
	{
		[Token(Token = "0x6000117")]
		[Address(RVA = "0xA7EDF0", Offset = "0xA7EDF0", VA = "0xA7EDF0")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000118")]
		[Address(RVA = "0xA7EDF8", Offset = "0xA7EDF8", VA = "0xA7EDF8")]
		set
		{
		}
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0x19D3710", Offset = "0x19D3710", VA = "0x19D3710")]
	public static AxisTripod FromForwardAndUpVectors(Vector3 forward, Vector3 up)
	{
		return default(AxisTripod);
	}

	[Token(Token = "0x600011A")]
	[Address(RVA = "0x19D38B4", Offset = "0x19D38B4", VA = "0x19D38B4")]
	public static AxisTripod FromQuaternion(Quaternion quat)
	{
		return default(AxisTripod);
	}
}
[Token(Token = "0x200002A")]
public class Interpolate
{
	[Token(Token = "0x20002A8")]
	public enum EaseType
	{
		[Token(Token = "0x4000D85")]
		Linear,
		[Token(Token = "0x4000D86")]
		EaseInQuad,
		[Token(Token = "0x4000D87")]
		EaseOutQuad,
		[Token(Token = "0x4000D88")]
		EaseInOutQuad,
		[Token(Token = "0x4000D89")]
		EaseInCubic,
		[Token(Token = "0x4000D8A")]
		EaseOutCubic,
		[Token(Token = "0x4000D8B")]
		EaseInOutCubic,
		[Token(Token = "0x4000D8C")]
		EaseInQuart,
		[Token(Token = "0x4000D8D")]
		EaseOutQuart,
		[Token(Token = "0x4000D8E")]
		EaseInOutQuart,
		[Token(Token = "0x4000D8F")]
		EaseInQuint,
		[Token(Token = "0x4000D90")]
		EaseOutQuint,
		[Token(Token = "0x4000D91")]
		EaseInOutQuint,
		[Token(Token = "0x4000D92")]
		EaseInSine,
		[Token(Token = "0x4000D93")]
		EaseOutSine,
		[Token(Token = "0x4000D94")]
		EaseInOutSine,
		[Token(Token = "0x4000D95")]
		EaseInExpo,
		[Token(Token = "0x4000D96")]
		EaseOutExpo,
		[Token(Token = "0x4000D97")]
		EaseInOutExpo,
		[Token(Token = "0x4000D98")]
		EaseInCirc,
		[Token(Token = "0x4000D99")]
		EaseOutCirc,
		[Token(Token = "0x4000D9A")]
		EaseInOutCirc
	}

	[Token(Token = "0x20002A9")]
	public delegate Vector3 ToVector3<T>(T v);

	[Token(Token = "0x20002AA")]
	public delegate float Function(float a, float b, float c, float d);

	[Token(Token = "0x20002AB")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A652C", Offset = "0x9A652C")]
	private sealed class <NewTimer>d__3 : IEnumerable<float>, IEnumerable, IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int <>l__initialThreadId;

		[Token(Token = "0x4000D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float duration;

		[Token(Token = "0x4000D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float <>3__duration;

		[Token(Token = "0x4000DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float <elapsedTime>5__2;

		[Token(Token = "0x17000234")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001505")]
			[Address(RVA = "0x19EE090", Offset = "0x19EE090", VA = "0x19EE090", Slot = "6")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000235")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001507")]
			[Address(RVA = "0x19EE100", Offset = "0x19EE100", VA = "0x19EE100", Slot = "9")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001502")]
		[Address(RVA = "0x19EBEA0", Offset = "0x19EBEA0", VA = "0x19EBEA0")]
		[DebuggerHidden]
		public <NewTimer>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x6001503")]
		[Address(RVA = "0x19EDFD0", Offset = "0x19EDFD0", VA = "0x19EDFD0", Slot = "7")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001504")]
		[Address(RVA = "0x19EDFD4", Offset = "0x19EDFD4", VA = "0x19EDFD4", Slot = "8")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001506")]
		[Address(RVA = "0x19EE098", Offset = "0x19EE098", VA = "0x19EE098", Slot = "10")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}

		[Token(Token = "0x6001508")]
		[Address(RVA = "0x19EE164", Offset = "0x19EE164", VA = "0x19EE164", Slot = "4")]
		[DebuggerHidden]
		private IEnumerator<float> System.Collections.Generic.IEnumerable<System.Single>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001509")]
		[Address(RVA = "0x19EE214", Offset = "0x19EE214", VA = "0x19EE214", Slot = "5")]
		[DebuggerHidden]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x20002AC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A653C", Offset = "0x9A653C")]
	private sealed class <NewCounter>d__6 : IEnumerable<float>, IEnumerable, IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int <>l__initialThreadId;

		[Token(Token = "0x4000DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int start;

		[Token(Token = "0x4000DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int <>3__start;

		[Token(Token = "0x4000DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int step;

		[Token(Token = "0x4000DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int <>3__step;

		[Token(Token = "0x4000DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int end;

		[Token(Token = "0x4000DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int <>3__end;

		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int <i>5__2;

		[Token(Token = "0x17000236")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600150D")]
			[Address(RVA = "0x19ED99C", Offset = "0x19ED99C", VA = "0x19ED99C", Slot = "6")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000237")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600150F")]
			[Address(RVA = "0x19EDA0C", Offset = "0x19EDA0C", VA = "0x19EDA0C", Slot = "9")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600150A")]
		[Address(RVA = "0x19EBF98", Offset = "0x19EBF98", VA = "0x19EBF98")]
		[DebuggerHidden]
		public <NewCounter>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x600150B")]
		[Address(RVA = "0x19ED934", Offset = "0x19ED934", VA = "0x19ED934", Slot = "7")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600150C")]
		[Address(RVA = "0x19ED938", Offset = "0x19ED938", VA = "0x19ED938", Slot = "8")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600150E")]
		[Address(RVA = "0x19ED9A4", Offset = "0x19ED9A4", VA = "0x19ED9A4", Slot = "10")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}

		[Token(Token = "0x6001510")]
		[Address(RVA = "0x19EDA70", Offset = "0x19EDA70", VA = "0x19EDA70", Slot = "4")]
		[DebuggerHidden]
		private IEnumerator<float> System.Collections.Generic.IEnumerable<System.Single>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001511")]
		[Address(RVA = "0x19EDB5C", Offset = "0x19EDB5C", VA = "0x19EDB5C", Slot = "5")]
		[DebuggerHidden]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x20002AD")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A654C", Offset = "0x9A654C")]
	private sealed class <NewEase>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 end;

		[Token(Token = "0x4000DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 start;

		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IEnumerable<float> driver;

		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Function ease;

		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float total;

		[Token(Token = "0x4000DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 <distance>5__2;

		[Token(Token = "0x4000DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private IEnumerator<float> <>7__wrap2;

		[Token(Token = "0x17000238")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001516")]
			[Address(RVA = "0x19EDF58", Offset = "0x19EDF58", VA = "0x19EDF58", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000239")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001518")]
			[Address(RVA = "0x19EDFC8", Offset = "0x19EDFC8", VA = "0x19EDFC8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001512")]
		[Address(RVA = "0x19EC1FC", Offset = "0x19EC1FC", VA = "0x19EC1FC")]
		[DebuggerHidden]
		public <NewEase>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6001513")]
		[Address(RVA = "0x19EDB60", Offset = "0x19EDB60", VA = "0x19EDB60", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001514")]
		[Address(RVA = "0x19EDC3C", Offset = "0x19EDC3C", VA = "0x19EDC3C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001515")]
		[Address(RVA = "0x19EDB7C", Offset = "0x19EDB7C", VA = "0x19EDB7C")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6001517")]
		[Address(RVA = "0x19EDF60", Offset = "0x19EDF60", VA = "0x19EDF60", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002AE")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A655C", Offset = "0x9A655C")]
	private sealed class <NewBezier>d__16<T> : IEnumerable<Vector3>, IEnumerable, IEnumerator<Vector3>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <>1__state;

		[Token(Token = "0x4000DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Vector3 <>2__current;

		[Token(Token = "0x4000DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <>l__initialThreadId;

		[Token(Token = "0x4000DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IList nodes;

		[Token(Token = "0x4000DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IList <>3__nodes;

		[Token(Token = "0x4000DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IEnumerable<float> steps;

		[Token(Token = "0x4000DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IEnumerable<float> <>3__steps;

		[Token(Token = "0x4000DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ToVector3<T> toVector3;

		[Token(Token = "0x4000DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ToVector3<T> <>3__toVector3;

		[Token(Token = "0x4000DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Function ease;

		[Token(Token = "0x4000DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Function <>3__ease;

		[Token(Token = "0x4000DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private float maxStep;

		[Token(Token = "0x4000DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float <>3__maxStep;

		[Token(Token = "0x4000DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Vector3[] <points>5__2;

		[Token(Token = "0x4000DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IEnumerator<float> <>7__wrap2;

		[Token(Token = "0x1700023A")]
		private Vector3 System.Collections.Generic.IEnumerator<UnityEngine.Vector3>.Current
		{
			[Token(Token = "0x600151D")]
			[DebuggerHidden]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700023B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600151F")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001519")]
		[DebuggerHidden]
		public <NewBezier>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x600151A")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600151B")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600151C")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x600151E")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}

		[Token(Token = "0x6001520")]
		[DebuggerHidden]
		private IEnumerator<Vector3> System.Collections.Generic.IEnumerable<UnityEngine.Vector3>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001521")]
		[DebuggerHidden]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x20002AF")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A656C", Offset = "0x9A656C")]
	private sealed class <NewCatmullRom>d__20<T> : IEnumerable<Vector3>, IEnumerable, IEnumerator<Vector3>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <>1__state;

		[Token(Token = "0x4000DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Vector3 <>2__current;

		[Token(Token = "0x4000DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <>l__initialThreadId;

		[Token(Token = "0x4000DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IList nodes;

		[Token(Token = "0x4000DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IList <>3__nodes;

		[Token(Token = "0x4000DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ToVector3<T> toVector3;

		[Token(Token = "0x4000DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ToVector3<T> <>3__toVector3;

		[Token(Token = "0x4000DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool loop;

		[Token(Token = "0x4000DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool <>3__loop;

		[Token(Token = "0x4000DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int slices;

		[Token(Token = "0x4000DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int <>3__slices;

		[Token(Token = "0x4000DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <last>5__2;

		[Token(Token = "0x4000DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <current>5__3;

		[Token(Token = "0x4000DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <previous>5__4;

		[Token(Token = "0x4000DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <start>5__5;

		[Token(Token = "0x4000DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <end>5__6;

		[Token(Token = "0x4000DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <next>5__7;

		[Token(Token = "0x4000DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <stepCount>5__8;

		[Token(Token = "0x4000DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <step>5__9;

		[Token(Token = "0x1700023C")]
		private Vector3 System.Collections.Generic.IEnumerator<UnityEngine.Vector3>.Current
		{
			[Token(Token = "0x6001525")]
			[DebuggerHidden]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700023D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001527")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001522")]
		[DebuggerHidden]
		public <NewCatmullRom>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x6001523")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001524")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001526")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}

		[Token(Token = "0x6001528")]
		[DebuggerHidden]
		private IEnumerator<Vector3> System.Collections.Generic.IEnumerable<UnityEngine.Vector3>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001529")]
		[DebuggerHidden]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x600011B")]
	[Address(RVA = "0x19EBDE4", Offset = "0x19EBDE4", VA = "0x19EBDE4")]
	private static Vector3 Identity(Vector3 v)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600011C")]
	[Address(RVA = "0x19EBDE8", Offset = "0x19EBDE8", VA = "0x19EBDE8")]
	private static Vector3 TransformDotPosition(Transform t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600011D")]
	[Address(RVA = "0x19EBE14", Offset = "0x19EBE14", VA = "0x19EBE14")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x9A8AE4", Offset = "0x9A8AE4")]
	private static IEnumerable<float> NewTimer(float duration)
	{
		return null;
	}

	[Token(Token = "0x600011E")]
	[Address(RVA = "0x19EBED8", Offset = "0x19EBED8", VA = "0x19EBED8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x9A8B48", Offset = "0x9A8B48")]
	private static IEnumerable<float> NewCounter(int start, int end, int step)
	{
		return null;
	}

	[Token(Token = "0x600011F")]
	[Address(RVA = "0x19EBFD0", Offset = "0x19EBFD0", VA = "0x19EBFD0")]
	public static IEnumerator NewEase(Function ease, Vector3 start, Vector3 end, float duration)
	{
		return null;
	}

	[Token(Token = "0x6000120")]
	[Address(RVA = "0x19EC178", Offset = "0x19EC178", VA = "0x19EC178")]
	public static IEnumerator NewEase(Function ease, Vector3 start, Vector3 end, int slices)
	{
		return null;
	}

	[Token(Token = "0x6000121")]
	[Address(RVA = "0x19EC054", Offset = "0x19EC054", VA = "0x19EC054")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x9A8BAC", Offset = "0x9A8BAC")]
	private static IEnumerator NewEase(Function ease, Vector3 start, Vector3 end, float total, IEnumerable<float> driver)
	{
		return null;
	}

	[Token(Token = "0x6000122")]
	[Address(RVA = "0x19EC228", Offset = "0x19EC228", VA = "0x19EC228")]
	private static Vector3 Ease(Function ease, Vector3 start, Vector3 distance, float elapsedTime, float duration)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000123")]
	[Address(RVA = "0x19EC348", Offset = "0x19EC348", VA = "0x19EC348")]
	public static Function Ease(EaseType type)
	{
		return null;
	}

	[Token(Token = "0x6000124")]
	[Address(RVA = "0x19EC62C", Offset = "0x19EC62C", VA = "0x19EC62C")]
	public static IEnumerable<Vector3> NewBezier(Function ease, Transform[] nodes, float duration)
	{
		return null;
	}

	[Token(Token = "0x6000125")]
	[Address(RVA = "0x19EC6E8", Offset = "0x19EC6E8", VA = "0x19EC6E8")]
	public static IEnumerable<Vector3> NewBezier(Function ease, Transform[] nodes, int slices)
	{
		return null;
	}

	[Token(Token = "0x6000126")]
	[Address(RVA = "0x19EC7B0", Offset = "0x19EC7B0", VA = "0x19EC7B0")]
	public static IEnumerable<Vector3> NewBezier(Function ease, Vector3[] points, float duration)
	{
		return null;
	}

	[Token(Token = "0x6000127")]
	[Address(RVA = "0x19EC86C", Offset = "0x19EC86C", VA = "0x19EC86C")]
	public static IEnumerable<Vector3> NewBezier(Function ease, Vector3[] points, int slices)
	{
		return null;
	}

	[Token(Token = "0x6000128")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x9A8C10", Offset = "0x9A8C10")]
	private static IEnumerable<Vector3> NewBezier<T>(Function ease, IList nodes, ToVector3<T> toVector3, float maxStep, IEnumerable<float> steps)
	{
		return null;
	}

	[Token(Token = "0x6000129")]
	[Address(RVA = "0x19EC934", Offset = "0x19EC934", VA = "0x19EC934")]
	private static Vector3 Bezier(Function ease, Vector3[] points, float elapsedTime, float duration)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0x19ECC08", Offset = "0x19ECC08", VA = "0x19ECC08")]
	public static IEnumerable<Vector3> NewCatmullRom(Transform[] nodes, int slices, bool loop)
	{
		return null;
	}

	[Token(Token = "0x600012B")]
	[Address(RVA = "0x19ECCA8", Offset = "0x19ECCA8", VA = "0x19ECCA8")]
	public static IEnumerable<Vector3> NewCatmullRom(Vector3[] points, int slices, bool loop)
	{
		return null;
	}

	[Token(Token = "0x600012C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x9A8C74", Offset = "0x9A8C74")]
	private static IEnumerable<Vector3> NewCatmullRom<T>(IList nodes, ToVector3<T> toVector3, int slices, bool loop)
	{
		return null;
	}

	[Token(Token = "0x600012D")]
	[Address(RVA = "0x19ECD48", Offset = "0x19ECD48", VA = "0x19ECD48")]
	public static Vector3 CatmullRom(Vector3 previous, Vector3 start, Vector3 end, Vector3 next, float elapsedTime, float duration)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600012E")]
	[Address(RVA = "0x19ECF30", Offset = "0x19ECF30", VA = "0x19ECF30")]
	private static float Linear(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x600012F")]
	[Address(RVA = "0x19ECF48", Offset = "0x19ECF48", VA = "0x19ECF48")]
	private static float EaseInQuad(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0x19ECF68", Offset = "0x19ECF68", VA = "0x19ECF68")]
	private static float EaseOutQuad(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000131")]
	[Address(RVA = "0x19ECF90", Offset = "0x19ECF90", VA = "0x19ECF90")]
	private static float EaseInOutQuad(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0x19ECFF4", Offset = "0x19ECFF4", VA = "0x19ECFF4")]
	private static float EaseInCubic(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000133")]
	[Address(RVA = "0x19ED018", Offset = "0x19ED018", VA = "0x19ED018")]
	private static float EaseOutCubic(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0x19ED04C", Offset = "0x19ED04C", VA = "0x19ED04C")]
	private static float EaseInOutCubic(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0x19ED0B0", Offset = "0x19ED0B0", VA = "0x19ED0B0")]
	private static float EaseInQuart(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000136")]
	[Address(RVA = "0x19ED0D8", Offset = "0x19ED0D8", VA = "0x19ED0D8")]
	private static float EaseOutQuart(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000137")]
	[Address(RVA = "0x19ED10C", Offset = "0x19ED10C", VA = "0x19ED10C")]
	private static float EaseInOutQuart(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0x19ED178", Offset = "0x19ED178", VA = "0x19ED178")]
	private static float EaseInQuint(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000139")]
	[Address(RVA = "0x19ED1A4", Offset = "0x19ED1A4", VA = "0x19ED1A4")]
	private static float EaseOutQuint(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x600013A")]
	[Address(RVA = "0x19ED1E0", Offset = "0x19ED1E0", VA = "0x19ED1E0")]
	private static float EaseInOutQuint(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x600013B")]
	[Address(RVA = "0x19ED254", Offset = "0x19ED254", VA = "0x19ED254")]
	private static float EaseInSine(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x600013C")]
	[Address(RVA = "0x19ED2F8", Offset = "0x19ED2F8", VA = "0x19ED2F8")]
	private static float EaseOutSine(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x600013D")]
	[Address(RVA = "0x19ED398", Offset = "0x19ED398", VA = "0x19ED398")]
	private static float EaseInOutSine(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x600013E")]
	[Address(RVA = "0x19ED448", Offset = "0x19ED448", VA = "0x19ED448")]
	private static float EaseInExpo(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x600013F")]
	[Address(RVA = "0x19ED4EC", Offset = "0x19ED4EC", VA = "0x19ED4EC")]
	private static float EaseOutExpo(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000140")]
	[Address(RVA = "0x19ED590", Offset = "0x19ED590", VA = "0x19ED590")]
	private static float EaseInOutExpo(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000141")]
	[Address(RVA = "0x19ED6A4", Offset = "0x19ED6A4", VA = "0x19ED6A4")]
	private static float EaseInCirc(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000142")]
	[Address(RVA = "0x19ED75C", Offset = "0x19ED75C", VA = "0x19ED75C")]
	private static float EaseOutCirc(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000143")]
	[Address(RVA = "0x19ED818", Offset = "0x19ED818", VA = "0x19ED818")]
	private static float EaseInOutCirc(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000144")]
	[Address(RVA = "0x19ED92C", Offset = "0x19ED92C", VA = "0x19ED92C")]
	public Interpolate()
	{
	}
}
[Token(Token = "0x200002B")]
public static class MatrixHelpers
{
	[Token(Token = "0x6000145")]
	[Address(RVA = "0x15D9B20", Offset = "0x15D9B20", VA = "0x15D9B20")]
	public static Vector3 GetPosition(Matrix4x4 matrix)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000146")]
	[Address(RVA = "0x15D9B90", Offset = "0x15D9B90", VA = "0x15D9B90")]
	public static Quaternion GetRotation(Matrix4x4 matrix)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0x15D9C84", Offset = "0x15D9C84", VA = "0x15D9C84")]
	public static Vector3 GetScale(Matrix4x4 matrix)
	{
		return default(Vector3);
	}
}
[Token(Token = "0x200002C")]
public enum VectorComparisonMode
{
	[Token(Token = "0x40000B2")]
	Dot,
	[Token(Token = "0x40000B3")]
	Angle
}
[Token(Token = "0x200002D")]
public enum VectorInterpolationMode
{
	[Token(Token = "0x40000B5")]
	Lerp,
	[Token(Token = "0x40000B6")]
	Slerp
}
[Token(Token = "0x200002E")]
public enum AxisAlignmentMode
{
	[Token(Token = "0x40000B8")]
	None,
	[Token(Token = "0x40000B9")]
	Cardinal
}
[Token(Token = "0x200002F")]
public static class VectorHelpers
{
	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly Vector3[] cardinalAxes;

	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static float intersectionDistance;

	[Token(Token = "0x6000148")]
	[Address(RVA = "0x21DE29C", Offset = "0x21DE29C", VA = "0x21DE29C")]
	public static Vector3 FindNearestCardinalAxis(Vector3 testVector)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000149")]
	[Address(RVA = "0x21DE48C", Offset = "0x21DE48C", VA = "0x21DE48C")]
	public static Vector3 MirrorPointAcrossPlane(Vector3 p, Vector3 n)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600014A")]
	[Address(RVA = "0x21DE5A4", Offset = "0x21DE5A4", VA = "0x21DE5A4")]
	public static bool GetIntersectionOnPlane(Vector3 origin, Vector3 direction, Plane p, out Vector3 intersectionPoint)
	{
		return default(bool);
	}

	[Token(Token = "0x600014B")]
	[Address(RVA = "0x21DE6B0", Offset = "0x21DE6B0", VA = "0x21DE6B0")]
	public static bool GetIntersectionOnPlane(Ray ray, Plane p, out Vector3 intersectionPoint)
	{
		return default(bool);
	}

	[Token(Token = "0x600014C")]
	[Address(RVA = "0x21DE790", Offset = "0x21DE790", VA = "0x21DE790")]
	public static Vector3 GetProjectionOnPlane(Vector3 v, Plane p)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600014D")]
	[Address(RVA = "0x21DE918", Offset = "0x21DE918", VA = "0x21DE918")]
	public static float GetMinValue(Vector2 v)
	{
		return default(float);
	}

	[Token(Token = "0x600014E")]
	[Address(RVA = "0x21DE990", Offset = "0x21DE990", VA = "0x21DE990")]
	public static float GetMinValue(Vector3 v)
	{
		return default(float);
	}

	[Token(Token = "0x600014F")]
	[Address(RVA = "0x21DEA8C", Offset = "0x21DEA8C", VA = "0x21DEA8C")]
	public static float GetMinValue(Vector4 v)
	{
		return default(float);
	}

	[Token(Token = "0x6000150")]
	[Address(RVA = "0x21DEBAC", Offset = "0x21DEBAC", VA = "0x21DEBAC")]
	public static float GetMaxValue(Vector2 v)
	{
		return default(float);
	}

	[Token(Token = "0x6000151")]
	[Address(RVA = "0x21DEC24", Offset = "0x21DEC24", VA = "0x21DEC24")]
	public static float GetMaxValue(Vector3 v)
	{
		return default(float);
	}

	[Token(Token = "0x6000152")]
	[Address(RVA = "0x21DED20", Offset = "0x21DED20", VA = "0x21DED20")]
	public static float GetMaxValue(Vector4 v)
	{
		return default(float);
	}

	[Token(Token = "0x6000153")]
	[Address(RVA = "0x21DEE40", Offset = "0x21DEE40", VA = "0x21DEE40")]
	public static AxisTripod GetAxisTripodFromUpVector(Vector3 up)
	{
		return default(AxisTripod);
	}
}
[Serializable]
[Token(Token = "0x2000030")]
public class AngularLimitDistribution
{
	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float xMin;

	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float xMax;

	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float yMax;

	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float zMax;

	[Token(Token = "0x40000C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve curve;

	[Token(Token = "0x6000155")]
	[Address(RVA = "0x19D0FF8", Offset = "0x19D0FF8", VA = "0x19D0FF8")]
	public AngularLimitDistribution()
	{
	}

	[Token(Token = "0x6000156")]
	[Address(RVA = "0x19D1038", Offset = "0x19D1038", VA = "0x19D1038")]
	public AngularLimitDistribution(float xMin, float xMax, float yMax, float zMax)
	{
	}

	[Token(Token = "0x6000157")]
	[Address(RVA = "0x19D10CC", Offset = "0x19D10CC", VA = "0x19D10CC")]
	public void Evaluate(float t, out float xMin, out float xMax, out float yMax, out float zMax)
	{
	}
}
[Token(Token = "0x2000031")]
public class CollisionBroadcaster : MonoBehaviour
{
	[Token(Token = "0x40000C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject target;

	[Token(Token = "0x6000158")]
	[Address(RVA = "0x19E84C8", Offset = "0x19E84C8", VA = "0x19E84C8")]
	public void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000159")]
	[Address(RVA = "0x19E8574", Offset = "0x19E8574", VA = "0x19E8574")]
	public void OnCollisionExit(Collision collision)
	{
	}

	[Token(Token = "0x600015A")]
	[Address(RVA = "0x19E8528", Offset = "0x19E8528", VA = "0x19E8528")]
	private void BroadcastToTarget(Collision collision, string msg)
	{
	}

	[Token(Token = "0x600015B")]
	[Address(RVA = "0x19E85D4", Offset = "0x19E85D4", VA = "0x19E85D4")]
	public CollisionBroadcaster()
	{
	}
}
[Token(Token = "0x2000032")]
public class CylinderProperties
{
	[Token(Token = "0x40000C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float height;

	[Token(Token = "0x40000C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float radius;

	[Token(Token = "0x600015C")]
	[Address(RVA = "0x19E9FA4", Offset = "0x19E9FA4", VA = "0x19E9FA4")]
	public CylinderProperties()
	{
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0x19E9FAC", Offset = "0x19E9FAC", VA = "0x19E9FAC")]
	public CylinderProperties(float height, float radius)
	{
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0x19E9FE4", Offset = "0x19E9FE4", VA = "0x19E9FE4")]
	public CylinderProperties(CylinderProperties properties)
	{
	}
}
[Token(Token = "0x2000033")]
public class JointAngularLimits
{
	[Token(Token = "0x40000C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float xMin;

	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float xMax;

	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float yMax;

	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float zMax;

	[Token(Token = "0x600015F")]
	[Address(RVA = "0x15C78F8", Offset = "0x15C78F8", VA = "0x15C78F8")]
	public JointAngularLimits()
	{
	}

	[Token(Token = "0x6000160")]
	[Address(RVA = "0x15C7900", Offset = "0x15C7900", VA = "0x15C7900")]
	public JointAngularLimits(JointAngularLimits limits)
	{
	}

	[Token(Token = "0x6000161")]
	[Address(RVA = "0x15C7994", Offset = "0x15C7994", VA = "0x15C7994")]
	public JointAngularLimits(CharacterJoint joint)
	{
	}

	[Token(Token = "0x6000162")]
	[Address(RVA = "0x15C7AB0", Offset = "0x15C7AB0", VA = "0x15C7AB0")]
	public JointAngularLimits(ConfigurableJoint joint)
	{
	}

	[Token(Token = "0x6000163")]
	[Address(RVA = "0x15C7BCC", Offset = "0x15C7BCC", VA = "0x15C7BCC")]
	public void ApplyToJoint(CharacterJoint joint)
	{
	}

	[Token(Token = "0x6000164")]
	[Address(RVA = "0x15C7DC4", Offset = "0x15C7DC4", VA = "0x15C7DC4")]
	public void ApplyToJoint(ConfigurableJoint joint)
	{
	}
}
[Token(Token = "0x2000034")]
public static class JointHelpers
{
	[Token(Token = "0x20002B0")]
	public enum WarningMode
	{
		[Token(Token = "0x4000DD7")]
		Default,
		[Token(Token = "0x4000DD8")]
		Silent
	}

	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Vector3 workingAxis;

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static Vector3 workingSecondaryAxis;

	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static Vector3 workingTertiaryAxis;

	[Token(Token = "0x6000165")]
	[Address(RVA = "0x15C7FBC", Offset = "0x15C7FBC", VA = "0x15C7FBC")]
	public static void SetAllTranslationMotion(ConfigurableJoint joint, ConfigurableJointMotion motion)
	{
	}

	[Token(Token = "0x6000166")]
	[Address(RVA = "0x15C8044", Offset = "0x15C8044", VA = "0x15C8044")]
	public static void SetAllAngularMotion(ConfigurableJoint joint, ConfigurableJointMotion motion)
	{
	}

	[Token(Token = "0x6000167")]
	public static Dictionary<T, Matrix4x4> GetBindposesOfJointsInScene<T>(WarningMode warningMode = WarningMode.Silent) where T : Joint
	{
		return null;
	}

	[Token(Token = "0x6000168")]
	[Address(RVA = "0x15C80CC", Offset = "0x15C80CC", VA = "0x15C80CC")]
	private static Matrix4x4 GetParentWorldMatrix(Joint joint)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x6000169")]
	[Address(RVA = "0x15C83D4", Offset = "0x15C83D4", VA = "0x15C83D4")]
	public static Matrix4x4 GetJointLinearWorldMatrix(Joint joint, Matrix4x4 bindPose)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x600016A")]
	[Address(RVA = "0x15C8610", Offset = "0x15C8610", VA = "0x15C8610")]
	public static Matrix4x4 GetJointAngularWorldMatrix(Joint joint, Matrix4x4 bindPose)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x600016B")]
	[Address(RVA = "0x15C884C", Offset = "0x15C884C", VA = "0x15C884C")]
	public static Matrix4x4 GetBindPoseLocalMatrix(Joint joint, WarningMode warningMode = WarningMode.Default)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x600016C")]
	[Address(RVA = "0x15C8CB4", Offset = "0x15C8CB4", VA = "0x15C8CB4")]
	public static Quaternion GetJointFrameOffset(CharacterJoint j)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x600016D")]
	[Address(RVA = "0x15C8E94", Offset = "0x15C8E94", VA = "0x15C8E94")]
	public static Quaternion GetJointFrameOffset(ConfigurableJoint j)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x600016E")]
	[Address(RVA = "0x15C8D8C", Offset = "0x15C8D8C", VA = "0x15C8D8C")]
	public static Quaternion GetJointFrameOffset(Vector3 axis, Vector3 secondaryAxis)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x600016F")]
	[Address(RVA = "0x15C90AC", Offset = "0x15C90AC", VA = "0x15C90AC")]
	public static Vector3[] GetActualCharacterJointAxes(CharacterJoint j)
	{
		return null;
	}

	[Token(Token = "0x6000170")]
	[Address(RVA = "0x15C922C", Offset = "0x15C922C", VA = "0x15C922C")]
	public static Vector3[] GetActualConfigurableJointAxes(ConfigurableJoint j)
	{
		return null;
	}

	[Token(Token = "0x6000171")]
	[Address(RVA = "0x15C8F6C", Offset = "0x15C8F6C", VA = "0x15C8F6C")]
	public static void GetActualConfigurableJointAxes(Vector3 axis, Vector3 secondaryAxis, out Vector3 actualAxis, out Vector3 actualSecondaryAxis, out Vector3 actualTertiaryAxis)
	{
	}

	[Token(Token = "0x6000172")]
	[Address(RVA = "0x15C93AC", Offset = "0x15C93AC", VA = "0x15C93AC")]
	public static void TransformTargetRotation(ConfigurableJoint joint, Quaternion offset)
	{
	}

	[Token(Token = "0x6000173")]
	[Address(RVA = "0x15C9448", Offset = "0x15C9448", VA = "0x15C9448")]
	public static void TransformTargetRotation(ConfigurableJoint joint, Quaternion jointFrame, Quaternion offset)
	{
	}

	[Token(Token = "0x6000174")]
	[Address(RVA = "0x15C9564", Offset = "0x15C9564", VA = "0x15C9564")]
	public static void SetJointTargetRotationUsingLocalRotation(ConfigurableJoint joint, Quaternion bindPose, Quaternion targetLocalRotation)
	{
	}

	[Token(Token = "0x6000175")]
	[Address(RVA = "0x15C9644", Offset = "0x15C9644", VA = "0x15C9644")]
	public static void SetJointTargetRotationUsingLocalRotation(ConfigurableJoint joint, Quaternion bindPose, Quaternion jointFrame, Quaternion targetLocalRotation)
	{
	}
}
[Token(Token = "0x2000035")]
public static class TransformHelpers
{
	[Token(Token = "0x20002B1")]
	public enum SearchNamespacesMode
	{
		[Token(Token = "0x4000DDA")]
		Ignore,
		[Token(Token = "0x4000DDB")]
		Respect
	}

	[Token(Token = "0x40000CB")]
	public const char defaultNamespaceDelimiter = ':';

	[Token(Token = "0x6000177")]
	[Address(RVA = "0x19F6280", Offset = "0x19F6280", VA = "0x19F6280")]
	public static List<Transform> CreateDuplicateHierarchy(Transform root, string suffix = " (Duplicate)")
	{
		return null;
	}

	[Token(Token = "0x6000178")]
	[Address(RVA = "0x19F6830", Offset = "0x19F6830", VA = "0x19F6830")]
	public static Regex GetTransformNameMatch(string transformName, char namespaceDelimiter = ':')
	{
		return null;
	}

	[Token(Token = "0x6000179")]
	[Address(RVA = "0x19F6904", Offset = "0x19F6904", VA = "0x19F6904")]
	public static Transform GetTransformInHierarchy(string transformName, Transform root, SearchNamespacesMode searchMode = SearchNamespacesMode.Respect, char namespaceDelimiter = ':')
	{
		return null;
	}

	[Token(Token = "0x600017A")]
	[Address(RVA = "0x19F6988", Offset = "0x19F6988", VA = "0x19F6988")]
	public static Transform GetTransformInHierarchy(string transformName, Transform[] hierarchy, SearchNamespacesMode searchMode = SearchNamespacesMode.Respect, char namespaceDelimiter = ':')
	{
		return null;
	}

	[Token(Token = "0x600017B")]
	[Address(RVA = "0x19F6A54", Offset = "0x19F6A54", VA = "0x19F6A54")]
	public static void ClearNamespace(Transform transform, char namespaceDelimiter = ':')
	{
	}

	[Token(Token = "0x600017C")]
	[Address(RVA = "0x19F6B24", Offset = "0x19F6B24", VA = "0x19F6B24")]
	public static void ClearNamespace(UnityEngine.Component[] hierarchy, char namespaceDelimiter = ':')
	{
	}

	[Token(Token = "0x600017D")]
	[Address(RVA = "0x19F6C48", Offset = "0x19F6C48", VA = "0x19F6C48")]
	public static void SetNamespace(Transform transform, string namespaceString, char namespaceDelimiter = ':')
	{
	}

	[Token(Token = "0x600017E")]
	[Address(RVA = "0x19F6D24", Offset = "0x19F6D24", VA = "0x19F6D24")]
	public static void SetNamespace(UnityEngine.Component[] hierarchy, string namespaceString, char namespaceDelimiter = ':')
	{
	}
}
[Token(Token = "0x2000036")]
public static class ReflectionX
{
	[Token(Token = "0x600017F")]
	public static T[] GetCustomAttributes<T>(this ICustomAttributeProvider provider, bool inherit = false) where T : Attribute
	{
		return null;
	}

	[Token(Token = "0x6000180")]
	public static T GetFieldValue<T>(object provider, string fieldName)
	{
		return (T)null;
	}

	[Token(Token = "0x6000181")]
	public static T GetFieldValue<T>(object provider, string fieldName, BindingFlags bindingAttr)
	{
		return (T)null;
	}

	[Token(Token = "0x6000182")]
	public static T GetPropertyValue<T>(object provider, string propertyName, [Optional] object[] index)
	{
		return (T)null;
	}

	[Token(Token = "0x6000183")]
	public static T GetPropertyValue<T>(object provider, string propertyName, BindingFlags bindingAttr, [Optional] object[] index)
	{
		return (T)null;
	}
}
[Token(Token = "0x2000037")]
public static class StringHelpers
{
	[Token(Token = "0x6000184")]
	[Address(RVA = "0x19F5B7C", Offset = "0x19F5B7C", VA = "0x19F5B7C")]
	public static string CamelCaseToWords(string camelCase)
	{
		return null;
	}

	[Token(Token = "0x6000185")]
	[Address(RVA = "0x19F5C90", Offset = "0x19F5C90", VA = "0x19F5C90")]
	public static string FloatToTimeString(float time)
	{
		return null;
	}

	[Token(Token = "0x6000186")]
	[Address(RVA = "0x19F5D78", Offset = "0x19F5D78", VA = "0x19F5D78")]
	public static string MetersToFeetInches(float meters)
	{
		return null;
	}

	[Token(Token = "0x6000187")]
	[Address(RVA = "0x19F5E48", Offset = "0x19F5E48", VA = "0x19F5E48")]
	public static string Wrap(string inString, int atColumn)
	{
		return null;
	}
}
[Token(Token = "0x2000038")]
public struct UnityVersion
{
	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A78A8", Offset = "0x9A78A8")]
	private int <majorVersion>k__BackingField;

	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A78B8", Offset = "0x9A78B8")]
	private int <minorVersion>k__BackingField;

	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A78C8", Offset = "0x9A78C8")]
	private int <maintenanceVersion>k__BackingField;

	[Token(Token = "0x1700003F")]
	public static UnityVersion current
	{
		[Token(Token = "0x6000188")]
		[Address(RVA = "0x21DDCF0", Offset = "0x21DDCF0", VA = "0x21DDCF0")]
		get
		{
			return default(UnityVersion);
		}
	}

	[Token(Token = "0x17000040")]
	public int majorVersion
	{
		[Token(Token = "0x6000189")]
		[Address(RVA = "0xA8BFF4", Offset = "0xA8BFF4", VA = "0xA8BFF4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8CE8", Offset = "0x9A8CE8")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600018A")]
		[Address(RVA = "0xA8BFFC", Offset = "0xA8BFFC", VA = "0xA8BFFC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8CF8", Offset = "0x9A8CF8")]
		private set
		{
		}
	}

	[Token(Token = "0x17000041")]
	public int minorVersion
	{
		[Token(Token = "0x600018B")]
		[Address(RVA = "0xA8C004", Offset = "0xA8C004", VA = "0xA8C004")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8D08", Offset = "0x9A8D08")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600018C")]
		[Address(RVA = "0xA8C00C", Offset = "0xA8C00C", VA = "0xA8C00C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8D18", Offset = "0x9A8D18")]
		private set
		{
		}
	}

	[Token(Token = "0x17000042")]
	public int maintenanceVersion
	{
		[Token(Token = "0x600018D")]
		[Address(RVA = "0xA8C014", Offset = "0xA8C014", VA = "0xA8C014")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8D28", Offset = "0x9A8D28")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600018E")]
		[Address(RVA = "0xA8C01C", Offset = "0xA8C01C", VA = "0xA8C01C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8D38", Offset = "0x9A8D38")]
		private set
		{
		}
	}

	[Token(Token = "0x600018F")]
	[Address(RVA = "0xA8C024", Offset = "0xA8C024", VA = "0xA8C024")]
	public UnityVersion(int major, int minor, int maintenance)
	{
	}

	[Token(Token = "0x6000190")]
	[Address(RVA = "0x21DDED4", Offset = "0x21DDED4", VA = "0x21DDED4")]
	public static bool operator <(UnityVersion v1, UnityVersion v2)
	{
		return default(bool);
	}

	[Token(Token = "0x6000191")]
	[Address(RVA = "0x21DDF84", Offset = "0x21DDF84", VA = "0x21DDF84")]
	public static bool operator >(UnityVersion v1, UnityVersion v2)
	{
		return default(bool);
	}

	[Token(Token = "0x6000192")]
	[Address(RVA = "0x21DDFC0", Offset = "0x21DDFC0", VA = "0x21DDFC0")]
	public static bool operator ==(UnityVersion v1, UnityVersion v2)
	{
		return default(bool);
	}

	[Token(Token = "0x6000193")]
	[Address(RVA = "0x21DDFFC", Offset = "0x21DDFFC", VA = "0x21DDFFC")]
	public static bool operator !=(UnityVersion v1, UnityVersion v2)
	{
		return default(bool);
	}

	[Token(Token = "0x6000194")]
	[Address(RVA = "0x21DE038", Offset = "0x21DE038", VA = "0x21DE038")]
	public static bool operator <=(UnityVersion v1, UnityVersion v2)
	{
		return default(bool);
	}

	[Token(Token = "0x6000195")]
	[Address(RVA = "0x21DE074", Offset = "0x21DE074", VA = "0x21DE074")]
	public static bool operator >=(UnityVersion v1, UnityVersion v2)
	{
		return default(bool);
	}

	[Token(Token = "0x6000196")]
	[Address(RVA = "0xA8C030", Offset = "0xA8C030", VA = "0xA8C030", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x6000197")]
	[Address(RVA = "0xA8C038", Offset = "0xA8C038", VA = "0xA8C038", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}

	[Token(Token = "0x6000198")]
	[Address(RVA = "0xA8C040", Offset = "0xA8C040", VA = "0xA8C040")]
	public int CompareTo(UnityVersion other)
	{
		return default(int);
	}

	[Token(Token = "0x6000199")]
	[Address(RVA = "0xA8C04C", Offset = "0xA8C04C", VA = "0xA8C04C", Slot = "3")]
	public override string ToString()
	{
		return null;
	}
}
[Serializable]
[Token(Token = "0x2000039")]
public struct ColorGradient
{
	[Token(Token = "0x20002B2")]
	public enum InterpolationSpace
	{
		[Token(Token = "0x4000DDD")]
		RGB,
		[Token(Token = "0x4000DDE")]
		HSV
	}

	[Token(Token = "0x40000CF")]
	private const InterpolationSpace defaultInterpolation = InterpolationSpace.RGB;

	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Color minColor;

	[Token(Token = "0x40000D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Color maxColor;

	[Token(Token = "0x40000D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public InterpolationSpace interpolationSpace;

	[Token(Token = "0x600019A")]
	[Address(RVA = "0xA7EE00", Offset = "0xA7EE00", VA = "0xA7EE00")]
	public ColorGradient(Color minColor, Color maxColor)
	{
	}

	[Token(Token = "0x600019B")]
	[Address(RVA = "0xA7EE18", Offset = "0xA7EE18", VA = "0xA7EE18")]
	public ColorGradient(Color minColor, Color maxColor, InterpolationSpace interpolationSpace)
	{
	}

	[Token(Token = "0x600019C")]
	[Address(RVA = "0xA7EE30", Offset = "0xA7EE30", VA = "0xA7EE30")]
	public Color Evaluate(float t)
	{
		return default(Color);
	}

	[Token(Token = "0x600019D")]
	[Address(RVA = "0xA7EE38", Offset = "0xA7EE38", VA = "0xA7EE38", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x600019E")]
	[Address(RVA = "0xA7EE40", Offset = "0xA7EE40", VA = "0xA7EE40", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}

	[Token(Token = "0x600019F")]
	[Address(RVA = "0x19E89BC", Offset = "0x19E89BC", VA = "0x19E89BC")]
	public static bool operator ==(ColorGradient cg1, ColorGradient cg2)
	{
		return default(bool);
	}

	[Token(Token = "0x60001A0")]
	[Address(RVA = "0x19E8A44", Offset = "0x19E8A44", VA = "0x19E8A44")]
	public static bool operator !=(ColorGradient cg1, ColorGradient cg2)
	{
		return default(bool);
	}
}
[Serializable]
[Token(Token = "0x200003A")]
public class ColorHSV
{
	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float h;

	[Token(Token = "0x40000D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float s;

	[Token(Token = "0x40000D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float v;

	[Token(Token = "0x40000D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float a;

	[Token(Token = "0x60001A1")]
	[Address(RVA = "0x19E8AB0", Offset = "0x19E8AB0", VA = "0x19E8AB0")]
	public ColorHSV(float h, float s, float v)
	{
	}

	[Token(Token = "0x60001A2")]
	[Address(RVA = "0x19E8B60", Offset = "0x19E8B60", VA = "0x19E8B60")]
	public ColorHSV(float h, float s, float v, float a)
	{
	}

	[Token(Token = "0x60001A3")]
	[Address(RVA = "0x19E8C0C", Offset = "0x19E8C0C", VA = "0x19E8C0C")]
	public ColorHSV(Color color)
	{
	}

	[Token(Token = "0x60001A4")]
	[Address(RVA = "0x19E8D70", Offset = "0x19E8D70", VA = "0x19E8D70")]
	public Color ToColor()
	{
		return default(Color);
	}

	[Token(Token = "0x60001A5")]
	[Address(RVA = "0x19E8F04", Offset = "0x19E8F04", VA = "0x19E8F04", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x60001A6")]
	[Address(RVA = "0x19E911C", Offset = "0x19E911C", VA = "0x19E911C")]
	private static ColorHSV Lerp(ColorHSV color1, ColorHSV color2, float t)
	{
		return null;
	}

	[Token(Token = "0x60001A7")]
	[Address(RVA = "0x19E8800", Offset = "0x19E8800", VA = "0x19E8800")]
	public static Color Lerp(Color color1, Color color2, float t)
	{
		return default(Color);
	}
}
[Token(Token = "0x200003B")]
public class MoviePlayer : MoviePlayerBase
{
	[Token(Token = "0x40000D7")]
	public const string PACKAGE_VERSION = "v0.7";

	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public TextAsset source;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public AudioClip audioSource;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public LoadOptions loadOptions;

	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public float videoTime;

	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	public int videoFrame;

	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public bool loop;

	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
	public bool unscaledDelta;

	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	protected float lastVideoTime;

	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	protected int lastVideoFrame;

	[Token(Token = "0x14000001")]
	public event MovieEvent OnLoop
	{
		[Token(Token = "0x60001A8")]
		[Address(RVA = "0x15DC6D8", Offset = "0x15DC6D8", VA = "0x15DC6D8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8D48", Offset = "0x9A8D48")]
		add
		{
		}
		[Token(Token = "0x60001A9")]
		[Address(RVA = "0x15DC7C4", Offset = "0x15DC7C4", VA = "0x15DC7C4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8D58", Offset = "0x9A8D58")]
		remove
		{
		}
	}

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0x15DC8B0", Offset = "0x15DC8B0", VA = "0x15DC8B0")]
	public bool Load(byte[] bytes, [Optional] LoadOptions loadOptions)
	{
		return default(bool);
	}

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0x15DCB40", Offset = "0x15DCB40", VA = "0x15DCB40")]
	public bool Load(TextAsset textAsset, [Optional] LoadOptions loadOptions)
	{
		return default(bool);
	}

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0x15DCBE0", Offset = "0x15DCBE0", VA = "0x15DCBE0")]
	public bool Load(string path, [Optional] LoadOptions loadOptions)
	{
		return default(bool);
	}

	[Token(Token = "0x60001AD")]
	[Address(RVA = "0x15DC92C", Offset = "0x15DC92C", VA = "0x15DC92C")]
	public bool Load(Stream srcStream, [Optional] LoadOptions loadOptions)
	{
		return default(bool);
	}

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0x15DCC90", Offset = "0x15DCC90", VA = "0x15DCC90")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x9A8D68", Offset = "0x9A8D68")]
	public bool Reload()
	{
		return default(bool);
	}

	[Token(Token = "0x60001AF")]
	[Address(RVA = "0x15DCD48", Offset = "0x15DCD48", VA = "0x15DCD48")]
	private void Start()
	{
	}

	[Token(Token = "0x60001B0")]
	[Address(RVA = "0x15DCD4C", Offset = "0x15DCD4C", VA = "0x15DCD4C")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60001B1")]
	[Address(RVA = "0x15DD338", Offset = "0x15DD338", VA = "0x15DD338")]
	private void Update()
	{
	}

	[Token(Token = "0x60001B2")]
	[Address(RVA = "0x15DD65C", Offset = "0x15DD65C", VA = "0x15DD65C")]
	protected bool HandlePlayheadMove()
	{
		return default(bool);
	}

	[Token(Token = "0x60001B3")]
	[Address(RVA = "0x15DD70C", Offset = "0x15DD70C", VA = "0x15DD70C")]
	protected void HandleFrameDecode(bool wasSeeked)
	{
	}

	[Token(Token = "0x60001B4")]
	[Address(RVA = "0x15DD85C", Offset = "0x15DD85C", VA = "0x15DD85C")]
	protected void HandleAudioSync()
	{
	}

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0x15DDACC", Offset = "0x15DDACC", VA = "0x15DDACC")]
	protected void HandleLoop()
	{
	}

	[Token(Token = "0x60001B6")]
	[Address(RVA = "0x15DE280", Offset = "0x15DE280", VA = "0x15DE280")]
	public MoviePlayer()
	{
	}
}
[Token(Token = "0x200003C")]
public abstract class MoviePlayerBase : MonoBehaviour
{
	[Token(Token = "0x20002B3")]
	public enum ScreenMode
	{
		[Token(Token = "0x4000DE0")]
		Crop,
		[Token(Token = "0x4000DE1")]
		Fill,
		[Token(Token = "0x4000DE2")]
		Stretch,
		[Token(Token = "0x4000DE3")]
		CustomRect
	}

	[Token(Token = "0x20002B4")]
	public delegate void MovieEvent(MoviePlayerBase caller);

	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture2D framebuffer;

	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip audiobuffer;

	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool drawToScreen;

	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9A78E8", Offset = "0x9A78E8")]
	public Material otherMaterial;

	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Material material;

	[Token(Token = "0x40000E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Renderer rendererToSetVideoOn;

	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string texturePropertyName;

	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ScreenMode screenMode;

	[Token(Token = "0x40000EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public int screenGuiDepth;

	[Token(Token = "0x40000EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Rect customScreenRect;

	[Token(Token = "0x40000EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool play;

	[Token(Token = "0x40000ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Movie movie;

	[Token(Token = "0x40000EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public int maxSyncErrorFrames;

	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	protected int _framesDropped;

	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	protected int _syncEvents;

	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	protected bool lastPlay;

	[Token(Token = "0x17000043")]
	public int framesSkipped
	{
		[Token(Token = "0x60001BB")]
		[Address(RVA = "0x15DE708", Offset = "0x15DE708", VA = "0x15DE708")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000044")]
	public int syncEvents
	{
		[Token(Token = "0x60001BC")]
		[Address(RVA = "0x15DE710", Offset = "0x15DE710", VA = "0x15DE710")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000045")]
	public float framerate
	{
		[Token(Token = "0x60001BD")]
		[Address(RVA = "0x15DDB28", Offset = "0x15DDB28", VA = "0x15DDB28")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000046")]
	public float lengthSeconds
	{
		[Token(Token = "0x60001BE")]
		[Address(RVA = "0x15DE718", Offset = "0x15DE718", VA = "0x15DE718")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x14000002")]
	public event MovieEvent OnPlay
	{
		[Token(Token = "0x60001B7")]
		[Address(RVA = "0x15DE358", Offset = "0x15DE358", VA = "0x15DE358")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8DA0", Offset = "0x9A8DA0")]
		add
		{
		}
		[Token(Token = "0x60001B8")]
		[Address(RVA = "0x15DE444", Offset = "0x15DE444", VA = "0x15DE444")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8DB0", Offset = "0x9A8DB0")]
		remove
		{
		}
	}

	[Token(Token = "0x14000003")]
	public event MovieEvent OnStop
	{
		[Token(Token = "0x60001B9")]
		[Address(RVA = "0x15DE530", Offset = "0x15DE530", VA = "0x15DE530")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8DC0", Offset = "0x9A8DC0")]
		add
		{
		}
		[Token(Token = "0x60001BA")]
		[Address(RVA = "0x15DE61C", Offset = "0x15DE61C", VA = "0x15DE61C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8DD0", Offset = "0x9A8DD0")]
		remove
		{
		}
	}

	[Token(Token = "0x60001BF")]
	[Address(RVA = "0x15DCC18", Offset = "0x15DCC18", VA = "0x15DCC18")]
	protected void Load(MovieSource source, [Optional] LoadOptions loadOptions)
	{
	}

	[Token(Token = "0x60001C0")]
	[Address(RVA = "0x15DEA00", Offset = "0x15DEA00", VA = "0x15DEA00")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x9A8DE0", Offset = "0x9A8DE0")]
	public void Unload()
	{
	}

	[Token(Token = "0x60001C1")]
	[Address(RVA = "0x15DE748", Offset = "0x15DE748", VA = "0x15DE748")]
	protected void Bind()
	{
	}

	[Token(Token = "0x60001C2")]
	[Address(RVA = "0x15DCDF4", Offset = "0x15DCDF4", VA = "0x15DCDF4")]
	protected void DrawFramebufferToScreen()
	{
	}

	[Token(Token = "0x60001C3")]
	[Address(RVA = "0x15DD38C", Offset = "0x15DD38C", VA = "0x15DD38C")]
	protected void HandlePlayStop()
	{
	}

	[Token(Token = "0x60001C4")]
	[Address(RVA = "0x15DE2B0", Offset = "0x15DE2B0", VA = "0x15DE2B0")]
	protected MoviePlayerBase()
	{
	}
}
[Token(Token = "0x200003D")]
public class MovieStreamer : MoviePlayerBase
{
	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public string sourceUrl;

	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public LoadOptions loadOptions;

	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public string status;

	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public long bytesReceived;

	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private int lastVideoFrame;

	[Token(Token = "0x17000047")]
	public bool IsConnected
	{
		[Token(Token = "0x60001C5")]
		[Address(RVA = "0x15DEB10", Offset = "0x15DEB10", VA = "0x15DEB10")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60001C6")]
	[Address(RVA = "0x15DEC6C", Offset = "0x15DEC6C", VA = "0x15DEC6C")]
	public bool Load(string srcUrl, [Optional] LoadOptions loadOptions)
	{
		return default(bool);
	}

	[Token(Token = "0x60001C7")]
	[Address(RVA = "0x15DEDC0", Offset = "0x15DEDC0", VA = "0x15DEDC0")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x9A8E18", Offset = "0x9A8E18")]
	public bool ReConnect()
	{
		return default(bool);
	}

	[Token(Token = "0x60001C8")]
	[Address(RVA = "0x15DEE04", Offset = "0x15DEE04", VA = "0x15DEE04")]
	private void Start()
	{
	}

	[Token(Token = "0x60001C9")]
	[Address(RVA = "0x15DEE08", Offset = "0x15DEE08", VA = "0x15DEE08")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60001CA")]
	[Address(RVA = "0x15DEFE4", Offset = "0x15DEFE4", VA = "0x15DEFE4")]
	private void Update()
	{
	}

	[Token(Token = "0x60001CB")]
	[Address(RVA = "0x15DF1A8", Offset = "0x15DF1A8", VA = "0x15DF1A8")]
	protected void HandleFrameDecode()
	{
	}

	[Token(Token = "0x60001CC")]
	[Address(RVA = "0x15DF398", Offset = "0x15DF398", VA = "0x15DF398")]
	public MovieStreamer()
	{
	}
}
[Token(Token = "0x200003E")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A3914", Offset = "0x9A3914")]
public class AlwaysSelectMyParent : MonoBehaviour
{
	[Token(Token = "0x60001CD")]
	[Address(RVA = "0x19D0FF0", Offset = "0x19D0FF0", VA = "0x19D0FF0")]
	public AlwaysSelectMyParent()
	{
	}
}
[Token(Token = "0x200003F")]
public class ShowInDebug : PropertyAttribute
{
	[Token(Token = "0x60001CE")]
	[Address(RVA = "0x16CEF0C", Offset = "0x16CEF0C", VA = "0x16CEF0C")]
	public ShowInDebug()
	{
	}
}
[Token(Token = "0x2000040")]
public class SfxrAudioPlayer : MonoBehaviour
{
	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool isDestroyed;

	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool needsToDestroy;

	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	private bool runningInEditMode;

	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private SfxrSynth sfxrSynth;

	[Token(Token = "0x60001CF")]
	[Address(RVA = "0x16C7394", Offset = "0x16C7394", VA = "0x16C7394")]
	private void Start()
	{
	}

	[Token(Token = "0x60001D0")]
	[Address(RVA = "0x16C74A0", Offset = "0x16C74A0", VA = "0x16C74A0")]
	private void Update()
	{
	}

	[Token(Token = "0x60001D1")]
	[Address(RVA = "0x16C75BC", Offset = "0x16C75BC", VA = "0x16C75BC")]
	private void OnAudioFilterRead(float[] __data, int __channels)
	{
	}

	[Token(Token = "0x60001D2")]
	[Address(RVA = "0x16C7864", Offset = "0x16C7864", VA = "0x16C7864")]
	public void SetSfxrSynth(SfxrSynth __sfxrSynth)
	{
	}

	[Token(Token = "0x60001D3")]
	[Address(RVA = "0x16C786C", Offset = "0x16C786C", VA = "0x16C786C")]
	public void SetRunningInEditMode(bool __runningInEditMode)
	{
	}

	[Token(Token = "0x60001D4")]
	[Address(RVA = "0x16C74C4", Offset = "0x16C74C4", VA = "0x16C74C4")]
	public void Destroy()
	{
	}

	[Token(Token = "0x60001D5")]
	[Address(RVA = "0x16C7878", Offset = "0x16C7878", VA = "0x16C7878")]
	public SfxrAudioPlayer()
	{
	}
}
[Token(Token = "0x2000041")]
public class SfxrCacheSurrogate : MonoBehaviour
{
	[Token(Token = "0x20002B5")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A657C", Offset = "0x9A657C")]
	private sealed class <CacheSoundAsynchronously>d__1 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SfxrSynth __synth;

		[Token(Token = "0x4000DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action __callback;

		[Token(Token = "0x4000DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SfxrCacheSurrogate <>4__this;

		[Token(Token = "0x1700023E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001531")]
			[Address(RVA = "0x16C8160", Offset = "0x16C8160", VA = "0x16C8160", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700023F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001533")]
			[Address(RVA = "0x16C81D0", Offset = "0x16C81D0", VA = "0x16C81D0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600152E")]
		[Address(RVA = "0x16C795C", Offset = "0x16C795C", VA = "0x16C795C")]
		[DebuggerHidden]
		public <CacheSoundAsynchronously>d__1(int <>1__state)
		{
		}

		[Token(Token = "0x600152F")]
		[Address(RVA = "0x16C7EE4", Offset = "0x16C7EE4", VA = "0x16C7EE4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001530")]
		[Address(RVA = "0x16C7EE8", Offset = "0x16C7EE8", VA = "0x16C7EE8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001532")]
		[Address(RVA = "0x16C8168", Offset = "0x16C8168", VA = "0x16C8168", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002B6")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A658C", Offset = "0x9A658C")]
	private sealed class <CacheMutationsAsynchronously>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SfxrSynth __synth;

		[Token(Token = "0x4000DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public uint __mutationsNum;

		[Token(Token = "0x4000DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float __mutationAmount;

		[Token(Token = "0x4000DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action __callback;

		[Token(Token = "0x4000DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SfxrCacheSurrogate <>4__this;

		[Token(Token = "0x17000240")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001537")]
			[Address(RVA = "0x16C7E6C", Offset = "0x16C7E6C", VA = "0x16C7E6C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000241")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001539")]
			[Address(RVA = "0x16C7EDC", Offset = "0x16C7EDC", VA = "0x16C7EDC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001534")]
		[Address(RVA = "0x16C7AA0", Offset = "0x16C7AA0", VA = "0x16C7AA0")]
		[DebuggerHidden]
		public <CacheMutationsAsynchronously>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x6001535")]
		[Address(RVA = "0x16C7AD4", Offset = "0x16C7AD4", VA = "0x16C7AD4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001536")]
		[Address(RVA = "0x16C7AD8", Offset = "0x16C7AD8", VA = "0x16C7AD8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001538")]
		[Address(RVA = "0x16C7E74", Offset = "0x16C7E74", VA = "0x16C7E74", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x60001D6")]
	[Address(RVA = "0x16C7880", Offset = "0x16C7880", VA = "0x16C7880")]
	public void CacheSound(SfxrSynth __synth, Action __callback)
	{
	}

	[Token(Token = "0x60001D7")]
	[Address(RVA = "0x16C78AC", Offset = "0x16C78AC", VA = "0x16C78AC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x9A8E50", Offset = "0x9A8E50")]
	private IEnumerator CacheSoundAsynchronously(SfxrSynth __synth, Action __callback)
	{
		return null;
	}

	[Token(Token = "0x60001D8")]
	[Address(RVA = "0x16C7988", Offset = "0x16C7988", VA = "0x16C7988")]
	public void CacheMutations(SfxrSynth __synth, uint __mutationsNum, float __mutationAmount, Action __callback)
	{
	}

	[Token(Token = "0x60001D9")]
	[Address(RVA = "0x16C79B4", Offset = "0x16C79B4", VA = "0x16C79B4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x9A8EB4", Offset = "0x9A8EB4")]
	private IEnumerator CacheMutationsAsynchronously(SfxrSynth __synth, uint __mutationsNum, float __mutationAmount, Action __callback)
	{
		return null;
	}

	[Token(Token = "0x60001DA")]
	[Address(RVA = "0x16C7ACC", Offset = "0x16C7ACC", VA = "0x16C7ACC")]
	public SfxrCacheSurrogate()
	{
	}
}
[Token(Token = "0x2000042")]
public class SfxrParams
{
	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool paramsDirty;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private uint _waveType;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float _masterVolume;

	[Token(Token = "0x4000100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float _attackTime;

	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float _sustainTime;

	[Token(Token = "0x4000102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float _sustainPunch;

	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float _decayTime;

	[Token(Token = "0x4000104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float _startFrequency;

	[Token(Token = "0x4000105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float _minFrequency;

	[Token(Token = "0x4000106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float _slide;

	[Token(Token = "0x4000107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float _deltaSlide;

	[Token(Token = "0x4000108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float _vibratoDepth;

	[Token(Token = "0x4000109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float _vibratoSpeed;

	[Token(Token = "0x400010A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float _changeAmount;

	[Token(Token = "0x400010B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float _changeSpeed;

	[Token(Token = "0x400010C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float _squareDuty;

	[Token(Token = "0x400010D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float _dutySweep;

	[Token(Token = "0x400010E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float _repeatSpeed;

	[Token(Token = "0x400010F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float _phaserOffset;

	[Token(Token = "0x4000110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float _phaserSweep;

	[Token(Token = "0x4000111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float _lpFilterCutoff;

	[Token(Token = "0x4000112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float _lpFilterCutoffSweep;

	[Token(Token = "0x4000113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float _lpFilterResonance;

	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float _hpFilterCutoff;

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float _hpFilterCutoffSweep;

	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float _changeRepeat;

	[Token(Token = "0x4000117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float _changeAmount2;

	[Token(Token = "0x4000118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float _changeSpeed2;

	[Token(Token = "0x4000119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float _compressionAmount;

	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float _overtones;

	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float _overtoneFalloff;

	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private float _bitCrush;

	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float _bitCrushSweep;

	[Token(Token = "0x17000048")]
	public uint waveType
	{
		[Token(Token = "0x60001DB")]
		[Address(RVA = "0x16C81D8", Offset = "0x16C81D8", VA = "0x16C81D8")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60001DC")]
		[Address(RVA = "0x16C81E0", Offset = "0x16C81E0", VA = "0x16C81E0")]
		set
		{
		}
	}

	[Token(Token = "0x17000049")]
	public float masterVolume
	{
		[Token(Token = "0x60001DD")]
		[Address(RVA = "0x16C8218", Offset = "0x16C8218", VA = "0x16C8218")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60001DE")]
		[Address(RVA = "0x16C8220", Offset = "0x16C8220", VA = "0x16C8220")]
		set
		{
		}
	}

	[Token(Token = "0x1700004A")]
	public float attackTime
	{
		[Token(Token = "0x60001DF")]
		[Address(RVA = "0x16C82AC", Offset = "0x16C82AC", VA = "0x16C82AC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60001E0")]
		[Address(RVA = "0x16C82B4", Offset = "0x16C82B4", VA = "0x16C82B4")]
		set
		{
		}
	}

	[Token(Token = "0x1700004B")]
	public float sustainTime
	{
		[Token(Token = "0x60001E1")]
		[Address(RVA = "0x16C8340", Offset = "0x16C8340", VA = "0x16C8340")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60001E2")]
		[Address(RVA = "0x16C8348", Offset = "0x16C8348", VA = "0x16C8348")]
		set
		{
		}
	}

	[Token(Token = "0x1700004C")]
	public float sustainPunch
	{
		[Token(Token = "0x60001E3")]
		[Address(RVA = "0x16C83D4", Offset = "0x16C83D4", VA = "0x16C83D4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60001E4")]
		[Address(RVA = "0x16C83DC", Offset = "0x16C83DC", VA = "0x16C83DC")]
		set
		{
		}
	}

	[Token(Token = "0x1700004D")]
	public float decayTime
	{
		[Token(Token = "0x60001E5")]
		[Address(RVA = "0x16C8468", Offset = "0x16C8468", VA = "0x16C8468")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60001E6")]
		[Address(RVA = "0x16C8470", Offset = "0x16C8470", VA = "0x16C8470")]
		set
		{
		}
	}

	[Token(Token = "0x1700004E")]
	public float startFrequency
	{
		[Token(Token = "0x60001E7")]
		[Address(RVA = "0x16C84FC", Offset = "0x16C84FC", VA = "0x16C84FC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60001E8")]
		[Address(RVA = "0x16C8504", Offset = "0x16C8504", VA = "0x16C8504")]
		set
		{
		}
	}

	[Token(Token = "0x1700004F")]
	public float minFrequency
	{
		[Token(Token = "0x60001E9")]
		[Address(RVA = "0x16C8590", Offset = "0x16C8590", VA = "0x16C8590")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60001EA")]
		[Address(RVA = "0x16C8598", Offset = "0x16C8598", VA = "0x16C8598")]
		set
		{
		}
	}

	[Token(Token = "0x17000050")]
	public float slide
	{
		[Token(Token = "0x60001EB")]
		[Address(RVA = "0x16C8624", Offset = "0x16C8624", VA = "0x16C8624")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60001EC")]
		[Address(RVA = "0x16C862C", Offset = "0x16C862C", VA = "0x16C862C")]
		set
		{
		}
	}

	[Token(Token = "0x17000051")]
	public float deltaSlide
	{
		[Token(Token = "0x60001ED")]
		[Address(RVA = "0x16C86B8", Offset = "0x16C86B8", VA = "0x16C86B8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60001EE")]
		[Address(RVA = "0x16C86C0", Offset = "0x16C86C0", VA = "0x16C86C0")]
		set
		{
		}
	}

	[Token(Token = "0x17000052")]
	public float vibratoDepth
	{
		[Token(Token = "0x60001EF")]
		[Address(RVA = "0x16C874C", Offset = "0x16C874C", VA = "0x16C874C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60001F0")]
		[Address(RVA = "0x16C8754", Offset = "0x16C8754", VA = "0x16C8754")]
		set
		{
		}
	}

	[Token(Token = "0x17000053")]
	public float vibratoSpeed
	{
		[Token(Token = "0x60001F1")]
		[Address(RVA = "0x16C87E0", Offset = "0x16C87E0", VA = "0x16C87E0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60001F2")]
		[Address(RVA = "0x16C87E8", Offset = "0x16C87E8", VA = "0x16C87E8")]
		set
		{
		}
	}

	[Token(Token = "0x17000054")]
	public float changeAmount
	{
		[Token(Token = "0x60001F3")]
		[Address(RVA = "0x16C8874", Offset = "0x16C8874", VA = "0x16C8874")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60001F4")]
		[Address(RVA = "0x16C887C", Offset = "0x16C887C", VA = "0x16C887C")]
		set
		{
		}
	}

	[Token(Token = "0x17000055")]
	public float changeSpeed
	{
		[Token(Token = "0x60001F5")]
		[Address(RVA = "0x16C8908", Offset = "0x16C8908", VA = "0x16C8908")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60001F6")]
		[Address(RVA = "0x16C8910", Offset = "0x16C8910", VA = "0x16C8910")]
		set
		{
		}
	}

	[Token(Token = "0x17000056")]
	public float squareDuty
	{
		[Token(Token = "0x60001F7")]
		[Address(RVA = "0x16C899C", Offset = "0x16C899C", VA = "0x16C899C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60001F8")]
		[Address(RVA = "0x16C89A4", Offset = "0x16C89A4", VA = "0x16C89A4")]
		set
		{
		}
	}

	[Token(Token = "0x17000057")]
	public float dutySweep
	{
		[Token(Token = "0x60001F9")]
		[Address(RVA = "0x16C8A30", Offset = "0x16C8A30", VA = "0x16C8A30")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60001FA")]
		[Address(RVA = "0x16C8A38", Offset = "0x16C8A38", VA = "0x16C8A38")]
		set
		{
		}
	}

	[Token(Token = "0x17000058")]
	public float repeatSpeed
	{
		[Token(Token = "0x60001FB")]
		[Address(RVA = "0x16C8AC4", Offset = "0x16C8AC4", VA = "0x16C8AC4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60001FC")]
		[Address(RVA = "0x16C8ACC", Offset = "0x16C8ACC", VA = "0x16C8ACC")]
		set
		{
		}
	}

	[Token(Token = "0x17000059")]
	public float phaserOffset
	{
		[Token(Token = "0x60001FD")]
		[Address(RVA = "0x16C8B58", Offset = "0x16C8B58", VA = "0x16C8B58")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60001FE")]
		[Address(RVA = "0x16C8B60", Offset = "0x16C8B60", VA = "0x16C8B60")]
		set
		{
		}
	}

	[Token(Token = "0x1700005A")]
	public float phaserSweep
	{
		[Token(Token = "0x60001FF")]
		[Address(RVA = "0x16C8BEC", Offset = "0x16C8BEC", VA = "0x16C8BEC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000200")]
		[Address(RVA = "0x16C8BF4", Offset = "0x16C8BF4", VA = "0x16C8BF4")]
		set
		{
		}
	}

	[Token(Token = "0x1700005B")]
	public float lpFilterCutoff
	{
		[Token(Token = "0x6000201")]
		[Address(RVA = "0x16C8C80", Offset = "0x16C8C80", VA = "0x16C8C80")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000202")]
		[Address(RVA = "0x16C8C88", Offset = "0x16C8C88", VA = "0x16C8C88")]
		set
		{
		}
	}

	[Token(Token = "0x1700005C")]
	public float lpFilterCutoffSweep
	{
		[Token(Token = "0x6000203")]
		[Address(RVA = "0x16C8D14", Offset = "0x16C8D14", VA = "0x16C8D14")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000204")]
		[Address(RVA = "0x16C8D1C", Offset = "0x16C8D1C", VA = "0x16C8D1C")]
		set
		{
		}
	}

	[Token(Token = "0x1700005D")]
	public float lpFilterResonance
	{
		[Token(Token = "0x6000205")]
		[Address(RVA = "0x16C8DA8", Offset = "0x16C8DA8", VA = "0x16C8DA8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000206")]
		[Address(RVA = "0x16C8DB0", Offset = "0x16C8DB0", VA = "0x16C8DB0")]
		set
		{
		}
	}

	[Token(Token = "0x1700005E")]
	public float hpFilterCutoff
	{
		[Token(Token = "0x6000207")]
		[Address(RVA = "0x16C8E3C", Offset = "0x16C8E3C", VA = "0x16C8E3C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000208")]
		[Address(RVA = "0x16C8E44", Offset = "0x16C8E44", VA = "0x16C8E44")]
		set
		{
		}
	}

	[Token(Token = "0x1700005F")]
	public float hpFilterCutoffSweep
	{
		[Token(Token = "0x6000209")]
		[Address(RVA = "0x16C8ED0", Offset = "0x16C8ED0", VA = "0x16C8ED0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600020A")]
		[Address(RVA = "0x16C8ED8", Offset = "0x16C8ED8", VA = "0x16C8ED8")]
		set
		{
		}
	}

	[Token(Token = "0x17000060")]
	public float changeRepeat
	{
		[Token(Token = "0x600020B")]
		[Address(RVA = "0x16C8F64", Offset = "0x16C8F64", VA = "0x16C8F64")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600020C")]
		[Address(RVA = "0x16C8F6C", Offset = "0x16C8F6C", VA = "0x16C8F6C")]
		set
		{
		}
	}

	[Token(Token = "0x17000061")]
	public float changeAmount2
	{
		[Token(Token = "0x600020D")]
		[Address(RVA = "0x16C8FF8", Offset = "0x16C8FF8", VA = "0x16C8FF8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600020E")]
		[Address(RVA = "0x16C9000", Offset = "0x16C9000", VA = "0x16C9000")]
		set
		{
		}
	}

	[Token(Token = "0x17000062")]
	public float changeSpeed2
	{
		[Token(Token = "0x600020F")]
		[Address(RVA = "0x16C908C", Offset = "0x16C908C", VA = "0x16C908C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000210")]
		[Address(RVA = "0x16C9094", Offset = "0x16C9094", VA = "0x16C9094")]
		set
		{
		}
	}

	[Token(Token = "0x17000063")]
	public float compressionAmount
	{
		[Token(Token = "0x6000211")]
		[Address(RVA = "0x16C9120", Offset = "0x16C9120", VA = "0x16C9120")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000212")]
		[Address(RVA = "0x16C9128", Offset = "0x16C9128", VA = "0x16C9128")]
		set
		{
		}
	}

	[Token(Token = "0x17000064")]
	public float overtones
	{
		[Token(Token = "0x6000213")]
		[Address(RVA = "0x16C91B4", Offset = "0x16C91B4", VA = "0x16C91B4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000214")]
		[Address(RVA = "0x16C91BC", Offset = "0x16C91BC", VA = "0x16C91BC")]
		set
		{
		}
	}

	[Token(Token = "0x17000065")]
	public float overtoneFalloff
	{
		[Token(Token = "0x6000215")]
		[Address(RVA = "0x16C9248", Offset = "0x16C9248", VA = "0x16C9248")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000216")]
		[Address(RVA = "0x16C9250", Offset = "0x16C9250", VA = "0x16C9250")]
		set
		{
		}
	}

	[Token(Token = "0x17000066")]
	public float bitCrush
	{
		[Token(Token = "0x6000217")]
		[Address(RVA = "0x16C92DC", Offset = "0x16C92DC", VA = "0x16C92DC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000218")]
		[Address(RVA = "0x16C92E4", Offset = "0x16C92E4", VA = "0x16C92E4")]
		set
		{
		}
	}

	[Token(Token = "0x17000067")]
	public float bitCrushSweep
	{
		[Token(Token = "0x6000219")]
		[Address(RVA = "0x16C9370", Offset = "0x16C9370", VA = "0x16C9370")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600021A")]
		[Address(RVA = "0x16C9378", Offset = "0x16C9378", VA = "0x16C9378")]
		set
		{
		}
	}

	[Token(Token = "0x600021B")]
	[Address(RVA = "0x16C9404", Offset = "0x16C9404", VA = "0x16C9404")]
	public void GeneratePickupCoin()
	{
	}

	[Token(Token = "0x600021C")]
	[Address(RVA = "0x16C9648", Offset = "0x16C9648", VA = "0x16C9648")]
	public void GenerateLaserShoot()
	{
	}

	[Token(Token = "0x600021D")]
	[Address(RVA = "0x16C99B4", Offset = "0x16C99B4", VA = "0x16C99B4")]
	public void GenerateExplosion()
	{
	}

	[Token(Token = "0x600021E")]
	[Address(RVA = "0x16C9C8C", Offset = "0x16C9C8C", VA = "0x16C9C8C")]
	public void GeneratePowerup()
	{
	}

	[Token(Token = "0x600021F")]
	[Address(RVA = "0x16C9E90", Offset = "0x16C9E90", VA = "0x16C9E90")]
	public void GenerateHitHurt()
	{
	}

	[Token(Token = "0x6000220")]
	[Address(RVA = "0x16CA048", Offset = "0x16CA048", VA = "0x16CA048")]
	public void GenerateJump()
	{
	}

	[Token(Token = "0x6000221")]
	[Address(RVA = "0x16CA1DC", Offset = "0x16CA1DC", VA = "0x16CA1DC")]
	public void GenerateBlipSelect()
	{
	}

	[Token(Token = "0x6000222")]
	[Address(RVA = "0x16C95A8", Offset = "0x16C95A8", VA = "0x16C95A8")]
	protected void resetParams()
	{
	}

	[Token(Token = "0x6000223")]
	[Address(RVA = "0x16CA320", Offset = "0x16CA320", VA = "0x16CA320")]
	public void Mutate(float __mutation = 0.05f)
	{
	}

	[Token(Token = "0x6000224")]
	[Address(RVA = "0x16CAA6C", Offset = "0x16CAA6C", VA = "0x16CAA6C")]
	public void Randomize()
	{
	}

	[Token(Token = "0x6000225")]
	[Address(RVA = "0x16CAFFC", Offset = "0x16CAFFC", VA = "0x16CAFFC")]
	public string GetSettingsStringLegacy()
	{
		return null;
	}

	[Token(Token = "0x6000226")]
	[Address(RVA = "0x16CB3F8", Offset = "0x16CB3F8", VA = "0x16CB3F8")]
	public string GetSettingsString()
	{
		return null;
	}

	[Token(Token = "0x6000227")]
	[Address(RVA = "0x16CB858", Offset = "0x16CB858", VA = "0x16CB858")]
	public bool SetSettingsString(string __string)
	{
		return default(bool);
	}

	[Token(Token = "0x6000228")]
	[Address(RVA = "0x16CC4A0", Offset = "0x16CC4A0", VA = "0x16CC4A0")]
	public SfxrParams Clone()
	{
		return null;
	}

	[Token(Token = "0x6000229")]
	[Address(RVA = "0x16CC53C", Offset = "0x16CC53C", VA = "0x16CC53C")]
	public void CopyFrom(SfxrParams __params, bool __makeDirty = false)
	{
	}

	[Token(Token = "0x600022A")]
	[Address(RVA = "0x16CAFB4", Offset = "0x16CAFB4", VA = "0x16CAFB4")]
	private float Pow(float __pbase, int __power)
	{
		return default(float);
	}

	[Token(Token = "0x600022B")]
	[Address(RVA = "0x16CB35C", Offset = "0x16CB35C", VA = "0x16CB35C")]
	private string To4DP(float __value)
	{
		return null;
	}

	[Token(Token = "0x600022C")]
	[Address(RVA = "0x16CC404", Offset = "0x16CC404", VA = "0x16CC404")]
	private uint ParseUint(string __value)
	{
		return default(uint);
	}

	[Token(Token = "0x600022D")]
	[Address(RVA = "0x16CC450", Offset = "0x16CC450", VA = "0x16CC450")]
	private float ParseFloat(string __value)
	{
		return default(float);
	}

	[Token(Token = "0x600022E")]
	[Address(RVA = "0x16C9608", Offset = "0x16C9608", VA = "0x16C9608")]
	private float GetRandom()
	{
		return default(float);
	}

	[Token(Token = "0x600022F")]
	[Address(RVA = "0x16C9624", Offset = "0x16C9624", VA = "0x16C9624")]
	private bool GetRandomBool()
	{
		return default(bool);
	}

	[Token(Token = "0x6000230")]
	[Address(RVA = "0x16CC52C", Offset = "0x16CC52C", VA = "0x16CC52C")]
	public SfxrParams()
	{
	}
}
[Token(Token = "0x2000043")]
public class SfxrSynth
{
	[Token(Token = "0x20002B7")]
	private enum Endian
	{
		[Token(Token = "0x4000DF1")]
		BIG_ENDIAN,
		[Token(Token = "0x4000DF2")]
		LITTLE_ENDIAN
	}

	[Token(Token = "0x400011E")]
	private const int LO_RES_NOISE_PERIOD = 8;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private SfxrParams _params;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GameObject _gameObject;

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private SfxrAudioPlayer _audioPlayer;

	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform _parentTransform;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool _mutation;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float[] _cachedWave;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private uint _cachedWavePos;

	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool _cachingNormal;

	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int _cachingMutation;

	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float[] _cachedMutation;

	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private uint _cachedMutationPos;

	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float[][] _cachedMutations;

	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private uint _cachedMutationsNum;

	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float _cachedMutationAmount;

	[Token(Token = "0x400012D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool _cachingAsync;

	[Token(Token = "0x400012E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float[] _waveData;

	[Token(Token = "0x400012F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private uint _waveDataPos;

	[Token(Token = "0x4000130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private SfxrParams _original;

	[Token(Token = "0x4000131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool _finished;

	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float _masterVolume;

	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private uint _waveType;

	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private float _envelopeVolume;

	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private int _envelopeStage;

	[Token(Token = "0x4000136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private float _envelopeTime;

	[Token(Token = "0x4000137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float _envelopeLength;

	[Token(Token = "0x4000138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private float _envelopeLength0;

	[Token(Token = "0x4000139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private float _envelopeLength1;

	[Token(Token = "0x400013A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private float _envelopeLength2;

	[Token(Token = "0x400013B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float _envelopeOverLength0;

	[Token(Token = "0x400013C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private float _envelopeOverLength1;

	[Token(Token = "0x400013D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private float _envelopeOverLength2;

	[Token(Token = "0x400013E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private uint _envelopeFullLength;

	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private float _sustainPunch;

	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private int _phase;

	[Token(Token = "0x4000141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private float _pos;

	[Token(Token = "0x4000142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private float _period;

	[Token(Token = "0x4000143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private float _periodTemp;

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private int _periodTempInt;

	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private float _maxPeriod;

	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private float _slide;

	[Token(Token = "0x4000147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private float _deltaSlide;

	[Token(Token = "0x4000148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private float _minFrequency;

	[Token(Token = "0x4000149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private float _vibratoPhase;

	[Token(Token = "0x400014A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private float _vibratoSpeed;

	[Token(Token = "0x400014B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private float _vibratoAmplitude;

	[Token(Token = "0x400014C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private float _changeAmount;

	[Token(Token = "0x400014D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private int _changeTime;

	[Token(Token = "0x400014E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private int _changeLimit;

	[Token(Token = "0x400014F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private float _squareDuty;

	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	private float _dutySweep;

	[Token(Token = "0x4000151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private int _repeatTime;

	[Token(Token = "0x4000152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	private int _repeatLimit;

	[Token(Token = "0x4000153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private bool _phaser;

	[Token(Token = "0x4000154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	private float _phaserOffset;

	[Token(Token = "0x4000155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private float _phaserDeltaOffset;

	[Token(Token = "0x4000156")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	private int _phaserInt;

	[Token(Token = "0x4000157")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private int _phaserPos;

	[Token(Token = "0x4000158")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private float[] _phaserBuffer;

	[Token(Token = "0x4000159")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private bool _filters;

	[Token(Token = "0x400015A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	private float _lpFilterPos;

	[Token(Token = "0x400015B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private float _lpFilterOldPos;

	[Token(Token = "0x400015C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	private float _lpFilterDeltaPos;

	[Token(Token = "0x400015D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private float _lpFilterCutoff;

	[Token(Token = "0x400015E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
	private float _lpFilterDeltaCutoff;

	[Token(Token = "0x400015F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private float _lpFilterDamping;

	[Token(Token = "0x4000160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
	private bool _lpFilterOn;

	[Token(Token = "0x4000161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private float _hpFilterPos;

	[Token(Token = "0x4000162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
	private float _hpFilterCutoff;

	[Token(Token = "0x4000163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private float _hpFilterDeltaCutoff;

	[Token(Token = "0x4000164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
	private float _changePeriod;

	[Token(Token = "0x4000165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private int _changePeriodTime;

	[Token(Token = "0x4000166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
	private bool _changeReached;

	[Token(Token = "0x4000167")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private float _changeAmount2;

	[Token(Token = "0x4000168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
	private int _changeTime2;

	[Token(Token = "0x4000169")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private int _changeLimit2;

	[Token(Token = "0x400016A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
	private bool _changeReached2;

	[Token(Token = "0x400016B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private int _overtones;

	[Token(Token = "0x400016C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
	private float _overtoneFalloff;

	[Token(Token = "0x400016D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private float _bitcrushFreq;

	[Token(Token = "0x400016E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
	private float _bitcrushFreqSweep;

	[Token(Token = "0x400016F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private float _bitcrushPhase;

	[Token(Token = "0x4000170")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
	private float _bitcrushLast;

	[Token(Token = "0x4000171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	private float _compressionFactor;

	[Token(Token = "0x4000172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private float[] _noiseBuffer;

	[Token(Token = "0x4000173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private float[] _pinkNoiseBuffer;

	[Token(Token = "0x4000174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	private PinkNumber _pinkNumber;

	[Token(Token = "0x4000175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	private float[] _loResNoiseBuffer;

	[Token(Token = "0x4000176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	private float _superSample;

	[Token(Token = "0x4000177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
	private float _sample;

	[Token(Token = "0x4000178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	private float _sample2;

	[Token(Token = "0x4000179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
	private float amp;

	[Token(Token = "0x400017A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	private System.Random randomGenerator;

	[Token(Token = "0x17000068")]
	public SfxrParams parameters
	{
		[Token(Token = "0x6000231")]
		[Address(RVA = "0x16CC58C", Offset = "0x16CC58C", VA = "0x16CC58C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000232")]
		[Address(RVA = "0x16CC594", Offset = "0x16CC594", VA = "0x16CC594")]
		set
		{
		}
	}

	[Token(Token = "0x6000233")]
	[Address(RVA = "0x16CC5C8", Offset = "0x16CC5C8", VA = "0x16CC5C8")]
	public static AudioClip Clip(string data)
	{
		return null;
	}

	[Token(Token = "0x6000234")]
	[Address(RVA = "0x16CC790", Offset = "0x16CC790", VA = "0x16CC790")]
	public static GameObject SoundObject(string data, [Optional] AudioMixerGroup mixer, float volume = 1f, int priority = 128, float maxDistance = 30f, bool loop = false)
	{
		return null;
	}

	[Token(Token = "0x6000235")]
	[Address(RVA = "0x16CCA84", Offset = "0x16CCA84", VA = "0x16CCA84")]
	public void Play()
	{
	}

	[Token(Token = "0x6000236")]
	[Address(RVA = "0x16CD658", Offset = "0x16CD658", VA = "0x16CD658")]
	public void PlayMutated(float __mutationAmount = 0.05f, uint __mutationsNum = 15u)
	{
	}

	[Token(Token = "0x6000237")]
	[Address(RVA = "0x16CCB50", Offset = "0x16CCB50", VA = "0x16CCB50")]
	public void Stop()
	{
	}

	[Token(Token = "0x6000238")]
	[Address(RVA = "0x16CD898", Offset = "0x16CD898", VA = "0x16CD898")]
	private int WriteSamples(float[] __originSamples, int __originPos, float[] __targetSamples, int __targetChannels)
	{
		return default(int);
	}

	[Token(Token = "0x6000239")]
	[Address(RVA = "0x16C7604", Offset = "0x16C7604", VA = "0x16C7604")]
	public bool GenerateAudioFilterData(float[] __data, int __channels)
	{
		return default(bool);
	}

	[Token(Token = "0x600023A")]
	[Address(RVA = "0x16C7FE8", Offset = "0x16C7FE8", VA = "0x16C7FE8")]
	public void CacheSound([Optional] Action __callback, bool __isFromCoroutine = false)
	{
	}

	[Token(Token = "0x600023B")]
	[Address(RVA = "0x16C7BF0", Offset = "0x16C7BF0", VA = "0x16C7BF0")]
	public void CacheMutations(uint __mutationsNum = 15u, float __mutationAmount = 0.05f, [Optional] Action __callback, bool __isFromCoroutine = false)
	{
	}

	[Token(Token = "0x600023C")]
	[Address(RVA = "0x16CE598", Offset = "0x16CE598", VA = "0x16CE598")]
	public void SetParentTransform(Transform __transform)
	{
	}

	[Token(Token = "0x600023D")]
	[Address(RVA = "0x16CE5A0", Offset = "0x16CE5A0", VA = "0x16CE5A0")]
	public byte[] GetWavFile(uint __sampleRate = 44100u, uint __bitDepth = 16u)
	{
		return null;
	}

	[Token(Token = "0x600023E")]
	[Address(RVA = "0x16CC854", Offset = "0x16CC854", VA = "0x16CC854")]
	public GameObject GetSoundObject([Optional] AudioMixerGroup mixer, float volume = 1f, int priority = 128, float maxDistance = 30f, bool loop = false)
	{
		return null;
	}

	[Token(Token = "0x600023F")]
	[Address(RVA = "0x16CC6E4", Offset = "0x16CC6E4", VA = "0x16CC6E4")]
	public AudioClip GetAudioClip()
	{
		return null;
	}

	[Token(Token = "0x6000240")]
	[Address(RVA = "0x16CED18", Offset = "0x16CED18", VA = "0x16CED18")]
	private float[] GetWavData()
	{
		return null;
	}

	[Token(Token = "0x6000241")]
	[Address(RVA = "0x16CCC24", Offset = "0x16CCC24", VA = "0x16CCC24")]
	private void Reset(bool __totalReset)
	{
	}

	[Token(Token = "0x6000242")]
	[Address(RVA = "0x16CD9BC", Offset = "0x16CD9BC", VA = "0x16CD9BC")]
	private bool SynthWave(float[] __buffer, int __bufferPos, uint __length)
	{
		return default(bool);
	}

	[Token(Token = "0x6000243")]
	[Address(RVA = "0x16CD52C", Offset = "0x16CD52C", VA = "0x16CD52C")]
	private void createGameObject()
	{
	}

	[Token(Token = "0x6000244")]
	[Address(RVA = "0x16CED9C", Offset = "0x16CED9C", VA = "0x16CED9C")]
	private void fixGameObjectParent()
	{
	}

	[Token(Token = "0x6000245")]
	[Address(RVA = "0x16CD854", Offset = "0x16CD854", VA = "0x16CD854")]
	private float getRandom()
	{
		return default(float);
	}

	[Token(Token = "0x6000246")]
	[Address(RVA = "0x16CEB70", Offset = "0x16CEB70", VA = "0x16CEB70")]
	private void writeShortToBytes(byte[] __bytes, ref int __position, short __newShort, Endian __endian)
	{
	}

	[Token(Token = "0x6000247")]
	[Address(RVA = "0x16CEA5C", Offset = "0x16CEA5C", VA = "0x16CEA5C")]
	private void writeUintToBytes(byte[] __bytes, ref int __position, uint __newUint, Endian __endian)
	{
	}

	[Token(Token = "0x6000248")]
	[Address(RVA = "0x16CEC3C", Offset = "0x16CEC3C", VA = "0x16CEC3C")]
	private void writeBytes(byte[] __bytes, ref int __position, byte[] __newBytes, Endian __endian)
	{
	}

	[Token(Token = "0x6000249")]
	[Address(RVA = "0x16CC654", Offset = "0x16CC654", VA = "0x16CC654")]
	public SfxrSynth()
	{
	}
}
[Token(Token = "0x2000044")]
public class PinkNumber
{
	[Token(Token = "0x400017B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private int max_key;

	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private int key;

	[Token(Token = "0x400017D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private uint[] white_values;

	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private uint range;

	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private System.Random randomGenerator;

	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float rangeBy5;

	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int last_key;

	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private uint sum;

	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int diff;

	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int i;

	[Token(Token = "0x600024A")]
	[Address(RVA = "0x16C6218", Offset = "0x16C6218", VA = "0x16C6218")]
	public PinkNumber()
	{
	}

	[Token(Token = "0x600024B")]
	[Address(RVA = "0x16C6380", Offset = "0x16C6380", VA = "0x16C6380")]
	public float getNextValue()
	{
		return default(float);
	}
}
[Token(Token = "0x2000045")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A394C", Offset = "0x9A394C")]
public class MouseLook : MonoBehaviour
{
	[Token(Token = "0x20002B8")]
	public enum RotationAxes
	{
		[Token(Token = "0x4000DF4")]
		MouseXAndY,
		[Token(Token = "0x4000DF5")]
		MouseX,
		[Token(Token = "0x4000DF6")]
		MouseY
	}

	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RotationAxes axes;

	[Token(Token = "0x4000186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float sensitivityX;

	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float sensitivityY;

	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float minimumX;

	[Token(Token = "0x4000189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float maximumX;

	[Token(Token = "0x400018A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float minimumY;

	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float maximumY;

	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float rotationY;

	[Token(Token = "0x600024C")]
	[Address(RVA = "0x15DC36C", Offset = "0x15DC36C", VA = "0x15DC36C")]
	private void Update()
	{
	}

	[Token(Token = "0x600024D")]
	[Address(RVA = "0x15DC5F0", Offset = "0x15DC5F0", VA = "0x15DC5F0")]
	private void Start()
	{
	}

	[Token(Token = "0x600024E")]
	[Address(RVA = "0x15DC6B8", Offset = "0x15DC6B8", VA = "0x15DC6B8")]
	public MouseLook()
	{
	}
}
[Token(Token = "0x2000046")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A3984", Offset = "0x9A3984")]
public class BlurEffect : MonoBehaviour
{
	[Token(Token = "0x400018D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int iterations;

	[Token(Token = "0x400018E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float blurSpread;

	[Token(Token = "0x400018F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Shader blurShader;

	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Material m_Material;

	[Token(Token = "0x17000069")]
	protected Material material
	{
		[Token(Token = "0x600024F")]
		[Address(RVA = "0x19E4790", Offset = "0x19E4790", VA = "0x19E4790")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000250")]
	[Address(RVA = "0x19E48D0", Offset = "0x19E48D0", VA = "0x19E48D0")]
	protected void OnDisable()
	{
	}

	[Token(Token = "0x6000251")]
	[Address(RVA = "0x19E49CC", Offset = "0x19E49CC", VA = "0x19E49CC")]
	protected void Start()
	{
	}

	[Token(Token = "0x6000252")]
	[Address(RVA = "0x19E4AA0", Offset = "0x19E4AA0", VA = "0x19E4AA0")]
	public void FourTapCone(RenderTexture source, RenderTexture dest, int iteration)
	{
	}

	[Token(Token = "0x6000253")]
	[Address(RVA = "0x19E4C7C", Offset = "0x19E4C7C", VA = "0x19E4C7C")]
	private void DownSample4x(RenderTexture source, RenderTexture dest)
	{
	}

	[Token(Token = "0x6000254")]
	[Address(RVA = "0x19E4E34", Offset = "0x19E4E34", VA = "0x19E4E34")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x6000255")]
	[Address(RVA = "0x19E4FB0", Offset = "0x19E4FB0", VA = "0x19E4FB0")]
	public BlurEffect()
	{
	}
}
[Token(Token = "0x2000047")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A39D0", Offset = "0x9A39D0")]
public class ColorCorrectionEffect : ImageEffectBase
{
	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Texture textureRamp;

	[Token(Token = "0x6000257")]
	[Address(RVA = "0x19E85DC", Offset = "0x19E85DC", VA = "0x19E85DC")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x6000258")]
	[Address(RVA = "0x19E8770", Offset = "0x19E8770", VA = "0x19E8770")]
	public ColorCorrectionEffect()
	{
	}
}
[Token(Token = "0x2000048")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A3A1C", Offset = "0x9A3A1C")]
public class ContrastStretchEffect : MonoBehaviour
{
	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float adaptationSpeed;

	[Token(Token = "0x4000193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float limitMinimum;

	[Token(Token = "0x4000194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float limitMaximum;

	[Token(Token = "0x4000195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RenderTexture[] adaptRenderTex;

	[Token(Token = "0x4000196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int curAdaptIndex;

	[Token(Token = "0x4000197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Shader shaderLum;

	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Material m_materialLum;

	[Token(Token = "0x4000199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Shader shaderReduce;

	[Token(Token = "0x400019A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Material m_materialReduce;

	[Token(Token = "0x400019B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Shader shaderAdapt;

	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Material m_materialAdapt;

	[Token(Token = "0x400019D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Shader shaderApply;

	[Token(Token = "0x400019E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Material m_materialApply;

	[Token(Token = "0x1700006A")]
	protected Material materialLum
	{
		[Token(Token = "0x6000259")]
		[Address(RVA = "0x19E9254", Offset = "0x19E9254", VA = "0x19E9254")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700006B")]
	protected Material materialReduce
	{
		[Token(Token = "0x600025A")]
		[Address(RVA = "0x19E931C", Offset = "0x19E931C", VA = "0x19E931C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700006C")]
	protected Material materialAdapt
	{
		[Token(Token = "0x600025B")]
		[Address(RVA = "0x19E93E4", Offset = "0x19E93E4", VA = "0x19E93E4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700006D")]
	protected Material materialApply
	{
		[Token(Token = "0x600025C")]
		[Address(RVA = "0x19E94AC", Offset = "0x19E94AC", VA = "0x19E94AC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600025D")]
	[Address(RVA = "0x19E9574", Offset = "0x19E9574", VA = "0x19E9574")]
	private void Start()
	{
	}

	[Token(Token = "0x600025E")]
	[Address(RVA = "0x19E9634", Offset = "0x19E9634", VA = "0x19E9634")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600025F")]
	[Address(RVA = "0x19E97D4", Offset = "0x19E97D4", VA = "0x19E97D4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000260")]
	[Address(RVA = "0x19E9A24", Offset = "0x19E9A24", VA = "0x19E9A24")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x6000261")]
	[Address(RVA = "0x19E9CB8", Offset = "0x19E9CB8", VA = "0x19E9CB8")]
	private void CalculateAdaptation(Texture curTexture)
	{
	}

	[Token(Token = "0x6000262")]
	[Address(RVA = "0x19E9F24", Offset = "0x19E9F24", VA = "0x19E9F24")]
	public ContrastStretchEffect()
	{
	}
}
[Token(Token = "0x2000049")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x9A3A68", Offset = "0x9A3A68")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A3A68", Offset = "0x9A3A68")]
public class GlowEffect : MonoBehaviour
{
	[Token(Token = "0x400019F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float glowIntensity;

	[Token(Token = "0x40001A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int blurIterations;

	[Token(Token = "0x40001A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float blurSpread;

	[Token(Token = "0x40001A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Color glowTint;

	[Token(Token = "0x40001A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Shader compositeShader;

	[Token(Token = "0x40001A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Material m_CompositeMaterial;

	[Token(Token = "0x40001A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Shader blurShader;

	[Token(Token = "0x40001A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Material m_BlurMaterial;

	[Token(Token = "0x40001A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Shader downsampleShader;

	[Token(Token = "0x40001A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Material m_DownsampleMaterial;

	[Token(Token = "0x1700006E")]
	protected Material compositeMaterial
	{
		[Token(Token = "0x6000263")]
		[Address(RVA = "0x19EABA4", Offset = "0x19EABA4", VA = "0x19EABA4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700006F")]
	protected Material blurMaterial
	{
		[Token(Token = "0x6000264")]
		[Address(RVA = "0x19EAC6C", Offset = "0x19EAC6C", VA = "0x19EAC6C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000070")]
	protected Material downsampleMaterial
	{
		[Token(Token = "0x6000265")]
		[Address(RVA = "0x19EAD34", Offset = "0x19EAD34", VA = "0x19EAD34")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000266")]
	[Address(RVA = "0x19EADFC", Offset = "0x19EADFC", VA = "0x19EADFC")]
	protected void OnDisable()
	{
	}

	[Token(Token = "0x6000267")]
	[Address(RVA = "0x19EAF54", Offset = "0x19EAF54", VA = "0x19EAF54")]
	protected void Start()
	{
	}

	[Token(Token = "0x6000268")]
	[Address(RVA = "0x19EB0FC", Offset = "0x19EB0FC", VA = "0x19EB0FC")]
	public void FourTapCone(RenderTexture source, RenderTexture dest, int iteration)
	{
	}

	[Token(Token = "0x6000269")]
	[Address(RVA = "0x19EB2D8", Offset = "0x19EB2D8", VA = "0x19EB2D8")]
	private void DownSample4x(RenderTexture source, RenderTexture dest)
	{
	}

	[Token(Token = "0x600026A")]
	[Address(RVA = "0x19EB3C0", Offset = "0x19EB3C0", VA = "0x19EB3C0")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x600026B")]
	[Address(RVA = "0x19EB638", Offset = "0x19EB638", VA = "0x19EB638")]
	public void BlitGlow(RenderTexture source, RenderTexture dest)
	{
	}

	[Token(Token = "0x600026C")]
	[Address(RVA = "0x19EB75C", Offset = "0x19EB75C", VA = "0x19EB75C")]
	public GlowEffect()
	{
	}
}
[Token(Token = "0x200004A")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A3B00", Offset = "0x9A3B00")]
public class GrayscaleEffect : ImageEffectBase
{
	[Token(Token = "0x40001A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Texture textureRamp;

	[Token(Token = "0x40001AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float rampOffset;

	[Token(Token = "0x600026D")]
	[Address(RVA = "0x19EB7DC", Offset = "0x19EB7DC", VA = "0x19EB7DC")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x600026E")]
	[Address(RVA = "0x19EB8E4", Offset = "0x19EB8E4", VA = "0x19EB8E4")]
	public GrayscaleEffect()
	{
	}
}
[Token(Token = "0x200004B")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x9A3B4C", Offset = "0x9A3B4C")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A3B4C", Offset = "0x9A3B4C")]
public class ImageEffectBase : MonoBehaviour
{
	[Token(Token = "0x40001AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Shader shader;

	[Token(Token = "0x40001AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Material m_Material;

	[Token(Token = "0x17000071")]
	protected Material material
	{
		[Token(Token = "0x6000270")]
		[Address(RVA = "0x19E86A8", Offset = "0x19E86A8", VA = "0x19E86A8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600026F")]
	[Address(RVA = "0x19EB8EC", Offset = "0x19EB8EC", VA = "0x19EB8EC", Slot = "4")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x6000271")]
	[Address(RVA = "0x19EB9A4", Offset = "0x19EB9A4", VA = "0x19EB9A4", Slot = "5")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000272")]
	[Address(RVA = "0x19E8778", Offset = "0x19E8778", VA = "0x19E8778")]
	public ImageEffectBase()
	{
	}
}
[Token(Token = "0x200004C")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A3BD4", Offset = "0x9A3BD4")]
public class ImageEffects
{
	[Token(Token = "0x6000273")]
	[Address(RVA = "0x19EBA54", Offset = "0x19EBA54", VA = "0x19EBA54")]
	public static void RenderDistortion(Material material, RenderTexture source, RenderTexture destination, float angle, Vector2 center, Vector2 radius)
	{
	}

	[Token(Token = "0x6000274")]
	[Address(RVA = "0x19EBCE4", Offset = "0x19EBCE4", VA = "0x19EBCE4")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9A8F18", Offset = "0x9A8F18")]
	public static void Blit(RenderTexture source, RenderTexture dest)
	{
	}

	[Token(Token = "0x6000275")]
	[Address(RVA = "0x19EBD5C", Offset = "0x19EBD5C", VA = "0x19EBD5C")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9A8F50", Offset = "0x9A8F50")]
	public static void BlitWithMaterial(Material material, RenderTexture source, RenderTexture dest)
	{
	}

	[Token(Token = "0x6000276")]
	[Address(RVA = "0x19EBDDC", Offset = "0x19EBDDC", VA = "0x19EBDDC")]
	public ImageEffects()
	{
	}
}
[Token(Token = "0x200004D")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A3C0C", Offset = "0x9A3C0C")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x9A3C0C", Offset = "0x9A3C0C")]
public class MotionBlur : ImageEffectBase
{
	[Token(Token = "0x40001AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float blurAmount;

	[Token(Token = "0x40001AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool extraBlur;

	[Token(Token = "0x40001AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private RenderTexture accumTexture;

	[Token(Token = "0x6000277")]
	[Address(RVA = "0x15DBEA0", Offset = "0x15DBEA0", VA = "0x15DBEA0", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000278")]
	[Address(RVA = "0x15DBEE8", Offset = "0x15DBEE8", VA = "0x15DBEE8", Slot = "5")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x6000279")]
	[Address(RVA = "0x15DBF60", Offset = "0x15DBF60", VA = "0x15DBF60")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x600027A")]
	[Address(RVA = "0x15DC358", Offset = "0x15DC358", VA = "0x15DC358")]
	public MotionBlur()
	{
	}
}
[Token(Token = "0x200004E")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x9A3CA4", Offset = "0x9A3CA4")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A3CA4", Offset = "0x9A3CA4")]
public class NoiseEffect : MonoBehaviour
{
	[Token(Token = "0x40001B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool monochrome;

	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool rgbFallback;

	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float grainIntensityMin;

	[Token(Token = "0x40001B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float grainIntensityMax;

	[Token(Token = "0x40001B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float grainSize;

	[Token(Token = "0x40001B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float scratchIntensityMin;

	[Token(Token = "0x40001B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float scratchIntensityMax;

	[Token(Token = "0x40001B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float scratchFPS;

	[Token(Token = "0x40001B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float scratchJitter;

	[Token(Token = "0x40001B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Texture grainTexture;

	[Token(Token = "0x40001BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Texture scratchTexture;

	[Token(Token = "0x40001BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Shader shaderRGB;

	[Token(Token = "0x40001BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Shader shaderYUV;

	[Token(Token = "0x40001BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Material m_MaterialRGB;

	[Token(Token = "0x40001BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Material m_MaterialYUV;

	[Token(Token = "0x40001BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float scratchTimeLeft;

	[Token(Token = "0x40001C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float scratchX;

	[Token(Token = "0x40001C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float scratchY;

	[Token(Token = "0x17000072")]
	protected Material material
	{
		[Token(Token = "0x600027C")]
		[Address(RVA = "0x16C5A90", Offset = "0x16C5A90", VA = "0x16C5A90")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600027B")]
	[Address(RVA = "0x16C593C", Offset = "0x16C593C", VA = "0x16C593C")]
	protected void Start()
	{
	}

	[Token(Token = "0x600027D")]
	[Address(RVA = "0x16C5BF8", Offset = "0x16C5BF8", VA = "0x16C5BF8")]
	protected void OnDisable()
	{
	}

	[Token(Token = "0x600027E")]
	[Address(RVA = "0x16C5CFC", Offset = "0x16C5CFC", VA = "0x16C5CFC")]
	private void SanitizeParameters()
	{
	}

	[Token(Token = "0x600027F")]
	[Address(RVA = "0x16C5E38", Offset = "0x16C5E38", VA = "0x16C5E38")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x6000280")]
	[Address(RVA = "0x16C61DC", Offset = "0x16C61DC", VA = "0x16C61DC")]
	public NoiseEffect()
	{
	}
}
[Token(Token = "0x200004F")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A3D3C", Offset = "0x9A3D3C")]
public class SepiaToneEffect : ImageEffectBase
{
	[Token(Token = "0x6000281")]
	[Address(RVA = "0x16C72F8", Offset = "0x16C72F8", VA = "0x16C72F8")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x6000282")]
	[Address(RVA = "0x16C738C", Offset = "0x16C738C", VA = "0x16C738C")]
	public SepiaToneEffect()
	{
	}
}
[Token(Token = "0x2000050")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x9A3D88", Offset = "0x9A3D88")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A3D88", Offset = "0x9A3D88")]
public class SSAOEffect : MonoBehaviour
{
	[Token(Token = "0x20002B9")]
	public enum SSAOSamples
	{
		[Token(Token = "0x4000DF8")]
		Low,
		[Token(Token = "0x4000DF9")]
		Medium,
		[Token(Token = "0x4000DFA")]
		High
	}

	[Token(Token = "0x40001C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float m_Radius;

	[Token(Token = "0x40001C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public SSAOSamples m_SampleCount;

	[Token(Token = "0x40001C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float m_OcclusionIntensity;

	[Token(Token = "0x40001C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int m_Blur;

	[Token(Token = "0x40001C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int m_Downsampling;

	[Token(Token = "0x40001C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float m_OcclusionAttenuation;

	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float m_MinZ;

	[Token(Token = "0x40001C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Shader m_SSAOShader;

	[Token(Token = "0x40001CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Material m_SSAOMaterial;

	[Token(Token = "0x40001CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Texture2D m_RandomTexture;

	[Token(Token = "0x40001CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool m_Supported;

	[Token(Token = "0x6000283")]
	[Address(RVA = "0x16C6758", Offset = "0x16C6758", VA = "0x16C6758")]
	private static Material CreateMaterial(Shader shader)
	{
		return null;
	}

	[Token(Token = "0x6000284")]
	[Address(RVA = "0x16C680C", Offset = "0x16C680C", VA = "0x16C680C")]
	private static void DestroyMaterial(Material mat)
	{
	}

	[Token(Token = "0x6000285")]
	[Address(RVA = "0x16C68A8", Offset = "0x16C68A8", VA = "0x16C68A8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000286")]
	[Address(RVA = "0x16C68B0", Offset = "0x16C68B0", VA = "0x16C68B0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000287")]
	[Address(RVA = "0x16C6A70", Offset = "0x16C6A70", VA = "0x16C6A70")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000288")]
	[Address(RVA = "0x16C6990", Offset = "0x16C6990", VA = "0x16C6990")]
	private void CreateMaterials()
	{
	}

	[Token(Token = "0x6000289")]
	[Address(RVA = "0x16C6B08", Offset = "0x16C6B08", VA = "0x16C6B08")]
	[ImageEffectOpaque]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x600028A")]
	[Address(RVA = "0x16C72C0", Offset = "0x16C72C0", VA = "0x16C72C0")]
	public SSAOEffect()
	{
	}
}
[Token(Token = "0x2000051")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A3E20", Offset = "0x9A3E20")]
public class TwirlEffect : ImageEffectBase
{
	[Token(Token = "0x40001CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector2 radius;

	[Token(Token = "0x40001CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float angle;

	[Token(Token = "0x40001CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Vector2 center;

	[Token(Token = "0x600028B")]
	[Address(RVA = "0x19F6E58", Offset = "0x19F6E58", VA = "0x19F6E58")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x600028C")]
	[Address(RVA = "0x19F6EA4", Offset = "0x19F6EA4", VA = "0x19F6EA4")]
	public TwirlEffect()
	{
	}
}
[Token(Token = "0x2000052")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A3E6C", Offset = "0x9A3E6C")]
public class VortexEffect : ImageEffectBase
{
	[Token(Token = "0x40001D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector2 radius;

	[Token(Token = "0x40001D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float angle;

	[Token(Token = "0x40001D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Vector2 center;

	[Token(Token = "0x600028D")]
	[Address(RVA = "0x21DF204", Offset = "0x21DF204", VA = "0x21DF204")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x600028E")]
	[Address(RVA = "0x21DF250", Offset = "0x21DF250", VA = "0x21DF250")]
	public VortexEffect()
	{
	}
}
namespace UnityStandardAssets.ImageEffects
{
	[Token(Token = "0x2000053")]
	public enum AAMode
	{
		[Token(Token = "0x40001D4")]
		FXAA2,
		[Token(Token = "0x40001D5")]
		FXAA3Console,
		[Token(Token = "0x40001D6")]
		FXAA1PresetA,
		[Token(Token = "0x40001D7")]
		FXAA1PresetB,
		[Token(Token = "0x40001D8")]
		NFAA,
		[Token(Token = "0x40001D9")]
		SSAA,
		[Token(Token = "0x40001DA")]
		DLAA
	}
	[Token(Token = "0x2000054")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x9A3EB8", Offset = "0x9A3EB8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A3EB8", Offset = "0x9A3EB8")]
	public class Antialiasing : PostEffectsBase
	{
		[Token(Token = "0x40001DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AAMode mode;

		[Token(Token = "0x40001DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool showGeneratedNormals;

		[Token(Token = "0x40001DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float offsetScale;

		[Token(Token = "0x40001DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float blurRadius;

		[Token(Token = "0x40001DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float edgeThresholdMin;

		[Token(Token = "0x40001E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float edgeThreshold;

		[Token(Token = "0x40001E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float edgeSharpness;

		[Token(Token = "0x40001E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool dlaaSharp;

		[Token(Token = "0x40001E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader ssaaShader;

		[Token(Token = "0x40001E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material ssaa;

		[Token(Token = "0x40001E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader dlaaShader;

		[Token(Token = "0x40001E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material dlaa;

		[Token(Token = "0x40001E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Shader nfaaShader;

		[Token(Token = "0x40001E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material nfaa;

		[Token(Token = "0x40001E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Shader shaderFXAAPreset2;

		[Token(Token = "0x40001EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material materialFXAAPreset2;

		[Token(Token = "0x40001EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Shader shaderFXAAPreset3;

		[Token(Token = "0x40001EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Material materialFXAAPreset3;

		[Token(Token = "0x40001ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Shader shaderFXAAII;

		[Token(Token = "0x40001EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Material materialFXAAII;

		[Token(Token = "0x40001EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Shader shaderFXAAIII;

		[Token(Token = "0x40001F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Material materialFXAAIII;

		[Token(Token = "0x600028F")]
		[Address(RVA = "0x19F6F20", Offset = "0x19F6F20", VA = "0x19F6F20")]
		public Material CurrentAAMaterial()
		{
			return null;
		}

		[Token(Token = "0x6000290")]
		[Address(RVA = "0x19F6F84", Offset = "0x19F6F84", VA = "0x19F6F84", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000291")]
		[Address(RVA = "0x19F7074", Offset = "0x19F7074", VA = "0x19F7074")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000292")]
		[Address(RVA = "0x19F7680", Offset = "0x19F7680", VA = "0x19F7680")]
		public Antialiasing()
		{
		}
	}
	[Token(Token = "0x2000055")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x9A3F50", Offset = "0x9A3F50")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A3F50", Offset = "0x9A3F50")]
	public class Bloom : PostEffectsBase
	{
		[Token(Token = "0x20002BA")]
		public enum LensFlareStyle
		{
			[Token(Token = "0x4000DFC")]
			Ghosting,
			[Token(Token = "0x4000DFD")]
			Anamorphic,
			[Token(Token = "0x4000DFE")]
			Combined
		}

		[Token(Token = "0x20002BB")]
		public enum TweakMode
		{
			[Token(Token = "0x4000E00")]
			Basic,
			[Token(Token = "0x4000E01")]
			Complex
		}

		[Token(Token = "0x20002BC")]
		public enum HDRBloomMode
		{
			[Token(Token = "0x4000E03")]
			Auto,
			[Token(Token = "0x4000E04")]
			On,
			[Token(Token = "0x4000E05")]
			Off
		}

		[Token(Token = "0x20002BD")]
		public enum BloomScreenBlendMode
		{
			[Token(Token = "0x4000E07")]
			Screen,
			[Token(Token = "0x4000E08")]
			Add
		}

		[Token(Token = "0x20002BE")]
		public enum BloomQuality
		{
			[Token(Token = "0x4000E0A")]
			Cheap,
			[Token(Token = "0x4000E0B")]
			High
		}

		[Token(Token = "0x40001F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public new string name;

		[Token(Token = "0x40001F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool showBoring;

		[Token(Token = "0x40001F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public TweakMode tweakMode;

		[Token(Token = "0x40001F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BloomScreenBlendMode screenBlendMode;

		[Token(Token = "0x40001F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public HDRBloomMode hdr;

		[Token(Token = "0x40001F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool doHdr;

		[Token(Token = "0x40001F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float sepBlurSpread;

		[Token(Token = "0x40001F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public BloomQuality quality;

		[Token(Token = "0x40001F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float bloomIntensity;

		[Token(Token = "0x40001FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float bloomThreshold;

		[Token(Token = "0x40001FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Color bloomThresholdColor;

		[Token(Token = "0x40001FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public int bloomBlurIterations;

		[Token(Token = "0x40001FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int hollywoodFlareBlurIterations;

		[Token(Token = "0x40001FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float flareRotation;

		[Token(Token = "0x40001FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public LensFlareStyle lensflareMode;

		[Token(Token = "0x4000200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float hollyStretchWidth;

		[Token(Token = "0x4000201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float lensflareIntensity;

		[Token(Token = "0x4000202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float lensflareThreshold;

		[Token(Token = "0x4000203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float lensFlareSaturation;

		[Token(Token = "0x4000204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public Color flareColorA;

		[Token(Token = "0x4000205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public Color flareColorB;

		[Token(Token = "0x4000206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public Color flareColorC;

		[Token(Token = "0x4000207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public Color flareColorD;

		[Token(Token = "0x4000208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Texture2D lensFlareVignetteMask;

		[Token(Token = "0x4000209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Shader lensFlareShader;

		[Token(Token = "0x400020A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Material lensFlareMaterial;

		[Token(Token = "0x400020B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Shader screenBlendShader;

		[Token(Token = "0x400020C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Material screenBlend;

		[Token(Token = "0x400020D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Shader blurAndFlaresShader;

		[Token(Token = "0x400020E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Material blurAndFlaresMaterial;

		[Token(Token = "0x400020F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public Shader brightPassFilterShader;

		[Token(Token = "0x4000210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Material brightPassFilterMaterial;

		[Token(Token = "0x4000211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public bool useRedOnly;

		[Token(Token = "0x6000293")]
		[Address(RVA = "0x19F76A4", Offset = "0x19F76A4", VA = "0x19F76A4", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000294")]
		[Address(RVA = "0x19F7744", Offset = "0x19F7744", VA = "0x19F7744")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000295")]
		[Address(RVA = "0x19F8E48", Offset = "0x19F8E48", VA = "0x19F8E48")]
		private void AddTo(float intensity_, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6000296")]
		[Address(RVA = "0x19F8B9C", Offset = "0x19F8B9C", VA = "0x19F8B9C")]
		private void BlendFlares(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6000297")]
		[Address(RVA = "0x19F8838", Offset = "0x19F8838", VA = "0x19F8838")]
		private void BrightFilter(float thresh, RenderTexture from, RenderTexture to, float readOnly = 0f)
		{
		}

		[Token(Token = "0x6000298")]
		[Address(RVA = "0x19F86C8", Offset = "0x19F86C8", VA = "0x19F86C8")]
		private void BrightFilter(Color threshColor, RenderTexture from, RenderTexture to, float readOnly = 0f)
		{
		}

		[Token(Token = "0x6000299")]
		[Address(RVA = "0x19F897C", Offset = "0x19F897C", VA = "0x19F897C")]
		private void Vignette(float amount, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x600029A")]
		[Address(RVA = "0x19F8F20", Offset = "0x19F8F20", VA = "0x19F8F20")]
		public Bloom()
		{
		}
	}
	[Token(Token = "0x2000056")]
	public enum LensflareStyle34
	{
		[Token(Token = "0x4000213")]
		Ghosting,
		[Token(Token = "0x4000214")]
		Anamorphic,
		[Token(Token = "0x4000215")]
		Combined
	}
	[Token(Token = "0x2000057")]
	public enum TweakMode34
	{
		[Token(Token = "0x4000217")]
		Basic,
		[Token(Token = "0x4000218")]
		Complex
	}
	[Token(Token = "0x2000058")]
	public enum HDRBloomMode
	{
		[Token(Token = "0x400021A")]
		Auto,
		[Token(Token = "0x400021B")]
		On,
		[Token(Token = "0x400021C")]
		Off
	}
	[Token(Token = "0x2000059")]
	public enum BloomScreenBlendMode
	{
		[Token(Token = "0x400021E")]
		Screen,
		[Token(Token = "0x400021F")]
		Add
	}
	[Token(Token = "0x200005A")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x9A3FE8", Offset = "0x9A3FE8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A3FE8", Offset = "0x9A3FE8")]
	public class BloomAndFlares : PostEffectsBase
	{
		[Token(Token = "0x4000220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TweakMode34 tweakMode;

		[Token(Token = "0x4000221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BloomScreenBlendMode screenBlendMode;

		[Token(Token = "0x4000222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public HDRBloomMode hdr;

		[Token(Token = "0x4000223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool doHdr;

		[Token(Token = "0x4000224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float sepBlurSpread;

		[Token(Token = "0x4000225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float useSrcAlphaAsMask;

		[Token(Token = "0x4000226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float bloomIntensity;

		[Token(Token = "0x4000227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float bloomThreshold;

		[Token(Token = "0x4000228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int bloomBlurIterations;

		[Token(Token = "0x4000229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool lensflares;

		[Token(Token = "0x400022A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int hollywoodFlareBlurIterations;

		[Token(Token = "0x400022B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public LensflareStyle34 lensflareMode;

		[Token(Token = "0x400022C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float hollyStretchWidth;

		[Token(Token = "0x400022D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float lensflareIntensity;

		[Token(Token = "0x400022E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float lensflareThreshold;

		[Token(Token = "0x400022F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Color flareColorA;

		[Token(Token = "0x4000230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Color flareColorB;

		[Token(Token = "0x4000231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Color flareColorC;

		[Token(Token = "0x4000232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Color flareColorD;

		[Token(Token = "0x4000233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Texture2D lensFlareVignetteMask;

		[Token(Token = "0x4000234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Shader lensFlareShader;

		[Token(Token = "0x4000235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Material lensFlareMaterial;

		[Token(Token = "0x4000236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Shader vignetteShader;

		[Token(Token = "0x4000237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Material vignetteMaterial;

		[Token(Token = "0x4000238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Shader separableBlurShader;

		[Token(Token = "0x4000239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Material separableBlurMaterial;

		[Token(Token = "0x400023A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Shader addBrightStuffOneOneShader;

		[Token(Token = "0x400023B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Material addBrightStuffBlendOneOneMaterial;

		[Token(Token = "0x400023C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Shader screenBlendShader;

		[Token(Token = "0x400023D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Material screenBlend;

		[Token(Token = "0x400023E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Shader hollywoodFlaresShader;

		[Token(Token = "0x400023F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Material hollywoodFlaresMaterial;

		[Token(Token = "0x4000240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Shader brightPassFilterShader;

		[Token(Token = "0x4000241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Material brightPassFilterMaterial;

		[Token(Token = "0x600029B")]
		[Address(RVA = "0x19F90D4", Offset = "0x19F90D4", VA = "0x19F90D4", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600029C")]
		[Address(RVA = "0x19F91B0", Offset = "0x19F91B0", VA = "0x19F91B0")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600029D")]
		[Address(RVA = "0x19FA3A8", Offset = "0x19FA3A8", VA = "0x19FA3A8")]
		private void AddTo(float intensity_, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x600029E")]
		[Address(RVA = "0x19FA114", Offset = "0x19FA114", VA = "0x19FA114")]
		private void BlendFlares(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x600029F")]
		[Address(RVA = "0x19F9E64", Offset = "0x19F9E64", VA = "0x19F9E64")]
		private void BrightFilter(float thresh, float useAlphaAsMask, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60002A0")]
		[Address(RVA = "0x19F9F9C", Offset = "0x19F9F9C", VA = "0x19F9F9C")]
		private void Vignette(float amount, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60002A1")]
		[Address(RVA = "0x19FA464", Offset = "0x19FA464", VA = "0x19FA464")]
		public BloomAndFlares()
		{
		}
	}
	[Token(Token = "0x200005B")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x9A4080", Offset = "0x9A4080")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A4080", Offset = "0x9A4080")]
	public class BloomHotswitch : PostEffectsBase
	{
		[Token(Token = "0x20002BF")]
		public enum LensFlareStyle
		{
			[Token(Token = "0x4000E0D")]
			Ghosting,
			[Token(Token = "0x4000E0E")]
			Anamorphic,
			[Token(Token = "0x4000E0F")]
			Combined
		}

		[Token(Token = "0x20002C0")]
		public enum TweakMode
		{
			[Token(Token = "0x4000E11")]
			Basic,
			[Token(Token = "0x4000E12")]
			Complex
		}

		[Token(Token = "0x20002C1")]
		public enum HDRBloomMode
		{
			[Token(Token = "0x4000E14")]
			Auto,
			[Token(Token = "0x4000E15")]
			On,
			[Token(Token = "0x4000E16")]
			Off
		}

		[Token(Token = "0x20002C2")]
		public enum BloomScreenBlendMode
		{
			[Token(Token = "0x4000E18")]
			Screen,
			[Token(Token = "0x4000E19")]
			Add
		}

		[Token(Token = "0x20002C3")]
		public enum BloomQuality
		{
			[Token(Token = "0x4000E1B")]
			Cheap,
			[Token(Token = "0x4000E1C")]
			High
		}

		[Token(Token = "0x4000242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public new string name;

		[Token(Token = "0x4000243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float power;

		[Token(Token = "0x4000244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public TweakMode tweakMode;

		[Token(Token = "0x4000245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BloomScreenBlendMode screenBlendMode;

		[Token(Token = "0x4000246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public HDRBloomMode hdr;

		[Token(Token = "0x4000247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool doHdr;

		[Token(Token = "0x4000248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float sepBlurSpread;

		[Token(Token = "0x4000249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public BloomQuality quality;

		[Token(Token = "0x400024A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float bloomIntensity;

		[Token(Token = "0x400024B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float bloomThreshold;

		[Token(Token = "0x400024C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Color bloomThresholdColor;

		[Token(Token = "0x400024D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public int bloomBlurIterations;

		[Token(Token = "0x400024E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int hollywoodFlareBlurIterations;

		[Token(Token = "0x400024F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float flareRotation;

		[Token(Token = "0x4000250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public LensFlareStyle lensflareMode;

		[Token(Token = "0x4000251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float hollyStretchWidth;

		[Token(Token = "0x4000252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float lensflareIntensity;

		[Token(Token = "0x4000253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float lensflareThreshold;

		[Token(Token = "0x4000254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float lensFlareSaturation;

		[Token(Token = "0x4000255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public Color flareColorA;

		[Token(Token = "0x4000256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public Color flareColorB;

		[Token(Token = "0x4000257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public Color flareColorC;

		[Token(Token = "0x4000258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public Color flareColorD;

		[Token(Token = "0x4000259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Texture2D lensFlareVignetteMask;

		[Token(Token = "0x400025A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Shader lensFlareShader;

		[Token(Token = "0x400025B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Material lensFlareMaterial;

		[Token(Token = "0x400025C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Shader screenBlendShader;

		[Token(Token = "0x400025D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Material screenBlend;

		[Token(Token = "0x400025E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Shader AlphaToRedScreenBlendShader;

		[Token(Token = "0x400025F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Material AlphaToRedScreenBlendMaterial;

		[Token(Token = "0x4000260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public Shader blurAndFlaresShader;

		[Token(Token = "0x4000261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Material blurAndFlaresMaterial;

		[Token(Token = "0x4000262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public Shader brightPassFilterShader;

		[Token(Token = "0x4000263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Material brightPassFilterMaterial;

		[Token(Token = "0x4000264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public Shader alphaToRedFinalMaskFilterShader;

		[Token(Token = "0x4000265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Material alphaToRedFinalMaskFilterMaterial;

		[Token(Token = "0x4000266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public Shader alphaToRedBrightPassFilterShader;

		[Token(Token = "0x4000267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Material alphaToRedBrightPassFilterMaterial;

		[Token(Token = "0x4000268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public Texture2D alphaToRedBloomMask;

		[Token(Token = "0x60002A2")]
		[Address(RVA = "0x19FA5D0", Offset = "0x19FA5D0", VA = "0x19FA5D0", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60002A3")]
		[Address(RVA = "0x19FA6AC", Offset = "0x19FA6AC", VA = "0x19FA6AC")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60002A4")]
		[Address(RVA = "0x19FBD4C", Offset = "0x19FBD4C", VA = "0x19FBD4C")]
		private void AddTo(float intensity_, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60002A5")]
		[Address(RVA = "0x19FBAA0", Offset = "0x19FBAA0", VA = "0x19FBAA0")]
		private void BlendFlares(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60002A6")]
		[Address(RVA = "0x19FB73C", Offset = "0x19FB73C", VA = "0x19FB73C")]
		private void BrightFilter(float thresh, RenderTexture from, RenderTexture to, float readOnly = 0f)
		{
		}

		[Token(Token = "0x60002A7")]
		[Address(RVA = "0x19FBE24", Offset = "0x19FBE24", VA = "0x19FBE24")]
		private void BrightFilter(Color threshColor, RenderTexture from, RenderTexture to, float readOnly = 0f)
		{
		}

		[Token(Token = "0x60002A8")]
		[Address(RVA = "0x19FB680", Offset = "0x19FB680", VA = "0x19FB680")]
		private void AlphaToRedFilter(RenderTexture from, RenderTexture to, float power)
		{
		}

		[Token(Token = "0x60002A9")]
		[Address(RVA = "0x19FB880", Offset = "0x19FB880", VA = "0x19FB880")]
		private void Vignette(float amount, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60002AA")]
		[Address(RVA = "0x19FBF94", Offset = "0x19FBF94", VA = "0x19FBF94")]
		public BloomHotswitch()
		{
		}
	}
	[Token(Token = "0x200005C")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x9A4118", Offset = "0x9A4118")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A4118", Offset = "0x9A4118")]
	public class BloomOptimized : PostEffectsBase
	{
		[Token(Token = "0x20002C4")]
		public enum Resolution
		{
			[Token(Token = "0x4000E1E")]
			Low,
			[Token(Token = "0x4000E1F")]
			High
		}

		[Token(Token = "0x20002C5")]
		public enum BlurType
		{
			[Token(Token = "0x4000E21")]
			Standard,
			[Token(Token = "0x4000E22")]
			Sgx
		}

		[Token(Token = "0x4000269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A7940", Offset = "0x9A7940")]
		public float threshold;

		[Token(Token = "0x400026A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A7958", Offset = "0x9A7958")]
		public float intensity;

		[Token(Token = "0x400026B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A7970", Offset = "0x9A7970")]
		public float blurSize;

		[Token(Token = "0x400026C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Resolution resolution;

		[Token(Token = "0x400026D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A7988", Offset = "0x9A7988")]
		public int blurIterations;

		[Token(Token = "0x400026E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BlurType blurType;

		[Token(Token = "0x400026F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader fastBloomShader;

		[Token(Token = "0x4000270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material fastBloomMaterial;

		[Token(Token = "0x60002AB")]
		[Address(RVA = "0x19FC150", Offset = "0x19FC150", VA = "0x19FC150", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60002AC")]
		[Address(RVA = "0x19FC1B4", Offset = "0x19FC1B4", VA = "0x19FC1B4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60002AD")]
		[Address(RVA = "0x19FC264", Offset = "0x19FC264", VA = "0x19FC264")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60002AE")]
		[Address(RVA = "0x19FC6C0", Offset = "0x19FC6C0", VA = "0x19FC6C0")]
		public BloomOptimized()
		{
		}
	}
	[Token(Token = "0x200005D")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A41B0", Offset = "0x9A41B0")]
	public class Blur : MonoBehaviour
	{
		[Token(Token = "0x4000271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int iterations;

		[Token(Token = "0x4000272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float blurSpread;

		[Token(Token = "0x4000273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Shader blurShader;

		[Token(Token = "0x4000274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Material m_Material;

		[Token(Token = "0x17000073")]
		protected Material material
		{
			[Token(Token = "0x60002AF")]
			[Address(RVA = "0x19FC6E4", Offset = "0x19FC6E4", VA = "0x19FC6E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002B0")]
		[Address(RVA = "0x19FC824", Offset = "0x19FC824", VA = "0x19FC824")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x60002B1")]
		[Address(RVA = "0x19FC920", Offset = "0x19FC920", VA = "0x19FC920")]
		protected void Start()
		{
		}

		[Token(Token = "0x60002B2")]
		[Address(RVA = "0x19FC9F4", Offset = "0x19FC9F4", VA = "0x19FC9F4")]
		public void FourTapCone(RenderTexture source, RenderTexture dest, int iteration)
		{
		}

		[Token(Token = "0x60002B3")]
		[Address(RVA = "0x19FCBD0", Offset = "0x19FCBD0", VA = "0x19FCBD0")]
		private void DownSample4x(RenderTexture source, RenderTexture dest)
		{
		}

		[Token(Token = "0x60002B4")]
		[Address(RVA = "0x19FCD88", Offset = "0x19FCD88", VA = "0x19FCD88")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60002B5")]
		[Address(RVA = "0x19FCF04", Offset = "0x19FCF04", VA = "0x19FCF04")]
		public Blur()
		{
		}
	}
	[Token(Token = "0x200005E")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x9A41FC", Offset = "0x9A41FC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A41FC", Offset = "0x9A41FC")]
	public class BlurOptimized : PostEffectsBase
	{
		[Token(Token = "0x20002C6")]
		public enum BlurType
		{
			[Token(Token = "0x4000E24")]
			StandardGauss,
			[Token(Token = "0x4000E25")]
			SgxGauss
		}

		[Token(Token = "0x4000275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A79A0", Offset = "0x9A79A0")]
		public int downsample;

		[Token(Token = "0x4000276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A79B8", Offset = "0x9A79B8")]
		public float blurSize;

		[Token(Token = "0x4000277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A79D0", Offset = "0x9A79D0")]
		public int blurIterations;

		[Token(Token = "0x4000278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BlurType blurType;

		[Token(Token = "0x4000279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shader blurShader;

		[Token(Token = "0x400027A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material blurMaterial;

		[Token(Token = "0x60002B7")]
		[Address(RVA = "0x19FCF20", Offset = "0x19FCF20", VA = "0x19FCF20", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60002B8")]
		[Address(RVA = "0x19FCF84", Offset = "0x19FCF84", VA = "0x19FCF84")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x60002B9")]
		[Address(RVA = "0x19FD034", Offset = "0x19FD034", VA = "0x19FD034")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60002BA")]
		[Address(RVA = "0x19FD464", Offset = "0x19FD464", VA = "0x19FD464")]
		public BlurOptimized()
		{
		}
	}
	[Token(Token = "0x200005F")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x9A4294", Offset = "0x9A4294")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A4294", Offset = "0x9A4294")]
	public class CameraMotionBlur : PostEffectsBase
	{
		[Token(Token = "0x20002C7")]
		public enum MotionBlurFilter
		{
			[Token(Token = "0x4000E27")]
			CameraMotion,
			[Token(Token = "0x4000E28")]
			LocalBlur,
			[Token(Token = "0x4000E29")]
			Reconstruction,
			[Token(Token = "0x4000E2A")]
			ReconstructionDX11,
			[Token(Token = "0x4000E2B")]
			ReconstructionDisc
		}

		[Token(Token = "0x400027B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float MAX_RADIUS;

		[Token(Token = "0x400027C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public MotionBlurFilter filterType;

		[Token(Token = "0x400027D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool preview;

		[Token(Token = "0x400027E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 previewScale;

		[Token(Token = "0x400027F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float movementScale;

		[Token(Token = "0x4000280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float rotationScale;

		[Token(Token = "0x4000281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float maxVelocity;

		[Token(Token = "0x4000282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float minVelocity;

		[Token(Token = "0x4000283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float velocityScale;

		[Token(Token = "0x4000284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float softZDistance;

		[Token(Token = "0x4000285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int velocityDownsample;

		[Token(Token = "0x4000286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public LayerMask excludeLayers;

		[Token(Token = "0x4000287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GameObject tmpCam;

		[Token(Token = "0x4000288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader shader;

		[Token(Token = "0x4000289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Shader dx11MotionBlurShader;

		[Token(Token = "0x400028A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader replacementClear;

		[Token(Token = "0x400028B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material motionBlurMaterial;

		[Token(Token = "0x400028C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material dx11MotionBlurMaterial;

		[Token(Token = "0x400028D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Texture2D noiseTexture;

		[Token(Token = "0x400028E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float jitter;

		[Token(Token = "0x400028F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public bool showVelocity;

		[Token(Token = "0x4000290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float showVelocityScale;

		[Token(Token = "0x4000291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Matrix4x4 currentViewProjMat;

		[Token(Token = "0x4000292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Matrix4x4 prevViewProjMat;

		[Token(Token = "0x4000293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private int prevFrameCount;

		[Token(Token = "0x4000294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private bool wasActive;

		[Token(Token = "0x4000295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private Vector3 prevFrameForward;

		[Token(Token = "0x4000296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Vector3 prevFrameUp;

		[Token(Token = "0x4000297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private Vector3 prevFramePos;

		[Token(Token = "0x4000298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Camera _camera;

		[Token(Token = "0x60002BB")]
		[Address(RVA = "0x19FD480", Offset = "0x19FD480", VA = "0x19FD480")]
		private void CalculateViewProjection()
		{
		}

		[Token(Token = "0x60002BC")]
		[Address(RVA = "0x19FD5E8", Offset = "0x19FD5E8", VA = "0x19FD5E8")]
		private new void Start()
		{
		}

		[Token(Token = "0x60002BD")]
		[Address(RVA = "0x19FD794", Offset = "0x19FD794", VA = "0x19FD794")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60002BE")]
		[Address(RVA = "0x19FD874", Offset = "0x19FD874", VA = "0x19FD874")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60002BF")]
		[Address(RVA = "0x19FD9D8", Offset = "0x19FD9D8", VA = "0x19FD9D8", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60002C0")]
		[Address(RVA = "0x19FDA70", Offset = "0x19FDA70", VA = "0x19FDA70")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60002C1")]
		[Address(RVA = "0x19FD6C8", Offset = "0x19FD6C8", VA = "0x19FD6C8")]
		private void Remember()
		{
		}

		[Token(Token = "0x60002C2")]
		[Address(RVA = "0x19FF3FC", Offset = "0x19FF3FC", VA = "0x19FF3FC")]
		private Camera GetTmpCam()
		{
			return null;
		}

		[Token(Token = "0x60002C3")]
		[Address(RVA = "0x19FF308", Offset = "0x19FF308", VA = "0x19FF308")]
		private void StartFrame()
		{
		}

		[Token(Token = "0x60002C4")]
		[Address(RVA = "0x19FF3EC", Offset = "0x19FF3EC", VA = "0x19FF3EC")]
		private static int divRoundUp(int x, int d)
		{
			return default(int);
		}

		[Token(Token = "0x60002C5")]
		[Address(RVA = "0x19FF8A0", Offset = "0x19FF8A0", VA = "0x19FF8A0")]
		public CameraMotionBlur()
		{
		}
	}
	[Token(Token = "0x2000060")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A432C", Offset = "0x9A432C")]
	public class ColorCorrectionCurves : PostEffectsBase
	{
		[Token(Token = "0x20002C8")]
		public enum ColorCorrectionMode
		{
			[Token(Token = "0x4000E2D")]
			Simple,
			[Token(Token = "0x4000E2E")]
			Advanced
		}

		[Token(Token = "0x4000299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve redChannel;

		[Token(Token = "0x400029A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve greenChannel;

		[Token(Token = "0x400029B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve blueChannel;

		[Token(Token = "0x400029C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool useDepthCorrection;

		[Token(Token = "0x400029D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationCurve zCurve;

		[Token(Token = "0x400029E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AnimationCurve depthRedChannel;

		[Token(Token = "0x400029F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve depthGreenChannel;

		[Token(Token = "0x40002A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AnimationCurve depthBlueChannel;

		[Token(Token = "0x40002A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material ccMaterial;

		[Token(Token = "0x40002A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material ccDepthMaterial;

		[Token(Token = "0x40002A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material selectiveCcMaterial;

		[Token(Token = "0x40002A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Texture2D rgbChannelTex;

		[Token(Token = "0x40002A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Texture2D rgbDepthChannelTex;

		[Token(Token = "0x40002A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Texture2D zCurveTex;

		[Token(Token = "0x40002A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float saturation;

		[Token(Token = "0x40002A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public bool selectiveCc;

		[Token(Token = "0x40002A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Color selectiveFromColor;

		[Token(Token = "0x40002AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Color selectiveToColor;

		[Token(Token = "0x40002AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public ColorCorrectionMode mode;

		[Token(Token = "0x40002AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public bool updateTextures;

		[Token(Token = "0x40002AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Shader colorCorrectionCurvesShader;

		[Token(Token = "0x40002AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Shader simpleColorCorrectionCurvesShader;

		[Token(Token = "0x40002AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Shader colorCorrectionSelectiveShader;

		[Token(Token = "0x40002B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool updateTexturesOnStartup;

		[Token(Token = "0x60002C7")]
		[Address(RVA = "0x19FF9F0", Offset = "0x19FF9F0", VA = "0x19FF9F0")]
		private new void Start()
		{
		}

		[Token(Token = "0x60002C8")]
		[Address(RVA = "0x19FFA1C", Offset = "0x19FFA1C", VA = "0x19FFA1C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60002C9")]
		[Address(RVA = "0x19FFA20", Offset = "0x19FFA20", VA = "0x19FFA20", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60002CA")]
		[Address(RVA = "0x19FFCD8", Offset = "0x19FFCD8", VA = "0x19FFCD8")]
		public void UpdateParameters()
		{
		}

		[Token(Token = "0x60002CB")]
		[Address(RVA = "0x1A0017C", Offset = "0x1A0017C", VA = "0x1A0017C")]
		private void UpdateTextures()
		{
		}

		[Token(Token = "0x60002CC")]
		[Address(RVA = "0x1A00180", Offset = "0x1A00180", VA = "0x1A00180")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60002CD")]
		[Address(RVA = "0x1A0056C", Offset = "0x1A0056C", VA = "0x1A0056C")]
		public ColorCorrectionCurves()
		{
		}
	}
	[Token(Token = "0x2000061")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A4378", Offset = "0x9A4378")]
	public class ColorCorrectionLookup : PostEffectsBase
	{
		[Token(Token = "0x40002B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Shader shader;

		[Token(Token = "0x40002B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material material;

		[Token(Token = "0x40002B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Texture3D converted3DLut;

		[Token(Token = "0x40002B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string basedOnTempTex;

		[Token(Token = "0x60002CE")]
		[Address(RVA = "0x1A00CA8", Offset = "0x1A00CA8", VA = "0x1A00CA8", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60002CF")]
		[Address(RVA = "0x1A00D08", Offset = "0x1A00D08", VA = "0x1A00D08")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60002D0")]
		[Address(RVA = "0x1A00DB0", Offset = "0x1A00DB0", VA = "0x1A00DB0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60002D1")]
		[Address(RVA = "0x1A00E58", Offset = "0x1A00E58", VA = "0x1A00E58")]
		public void SetIdentityLut()
		{
		}

		[Token(Token = "0x60002D2")]
		[Address(RVA = "0x1A010A0", Offset = "0x1A010A0", VA = "0x1A010A0")]
		public bool ValidDimensions(Texture2D tex2d)
		{
			return default(bool);
		}

		[Token(Token = "0x60002D3")]
		[Address(RVA = "0x1A011A4", Offset = "0x1A011A4", VA = "0x1A011A4")]
		public void Convert(Texture2D temp2DTex, string path)
		{
		}

		[Token(Token = "0x60002D4")]
		[Address(RVA = "0x1A015A4", Offset = "0x1A015A4", VA = "0x1A015A4")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60002D5")]
		[Address(RVA = "0x1A017D0", Offset = "0x1A017D0", VA = "0x1A017D0")]
		public ColorCorrectionLookup()
		{
		}
	}
	[Token(Token = "0x2000062")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A43C4", Offset = "0x9A43C4")]
	public class ColorCorrectionRamp : ImageEffectBase
	{
		[Token(Token = "0x40002B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Texture textureRamp;

		[Token(Token = "0x60002D6")]
		[Address(RVA = "0x1A01828", Offset = "0x1A01828", VA = "0x1A01828")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60002D7")]
		[Address(RVA = "0x1A018FC", Offset = "0x1A018FC", VA = "0x1A018FC")]
		public ColorCorrectionRamp()
		{
		}
	}
	[Token(Token = "0x2000063")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x9A4410", Offset = "0x9A4410")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A4410", Offset = "0x9A4410")]
	internal class ContrastEnhance : PostEffectsBase
	{
		[Token(Token = "0x40002B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float intensity;

		[Token(Token = "0x40002B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float threshold;

		[Token(Token = "0x40002B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material separableBlurMaterial;

		[Token(Token = "0x40002B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material contrastCompositeMaterial;

		[Token(Token = "0x40002BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float blurSpread;

		[Token(Token = "0x40002BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader separableBlurShader;

		[Token(Token = "0x40002BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader contrastCompositeShader;

		[Token(Token = "0x60002D8")]
		[Address(RVA = "0x1A01904", Offset = "0x1A01904", VA = "0x1A01904", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60002D9")]
		[Address(RVA = "0x1A01984", Offset = "0x1A01984", VA = "0x1A01984")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60002DA")]
		[Address(RVA = "0x1A01D40", Offset = "0x1A01D40", VA = "0x1A01D40")]
		public ContrastEnhance()
		{
		}
	}
	[Token(Token = "0x2000064")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A44A8", Offset = "0x9A44A8")]
	public class ContrastStretch : MonoBehaviour
	{
		[Token(Token = "0x40002BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float adaptationSpeed;

		[Token(Token = "0x40002BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float limitMinimum;

		[Token(Token = "0x40002BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float limitMaximum;

		[Token(Token = "0x40002C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RenderTexture[] adaptRenderTex;

		[Token(Token = "0x40002C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int curAdaptIndex;

		[Token(Token = "0x40002C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader shaderLum;

		[Token(Token = "0x40002C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material m_materialLum;

		[Token(Token = "0x40002C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader shaderReduce;

		[Token(Token = "0x40002C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material m_materialReduce;

		[Token(Token = "0x40002C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader shaderAdapt;

		[Token(Token = "0x40002C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material m_materialAdapt;

		[Token(Token = "0x40002C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader shaderApply;

		[Token(Token = "0x40002C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material m_materialApply;

		[Token(Token = "0x17000074")]
		protected Material materialLum
		{
			[Token(Token = "0x60002DB")]
			[Address(RVA = "0x1A01D58", Offset = "0x1A01D58", VA = "0x1A01D58")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000075")]
		protected Material materialReduce
		{
			[Token(Token = "0x60002DC")]
			[Address(RVA = "0x1A01E20", Offset = "0x1A01E20", VA = "0x1A01E20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000076")]
		protected Material materialAdapt
		{
			[Token(Token = "0x60002DD")]
			[Address(RVA = "0x1A01EE8", Offset = "0x1A01EE8", VA = "0x1A01EE8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000077")]
		protected Material materialApply
		{
			[Token(Token = "0x60002DE")]
			[Address(RVA = "0x1A01FB0", Offset = "0x1A01FB0", VA = "0x1A01FB0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002DF")]
		[Address(RVA = "0x1A02078", Offset = "0x1A02078", VA = "0x1A02078")]
		private void Start()
		{
		}

		[Token(Token = "0x60002E0")]
		[Address(RVA = "0x1A02138", Offset = "0x1A02138", VA = "0x1A02138")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60002E1")]
		[Address(RVA = "0x1A022D8", Offset = "0x1A022D8", VA = "0x1A022D8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60002E2")]
		[Address(RVA = "0x1A02528", Offset = "0x1A02528", VA = "0x1A02528")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60002E3")]
		[Address(RVA = "0x1A027BC", Offset = "0x1A027BC", VA = "0x1A027BC")]
		private void CalculateAdaptation(Texture curTexture)
		{
		}

		[Token(Token = "0x60002E4")]
		[Address(RVA = "0x1A02A28", Offset = "0x1A02A28", VA = "0x1A02A28")]
		public ContrastStretch()
		{
		}
	}
	[Token(Token = "0x2000065")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x9A44F4", Offset = "0x9A44F4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A44F4", Offset = "0x9A44F4")]
	internal class CreaseShading : PostEffectsBase
	{
		[Token(Token = "0x40002CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float intensity;

		[Token(Token = "0x40002CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int softness;

		[Token(Token = "0x40002CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float spread;

		[Token(Token = "0x40002CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader blurShader;

		[Token(Token = "0x40002CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material blurMaterial;

		[Token(Token = "0x40002CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader depthFetchShader;

		[Token(Token = "0x40002D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material depthFetchMaterial;

		[Token(Token = "0x40002D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader creaseApplyShader;

		[Token(Token = "0x40002D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material creaseApplyMaterial;

		[Token(Token = "0x60002E5")]
		[Address(RVA = "0x1A02AA8", Offset = "0x1A02AA8", VA = "0x1A02AA8", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60002E6")]
		[Address(RVA = "0x1A02B34", Offset = "0x1A02B34", VA = "0x1A02B34")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60002E7")]
		[Address(RVA = "0x1A02F24", Offset = "0x1A02F24", VA = "0x1A02F24")]
		public CreaseShading()
		{
		}
	}
	[Token(Token = "0x2000066")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x9A458C", Offset = "0x9A458C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A458C", Offset = "0x9A458C")]
	public class DepthOfField : PostEffectsBase
	{
		[Token(Token = "0x20002C9")]
		public enum BlurType
		{
			[Token(Token = "0x4000E30")]
			DiscBlur,
			[Token(Token = "0x4000E31")]
			DX11
		}

		[Token(Token = "0x20002CA")]
		public enum BlurSampleCount
		{
			[Token(Token = "0x4000E33")]
			Low,
			[Token(Token = "0x4000E34")]
			Medium,
			[Token(Token = "0x4000E35")]
			High
		}

		[Token(Token = "0x40002D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool visualizeFocus;

		[Token(Token = "0x40002D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float focalLength;

		[Token(Token = "0x40002D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float focalSize;

		[Token(Token = "0x40002D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float aperture;

		[Token(Token = "0x40002D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform focalTransform;

		[Token(Token = "0x40002D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float maxBlurSize;

		[Token(Token = "0x40002D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool highResolution;

		[Token(Token = "0x40002DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static DepthOfField Instance;

		[Token(Token = "0x40002DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BlurType blurType;

		[Token(Token = "0x40002DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public BlurSampleCount blurSampleCount;

		[Token(Token = "0x40002DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool nearBlur;

		[Token(Token = "0x40002DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float foregroundOverlap;

		[Token(Token = "0x40002DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader dofHdrShader;

		[Token(Token = "0x40002E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material dofHdrMaterial;

		[Token(Token = "0x40002E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader dx11BokehShader;

		[Token(Token = "0x40002E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material dx11bokehMaterial;

		[Token(Token = "0x40002E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float dx11BokehThreshold;

		[Token(Token = "0x40002E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float dx11SpawnHeuristic;

		[Token(Token = "0x40002E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Texture2D dx11BokehTexture;

		[Token(Token = "0x40002E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float dx11BokehScale;

		[Token(Token = "0x40002E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float dx11BokehIntensity;

		[Token(Token = "0x40002E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float focalDistance01;

		[Token(Token = "0x40002E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private ComputeBuffer cbDrawArgs;

		[Token(Token = "0x40002EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private ComputeBuffer cbPoints;

		[Token(Token = "0x40002EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float internalBlurWidth;

		[Token(Token = "0x60002E8")]
		[Address(RVA = "0x1A02F40", Offset = "0x1A02F40", VA = "0x1A02F40")]
		private void Awake()
		{
		}

		[Token(Token = "0x60002E9")]
		[Address(RVA = "0x1A02FAC", Offset = "0x1A02FAC", VA = "0x1A02FAC", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60002EA")]
		[Address(RVA = "0x1A031B4", Offset = "0x1A031B4", VA = "0x1A031B4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60002EB")]
		[Address(RVA = "0x1A0324C", Offset = "0x1A0324C", VA = "0x1A0324C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60002EC")]
		[Address(RVA = "0x1A03354", Offset = "0x1A03354", VA = "0x1A03354")]
		private void ReleaseComputeResources()
		{
		}

		[Token(Token = "0x60002ED")]
		[Address(RVA = "0x1A03040", Offset = "0x1A03040", VA = "0x1A03040")]
		private void CreateComputeResources()
		{
		}

		[Token(Token = "0x60002EE")]
		[Address(RVA = "0x1A03398", Offset = "0x1A03398", VA = "0x1A03398")]
		private float FocalDistance01(float worldDist)
		{
			return default(float);
		}

		[Token(Token = "0x60002EF")]
		[Address(RVA = "0x1A035AC", Offset = "0x1A035AC", VA = "0x1A035AC")]
		private void WriteCoc(RenderTexture fromTo, bool fgDilate)
		{
		}

		[Token(Token = "0x60002F0")]
		[Address(RVA = "0x1A03940", Offset = "0x1A03940", VA = "0x1A03940")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60002F1")]
		[Address(RVA = "0x1A053B0", Offset = "0x1A053B0", VA = "0x1A053B0")]
		public DepthOfField()
		{
		}
	}
	[Token(Token = "0x2000067")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x9A4624", Offset = "0x9A4624")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A4624", Offset = "0x9A4624")]
	public class DepthOfFieldDeprecated : PostEffectsBase
	{
		[Token(Token = "0x20002CB")]
		public enum Dof34QualitySetting
		{
			[Token(Token = "0x4000E37")]
			OnlyBackground = 1,
			[Token(Token = "0x4000E38")]
			BackgroundAndForeground
		}

		[Token(Token = "0x20002CC")]
		public enum DofResolution
		{
			[Token(Token = "0x4000E3A")]
			High = 2,
			[Token(Token = "0x4000E3B")]
			Medium,
			[Token(Token = "0x4000E3C")]
			Low
		}

		[Token(Token = "0x20002CD")]
		public enum DofBlurriness
		{
			[Token(Token = "0x4000E3E")]
			Low = 1,
			[Token(Token = "0x4000E3F")]
			High = 2,
			[Token(Token = "0x4000E40")]
			VeryHigh = 4
		}

		[Token(Token = "0x20002CE")]
		public enum BokehDestination
		{
			[Token(Token = "0x4000E42")]
			Background = 1,
			[Token(Token = "0x4000E43")]
			Foreground,
			[Token(Token = "0x4000E44")]
			BackgroundAndForeground
		}

		[Token(Token = "0x40002EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int SMOOTH_DOWNSAMPLE_PASS;

		[Token(Token = "0x40002ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static float BOKEH_EXTRA_BLUR;

		[Token(Token = "0x40002EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Dof34QualitySetting quality;

		[Token(Token = "0x40002EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DofResolution resolution;

		[Token(Token = "0x40002F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool simpleTweakMode;

		[Token(Token = "0x40002F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float focalPoint;

		[Token(Token = "0x40002F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float smoothness;

		[Token(Token = "0x40002F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float focalZDistance;

		[Token(Token = "0x40002F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float focalZStartCurve;

		[Token(Token = "0x40002F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float focalZEndCurve;

		[Token(Token = "0x40002F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float focalStartCurve;

		[Token(Token = "0x40002F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float focalEndCurve;

		[Token(Token = "0x40002F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float focalDistance01;

		[Token(Token = "0x40002F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform objectFocus;

		[Token(Token = "0x40002FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float focalSize;

		[Token(Token = "0x40002FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public DofBlurriness bluriness;

		[Token(Token = "0x40002FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float maxBlurSpread;

		[Token(Token = "0x40002FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float foregroundBlurExtrude;

		[Token(Token = "0x40002FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Shader dofBlurShader;

		[Token(Token = "0x40002FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material dofBlurMaterial;

		[Token(Token = "0x4000300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Shader dofShader;

		[Token(Token = "0x4000301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material dofMaterial;

		[Token(Token = "0x4000302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool visualize;

		[Token(Token = "0x4000303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public BokehDestination bokehDestination;

		[Token(Token = "0x4000304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float widthOverHeight;

		[Token(Token = "0x4000305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float oneOverBaseSize;

		[Token(Token = "0x4000306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool bokeh;

		[Token(Token = "0x4000307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		public bool bokehSupport;

		[Token(Token = "0x4000308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Shader bokehShader;

		[Token(Token = "0x4000309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Texture2D bokehTexture;

		[Token(Token = "0x400030A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float bokehScale;

		[Token(Token = "0x400030B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float bokehIntensity;

		[Token(Token = "0x400030C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float bokehThresholdContrast;

		[Token(Token = "0x400030D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float bokehThresholdLuminance;

		[Token(Token = "0x400030E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public int bokehDownsample;

		[Token(Token = "0x400030F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Material bokehMaterial;

		[Token(Token = "0x4000310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Camera _camera;

		[Token(Token = "0x4000311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private RenderTexture foregroundTexture;

		[Token(Token = "0x4000312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private RenderTexture mediumRezWorkTexture;

		[Token(Token = "0x4000313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private RenderTexture finalDefocus;

		[Token(Token = "0x4000314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private RenderTexture lowRezWorkTexture;

		[Token(Token = "0x4000315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private RenderTexture bokehSource;

		[Token(Token = "0x4000316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private RenderTexture bokehSource2;

		[Token(Token = "0x60002F3")]
		[Address(RVA = "0x1A05418", Offset = "0x1A05418", VA = "0x1A05418")]
		private void CreateMaterials()
		{
		}

		[Token(Token = "0x60002F4")]
		[Address(RVA = "0x1A054FC", Offset = "0x1A054FC", VA = "0x1A054FC", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60002F5")]
		[Address(RVA = "0x1A05618", Offset = "0x1A05618", VA = "0x1A05618")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60002F6")]
		[Address(RVA = "0x1A05678", Offset = "0x1A05678", VA = "0x1A05678")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60002F7")]
		[Address(RVA = "0x1A05714", Offset = "0x1A05714", VA = "0x1A05714")]
		private float FocalDistance01(float worldDist)
		{
			return default(float);
		}

		[Token(Token = "0x60002F8")]
		[Address(RVA = "0x1A058E8", Offset = "0x1A058E8", VA = "0x1A058E8")]
		private int GetDividerBasedOnQuality()
		{
			return default(int);
		}

		[Token(Token = "0x60002F9")]
		[Address(RVA = "0x1A0590C", Offset = "0x1A0590C", VA = "0x1A0590C")]
		private int GetLowResolutionDividerBasedOnQuality(int baseDivider)
		{
			return default(int);
		}

		[Token(Token = "0x60002FA")]
		[Address(RVA = "0x1A05930", Offset = "0x1A05930", VA = "0x1A05930")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60002FB")]
		[Address(RVA = "0x1A06908", Offset = "0x1A06908", VA = "0x1A06908")]
		private void Blur(RenderTexture from, RenderTexture to, DofBlurriness iterations, int blurPass, float spread)
		{
		}

		[Token(Token = "0x60002FC")]
		[Address(RVA = "0x1A07088", Offset = "0x1A07088", VA = "0x1A07088")]
		private void BlurFg(RenderTexture from, RenderTexture to, DofBlurriness iterations, int blurPass, float spread)
		{
		}

		[Token(Token = "0x60002FD")]
		[Address(RVA = "0x1A0752C", Offset = "0x1A0752C", VA = "0x1A0752C")]
		private void BlurHex(RenderTexture from, RenderTexture to, int blurPass, float spread, RenderTexture tmp)
		{
		}

		[Token(Token = "0x60002FE")]
		[Address(RVA = "0x1A067A4", Offset = "0x1A067A4", VA = "0x1A067A4")]
		private void Downsample(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60002FF")]
		[Address(RVA = "0x1A06BD4", Offset = "0x1A06BD4", VA = "0x1A06BD4")]
		private void AddBokeh(RenderTexture bokehInfo, RenderTexture tempTex, RenderTexture finalTarget)
		{
		}

		[Token(Token = "0x6000300")]
		[Address(RVA = "0x1A07380", Offset = "0x1A07380", VA = "0x1A07380")]
		private void ReleaseTextures()
		{
		}

		[Token(Token = "0x6000301")]
		[Address(RVA = "0x1A063C4", Offset = "0x1A063C4", VA = "0x1A063C4")]
		private void AllocateTextures(bool blurForeground, RenderTexture source, int divider, int lowTexDivider)
		{
		}

		[Token(Token = "0x6000302")]
		[Address(RVA = "0x1A07770", Offset = "0x1A07770", VA = "0x1A07770")]
		public DepthOfFieldDeprecated()
		{
		}
	}
	[Token(Token = "0x2000068")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x9A46BC", Offset = "0x9A46BC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A46BC", Offset = "0x9A46BC")]
	public class EdgeDetection : PostEffectsBase
	{
		[Token(Token = "0x20002CF")]
		public enum EdgeDetectMode
		{
			[Token(Token = "0x4000E46")]
			TriangleDepthNormals,
			[Token(Token = "0x4000E47")]
			RobertsCrossDepthNormals,
			[Token(Token = "0x4000E48")]
			SobelDepth,
			[Token(Token = "0x4000E49")]
			SobelDepthThin,
			[Token(Token = "0x4000E4A")]
			TriangleLuminance
		}

		[Token(Token = "0x4000317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public EdgeDetectMode mode;

		[Token(Token = "0x4000318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float sensitivityDepth;

		[Token(Token = "0x4000319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float sensitivityNormals;

		[Token(Token = "0x400031A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float lumThreshold;

		[Token(Token = "0x400031B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float edgeExp;

		[Token(Token = "0x400031C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float sampleDist;

		[Token(Token = "0x400031D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float edgesOnly;

		[Token(Token = "0x400031E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color edgesOnlyBgColor;

		[Token(Token = "0x400031F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader edgeDetectShader;

		[Token(Token = "0x4000320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material edgeDetectMaterial;

		[Token(Token = "0x4000321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private EdgeDetectMode oldMode;

		[Token(Token = "0x6000304")]
		[Address(RVA = "0x1A07850", Offset = "0x1A07850", VA = "0x1A07850", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000305")]
		[Address(RVA = "0x1A079E0", Offset = "0x1A079E0", VA = "0x1A079E0")]
		private new void Start()
		{
		}

		[Token(Token = "0x6000306")]
		[Address(RVA = "0x1A078D4", Offset = "0x1A078D4", VA = "0x1A078D4")]
		private void SetCameraFlag()
		{
		}

		[Token(Token = "0x6000307")]
		[Address(RVA = "0x1A079EC", Offset = "0x1A079EC", VA = "0x1A079EC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000308")]
		[Address(RVA = "0x1A079F0", Offset = "0x1A079F0", VA = "0x1A079F0")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000309")]
		[Address(RVA = "0x1A07C58", Offset = "0x1A07C58", VA = "0x1A07C58")]
		public EdgeDetection()
		{
		}
	}
	[Token(Token = "0x2000069")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x9A4754", Offset = "0x9A4754")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A4754", Offset = "0x9A4754")]
	public class Fisheye : PostEffectsBase
	{
		[Token(Token = "0x4000322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float strengthX;

		[Token(Token = "0x4000323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float strengthY;

		[Token(Token = "0x4000324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader fishEyeShader;

		[Token(Token = "0x4000325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material fisheyeMaterial;

		[Token(Token = "0x600030A")]
		[Address(RVA = "0x1A07CAC", Offset = "0x1A07CAC", VA = "0x1A07CAC", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600030B")]
		[Address(RVA = "0x1A07D10", Offset = "0x1A07D10", VA = "0x1A07D10")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600030C")]
		[Address(RVA = "0x1A07E98", Offset = "0x1A07E98", VA = "0x1A07E98")]
		public Fisheye()
		{
		}
	}
	[Token(Token = "0x200006A")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x9A47EC", Offset = "0x9A47EC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A47EC", Offset = "0x9A47EC")]
	internal class GlobalFog : PostEffectsBase
	{
		[Token(Token = "0x4000326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A79E8", Offset = "0x9A79E8")]
		public bool distanceFog;

		[Token(Token = "0x4000327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7A20", Offset = "0x9A7A20")]
		public bool useRadialDistance;

		[Token(Token = "0x4000328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7A58", Offset = "0x9A7A58")]
		public bool heightFog;

		[Token(Token = "0x4000329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7A90", Offset = "0x9A7A90")]
		public float height;

		[Token(Token = "0x400032A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A7AC8", Offset = "0x9A7AC8")]
		public float heightDensity;

		[Token(Token = "0x400032B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x9A7AE4", Offset = "0x9A7AE4")]
		public float startDistance;

		[Token(Token = "0x400032C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shader fogShader;

		[Token(Token = "0x400032D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material fogMaterial;

		[Token(Token = "0x600030D")]
		[Address(RVA = "0x21D3E58", Offset = "0x21D3E58", VA = "0x21D3E58", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600030E")]
		[Address(RVA = "0x21D44DC", Offset = "0x21D44DC", VA = "0x21D44DC")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600030F")]
		[Address(RVA = "0x21D4E14", Offset = "0x21D4E14", VA = "0x21D4E14")]
		private static void CustomGraphicsBlit(RenderTexture source, RenderTexture dest, Material fxMaterial, int passNr)
		{
		}

		[Token(Token = "0x6000310")]
		[Address(RVA = "0x21D4FC0", Offset = "0x21D4FC0", VA = "0x21D4FC0")]
		public GlobalFog()
		{
		}
	}
	[Token(Token = "0x200006B")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A4884", Offset = "0x9A4884")]
	public class Grayscale : ImageEffectBase
	{
		[Token(Token = "0x400032E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Texture textureRamp;

		[Token(Token = "0x400032F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float rampOffset;

		[Token(Token = "0x6000311")]
		[Address(RVA = "0x21D4FFC", Offset = "0x21D4FFC", VA = "0x21D4FFC")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000312")]
		[Address(RVA = "0x21D51CC", Offset = "0x21D51CC", VA = "0x21D51CC")]
		public Grayscale()
		{
		}
	}
	[Token(Token = "0x200006C")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x9A48D0", Offset = "0x9A48D0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A48D0", Offset = "0x9A48D0")]
	public class ImageEffectBase : MonoBehaviour
	{
		[Token(Token = "0x4000330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Shader shader;

		[Token(Token = "0x4000331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material m_Material;

		[Token(Token = "0x17000078")]
		protected Material material
		{
			[Token(Token = "0x6000314")]
			[Address(RVA = "0x21D5104", Offset = "0x21D5104", VA = "0x21D5104")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000313")]
		[Address(RVA = "0x21D51DC", Offset = "0x21D51DC", VA = "0x21D51DC", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000315")]
		[Address(RVA = "0x21D5294", Offset = "0x21D5294", VA = "0x21D5294", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000316")]
		[Address(RVA = "0x21D51D4", Offset = "0x21D51D4", VA = "0x21D51D4")]
		public ImageEffectBase()
		{
		}
	}
	[Token(Token = "0x200006D")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A4958", Offset = "0x9A4958")]
	public class ImageEffects
	{
		[Token(Token = "0x6000317")]
		[Address(RVA = "0x21D5344", Offset = "0x21D5344", VA = "0x21D5344")]
		public static void RenderDistortion(Material material, RenderTexture source, RenderTexture destination, float angle, Vector2 center, Vector2 radius)
		{
		}

		[Token(Token = "0x6000318")]
		[Address(RVA = "0x21D55D4", Offset = "0x21D55D4", VA = "0x21D55D4")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9A8FB8", Offset = "0x9A8FB8")]
		public static void Blit(RenderTexture source, RenderTexture dest)
		{
		}

		[Token(Token = "0x6000319")]
		[Address(RVA = "0x21D564C", Offset = "0x21D564C", VA = "0x21D564C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9A8FF0", Offset = "0x9A8FF0")]
		public static void BlitWithMaterial(Material material, RenderTexture source, RenderTexture dest)
		{
		}

		[Token(Token = "0x600031A")]
		[Address(RVA = "0x21D56CC", Offset = "0x21D56CC", VA = "0x21D56CC")]
		public ImageEffects()
		{
		}
	}
	[Token(Token = "0x200006E")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A4990", Offset = "0x9A4990")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x9A4990", Offset = "0x9A4990")]
	public class MotionBlur : ImageEffectBase
	{
		[Token(Token = "0x4000332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float blurAmount;

		[Token(Token = "0x4000333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool extraBlur;

		[Token(Token = "0x4000334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RenderTexture accumTexture;

		[Token(Token = "0x600031B")]
		[Address(RVA = "0x21D56D4", Offset = "0x21D56D4", VA = "0x21D56D4", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600031C")]
		[Address(RVA = "0x21D5718", Offset = "0x21D5718", VA = "0x21D5718", Slot = "5")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x600031D")]
		[Address(RVA = "0x21D578C", Offset = "0x21D578C", VA = "0x21D578C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600031E")]
		[Address(RVA = "0x21D5B78", Offset = "0x21D5B78", VA = "0x21D5B78")]
		public MotionBlur()
		{
		}
	}
	[Token(Token = "0x200006F")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x9A4A28", Offset = "0x9A4A28")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A4A28", Offset = "0x9A4A28")]
	public class NoiseAndGrain : PostEffectsBase
	{
		[Token(Token = "0x4000335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float intensityMultiplier;

		[Token(Token = "0x4000336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float generalIntensity;

		[Token(Token = "0x4000337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float blackIntensity;

		[Token(Token = "0x4000338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float whiteIntensity;

		[Token(Token = "0x4000339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float midGrey;

		[Token(Token = "0x400033A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool dx11Grain;

		[Token(Token = "0x400033B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float softness;

		[Token(Token = "0x400033C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool monochrome;

		[Token(Token = "0x400033D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 intensities;

		[Token(Token = "0x400033E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 tiling;

		[Token(Token = "0x400033F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float monochromeTiling;

		[Token(Token = "0x4000340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FilterMode filterMode;

		[Token(Token = "0x4000341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Texture2D noiseTexture;

		[Token(Token = "0x4000342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader noiseShader;

		[Token(Token = "0x4000343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material noiseMaterial;

		[Token(Token = "0x4000344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Shader dx11NoiseShader;

		[Token(Token = "0x4000345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Material dx11NoiseMaterial;

		[Token(Token = "0x4000346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float TILE_AMOUNT;

		[Token(Token = "0x600031F")]
		[Address(RVA = "0x21D5B8C", Offset = "0x21D5B8C", VA = "0x21D5B8C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000320")]
		[Address(RVA = "0x21D5C04", Offset = "0x21D5C04", VA = "0x21D5C04")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000321")]
		[Address(RVA = "0x21D66CC", Offset = "0x21D66CC", VA = "0x21D66CC")]
		private static void DrawNoiseQuadGrid(RenderTexture source, RenderTexture dest, Material fxMaterial, Texture2D noise, int passNr)
		{
		}

		[Token(Token = "0x6000322")]
		[Address(RVA = "0x21D6A6C", Offset = "0x21D6A6C", VA = "0x21D6A6C")]
		public NoiseAndGrain()
		{
		}
	}
	[Token(Token = "0x2000070")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x9A4AC0", Offset = "0x9A4AC0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A4AC0", Offset = "0x9A4AC0")]
	public class NoiseAndScratches : MonoBehaviour
	{
		[Token(Token = "0x4000347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool monochrome;

		[Token(Token = "0x4000348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool rgbFallback;

		[Token(Token = "0x4000349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float grainIntensityMin;

		[Token(Token = "0x400034A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float grainIntensityMax;

		[Token(Token = "0x400034B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float grainSize;

		[Token(Token = "0x400034C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float scratchIntensityMin;

		[Token(Token = "0x400034D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float scratchIntensityMax;

		[Token(Token = "0x400034E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float scratchFPS;

		[Token(Token = "0x400034F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float scratchJitter;

		[Token(Token = "0x4000350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Texture grainTexture;

		[Token(Token = "0x4000351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Texture scratchTexture;

		[Token(Token = "0x4000352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader shaderRGB;

		[Token(Token = "0x4000353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader shaderYUV;

		[Token(Token = "0x4000354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material m_MaterialRGB;

		[Token(Token = "0x4000355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material m_MaterialYUV;

		[Token(Token = "0x4000356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float scratchTimeLeft;

		[Token(Token = "0x4000357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float scratchX;

		[Token(Token = "0x4000358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float scratchY;

		[Token(Token = "0x17000079")]
		protected Material material
		{
			[Token(Token = "0x6000325")]
			[Address(RVA = "0x21D6CD8", Offset = "0x21D6CD8", VA = "0x21D6CD8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000324")]
		[Address(RVA = "0x21D6B84", Offset = "0x21D6B84", VA = "0x21D6B84")]
		protected void Start()
		{
		}

		[Token(Token = "0x6000326")]
		[Address(RVA = "0x21D6E40", Offset = "0x21D6E40", VA = "0x21D6E40")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x6000327")]
		[Address(RVA = "0x21D6F44", Offset = "0x21D6F44", VA = "0x21D6F44")]
		private void SanitizeParameters()
		{
		}

		[Token(Token = "0x6000328")]
		[Address(RVA = "0x21D7080", Offset = "0x21D7080", VA = "0x21D7080")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000329")]
		[Address(RVA = "0x21D7424", Offset = "0x21D7424", VA = "0x21D7424")]
		public NoiseAndScratches()
		{
		}
	}
	[Token(Token = "0x2000071")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x9A4B58", Offset = "0x9A4B58")]
	public class PostEffectsBase : MonoBehaviour
	{
		[Token(Token = "0x4000359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected bool supportHDRTextures;

		[Token(Token = "0x400035A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		protected bool supportDX11;

		[Token(Token = "0x400035B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		protected bool isSupported;

		[Token(Token = "0x600032A")]
		[Address(RVA = "0x21D3FE8", Offset = "0x21D3FE8", VA = "0x21D3FE8")]
		protected Material CheckShaderAndCreateMaterial(Shader s, Material m2Create)
		{
			return null;
		}

		[Token(Token = "0x600032B")]
		[Address(RVA = "0x21D7484", Offset = "0x21D7484", VA = "0x21D7484")]
		protected Material CreateMaterial(Shader s, Material m2Create)
		{
			return null;
		}

		[Token(Token = "0x600032C")]
		[Address(RVA = "0x21D7688", Offset = "0x21D7688", VA = "0x21D7688")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600032D")]
		[Address(RVA = "0x21D7694", Offset = "0x21D7694", VA = "0x21D7694")]
		protected bool CheckSupport()
		{
			return default(bool);
		}

		[Token(Token = "0x600032E")]
		[Address(RVA = "0x21D769C", Offset = "0x21D769C", VA = "0x21D769C", Slot = "4")]
		public virtual bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600032F")]
		[Address(RVA = "0x21D774C", Offset = "0x21D774C", VA = "0x21D774C")]
		protected void Start()
		{
		}

		[Token(Token = "0x6000330")]
		[Address(RVA = "0x21D3EB0", Offset = "0x21D3EB0", VA = "0x21D3EB0")]
		protected bool CheckSupport(bool needDepth)
		{
			return default(bool);
		}

		[Token(Token = "0x6000331")]
		[Address(RVA = "0x21D7758", Offset = "0x21D7758", VA = "0x21D7758")]
		protected bool CheckSupport(bool needDepth, bool needHdr)
		{
			return default(bool);
		}

		[Token(Token = "0x6000332")]
		[Address(RVA = "0x21D77B4", Offset = "0x21D77B4", VA = "0x21D77B4")]
		public bool Dx11Support()
		{
			return default(bool);
		}

		[Token(Token = "0x6000333")]
		[Address(RVA = "0x21D4434", Offset = "0x21D4434", VA = "0x21D4434")]
		protected void ReportAutoDisable()
		{
		}

		[Token(Token = "0x6000334")]
		[Address(RVA = "0x21D77BC", Offset = "0x21D77BC", VA = "0x21D77BC")]
		private bool CheckShader(Shader s)
		{
			return default(bool);
		}

		[Token(Token = "0x6000335")]
		[Address(RVA = "0x21D7458", Offset = "0x21D7458", VA = "0x21D7458")]
		protected void NotSupported()
		{
		}

		[Token(Token = "0x6000336")]
		[Address(RVA = "0x21D7A4C", Offset = "0x21D7A4C", VA = "0x21D7A4C")]
		protected void DrawBorder(RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x6000337")]
		[Address(RVA = "0x21D4FE8", Offset = "0x21D4FE8", VA = "0x21D4FE8")]
		public PostEffectsBase()
		{
		}
	}
	[Token(Token = "0x2000072")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x9A4BCC", Offset = "0x9A4BCC")]
	internal class PostEffectsHelper : MonoBehaviour
	{
		[Token(Token = "0x6000338")]
		[Address(RVA = "0x21D7DF4", Offset = "0x21D7DF4", VA = "0x21D7DF4")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000339")]
		[Address(RVA = "0x21D7E60", Offset = "0x21D7E60", VA = "0x21D7E60")]
		private static void DrawLowLevelPlaneAlignedWithCamera(float dist, RenderTexture source, RenderTexture dest, Material material, Camera cameraForProjectionMatrix)
		{
		}

		[Token(Token = "0x600033A")]
		[Address(RVA = "0x21D80F8", Offset = "0x21D80F8", VA = "0x21D80F8")]
		private static void DrawBorder(RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x600033B")]
		[Address(RVA = "0x21D849C", Offset = "0x21D849C", VA = "0x21D849C")]
		private static void DrawLowLevelQuad(float x1, float x2, float y1, float y2, RenderTexture source, RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x600033C")]
		[Address(RVA = "0x21D8654", Offset = "0x21D8654", VA = "0x21D8654")]
		public PostEffectsHelper()
		{
		}
	}
	[Token(Token = "0x2000073")]
	internal class Quads
	{
		[Token(Token = "0x400035C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Mesh[] meshes;

		[Token(Token = "0x400035D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int currentQuads;

		[Token(Token = "0x600033D")]
		[Address(RVA = "0x21D865C", Offset = "0x21D865C", VA = "0x21D865C")]
		private static bool HasMeshes()
		{
			return default(bool);
		}

		[Token(Token = "0x600033E")]
		[Address(RVA = "0x21D8774", Offset = "0x21D8774", VA = "0x21D8774")]
		public static void Cleanup()
		{
		}

		[Token(Token = "0x600033F")]
		[Address(RVA = "0x21D8994", Offset = "0x21D8994", VA = "0x21D8994")]
		public static Mesh[] GetMeshes(int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x6000340")]
		[Address(RVA = "0x21D8C6C", Offset = "0x21D8C6C", VA = "0x21D8C6C")]
		private static Mesh GetMesh(int triCount, int triOffset, int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x6000341")]
		[Address(RVA = "0x21D9380", Offset = "0x21D9380", VA = "0x21D9380")]
		public Quads()
		{
		}
	}
	[Token(Token = "0x2000074")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x9A4C40", Offset = "0x9A4C40")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A4C40", Offset = "0x9A4C40")]
	public class ScreenOverlay : PostEffectsBase
	{
		[Token(Token = "0x20002D0")]
		public enum OverlayBlendMode
		{
			[Token(Token = "0x4000E4C")]
			Additive,
			[Token(Token = "0x4000E4D")]
			ScreenBlend,
			[Token(Token = "0x4000E4E")]
			Multiply,
			[Token(Token = "0x4000E4F")]
			Overlay,
			[Token(Token = "0x4000E50")]
			AlphaBlend
		}

		[Token(Token = "0x400035E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public OverlayBlendMode blendMode;

		[Token(Token = "0x400035F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float intensity;

		[Token(Token = "0x4000360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Texture2D texture;

		[Token(Token = "0x4000361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shader overlayShader;

		[Token(Token = "0x4000362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material overlayMaterial;

		[Token(Token = "0x6000343")]
		[Address(RVA = "0x21D938C", Offset = "0x21D938C", VA = "0x21D938C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000344")]
		[Address(RVA = "0x21D93E4", Offset = "0x21D93E4", VA = "0x21D93E4")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000345")]
		[Address(RVA = "0x21D959C", Offset = "0x21D959C", VA = "0x21D959C")]
		public ScreenOverlay()
		{
		}
	}
	[Token(Token = "0x2000075")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x9A4CD8", Offset = "0x9A4CD8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A4CD8", Offset = "0x9A4CD8")]
	internal class ScreenSpaceAmbientObscurance : PostEffectsBase
	{
		[Token(Token = "0x4000363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A7B1C", Offset = "0x9A7B1C")]
		public float intensity;

		[Token(Token = "0x4000364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A7B34", Offset = "0x9A7B34")]
		public float radius;

		[Token(Token = "0x4000365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A7B50", Offset = "0x9A7B50")]
		public int blurIterations;

		[Token(Token = "0x4000366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A7B68", Offset = "0x9A7B68")]
		public float blurFilterDistance;

		[Token(Token = "0x4000367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A7B80", Offset = "0x9A7B80")]
		public int downsample;

		[Token(Token = "0x4000368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Texture2D rand;

		[Token(Token = "0x4000369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader aoShader;

		[Token(Token = "0x400036A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material aoMaterial;

		[Token(Token = "0x6000346")]
		[Address(RVA = "0x21D95BC", Offset = "0x21D95BC", VA = "0x21D95BC", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000347")]
		[Address(RVA = "0x21D9614", Offset = "0x21D9614", VA = "0x21D9614")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000348")]
		[Address(RVA = "0x21D96BC", Offset = "0x21D96BC", VA = "0x21D96BC")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000349")]
		[Address(RVA = "0x21D9D7C", Offset = "0x21D9D7C", VA = "0x21D9D7C")]
		public ScreenSpaceAmbientObscurance()
		{
		}
	}
	[Token(Token = "0x2000076")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x9A4D70", Offset = "0x9A4D70")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A4D70", Offset = "0x9A4D70")]
	public class ScreenSpaceAmbientOcclusion : MonoBehaviour
	{
		[Token(Token = "0x20002D1")]
		public enum SSAOSamples
		{
			[Token(Token = "0x4000E52")]
			Low,
			[Token(Token = "0x4000E53")]
			Medium,
			[Token(Token = "0x4000E54")]
			High
		}

		[Token(Token = "0x400036B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float m_Radius;

		[Token(Token = "0x400036C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public SSAOSamples m_SampleCount;

		[Token(Token = "0x400036D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float m_OcclusionIntensity;

		[Token(Token = "0x400036E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int m_Blur;

		[Token(Token = "0x400036F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int m_Downsampling;

		[Token(Token = "0x4000370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float m_OcclusionAttenuation;

		[Token(Token = "0x4000371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float m_MinZ;

		[Token(Token = "0x4000372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader m_SSAOShader;

		[Token(Token = "0x4000373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material m_SSAOMaterial;

		[Token(Token = "0x4000374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Texture2D m_RandomTexture;

		[Token(Token = "0x4000375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool m_Supported;

		[Token(Token = "0x600034A")]
		[Address(RVA = "0x21D9DAC", Offset = "0x21D9DAC", VA = "0x21D9DAC")]
		private static Material CreateMaterial(Shader shader)
		{
			return null;
		}

		[Token(Token = "0x600034B")]
		[Address(RVA = "0x21D9E60", Offset = "0x21D9E60", VA = "0x21D9E60")]
		private static void DestroyMaterial(Material mat)
		{
		}

		[Token(Token = "0x600034C")]
		[Address(RVA = "0x21D9EFC", Offset = "0x21D9EFC", VA = "0x21D9EFC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600034D")]
		[Address(RVA = "0x21D9F04", Offset = "0x21D9F04", VA = "0x21D9F04")]
		private void Start()
		{
		}

		[Token(Token = "0x600034E")]
		[Address(RVA = "0x21DA0C4", Offset = "0x21DA0C4", VA = "0x21DA0C4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600034F")]
		[Address(RVA = "0x21D9FE4", Offset = "0x21D9FE4", VA = "0x21D9FE4")]
		private void CreateMaterials()
		{
		}

		[Token(Token = "0x6000350")]
		[Address(RVA = "0x21DA15C", Offset = "0x21DA15C", VA = "0x21DA15C")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000351")]
		[Address(RVA = "0x21DA914", Offset = "0x21DA914", VA = "0x21DA914")]
		public ScreenSpaceAmbientOcclusion()
		{
		}
	}
	[Token(Token = "0x2000077")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A4E08", Offset = "0x9A4E08")]
	public class SepiaTone : ImageEffectBase
	{
		[Token(Token = "0x6000352")]
		[Address(RVA = "0x21DA94C", Offset = "0x21DA94C", VA = "0x21DA94C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000353")]
		[Address(RVA = "0x21DA9DC", Offset = "0x21DA9DC", VA = "0x21DA9DC")]
		public SepiaTone()
		{
		}
	}
	[Token(Token = "0x2000078")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x9A4E54", Offset = "0x9A4E54")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A4E54", Offset = "0x9A4E54")]
	public class SunShafts : PostEffectsBase
	{
		[Token(Token = "0x20002D2")]
		public enum SunShaftsResolution
		{
			[Token(Token = "0x4000E56")]
			Low,
			[Token(Token = "0x4000E57")]
			Normal,
			[Token(Token = "0x4000E58")]
			High
		}

		[Token(Token = "0x20002D3")]
		public enum ShaftsScreenBlendMode
		{
			[Token(Token = "0x4000E5A")]
			Screen,
			[Token(Token = "0x4000E5B")]
			Add
		}

		[Token(Token = "0x4000376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public SunShaftsResolution resolution;

		[Token(Token = "0x4000377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ShaftsScreenBlendMode screenBlendMode;

		[Token(Token = "0x4000378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform sunTransform;

		[Token(Token = "0x4000379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int radialBlurIterations;

		[Token(Token = "0x400037A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Color sunColor;

		[Token(Token = "0x400037B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Color sunThreshold;

		[Token(Token = "0x400037C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float sunShaftBlurRadius;

		[Token(Token = "0x400037D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float sunShaftIntensity;

		[Token(Token = "0x400037E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float maxRadius;

		[Token(Token = "0x400037F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool useDepthTexture;

		[Token(Token = "0x4000380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader sunShaftsShader;

		[Token(Token = "0x4000381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material sunShaftsMaterial;

		[Token(Token = "0x4000382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Shader simpleClearShader;

		[Token(Token = "0x4000383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Material simpleClearMaterial;

		[Token(Token = "0x6000354")]
		[Address(RVA = "0x21DA9E4", Offset = "0x21DA9E4", VA = "0x21DA9E4", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000355")]
		[Address(RVA = "0x21DAA4C", Offset = "0x21DAA4C", VA = "0x21DAA4C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000356")]
		[Address(RVA = "0x21DB360", Offset = "0x21DB360", VA = "0x21DB360")]
		public SunShafts()
		{
		}
	}
	[Token(Token = "0x2000079")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x9A4EEC", Offset = "0x9A4EEC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A4EEC", Offset = "0x9A4EEC")]
	internal class TiltShift : PostEffectsBase
	{
		[Token(Token = "0x20002D4")]
		public enum TiltShiftMode
		{
			[Token(Token = "0x4000E5D")]
			TiltShiftMode,
			[Token(Token = "0x4000E5E")]
			IrisMode
		}

		[Token(Token = "0x20002D5")]
		public enum TiltShiftQuality
		{
			[Token(Token = "0x4000E60")]
			Preview,
			[Token(Token = "0x4000E61")]
			Normal,
			[Token(Token = "0x4000E62")]
			High
		}

		[Token(Token = "0x4000384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TiltShiftMode mode;

		[Token(Token = "0x4000385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TiltShiftQuality quality;

		[Token(Token = "0x4000386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A7B98", Offset = "0x9A7B98")]
		public float blurArea;

		[Token(Token = "0x4000387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A7BB0", Offset = "0x9A7BB0")]
		public float maxBlurSize;

		[Token(Token = "0x4000388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x9A7BC8", Offset = "0x9A7BC8")]
		public int downsample;

		[Token(Token = "0x4000389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shader tiltShiftShader;

		[Token(Token = "0x400038A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material tiltShiftMaterial;

		[Token(Token = "0x6000357")]
		[Address(RVA = "0x21DB414", Offset = "0x21DB414", VA = "0x21DB414", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000358")]
		[Address(RVA = "0x21DB46C", Offset = "0x21DB46C", VA = "0x21DB46C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000359")]
		[Address(RVA = "0x21DB774", Offset = "0x21DB774", VA = "0x21DB774")]
		public TiltShift()
		{
		}
	}
	[Token(Token = "0x200007A")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x9A4F74", Offset = "0x9A4F74")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A4F74", Offset = "0x9A4F74")]
	public class Tonemapping : PostEffectsBase
	{
		[Token(Token = "0x20002D6")]
		public enum TonemapperType
		{
			[Token(Token = "0x4000E64")]
			SimpleReinhard,
			[Token(Token = "0x4000E65")]
			UserCurve,
			[Token(Token = "0x4000E66")]
			Hable,
			[Token(Token = "0x4000E67")]
			Photographic,
			[Token(Token = "0x4000E68")]
			OptimizedHejiDawson,
			[Token(Token = "0x4000E69")]
			AdaptiveReinhard,
			[Token(Token = "0x4000E6A")]
			AdaptiveReinhardAutoWhite
		}

		[Token(Token = "0x20002D7")]
		public enum AdaptiveTexSize
		{
			[Token(Token = "0x4000E6C")]
			Square16 = 0x10,
			[Token(Token = "0x4000E6D")]
			Square32 = 0x20,
			[Token(Token = "0x4000E6E")]
			Square64 = 0x40,
			[Token(Token = "0x4000E6F")]
			Square128 = 0x80,
			[Token(Token = "0x4000E70")]
			Square256 = 0x100,
			[Token(Token = "0x4000E71")]
			Square512 = 0x200,
			[Token(Token = "0x4000E72")]
			Square1024 = 0x400
		}

		[Token(Token = "0x400038B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TonemapperType type;

		[Token(Token = "0x400038C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AdaptiveTexSize adaptiveTextureSize;

		[Token(Token = "0x400038D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve remapCurve;

		[Token(Token = "0x400038E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Texture2D curveTex;

		[Token(Token = "0x400038F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float exposureAdjustment;

		[Token(Token = "0x4000390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float middleGrey;

		[Token(Token = "0x4000391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float white;

		[Token(Token = "0x4000392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float adaptionSpeed;

		[Token(Token = "0x4000393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader tonemapper;

		[Token(Token = "0x4000394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool validRenderTextureFormat;

		[Token(Token = "0x4000395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material tonemapMaterial;

		[Token(Token = "0x4000396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private RenderTexture rt;

		[Token(Token = "0x4000397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private RenderTextureFormat rtFormat;

		[Token(Token = "0x600035A")]
		[Address(RVA = "0x21DB798", Offset = "0x21DB798", VA = "0x21DB798", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600035B")]
		[Address(RVA = "0x21DB8F0", Offset = "0x21DB8F0", VA = "0x21DB8F0")]
		public float UpdateCurve()
		{
			return default(float);
		}

		[Token(Token = "0x600035C")]
		[Address(RVA = "0x21DBC10", Offset = "0x21DBC10", VA = "0x21DBC10")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600035D")]
		[Address(RVA = "0x21DBD68", Offset = "0x21DBD68", VA = "0x21DBD68")]
		private bool CreateInternalRenderTexture()
		{
			return default(bool);
		}

		[Token(Token = "0x600035E")]
		[Address(RVA = "0x21DBE5C", Offset = "0x21DBE5C", VA = "0x21DBE5C")]
		[ImageEffectTransformsToLDR]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600035F")]
		[Address(RVA = "0x21DC7AC", Offset = "0x21DC7AC", VA = "0x21DC7AC")]
		public Tonemapping()
		{
		}
	}
	[Token(Token = "0x200007B")]
	internal class Triangles
	{
		[Token(Token = "0x4000398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Mesh[] meshes;

		[Token(Token = "0x4000399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int currentTris;

		[Token(Token = "0x6000360")]
		[Address(RVA = "0x21DC7E4", Offset = "0x21DC7E4", VA = "0x21DC7E4")]
		private static bool HasMeshes()
		{
			return default(bool);
		}

		[Token(Token = "0x6000361")]
		[Address(RVA = "0x21DC940", Offset = "0x21DC940", VA = "0x21DC940")]
		private static void Cleanup()
		{
		}

		[Token(Token = "0x6000362")]
		[Address(RVA = "0x21DCB60", Offset = "0x21DCB60", VA = "0x21DCB60")]
		private static Mesh[] GetMeshes(int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x6000363")]
		[Address(RVA = "0x21DCE38", Offset = "0x21DCE38", VA = "0x21DCE38")]
		private static Mesh GetMesh(int triCount, int triOffset, int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x6000364")]
		[Address(RVA = "0x21DD3C0", Offset = "0x21DD3C0", VA = "0x21DD3C0")]
		public Triangles()
		{
		}
	}
	[Token(Token = "0x200007C")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A500C", Offset = "0x9A500C")]
	public class Twirl : ImageEffectBase
	{
		[Token(Token = "0x400039A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 radius;

		[Token(Token = "0x400039B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float angle;

		[Token(Token = "0x400039C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector2 center;

		[Token(Token = "0x6000366")]
		[Address(RVA = "0x21DD3CC", Offset = "0x21DD3CC", VA = "0x21DD3CC")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000367")]
		[Address(RVA = "0x21DD410", Offset = "0x21DD410", VA = "0x21DD410")]
		public Twirl()
		{
		}
	}
	[Token(Token = "0x200007D")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x9A5058", Offset = "0x9A5058")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A5058", Offset = "0x9A5058")]
	public class VignetteAndChromaticAberration : PostEffectsBase
	{
		[Token(Token = "0x20002D8")]
		public enum AberrationMode
		{
			[Token(Token = "0x4000E74")]
			Simple,
			[Token(Token = "0x4000E75")]
			Advanced
		}

		[Token(Token = "0x400039D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AberrationMode mode;

		[Token(Token = "0x400039E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float intensity;

		[Token(Token = "0x400039F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float chromaticAberration;

		[Token(Token = "0x40003A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float axialAberration;

		[Token(Token = "0x40003A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float blur;

		[Token(Token = "0x40003A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float blurSpread;

		[Token(Token = "0x40003A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float luminanceDependency;

		[Token(Token = "0x40003A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float blurDistance;

		[Token(Token = "0x40003A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader vignetteShader;

		[Token(Token = "0x40003A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader separableBlurShader;

		[Token(Token = "0x40003A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader chromAberrationShader;

		[Token(Token = "0x40003A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material m_VignetteMaterial;

		[Token(Token = "0x40003A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material m_SeparableBlurMaterial;

		[Token(Token = "0x40003AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material m_ChromAberrationMaterial;

		[Token(Token = "0x6000368")]
		[Address(RVA = "0x21DD48C", Offset = "0x21DD48C", VA = "0x21DD48C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000369")]
		[Address(RVA = "0x21DD510", Offset = "0x21DD510", VA = "0x21DD510")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600036A")]
		[Address(RVA = "0x21DDBF0", Offset = "0x21DDBF0", VA = "0x21DDBF0")]
		public VignetteAndChromaticAberration()
		{
		}
	}
	[Token(Token = "0x200007E")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x9A50F0", Offset = "0x9A50F0")]
	public class Vortex : ImageEffectBase
	{
		[Token(Token = "0x40003AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 radius;

		[Token(Token = "0x40003AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float angle;

		[Token(Token = "0x40003AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector2 center;

		[Token(Token = "0x600036B")]
		[Address(RVA = "0x21DDC30", Offset = "0x21DDC30", VA = "0x21DDC30")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600036C")]
		[Address(RVA = "0x21DDC74", Offset = "0x21DDC74", VA = "0x21DDC74")]
		public Vortex()
		{
		}
	}
}
namespace Steamworks
{
	[Token(Token = "0x200007F")]
	public static class SteamAppList
	{
		[Token(Token = "0x600036D")]
		[Address(RVA = "0x1AB5C4C", Offset = "0x1AB5C4C", VA = "0x1AB5C4C")]
		public static uint GetNumInstalledApps()
		{
			return default(uint);
		}

		[Token(Token = "0x600036E")]
		[Address(RVA = "0x1AB5C68", Offset = "0x1AB5C68", VA = "0x1AB5C68")]
		public static uint GetInstalledApps(AppId_t[] pvecAppID, uint unMaxAppIDs)
		{
			return default(uint);
		}

		[Token(Token = "0x600036F")]
		[Address(RVA = "0x1AB5C9C", Offset = "0x1AB5C9C", VA = "0x1AB5C9C")]
		public static int GetAppName(AppId_t nAppID, out string pchName, int cchNameMax)
		{
			return default(int);
		}

		[Token(Token = "0x6000370")]
		[Address(RVA = "0x1AB5D8C", Offset = "0x1AB5D8C", VA = "0x1AB5D8C")]
		public static int GetAppInstallDir(AppId_t nAppID, out string pchDirectory, int cchNameMax)
		{
			return default(int);
		}

		[Token(Token = "0x6000371")]
		[Address(RVA = "0x1AB5E7C", Offset = "0x1AB5E7C", VA = "0x1AB5E7C")]
		public static int GetAppBuildId(AppId_t nAppID)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000080")]
	public static class SteamApps
	{
		[Token(Token = "0x6000372")]
		[Address(RVA = "0x1AB5EA8", Offset = "0x1AB5EA8", VA = "0x1AB5EA8")]
		public static bool BIsSubscribed()
		{
			return default(bool);
		}

		[Token(Token = "0x6000373")]
		[Address(RVA = "0x1AB5EC4", Offset = "0x1AB5EC4", VA = "0x1AB5EC4")]
		public static bool BIsLowViolence()
		{
			return default(bool);
		}

		[Token(Token = "0x6000374")]
		[Address(RVA = "0x1AB5EE0", Offset = "0x1AB5EE0", VA = "0x1AB5EE0")]
		public static bool BIsCybercafe()
		{
			return default(bool);
		}

		[Token(Token = "0x6000375")]
		[Address(RVA = "0x1AB5EFC", Offset = "0x1AB5EFC", VA = "0x1AB5EFC")]
		public static bool BIsVACBanned()
		{
			return default(bool);
		}

		[Token(Token = "0x6000376")]
		[Address(RVA = "0x1AB5F18", Offset = "0x1AB5F18", VA = "0x1AB5F18")]
		public static string GetCurrentGameLanguage()
		{
			return null;
		}

		[Token(Token = "0x6000377")]
		[Address(RVA = "0x1AB5F3C", Offset = "0x1AB5F3C", VA = "0x1AB5F3C")]
		public static string GetAvailableGameLanguages()
		{
			return null;
		}

		[Token(Token = "0x6000378")]
		[Address(RVA = "0x1AB5F60", Offset = "0x1AB5F60", VA = "0x1AB5F60")]
		public static bool BIsSubscribedApp(AppId_t appID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000379")]
		[Address(RVA = "0x1AB5F8C", Offset = "0x1AB5F8C", VA = "0x1AB5F8C")]
		public static bool BIsDlcInstalled(AppId_t appID)
		{
			return default(bool);
		}

		[Token(Token = "0x600037A")]
		[Address(RVA = "0x1AB5FB8", Offset = "0x1AB5FB8", VA = "0x1AB5FB8")]
		public static uint GetEarliestPurchaseUnixTime(AppId_t nAppID)
		{
			return default(uint);
		}

		[Token(Token = "0x600037B")]
		[Address(RVA = "0x1AB5FE4", Offset = "0x1AB5FE4", VA = "0x1AB5FE4")]
		public static bool BIsSubscribedFromFreeWeekend()
		{
			return default(bool);
		}

		[Token(Token = "0x600037C")]
		[Address(RVA = "0x1AB6000", Offset = "0x1AB6000", VA = "0x1AB6000")]
		public static int GetDLCCount()
		{
			return default(int);
		}

		[Token(Token = "0x600037D")]
		[Address(RVA = "0x1AB601C", Offset = "0x1AB601C", VA = "0x1AB601C")]
		public static bool BGetDLCDataByIndex(int iDLC, out AppId_t pAppID, out bool pbAvailable, out string pchName, int cchNameBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x600037E")]
		[Address(RVA = "0x1AB611C", Offset = "0x1AB611C", VA = "0x1AB611C")]
		public static void InstallDLC(AppId_t nAppID)
		{
		}

		[Token(Token = "0x600037F")]
		[Address(RVA = "0x1AB6148", Offset = "0x1AB6148", VA = "0x1AB6148")]
		public static void UninstallDLC(AppId_t nAppID)
		{
		}

		[Token(Token = "0x6000380")]
		[Address(RVA = "0x1AB6174", Offset = "0x1AB6174", VA = "0x1AB6174")]
		public static void RequestAppProofOfPurchaseKey(AppId_t nAppID)
		{
		}

		[Token(Token = "0x6000381")]
		[Address(RVA = "0x1AB61A0", Offset = "0x1AB61A0", VA = "0x1AB61A0")]
		public static bool GetCurrentBetaName(out string pchName, int cchNameBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000382")]
		[Address(RVA = "0x1AB6274", Offset = "0x1AB6274", VA = "0x1AB6274")]
		public static bool MarkContentCorrupt(bool bMissingFilesOnly)
		{
			return default(bool);
		}

		[Token(Token = "0x6000383")]
		[Address(RVA = "0x1AB62A0", Offset = "0x1AB62A0", VA = "0x1AB62A0")]
		public static uint GetInstalledDepots(AppId_t appID, DepotId_t[] pvecDepots, uint cMaxDepots)
		{
			return default(uint);
		}

		[Token(Token = "0x6000384")]
		[Address(RVA = "0x1AB62E4", Offset = "0x1AB62E4", VA = "0x1AB62E4")]
		public static uint GetAppInstallDir(AppId_t appID, out string pchFolder, uint cchFolderBufferSize)
		{
			return default(uint);
		}

		[Token(Token = "0x6000385")]
		[Address(RVA = "0x1AB63D0", Offset = "0x1AB63D0", VA = "0x1AB63D0")]
		public static bool BIsAppInstalled(AppId_t appID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000386")]
		[Address(RVA = "0x1AB63FC", Offset = "0x1AB63FC", VA = "0x1AB63FC")]
		public static CSteamID GetAppOwner()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000387")]
		[Address(RVA = "0x1AB6478", Offset = "0x1AB6478", VA = "0x1AB6478")]
		public static string GetLaunchQueryParam(string pchKey)
		{
			return null;
		}

		[Token(Token = "0x6000388")]
		[Address(RVA = "0x1AB65B0", Offset = "0x1AB65B0", VA = "0x1AB65B0")]
		public static bool GetDlcDownloadProgress(AppId_t nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal)
		{
			return default(bool);
		}

		[Token(Token = "0x6000389")]
		[Address(RVA = "0x1AB65F4", Offset = "0x1AB65F4", VA = "0x1AB65F4")]
		public static int GetAppBuildId()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000081")]
	public static class SteamClient
	{
		[Token(Token = "0x600038A")]
		[Address(RVA = "0x1AB6610", Offset = "0x1AB6610", VA = "0x1AB6610")]
		public static HSteamPipe CreateSteamPipe()
		{
			return default(HSteamPipe);
		}

		[Token(Token = "0x600038B")]
		[Address(RVA = "0x1AB663C", Offset = "0x1AB663C", VA = "0x1AB663C")]
		public static bool BReleaseSteamPipe(HSteamPipe hSteamPipe)
		{
			return default(bool);
		}

		[Token(Token = "0x600038C")]
		[Address(RVA = "0x1AB6668", Offset = "0x1AB6668", VA = "0x1AB6668")]
		public static HSteamUser ConnectToGlobalUser(HSteamPipe hSteamPipe)
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x600038D")]
		[Address(RVA = "0x1AB66A4", Offset = "0x1AB66A4", VA = "0x1AB66A4")]
		public static HSteamUser CreateLocalUser(out HSteamPipe phSteamPipe, EAccountType eAccountType)
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x600038E")]
		[Address(RVA = "0x1AB66E8", Offset = "0x1AB66E8", VA = "0x1AB66E8")]
		public static void ReleaseUser(HSteamPipe hSteamPipe, HSteamUser hUser)
		{
		}

		[Token(Token = "0x600038F")]
		[Address(RVA = "0x1AB671C", Offset = "0x1AB671C", VA = "0x1AB671C")]
		public static IntPtr GetISteamUser(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000390")]
		[Address(RVA = "0x1AB6858", Offset = "0x1AB6858", VA = "0x1AB6858")]
		public static IntPtr GetISteamGameServer(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000391")]
		[Address(RVA = "0x1AB6994", Offset = "0x1AB6994", VA = "0x1AB6994")]
		public static void SetLocalIPBinding(uint unIP, ushort usPort)
		{
		}

		[Token(Token = "0x6000392")]
		[Address(RVA = "0x1AB69C8", Offset = "0x1AB69C8", VA = "0x1AB69C8")]
		public static IntPtr GetISteamFriends(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000393")]
		[Address(RVA = "0x1AB6B04", Offset = "0x1AB6B04", VA = "0x1AB6B04")]
		public static IntPtr GetISteamUtils(HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000394")]
		[Address(RVA = "0x1AB6C38", Offset = "0x1AB6C38", VA = "0x1AB6C38")]
		public static IntPtr GetISteamMatchmaking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000395")]
		[Address(RVA = "0x1AB6D74", Offset = "0x1AB6D74", VA = "0x1AB6D74")]
		public static IntPtr GetISteamMatchmakingServers(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000396")]
		[Address(RVA = "0x1AB6EB0", Offset = "0x1AB6EB0", VA = "0x1AB6EB0")]
		public static IntPtr GetISteamGenericInterface(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000397")]
		[Address(RVA = "0x1AB6FEC", Offset = "0x1AB6FEC", VA = "0x1AB6FEC")]
		public static IntPtr GetISteamUserStats(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000398")]
		[Address(RVA = "0x1AB7128", Offset = "0x1AB7128", VA = "0x1AB7128")]
		public static IntPtr GetISteamGameServerStats(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000399")]
		[Address(RVA = "0x1AB7264", Offset = "0x1AB7264", VA = "0x1AB7264")]
		public static IntPtr GetISteamApps(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600039A")]
		[Address(RVA = "0x1AB73A0", Offset = "0x1AB73A0", VA = "0x1AB73A0")]
		public static IntPtr GetISteamNetworking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600039B")]
		[Address(RVA = "0x1AB74DC", Offset = "0x1AB74DC", VA = "0x1AB74DC")]
		public static IntPtr GetISteamRemoteStorage(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600039C")]
		[Address(RVA = "0x1AB7618", Offset = "0x1AB7618", VA = "0x1AB7618")]
		public static IntPtr GetISteamScreenshots(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600039D")]
		[Address(RVA = "0x1AB7754", Offset = "0x1AB7754", VA = "0x1AB7754")]
		public static void RunFrame()
		{
		}

		[Token(Token = "0x600039E")]
		[Address(RVA = "0x1AB7770", Offset = "0x1AB7770", VA = "0x1AB7770")]
		public static uint GetIPCCallCount()
		{
			return default(uint);
		}

		[Token(Token = "0x600039F")]
		[Address(RVA = "0x1AB778C", Offset = "0x1AB778C", VA = "0x1AB778C")]
		public static void SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction)
		{
		}

		[Token(Token = "0x60003A0")]
		[Address(RVA = "0x1AB77B8", Offset = "0x1AB77B8", VA = "0x1AB77B8")]
		public static bool BShutdownIfAllPipesClosed()
		{
			return default(bool);
		}

		[Token(Token = "0x60003A1")]
		[Address(RVA = "0x1AB77D4", Offset = "0x1AB77D4", VA = "0x1AB77D4")]
		public static IntPtr GetISteamHTTP(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60003A2")]
		[Address(RVA = "0x1AB7910", Offset = "0x1AB7910", VA = "0x1AB7910")]
		public static IntPtr GetISteamUnifiedMessages(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60003A3")]
		[Address(RVA = "0x1AB7A4C", Offset = "0x1AB7A4C", VA = "0x1AB7A4C")]
		public static IntPtr GetISteamController(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60003A4")]
		[Address(RVA = "0x1AB7B88", Offset = "0x1AB7B88", VA = "0x1AB7B88")]
		public static IntPtr GetISteamUGC(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60003A5")]
		[Address(RVA = "0x1AB7CC4", Offset = "0x1AB7CC4", VA = "0x1AB7CC4")]
		public static IntPtr GetISteamAppList(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60003A6")]
		[Address(RVA = "0x1AB7E00", Offset = "0x1AB7E00", VA = "0x1AB7E00")]
		public static IntPtr GetISteamMusic(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60003A7")]
		[Address(RVA = "0x1AB7F3C", Offset = "0x1AB7F3C", VA = "0x1AB7F3C")]
		public static IntPtr GetISteamMusicRemote(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60003A8")]
		[Address(RVA = "0x1AB8078", Offset = "0x1AB8078", VA = "0x1AB8078")]
		public static IntPtr GetISteamHTMLSurface(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60003A9")]
		[Address(RVA = "0x1AB81B4", Offset = "0x1AB81B4", VA = "0x1AB81B4")]
		public static void Set_SteamAPI_CPostAPIResultInProcess(SteamAPI_PostAPIResultInProcess_t func)
		{
		}

		[Token(Token = "0x60003AA")]
		[Address(RVA = "0x1AB81E0", Offset = "0x1AB81E0", VA = "0x1AB81E0")]
		public static void Remove_SteamAPI_CPostAPIResultInProcess(SteamAPI_PostAPIResultInProcess_t func)
		{
		}

		[Token(Token = "0x60003AB")]
		[Address(RVA = "0x1AB820C", Offset = "0x1AB820C", VA = "0x1AB820C")]
		public static void Set_SteamAPI_CCheckCallbackRegisteredInProcess(SteamAPI_CheckCallbackRegistered_t func)
		{
		}

		[Token(Token = "0x60003AC")]
		[Address(RVA = "0x1AB8238", Offset = "0x1AB8238", VA = "0x1AB8238")]
		public static IntPtr GetISteamInventory(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60003AD")]
		[Address(RVA = "0x1AB8374", Offset = "0x1AB8374", VA = "0x1AB8374")]
		public static IntPtr GetISteamVideo(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x2000082")]
	public static class SteamController
	{
		[Token(Token = "0x60003AE")]
		[Address(RVA = "0x1AB84B0", Offset = "0x1AB84B0", VA = "0x1AB84B0")]
		public static bool Init(string pchAbsolutePathToControllerConfigVDF)
		{
			return default(bool);
		}

		[Token(Token = "0x60003AF")]
		[Address(RVA = "0x1AB85DC", Offset = "0x1AB85DC", VA = "0x1AB85DC")]
		public static bool Shutdown()
		{
			return default(bool);
		}

		[Token(Token = "0x60003B0")]
		[Address(RVA = "0x1AB85F8", Offset = "0x1AB85F8", VA = "0x1AB85F8")]
		public static void RunFrame()
		{
		}

		[Token(Token = "0x60003B1")]
		[Address(RVA = "0x1AB8614", Offset = "0x1AB8614", VA = "0x1AB8614")]
		public static bool GetControllerState(uint unControllerIndex, out SteamControllerState_t pState)
		{
			return default(bool);
		}

		[Token(Token = "0x60003B2")]
		[Address(RVA = "0x1AB8648", Offset = "0x1AB8648", VA = "0x1AB8648")]
		public static void TriggerHapticPulse(uint unControllerIndex, ESteamControllerPad eTargetPad, ushort usDurationMicroSec)
		{
		}

		[Token(Token = "0x60003B3")]
		[Address(RVA = "0x1AB868C", Offset = "0x1AB868C", VA = "0x1AB868C")]
		public static void SetOverrideMode(string pchMode)
		{
		}
	}
	[Token(Token = "0x2000083")]
	public static class SteamFriends
	{
		[Token(Token = "0x60003B4")]
		[Address(RVA = "0x1AB8A48", Offset = "0x1AB8A48", VA = "0x1AB8A48")]
		public static string GetPersonaName()
		{
			return null;
		}

		[Token(Token = "0x60003B5")]
		[Address(RVA = "0x1AB8A6C", Offset = "0x1AB8A6C", VA = "0x1AB8A6C")]
		public static SteamAPICall_t SetPersonaName(string pchPersonaName)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60003B6")]
		[Address(RVA = "0x1AB8BBC", Offset = "0x1AB8BBC", VA = "0x1AB8BBC")]
		public static EPersonaState GetPersonaState()
		{
			return default(EPersonaState);
		}

		[Token(Token = "0x60003B7")]
		[Address(RVA = "0x1AB8BD8", Offset = "0x1AB8BD8", VA = "0x1AB8BD8")]
		public static int GetFriendCount(EFriendFlags iFriendFlags)
		{
			return default(int);
		}

		[Token(Token = "0x60003B8")]
		[Address(RVA = "0x1AB8C04", Offset = "0x1AB8C04", VA = "0x1AB8C04")]
		public static CSteamID GetFriendByIndex(int iFriend, EFriendFlags iFriendFlags)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60003B9")]
		[Address(RVA = "0x1AB8C98", Offset = "0x1AB8C98", VA = "0x1AB8C98")]
		public static EFriendRelationship GetFriendRelationship(CSteamID steamIDFriend)
		{
			return default(EFriendRelationship);
		}

		[Token(Token = "0x60003BA")]
		[Address(RVA = "0x1AB8CC4", Offset = "0x1AB8CC4", VA = "0x1AB8CC4")]
		public static EPersonaState GetFriendPersonaState(CSteamID steamIDFriend)
		{
			return default(EPersonaState);
		}

		[Token(Token = "0x60003BB")]
		[Address(RVA = "0x1AB8CF0", Offset = "0x1AB8CF0", VA = "0x1AB8CF0")]
		public static string GetFriendPersonaName(CSteamID steamIDFriend)
		{
			return null;
		}

		[Token(Token = "0x60003BC")]
		[Address(RVA = "0x1AB8D24", Offset = "0x1AB8D24", VA = "0x1AB8D24")]
		public static bool GetFriendGamePlayed(CSteamID steamIDFriend, out FriendGameInfo_t pFriendGameInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x60003BD")]
		[Address(RVA = "0x1AB8D58", Offset = "0x1AB8D58", VA = "0x1AB8D58")]
		public static string GetFriendPersonaNameHistory(CSteamID steamIDFriend, int iPersonaName)
		{
			return null;
		}

		[Token(Token = "0x60003BE")]
		[Address(RVA = "0x1AB8D94", Offset = "0x1AB8D94", VA = "0x1AB8D94")]
		public static int GetFriendSteamLevel(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x60003BF")]
		[Address(RVA = "0x1AB8DC0", Offset = "0x1AB8DC0", VA = "0x1AB8DC0")]
		public static string GetPlayerNickname(CSteamID steamIDPlayer)
		{
			return null;
		}

		[Token(Token = "0x60003C0")]
		[Address(RVA = "0x1AB8DF4", Offset = "0x1AB8DF4", VA = "0x1AB8DF4")]
		public static int GetFriendsGroupCount()
		{
			return default(int);
		}

		[Token(Token = "0x60003C1")]
		[Address(RVA = "0x1AB8E10", Offset = "0x1AB8E10", VA = "0x1AB8E10")]
		public static FriendsGroupID_t GetFriendsGroupIDByIndex(int iFG)
		{
			return default(FriendsGroupID_t);
		}

		[Token(Token = "0x60003C2")]
		[Address(RVA = "0x1AB8E9C", Offset = "0x1AB8E9C", VA = "0x1AB8E9C")]
		public static string GetFriendsGroupName(FriendsGroupID_t friendsGroupID)
		{
			return null;
		}

		[Token(Token = "0x60003C3")]
		[Address(RVA = "0x1AB8ED0", Offset = "0x1AB8ED0", VA = "0x1AB8ED0")]
		public static int GetFriendsGroupMembersCount(FriendsGroupID_t friendsGroupID)
		{
			return default(int);
		}

		[Token(Token = "0x60003C4")]
		[Address(RVA = "0x1AB8EFC", Offset = "0x1AB8EFC", VA = "0x1AB8EFC")]
		public static void GetFriendsGroupMembersList(FriendsGroupID_t friendsGroupID, CSteamID[] pOutSteamIDMembers, int nMembersCount)
		{
		}

		[Token(Token = "0x60003C5")]
		[Address(RVA = "0x1AB8F40", Offset = "0x1AB8F40", VA = "0x1AB8F40")]
		public static bool HasFriend(CSteamID steamIDFriend, EFriendFlags iFriendFlags)
		{
			return default(bool);
		}

		[Token(Token = "0x60003C6")]
		[Address(RVA = "0x1AB8F74", Offset = "0x1AB8F74", VA = "0x1AB8F74")]
		public static int GetClanCount()
		{
			return default(int);
		}

		[Token(Token = "0x60003C7")]
		[Address(RVA = "0x1AB8F90", Offset = "0x1AB8F90", VA = "0x1AB8F90")]
		public static CSteamID GetClanByIndex(int iClan)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60003C8")]
		[Address(RVA = "0x1AB9014", Offset = "0x1AB9014", VA = "0x1AB9014")]
		public static string GetClanName(CSteamID steamIDClan)
		{
			return null;
		}

		[Token(Token = "0x60003C9")]
		[Address(RVA = "0x1AB9048", Offset = "0x1AB9048", VA = "0x1AB9048")]
		public static string GetClanTag(CSteamID steamIDClan)
		{
			return null;
		}

		[Token(Token = "0x60003CA")]
		[Address(RVA = "0x1AB907C", Offset = "0x1AB907C", VA = "0x1AB907C")]
		public static bool GetClanActivityCounts(CSteamID steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting)
		{
			return default(bool);
		}

		[Token(Token = "0x60003CB")]
		[Address(RVA = "0x1AB90C8", Offset = "0x1AB90C8", VA = "0x1AB90C8")]
		public static SteamAPICall_t DownloadClanActivityCounts(CSteamID[] psteamIDClans, int cClansToRequest)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60003CC")]
		[Address(RVA = "0x1AB9158", Offset = "0x1AB9158", VA = "0x1AB9158")]
		public static int GetFriendCountFromSource(CSteamID steamIDSource)
		{
			return default(int);
		}

		[Token(Token = "0x60003CD")]
		[Address(RVA = "0x1AB9184", Offset = "0x1AB9184", VA = "0x1AB9184")]
		public static CSteamID GetFriendFromSourceByIndex(CSteamID steamIDSource, int iFriend)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60003CE")]
		[Address(RVA = "0x1AB9218", Offset = "0x1AB9218", VA = "0x1AB9218")]
		public static bool IsUserInSource(CSteamID steamIDUser, CSteamID steamIDSource)
		{
			return default(bool);
		}

		[Token(Token = "0x60003CF")]
		[Address(RVA = "0x1AB924C", Offset = "0x1AB924C", VA = "0x1AB924C")]
		public static void SetInGameVoiceSpeaking(CSteamID steamIDUser, bool bSpeaking)
		{
		}

		[Token(Token = "0x60003D0")]
		[Address(RVA = "0x1AB9280", Offset = "0x1AB9280", VA = "0x1AB9280")]
		public static void ActivateGameOverlay(string pchDialog)
		{
		}

		[Token(Token = "0x60003D1")]
		[Address(RVA = "0x1AB93A0", Offset = "0x1AB93A0", VA = "0x1AB93A0")]
		public static void ActivateGameOverlayToUser(string pchDialog, CSteamID steamID)
		{
		}

		[Token(Token = "0x60003D2")]
		[Address(RVA = "0x1AB94D4", Offset = "0x1AB94D4", VA = "0x1AB94D4")]
		public static void ActivateGameOverlayToWebPage(string pchURL)
		{
		}

		[Token(Token = "0x60003D3")]
		[Address(RVA = "0x1AB95F4", Offset = "0x1AB95F4", VA = "0x1AB95F4")]
		public static void ActivateGameOverlayToStore(AppId_t nAppID, EOverlayToStoreFlag eFlag)
		{
		}

		[Token(Token = "0x60003D4")]
		[Address(RVA = "0x1AB9628", Offset = "0x1AB9628", VA = "0x1AB9628")]
		public static void SetPlayedWith(CSteamID steamIDUserPlayedWith)
		{
		}

		[Token(Token = "0x60003D5")]
		[Address(RVA = "0x1AB9654", Offset = "0x1AB9654", VA = "0x1AB9654")]
		public static void ActivateGameOverlayInviteDialog(CSteamID steamIDLobby)
		{
		}

		[Token(Token = "0x60003D6")]
		[Address(RVA = "0x1AB9680", Offset = "0x1AB9680", VA = "0x1AB9680")]
		public static int GetSmallFriendAvatar(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x60003D7")]
		[Address(RVA = "0x1AB96AC", Offset = "0x1AB96AC", VA = "0x1AB96AC")]
		public static int GetMediumFriendAvatar(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x60003D8")]
		[Address(RVA = "0x1AB96D8", Offset = "0x1AB96D8", VA = "0x1AB96D8")]
		public static int GetLargeFriendAvatar(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x60003D9")]
		[Address(RVA = "0x1AB9704", Offset = "0x1AB9704", VA = "0x1AB9704")]
		public static bool RequestUserInformation(CSteamID steamIDUser, bool bRequireNameOnly)
		{
			return default(bool);
		}

		[Token(Token = "0x60003DA")]
		[Address(RVA = "0x1AB9738", Offset = "0x1AB9738", VA = "0x1AB9738")]
		public static SteamAPICall_t RequestClanOfficerList(CSteamID steamIDClan)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60003DB")]
		[Address(RVA = "0x1AB97B8", Offset = "0x1AB97B8", VA = "0x1AB97B8")]
		public static CSteamID GetClanOwner(CSteamID steamIDClan)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60003DC")]
		[Address(RVA = "0x1AB983C", Offset = "0x1AB983C", VA = "0x1AB983C")]
		public static int GetClanOfficerCount(CSteamID steamIDClan)
		{
			return default(int);
		}

		[Token(Token = "0x60003DD")]
		[Address(RVA = "0x1AB9868", Offset = "0x1AB9868", VA = "0x1AB9868")]
		public static CSteamID GetClanOfficerByIndex(CSteamID steamIDClan, int iOfficer)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60003DE")]
		[Address(RVA = "0x1AB98FC", Offset = "0x1AB98FC", VA = "0x1AB98FC")]
		public static uint GetUserRestrictions()
		{
			return default(uint);
		}

		[Token(Token = "0x60003DF")]
		[Address(RVA = "0x1AB9918", Offset = "0x1AB9918", VA = "0x1AB9918")]
		public static bool SetRichPresence(string pchKey, string pchValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60003E0")]
		[Address(RVA = "0x1AB9B4C", Offset = "0x1AB9B4C", VA = "0x1AB9B4C")]
		public static void ClearRichPresence()
		{
		}

		[Token(Token = "0x60003E1")]
		[Address(RVA = "0x1AB9B68", Offset = "0x1AB9B68", VA = "0x1AB9B68")]
		public static string GetFriendRichPresence(CSteamID steamIDFriend, string pchKey)
		{
			return null;
		}

		[Token(Token = "0x60003E2")]
		[Address(RVA = "0x1AB9CA8", Offset = "0x1AB9CA8", VA = "0x1AB9CA8")]
		public static int GetFriendRichPresenceKeyCount(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x60003E3")]
		[Address(RVA = "0x1AB9CD4", Offset = "0x1AB9CD4", VA = "0x1AB9CD4")]
		public static string GetFriendRichPresenceKeyByIndex(CSteamID steamIDFriend, int iKey)
		{
			return null;
		}

		[Token(Token = "0x60003E4")]
		[Address(RVA = "0x1AB9D10", Offset = "0x1AB9D10", VA = "0x1AB9D10")]
		public static void RequestFriendRichPresence(CSteamID steamIDFriend)
		{
		}

		[Token(Token = "0x60003E5")]
		[Address(RVA = "0x1AB9D3C", Offset = "0x1AB9D3C", VA = "0x1AB9D3C")]
		public static bool InviteUserToGame(CSteamID steamIDFriend, string pchConnectString)
		{
			return default(bool);
		}

		[Token(Token = "0x60003E6")]
		[Address(RVA = "0x1AB9E70", Offset = "0x1AB9E70", VA = "0x1AB9E70")]
		public static int GetCoplayFriendCount()
		{
			return default(int);
		}

		[Token(Token = "0x60003E7")]
		[Address(RVA = "0x1AB9E8C", Offset = "0x1AB9E8C", VA = "0x1AB9E8C")]
		public static CSteamID GetCoplayFriend(int iCoplayFriend)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60003E8")]
		[Address(RVA = "0x1AB9F10", Offset = "0x1AB9F10", VA = "0x1AB9F10")]
		public static int GetFriendCoplayTime(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x60003E9")]
		[Address(RVA = "0x1AB9F3C", Offset = "0x1AB9F3C", VA = "0x1AB9F3C")]
		public static AppId_t GetFriendCoplayGame(CSteamID steamIDFriend)
		{
			return default(AppId_t);
		}

		[Token(Token = "0x60003EA")]
		[Address(RVA = "0x1AB9FC8", Offset = "0x1AB9FC8", VA = "0x1AB9FC8")]
		public static SteamAPICall_t JoinClanChatRoom(CSteamID steamIDClan)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60003EB")]
		[Address(RVA = "0x1ABA048", Offset = "0x1ABA048", VA = "0x1ABA048")]
		public static bool LeaveClanChatRoom(CSteamID steamIDClan)
		{
			return default(bool);
		}

		[Token(Token = "0x60003EC")]
		[Address(RVA = "0x1ABA074", Offset = "0x1ABA074", VA = "0x1ABA074")]
		public static int GetClanChatMemberCount(CSteamID steamIDClan)
		{
			return default(int);
		}

		[Token(Token = "0x60003ED")]
		[Address(RVA = "0x1ABA0A0", Offset = "0x1ABA0A0", VA = "0x1ABA0A0")]
		public static CSteamID GetChatMemberByIndex(CSteamID steamIDClan, int iUser)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60003EE")]
		[Address(RVA = "0x1ABA134", Offset = "0x1ABA134", VA = "0x1ABA134")]
		public static bool SendClanChatMessage(CSteamID steamIDClanChat, string pchText)
		{
			return default(bool);
		}

		[Token(Token = "0x60003EF")]
		[Address(RVA = "0x1ABA268", Offset = "0x1ABA268", VA = "0x1ABA268")]
		public static int GetClanChatMessage(CSteamID steamIDClanChat, int iMessage, out string prgchText, int cchTextMax, out EChatEntryType peChatEntryType, out CSteamID psteamidChatter)
		{
			return default(int);
		}

		[Token(Token = "0x60003F0")]
		[Address(RVA = "0x1ABA374", Offset = "0x1ABA374", VA = "0x1ABA374")]
		public static bool IsClanChatAdmin(CSteamID steamIDClanChat, CSteamID steamIDUser)
		{
			return default(bool);
		}

		[Token(Token = "0x60003F1")]
		[Address(RVA = "0x1ABA3A8", Offset = "0x1ABA3A8", VA = "0x1ABA3A8")]
		public static bool IsClanChatWindowOpenInSteam(CSteamID steamIDClanChat)
		{
			return default(bool);
		}

		[Token(Token = "0x60003F2")]
		[Address(RVA = "0x1ABA3D4", Offset = "0x1ABA3D4", VA = "0x1ABA3D4")]
		public static bool OpenClanChatWindowInSteam(CSteamID steamIDClanChat)
		{
			return default(bool);
		}

		[Token(Token = "0x60003F3")]
		[Address(RVA = "0x1ABA400", Offset = "0x1ABA400", VA = "0x1ABA400")]
		public static bool CloseClanChatWindowInSteam(CSteamID steamIDClanChat)
		{
			return default(bool);
		}

		[Token(Token = "0x60003F4")]
		[Address(RVA = "0x1ABA42C", Offset = "0x1ABA42C", VA = "0x1ABA42C")]
		public static bool SetListenForFriendsMessages(bool bInterceptEnabled)
		{
			return default(bool);
		}

		[Token(Token = "0x60003F5")]
		[Address(RVA = "0x1ABA458", Offset = "0x1ABA458", VA = "0x1ABA458")]
		public static bool ReplyToFriendMessage(CSteamID steamIDFriend, string pchMsgToSend)
		{
			return default(bool);
		}

		[Token(Token = "0x60003F6")]
		[Address(RVA = "0x1ABA58C", Offset = "0x1ABA58C", VA = "0x1ABA58C")]
		public static int GetFriendMessage(CSteamID steamIDFriend, int iMessageID, out string pvData, int cubData, out EChatEntryType peChatEntryType)
		{
			return default(int);
		}

		[Token(Token = "0x60003F7")]
		[Address(RVA = "0x1ABA690", Offset = "0x1ABA690", VA = "0x1ABA690")]
		public static SteamAPICall_t GetFollowerCount(CSteamID steamID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60003F8")]
		[Address(RVA = "0x1ABA710", Offset = "0x1ABA710", VA = "0x1ABA710")]
		public static SteamAPICall_t IsFollowing(CSteamID steamID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60003F9")]
		[Address(RVA = "0x1ABA790", Offset = "0x1ABA790", VA = "0x1ABA790")]
		public static SteamAPICall_t EnumerateFollowingList(uint unStartIndex)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x2000084")]
	public static class SteamGameServer
	{
		[Token(Token = "0x60003FA")]
		[Address(RVA = "0x1ABA810", Offset = "0x1ABA810", VA = "0x1ABA810")]
		public static bool InitGameServer(uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, AppId_t nGameAppId, string pchVersionString)
		{
			return default(bool);
		}

		[Token(Token = "0x60003FB")]
		[Address(RVA = "0x1ABA974", Offset = "0x1ABA974", VA = "0x1ABA974")]
		public static void SetProduct(string pszProduct)
		{
		}

		[Token(Token = "0x60003FC")]
		[Address(RVA = "0x1ABAA94", Offset = "0x1ABAA94", VA = "0x1ABAA94")]
		public static void SetGameDescription(string pszGameDescription)
		{
		}

		[Token(Token = "0x60003FD")]
		[Address(RVA = "0x1ABABB4", Offset = "0x1ABABB4", VA = "0x1ABABB4")]
		public static void SetModDir(string pszModDir)
		{
		}

		[Token(Token = "0x60003FE")]
		[Address(RVA = "0x1ABACD4", Offset = "0x1ABACD4", VA = "0x1ABACD4")]
		public static void SetDedicatedServer(bool bDedicated)
		{
		}

		[Token(Token = "0x60003FF")]
		[Address(RVA = "0x1ABAD00", Offset = "0x1ABAD00", VA = "0x1ABAD00")]
		public static void LogOn(string pszToken)
		{
		}

		[Token(Token = "0x6000400")]
		[Address(RVA = "0x1ABAE20", Offset = "0x1ABAE20", VA = "0x1ABAE20")]
		public static void LogOnAnonymous()
		{
		}

		[Token(Token = "0x6000401")]
		[Address(RVA = "0x1ABAE3C", Offset = "0x1ABAE3C", VA = "0x1ABAE3C")]
		public static void LogOff()
		{
		}

		[Token(Token = "0x6000402")]
		[Address(RVA = "0x1ABAE58", Offset = "0x1ABAE58", VA = "0x1ABAE58")]
		public static bool BLoggedOn()
		{
			return default(bool);
		}

		[Token(Token = "0x6000403")]
		[Address(RVA = "0x1ABAE74", Offset = "0x1ABAE74", VA = "0x1ABAE74")]
		public static bool BSecure()
		{
			return default(bool);
		}

		[Token(Token = "0x6000404")]
		[Address(RVA = "0x1ABAE90", Offset = "0x1ABAE90", VA = "0x1ABAE90")]
		public static CSteamID GetSteamID()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000405")]
		[Address(RVA = "0x1ABAF0C", Offset = "0x1ABAF0C", VA = "0x1ABAF0C")]
		public static bool WasRestartRequested()
		{
			return default(bool);
		}

		[Token(Token = "0x6000406")]
		[Address(RVA = "0x1ABAF28", Offset = "0x1ABAF28", VA = "0x1ABAF28")]
		public static void SetMaxPlayerCount(int cPlayersMax)
		{
		}

		[Token(Token = "0x6000407")]
		[Address(RVA = "0x1ABAF54", Offset = "0x1ABAF54", VA = "0x1ABAF54")]
		public static void SetBotPlayerCount(int cBotplayers)
		{
		}

		[Token(Token = "0x6000408")]
		[Address(RVA = "0x1ABAF80", Offset = "0x1ABAF80", VA = "0x1ABAF80")]
		public static void SetServerName(string pszServerName)
		{
		}

		[Token(Token = "0x6000409")]
		[Address(RVA = "0x1ABB0A0", Offset = "0x1ABB0A0", VA = "0x1ABB0A0")]
		public static void SetMapName(string pszMapName)
		{
		}

		[Token(Token = "0x600040A")]
		[Address(RVA = "0x1ABB1C0", Offset = "0x1ABB1C0", VA = "0x1ABB1C0")]
		public static void SetPasswordProtected(bool bPasswordProtected)
		{
		}

		[Token(Token = "0x600040B")]
		[Address(RVA = "0x1ABB1EC", Offset = "0x1ABB1EC", VA = "0x1ABB1EC")]
		public static void SetSpectatorPort(ushort unSpectatorPort)
		{
		}

		[Token(Token = "0x600040C")]
		[Address(RVA = "0x1ABB218", Offset = "0x1ABB218", VA = "0x1ABB218")]
		public static void SetSpectatorServerName(string pszSpectatorServerName)
		{
		}

		[Token(Token = "0x600040D")]
		[Address(RVA = "0x1ABB338", Offset = "0x1ABB338", VA = "0x1ABB338")]
		public static void ClearAllKeyValues()
		{
		}

		[Token(Token = "0x600040E")]
		[Address(RVA = "0x1ABB354", Offset = "0x1ABB354", VA = "0x1ABB354")]
		public static void SetKeyValue(string pKey, string pValue)
		{
		}

		[Token(Token = "0x600040F")]
		[Address(RVA = "0x1ABB574", Offset = "0x1ABB574", VA = "0x1ABB574")]
		public static void SetGameTags(string pchGameTags)
		{
		}

		[Token(Token = "0x6000410")]
		[Address(RVA = "0x1ABB694", Offset = "0x1ABB694", VA = "0x1ABB694")]
		public static void SetGameData(string pchGameData)
		{
		}

		[Token(Token = "0x6000411")]
		[Address(RVA = "0x1ABB7B4", Offset = "0x1ABB7B4", VA = "0x1ABB7B4")]
		public static void SetRegion(string pszRegion)
		{
		}

		[Token(Token = "0x6000412")]
		[Address(RVA = "0x1ABB8D4", Offset = "0x1ABB8D4", VA = "0x1ABB8D4")]
		public static bool SendUserConnectAndAuthenticate(uint unIPClient, byte[] pvAuthBlob, uint cubAuthBlobSize, out CSteamID pSteamIDUser)
		{
			return default(bool);
		}

		[Token(Token = "0x6000413")]
		[Address(RVA = "0x1ABB920", Offset = "0x1ABB920", VA = "0x1ABB920")]
		public static CSteamID CreateUnauthenticatedUserConnection()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000414")]
		[Address(RVA = "0x1ABB99C", Offset = "0x1ABB99C", VA = "0x1ABB99C")]
		public static void SendUserDisconnect(CSteamID steamIDUser)
		{
		}

		[Token(Token = "0x6000415")]
		[Address(RVA = "0x1ABB9C8", Offset = "0x1ABB9C8", VA = "0x1ABB9C8")]
		public static bool BUpdateUserData(CSteamID steamIDUser, string pchPlayerName, uint uScore)
		{
			return default(bool);
		}

		[Token(Token = "0x6000416")]
		[Address(RVA = "0x1ABBB04", Offset = "0x1ABBB04", VA = "0x1ABBB04")]
		public static HAuthTicket GetAuthSessionTicket(byte[] pTicket, int cbMaxTicket, out uint pcbTicket)
		{
			return default(HAuthTicket);
		}

		[Token(Token = "0x6000417")]
		[Address(RVA = "0x1ABBBA8", Offset = "0x1ABBBA8", VA = "0x1ABBBA8")]
		public static EBeginAuthSessionResult BeginAuthSession(byte[] pAuthTicket, int cbAuthTicket, CSteamID steamID)
		{
			return default(EBeginAuthSessionResult);
		}

		[Token(Token = "0x6000418")]
		[Address(RVA = "0x1ABBBEC", Offset = "0x1ABBBEC", VA = "0x1ABBBEC")]
		public static void EndAuthSession(CSteamID steamID)
		{
		}

		[Token(Token = "0x6000419")]
		[Address(RVA = "0x1ABBC18", Offset = "0x1ABBC18", VA = "0x1ABBC18")]
		public static void CancelAuthTicket(HAuthTicket hAuthTicket)
		{
		}

		[Token(Token = "0x600041A")]
		[Address(RVA = "0x1ABBC44", Offset = "0x1ABBC44", VA = "0x1ABBC44")]
		public static EUserHasLicenseForAppResult UserHasLicenseForApp(CSteamID steamID, AppId_t appID)
		{
			return default(EUserHasLicenseForAppResult);
		}

		[Token(Token = "0x600041B")]
		[Address(RVA = "0x1ABBC78", Offset = "0x1ABBC78", VA = "0x1ABBC78")]
		public static bool RequestUserGroupStatus(CSteamID steamIDUser, CSteamID steamIDGroup)
		{
			return default(bool);
		}

		[Token(Token = "0x600041C")]
		[Address(RVA = "0x1ABBCAC", Offset = "0x1ABBCAC", VA = "0x1ABBCAC")]
		public static void GetGameplayStats()
		{
		}

		[Token(Token = "0x600041D")]
		[Address(RVA = "0x1ABBCC8", Offset = "0x1ABBCC8", VA = "0x1ABBCC8")]
		public static SteamAPICall_t GetServerReputation()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600041E")]
		[Address(RVA = "0x1ABBD40", Offset = "0x1ABBD40", VA = "0x1ABBD40")]
		public static uint GetPublicIP()
		{
			return default(uint);
		}

		[Token(Token = "0x600041F")]
		[Address(RVA = "0x1ABBD5C", Offset = "0x1ABBD5C", VA = "0x1ABBD5C")]
		public static bool HandleIncomingPacket(byte[] pData, int cbData, uint srcIP, ushort srcPort)
		{
			return default(bool);
		}

		[Token(Token = "0x6000420")]
		[Address(RVA = "0x1ABBDA8", Offset = "0x1ABBDA8", VA = "0x1ABBDA8")]
		public static int GetNextOutgoingPacket(byte[] pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort)
		{
			return default(int);
		}

		[Token(Token = "0x6000421")]
		[Address(RVA = "0x1ABBDF4", Offset = "0x1ABBDF4", VA = "0x1ABBDF4")]
		public static void EnableHeartbeats(bool bActive)
		{
		}

		[Token(Token = "0x6000422")]
		[Address(RVA = "0x1ABBE20", Offset = "0x1ABBE20", VA = "0x1ABBE20")]
		public static void SetHeartbeatInterval(int iHeartbeatInterval)
		{
		}

		[Token(Token = "0x6000423")]
		[Address(RVA = "0x1ABBE4C", Offset = "0x1ABBE4C", VA = "0x1ABBE4C")]
		public static void ForceHeartbeat()
		{
		}

		[Token(Token = "0x6000424")]
		[Address(RVA = "0x1ABBE68", Offset = "0x1ABBE68", VA = "0x1ABBE68")]
		public static SteamAPICall_t AssociateWithClan(CSteamID steamIDClan)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000425")]
		[Address(RVA = "0x1ABBEE8", Offset = "0x1ABBEE8", VA = "0x1ABBEE8")]
		public static SteamAPICall_t ComputeNewPlayerCompatibility(CSteamID steamIDNewPlayer)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x2000085")]
	public static class SteamGameServerHTTP
	{
		[Token(Token = "0x6000426")]
		[Address(RVA = "0x1ABBF68", Offset = "0x1ABBF68", VA = "0x1ABBF68")]
		public static HTTPRequestHandle CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, string pchAbsoluteURL)
		{
			return default(HTTPRequestHandle);
		}

		[Token(Token = "0x6000427")]
		[Address(RVA = "0x1ABC0D0", Offset = "0x1ABC0D0", VA = "0x1ABC0D0")]
		public static bool SetHTTPRequestContextValue(HTTPRequestHandle hRequest, ulong ulContextValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000428")]
		[Address(RVA = "0x1ABC104", Offset = "0x1ABC104", VA = "0x1ABC104")]
		public static bool SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, uint unTimeoutSeconds)
		{
			return default(bool);
		}

		[Token(Token = "0x6000429")]
		[Address(RVA = "0x1ABC138", Offset = "0x1ABC138", VA = "0x1ABC138")]
		public static bool SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, string pchHeaderValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600042A")]
		[Address(RVA = "0x1ABC37C", Offset = "0x1ABC37C", VA = "0x1ABC37C")]
		public static bool SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, string pchParamName, string pchParamValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600042B")]
		[Address(RVA = "0x1ABC5C0", Offset = "0x1ABC5C0", VA = "0x1ABC5C0")]
		public static bool SendHTTPRequest(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x600042C")]
		[Address(RVA = "0x1ABC5F4", Offset = "0x1ABC5F4", VA = "0x1ABC5F4")]
		public static bool SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x600042D")]
		[Address(RVA = "0x1ABC628", Offset = "0x1ABC628", VA = "0x1ABC628")]
		public static bool DeferHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x600042E")]
		[Address(RVA = "0x1ABC654", Offset = "0x1ABC654", VA = "0x1ABC654")]
		public static bool PrioritizeHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x600042F")]
		[Address(RVA = "0x1ABC680", Offset = "0x1ABC680", VA = "0x1ABC680")]
		public static bool GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, string pchHeaderName, out uint unResponseHeaderSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000430")]
		[Address(RVA = "0x1ABC7BC", Offset = "0x1ABC7BC", VA = "0x1ABC7BC")]
		public static bool GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, byte[] pHeaderValueBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000431")]
		[Address(RVA = "0x1ABC908", Offset = "0x1ABC908", VA = "0x1ABC908")]
		public static bool GetHTTPResponseBodySize(HTTPRequestHandle hRequest, out uint unBodySize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000432")]
		[Address(RVA = "0x1ABC93C", Offset = "0x1ABC93C", VA = "0x1ABC93C")]
		public static bool GetHTTPResponseBodyData(HTTPRequestHandle hRequest, byte[] pBodyDataBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000433")]
		[Address(RVA = "0x1ABC980", Offset = "0x1ABC980", VA = "0x1ABC980")]
		public static bool GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, uint cOffset, byte[] pBodyDataBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000434")]
		[Address(RVA = "0x1ABC9CC", Offset = "0x1ABC9CC", VA = "0x1ABC9CC")]
		public static bool ReleaseHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x6000435")]
		[Address(RVA = "0x1ABC9F8", Offset = "0x1ABC9F8", VA = "0x1ABC9F8")]
		public static bool GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, out float pflPercentOut)
		{
			return default(bool);
		}

		[Token(Token = "0x6000436")]
		[Address(RVA = "0x1ABCA2C", Offset = "0x1ABCA2C", VA = "0x1ABCA2C")]
		public static bool SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, string pchContentType, byte[] pubBody, uint unBodyLen)
		{
			return default(bool);
		}

		[Token(Token = "0x6000437")]
		[Address(RVA = "0x1ABCB78", Offset = "0x1ABCB78", VA = "0x1ABCB78")]
		public static HTTPCookieContainerHandle CreateCookieContainer(bool bAllowResponsesToModify)
		{
			return default(HTTPCookieContainerHandle);
		}

		[Token(Token = "0x6000438")]
		[Address(RVA = "0x1ABCC04", Offset = "0x1ABCC04", VA = "0x1ABCC04")]
		public static bool ReleaseCookieContainer(HTTPCookieContainerHandle hCookieContainer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000439")]
		[Address(RVA = "0x1ABCC30", Offset = "0x1ABCC30", VA = "0x1ABCC30")]
		public static bool SetCookie(HTTPCookieContainerHandle hCookieContainer, string pchHost, string pchUrl, string pchCookie)
		{
			return default(bool);
		}

		[Token(Token = "0x600043A")]
		[Address(RVA = "0x1ABCF70", Offset = "0x1ABCF70", VA = "0x1ABCF70")]
		public static bool SetHTTPRequestCookieContainer(HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer)
		{
			return default(bool);
		}

		[Token(Token = "0x600043B")]
		[Address(RVA = "0x1ABCFA4", Offset = "0x1ABCFA4", VA = "0x1ABCFA4")]
		public static bool SetHTTPRequestUserAgentInfo(HTTPRequestHandle hRequest, string pchUserAgentInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x600043C")]
		[Address(RVA = "0x1ABD0D8", Offset = "0x1ABD0D8", VA = "0x1ABD0D8")]
		public static bool SetHTTPRequestRequiresVerifiedCertificate(HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate)
		{
			return default(bool);
		}

		[Token(Token = "0x600043D")]
		[Address(RVA = "0x1ABD10C", Offset = "0x1ABD10C", VA = "0x1ABD10C")]
		public static bool SetHTTPRequestAbsoluteTimeoutMS(HTTPRequestHandle hRequest, uint unMilliseconds)
		{
			return default(bool);
		}

		[Token(Token = "0x600043E")]
		[Address(RVA = "0x1ABD140", Offset = "0x1ABD140", VA = "0x1ABD140")]
		public static bool GetHTTPRequestWasTimedOut(HTTPRequestHandle hRequest, out bool pbWasTimedOut)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000086")]
	public static class SteamGameServerInventory
	{
		[Token(Token = "0x600043F")]
		[Address(RVA = "0x1ABD174", Offset = "0x1ABD174", VA = "0x1ABD174")]
		public static EResult GetResultStatus(SteamInventoryResult_t resultHandle)
		{
			return default(EResult);
		}

		[Token(Token = "0x6000440")]
		[Address(RVA = "0x1ABD1A0", Offset = "0x1ABD1A0", VA = "0x1ABD1A0")]
		public static bool GetResultItems(SteamInventoryResult_t resultHandle, SteamItemDetails_t[] pOutItemsArray, ref uint punOutItemsArraySize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000441")]
		[Address(RVA = "0x1ABD1E4", Offset = "0x1ABD1E4", VA = "0x1ABD1E4")]
		public static uint GetResultTimestamp(SteamInventoryResult_t resultHandle)
		{
			return default(uint);
		}

		[Token(Token = "0x6000442")]
		[Address(RVA = "0x1ABD210", Offset = "0x1ABD210", VA = "0x1ABD210")]
		public static bool CheckResultSteamID(SteamInventoryResult_t resultHandle, CSteamID steamIDExpected)
		{
			return default(bool);
		}

		[Token(Token = "0x6000443")]
		[Address(RVA = "0x1ABD244", Offset = "0x1ABD244", VA = "0x1ABD244")]
		public static void DestroyResult(SteamInventoryResult_t resultHandle)
		{
		}

		[Token(Token = "0x6000444")]
		[Address(RVA = "0x1ABD270", Offset = "0x1ABD270", VA = "0x1ABD270")]
		public static bool GetAllItems(out SteamInventoryResult_t pResultHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000445")]
		[Address(RVA = "0x1ABD29C", Offset = "0x1ABD29C", VA = "0x1ABD29C")]
		public static bool GetItemsByID(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t[] pInstanceIDs, uint unCountInstanceIDs)
		{
			return default(bool);
		}

		[Token(Token = "0x6000446")]
		[Address(RVA = "0x1ABD2E0", Offset = "0x1ABD2E0", VA = "0x1ABD2E0")]
		public static bool SerializeResult(SteamInventoryResult_t resultHandle, byte[] pOutBuffer, out uint punOutBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000447")]
		[Address(RVA = "0x1ABD324", Offset = "0x1ABD324", VA = "0x1ABD324")]
		public static bool DeserializeResult(out SteamInventoryResult_t pOutResultHandle, byte[] pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000448")]
		[Address(RVA = "0x1ABD370", Offset = "0x1ABD370", VA = "0x1ABD370")]
		public static bool GenerateItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000449")]
		[Address(RVA = "0x1ABD3BC", Offset = "0x1ABD3BC", VA = "0x1ABD3BC")]
		public static bool GrantPromoItems(out SteamInventoryResult_t pResultHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x600044A")]
		[Address(RVA = "0x1ABD3E8", Offset = "0x1ABD3E8", VA = "0x1ABD3E8")]
		public static bool AddPromoItem(out SteamInventoryResult_t pResultHandle, SteamItemDef_t itemDef)
		{
			return default(bool);
		}

		[Token(Token = "0x600044B")]
		[Address(RVA = "0x1ABD41C", Offset = "0x1ABD41C", VA = "0x1ABD41C")]
		public static bool AddPromoItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayItemDefs, uint unArrayLength)
		{
			return default(bool);
		}

		[Token(Token = "0x600044C")]
		[Address(RVA = "0x1ABD460", Offset = "0x1ABD460", VA = "0x1ABD460")]
		public static bool ConsumeItem(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemConsume, uint unQuantity)
		{
			return default(bool);
		}

		[Token(Token = "0x600044D")]
		[Address(RVA = "0x1ABD4A4", Offset = "0x1ABD4A4", VA = "0x1ABD4A4")]
		public static bool ExchangeItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, SteamItemInstanceID_t[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength)
		{
			return default(bool);
		}

		[Token(Token = "0x600044E")]
		[Address(RVA = "0x1ABD518", Offset = "0x1ABD518", VA = "0x1ABD518")]
		public static bool TransferItemQuantity(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemIdSource, uint unQuantity, SteamItemInstanceID_t itemIdDest)
		{
			return default(bool);
		}

		[Token(Token = "0x600044F")]
		[Address(RVA = "0x1ABD564", Offset = "0x1ABD564", VA = "0x1ABD564")]
		public static void SendItemDropHeartbeat()
		{
		}

		[Token(Token = "0x6000450")]
		[Address(RVA = "0x1ABD580", Offset = "0x1ABD580", VA = "0x1ABD580")]
		public static bool TriggerItemDrop(out SteamInventoryResult_t pResultHandle, SteamItemDef_t dropListDefinition)
		{
			return default(bool);
		}

		[Token(Token = "0x6000451")]
		[Address(RVA = "0x1ABD5B4", Offset = "0x1ABD5B4", VA = "0x1ABD5B4")]
		public static bool TradeItems(out SteamInventoryResult_t pResultHandle, CSteamID steamIDTradePartner, SteamItemInstanceID_t[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, SteamItemInstanceID_t[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000452")]
		[Address(RVA = "0x1ABD630", Offset = "0x1ABD630", VA = "0x1ABD630")]
		public static bool LoadItemDefinitions()
		{
			return default(bool);
		}

		[Token(Token = "0x6000453")]
		[Address(RVA = "0x1ABD64C", Offset = "0x1ABD64C", VA = "0x1ABD64C")]
		public static bool GetItemDefinitionIDs(SteamItemDef_t[] pItemDefIDs, out uint punItemDefIDsArraySize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000454")]
		[Address(RVA = "0x1ABD680", Offset = "0x1ABD680", VA = "0x1ABD680")]
		public static bool GetItemDefinitionProperty(SteamItemDef_t iDefinition, string pchPropertyName, out string pchValueBuffer, ref uint punValueBufferSize)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000087")]
	public static class SteamGameServerNetworking
	{
		[Token(Token = "0x6000455")]
		[Address(RVA = "0x1ABD854", Offset = "0x1ABD854", VA = "0x1ABD854")]
		public static bool SendP2PPacket(CSteamID steamIDRemote, byte[] pubData, uint cubData, EP2PSend eP2PSendType, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x6000456")]
		[Address(RVA = "0x1ABD8B0", Offset = "0x1ABD8B0", VA = "0x1ABD8B0")]
		public static bool IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x6000457")]
		[Address(RVA = "0x1ABD8E4", Offset = "0x1ABD8E4", VA = "0x1ABD8E4")]
		public static bool ReadP2PPacket(byte[] pubDest, uint cubDest, out uint pcubMsgSize, out CSteamID psteamIDRemote, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x6000458")]
		[Address(RVA = "0x1ABD940", Offset = "0x1ABD940", VA = "0x1ABD940")]
		public static bool AcceptP2PSessionWithUser(CSteamID steamIDRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x6000459")]
		[Address(RVA = "0x1ABD96C", Offset = "0x1ABD96C", VA = "0x1ABD96C")]
		public static bool CloseP2PSessionWithUser(CSteamID steamIDRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x600045A")]
		[Address(RVA = "0x1ABD998", Offset = "0x1ABD998", VA = "0x1ABD998")]
		public static bool CloseP2PChannelWithUser(CSteamID steamIDRemote, int nChannel)
		{
			return default(bool);
		}

		[Token(Token = "0x600045B")]
		[Address(RVA = "0x1ABD9CC", Offset = "0x1ABD9CC", VA = "0x1ABD9CC")]
		public static bool GetP2PSessionState(CSteamID steamIDRemote, out P2PSessionState_t pConnectionState)
		{
			return default(bool);
		}

		[Token(Token = "0x600045C")]
		[Address(RVA = "0x1ABDA00", Offset = "0x1ABDA00", VA = "0x1ABDA00")]
		public static bool AllowP2PPacketRelay(bool bAllow)
		{
			return default(bool);
		}

		[Token(Token = "0x600045D")]
		[Address(RVA = "0x1ABDA2C", Offset = "0x1ABDA2C", VA = "0x1ABDA2C")]
		public static SNetListenSocket_t CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay)
		{
			return default(SNetListenSocket_t);
		}

		[Token(Token = "0x600045E")]
		[Address(RVA = "0x1ABDA80", Offset = "0x1ABDA80", VA = "0x1ABDA80")]
		public static SNetSocket_t CreateP2PConnectionSocket(CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x600045F")]
		[Address(RVA = "0x1ABDAD4", Offset = "0x1ABDAD4", VA = "0x1ABDAD4")]
		public static SNetSocket_t CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x6000460")]
		[Address(RVA = "0x1ABDB20", Offset = "0x1ABDB20", VA = "0x1ABDB20")]
		public static bool DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x6000461")]
		[Address(RVA = "0x1ABDB54", Offset = "0x1ABDB54", VA = "0x1ABDB54")]
		public static bool DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x6000462")]
		[Address(RVA = "0x1ABDB88", Offset = "0x1ABDB88", VA = "0x1ABDB88")]
		public static bool SendDataOnSocket(SNetSocket_t hSocket, IntPtr pubData, uint cubData, bool bReliable)
		{
			return default(bool);
		}

		[Token(Token = "0x6000463")]
		[Address(RVA = "0x1ABDBD4", Offset = "0x1ABDBD4", VA = "0x1ABDBD4")]
		public static bool IsDataAvailableOnSocket(SNetSocket_t hSocket, out uint pcubMsgSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000464")]
		[Address(RVA = "0x1ABDC08", Offset = "0x1ABDC08", VA = "0x1ABDC08")]
		public static bool RetrieveDataFromSocket(SNetSocket_t hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000465")]
		[Address(RVA = "0x1ABDC54", Offset = "0x1ABDC54", VA = "0x1ABDC54")]
		public static bool IsDataAvailable(SNetListenSocket_t hListenSocket, out uint pcubMsgSize, out SNetSocket_t phSocket)
		{
			return default(bool);
		}

		[Token(Token = "0x6000466")]
		[Address(RVA = "0x1ABDC98", Offset = "0x1ABDC98", VA = "0x1ABDC98")]
		public static bool RetrieveData(SNetListenSocket_t hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out SNetSocket_t phSocket)
		{
			return default(bool);
		}

		[Token(Token = "0x6000467")]
		[Address(RVA = "0x1ABDCF4", Offset = "0x1ABDCF4", VA = "0x1ABDCF4")]
		public static bool GetSocketInfo(SNetSocket_t hSocket, out CSteamID pSteamIDRemote, out int peSocketStatus, out uint punIPRemote, out ushort punPortRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x6000468")]
		[Address(RVA = "0x1ABDD50", Offset = "0x1ABDD50", VA = "0x1ABDD50")]
		public static bool GetListenSocketInfo(SNetListenSocket_t hListenSocket, out uint pnIP, out ushort pnPort)
		{
			return default(bool);
		}

		[Token(Token = "0x6000469")]
		[Address(RVA = "0x1ABDD94", Offset = "0x1ABDD94", VA = "0x1ABDD94")]
		public static ESNetSocketConnectionType GetSocketConnectionType(SNetSocket_t hSocket)
		{
			return default(ESNetSocketConnectionType);
		}

		[Token(Token = "0x600046A")]
		[Address(RVA = "0x1ABDDC0", Offset = "0x1ABDDC0", VA = "0x1ABDDC0")]
		public static int GetMaxPacketSize(SNetSocket_t hSocket)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000088")]
	public static class SteamGameServerStats
	{
		[Token(Token = "0x600046B")]
		[Address(RVA = "0x1ABDDEC", Offset = "0x1ABDDEC", VA = "0x1ABDDEC")]
		public static SteamAPICall_t RequestUserStats(CSteamID steamIDUser)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600046C")]
		[Address(RVA = "0x1ABDE6C", Offset = "0x1ABDE6C", VA = "0x1ABDE6C")]
		public static bool GetUserStat(CSteamID steamIDUser, string pchName, out int pData)
		{
			return default(bool);
		}

		[Token(Token = "0x600046D")]
		[Address(RVA = "0x1ABDFA8", Offset = "0x1ABDFA8", VA = "0x1ABDFA8")]
		public static bool GetUserStat(CSteamID steamIDUser, string pchName, out float pData)
		{
			return default(bool);
		}

		[Token(Token = "0x600046E")]
		[Address(RVA = "0x1ABE0E4", Offset = "0x1ABE0E4", VA = "0x1ABE0E4")]
		public static bool GetUserAchievement(CSteamID steamIDUser, string pchName, out bool pbAchieved)
		{
			return default(bool);
		}

		[Token(Token = "0x600046F")]
		[Address(RVA = "0x1ABE220", Offset = "0x1ABE220", VA = "0x1ABE220")]
		public static bool SetUserStat(CSteamID steamIDUser, string pchName, int nData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000470")]
		[Address(RVA = "0x1ABE35C", Offset = "0x1ABE35C", VA = "0x1ABE35C")]
		public static bool SetUserStat(CSteamID steamIDUser, string pchName, float fData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000471")]
		[Address(RVA = "0x1ABE4A0", Offset = "0x1ABE4A0", VA = "0x1ABE4A0")]
		public static bool UpdateUserAvgRateStat(CSteamID steamIDUser, string pchName, float flCountThisSession, double dSessionLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000472")]
		[Address(RVA = "0x1ABE5EC", Offset = "0x1ABE5EC", VA = "0x1ABE5EC")]
		public static bool SetUserAchievement(CSteamID steamIDUser, string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000473")]
		[Address(RVA = "0x1ABE720", Offset = "0x1ABE720", VA = "0x1ABE720")]
		public static bool ClearUserAchievement(CSteamID steamIDUser, string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000474")]
		[Address(RVA = "0x1ABE854", Offset = "0x1ABE854", VA = "0x1ABE854")]
		public static SteamAPICall_t StoreUserStats(CSteamID steamIDUser)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x2000089")]
	public static class SteamGameServerUGC
	{
		[Token(Token = "0x6000475")]
		[Address(RVA = "0x1ABE8D4", Offset = "0x1ABE8D4", VA = "0x1ABE8D4")]
		public static UGCQueryHandle_t CreateQueryUserUGCRequest(AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6000476")]
		[Address(RVA = "0x1ABE9A0", Offset = "0x1ABE9A0", VA = "0x1ABE9A0")]
		public static UGCQueryHandle_t CreateQueryAllUGCRequest(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6000477")]
		[Address(RVA = "0x1ABEA54", Offset = "0x1ABEA54", VA = "0x1ABEA54")]
		public static UGCQueryHandle_t CreateQueryUGCDetailsRequest(PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6000478")]
		[Address(RVA = "0x1ABEAE8", Offset = "0x1ABEAE8", VA = "0x1ABEAE8")]
		public static SteamAPICall_t SendQueryUGCRequest(UGCQueryHandle_t handle)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000479")]
		[Address(RVA = "0x1ABEB68", Offset = "0x1ABEB68", VA = "0x1ABEB68")]
		public static bool GetQueryUGCResult(UGCQueryHandle_t handle, uint index, out SteamUGCDetails_t pDetails)
		{
			return default(bool);
		}

		[Token(Token = "0x600047A")]
		[Address(RVA = "0x1ABEBAC", Offset = "0x1ABEBAC", VA = "0x1ABEBAC")]
		public static bool GetQueryUGCPreviewURL(UGCQueryHandle_t handle, uint index, out string pchURL, uint cchURLSize)
		{
			return default(bool);
		}

		[Token(Token = "0x600047B")]
		[Address(RVA = "0x1ABEC9C", Offset = "0x1ABEC9C", VA = "0x1ABEC9C")]
		public static bool GetQueryUGCMetadata(UGCQueryHandle_t handle, uint index, out string pchMetadata, uint cchMetadatasize)
		{
			return default(bool);
		}

		[Token(Token = "0x600047C")]
		[Address(RVA = "0x1ABED8C", Offset = "0x1ABED8C", VA = "0x1ABED8C")]
		public static bool GetQueryUGCChildren(UGCQueryHandle_t handle, uint index, PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries)
		{
			return default(bool);
		}

		[Token(Token = "0x600047D")]
		[Address(RVA = "0x1ABEDD8", Offset = "0x1ABEDD8", VA = "0x1ABEDD8")]
		public static bool GetQueryUGCStatistic(UGCQueryHandle_t handle, uint index, EItemStatistic eStatType, out uint pStatValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600047E")]
		[Address(RVA = "0x1ABEE24", Offset = "0x1ABEE24", VA = "0x1ABEE24")]
		public static uint GetQueryUGCNumAdditionalPreviews(UGCQueryHandle_t handle, uint index)
		{
			return default(uint);
		}

		[Token(Token = "0x600047F")]
		[Address(RVA = "0x1ABEE58", Offset = "0x1ABEE58", VA = "0x1ABEE58")]
		public static bool GetQueryUGCAdditionalPreview(UGCQueryHandle_t handle, uint index, uint previewIndex, out string pchURLOrVideoID, uint cchURLSize, out bool pbIsImage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000480")]
		[Address(RVA = "0x1ABEF60", Offset = "0x1ABEF60", VA = "0x1ABEF60")]
		public static uint GetQueryUGCNumKeyValueTags(UGCQueryHandle_t handle, uint index)
		{
			return default(uint);
		}

		[Token(Token = "0x6000481")]
		[Address(RVA = "0x1ABEF94", Offset = "0x1ABEF94", VA = "0x1ABEF94")]
		public static bool GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, uint index, uint keyValueTagIndex, out string pchKey, uint cchKeySize, out string pchValue, uint cchValueSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000482")]
		[Address(RVA = "0x1ABF0F8", Offset = "0x1ABF0F8", VA = "0x1ABF0F8")]
		public static bool ReleaseQueryUGCRequest(UGCQueryHandle_t handle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000483")]
		[Address(RVA = "0x1ABF124", Offset = "0x1ABF124", VA = "0x1ABF124")]
		public static bool AddRequiredTag(UGCQueryHandle_t handle, string pTagName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000484")]
		[Address(RVA = "0x1ABF258", Offset = "0x1ABF258", VA = "0x1ABF258")]
		public static bool AddExcludedTag(UGCQueryHandle_t handle, string pTagName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000485")]
		[Address(RVA = "0x1ABF38C", Offset = "0x1ABF38C", VA = "0x1ABF38C")]
		public static bool SetReturnKeyValueTags(UGCQueryHandle_t handle, bool bReturnKeyValueTags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000486")]
		[Address(RVA = "0x1ABF3C0", Offset = "0x1ABF3C0", VA = "0x1ABF3C0")]
		public static bool SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x6000487")]
		[Address(RVA = "0x1ABF3F4", Offset = "0x1ABF3F4", VA = "0x1ABF3F4")]
		public static bool SetReturnMetadata(UGCQueryHandle_t handle, bool bReturnMetadata)
		{
			return default(bool);
		}

		[Token(Token = "0x6000488")]
		[Address(RVA = "0x1ABF428", Offset = "0x1ABF428", VA = "0x1ABF428")]
		public static bool SetReturnChildren(UGCQueryHandle_t handle, bool bReturnChildren)
		{
			return default(bool);
		}

		[Token(Token = "0x6000489")]
		[Address(RVA = "0x1ABF45C", Offset = "0x1ABF45C", VA = "0x1ABF45C")]
		public static bool SetReturnAdditionalPreviews(UGCQueryHandle_t handle, bool bReturnAdditionalPreviews)
		{
			return default(bool);
		}

		[Token(Token = "0x600048A")]
		[Address(RVA = "0x1ABF490", Offset = "0x1ABF490", VA = "0x1ABF490")]
		public static bool SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly)
		{
			return default(bool);
		}

		[Token(Token = "0x600048B")]
		[Address(RVA = "0x1ABF4C4", Offset = "0x1ABF4C4", VA = "0x1ABF4C4")]
		public static bool SetLanguage(UGCQueryHandle_t handle, string pchLanguage)
		{
			return default(bool);
		}

		[Token(Token = "0x600048C")]
		[Address(RVA = "0x1ABF5F8", Offset = "0x1ABF5F8", VA = "0x1ABF5F8")]
		public static bool SetAllowCachedResponse(UGCQueryHandle_t handle, uint unMaxAgeSeconds)
		{
			return default(bool);
		}

		[Token(Token = "0x600048D")]
		[Address(RVA = "0x1ABF62C", Offset = "0x1ABF62C", VA = "0x1ABF62C")]
		public static bool SetCloudFileNameFilter(UGCQueryHandle_t handle, string pMatchCloudFileName)
		{
			return default(bool);
		}

		[Token(Token = "0x600048E")]
		[Address(RVA = "0x1ABF760", Offset = "0x1ABF760", VA = "0x1ABF760")]
		public static bool SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag)
		{
			return default(bool);
		}

		[Token(Token = "0x600048F")]
		[Address(RVA = "0x1ABF794", Offset = "0x1ABF794", VA = "0x1ABF794")]
		public static bool SetSearchText(UGCQueryHandle_t handle, string pSearchText)
		{
			return default(bool);
		}

		[Token(Token = "0x6000490")]
		[Address(RVA = "0x1ABF8C8", Offset = "0x1ABF8C8", VA = "0x1ABF8C8")]
		public static bool SetRankedByTrendDays(UGCQueryHandle_t handle, uint unDays)
		{
			return default(bool);
		}

		[Token(Token = "0x6000491")]
		[Address(RVA = "0x1ABF8FC", Offset = "0x1ABF8FC", VA = "0x1ABF8FC")]
		public static bool AddRequiredKeyValueTag(UGCQueryHandle_t handle, string pKey, string pValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000492")]
		[Address(RVA = "0x1ABFB40", Offset = "0x1ABFB40", VA = "0x1ABFB40")]
		public static SteamAPICall_t RequestUGCDetails(PublishedFileId_t nPublishedFileID, uint unMaxAgeSeconds)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000493")]
		[Address(RVA = "0x1ABFBD0", Offset = "0x1ABFBD0", VA = "0x1ABFBD0")]
		public static SteamAPICall_t CreateItem(AppId_t nConsumerAppId, EWorkshopFileType eFileType)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000494")]
		[Address(RVA = "0x1ABFC60", Offset = "0x1ABFC60", VA = "0x1ABFC60")]
		public static UGCUpdateHandle_t StartItemUpdate(AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(UGCUpdateHandle_t);
		}

		[Token(Token = "0x6000495")]
		[Address(RVA = "0x1ABFCF4", Offset = "0x1ABFCF4", VA = "0x1ABFCF4")]
		public static bool SetItemTitle(UGCUpdateHandle_t handle, string pchTitle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000496")]
		[Address(RVA = "0x1ABFE28", Offset = "0x1ABFE28", VA = "0x1ABFE28")]
		public static bool SetItemDescription(UGCUpdateHandle_t handle, string pchDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x6000497")]
		[Address(RVA = "0x1ABFF5C", Offset = "0x1ABFF5C", VA = "0x1ABFF5C")]
		public static bool SetItemUpdateLanguage(UGCUpdateHandle_t handle, string pchLanguage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000498")]
		[Address(RVA = "0x1AC0090", Offset = "0x1AC0090", VA = "0x1AC0090")]
		public static bool SetItemMetadata(UGCUpdateHandle_t handle, string pchMetaData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000499")]
		[Address(RVA = "0x1AC01C4", Offset = "0x1AC01C4", VA = "0x1AC01C4")]
		public static bool SetItemVisibility(UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility)
		{
			return default(bool);
		}

		[Token(Token = "0x600049A")]
		[Address(RVA = "0x1AC01F8", Offset = "0x1AC01F8", VA = "0x1AC01F8")]
		public static bool SetItemTags(UGCUpdateHandle_t updateHandle, IList<string> pTags)
		{
			return default(bool);
		}

		[Token(Token = "0x600049B")]
		[Address(RVA = "0x1AC0284", Offset = "0x1AC0284", VA = "0x1AC0284")]
		public static bool SetItemContent(UGCUpdateHandle_t handle, string pszContentFolder)
		{
			return default(bool);
		}

		[Token(Token = "0x600049C")]
		[Address(RVA = "0x1AC03B8", Offset = "0x1AC03B8", VA = "0x1AC03B8")]
		public static bool SetItemPreview(UGCUpdateHandle_t handle, string pszPreviewFile)
		{
			return default(bool);
		}

		[Token(Token = "0x600049D")]
		[Address(RVA = "0x1AC04EC", Offset = "0x1AC04EC", VA = "0x1AC04EC")]
		public static bool RemoveItemKeyValueTags(UGCUpdateHandle_t handle, string pchKey)
		{
			return default(bool);
		}

		[Token(Token = "0x600049E")]
		[Address(RVA = "0x1AC0620", Offset = "0x1AC0620", VA = "0x1AC0620")]
		public static bool AddItemKeyValueTag(UGCUpdateHandle_t handle, string pchKey, string pchValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600049F")]
		[Address(RVA = "0x1AC0864", Offset = "0x1AC0864", VA = "0x1AC0864")]
		public static SteamAPICall_t SubmitItemUpdate(UGCUpdateHandle_t handle, string pchChangeNote)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60004A0")]
		[Address(RVA = "0x1AC09BC", Offset = "0x1AC09BC", VA = "0x1AC09BC")]
		public static EItemUpdateStatus GetItemUpdateProgress(UGCUpdateHandle_t handle, out ulong punBytesProcessed, out ulong punBytesTotal)
		{
			return default(EItemUpdateStatus);
		}

		[Token(Token = "0x60004A1")]
		[Address(RVA = "0x1AC0A00", Offset = "0x1AC0A00", VA = "0x1AC0A00")]
		public static SteamAPICall_t SetUserItemVote(PublishedFileId_t nPublishedFileID, bool bVoteUp)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60004A2")]
		[Address(RVA = "0x1AC0A90", Offset = "0x1AC0A90", VA = "0x1AC0A90")]
		public static SteamAPICall_t GetUserItemVote(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60004A3")]
		[Address(RVA = "0x1AC0B10", Offset = "0x1AC0B10", VA = "0x1AC0B10")]
		public static SteamAPICall_t AddItemToFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60004A4")]
		[Address(RVA = "0x1AC0BA0", Offset = "0x1AC0BA0", VA = "0x1AC0BA0")]
		public static SteamAPICall_t RemoveItemFromFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60004A5")]
		[Address(RVA = "0x1AC0C30", Offset = "0x1AC0C30", VA = "0x1AC0C30")]
		public static SteamAPICall_t SubscribeItem(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60004A6")]
		[Address(RVA = "0x1AC0CB0", Offset = "0x1AC0CB0", VA = "0x1AC0CB0")]
		public static SteamAPICall_t UnsubscribeItem(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60004A7")]
		[Address(RVA = "0x1AC0D30", Offset = "0x1AC0D30", VA = "0x1AC0D30")]
		public static uint GetNumSubscribedItems()
		{
			return default(uint);
		}

		[Token(Token = "0x60004A8")]
		[Address(RVA = "0x1AC0D4C", Offset = "0x1AC0D4C", VA = "0x1AC0D4C")]
		public static uint GetSubscribedItems(PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries)
		{
			return default(uint);
		}

		[Token(Token = "0x60004A9")]
		[Address(RVA = "0x1AC0D80", Offset = "0x1AC0D80", VA = "0x1AC0D80")]
		public static uint GetItemState(PublishedFileId_t nPublishedFileID)
		{
			return default(uint);
		}

		[Token(Token = "0x60004AA")]
		[Address(RVA = "0x1AC0DAC", Offset = "0x1AC0DAC", VA = "0x1AC0DAC")]
		public static bool GetItemInstallInfo(PublishedFileId_t nPublishedFileID, out ulong punSizeOnDisk, out string pchFolder, uint cchFolderSize, out uint punTimeStamp)
		{
			return default(bool);
		}

		[Token(Token = "0x60004AB")]
		[Address(RVA = "0x1AC0EAC", Offset = "0x1AC0EAC", VA = "0x1AC0EAC")]
		public static bool GetItemDownloadInfo(PublishedFileId_t nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal)
		{
			return default(bool);
		}

		[Token(Token = "0x60004AC")]
		[Address(RVA = "0x1AC0EF0", Offset = "0x1AC0EF0", VA = "0x1AC0EF0")]
		public static bool DownloadItem(PublishedFileId_t nPublishedFileID, bool bHighPriority)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200008A")]
	public static class SteamGameServerUtils
	{
		[Token(Token = "0x60004AD")]
		[Address(RVA = "0x1AC0F24", Offset = "0x1AC0F24", VA = "0x1AC0F24")]
		public static uint GetSecondsSinceAppActive()
		{
			return default(uint);
		}

		[Token(Token = "0x60004AE")]
		[Address(RVA = "0x1AC0F40", Offset = "0x1AC0F40", VA = "0x1AC0F40")]
		public static uint GetSecondsSinceComputerActive()
		{
			return default(uint);
		}

		[Token(Token = "0x60004AF")]
		[Address(RVA = "0x1AC0F5C", Offset = "0x1AC0F5C", VA = "0x1AC0F5C")]
		public static EUniverse GetConnectedUniverse()
		{
			return default(EUniverse);
		}

		[Token(Token = "0x60004B0")]
		[Address(RVA = "0x1AC0F78", Offset = "0x1AC0F78", VA = "0x1AC0F78")]
		public static uint GetServerRealTime()
		{
			return default(uint);
		}

		[Token(Token = "0x60004B1")]
		[Address(RVA = "0x1AC0F94", Offset = "0x1AC0F94", VA = "0x1AC0F94")]
		public static string GetIPCountry()
		{
			return null;
		}

		[Token(Token = "0x60004B2")]
		[Address(RVA = "0x1AC0FB8", Offset = "0x1AC0FB8", VA = "0x1AC0FB8")]
		public static bool GetImageSize(int iImage, out uint pnWidth, out uint pnHeight)
		{
			return default(bool);
		}

		[Token(Token = "0x60004B3")]
		[Address(RVA = "0x1AC0FFC", Offset = "0x1AC0FFC", VA = "0x1AC0FFC")]
		public static bool GetImageRGBA(int iImage, byte[] pubDest, int nDestBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60004B4")]
		[Address(RVA = "0x1AC1040", Offset = "0x1AC1040", VA = "0x1AC1040")]
		public static bool GetCSERIPPort(out uint unIP, out ushort usPort)
		{
			return default(bool);
		}

		[Token(Token = "0x60004B5")]
		[Address(RVA = "0x1AC1074", Offset = "0x1AC1074", VA = "0x1AC1074")]
		public static byte GetCurrentBatteryPower()
		{
			return default(byte);
		}

		[Token(Token = "0x60004B6")]
		[Address(RVA = "0x1AC1090", Offset = "0x1AC1090", VA = "0x1AC1090")]
		public static AppId_t GetAppID()
		{
			return default(AppId_t);
		}

		[Token(Token = "0x60004B7")]
		[Address(RVA = "0x1AC1114", Offset = "0x1AC1114", VA = "0x1AC1114")]
		public static void SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition)
		{
		}

		[Token(Token = "0x60004B8")]
		[Address(RVA = "0x1AC1140", Offset = "0x1AC1140", VA = "0x1AC1140")]
		public static bool IsAPICallCompleted(SteamAPICall_t hSteamAPICall, out bool pbFailed)
		{
			return default(bool);
		}

		[Token(Token = "0x60004B9")]
		[Address(RVA = "0x1AC1174", Offset = "0x1AC1174", VA = "0x1AC1174")]
		public static ESteamAPICallFailure GetAPICallFailureReason(SteamAPICall_t hSteamAPICall)
		{
			return default(ESteamAPICallFailure);
		}

		[Token(Token = "0x60004BA")]
		[Address(RVA = "0x1AC11A0", Offset = "0x1AC11A0", VA = "0x1AC11A0")]
		public static bool GetAPICallResult(SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, out bool pbFailed)
		{
			return default(bool);
		}

		[Token(Token = "0x60004BB")]
		[Address(RVA = "0x1AC11FC", Offset = "0x1AC11FC", VA = "0x1AC11FC")]
		public static void RunFrame()
		{
		}

		[Token(Token = "0x60004BC")]
		[Address(RVA = "0x1AC1218", Offset = "0x1AC1218", VA = "0x1AC1218")]
		public static uint GetIPCCallCount()
		{
			return default(uint);
		}

		[Token(Token = "0x60004BD")]
		[Address(RVA = "0x1AC1234", Offset = "0x1AC1234", VA = "0x1AC1234")]
		public static void SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction)
		{
		}

		[Token(Token = "0x60004BE")]
		[Address(RVA = "0x1AC1260", Offset = "0x1AC1260", VA = "0x1AC1260")]
		public static bool IsOverlayEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x60004BF")]
		[Address(RVA = "0x1AC127C", Offset = "0x1AC127C", VA = "0x1AC127C")]
		public static bool BOverlayNeedsPresent()
		{
			return default(bool);
		}

		[Token(Token = "0x60004C0")]
		[Address(RVA = "0x1AC1298", Offset = "0x1AC1298", VA = "0x1AC1298")]
		public static SteamAPICall_t CheckFileSignature(string szFileName)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60004C1")]
		[Address(RVA = "0x1AC13E8", Offset = "0x1AC13E8", VA = "0x1AC13E8")]
		public static bool ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText)
		{
			return default(bool);
		}

		[Token(Token = "0x60004C2")]
		[Address(RVA = "0x1AC1644", Offset = "0x1AC1644", VA = "0x1AC1644")]
		public static uint GetEnteredGamepadTextLength()
		{
			return default(uint);
		}

		[Token(Token = "0x60004C3")]
		[Address(RVA = "0x1AC1660", Offset = "0x1AC1660", VA = "0x1AC1660")]
		public static bool GetEnteredGamepadTextInput(out string pchText, uint cchText)
		{
			return default(bool);
		}

		[Token(Token = "0x60004C4")]
		[Address(RVA = "0x1AC1734", Offset = "0x1AC1734", VA = "0x1AC1734")]
		public static string GetSteamUILanguage()
		{
			return null;
		}

		[Token(Token = "0x60004C5")]
		[Address(RVA = "0x1AC1758", Offset = "0x1AC1758", VA = "0x1AC1758")]
		public static bool IsSteamRunningInVR()
		{
			return default(bool);
		}

		[Token(Token = "0x60004C6")]
		[Address(RVA = "0x1AC1774", Offset = "0x1AC1774", VA = "0x1AC1774")]
		public static void SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset)
		{
		}
	}
	[Token(Token = "0x200008B")]
	public static class SteamHTMLSurface
	{
		[Token(Token = "0x60004C7")]
		[Address(RVA = "0x1AC17A8", Offset = "0x1AC17A8", VA = "0x1AC17A8")]
		public static bool Init()
		{
			return default(bool);
		}

		[Token(Token = "0x60004C8")]
		[Address(RVA = "0x1AC17C4", Offset = "0x1AC17C4", VA = "0x1AC17C4")]
		public static bool Shutdown()
		{
			return default(bool);
		}

		[Token(Token = "0x60004C9")]
		[Address(RVA = "0x1AC17E0", Offset = "0x1AC17E0", VA = "0x1AC17E0")]
		public static SteamAPICall_t CreateBrowser(string pchUserAgent, string pchUserCSS)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60004CA")]
		[Address(RVA = "0x1AC1A28", Offset = "0x1AC1A28", VA = "0x1AC1A28")]
		public static void RemoveBrowser(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x60004CB")]
		[Address(RVA = "0x1AC1A54", Offset = "0x1AC1A54", VA = "0x1AC1A54")]
		public static void LoadURL(HHTMLBrowser unBrowserHandle, string pchURL, string pchPostData)
		{
		}

		[Token(Token = "0x60004CC")]
		[Address(RVA = "0x1AC1C88", Offset = "0x1AC1C88", VA = "0x1AC1C88")]
		public static void SetSize(HHTMLBrowser unBrowserHandle, uint unWidth, uint unHeight)
		{
		}

		[Token(Token = "0x60004CD")]
		[Address(RVA = "0x1AC1CCC", Offset = "0x1AC1CCC", VA = "0x1AC1CCC")]
		public static void StopLoad(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x60004CE")]
		[Address(RVA = "0x1AC1CF8", Offset = "0x1AC1CF8", VA = "0x1AC1CF8")]
		public static void Reload(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x60004CF")]
		[Address(RVA = "0x1AC1D24", Offset = "0x1AC1D24", VA = "0x1AC1D24")]
		public static void GoBack(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x60004D0")]
		[Address(RVA = "0x1AC1D50", Offset = "0x1AC1D50", VA = "0x1AC1D50")]
		public static void GoForward(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x60004D1")]
		[Address(RVA = "0x1AC1D7C", Offset = "0x1AC1D7C", VA = "0x1AC1D7C")]
		public static void AddHeader(HHTMLBrowser unBrowserHandle, string pchKey, string pchValue)
		{
		}

		[Token(Token = "0x60004D2")]
		[Address(RVA = "0x1AC1FB0", Offset = "0x1AC1FB0", VA = "0x1AC1FB0")]
		public static void ExecuteJavascript(HHTMLBrowser unBrowserHandle, string pchScript)
		{
		}

		[Token(Token = "0x60004D3")]
		[Address(RVA = "0x1AC20E4", Offset = "0x1AC20E4", VA = "0x1AC20E4")]
		public static void MouseUp(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
		{
		}

		[Token(Token = "0x60004D4")]
		[Address(RVA = "0x1AC2118", Offset = "0x1AC2118", VA = "0x1AC2118")]
		public static void MouseDown(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
		{
		}

		[Token(Token = "0x60004D5")]
		[Address(RVA = "0x1AC214C", Offset = "0x1AC214C", VA = "0x1AC214C")]
		public static void MouseDoubleClick(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
		{
		}

		[Token(Token = "0x60004D6")]
		[Address(RVA = "0x1AC2180", Offset = "0x1AC2180", VA = "0x1AC2180")]
		public static void MouseMove(HHTMLBrowser unBrowserHandle, int x, int y)
		{
		}

		[Token(Token = "0x60004D7")]
		[Address(RVA = "0x1AC21C4", Offset = "0x1AC21C4", VA = "0x1AC21C4")]
		public static void MouseWheel(HHTMLBrowser unBrowserHandle, int nDelta)
		{
		}

		[Token(Token = "0x60004D8")]
		[Address(RVA = "0x1AC21F8", Offset = "0x1AC21F8", VA = "0x1AC21F8")]
		public static void KeyDown(HHTMLBrowser unBrowserHandle, uint nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers)
		{
		}

		[Token(Token = "0x60004D9")]
		[Address(RVA = "0x1AC223C", Offset = "0x1AC223C", VA = "0x1AC223C")]
		public static void KeyUp(HHTMLBrowser unBrowserHandle, uint nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers)
		{
		}

		[Token(Token = "0x60004DA")]
		[Address(RVA = "0x1AC2280", Offset = "0x1AC2280", VA = "0x1AC2280")]
		public static void KeyChar(HHTMLBrowser unBrowserHandle, uint cUnicodeChar, EHTMLKeyModifiers eHTMLKeyModifiers)
		{
		}

		[Token(Token = "0x60004DB")]
		[Address(RVA = "0x1AC22C4", Offset = "0x1AC22C4", VA = "0x1AC22C4")]
		public static void SetHorizontalScroll(HHTMLBrowser unBrowserHandle, uint nAbsolutePixelScroll)
		{
		}

		[Token(Token = "0x60004DC")]
		[Address(RVA = "0x1AC22F8", Offset = "0x1AC22F8", VA = "0x1AC22F8")]
		public static void SetVerticalScroll(HHTMLBrowser unBrowserHandle, uint nAbsolutePixelScroll)
		{
		}

		[Token(Token = "0x60004DD")]
		[Address(RVA = "0x1AC232C", Offset = "0x1AC232C", VA = "0x1AC232C")]
		public static void SetKeyFocus(HHTMLBrowser unBrowserHandle, bool bHasKeyFocus)
		{
		}

		[Token(Token = "0x60004DE")]
		[Address(RVA = "0x1AC2360", Offset = "0x1AC2360", VA = "0x1AC2360")]
		public static void ViewSource(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x60004DF")]
		[Address(RVA = "0x1AC238C", Offset = "0x1AC238C", VA = "0x1AC238C")]
		public static void CopyToClipboard(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x60004E0")]
		[Address(RVA = "0x1AC23B8", Offset = "0x1AC23B8", VA = "0x1AC23B8")]
		public static void PasteFromClipboard(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x60004E1")]
		[Address(RVA = "0x1AC23E4", Offset = "0x1AC23E4", VA = "0x1AC23E4")]
		public static void Find(HHTMLBrowser unBrowserHandle, string pchSearchStr, bool bCurrentlyInFind, bool bReverse)
		{
		}

		[Token(Token = "0x60004E2")]
		[Address(RVA = "0x1AC2534", Offset = "0x1AC2534", VA = "0x1AC2534")]
		public static void StopFind(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x60004E3")]
		[Address(RVA = "0x1AC2560", Offset = "0x1AC2560", VA = "0x1AC2560")]
		public static void GetLinkAtPosition(HHTMLBrowser unBrowserHandle, int x, int y)
		{
		}

		[Token(Token = "0x60004E4")]
		[Address(RVA = "0x1AC25A4", Offset = "0x1AC25A4", VA = "0x1AC25A4")]
		public static void SetCookie(string pchHostname, string pchKey, string pchValue, string pchPath = "/", uint nExpires = 0u, bool bSecure = false, bool bHTTPOnly = false)
		{
		}

		[Token(Token = "0x60004E5")]
		[Address(RVA = "0x1AC29C8", Offset = "0x1AC29C8", VA = "0x1AC29C8")]
		public static void SetPageScaleFactor(HHTMLBrowser unBrowserHandle, float flZoom, int nPointX, int nPointY)
		{
		}

		[Token(Token = "0x60004E6")]
		[Address(RVA = "0x1AC2A1C", Offset = "0x1AC2A1C", VA = "0x1AC2A1C")]
		public static void SetBackgroundMode(HHTMLBrowser unBrowserHandle, bool bBackgroundMode)
		{
		}

		[Token(Token = "0x60004E7")]
		[Address(RVA = "0x1AC2A50", Offset = "0x1AC2A50", VA = "0x1AC2A50")]
		public static void AllowStartRequest(HHTMLBrowser unBrowserHandle, bool bAllowed)
		{
		}

		[Token(Token = "0x60004E8")]
		[Address(RVA = "0x1AC2A84", Offset = "0x1AC2A84", VA = "0x1AC2A84")]
		public static void JSDialogResponse(HHTMLBrowser unBrowserHandle, bool bResult)
		{
		}

		[Token(Token = "0x60004E9")]
		[Address(RVA = "0x1AC2AB8", Offset = "0x1AC2AB8", VA = "0x1AC2AB8")]
		public static void FileLoadDialogResponse(HHTMLBrowser unBrowserHandle, IntPtr pchSelectedFiles)
		{
		}
	}
	[Token(Token = "0x200008C")]
	public static class SteamHTTP
	{
		[Token(Token = "0x60004EA")]
		[Address(RVA = "0x1AC2AEC", Offset = "0x1AC2AEC", VA = "0x1AC2AEC")]
		public static HTTPRequestHandle CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, string pchAbsoluteURL)
		{
			return default(HTTPRequestHandle);
		}

		[Token(Token = "0x60004EB")]
		[Address(RVA = "0x1AC2C54", Offset = "0x1AC2C54", VA = "0x1AC2C54")]
		public static bool SetHTTPRequestContextValue(HTTPRequestHandle hRequest, ulong ulContextValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60004EC")]
		[Address(RVA = "0x1AC2C88", Offset = "0x1AC2C88", VA = "0x1AC2C88")]
		public static bool SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, uint unTimeoutSeconds)
		{
			return default(bool);
		}

		[Token(Token = "0x60004ED")]
		[Address(RVA = "0x1AC2CBC", Offset = "0x1AC2CBC", VA = "0x1AC2CBC")]
		public static bool SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, string pchHeaderValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60004EE")]
		[Address(RVA = "0x1AC2F00", Offset = "0x1AC2F00", VA = "0x1AC2F00")]
		public static bool SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, string pchParamName, string pchParamValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60004EF")]
		[Address(RVA = "0x1AC3144", Offset = "0x1AC3144", VA = "0x1AC3144")]
		public static bool SendHTTPRequest(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F0")]
		[Address(RVA = "0x1AC3178", Offset = "0x1AC3178", VA = "0x1AC3178")]
		public static bool SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F1")]
		[Address(RVA = "0x1AC31AC", Offset = "0x1AC31AC", VA = "0x1AC31AC")]
		public static bool DeferHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F2")]
		[Address(RVA = "0x1AC31D8", Offset = "0x1AC31D8", VA = "0x1AC31D8")]
		public static bool PrioritizeHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F3")]
		[Address(RVA = "0x1AC3204", Offset = "0x1AC3204", VA = "0x1AC3204")]
		public static bool GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, string pchHeaderName, out uint unResponseHeaderSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F4")]
		[Address(RVA = "0x1AC3340", Offset = "0x1AC3340", VA = "0x1AC3340")]
		public static bool GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, byte[] pHeaderValueBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F5")]
		[Address(RVA = "0x1AC348C", Offset = "0x1AC348C", VA = "0x1AC348C")]
		public static bool GetHTTPResponseBodySize(HTTPRequestHandle hRequest, out uint unBodySize)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F6")]
		[Address(RVA = "0x1AC34C0", Offset = "0x1AC34C0", VA = "0x1AC34C0")]
		public static bool GetHTTPResponseBodyData(HTTPRequestHandle hRequest, byte[] pBodyDataBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F7")]
		[Address(RVA = "0x1AC3504", Offset = "0x1AC3504", VA = "0x1AC3504")]
		public static bool GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, uint cOffset, byte[] pBodyDataBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F8")]
		[Address(RVA = "0x1AC3550", Offset = "0x1AC3550", VA = "0x1AC3550")]
		public static bool ReleaseHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F9")]
		[Address(RVA = "0x1AC357C", Offset = "0x1AC357C", VA = "0x1AC357C")]
		public static bool GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, out float pflPercentOut)
		{
			return default(bool);
		}

		[Token(Token = "0x60004FA")]
		[Address(RVA = "0x1AC35B0", Offset = "0x1AC35B0", VA = "0x1AC35B0")]
		public static bool SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, string pchContentType, byte[] pubBody, uint unBodyLen)
		{
			return default(bool);
		}

		[Token(Token = "0x60004FB")]
		[Address(RVA = "0x1AC36FC", Offset = "0x1AC36FC", VA = "0x1AC36FC")]
		public static HTTPCookieContainerHandle CreateCookieContainer(bool bAllowResponsesToModify)
		{
			return default(HTTPCookieContainerHandle);
		}

		[Token(Token = "0x60004FC")]
		[Address(RVA = "0x1AC3788", Offset = "0x1AC3788", VA = "0x1AC3788")]
		public static bool ReleaseCookieContainer(HTTPCookieContainerHandle hCookieContainer)
		{
			return default(bool);
		}

		[Token(Token = "0x60004FD")]
		[Address(RVA = "0x1AC37B4", Offset = "0x1AC37B4", VA = "0x1AC37B4")]
		public static bool SetCookie(HTTPCookieContainerHandle hCookieContainer, string pchHost, string pchUrl, string pchCookie)
		{
			return default(bool);
		}

		[Token(Token = "0x60004FE")]
		[Address(RVA = "0x1AC3AF4", Offset = "0x1AC3AF4", VA = "0x1AC3AF4")]
		public static bool SetHTTPRequestCookieContainer(HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer)
		{
			return default(bool);
		}

		[Token(Token = "0x60004FF")]
		[Address(RVA = "0x1AC3B28", Offset = "0x1AC3B28", VA = "0x1AC3B28")]
		public static bool SetHTTPRequestUserAgentInfo(HTTPRequestHandle hRequest, string pchUserAgentInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x6000500")]
		[Address(RVA = "0x1AC3C5C", Offset = "0x1AC3C5C", VA = "0x1AC3C5C")]
		public static bool SetHTTPRequestRequiresVerifiedCertificate(HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate)
		{
			return default(bool);
		}

		[Token(Token = "0x6000501")]
		[Address(RVA = "0x1AC3C90", Offset = "0x1AC3C90", VA = "0x1AC3C90")]
		public static bool SetHTTPRequestAbsoluteTimeoutMS(HTTPRequestHandle hRequest, uint unMilliseconds)
		{
			return default(bool);
		}

		[Token(Token = "0x6000502")]
		[Address(RVA = "0x1AC3CC4", Offset = "0x1AC3CC4", VA = "0x1AC3CC4")]
		public static bool GetHTTPRequestWasTimedOut(HTTPRequestHandle hRequest, out bool pbWasTimedOut)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200008D")]
	public static class SteamInventory
	{
		[Token(Token = "0x6000503")]
		[Address(RVA = "0x1AC3CF8", Offset = "0x1AC3CF8", VA = "0x1AC3CF8")]
		public static EResult GetResultStatus(SteamInventoryResult_t resultHandle)
		{
			return default(EResult);
		}

		[Token(Token = "0x6000504")]
		[Address(RVA = "0x1AC3D24", Offset = "0x1AC3D24", VA = "0x1AC3D24")]
		public static bool GetResultItems(SteamInventoryResult_t resultHandle, SteamItemDetails_t[] pOutItemsArray, ref uint punOutItemsArraySize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000505")]
		[Address(RVA = "0x1AC3D68", Offset = "0x1AC3D68", VA = "0x1AC3D68")]
		public static uint GetResultTimestamp(SteamInventoryResult_t resultHandle)
		{
			return default(uint);
		}

		[Token(Token = "0x6000506")]
		[Address(RVA = "0x1AC3D94", Offset = "0x1AC3D94", VA = "0x1AC3D94")]
		public static bool CheckResultSteamID(SteamInventoryResult_t resultHandle, CSteamID steamIDExpected)
		{
			return default(bool);
		}

		[Token(Token = "0x6000507")]
		[Address(RVA = "0x1AC3DC8", Offset = "0x1AC3DC8", VA = "0x1AC3DC8")]
		public static void DestroyResult(SteamInventoryResult_t resultHandle)
		{
		}

		[Token(Token = "0x6000508")]
		[Address(RVA = "0x1AC3DF4", Offset = "0x1AC3DF4", VA = "0x1AC3DF4")]
		public static bool GetAllItems(out SteamInventoryResult_t pResultHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000509")]
		[Address(RVA = "0x1AC3E20", Offset = "0x1AC3E20", VA = "0x1AC3E20")]
		public static bool GetItemsByID(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t[] pInstanceIDs, uint unCountInstanceIDs)
		{
			return default(bool);
		}

		[Token(Token = "0x600050A")]
		[Address(RVA = "0x1AC3E64", Offset = "0x1AC3E64", VA = "0x1AC3E64")]
		public static bool SerializeResult(SteamInventoryResult_t resultHandle, byte[] pOutBuffer, out uint punOutBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x600050B")]
		[Address(RVA = "0x1AC3EA8", Offset = "0x1AC3EA8", VA = "0x1AC3EA8")]
		public static bool DeserializeResult(out SteamInventoryResult_t pOutResultHandle, byte[] pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE = false)
		{
			return default(bool);
		}

		[Token(Token = "0x600050C")]
		[Address(RVA = "0x1AC3EF4", Offset = "0x1AC3EF4", VA = "0x1AC3EF4")]
		public static bool GenerateItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength)
		{
			return default(bool);
		}

		[Token(Token = "0x600050D")]
		[Address(RVA = "0x1AC3F40", Offset = "0x1AC3F40", VA = "0x1AC3F40")]
		public static bool GrantPromoItems(out SteamInventoryResult_t pResultHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x600050E")]
		[Address(RVA = "0x1AC3F6C", Offset = "0x1AC3F6C", VA = "0x1AC3F6C")]
		public static bool AddPromoItem(out SteamInventoryResult_t pResultHandle, SteamItemDef_t itemDef)
		{
			return default(bool);
		}

		[Token(Token = "0x600050F")]
		[Address(RVA = "0x1AC3FA0", Offset = "0x1AC3FA0", VA = "0x1AC3FA0")]
		public static bool AddPromoItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayItemDefs, uint unArrayLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000510")]
		[Address(RVA = "0x1AC3FE4", Offset = "0x1AC3FE4", VA = "0x1AC3FE4")]
		public static bool ConsumeItem(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemConsume, uint unQuantity)
		{
			return default(bool);
		}

		[Token(Token = "0x6000511")]
		[Address(RVA = "0x1AC4028", Offset = "0x1AC4028", VA = "0x1AC4028")]
		public static bool ExchangeItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, SteamItemInstanceID_t[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000512")]
		[Address(RVA = "0x1AC409C", Offset = "0x1AC409C", VA = "0x1AC409C")]
		public static bool TransferItemQuantity(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemIdSource, uint unQuantity, SteamItemInstanceID_t itemIdDest)
		{
			return default(bool);
		}

		[Token(Token = "0x6000513")]
		[Address(RVA = "0x1AC40E8", Offset = "0x1AC40E8", VA = "0x1AC40E8")]
		public static void SendItemDropHeartbeat()
		{
		}

		[Token(Token = "0x6000514")]
		[Address(RVA = "0x1AC4104", Offset = "0x1AC4104", VA = "0x1AC4104")]
		public static bool TriggerItemDrop(out SteamInventoryResult_t pResultHandle, SteamItemDef_t dropListDefinition)
		{
			return default(bool);
		}

		[Token(Token = "0x6000515")]
		[Address(RVA = "0x1AC4138", Offset = "0x1AC4138", VA = "0x1AC4138")]
		public static bool TradeItems(out SteamInventoryResult_t pResultHandle, CSteamID steamIDTradePartner, SteamItemInstanceID_t[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, SteamItemInstanceID_t[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000516")]
		[Address(RVA = "0x1AC41B4", Offset = "0x1AC41B4", VA = "0x1AC41B4")]
		public static bool LoadItemDefinitions()
		{
			return default(bool);
		}

		[Token(Token = "0x6000517")]
		[Address(RVA = "0x1AC41D0", Offset = "0x1AC41D0", VA = "0x1AC41D0")]
		public static bool GetItemDefinitionIDs(SteamItemDef_t[] pItemDefIDs, out uint punItemDefIDsArraySize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000518")]
		[Address(RVA = "0x1AC4204", Offset = "0x1AC4204", VA = "0x1AC4204")]
		public static bool GetItemDefinitionProperty(SteamItemDef_t iDefinition, string pchPropertyName, out string pchValueBuffer, ref uint punValueBufferSize)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200008E")]
	public static class SteamMatchmaking
	{
		[Token(Token = "0x6000519")]
		[Address(RVA = "0x1AC49C8", Offset = "0x1AC49C8", VA = "0x1AC49C8")]
		public static int GetFavoriteGameCount()
		{
			return default(int);
		}

		[Token(Token = "0x600051A")]
		[Address(RVA = "0x1AC49E4", Offset = "0x1AC49E4", VA = "0x1AC49E4")]
		public static bool GetFavoriteGame(int iGame, out AppId_t pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer)
		{
			return default(bool);
		}

		[Token(Token = "0x600051B")]
		[Address(RVA = "0x1AC4A58", Offset = "0x1AC4A58", VA = "0x1AC4A58")]
		public static int AddFavoriteGame(AppId_t nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer)
		{
			return default(int);
		}

		[Token(Token = "0x600051C")]
		[Address(RVA = "0x1AC4ABC", Offset = "0x1AC4ABC", VA = "0x1AC4ABC")]
		public static bool RemoveFavoriteGame(AppId_t nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags)
		{
			return default(bool);
		}

		[Token(Token = "0x600051D")]
		[Address(RVA = "0x1AC4B18", Offset = "0x1AC4B18", VA = "0x1AC4B18")]
		public static SteamAPICall_t RequestLobbyList()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600051E")]
		[Address(RVA = "0x1AC4B90", Offset = "0x1AC4B90", VA = "0x1AC4B90")]
		public static void AddRequestLobbyListStringFilter(string pchKeyToMatch, string pchValueToMatch, ELobbyComparison eComparisonType)
		{
		}

		[Token(Token = "0x600051F")]
		[Address(RVA = "0x1AC4DC4", Offset = "0x1AC4DC4", VA = "0x1AC4DC4")]
		public static void AddRequestLobbyListNumericalFilter(string pchKeyToMatch, int nValueToMatch, ELobbyComparison eComparisonType)
		{
		}

		[Token(Token = "0x6000520")]
		[Address(RVA = "0x1AC4F00", Offset = "0x1AC4F00", VA = "0x1AC4F00")]
		public static void AddRequestLobbyListNearValueFilter(string pchKeyToMatch, int nValueToBeCloseTo)
		{
		}

		[Token(Token = "0x6000521")]
		[Address(RVA = "0x1AC5034", Offset = "0x1AC5034", VA = "0x1AC5034")]
		public static void AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable)
		{
		}

		[Token(Token = "0x6000522")]
		[Address(RVA = "0x1AC5060", Offset = "0x1AC5060", VA = "0x1AC5060")]
		public static void AddRequestLobbyListDistanceFilter(ELobbyDistanceFilter eLobbyDistanceFilter)
		{
		}

		[Token(Token = "0x6000523")]
		[Address(RVA = "0x1AC508C", Offset = "0x1AC508C", VA = "0x1AC508C")]
		public static void AddRequestLobbyListResultCountFilter(int cMaxResults)
		{
		}

		[Token(Token = "0x6000524")]
		[Address(RVA = "0x1AC50B8", Offset = "0x1AC50B8", VA = "0x1AC50B8")]
		public static void AddRequestLobbyListCompatibleMembersFilter(CSteamID steamIDLobby)
		{
		}

		[Token(Token = "0x6000525")]
		[Address(RVA = "0x1AC50E4", Offset = "0x1AC50E4", VA = "0x1AC50E4")]
		public static CSteamID GetLobbyByIndex(int iLobby)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000526")]
		[Address(RVA = "0x1AC5168", Offset = "0x1AC5168", VA = "0x1AC5168")]
		public static SteamAPICall_t CreateLobby(ELobbyType eLobbyType, int cMaxMembers)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000527")]
		[Address(RVA = "0x1AC51F8", Offset = "0x1AC51F8", VA = "0x1AC51F8")]
		public static SteamAPICall_t JoinLobby(CSteamID steamIDLobby)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000528")]
		[Address(RVA = "0x1AC5278", Offset = "0x1AC5278", VA = "0x1AC5278")]
		public static void LeaveLobby(CSteamID steamIDLobby)
		{
		}

		[Token(Token = "0x6000529")]
		[Address(RVA = "0x1AC52A4", Offset = "0x1AC52A4", VA = "0x1AC52A4")]
		public static bool InviteUserToLobby(CSteamID steamIDLobby, CSteamID steamIDInvitee)
		{
			return default(bool);
		}

		[Token(Token = "0x600052A")]
		[Address(RVA = "0x1AC52D8", Offset = "0x1AC52D8", VA = "0x1AC52D8")]
		public static int GetNumLobbyMembers(CSteamID steamIDLobby)
		{
			return default(int);
		}

		[Token(Token = "0x600052B")]
		[Address(RVA = "0x1AC5304", Offset = "0x1AC5304", VA = "0x1AC5304")]
		public static CSteamID GetLobbyMemberByIndex(CSteamID steamIDLobby, int iMember)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x600052C")]
		[Address(RVA = "0x1AC5398", Offset = "0x1AC5398", VA = "0x1AC5398")]
		public static string GetLobbyData(CSteamID steamIDLobby, string pchKey)
		{
			return null;
		}

		[Token(Token = "0x600052D")]
		[Address(RVA = "0x1AC54D8", Offset = "0x1AC54D8", VA = "0x1AC54D8")]
		public static bool SetLobbyData(CSteamID steamIDLobby, string pchKey, string pchValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600052E")]
		[Address(RVA = "0x1AC571C", Offset = "0x1AC571C", VA = "0x1AC571C")]
		public static int GetLobbyDataCount(CSteamID steamIDLobby)
		{
			return default(int);
		}

		[Token(Token = "0x600052F")]
		[Address(RVA = "0x1AC5748", Offset = "0x1AC5748", VA = "0x1AC5748")]
		public static bool GetLobbyDataByIndex(CSteamID steamIDLobby, int iLobbyData, out string pchKey, int cchKeyBufferSize, out string pchValue, int cchValueBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000530")]
		[Address(RVA = "0x1AC58A4", Offset = "0x1AC58A4", VA = "0x1AC58A4")]
		public static bool DeleteLobbyData(CSteamID steamIDLobby, string pchKey)
		{
			return default(bool);
		}

		[Token(Token = "0x6000531")]
		[Address(RVA = "0x1AC59D8", Offset = "0x1AC59D8", VA = "0x1AC59D8")]
		public static string GetLobbyMemberData(CSteamID steamIDLobby, CSteamID steamIDUser, string pchKey)
		{
			return null;
		}

		[Token(Token = "0x6000532")]
		[Address(RVA = "0x1AC5B20", Offset = "0x1AC5B20", VA = "0x1AC5B20")]
		public static void SetLobbyMemberData(CSteamID steamIDLobby, string pchKey, string pchValue)
		{
		}

		[Token(Token = "0x6000533")]
		[Address(RVA = "0x1AC5D54", Offset = "0x1AC5D54", VA = "0x1AC5D54")]
		public static bool SendLobbyChatMsg(CSteamID steamIDLobby, byte[] pvMsgBody, int cubMsgBody)
		{
			return default(bool);
		}

		[Token(Token = "0x6000534")]
		[Address(RVA = "0x1AC5D98", Offset = "0x1AC5D98", VA = "0x1AC5D98")]
		public static int GetLobbyChatEntry(CSteamID steamIDLobby, int iChatID, out CSteamID pSteamIDUser, byte[] pvData, int cubData, out EChatEntryType peChatEntryType)
		{
			return default(int);
		}

		[Token(Token = "0x6000535")]
		[Address(RVA = "0x1AC5DFC", Offset = "0x1AC5DFC", VA = "0x1AC5DFC")]
		public static bool RequestLobbyData(CSteamID steamIDLobby)
		{
			return default(bool);
		}

		[Token(Token = "0x6000536")]
		[Address(RVA = "0x1AC5E28", Offset = "0x1AC5E28", VA = "0x1AC5E28")]
		public static void SetLobbyGameServer(CSteamID steamIDLobby, uint unGameServerIP, ushort unGameServerPort, CSteamID steamIDGameServer)
		{
		}

		[Token(Token = "0x6000537")]
		[Address(RVA = "0x1AC5E74", Offset = "0x1AC5E74", VA = "0x1AC5E74")]
		public static bool GetLobbyGameServer(CSteamID steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out CSteamID psteamIDGameServer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000538")]
		[Address(RVA = "0x1AC5EC0", Offset = "0x1AC5EC0", VA = "0x1AC5EC0")]
		public static bool SetLobbyMemberLimit(CSteamID steamIDLobby, int cMaxMembers)
		{
			return default(bool);
		}

		[Token(Token = "0x6000539")]
		[Address(RVA = "0x1AC5EF4", Offset = "0x1AC5EF4", VA = "0x1AC5EF4")]
		public static int GetLobbyMemberLimit(CSteamID steamIDLobby)
		{
			return default(int);
		}

		[Token(Token = "0x600053A")]
		[Address(RVA = "0x1AC5F20", Offset = "0x1AC5F20", VA = "0x1AC5F20")]
		public static bool SetLobbyType(CSteamID steamIDLobby, ELobbyType eLobbyType)
		{
			return default(bool);
		}

		[Token(Token = "0x600053B")]
		[Address(RVA = "0x1AC5F54", Offset = "0x1AC5F54", VA = "0x1AC5F54")]
		public static bool SetLobbyJoinable(CSteamID steamIDLobby, bool bLobbyJoinable)
		{
			return default(bool);
		}

		[Token(Token = "0x600053C")]
		[Address(RVA = "0x1AC5F88", Offset = "0x1AC5F88", VA = "0x1AC5F88")]
		public static CSteamID GetLobbyOwner(CSteamID steamIDLobby)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x600053D")]
		[Address(RVA = "0x1AC600C", Offset = "0x1AC600C", VA = "0x1AC600C")]
		public static bool SetLobbyOwner(CSteamID steamIDLobby, CSteamID steamIDNewOwner)
		{
			return default(bool);
		}

		[Token(Token = "0x600053E")]
		[Address(RVA = "0x1AC6040", Offset = "0x1AC6040", VA = "0x1AC6040")]
		public static bool SetLinkedLobby(CSteamID steamIDLobby, CSteamID steamIDLobbyDependent)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200008F")]
	public static class SteamMatchmakingServers
	{
		[Token(Token = "0x600053F")]
		[Address(RVA = "0x1AC6074", Offset = "0x1AC6074", VA = "0x1AC6074")]
		public static HServerListRequest RequestInternetServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000540")]
		[Address(RVA = "0x1AC615C", Offset = "0x1AC615C", VA = "0x1AC615C")]
		public static HServerListRequest RequestLANServerList(AppId_t iApp, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000541")]
		[Address(RVA = "0x1AC61FC", Offset = "0x1AC61FC", VA = "0x1AC61FC")]
		public static HServerListRequest RequestFriendsServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000542")]
		[Address(RVA = "0x1AC62E4", Offset = "0x1AC62E4", VA = "0x1AC62E4")]
		public static HServerListRequest RequestFavoritesServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000543")]
		[Address(RVA = "0x1AC63CC", Offset = "0x1AC63CC", VA = "0x1AC63CC")]
		public static HServerListRequest RequestHistoryServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000544")]
		[Address(RVA = "0x1AC64B4", Offset = "0x1AC64B4", VA = "0x1AC64B4")]
		public static HServerListRequest RequestSpectatorServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000545")]
		[Address(RVA = "0x1AC659C", Offset = "0x1AC659C", VA = "0x1AC659C")]
		public static void ReleaseRequest(HServerListRequest hServerListRequest)
		{
		}

		[Token(Token = "0x6000546")]
		[Address(RVA = "0x1AC65C8", Offset = "0x1AC65C8", VA = "0x1AC65C8")]
		public static gameserveritem_t GetServerDetails(HServerListRequest hRequest, int iServer)
		{
			return null;
		}

		[Token(Token = "0x6000547")]
		[Address(RVA = "0x1AC6724", Offset = "0x1AC6724", VA = "0x1AC6724")]
		public static void CancelQuery(HServerListRequest hRequest)
		{
		}

		[Token(Token = "0x6000548")]
		[Address(RVA = "0x1AC6750", Offset = "0x1AC6750", VA = "0x1AC6750")]
		public static void RefreshQuery(HServerListRequest hRequest)
		{
		}

		[Token(Token = "0x6000549")]
		[Address(RVA = "0x1AC677C", Offset = "0x1AC677C", VA = "0x1AC677C")]
		public static bool IsRefreshing(HServerListRequest hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x600054A")]
		[Address(RVA = "0x1AC67A8", Offset = "0x1AC67A8", VA = "0x1AC67A8")]
		public static int GetServerCount(HServerListRequest hRequest)
		{
			return default(int);
		}

		[Token(Token = "0x600054B")]
		[Address(RVA = "0x1AC67D4", Offset = "0x1AC67D4", VA = "0x1AC67D4")]
		public static void RefreshServer(HServerListRequest hRequest, int iServer)
		{
		}

		[Token(Token = "0x600054C")]
		[Address(RVA = "0x1AC6808", Offset = "0x1AC6808", VA = "0x1AC6808")]
		public static HServerQuery PingServer(uint unIP, ushort usPort, ISteamMatchmakingPingResponse pRequestServersResponse)
		{
			return default(HServerQuery);
		}

		[Token(Token = "0x600054D")]
		[Address(RVA = "0x1AC68B8", Offset = "0x1AC68B8", VA = "0x1AC68B8")]
		public static HServerQuery PlayerDetails(uint unIP, ushort usPort, ISteamMatchmakingPlayersResponse pRequestServersResponse)
		{
			return default(HServerQuery);
		}

		[Token(Token = "0x600054E")]
		[Address(RVA = "0x1AC6968", Offset = "0x1AC6968", VA = "0x1AC6968")]
		public static HServerQuery ServerRules(uint unIP, ushort usPort, ISteamMatchmakingRulesResponse pRequestServersResponse)
		{
			return default(HServerQuery);
		}

		[Token(Token = "0x600054F")]
		[Address(RVA = "0x1AC6A18", Offset = "0x1AC6A18", VA = "0x1AC6A18")]
		public static void CancelServerQuery(HServerQuery hServerQuery)
		{
		}
	}
	[Token(Token = "0x2000090")]
	public static class SteamMusic
	{
		[Token(Token = "0x6000550")]
		[Address(RVA = "0x1AC6A44", Offset = "0x1AC6A44", VA = "0x1AC6A44")]
		public static bool BIsEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x6000551")]
		[Address(RVA = "0x1AC6A60", Offset = "0x1AC6A60", VA = "0x1AC6A60")]
		public static bool BIsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x6000552")]
		[Address(RVA = "0x1AC6A7C", Offset = "0x1AC6A7C", VA = "0x1AC6A7C")]
		public static AudioPlayback_Status GetPlaybackStatus()
		{
			return default(AudioPlayback_Status);
		}

		[Token(Token = "0x6000553")]
		[Address(RVA = "0x1AC6A98", Offset = "0x1AC6A98", VA = "0x1AC6A98")]
		public static void Play()
		{
		}

		[Token(Token = "0x6000554")]
		[Address(RVA = "0x1AC6AB4", Offset = "0x1AC6AB4", VA = "0x1AC6AB4")]
		public static void Pause()
		{
		}

		[Token(Token = "0x6000555")]
		[Address(RVA = "0x1AC6AD0", Offset = "0x1AC6AD0", VA = "0x1AC6AD0")]
		public static void PlayPrevious()
		{
		}

		[Token(Token = "0x6000556")]
		[Address(RVA = "0x1AC6AEC", Offset = "0x1AC6AEC", VA = "0x1AC6AEC")]
		public static void PlayNext()
		{
		}

		[Token(Token = "0x6000557")]
		[Address(RVA = "0x1AC6B08", Offset = "0x1AC6B08", VA = "0x1AC6B08")]
		public static void SetVolume(float flVolume)
		{
		}

		[Token(Token = "0x6000558")]
		[Address(RVA = "0x1AC6B34", Offset = "0x1AC6B34", VA = "0x1AC6B34")]
		public static float GetVolume()
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000091")]
	public static class SteamMusicRemote
	{
		[Token(Token = "0x6000559")]
		[Address(RVA = "0x1AC6B50", Offset = "0x1AC6B50", VA = "0x1AC6B50")]
		public static bool RegisterSteamMusicRemote(string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x600055A")]
		[Address(RVA = "0x1AC6C7C", Offset = "0x1AC6C7C", VA = "0x1AC6C7C")]
		public static bool DeregisterSteamMusicRemote()
		{
			return default(bool);
		}

		[Token(Token = "0x600055B")]
		[Address(RVA = "0x1AC6C98", Offset = "0x1AC6C98", VA = "0x1AC6C98")]
		public static bool BIsCurrentMusicRemote()
		{
			return default(bool);
		}

		[Token(Token = "0x600055C")]
		[Address(RVA = "0x1AC6CB4", Offset = "0x1AC6CB4", VA = "0x1AC6CB4")]
		public static bool BActivationSuccess(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600055D")]
		[Address(RVA = "0x1AC6CE0", Offset = "0x1AC6CE0", VA = "0x1AC6CE0")]
		public static bool SetDisplayName(string pchDisplayName)
		{
			return default(bool);
		}

		[Token(Token = "0x600055E")]
		[Address(RVA = "0x1AC6E0C", Offset = "0x1AC6E0C", VA = "0x1AC6E0C")]
		public static bool SetPNGIcon_64x64(byte[] pvBuffer, uint cbBufferLength)
		{
			return default(bool);
		}

		[Token(Token = "0x600055F")]
		[Address(RVA = "0x1AC6E40", Offset = "0x1AC6E40", VA = "0x1AC6E40")]
		public static bool EnablePlayPrevious(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000560")]
		[Address(RVA = "0x1AC6E6C", Offset = "0x1AC6E6C", VA = "0x1AC6E6C")]
		public static bool EnablePlayNext(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000561")]
		[Address(RVA = "0x1AC6E98", Offset = "0x1AC6E98", VA = "0x1AC6E98")]
		public static bool EnableShuffled(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000562")]
		[Address(RVA = "0x1AC6EC4", Offset = "0x1AC6EC4", VA = "0x1AC6EC4")]
		public static bool EnableLooped(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000563")]
		[Address(RVA = "0x1AC6EF0", Offset = "0x1AC6EF0", VA = "0x1AC6EF0")]
		public static bool EnableQueue(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000564")]
		[Address(RVA = "0x1AC6F1C", Offset = "0x1AC6F1C", VA = "0x1AC6F1C")]
		public static bool EnablePlaylists(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000565")]
		[Address(RVA = "0x1AC6F48", Offset = "0x1AC6F48", VA = "0x1AC6F48")]
		public static bool UpdatePlaybackStatus(AudioPlayback_Status nStatus)
		{
			return default(bool);
		}

		[Token(Token = "0x6000566")]
		[Address(RVA = "0x1AC6F74", Offset = "0x1AC6F74", VA = "0x1AC6F74")]
		public static bool UpdateShuffled(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000567")]
		[Address(RVA = "0x1AC6FA0", Offset = "0x1AC6FA0", VA = "0x1AC6FA0")]
		public static bool UpdateLooped(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000568")]
		[Address(RVA = "0x1AC6FCC", Offset = "0x1AC6FCC", VA = "0x1AC6FCC")]
		public static bool UpdateVolume(float flValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000569")]
		[Address(RVA = "0x1AC6FF8", Offset = "0x1AC6FF8", VA = "0x1AC6FF8")]
		public static bool CurrentEntryWillChange()
		{
			return default(bool);
		}

		[Token(Token = "0x600056A")]
		[Address(RVA = "0x1AC7014", Offset = "0x1AC7014", VA = "0x1AC7014")]
		public static bool CurrentEntryIsAvailable(bool bAvailable)
		{
			return default(bool);
		}

		[Token(Token = "0x600056B")]
		[Address(RVA = "0x1AC7040", Offset = "0x1AC7040", VA = "0x1AC7040")]
		public static bool UpdateCurrentEntryText(string pchText)
		{
			return default(bool);
		}

		[Token(Token = "0x600056C")]
		[Address(RVA = "0x1AC716C", Offset = "0x1AC716C", VA = "0x1AC716C")]
		public static bool UpdateCurrentEntryElapsedSeconds(int nValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600056D")]
		[Address(RVA = "0x1AC7198", Offset = "0x1AC7198", VA = "0x1AC7198")]
		public static bool UpdateCurrentEntryCoverArt(byte[] pvBuffer, uint cbBufferLength)
		{
			return default(bool);
		}

		[Token(Token = "0x600056E")]
		[Address(RVA = "0x1AC71CC", Offset = "0x1AC71CC", VA = "0x1AC71CC")]
		public static bool CurrentEntryDidChange()
		{
			return default(bool);
		}

		[Token(Token = "0x600056F")]
		[Address(RVA = "0x1AC71E8", Offset = "0x1AC71E8", VA = "0x1AC71E8")]
		public static bool QueueWillChange()
		{
			return default(bool);
		}

		[Token(Token = "0x6000570")]
		[Address(RVA = "0x1AC7204", Offset = "0x1AC7204", VA = "0x1AC7204")]
		public static bool ResetQueueEntries()
		{
			return default(bool);
		}

		[Token(Token = "0x6000571")]
		[Address(RVA = "0x1AC7220", Offset = "0x1AC7220", VA = "0x1AC7220")]
		public static bool SetQueueEntry(int nID, int nPosition, string pchEntryText)
		{
			return default(bool);
		}

		[Token(Token = "0x6000572")]
		[Address(RVA = "0x1AC735C", Offset = "0x1AC735C", VA = "0x1AC735C")]
		public static bool SetCurrentQueueEntry(int nID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000573")]
		[Address(RVA = "0x1AC7388", Offset = "0x1AC7388", VA = "0x1AC7388")]
		public static bool QueueDidChange()
		{
			return default(bool);
		}

		[Token(Token = "0x6000574")]
		[Address(RVA = "0x1AC73A4", Offset = "0x1AC73A4", VA = "0x1AC73A4")]
		public static bool PlaylistWillChange()
		{
			return default(bool);
		}

		[Token(Token = "0x6000575")]
		[Address(RVA = "0x1AC73C0", Offset = "0x1AC73C0", VA = "0x1AC73C0")]
		public static bool ResetPlaylistEntries()
		{
			return default(bool);
		}

		[Token(Token = "0x6000576")]
		[Address(RVA = "0x1AC73DC", Offset = "0x1AC73DC", VA = "0x1AC73DC")]
		public static bool SetPlaylistEntry(int nID, int nPosition, string pchEntryText)
		{
			return default(bool);
		}

		[Token(Token = "0x6000577")]
		[Address(RVA = "0x1AC7518", Offset = "0x1AC7518", VA = "0x1AC7518")]
		public static bool SetCurrentPlaylistEntry(int nID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000578")]
		[Address(RVA = "0x1AC7544", Offset = "0x1AC7544", VA = "0x1AC7544")]
		public static bool PlaylistDidChange()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000092")]
	public static class SteamNetworking
	{
		[Token(Token = "0x6000579")]
		[Address(RVA = "0x1AC7560", Offset = "0x1AC7560", VA = "0x1AC7560")]
		public static bool SendP2PPacket(CSteamID steamIDRemote, byte[] pubData, uint cubData, EP2PSend eP2PSendType, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x600057A")]
		[Address(RVA = "0x1AC75BC", Offset = "0x1AC75BC", VA = "0x1AC75BC")]
		public static bool IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x600057B")]
		[Address(RVA = "0x1AC75F0", Offset = "0x1AC75F0", VA = "0x1AC75F0")]
		public static bool ReadP2PPacket(byte[] pubDest, uint cubDest, out uint pcubMsgSize, out CSteamID psteamIDRemote, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x600057C")]
		[Address(RVA = "0x1AC764C", Offset = "0x1AC764C", VA = "0x1AC764C")]
		public static bool AcceptP2PSessionWithUser(CSteamID steamIDRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x600057D")]
		[Address(RVA = "0x1AC7678", Offset = "0x1AC7678", VA = "0x1AC7678")]
		public static bool CloseP2PSessionWithUser(CSteamID steamIDRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x600057E")]
		[Address(RVA = "0x1AC76A4", Offset = "0x1AC76A4", VA = "0x1AC76A4")]
		public static bool CloseP2PChannelWithUser(CSteamID steamIDRemote, int nChannel)
		{
			return default(bool);
		}

		[Token(Token = "0x600057F")]
		[Address(RVA = "0x1AC76D8", Offset = "0x1AC76D8", VA = "0x1AC76D8")]
		public static bool GetP2PSessionState(CSteamID steamIDRemote, out P2PSessionState_t pConnectionState)
		{
			return default(bool);
		}

		[Token(Token = "0x6000580")]
		[Address(RVA = "0x1AC770C", Offset = "0x1AC770C", VA = "0x1AC770C")]
		public static bool AllowP2PPacketRelay(bool bAllow)
		{
			return default(bool);
		}

		[Token(Token = "0x6000581")]
		[Address(RVA = "0x1AC7738", Offset = "0x1AC7738", VA = "0x1AC7738")]
		public static SNetListenSocket_t CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay)
		{
			return default(SNetListenSocket_t);
		}

		[Token(Token = "0x6000582")]
		[Address(RVA = "0x1AC778C", Offset = "0x1AC778C", VA = "0x1AC778C")]
		public static SNetSocket_t CreateP2PConnectionSocket(CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x6000583")]
		[Address(RVA = "0x1AC77E0", Offset = "0x1AC77E0", VA = "0x1AC77E0")]
		public static SNetSocket_t CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x6000584")]
		[Address(RVA = "0x1AC782C", Offset = "0x1AC782C", VA = "0x1AC782C")]
		public static bool DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x6000585")]
		[Address(RVA = "0x1AC7860", Offset = "0x1AC7860", VA = "0x1AC7860")]
		public static bool DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x6000586")]
		[Address(RVA = "0x1AC7894", Offset = "0x1AC7894", VA = "0x1AC7894")]
		public static bool SendDataOnSocket(SNetSocket_t hSocket, IntPtr pubData, uint cubData, bool bReliable)
		{
			return default(bool);
		}

		[Token(Token = "0x6000587")]
		[Address(RVA = "0x1AC78E0", Offset = "0x1AC78E0", VA = "0x1AC78E0")]
		public static bool IsDataAvailableOnSocket(SNetSocket_t hSocket, out uint pcubMsgSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000588")]
		[Address(RVA = "0x1AC7914", Offset = "0x1AC7914", VA = "0x1AC7914")]
		public static bool RetrieveDataFromSocket(SNetSocket_t hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000589")]
		[Address(RVA = "0x1AC7960", Offset = "0x1AC7960", VA = "0x1AC7960")]
		public static bool IsDataAvailable(SNetListenSocket_t hListenSocket, out uint pcubMsgSize, out SNetSocket_t phSocket)
		{
			return default(bool);
		}

		[Token(Token = "0x600058A")]
		[Address(RVA = "0x1AC79A4", Offset = "0x1AC79A4", VA = "0x1AC79A4")]
		public static bool RetrieveData(SNetListenSocket_t hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out SNetSocket_t phSocket)
		{
			return default(bool);
		}

		[Token(Token = "0x600058B")]
		[Address(RVA = "0x1AC7A00", Offset = "0x1AC7A00", VA = "0x1AC7A00")]
		public static bool GetSocketInfo(SNetSocket_t hSocket, out CSteamID pSteamIDRemote, out int peSocketStatus, out uint punIPRemote, out ushort punPortRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x600058C")]
		[Address(RVA = "0x1AC7A5C", Offset = "0x1AC7A5C", VA = "0x1AC7A5C")]
		public static bool GetListenSocketInfo(SNetListenSocket_t hListenSocket, out uint pnIP, out ushort pnPort)
		{
			return default(bool);
		}

		[Token(Token = "0x600058D")]
		[Address(RVA = "0x1AC7AA0", Offset = "0x1AC7AA0", VA = "0x1AC7AA0")]
		public static ESNetSocketConnectionType GetSocketConnectionType(SNetSocket_t hSocket)
		{
			return default(ESNetSocketConnectionType);
		}

		[Token(Token = "0x600058E")]
		[Address(RVA = "0x1AC7ACC", Offset = "0x1AC7ACC", VA = "0x1AC7ACC")]
		public static int GetMaxPacketSize(SNetSocket_t hSocket)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000093")]
	public static class SteamRemoteStorage
	{
		[Token(Token = "0x600058F")]
		[Address(RVA = "0x1AC7AF8", Offset = "0x1AC7AF8", VA = "0x1AC7AF8")]
		public static bool FileWrite(string pchFile, byte[] pvData, int cubData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000590")]
		[Address(RVA = "0x1AC7C34", Offset = "0x1AC7C34", VA = "0x1AC7C34")]
		public static int FileRead(string pchFile, byte[] pvData, int cubDataToRead)
		{
			return default(int);
		}

		[Token(Token = "0x6000591")]
		[Address(RVA = "0x1AC7D70", Offset = "0x1AC7D70", VA = "0x1AC7D70")]
		public static bool FileForget(string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6000592")]
		[Address(RVA = "0x1AC7E9C", Offset = "0x1AC7E9C", VA = "0x1AC7E9C")]
		public static bool FileDelete(string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6000593")]
		[Address(RVA = "0x1AC7FC8", Offset = "0x1AC7FC8", VA = "0x1AC7FC8")]
		public static SteamAPICall_t FileShare(string pchFile)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000594")]
		[Address(RVA = "0x1AC8118", Offset = "0x1AC8118", VA = "0x1AC8118")]
		public static bool SetSyncPlatforms(string pchFile, ERemoteStoragePlatform eRemoteStoragePlatform)
		{
			return default(bool);
		}

		[Token(Token = "0x6000595")]
		[Address(RVA = "0x1AC824C", Offset = "0x1AC824C", VA = "0x1AC824C")]
		public static UGCFileWriteStreamHandle_t FileWriteStreamOpen(string pchFile)
		{
			return default(UGCFileWriteStreamHandle_t);
		}

		[Token(Token = "0x6000596")]
		[Address(RVA = "0x1AC83AC", Offset = "0x1AC83AC", VA = "0x1AC83AC")]
		public static bool FileWriteStreamWriteChunk(UGCFileWriteStreamHandle_t writeHandle, byte[] pvData, int cubData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000597")]
		[Address(RVA = "0x1AC83F0", Offset = "0x1AC83F0", VA = "0x1AC83F0")]
		public static bool FileWriteStreamClose(UGCFileWriteStreamHandle_t writeHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000598")]
		[Address(RVA = "0x1AC841C", Offset = "0x1AC841C", VA = "0x1AC841C")]
		public static bool FileWriteStreamCancel(UGCFileWriteStreamHandle_t writeHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000599")]
		[Address(RVA = "0x1AC8448", Offset = "0x1AC8448", VA = "0x1AC8448")]
		public static bool FileExists(string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x600059A")]
		[Address(RVA = "0x1AC8574", Offset = "0x1AC8574", VA = "0x1AC8574")]
		public static bool FilePersisted(string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x600059B")]
		[Address(RVA = "0x1AC86A0", Offset = "0x1AC86A0", VA = "0x1AC86A0")]
		public static int GetFileSize(string pchFile)
		{
			return default(int);
		}

		[Token(Token = "0x600059C")]
		[Address(RVA = "0x1AC87CC", Offset = "0x1AC87CC", VA = "0x1AC87CC")]
		public static long GetFileTimestamp(string pchFile)
		{
			return default(long);
		}

		[Token(Token = "0x600059D")]
		[Address(RVA = "0x1AC88F8", Offset = "0x1AC88F8", VA = "0x1AC88F8")]
		public static ERemoteStoragePlatform GetSyncPlatforms(string pchFile)
		{
			return default(ERemoteStoragePlatform);
		}

		[Token(Token = "0x600059E")]
		[Address(RVA = "0x1AC8A24", Offset = "0x1AC8A24", VA = "0x1AC8A24")]
		public static int GetFileCount()
		{
			return default(int);
		}

		[Token(Token = "0x600059F")]
		[Address(RVA = "0x1AC8A40", Offset = "0x1AC8A40", VA = "0x1AC8A40")]
		public static string GetFileNameAndSize(int iFile, out int pnFileSizeInBytes)
		{
			return null;
		}

		[Token(Token = "0x60005A0")]
		[Address(RVA = "0x1AC8A7C", Offset = "0x1AC8A7C", VA = "0x1AC8A7C")]
		public static bool GetQuota(out int pnTotalBytes, out int puAvailableBytes)
		{
			return default(bool);
		}

		[Token(Token = "0x60005A1")]
		[Address(RVA = "0x1AC8AB0", Offset = "0x1AC8AB0", VA = "0x1AC8AB0")]
		public static bool IsCloudEnabledForAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x60005A2")]
		[Address(RVA = "0x1AC8ACC", Offset = "0x1AC8ACC", VA = "0x1AC8ACC")]
		public static bool IsCloudEnabledForApp()
		{
			return default(bool);
		}

		[Token(Token = "0x60005A3")]
		[Address(RVA = "0x1AC8AE8", Offset = "0x1AC8AE8", VA = "0x1AC8AE8")]
		public static void SetCloudEnabledForApp(bool bEnabled)
		{
		}

		[Token(Token = "0x60005A4")]
		[Address(RVA = "0x1AC8B14", Offset = "0x1AC8B14", VA = "0x1AC8B14")]
		public static SteamAPICall_t UGCDownload(UGCHandle_t hContent, uint unPriority)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005A5")]
		[Address(RVA = "0x1AC8BA4", Offset = "0x1AC8BA4", VA = "0x1AC8BA4")]
		public static bool GetUGCDownloadProgress(UGCHandle_t hContent, out int pnBytesDownloaded, out int pnBytesExpected)
		{
			return default(bool);
		}

		[Token(Token = "0x60005A6")]
		[Address(RVA = "0x1AC8BE8", Offset = "0x1AC8BE8", VA = "0x1AC8BE8")]
		public static bool GetUGCDetails(UGCHandle_t hContent, out AppId_t pnAppID, out string ppchName, out int pnFileSizeInBytes, out CSteamID pSteamIDOwner)
		{
			return default(bool);
		}

		[Token(Token = "0x60005A7")]
		[Address(RVA = "0x1AC8C70", Offset = "0x1AC8C70", VA = "0x1AC8C70")]
		public static int UGCRead(UGCHandle_t hContent, byte[] pvData, int cubDataToRead, uint cOffset, EUGCReadAction eAction)
		{
			return default(int);
		}

		[Token(Token = "0x60005A8")]
		[Address(RVA = "0x1AC8CCC", Offset = "0x1AC8CCC", VA = "0x1AC8CCC")]
		public static int GetCachedUGCCount()
		{
			return default(int);
		}

		[Token(Token = "0x60005A9")]
		[Address(RVA = "0x1AC8CE8", Offset = "0x1AC8CE8", VA = "0x1AC8CE8")]
		public static UGCHandle_t GetCachedUGCHandle(int iCachedContent)
		{
			return default(UGCHandle_t);
		}

		[Token(Token = "0x60005AA")]
		[Address(RVA = "0x1AC8D6C", Offset = "0x1AC8D6C", VA = "0x1AC8D6C")]
		public static SteamAPICall_t PublishWorkshopFile(string pchFile, string pchPreviewFile, AppId_t nConsumerAppId, string pchTitle, string pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, IList<string> pTags, EWorkshopFileType eWorkshopFileType)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005AB")]
		[Address(RVA = "0x1AC9208", Offset = "0x1AC9208", VA = "0x1AC9208")]
		public static PublishedFileUpdateHandle_t CreatePublishedFileUpdateRequest(PublishedFileId_t unPublishedFileId)
		{
			return default(PublishedFileUpdateHandle_t);
		}

		[Token(Token = "0x60005AC")]
		[Address(RVA = "0x1AC9288", Offset = "0x1AC9288", VA = "0x1AC9288")]
		public static bool UpdatePublishedFileFile(PublishedFileUpdateHandle_t updateHandle, string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x60005AD")]
		[Address(RVA = "0x1AC93BC", Offset = "0x1AC93BC", VA = "0x1AC93BC")]
		public static bool UpdatePublishedFilePreviewFile(PublishedFileUpdateHandle_t updateHandle, string pchPreviewFile)
		{
			return default(bool);
		}

		[Token(Token = "0x60005AE")]
		[Address(RVA = "0x1AC94F0", Offset = "0x1AC94F0", VA = "0x1AC94F0")]
		public static bool UpdatePublishedFileTitle(PublishedFileUpdateHandle_t updateHandle, string pchTitle)
		{
			return default(bool);
		}

		[Token(Token = "0x60005AF")]
		[Address(RVA = "0x1AC9624", Offset = "0x1AC9624", VA = "0x1AC9624")]
		public static bool UpdatePublishedFileDescription(PublishedFileUpdateHandle_t updateHandle, string pchDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x60005B0")]
		[Address(RVA = "0x1AC9758", Offset = "0x1AC9758", VA = "0x1AC9758")]
		public static bool UpdatePublishedFileVisibility(PublishedFileUpdateHandle_t updateHandle, ERemoteStoragePublishedFileVisibility eVisibility)
		{
			return default(bool);
		}

		[Token(Token = "0x60005B1")]
		[Address(RVA = "0x1AC978C", Offset = "0x1AC978C", VA = "0x1AC978C")]
		public static bool UpdatePublishedFileTags(PublishedFileUpdateHandle_t updateHandle, IList<string> pTags)
		{
			return default(bool);
		}

		[Token(Token = "0x60005B2")]
		[Address(RVA = "0x1AC9818", Offset = "0x1AC9818", VA = "0x1AC9818")]
		public static SteamAPICall_t CommitPublishedFileUpdate(PublishedFileUpdateHandle_t updateHandle)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005B3")]
		[Address(RVA = "0x1AC9898", Offset = "0x1AC9898", VA = "0x1AC9898")]
		public static SteamAPICall_t GetPublishedFileDetails(PublishedFileId_t unPublishedFileId, uint unMaxSecondsOld)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005B4")]
		[Address(RVA = "0x1AC9928", Offset = "0x1AC9928", VA = "0x1AC9928")]
		public static SteamAPICall_t DeletePublishedFile(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005B5")]
		[Address(RVA = "0x1AC99A8", Offset = "0x1AC99A8", VA = "0x1AC99A8")]
		public static SteamAPICall_t EnumerateUserPublishedFiles(uint unStartIndex)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005B6")]
		[Address(RVA = "0x1AC9A28", Offset = "0x1AC9A28", VA = "0x1AC9A28")]
		public static SteamAPICall_t SubscribePublishedFile(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005B7")]
		[Address(RVA = "0x1AC9AA8", Offset = "0x1AC9AA8", VA = "0x1AC9AA8")]
		public static SteamAPICall_t EnumerateUserSubscribedFiles(uint unStartIndex)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005B8")]
		[Address(RVA = "0x1AC9B28", Offset = "0x1AC9B28", VA = "0x1AC9B28")]
		public static SteamAPICall_t UnsubscribePublishedFile(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005B9")]
		[Address(RVA = "0x1AC9BA8", Offset = "0x1AC9BA8", VA = "0x1AC9BA8")]
		public static bool UpdatePublishedFileSetChangeDescription(PublishedFileUpdateHandle_t updateHandle, string pchChangeDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x60005BA")]
		[Address(RVA = "0x1AC9CDC", Offset = "0x1AC9CDC", VA = "0x1AC9CDC")]
		public static SteamAPICall_t GetPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005BB")]
		[Address(RVA = "0x1AC9D5C", Offset = "0x1AC9D5C", VA = "0x1AC9D5C")]
		public static SteamAPICall_t UpdateUserPublishedItemVote(PublishedFileId_t unPublishedFileId, bool bVoteUp)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005BC")]
		[Address(RVA = "0x1AC9DEC", Offset = "0x1AC9DEC", VA = "0x1AC9DEC")]
		public static SteamAPICall_t GetUserPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005BD")]
		[Address(RVA = "0x1AC9E6C", Offset = "0x1AC9E6C", VA = "0x1AC9E6C")]
		public static SteamAPICall_t EnumerateUserSharedWorkshopFiles(CSteamID steamId, uint unStartIndex, IList<string> pRequiredTags, IList<string> pExcludedTags)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005BE")]
		[Address(RVA = "0x1AC9F6C", Offset = "0x1AC9F6C", VA = "0x1AC9F6C")]
		public static SteamAPICall_t PublishVideo(EWorkshopVideoProvider eVideoProvider, string pchVideoAccount, string pchVideoIdentifier, string pchPreviewFile, AppId_t nConsumerAppId, string pchTitle, string pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, IList<string> pTags)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005BF")]
		[Address(RVA = "0x1ACA4EC", Offset = "0x1ACA4EC", VA = "0x1ACA4EC")]
		public static SteamAPICall_t SetUserPublishedFileAction(PublishedFileId_t unPublishedFileId, EWorkshopFileAction eAction)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005C0")]
		[Address(RVA = "0x1ACA57C", Offset = "0x1ACA57C", VA = "0x1ACA57C")]
		public static SteamAPICall_t EnumeratePublishedFilesByUserAction(EWorkshopFileAction eAction, uint unStartIndex)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005C1")]
		[Address(RVA = "0x1ACA60C", Offset = "0x1ACA60C", VA = "0x1ACA60C")]
		public static SteamAPICall_t EnumeratePublishedWorkshopFiles(EWorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, IList<string> pTags, IList<string> pUserTags)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005C2")]
		[Address(RVA = "0x1ACA724", Offset = "0x1ACA724", VA = "0x1ACA724")]
		public static SteamAPICall_t UGCDownloadToLocation(UGCHandle_t hContent, string pchLocation, uint unPriority)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x2000094")]
	public static class SteamScreenshots
	{
		[Token(Token = "0x60005C3")]
		[Address(RVA = "0x19EE218", Offset = "0x19EE218", VA = "0x19EE218")]
		public static ScreenshotHandle WriteScreenshot(byte[] pubRGB, uint cubRGB, int nWidth, int nHeight)
		{
			return default(ScreenshotHandle);
		}

		[Token(Token = "0x60005C4")]
		[Address(RVA = "0x19EE2CC", Offset = "0x19EE2CC", VA = "0x19EE2CC")]
		public static ScreenshotHandle AddScreenshotToLibrary(string pchFilename, string pchThumbnailFilename, int nWidth, int nHeight)
		{
			return default(ScreenshotHandle);
		}

		[Token(Token = "0x60005C5")]
		[Address(RVA = "0x19EE540", Offset = "0x19EE540", VA = "0x19EE540")]
		public static void TriggerScreenshot()
		{
		}

		[Token(Token = "0x60005C6")]
		[Address(RVA = "0x19EE55C", Offset = "0x19EE55C", VA = "0x19EE55C")]
		public static void HookScreenshots(bool bHook)
		{
		}

		[Token(Token = "0x60005C7")]
		[Address(RVA = "0x19EE588", Offset = "0x19EE588", VA = "0x19EE588")]
		public static bool SetLocation(ScreenshotHandle hScreenshot, string pchLocation)
		{
			return default(bool);
		}

		[Token(Token = "0x60005C8")]
		[Address(RVA = "0x19EE6BC", Offset = "0x19EE6BC", VA = "0x19EE6BC")]
		public static bool TagUser(ScreenshotHandle hScreenshot, CSteamID steamID)
		{
			return default(bool);
		}

		[Token(Token = "0x60005C9")]
		[Address(RVA = "0x19EE6F0", Offset = "0x19EE6F0", VA = "0x19EE6F0")]
		public static bool TagPublishedFile(ScreenshotHandle hScreenshot, PublishedFileId_t unPublishedFileID)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000095")]
	public static class SteamUGC
	{
		[Token(Token = "0x60005CA")]
		[Address(RVA = "0x19EE724", Offset = "0x19EE724", VA = "0x19EE724")]
		public static UGCQueryHandle_t CreateQueryUserUGCRequest(AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x60005CB")]
		[Address(RVA = "0x19EE7F0", Offset = "0x19EE7F0", VA = "0x19EE7F0")]
		public static UGCQueryHandle_t CreateQueryAllUGCRequest(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x60005CC")]
		[Address(RVA = "0x19EE8A0", Offset = "0x19EE8A0", VA = "0x19EE8A0")]
		public static UGCQueryHandle_t CreateQueryUGCDetailsRequest(PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x60005CD")]
		[Address(RVA = "0x19EE930", Offset = "0x19EE930", VA = "0x19EE930")]
		public static SteamAPICall_t SendQueryUGCRequest(UGCQueryHandle_t handle)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005CE")]
		[Address(RVA = "0x19EE9B4", Offset = "0x19EE9B4", VA = "0x19EE9B4")]
		public static bool GetQueryUGCResult(UGCQueryHandle_t handle, uint index, out SteamUGCDetails_t pDetails)
		{
			return default(bool);
		}

		[Token(Token = "0x60005CF")]
		[Address(RVA = "0x19EE9F8", Offset = "0x19EE9F8", VA = "0x19EE9F8")]
		public static bool GetQueryUGCPreviewURL(UGCQueryHandle_t handle, uint index, out string pchURL, uint cchURLSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D0")]
		[Address(RVA = "0x19EEAE8", Offset = "0x19EEAE8", VA = "0x19EEAE8")]
		public static bool GetQueryUGCMetadata(UGCQueryHandle_t handle, uint index, out string pchMetadata, uint cchMetadatasize)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D1")]
		[Address(RVA = "0x19EEBD8", Offset = "0x19EEBD8", VA = "0x19EEBD8")]
		public static bool GetQueryUGCChildren(UGCQueryHandle_t handle, uint index, PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D2")]
		[Address(RVA = "0x19EEC24", Offset = "0x19EEC24", VA = "0x19EEC24")]
		public static bool GetQueryUGCStatistic(UGCQueryHandle_t handle, uint index, EItemStatistic eStatType, out uint pStatValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D3")]
		[Address(RVA = "0x19EEC70", Offset = "0x19EEC70", VA = "0x19EEC70")]
		public static uint GetQueryUGCNumAdditionalPreviews(UGCQueryHandle_t handle, uint index)
		{
			return default(uint);
		}

		[Token(Token = "0x60005D4")]
		[Address(RVA = "0x19EECA4", Offset = "0x19EECA4", VA = "0x19EECA4")]
		public static bool GetQueryUGCAdditionalPreview(UGCQueryHandle_t handle, uint index, uint previewIndex, out string pchURLOrVideoID, uint cchURLSize, out bool pbIsImage)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D5")]
		[Address(RVA = "0x19EEDAC", Offset = "0x19EEDAC", VA = "0x19EEDAC")]
		public static uint GetQueryUGCNumKeyValueTags(UGCQueryHandle_t handle, uint index)
		{
			return default(uint);
		}

		[Token(Token = "0x60005D6")]
		[Address(RVA = "0x19EEDE0", Offset = "0x19EEDE0", VA = "0x19EEDE0")]
		public static bool GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, uint index, uint keyValueTagIndex, out string pchKey, uint cchKeySize, out string pchValue, uint cchValueSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D7")]
		[Address(RVA = "0x19EEF44", Offset = "0x19EEF44", VA = "0x19EEF44")]
		public static bool ReleaseQueryUGCRequest(UGCQueryHandle_t handle)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D8")]
		[Address(RVA = "0x19EEF70", Offset = "0x19EEF70", VA = "0x19EEF70")]
		public static bool AddRequiredTag(UGCQueryHandle_t handle, string pTagName)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D9")]
		[Address(RVA = "0x19EF0A4", Offset = "0x19EF0A4", VA = "0x19EF0A4")]
		public static bool AddExcludedTag(UGCQueryHandle_t handle, string pTagName)
		{
			return default(bool);
		}

		[Token(Token = "0x60005DA")]
		[Address(RVA = "0x19EF1D8", Offset = "0x19EF1D8", VA = "0x19EF1D8")]
		public static bool SetReturnKeyValueTags(UGCQueryHandle_t handle, bool bReturnKeyValueTags)
		{
			return default(bool);
		}

		[Token(Token = "0x60005DB")]
		[Address(RVA = "0x19EF20C", Offset = "0x19EF20C", VA = "0x19EF20C")]
		public static bool SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x60005DC")]
		[Address(RVA = "0x19EF240", Offset = "0x19EF240", VA = "0x19EF240")]
		public static bool SetReturnMetadata(UGCQueryHandle_t handle, bool bReturnMetadata)
		{
			return default(bool);
		}

		[Token(Token = "0x60005DD")]
		[Address(RVA = "0x19EF274", Offset = "0x19EF274", VA = "0x19EF274")]
		public static bool SetReturnChildren(UGCQueryHandle_t handle, bool bReturnChildren)
		{
			return default(bool);
		}

		[Token(Token = "0x60005DE")]
		[Address(RVA = "0x19EF2A8", Offset = "0x19EF2A8", VA = "0x19EF2A8")]
		public static bool SetReturnAdditionalPreviews(UGCQueryHandle_t handle, bool bReturnAdditionalPreviews)
		{
			return default(bool);
		}

		[Token(Token = "0x60005DF")]
		[Address(RVA = "0x19EF2DC", Offset = "0x19EF2DC", VA = "0x19EF2DC")]
		public static bool SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly)
		{
			return default(bool);
		}

		[Token(Token = "0x60005E0")]
		[Address(RVA = "0x19EF310", Offset = "0x19EF310", VA = "0x19EF310")]
		public static bool SetLanguage(UGCQueryHandle_t handle, string pchLanguage)
		{
			return default(bool);
		}

		[Token(Token = "0x60005E1")]
		[Address(RVA = "0x19EF444", Offset = "0x19EF444", VA = "0x19EF444")]
		public static bool SetAllowCachedResponse(UGCQueryHandle_t handle, uint unMaxAgeSeconds)
		{
			return default(bool);
		}

		[Token(Token = "0x60005E2")]
		[Address(RVA = "0x19EF478", Offset = "0x19EF478", VA = "0x19EF478")]
		public static bool SetCloudFileNameFilter(UGCQueryHandle_t handle, string pMatchCloudFileName)
		{
			return default(bool);
		}

		[Token(Token = "0x60005E3")]
		[Address(RVA = "0x19EF5AC", Offset = "0x19EF5AC", VA = "0x19EF5AC")]
		public static bool SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag)
		{
			return default(bool);
		}

		[Token(Token = "0x60005E4")]
		[Address(RVA = "0x19EF5E0", Offset = "0x19EF5E0", VA = "0x19EF5E0")]
		public static bool SetSearchText(UGCQueryHandle_t handle, string pSearchText)
		{
			return default(bool);
		}

		[Token(Token = "0x60005E5")]
		[Address(RVA = "0x19EF714", Offset = "0x19EF714", VA = "0x19EF714")]
		public static bool SetRankedByTrendDays(UGCQueryHandle_t handle, uint unDays)
		{
			return default(bool);
		}

		[Token(Token = "0x60005E6")]
		[Address(RVA = "0x19EF748", Offset = "0x19EF748", VA = "0x19EF748")]
		public static bool AddRequiredKeyValueTag(UGCQueryHandle_t handle, string pKey, string pValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60005E7")]
		[Address(RVA = "0x19EF98C", Offset = "0x19EF98C", VA = "0x19EF98C")]
		public static SteamAPICall_t RequestUGCDetails(PublishedFileId_t nPublishedFileID, uint unMaxAgeSeconds)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005E8")]
		[Address(RVA = "0x19EFA20", Offset = "0x19EFA20", VA = "0x19EFA20")]
		public static SteamAPICall_t CreateItem(AppId_t nConsumerAppId, EWorkshopFileType eFileType)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005E9")]
		[Address(RVA = "0x19EFAB4", Offset = "0x19EFAB4", VA = "0x19EFAB4")]
		public static UGCUpdateHandle_t StartItemUpdate(AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(UGCUpdateHandle_t);
		}

		[Token(Token = "0x60005EA")]
		[Address(RVA = "0x19EFB48", Offset = "0x19EFB48", VA = "0x19EFB48")]
		public static bool SetItemTitle(UGCUpdateHandle_t handle, string pchTitle)
		{
			return default(bool);
		}

		[Token(Token = "0x60005EB")]
		[Address(RVA = "0x19EFC7C", Offset = "0x19EFC7C", VA = "0x19EFC7C")]
		public static bool SetItemDescription(UGCUpdateHandle_t handle, string pchDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x60005EC")]
		[Address(RVA = "0x19EFDB0", Offset = "0x19EFDB0", VA = "0x19EFDB0")]
		public static bool SetItemUpdateLanguage(UGCUpdateHandle_t handle, string pchLanguage)
		{
			return default(bool);
		}

		[Token(Token = "0x60005ED")]
		[Address(RVA = "0x19EFEE4", Offset = "0x19EFEE4", VA = "0x19EFEE4")]
		public static bool SetItemMetadata(UGCUpdateHandle_t handle, string pchMetaData)
		{
			return default(bool);
		}

		[Token(Token = "0x60005EE")]
		[Address(RVA = "0x19F0018", Offset = "0x19F0018", VA = "0x19F0018")]
		public static bool SetItemVisibility(UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility)
		{
			return default(bool);
		}

		[Token(Token = "0x60005EF")]
		[Address(RVA = "0x19F004C", Offset = "0x19F004C", VA = "0x19F004C")]
		public static bool SetItemTags(UGCUpdateHandle_t updateHandle, IList<string> pTags)
		{
			return default(bool);
		}

		[Token(Token = "0x60005F0")]
		[Address(RVA = "0x19F00D8", Offset = "0x19F00D8", VA = "0x19F00D8")]
		public static bool SetItemContent(UGCUpdateHandle_t handle, string pszContentFolder)
		{
			return default(bool);
		}

		[Token(Token = "0x60005F1")]
		[Address(RVA = "0x19F020C", Offset = "0x19F020C", VA = "0x19F020C")]
		public static bool SetItemPreview(UGCUpdateHandle_t handle, string pszPreviewFile)
		{
			return default(bool);
		}

		[Token(Token = "0x60005F2")]
		[Address(RVA = "0x19F0340", Offset = "0x19F0340", VA = "0x19F0340")]
		public static bool RemoveItemKeyValueTags(UGCUpdateHandle_t handle, string pchKey)
		{
			return default(bool);
		}

		[Token(Token = "0x60005F3")]
		[Address(RVA = "0x19F0474", Offset = "0x19F0474", VA = "0x19F0474")]
		public static bool AddItemKeyValueTag(UGCUpdateHandle_t handle, string pchKey, string pchValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60005F4")]
		[Address(RVA = "0x19F06B8", Offset = "0x19F06B8", VA = "0x19F06B8")]
		public static SteamAPICall_t SubmitItemUpdate(UGCUpdateHandle_t handle, string pchChangeNote)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005F5")]
		[Address(RVA = "0x19F0820", Offset = "0x19F0820", VA = "0x19F0820")]
		public static EItemUpdateStatus GetItemUpdateProgress(UGCUpdateHandle_t handle, out ulong punBytesProcessed, out ulong punBytesTotal)
		{
			return default(EItemUpdateStatus);
		}

		[Token(Token = "0x60005F6")]
		[Address(RVA = "0x19F0864", Offset = "0x19F0864", VA = "0x19F0864")]
		public static SteamAPICall_t SetUserItemVote(PublishedFileId_t nPublishedFileID, bool bVoteUp)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005F7")]
		[Address(RVA = "0x19F08F8", Offset = "0x19F08F8", VA = "0x19F08F8")]
		public static SteamAPICall_t GetUserItemVote(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005F8")]
		[Address(RVA = "0x19F097C", Offset = "0x19F097C", VA = "0x19F097C")]
		public static SteamAPICall_t AddItemToFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005F9")]
		[Address(RVA = "0x19F0A10", Offset = "0x19F0A10", VA = "0x19F0A10")]
		public static SteamAPICall_t RemoveItemFromFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005FA")]
		[Address(RVA = "0x19F0AA4", Offset = "0x19F0AA4", VA = "0x19F0AA4")]
		public static SteamAPICall_t SubscribeItem(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005FB")]
		[Address(RVA = "0x19F0B28", Offset = "0x19F0B28", VA = "0x19F0B28")]
		public static SteamAPICall_t UnsubscribeItem(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005FC")]
		[Address(RVA = "0x19F0BAC", Offset = "0x19F0BAC", VA = "0x19F0BAC")]
		public static uint GetNumSubscribedItems()
		{
			return default(uint);
		}

		[Token(Token = "0x60005FD")]
		[Address(RVA = "0x19F0BC8", Offset = "0x19F0BC8", VA = "0x19F0BC8")]
		public static uint GetSubscribedItems(PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries)
		{
			return default(uint);
		}

		[Token(Token = "0x60005FE")]
		[Address(RVA = "0x19F0BFC", Offset = "0x19F0BFC", VA = "0x19F0BFC")]
		public static uint GetItemState(PublishedFileId_t nPublishedFileID)
		{
			return default(uint);
		}

		[Token(Token = "0x60005FF")]
		[Address(RVA = "0x19F0C28", Offset = "0x19F0C28", VA = "0x19F0C28")]
		public static bool GetItemInstallInfo(PublishedFileId_t nPublishedFileID, out ulong punSizeOnDisk, out string pchFolder, uint cchFolderSize, out uint punTimeStamp)
		{
			return default(bool);
		}

		[Token(Token = "0x6000600")]
		[Address(RVA = "0x19F0D28", Offset = "0x19F0D28", VA = "0x19F0D28")]
		public static bool GetItemDownloadInfo(PublishedFileId_t nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal)
		{
			return default(bool);
		}

		[Token(Token = "0x6000601")]
		[Address(RVA = "0x19F0D6C", Offset = "0x19F0D6C", VA = "0x19F0D6C")]
		public static bool DownloadItem(PublishedFileId_t nPublishedFileID, bool bHighPriority)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000096")]
	public static class SteamUnifiedMessages
	{
		[Token(Token = "0x6000602")]
		[Address(RVA = "0x19F0DA0", Offset = "0x19F0DA0", VA = "0x19F0DA0")]
		public static ClientUnifiedMessageHandle SendMethod(string pchServiceMethod, byte[] pRequestBuffer, uint unRequestBufferSize, ulong unContext)
		{
			return default(ClientUnifiedMessageHandle);
		}

		[Token(Token = "0x6000603")]
		[Address(RVA = "0x19F0F20", Offset = "0x19F0F20", VA = "0x19F0F20")]
		public static bool GetMethodResponseInfo(ClientUnifiedMessageHandle hHandle, out uint punResponseSize, out EResult peResult)
		{
			return default(bool);
		}

		[Token(Token = "0x6000604")]
		[Address(RVA = "0x19F0F64", Offset = "0x19F0F64", VA = "0x19F0F64")]
		public static bool GetMethodResponseData(ClientUnifiedMessageHandle hHandle, byte[] pResponseBuffer, uint unResponseBufferSize, bool bAutoRelease)
		{
			return default(bool);
		}

		[Token(Token = "0x6000605")]
		[Address(RVA = "0x19F0FB0", Offset = "0x19F0FB0", VA = "0x19F0FB0")]
		public static bool ReleaseMethod(ClientUnifiedMessageHandle hHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000606")]
		[Address(RVA = "0x19F0FDC", Offset = "0x19F0FDC", VA = "0x19F0FDC")]
		public static bool SendNotification(string pchServiceNotification, byte[] pNotificationBuffer, uint unNotificationBufferSize)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000097")]
	public static class SteamUser
	{
		[Token(Token = "0x6000607")]
		[Address(RVA = "0x19F1118", Offset = "0x19F1118", VA = "0x19F1118")]
		public static HSteamUser GetHSteamUser()
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x6000608")]
		[Address(RVA = "0x19F1144", Offset = "0x19F1144", VA = "0x19F1144")]
		public static bool BLoggedOn()
		{
			return default(bool);
		}

		[Token(Token = "0x6000609")]
		[Address(RVA = "0x19F1160", Offset = "0x19F1160", VA = "0x19F1160")]
		public static CSteamID GetSteamID()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x600060A")]
		[Address(RVA = "0x19F11DC", Offset = "0x19F11DC", VA = "0x19F11DC")]
		public static int InitiateGameConnection(byte[] pAuthBlob, int cbMaxAuthBlob, CSteamID steamIDGameServer, uint unIPServer, ushort usPortServer, bool bSecure)
		{
			return default(int);
		}

		[Token(Token = "0x600060B")]
		[Address(RVA = "0x19F1240", Offset = "0x19F1240", VA = "0x19F1240")]
		public static void TerminateGameConnection(uint unIPServer, ushort usPortServer)
		{
		}

		[Token(Token = "0x600060C")]
		[Address(RVA = "0x19F1274", Offset = "0x19F1274", VA = "0x19F1274")]
		public static void TrackAppUsageEvent(CGameID gameID, int eAppUsageEvent, string pchExtraInfo = "")
		{
		}

		[Token(Token = "0x600060D")]
		[Address(RVA = "0x19F13B0", Offset = "0x19F13B0", VA = "0x19F13B0")]
		public static bool GetUserDataFolder(out string pchBuffer, int cubBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x600060E")]
		[Address(RVA = "0x19F1484", Offset = "0x19F1484", VA = "0x19F1484")]
		public static void StartVoiceRecording()
		{
		}

		[Token(Token = "0x600060F")]
		[Address(RVA = "0x19F14A0", Offset = "0x19F14A0", VA = "0x19F14A0")]
		public static void StopVoiceRecording()
		{
		}

		[Token(Token = "0x6000610")]
		[Address(RVA = "0x19F14BC", Offset = "0x19F14BC", VA = "0x19F14BC")]
		public static EVoiceResult GetAvailableVoice(out uint pcbCompressed, out uint pcbUncompressed, uint nUncompressedVoiceDesiredSampleRate)
		{
			return default(EVoiceResult);
		}

		[Token(Token = "0x6000611")]
		[Address(RVA = "0x19F1500", Offset = "0x19F1500", VA = "0x19F1500")]
		public static EVoiceResult GetVoice(bool bWantCompressed, byte[] pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, bool bWantUncompressed, byte[] pUncompressedDestBuffer, uint cbUncompressedDestBufferSize, out uint nUncompressBytesWritten, uint nUncompressedVoiceDesiredSampleRate)
		{
			return default(EVoiceResult);
		}

		[Token(Token = "0x6000612")]
		[Address(RVA = "0x19F158C", Offset = "0x19F158C", VA = "0x19F158C")]
		public static EVoiceResult DecompressVoice(byte[] pCompressed, uint cbCompressed, byte[] pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate)
		{
			return default(EVoiceResult);
		}

		[Token(Token = "0x6000613")]
		[Address(RVA = "0x19F15F0", Offset = "0x19F15F0", VA = "0x19F15F0")]
		public static uint GetVoiceOptimalSampleRate()
		{
			return default(uint);
		}

		[Token(Token = "0x6000614")]
		[Address(RVA = "0x19F160C", Offset = "0x19F160C", VA = "0x19F160C")]
		public static HAuthTicket GetAuthSessionTicket(byte[] pTicket, int cbMaxTicket, out uint pcbTicket)
		{
			return default(HAuthTicket);
		}

		[Token(Token = "0x6000615")]
		[Address(RVA = "0x19F16B0", Offset = "0x19F16B0", VA = "0x19F16B0")]
		public static EBeginAuthSessionResult BeginAuthSession(byte[] pAuthTicket, int cbAuthTicket, CSteamID steamID)
		{
			return default(EBeginAuthSessionResult);
		}

		[Token(Token = "0x6000616")]
		[Address(RVA = "0x19F16F4", Offset = "0x19F16F4", VA = "0x19F16F4")]
		public static void EndAuthSession(CSteamID steamID)
		{
		}

		[Token(Token = "0x6000617")]
		[Address(RVA = "0x19F1720", Offset = "0x19F1720", VA = "0x19F1720")]
		public static void CancelAuthTicket(HAuthTicket hAuthTicket)
		{
		}

		[Token(Token = "0x6000618")]
		[Address(RVA = "0x19F174C", Offset = "0x19F174C", VA = "0x19F174C")]
		public static EUserHasLicenseForAppResult UserHasLicenseForApp(CSteamID steamID, AppId_t appID)
		{
			return default(EUserHasLicenseForAppResult);
		}

		[Token(Token = "0x6000619")]
		[Address(RVA = "0x19F1780", Offset = "0x19F1780", VA = "0x19F1780")]
		public static bool BIsBehindNAT()
		{
			return default(bool);
		}

		[Token(Token = "0x600061A")]
		[Address(RVA = "0x19F179C", Offset = "0x19F179C", VA = "0x19F179C")]
		public static void AdvertiseGame(CSteamID steamIDGameServer, uint unIPServer, ushort usPortServer)
		{
		}

		[Token(Token = "0x600061B")]
		[Address(RVA = "0x19F17E0", Offset = "0x19F17E0", VA = "0x19F17E0")]
		public static SteamAPICall_t RequestEncryptedAppTicket(byte[] pDataToInclude, int cbDataToInclude)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600061C")]
		[Address(RVA = "0x19F1874", Offset = "0x19F1874", VA = "0x19F1874")]
		public static bool GetEncryptedAppTicket(byte[] pTicket, int cbMaxTicket, out uint pcbTicket)
		{
			return default(bool);
		}

		[Token(Token = "0x600061D")]
		[Address(RVA = "0x19F18B8", Offset = "0x19F18B8", VA = "0x19F18B8")]
		public static int GetGameBadgeLevel(int nSeries, bool bFoil)
		{
			return default(int);
		}

		[Token(Token = "0x600061E")]
		[Address(RVA = "0x19F18EC", Offset = "0x19F18EC", VA = "0x19F18EC")]
		public static int GetPlayerSteamLevel()
		{
			return default(int);
		}

		[Token(Token = "0x600061F")]
		[Address(RVA = "0x19F1908", Offset = "0x19F1908", VA = "0x19F1908")]
		public static SteamAPICall_t RequestStoreAuthURL(string pchRedirectURL)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x2000098")]
	public static class SteamUserStats
	{
		[Token(Token = "0x6000620")]
		[Address(RVA = "0x19F1A68", Offset = "0x19F1A68", VA = "0x19F1A68")]
		public static bool RequestCurrentStats()
		{
			return default(bool);
		}

		[Token(Token = "0x6000621")]
		[Address(RVA = "0x19F1A84", Offset = "0x19F1A84", VA = "0x19F1A84")]
		public static bool GetStat(string pchName, out int pData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000622")]
		[Address(RVA = "0x19F1BB8", Offset = "0x19F1BB8", VA = "0x19F1BB8")]
		public static bool GetStat(string pchName, out float pData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000623")]
		[Address(RVA = "0x19F1CEC", Offset = "0x19F1CEC", VA = "0x19F1CEC")]
		public static bool SetStat(string pchName, int nData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000624")]
		[Address(RVA = "0x19F1E20", Offset = "0x19F1E20", VA = "0x19F1E20")]
		public static bool SetStat(string pchName, float fData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000625")]
		[Address(RVA = "0x19F1F5C", Offset = "0x19F1F5C", VA = "0x19F1F5C")]
		public static bool UpdateAvgRateStat(string pchName, float flCountThisSession, double dSessionLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000626")]
		[Address(RVA = "0x19F20A0", Offset = "0x19F20A0", VA = "0x19F20A0")]
		public static bool GetAchievement(string pchName, out bool pbAchieved)
		{
			return default(bool);
		}

		[Token(Token = "0x6000627")]
		[Address(RVA = "0x19F21D4", Offset = "0x19F21D4", VA = "0x19F21D4")]
		public static bool SetAchievement(string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000628")]
		[Address(RVA = "0x19F2300", Offset = "0x19F2300", VA = "0x19F2300")]
		public static bool ClearAchievement(string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000629")]
		[Address(RVA = "0x19F242C", Offset = "0x19F242C", VA = "0x19F242C")]
		public static bool GetAchievementAndUnlockTime(string pchName, out bool pbAchieved, out uint punUnlockTime)
		{
			return default(bool);
		}

		[Token(Token = "0x600062A")]
		[Address(RVA = "0x19F2568", Offset = "0x19F2568", VA = "0x19F2568")]
		public static bool StoreStats()
		{
			return default(bool);
		}

		[Token(Token = "0x600062B")]
		[Address(RVA = "0x19F2584", Offset = "0x19F2584", VA = "0x19F2584")]
		public static int GetAchievementIcon(string pchName)
		{
			return default(int);
		}

		[Token(Token = "0x600062C")]
		[Address(RVA = "0x19F26B0", Offset = "0x19F26B0", VA = "0x19F26B0")]
		public static string GetAchievementDisplayAttribute(string pchName, string pchKey)
		{
			return null;
		}

		[Token(Token = "0x600062D")]
		[Address(RVA = "0x19F28E0", Offset = "0x19F28E0", VA = "0x19F28E0")]
		public static bool IndicateAchievementProgress(string pchName, uint nCurProgress, uint nMaxProgress)
		{
			return default(bool);
		}

		[Token(Token = "0x600062E")]
		[Address(RVA = "0x19F2A1C", Offset = "0x19F2A1C", VA = "0x19F2A1C")]
		public static uint GetNumAchievements()
		{
			return default(uint);
		}

		[Token(Token = "0x600062F")]
		[Address(RVA = "0x19F2A38", Offset = "0x19F2A38", VA = "0x19F2A38")]
		public static string GetAchievementName(uint iAchievement)
		{
			return null;
		}

		[Token(Token = "0x6000630")]
		[Address(RVA = "0x19F2A6C", Offset = "0x19F2A6C", VA = "0x19F2A6C")]
		public static SteamAPICall_t RequestUserStats(CSteamID steamIDUser)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000631")]
		[Address(RVA = "0x19F2AF0", Offset = "0x19F2AF0", VA = "0x19F2AF0")]
		public static bool GetUserStat(CSteamID steamIDUser, string pchName, out int pData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000632")]
		[Address(RVA = "0x19F2C2C", Offset = "0x19F2C2C", VA = "0x19F2C2C")]
		public static bool GetUserStat(CSteamID steamIDUser, string pchName, out float pData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000633")]
		[Address(RVA = "0x19F2D68", Offset = "0x19F2D68", VA = "0x19F2D68")]
		public static bool GetUserAchievement(CSteamID steamIDUser, string pchName, out bool pbAchieved)
		{
			return default(bool);
		}

		[Token(Token = "0x6000634")]
		[Address(RVA = "0x19F2EA4", Offset = "0x19F2EA4", VA = "0x19F2EA4")]
		public static bool GetUserAchievementAndUnlockTime(CSteamID steamIDUser, string pchName, out bool pbAchieved, out uint punUnlockTime)
		{
			return default(bool);
		}

		[Token(Token = "0x6000635")]
		[Address(RVA = "0x19F2FF0", Offset = "0x19F2FF0", VA = "0x19F2FF0")]
		public static bool ResetAllStats(bool bAchievementsToo)
		{
			return default(bool);
		}

		[Token(Token = "0x6000636")]
		[Address(RVA = "0x19F301C", Offset = "0x19F301C", VA = "0x19F301C")]
		public static SteamAPICall_t FindOrCreateLeaderboard(string pchLeaderboardName, ELeaderboardSortMethod eLeaderboardSortMethod, ELeaderboardDisplayType eLeaderboardDisplayType)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000637")]
		[Address(RVA = "0x19F318C", Offset = "0x19F318C", VA = "0x19F318C")]
		public static SteamAPICall_t FindLeaderboard(string pchLeaderboardName)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000638")]
		[Address(RVA = "0x19F32EC", Offset = "0x19F32EC", VA = "0x19F32EC")]
		public static string GetLeaderboardName(SteamLeaderboard_t hSteamLeaderboard)
		{
			return null;
		}

		[Token(Token = "0x6000639")]
		[Address(RVA = "0x19F3320", Offset = "0x19F3320", VA = "0x19F3320")]
		public static int GetLeaderboardEntryCount(SteamLeaderboard_t hSteamLeaderboard)
		{
			return default(int);
		}

		[Token(Token = "0x600063A")]
		[Address(RVA = "0x19F334C", Offset = "0x19F334C", VA = "0x19F334C")]
		public static ELeaderboardSortMethod GetLeaderboardSortMethod(SteamLeaderboard_t hSteamLeaderboard)
		{
			return default(ELeaderboardSortMethod);
		}

		[Token(Token = "0x600063B")]
		[Address(RVA = "0x19F3378", Offset = "0x19F3378", VA = "0x19F3378")]
		public static ELeaderboardDisplayType GetLeaderboardDisplayType(SteamLeaderboard_t hSteamLeaderboard)
		{
			return default(ELeaderboardDisplayType);
		}

		[Token(Token = "0x600063C")]
		[Address(RVA = "0x19F33A4", Offset = "0x19F33A4", VA = "0x19F33A4")]
		public static SteamAPICall_t DownloadLeaderboardEntries(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600063D")]
		[Address(RVA = "0x19F3450", Offset = "0x19F3450", VA = "0x19F3450")]
		public static SteamAPICall_t DownloadLeaderboardEntriesForUsers(SteamLeaderboard_t hSteamLeaderboard, CSteamID[] prgUsers, int cUsers)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600063E")]
		[Address(RVA = "0x19F34EC", Offset = "0x19F34EC", VA = "0x19F34EC")]
		public static bool GetDownloadedLeaderboardEntry(SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, out LeaderboardEntry_t pLeaderboardEntry, int[] pDetails, int cDetailsMax)
		{
			return default(bool);
		}

		[Token(Token = "0x600063F")]
		[Address(RVA = "0x19F3548", Offset = "0x19F3548", VA = "0x19F3548")]
		public static SteamAPICall_t UploadLeaderboardScore(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, int[] pScoreDetails, int cScoreDetailsCount)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000640")]
		[Address(RVA = "0x19F35FC", Offset = "0x19F35FC", VA = "0x19F35FC")]
		public static SteamAPICall_t AttachLeaderboardUGC(SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000641")]
		[Address(RVA = "0x19F3690", Offset = "0x19F3690", VA = "0x19F3690")]
		public static SteamAPICall_t GetNumberOfCurrentPlayers()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000642")]
		[Address(RVA = "0x19F370C", Offset = "0x19F370C", VA = "0x19F370C")]
		public static SteamAPICall_t RequestGlobalAchievementPercentages()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000643")]
		[Address(RVA = "0x19F3788", Offset = "0x19F3788", VA = "0x19F3788")]
		public static int GetMostAchievedAchievementInfo(out string pchName, uint unNameBufLen, out float pflPercent, out bool pbAchieved)
		{
			return default(int);
		}

		[Token(Token = "0x6000644")]
		[Address(RVA = "0x19F387C", Offset = "0x19F387C", VA = "0x19F387C")]
		public static int GetNextMostAchievedAchievementInfo(int iIteratorPrevious, out string pchName, uint unNameBufLen, out float pflPercent, out bool pbAchieved)
		{
			return default(int);
		}

		[Token(Token = "0x6000645")]
		[Address(RVA = "0x19F3984", Offset = "0x19F3984", VA = "0x19F3984")]
		public static bool GetAchievementAchievedPercent(string pchName, out float pflPercent)
		{
			return default(bool);
		}

		[Token(Token = "0x6000646")]
		[Address(RVA = "0x19F3AB8", Offset = "0x19F3AB8", VA = "0x19F3AB8")]
		public static SteamAPICall_t RequestGlobalStats(int nHistoryDays)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000647")]
		[Address(RVA = "0x19F3B3C", Offset = "0x19F3B3C", VA = "0x19F3B3C")]
		public static bool GetGlobalStat(string pchStatName, out long pData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000648")]
		[Address(RVA = "0x19F3C70", Offset = "0x19F3C70", VA = "0x19F3C70")]
		public static bool GetGlobalStat(string pchStatName, out double pData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000649")]
		[Address(RVA = "0x19F3DA4", Offset = "0x19F3DA4", VA = "0x19F3DA4")]
		public static int GetGlobalStatHistory(string pchStatName, long[] pData, uint cubData)
		{
			return default(int);
		}

		[Token(Token = "0x600064A")]
		[Address(RVA = "0x19F3EE0", Offset = "0x19F3EE0", VA = "0x19F3EE0")]
		public static int GetGlobalStatHistory(string pchStatName, double[] pData, uint cubData)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000099")]
	public static class SteamUtils
	{
		[Token(Token = "0x600064B")]
		[Address(RVA = "0x19F401C", Offset = "0x19F401C", VA = "0x19F401C")]
		public static uint GetSecondsSinceAppActive()
		{
			return default(uint);
		}

		[Token(Token = "0x600064C")]
		[Address(RVA = "0x19F4038", Offset = "0x19F4038", VA = "0x19F4038")]
		public static uint GetSecondsSinceComputerActive()
		{
			return default(uint);
		}

		[Token(Token = "0x600064D")]
		[Address(RVA = "0x19F4054", Offset = "0x19F4054", VA = "0x19F4054")]
		public static EUniverse GetConnectedUniverse()
		{
			return default(EUniverse);
		}

		[Token(Token = "0x600064E")]
		[Address(RVA = "0x19F4070", Offset = "0x19F4070", VA = "0x19F4070")]
		public static uint GetServerRealTime()
		{
			return default(uint);
		}

		[Token(Token = "0x600064F")]
		[Address(RVA = "0x19F408C", Offset = "0x19F408C", VA = "0x19F408C")]
		public static string GetIPCountry()
		{
			return null;
		}

		[Token(Token = "0x6000650")]
		[Address(RVA = "0x19F40B0", Offset = "0x19F40B0", VA = "0x19F40B0")]
		public static bool GetImageSize(int iImage, out uint pnWidth, out uint pnHeight)
		{
			return default(bool);
		}

		[Token(Token = "0x6000651")]
		[Address(RVA = "0x19F40F4", Offset = "0x19F40F4", VA = "0x19F40F4")]
		public static bool GetImageRGBA(int iImage, byte[] pubDest, int nDestBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000652")]
		[Address(RVA = "0x19F4138", Offset = "0x19F4138", VA = "0x19F4138")]
		public static bool GetCSERIPPort(out uint unIP, out ushort usPort)
		{
			return default(bool);
		}

		[Token(Token = "0x6000653")]
		[Address(RVA = "0x19F416C", Offset = "0x19F416C", VA = "0x19F416C")]
		public static byte GetCurrentBatteryPower()
		{
			return default(byte);
		}

		[Token(Token = "0x6000654")]
		[Address(RVA = "0x19F4188", Offset = "0x19F4188", VA = "0x19F4188")]
		public static AppId_t GetAppID()
		{
			return default(AppId_t);
		}

		[Token(Token = "0x6000655")]
		[Address(RVA = "0x19F420C", Offset = "0x19F420C", VA = "0x19F420C")]
		public static void SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition)
		{
		}

		[Token(Token = "0x6000656")]
		[Address(RVA = "0x19F4238", Offset = "0x19F4238", VA = "0x19F4238")]
		public static bool IsAPICallCompleted(SteamAPICall_t hSteamAPICall, out bool pbFailed)
		{
			return default(bool);
		}

		[Token(Token = "0x6000657")]
		[Address(RVA = "0x19F426C", Offset = "0x19F426C", VA = "0x19F426C")]
		public static ESteamAPICallFailure GetAPICallFailureReason(SteamAPICall_t hSteamAPICall)
		{
			return default(ESteamAPICallFailure);
		}

		[Token(Token = "0x6000658")]
		[Address(RVA = "0x19F4298", Offset = "0x19F4298", VA = "0x19F4298")]
		public static bool GetAPICallResult(SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, out bool pbFailed)
		{
			return default(bool);
		}

		[Token(Token = "0x6000659")]
		[Address(RVA = "0x19F42F4", Offset = "0x19F42F4", VA = "0x19F42F4")]
		public static void RunFrame()
		{
		}

		[Token(Token = "0x600065A")]
		[Address(RVA = "0x19F4310", Offset = "0x19F4310", VA = "0x19F4310")]
		public static uint GetIPCCallCount()
		{
			return default(uint);
		}

		[Token(Token = "0x600065B")]
		[Address(RVA = "0x19F432C", Offset = "0x19F432C", VA = "0x19F432C")]
		public static void SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction)
		{
		}

		[Token(Token = "0x600065C")]
		[Address(RVA = "0x19F4358", Offset = "0x19F4358", VA = "0x19F4358")]
		public static bool IsOverlayEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x600065D")]
		[Address(RVA = "0x19F4374", Offset = "0x19F4374", VA = "0x19F4374")]
		public static bool BOverlayNeedsPresent()
		{
			return default(bool);
		}

		[Token(Token = "0x600065E")]
		[Address(RVA = "0x19F4390", Offset = "0x19F4390", VA = "0x19F4390")]
		public static SteamAPICall_t CheckFileSignature(string szFileName)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600065F")]
		[Address(RVA = "0x19F44F0", Offset = "0x19F44F0", VA = "0x19F44F0")]
		public static bool ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText)
		{
			return default(bool);
		}

		[Token(Token = "0x6000660")]
		[Address(RVA = "0x19F474C", Offset = "0x19F474C", VA = "0x19F474C")]
		public static uint GetEnteredGamepadTextLength()
		{
			return default(uint);
		}

		[Token(Token = "0x6000661")]
		[Address(RVA = "0x19F4768", Offset = "0x19F4768", VA = "0x19F4768")]
		public static bool GetEnteredGamepadTextInput(out string pchText, uint cchText)
		{
			return default(bool);
		}

		[Token(Token = "0x6000662")]
		[Address(RVA = "0x19F483C", Offset = "0x19F483C", VA = "0x19F483C")]
		public static string GetSteamUILanguage()
		{
			return null;
		}

		[Token(Token = "0x6000663")]
		[Address(RVA = "0x19F4860", Offset = "0x19F4860", VA = "0x19F4860")]
		public static bool IsSteamRunningInVR()
		{
			return default(bool);
		}

		[Token(Token = "0x6000664")]
		[Address(RVA = "0x19F487C", Offset = "0x19F487C", VA = "0x19F487C")]
		public static void SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset)
		{
		}
	}
	[Token(Token = "0x200009A")]
	public static class SteamVideo
	{
		[Token(Token = "0x6000665")]
		[Address(RVA = "0x19F48B0", Offset = "0x19F48B0", VA = "0x19F48B0")]
		public static void GetVideoURL(AppId_t unVideoAppID)
		{
		}

		[Token(Token = "0x6000666")]
		[Address(RVA = "0x19F48DC", Offset = "0x19F48DC", VA = "0x19F48DC")]
		public static bool IsBroadcasting(out int pnNumViewers)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200009B")]
	internal static class NativeMethods
	{
		[Token(Token = "0x40003AE")]
		internal const string NativeLibraryName = "CSteamworks";

		[PreserveSig]
		[Token(Token = "0x6000667")]
		[Address(RVA = "0x10F2938", Offset = "0x10F2938", VA = "0x10F2938")]
		public static extern void SteamAPI_Shutdown();

		[PreserveSig]
		[Token(Token = "0x6000668")]
		[Address(RVA = "0x10F29C8", Offset = "0x10F29C8", VA = "0x10F29C8")]
		public static extern bool SteamAPI_IsSteamRunning();

		[PreserveSig]
		[Token(Token = "0x6000669")]
		[Address(RVA = "0x10F2A60", Offset = "0x10F2A60", VA = "0x10F2A60")]
		public static extern bool SteamAPI_RestartAppIfNecessary(AppId_t unOwnAppID);

		[PreserveSig]
		[Token(Token = "0x600066A")]
		[Address(RVA = "0x10F2B08", Offset = "0x10F2B08", VA = "0x10F2B08")]
		public static extern void SteamAPI_WriteMiniDump(uint uStructuredExceptionCode, IntPtr pvExceptionInfo, uint uBuildID);

		[PreserveSig]
		[Token(Token = "0x600066B")]
		[Address(RVA = "0x10F2BC0", Offset = "0x10F2BC0", VA = "0x10F2BC0")]
		public static extern void SteamAPI_SetMiniDumpComment(InteropHelp.UTF8StringHandle pchMsg);

		[PreserveSig]
		[Token(Token = "0x600066C")]
		[Address(RVA = "0x10F1B04", Offset = "0x10F1B04", VA = "0x10F1B04")]
		public static extern IntPtr SteamClient();

		[PreserveSig]
		[Token(Token = "0x600066D")]
		[Address(RVA = "0x10F2C9C", Offset = "0x10F2C9C", VA = "0x10F2C9C")]
		public static extern bool SteamAPI_InitSafe();

		[PreserveSig]
		[Token(Token = "0x600066E")]
		[Address(RVA = "0x10F2D34", Offset = "0x10F2D34", VA = "0x10F2D34")]
		public static extern void SteamAPI_RunCallbacks();

		[PreserveSig]
		[Token(Token = "0x600066F")]
		[Address(RVA = "0x10F2DC4", Offset = "0x10F2DC4", VA = "0x10F2DC4")]
		public static extern void SteamAPI_RegisterCallback(IntPtr pCallback, int iCallback);

		[PreserveSig]
		[Token(Token = "0x6000670")]
		[Address(RVA = "0x10F2E74", Offset = "0x10F2E74", VA = "0x10F2E74")]
		public static extern void SteamAPI_UnregisterCallback(IntPtr pCallback);

		[PreserveSig]
		[Token(Token = "0x6000671")]
		[Address(RVA = "0x10F2F14", Offset = "0x10F2F14", VA = "0x10F2F14")]
		public static extern void SteamAPI_RegisterCallResult(IntPtr pCallback, ulong hAPICall);

		[PreserveSig]
		[Token(Token = "0x6000672")]
		[Address(RVA = "0x10F2FC4", Offset = "0x10F2FC4", VA = "0x10F2FC4")]
		public static extern void SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong hAPICall);

		[PreserveSig]
		[Token(Token = "0x6000673")]
		[Address(RVA = "0x10F3074", Offset = "0x10F3074", VA = "0x10F3074")]
		public static extern void Steam_RunCallbacks(HSteamPipe hSteamPipe, bool bGameServerCallbacks);

		[PreserveSig]
		[Token(Token = "0x6000674")]
		[Address(RVA = "0x10F3124", Offset = "0x10F3124", VA = "0x10F3124")]
		public static extern void Steam_RegisterInterfaceFuncs(IntPtr hModule);

		[PreserveSig]
		[Token(Token = "0x6000675")]
		[Address(RVA = "0x10F31C4", Offset = "0x10F31C4", VA = "0x10F31C4")]
		public static extern int Steam_GetHSteamUserCurrent();

		[PreserveSig]
		[Token(Token = "0x6000676")]
		[Address(RVA = "0x10F3254", Offset = "0x10F3254", VA = "0x10F3254")]
		public static extern int SteamAPI_GetSteamInstallPath();

		[PreserveSig]
		[Token(Token = "0x6000677")]
		[Address(RVA = "0x10F32E4", Offset = "0x10F32E4", VA = "0x10F32E4")]
		public static extern int SteamAPI_GetHSteamPipe();

		[PreserveSig]
		[Token(Token = "0x6000678")]
		[Address(RVA = "0x10F3374", Offset = "0x10F3374", VA = "0x10F3374")]
		public static extern void SteamAPI_SetTryCatchCallbacks(bool bTryCatchCallbacks);

		[PreserveSig]
		[Token(Token = "0x6000679")]
		[Address(RVA = "0x10F3414", Offset = "0x10F3414", VA = "0x10F3414")]
		public static extern int SteamAPI_GetHSteamUser();

		[PreserveSig]
		[Token(Token = "0x600067A")]
		[Address(RVA = "0x10F34A4", Offset = "0x10F34A4", VA = "0x10F34A4")]
		public static extern void SteamAPI_UseBreakpadCrashHandler(InteropHelp.UTF8StringHandle pchVersion, InteropHelp.UTF8StringHandle pchDate, InteropHelp.UTF8StringHandle pchTime, bool bFullMemoryDumps, IntPtr pvContext, IntPtr m_pfnPreMinidumpCallback);

		[PreserveSig]
		[Token(Token = "0x600067B")]
		[Address(RVA = "0x10F3644", Offset = "0x10F3644", VA = "0x10F3644")]
		public static extern IntPtr SteamUser();

		[PreserveSig]
		[Token(Token = "0x600067C")]
		[Address(RVA = "0x10F36D4", Offset = "0x10F36D4", VA = "0x10F36D4")]
		public static extern IntPtr SteamFriends();

		[PreserveSig]
		[Token(Token = "0x600067D")]
		[Address(RVA = "0x10F3764", Offset = "0x10F3764", VA = "0x10F3764")]
		public static extern IntPtr SteamUtils();

		[PreserveSig]
		[Token(Token = "0x600067E")]
		[Address(RVA = "0x10F37F4", Offset = "0x10F37F4", VA = "0x10F37F4")]
		public static extern IntPtr SteamMatchmaking();

		[PreserveSig]
		[Token(Token = "0x600067F")]
		[Address(RVA = "0x10F3884", Offset = "0x10F3884", VA = "0x10F3884")]
		public static extern IntPtr SteamUserStats();

		[PreserveSig]
		[Token(Token = "0x6000680")]
		[Address(RVA = "0x10F3914", Offset = "0x10F3914", VA = "0x10F3914")]
		public static extern IntPtr SteamApps();

		[PreserveSig]
		[Token(Token = "0x6000681")]
		[Address(RVA = "0x10F39A4", Offset = "0x10F39A4", VA = "0x10F39A4")]
		public static extern IntPtr SteamNetworking();

		[PreserveSig]
		[Token(Token = "0x6000682")]
		[Address(RVA = "0x10F3A34", Offset = "0x10F3A34", VA = "0x10F3A34")]
		public static extern IntPtr SteamMatchmakingServers();

		[PreserveSig]
		[Token(Token = "0x6000683")]
		[Address(RVA = "0x10F3AC4", Offset = "0x10F3AC4", VA = "0x10F3AC4")]
		public static extern IntPtr SteamRemoteStorage();

		[PreserveSig]
		[Token(Token = "0x6000684")]
		[Address(RVA = "0x10F3B54", Offset = "0x10F3B54", VA = "0x10F3B54")]
		public static extern IntPtr SteamScreenshots();

		[PreserveSig]
		[Token(Token = "0x6000685")]
		[Address(RVA = "0x10F3BE4", Offset = "0x10F3BE4", VA = "0x10F3BE4")]
		public static extern IntPtr SteamHTTP();

		[PreserveSig]
		[Token(Token = "0x6000686")]
		[Address(RVA = "0x10F3C74", Offset = "0x10F3C74", VA = "0x10F3C74")]
		public static extern IntPtr SteamUnifiedMessages();

		[PreserveSig]
		[Token(Token = "0x6000687")]
		[Address(RVA = "0x10F3D04", Offset = "0x10F3D04", VA = "0x10F3D04")]
		public static extern IntPtr SteamController();

		[PreserveSig]
		[Token(Token = "0x6000688")]
		[Address(RVA = "0x10F3D94", Offset = "0x10F3D94", VA = "0x10F3D94")]
		public static extern IntPtr SteamUGC();

		[PreserveSig]
		[Token(Token = "0x6000689")]
		[Address(RVA = "0x10F3E24", Offset = "0x10F3E24", VA = "0x10F3E24")]
		public static extern IntPtr SteamAppList();

		[PreserveSig]
		[Token(Token = "0x600068A")]
		[Address(RVA = "0x10F3EB4", Offset = "0x10F3EB4", VA = "0x10F3EB4")]
		public static extern IntPtr SteamMusic();

		[PreserveSig]
		[Token(Token = "0x600068B")]
		[Address(RVA = "0x10F3F44", Offset = "0x10F3F44", VA = "0x10F3F44")]
		public static extern IntPtr SteamMusicRemote();

		[PreserveSig]
		[Token(Token = "0x600068C")]
		[Address(RVA = "0x10F3FD4", Offset = "0x10F3FD4", VA = "0x10F3FD4")]
		public static extern IntPtr SteamHTMLSurface();

		[PreserveSig]
		[Token(Token = "0x600068D")]
		[Address(RVA = "0x10F4064", Offset = "0x10F4064", VA = "0x10F4064")]
		public static extern IntPtr SteamInventory();

		[PreserveSig]
		[Token(Token = "0x600068E")]
		[Address(RVA = "0x10F40F4", Offset = "0x10F40F4", VA = "0x10F40F4")]
		public static extern IntPtr SteamVideo();

		[PreserveSig]
		[Token(Token = "0x600068F")]
		[Address(RVA = "0x10E81BC", Offset = "0x10E81BC", VA = "0x10E81BC")]
		public static extern bool SteamGameServer_InitSafe(uint unIP, ushort usSteamPort, ushort usGamePort, ushort usQueryPort, EServerMode eServerMode, InteropHelp.UTF8StringHandle pchVersionString);

		[PreserveSig]
		[Token(Token = "0x6000690")]
		[Address(RVA = "0x10E8324", Offset = "0x10E8324", VA = "0x10E8324")]
		public static extern void SteamGameServer_Shutdown();

		[PreserveSig]
		[Token(Token = "0x6000691")]
		[Address(RVA = "0x10E83C0", Offset = "0x10E83C0", VA = "0x10E83C0")]
		public static extern void SteamGameServer_RunCallbacks();

		[PreserveSig]
		[Token(Token = "0x6000692")]
		[Address(RVA = "0x10E845C", Offset = "0x10E845C", VA = "0x10E845C")]
		public static extern bool SteamGameServer_BSecure();

		[PreserveSig]
		[Token(Token = "0x6000693")]
		[Address(RVA = "0x10E8528", Offset = "0x10E8528", VA = "0x10E8528")]
		public static extern ulong SteamGameServer_GetSteamID();

		[PreserveSig]
		[Token(Token = "0x6000694")]
		[Address(RVA = "0x10E85C4", Offset = "0x10E85C4", VA = "0x10E85C4")]
		public static extern int SteamGameServer_GetHSteamPipe();

		[PreserveSig]
		[Token(Token = "0x6000695")]
		[Address(RVA = "0x10E8668", Offset = "0x10E8668", VA = "0x10E8668")]
		public static extern int SteamGameServer_GetHSteamUser();

		[PreserveSig]
		[Token(Token = "0x6000696")]
		[Address(RVA = "0x10F1BC8", Offset = "0x10F1BC8", VA = "0x10F1BC8")]
		public static extern IntPtr SteamClientGameServer();

		[PreserveSig]
		[Token(Token = "0x6000697")]
		[Address(RVA = "0x10F4184", Offset = "0x10F4184", VA = "0x10F4184")]
		public static extern IntPtr SteamGameServer();

		[PreserveSig]
		[Token(Token = "0x6000698")]
		[Address(RVA = "0x10F4214", Offset = "0x10F4214", VA = "0x10F4214")]
		public static extern IntPtr SteamGameServerUtils();

		[PreserveSig]
		[Token(Token = "0x6000699")]
		[Address(RVA = "0x10F42A4", Offset = "0x10F42A4", VA = "0x10F42A4")]
		public static extern IntPtr SteamGameServerNetworking();

		[PreserveSig]
		[Token(Token = "0x600069A")]
		[Address(RVA = "0x10F4334", Offset = "0x10F4334", VA = "0x10F4334")]
		public static extern IntPtr SteamGameServerStats();

		[PreserveSig]
		[Token(Token = "0x600069B")]
		[Address(RVA = "0x10F43C4", Offset = "0x10F43C4", VA = "0x10F43C4")]
		public static extern IntPtr SteamGameServerHTTP();

		[PreserveSig]
		[Token(Token = "0x600069C")]
		[Address(RVA = "0x10F4454", Offset = "0x10F4454", VA = "0x10F4454")]
		public static extern IntPtr SteamGameServerInventory();

		[PreserveSig]
		[Token(Token = "0x600069D")]
		[Address(RVA = "0x10F44E4", Offset = "0x10F44E4", VA = "0x10F44E4")]
		public static extern IntPtr SteamGameServerUGC();

		[PreserveSig]
		[Token(Token = "0x600069E")]
		[Address(RVA = "0x10F4574", Offset = "0x10F4574", VA = "0x10F4574")]
		public static extern bool BDecryptTicket([In][Out] byte[] rgubTicketEncrypted, uint cubTicketEncrypted, [In][Out] byte[] rgubTicketDecrypted, ref uint pcubTicketDecrypted, byte[] rgubKey, int cubKey);

		[PreserveSig]
		[Token(Token = "0x600069F")]
		[Address(RVA = "0x10F4674", Offset = "0x10F4674", VA = "0x10F4674")]
		public static extern bool BIsTicketForApp([In][Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted, AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x60006A0")]
		[Address(RVA = "0x10F473C", Offset = "0x10F473C", VA = "0x10F473C")]
		public static extern uint GetTicketIssueTime([In][Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted);

		[PreserveSig]
		[Token(Token = "0x60006A1")]
		[Address(RVA = "0x10F47F4", Offset = "0x10F47F4", VA = "0x10F47F4")]
		public static extern void GetTicketSteamID([In][Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted, out CSteamID psteamID);

		[PreserveSig]
		[Token(Token = "0x60006A2")]
		[Address(RVA = "0x10F48B4", Offset = "0x10F48B4", VA = "0x10F48B4")]
		public static extern uint GetTicketAppID([In][Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted);

		[PreserveSig]
		[Token(Token = "0x60006A3")]
		[Address(RVA = "0x10F496C", Offset = "0x10F496C", VA = "0x10F496C")]
		public static extern bool BUserOwnsAppInTicket([In][Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted, AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x60006A4")]
		[Address(RVA = "0x10F4A34", Offset = "0x10F4A34", VA = "0x10F4A34")]
		public static extern bool BUserIsVacBanned([In][Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted);

		[PreserveSig]
		[Token(Token = "0x60006A5")]
		[Address(RVA = "0x10F4AF4", Offset = "0x10F4AF4", VA = "0x10F4AF4")]
		public static extern IntPtr GetUserVariableData([In][Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted, out uint pcubUserData);

		[PreserveSig]
		[Token(Token = "0x60006A6")]
		[Address(RVA = "0x10F4BB4", Offset = "0x10F4BB4", VA = "0x10F4BB4")]
		public static extern uint ISteamAppList_GetNumInstalledApps();

		[PreserveSig]
		[Token(Token = "0x60006A7")]
		[Address(RVA = "0x10F4C44", Offset = "0x10F4C44", VA = "0x10F4C44")]
		public static extern uint ISteamAppList_GetInstalledApps([In][Out] AppId_t[] pvecAppID, uint unMaxAppIDs);

		[PreserveSig]
		[Token(Token = "0x60006A8")]
		[Address(RVA = "0x10F4CFC", Offset = "0x10F4CFC", VA = "0x10F4CFC")]
		public static extern int ISteamAppList_GetAppName(AppId_t nAppID, IntPtr pchName, int cchNameMax);

		[PreserveSig]
		[Token(Token = "0x60006A9")]
		[Address(RVA = "0x10F4DB4", Offset = "0x10F4DB4", VA = "0x10F4DB4")]
		public static extern int ISteamAppList_GetAppInstallDir(AppId_t nAppID, IntPtr pchDirectory, int cchNameMax);

		[PreserveSig]
		[Token(Token = "0x60006AA")]
		[Address(RVA = "0x10F4E6C", Offset = "0x10F4E6C", VA = "0x10F4E6C")]
		public static extern int ISteamAppList_GetAppBuildId(AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x60006AB")]
		[Address(RVA = "0x10F4F0C", Offset = "0x10F4F0C", VA = "0x10F4F0C")]
		public static extern bool ISteamApps_BIsSubscribed();

		[PreserveSig]
		[Token(Token = "0x60006AC")]
		[Address(RVA = "0x10F4FA4", Offset = "0x10F4FA4", VA = "0x10F4FA4")]
		public static extern bool ISteamApps_BIsLowViolence();

		[PreserveSig]
		[Token(Token = "0x60006AD")]
		[Address(RVA = "0x10F503C", Offset = "0x10F503C", VA = "0x10F503C")]
		public static extern bool ISteamApps_BIsCybercafe();

		[PreserveSig]
		[Token(Token = "0x60006AE")]
		[Address(RVA = "0x10F50D4", Offset = "0x10F50D4", VA = "0x10F50D4")]
		public static extern bool ISteamApps_BIsVACBanned();

		[PreserveSig]
		[Token(Token = "0x60006AF")]
		[Address(RVA = "0x10F516C", Offset = "0x10F516C", VA = "0x10F516C")]
		public static extern IntPtr ISteamApps_GetCurrentGameLanguage();

		[PreserveSig]
		[Token(Token = "0x60006B0")]
		[Address(RVA = "0x10F51FC", Offset = "0x10F51FC", VA = "0x10F51FC")]
		public static extern IntPtr ISteamApps_GetAvailableGameLanguages();

		[PreserveSig]
		[Token(Token = "0x60006B1")]
		[Address(RVA = "0x10F528C", Offset = "0x10F528C", VA = "0x10F528C")]
		public static extern bool ISteamApps_BIsSubscribedApp(AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x60006B2")]
		[Address(RVA = "0x10F5334", Offset = "0x10F5334", VA = "0x10F5334")]
		public static extern bool ISteamApps_BIsDlcInstalled(AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x60006B3")]
		[Address(RVA = "0x10F53DC", Offset = "0x10F53DC", VA = "0x10F53DC")]
		public static extern uint ISteamApps_GetEarliestPurchaseUnixTime(AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x60006B4")]
		[Address(RVA = "0x10F547C", Offset = "0x10F547C", VA = "0x10F547C")]
		public static extern bool ISteamApps_BIsSubscribedFromFreeWeekend();

		[PreserveSig]
		[Token(Token = "0x60006B5")]
		[Address(RVA = "0x10F5514", Offset = "0x10F5514", VA = "0x10F5514")]
		public static extern int ISteamApps_GetDLCCount();

		[PreserveSig]
		[Token(Token = "0x60006B6")]
		[Address(RVA = "0x10F55A4", Offset = "0x10F55A4", VA = "0x10F55A4")]
		public static extern bool ISteamApps_BGetDLCDataByIndex(int iDLC, out AppId_t pAppID, out bool pbAvailable, IntPtr pchName, int cchNameBufferSize);

		[PreserveSig]
		[Token(Token = "0x60006B7")]
		[Address(RVA = "0x10F5690", Offset = "0x10F5690", VA = "0x10F5690")]
		public static extern void ISteamApps_InstallDLC(AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x60006B8")]
		[Address(RVA = "0x10F5730", Offset = "0x10F5730", VA = "0x10F5730")]
		public static extern void ISteamApps_UninstallDLC(AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x60006B9")]
		[Address(RVA = "0x10F57D0", Offset = "0x10F57D0", VA = "0x10F57D0")]
		public static extern void ISteamApps_RequestAppProofOfPurchaseKey(AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x60006BA")]
		[Address(RVA = "0x10F5870", Offset = "0x10F5870", VA = "0x10F5870")]
		public static extern bool ISteamApps_GetCurrentBetaName(IntPtr pchName, int cchNameBufferSize);

		[PreserveSig]
		[Token(Token = "0x60006BB")]
		[Address(RVA = "0x10F5928", Offset = "0x10F5928", VA = "0x10F5928")]
		public static extern bool ISteamApps_MarkContentCorrupt(bool bMissingFilesOnly);

		[PreserveSig]
		[Token(Token = "0x60006BC")]
		[Address(RVA = "0x10F59D0", Offset = "0x10F59D0", VA = "0x10F59D0")]
		public static extern uint ISteamApps_GetInstalledDepots(AppId_t appID, [In][Out] DepotId_t[] pvecDepots, uint cMaxDepots);

		[PreserveSig]
		[Token(Token = "0x60006BD")]
		[Address(RVA = "0x10F5A90", Offset = "0x10F5A90", VA = "0x10F5A90")]
		public static extern uint ISteamApps_GetAppInstallDir(AppId_t appID, IntPtr pchFolder, uint cchFolderBufferSize);

		[PreserveSig]
		[Token(Token = "0x60006BE")]
		[Address(RVA = "0x10F5B48", Offset = "0x10F5B48", VA = "0x10F5B48")]
		public static extern bool ISteamApps_BIsAppInstalled(AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x60006BF")]
		[Address(RVA = "0x10F5BF0", Offset = "0x10F5BF0", VA = "0x10F5BF0")]
		public static extern ulong ISteamApps_GetAppOwner();

		[PreserveSig]
		[Token(Token = "0x60006C0")]
		[Address(RVA = "0x10F5C80", Offset = "0x10F5C80", VA = "0x10F5C80")]
		public static extern IntPtr ISteamApps_GetLaunchQueryParam(InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x60006C1")]
		[Address(RVA = "0x10F5D64", Offset = "0x10F5D64", VA = "0x10F5D64")]
		public static extern bool ISteamApps_GetDlcDownloadProgress(AppId_t nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal);

		[PreserveSig]
		[Token(Token = "0x60006C2")]
		[Address(RVA = "0x10F5E24", Offset = "0x10F5E24", VA = "0x10F5E24")]
		public static extern int ISteamApps_GetAppBuildId();

		[PreserveSig]
		[Token(Token = "0x60006C3")]
		[Address(RVA = "0x10F5EB4", Offset = "0x10F5EB4", VA = "0x10F5EB4")]
		public static extern int ISteamClient_CreateSteamPipe();

		[PreserveSig]
		[Token(Token = "0x60006C4")]
		[Address(RVA = "0x10F5F44", Offset = "0x10F5F44", VA = "0x10F5F44")]
		public static extern bool ISteamClient_BReleaseSteamPipe(HSteamPipe hSteamPipe);

		[PreserveSig]
		[Token(Token = "0x60006C5")]
		[Address(RVA = "0x10F5FEC", Offset = "0x10F5FEC", VA = "0x10F5FEC")]
		public static extern int ISteamClient_ConnectToGlobalUser(HSteamPipe hSteamPipe);

		[PreserveSig]
		[Token(Token = "0x60006C6")]
		[Address(RVA = "0x10F608C", Offset = "0x10F608C", VA = "0x10F608C")]
		public static extern int ISteamClient_CreateLocalUser(out HSteamPipe phSteamPipe, EAccountType eAccountType);

		[PreserveSig]
		[Token(Token = "0x60006C7")]
		[Address(RVA = "0x10F613C", Offset = "0x10F613C", VA = "0x10F613C")]
		public static extern void ISteamClient_ReleaseUser(HSteamPipe hSteamPipe, HSteamUser hUser);

		[PreserveSig]
		[Token(Token = "0x60006C8")]
		[Address(RVA = "0x10F61EC", Offset = "0x10F61EC", VA = "0x10F61EC")]
		public static extern IntPtr ISteamClient_GetISteamUser(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006C9")]
		[Address(RVA = "0x10F62E8", Offset = "0x10F62E8", VA = "0x10F62E8")]
		public static extern IntPtr ISteamClient_GetISteamGameServer(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006CA")]
		[Address(RVA = "0x10F63E4", Offset = "0x10F63E4", VA = "0x10F63E4")]
		public static extern void ISteamClient_SetLocalIPBinding(uint unIP, ushort usPort);

		[PreserveSig]
		[Token(Token = "0x60006CB")]
		[Address(RVA = "0x10F6494", Offset = "0x10F6494", VA = "0x10F6494")]
		public static extern IntPtr ISteamClient_GetISteamFriends(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006CC")]
		[Address(RVA = "0x10F6590", Offset = "0x10F6590", VA = "0x10F6590")]
		public static extern IntPtr ISteamClient_GetISteamUtils(HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006CD")]
		[Address(RVA = "0x10F6684", Offset = "0x10F6684", VA = "0x10F6684")]
		public static extern IntPtr ISteamClient_GetISteamMatchmaking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006CE")]
		[Address(RVA = "0x10F6780", Offset = "0x10F6780", VA = "0x10F6780")]
		public static extern IntPtr ISteamClient_GetISteamMatchmakingServers(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006CF")]
		[Address(RVA = "0x10F687C", Offset = "0x10F687C", VA = "0x10F687C")]
		public static extern IntPtr ISteamClient_GetISteamGenericInterface(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006D0")]
		[Address(RVA = "0x10F6978", Offset = "0x10F6978", VA = "0x10F6978")]
		public static extern IntPtr ISteamClient_GetISteamUserStats(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006D1")]
		[Address(RVA = "0x10F6A74", Offset = "0x10F6A74", VA = "0x10F6A74")]
		public static extern IntPtr ISteamClient_GetISteamGameServerStats(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006D2")]
		[Address(RVA = "0x10F6B70", Offset = "0x10F6B70", VA = "0x10F6B70")]
		public static extern IntPtr ISteamClient_GetISteamApps(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006D3")]
		[Address(RVA = "0x10F6C6C", Offset = "0x10F6C6C", VA = "0x10F6C6C")]
		public static extern IntPtr ISteamClient_GetISteamNetworking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006D4")]
		[Address(RVA = "0x10F6D68", Offset = "0x10F6D68", VA = "0x10F6D68")]
		public static extern IntPtr ISteamClient_GetISteamRemoteStorage(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006D5")]
		[Address(RVA = "0x10F6E64", Offset = "0x10F6E64", VA = "0x10F6E64")]
		public static extern IntPtr ISteamClient_GetISteamScreenshots(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006D6")]
		[Address(RVA = "0x10F6F60", Offset = "0x10F6F60", VA = "0x10F6F60")]
		public static extern void ISteamClient_RunFrame();

		[PreserveSig]
		[Token(Token = "0x60006D7")]
		[Address(RVA = "0x10F6FF0", Offset = "0x10F6FF0", VA = "0x10F6FF0")]
		public static extern uint ISteamClient_GetIPCCallCount();

		[PreserveSig]
		[Token(Token = "0x60006D8")]
		[Address(RVA = "0x10F7080", Offset = "0x10F7080", VA = "0x10F7080")]
		public static extern void ISteamClient_SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction);

		[PreserveSig]
		[Token(Token = "0x60006D9")]
		[Address(RVA = "0x10F7124", Offset = "0x10F7124", VA = "0x10F7124")]
		public static extern bool ISteamClient_BShutdownIfAllPipesClosed();

		[PreserveSig]
		[Token(Token = "0x60006DA")]
		[Address(RVA = "0x10F71BC", Offset = "0x10F71BC", VA = "0x10F71BC")]
		public static extern IntPtr ISteamClient_GetISteamHTTP(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006DB")]
		[Address(RVA = "0x10F72B8", Offset = "0x10F72B8", VA = "0x10F72B8")]
		public static extern IntPtr ISteamClient_GetISteamUnifiedMessages(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006DC")]
		[Address(RVA = "0x10F73B4", Offset = "0x10F73B4", VA = "0x10F73B4")]
		public static extern IntPtr ISteamClient_GetISteamController(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006DD")]
		[Address(RVA = "0x10F74B0", Offset = "0x10F74B0", VA = "0x10F74B0")]
		public static extern IntPtr ISteamClient_GetISteamUGC(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006DE")]
		[Address(RVA = "0x10F75AC", Offset = "0x10F75AC", VA = "0x10F75AC")]
		public static extern IntPtr ISteamClient_GetISteamAppList(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006DF")]
		[Address(RVA = "0x10F76A8", Offset = "0x10F76A8", VA = "0x10F76A8")]
		public static extern IntPtr ISteamClient_GetISteamMusic(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006E0")]
		[Address(RVA = "0x10F77A4", Offset = "0x10F77A4", VA = "0x10F77A4")]
		public static extern IntPtr ISteamClient_GetISteamMusicRemote(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006E1")]
		[Address(RVA = "0x10F78A0", Offset = "0x10F78A0", VA = "0x10F78A0")]
		public static extern IntPtr ISteamClient_GetISteamHTMLSurface(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006E2")]
		[Address(RVA = "0x10F799C", Offset = "0x10F799C", VA = "0x10F799C")]
		public static extern void ISteamClient_Set_SteamAPI_CPostAPIResultInProcess(SteamAPI_PostAPIResultInProcess_t func);

		[PreserveSig]
		[Token(Token = "0x60006E3")]
		[Address(RVA = "0x10F7A40", Offset = "0x10F7A40", VA = "0x10F7A40")]
		public static extern void ISteamClient_Remove_SteamAPI_CPostAPIResultInProcess(SteamAPI_PostAPIResultInProcess_t func);

		[PreserveSig]
		[Token(Token = "0x60006E4")]
		[Address(RVA = "0x10F7AE4", Offset = "0x10F7AE4", VA = "0x10F7AE4")]
		public static extern void ISteamClient_Set_SteamAPI_CCheckCallbackRegisteredInProcess(SteamAPI_CheckCallbackRegistered_t func);

		[PreserveSig]
		[Token(Token = "0x60006E5")]
		[Address(RVA = "0x10F7B88", Offset = "0x10F7B88", VA = "0x10F7B88")]
		public static extern IntPtr ISteamClient_GetISteamInventory(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006E6")]
		[Address(RVA = "0x10F7C84", Offset = "0x10F7C84", VA = "0x10F7C84")]
		public static extern IntPtr ISteamClient_GetISteamVideo(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60006E7")]
		[Address(RVA = "0x10F7D80", Offset = "0x10F7D80", VA = "0x10F7D80")]
		public static extern bool ISteamController_Init(InteropHelp.UTF8StringHandle pchAbsolutePathToControllerConfigVDF);

		[PreserveSig]
		[Token(Token = "0x60006E8")]
		[Address(RVA = "0x10F7E68", Offset = "0x10F7E68", VA = "0x10F7E68")]
		public static extern bool ISteamController_Shutdown();

		[PreserveSig]
		[Token(Token = "0x60006E9")]
		[Address(RVA = "0x10F7F00", Offset = "0x10F7F00", VA = "0x10F7F00")]
		public static extern void ISteamController_RunFrame();

		[PreserveSig]
		[Token(Token = "0x60006EA")]
		[Address(RVA = "0x10F7F90", Offset = "0x10F7F90", VA = "0x10F7F90")]
		public static extern bool ISteamController_GetControllerState(uint unControllerIndex, out SteamControllerState_t pState);

		[PreserveSig]
		[Token(Token = "0x60006EB")]
		[Address(RVA = "0x10F8048", Offset = "0x10F8048", VA = "0x10F8048")]
		public static extern void ISteamController_TriggerHapticPulse(uint unControllerIndex, ESteamControllerPad eTargetPad, ushort usDurationMicroSec);

		[PreserveSig]
		[Token(Token = "0x60006EC")]
		[Address(RVA = "0x10F8100", Offset = "0x10F8100", VA = "0x10F8100")]
		public static extern void ISteamController_SetOverrideMode(InteropHelp.UTF8StringHandle pchMode);

		[PreserveSig]
		[Token(Token = "0x60006ED")]
		[Address(RVA = "0x10F81DC", Offset = "0x10F81DC", VA = "0x10F81DC")]
		public static extern IntPtr ISteamFriends_GetPersonaName();

		[PreserveSig]
		[Token(Token = "0x60006EE")]
		[Address(RVA = "0x10F826C", Offset = "0x10F826C", VA = "0x10F826C")]
		public static extern ulong ISteamFriends_SetPersonaName(InteropHelp.UTF8StringHandle pchPersonaName);

		[PreserveSig]
		[Token(Token = "0x60006EF")]
		[Address(RVA = "0x10F8350", Offset = "0x10F8350", VA = "0x10F8350")]
		public static extern EPersonaState ISteamFriends_GetPersonaState();

		[PreserveSig]
		[Token(Token = "0x60006F0")]
		[Address(RVA = "0x10F83E0", Offset = "0x10F83E0", VA = "0x10F83E0")]
		public static extern int ISteamFriends_GetFriendCount(EFriendFlags iFriendFlags);

		[PreserveSig]
		[Token(Token = "0x60006F1")]
		[Address(RVA = "0x10F8480", Offset = "0x10F8480", VA = "0x10F8480")]
		public static extern ulong ISteamFriends_GetFriendByIndex(int iFriend, EFriendFlags iFriendFlags);

		[PreserveSig]
		[Token(Token = "0x60006F2")]
		[Address(RVA = "0x10F8530", Offset = "0x10F8530", VA = "0x10F8530")]
		public static extern EFriendRelationship ISteamFriends_GetFriendRelationship(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x60006F3")]
		[Address(RVA = "0x10F85D0", Offset = "0x10F85D0", VA = "0x10F85D0")]
		public static extern EPersonaState ISteamFriends_GetFriendPersonaState(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x60006F4")]
		[Address(RVA = "0x10F8670", Offset = "0x10F8670", VA = "0x10F8670")]
		public static extern IntPtr ISteamFriends_GetFriendPersonaName(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x60006F5")]
		[Address(RVA = "0x10F8710", Offset = "0x10F8710", VA = "0x10F8710")]
		public static extern bool ISteamFriends_GetFriendGamePlayed(CSteamID steamIDFriend, out FriendGameInfo_t pFriendGameInfo);

		[PreserveSig]
		[Token(Token = "0x60006F6")]
		[Address(RVA = "0x10F87C8", Offset = "0x10F87C8", VA = "0x10F87C8")]
		public static extern IntPtr ISteamFriends_GetFriendPersonaNameHistory(CSteamID steamIDFriend, int iPersonaName);

		[PreserveSig]
		[Token(Token = "0x60006F7")]
		[Address(RVA = "0x10F8878", Offset = "0x10F8878", VA = "0x10F8878")]
		public static extern int ISteamFriends_GetFriendSteamLevel(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x60006F8")]
		[Address(RVA = "0x10F8918", Offset = "0x10F8918", VA = "0x10F8918")]
		public static extern IntPtr ISteamFriends_GetPlayerNickname(CSteamID steamIDPlayer);

		[PreserveSig]
		[Token(Token = "0x60006F9")]
		[Address(RVA = "0x10F89B8", Offset = "0x10F89B8", VA = "0x10F89B8")]
		public static extern int ISteamFriends_GetFriendsGroupCount();

		[PreserveSig]
		[Token(Token = "0x60006FA")]
		[Address(RVA = "0x10F8A48", Offset = "0x10F8A48", VA = "0x10F8A48")]
		public static extern short ISteamFriends_GetFriendsGroupIDByIndex(int iFG);

		[PreserveSig]
		[Token(Token = "0x60006FB")]
		[Address(RVA = "0x10F8AE8", Offset = "0x10F8AE8", VA = "0x10F8AE8")]
		public static extern IntPtr ISteamFriends_GetFriendsGroupName(FriendsGroupID_t friendsGroupID);

		[PreserveSig]
		[Token(Token = "0x60006FC")]
		[Address(RVA = "0x10F8B88", Offset = "0x10F8B88", VA = "0x10F8B88")]
		public static extern int ISteamFriends_GetFriendsGroupMembersCount(FriendsGroupID_t friendsGroupID);

		[PreserveSig]
		[Token(Token = "0x60006FD")]
		[Address(RVA = "0x10F8C28", Offset = "0x10F8C28", VA = "0x10F8C28")]
		public static extern void ISteamFriends_GetFriendsGroupMembersList(FriendsGroupID_t friendsGroupID, [In][Out] CSteamID[] pOutSteamIDMembers, int nMembersCount);

		[PreserveSig]
		[Token(Token = "0x60006FE")]
		[Address(RVA = "0x10F8CE8", Offset = "0x10F8CE8", VA = "0x10F8CE8")]
		public static extern bool ISteamFriends_HasFriend(CSteamID steamIDFriend, EFriendFlags iFriendFlags);

		[PreserveSig]
		[Token(Token = "0x60006FF")]
		[Address(RVA = "0x10F8DA0", Offset = "0x10F8DA0", VA = "0x10F8DA0")]
		public static extern int ISteamFriends_GetClanCount();

		[PreserveSig]
		[Token(Token = "0x6000700")]
		[Address(RVA = "0x10F8E30", Offset = "0x10F8E30", VA = "0x10F8E30")]
		public static extern ulong ISteamFriends_GetClanByIndex(int iClan);

		[PreserveSig]
		[Token(Token = "0x6000701")]
		[Address(RVA = "0x10F8ED0", Offset = "0x10F8ED0", VA = "0x10F8ED0")]
		public static extern IntPtr ISteamFriends_GetClanName(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6000702")]
		[Address(RVA = "0x10F8F70", Offset = "0x10F8F70", VA = "0x10F8F70")]
		public static extern IntPtr ISteamFriends_GetClanTag(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6000703")]
		[Address(RVA = "0x10F9010", Offset = "0x10F9010", VA = "0x10F9010")]
		public static extern bool ISteamFriends_GetClanActivityCounts(CSteamID steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting);

		[PreserveSig]
		[Token(Token = "0x6000704")]
		[Address(RVA = "0x10F90E0", Offset = "0x10F90E0", VA = "0x10F90E0")]
		public static extern ulong ISteamFriends_DownloadClanActivityCounts([In][Out] CSteamID[] psteamIDClans, int cClansToRequest);

		[PreserveSig]
		[Token(Token = "0x6000705")]
		[Address(RVA = "0x10F9198", Offset = "0x10F9198", VA = "0x10F9198")]
		public static extern int ISteamFriends_GetFriendCountFromSource(CSteamID steamIDSource);

		[PreserveSig]
		[Token(Token = "0x6000706")]
		[Address(RVA = "0x10F9238", Offset = "0x10F9238", VA = "0x10F9238")]
		public static extern ulong ISteamFriends_GetFriendFromSourceByIndex(CSteamID steamIDSource, int iFriend);

		[PreserveSig]
		[Token(Token = "0x6000707")]
		[Address(RVA = "0x10F92E8", Offset = "0x10F92E8", VA = "0x10F92E8")]
		public static extern bool ISteamFriends_IsUserInSource(CSteamID steamIDUser, CSteamID steamIDSource);

		[PreserveSig]
		[Token(Token = "0x6000708")]
		[Address(RVA = "0x10F93A0", Offset = "0x10F93A0", VA = "0x10F93A0")]
		public static extern void ISteamFriends_SetInGameVoiceSpeaking(CSteamID steamIDUser, bool bSpeaking);

		[PreserveSig]
		[Token(Token = "0x6000709")]
		[Address(RVA = "0x10F9450", Offset = "0x10F9450", VA = "0x10F9450")]
		public static extern void ISteamFriends_ActivateGameOverlay(InteropHelp.UTF8StringHandle pchDialog);

		[PreserveSig]
		[Token(Token = "0x600070A")]
		[Address(RVA = "0x10F952C", Offset = "0x10F952C", VA = "0x10F952C")]
		public static extern void ISteamFriends_ActivateGameOverlayToUser(InteropHelp.UTF8StringHandle pchDialog, CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x600070B")]
		[Address(RVA = "0x10F9618", Offset = "0x10F9618", VA = "0x10F9618")]
		public static extern void ISteamFriends_ActivateGameOverlayToWebPage(InteropHelp.UTF8StringHandle pchURL);

		[PreserveSig]
		[Token(Token = "0x600070C")]
		[Address(RVA = "0x10F96F4", Offset = "0x10F96F4", VA = "0x10F96F4")]
		public static extern void ISteamFriends_ActivateGameOverlayToStore(AppId_t nAppID, EOverlayToStoreFlag eFlag);

		[PreserveSig]
		[Token(Token = "0x600070D")]
		[Address(RVA = "0x10F97A4", Offset = "0x10F97A4", VA = "0x10F97A4")]
		public static extern void ISteamFriends_SetPlayedWith(CSteamID steamIDUserPlayedWith);

		[PreserveSig]
		[Token(Token = "0x600070E")]
		[Address(RVA = "0x10F9844", Offset = "0x10F9844", VA = "0x10F9844")]
		public static extern void ISteamFriends_ActivateGameOverlayInviteDialog(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x600070F")]
		[Address(RVA = "0x10F98E4", Offset = "0x10F98E4", VA = "0x10F98E4")]
		public static extern int ISteamFriends_GetSmallFriendAvatar(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6000710")]
		[Address(RVA = "0x10F9984", Offset = "0x10F9984", VA = "0x10F9984")]
		public static extern int ISteamFriends_GetMediumFriendAvatar(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6000711")]
		[Address(RVA = "0x10F9A24", Offset = "0x10F9A24", VA = "0x10F9A24")]
		public static extern int ISteamFriends_GetLargeFriendAvatar(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6000712")]
		[Address(RVA = "0x10F9AC4", Offset = "0x10F9AC4", VA = "0x10F9AC4")]
		public static extern bool ISteamFriends_RequestUserInformation(CSteamID steamIDUser, bool bRequireNameOnly);

		[PreserveSig]
		[Token(Token = "0x6000713")]
		[Address(RVA = "0x10F9B7C", Offset = "0x10F9B7C", VA = "0x10F9B7C")]
		public static extern ulong ISteamFriends_RequestClanOfficerList(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6000714")]
		[Address(RVA = "0x10F9C1C", Offset = "0x10F9C1C", VA = "0x10F9C1C")]
		public static extern ulong ISteamFriends_GetClanOwner(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6000715")]
		[Address(RVA = "0x10F9CBC", Offset = "0x10F9CBC", VA = "0x10F9CBC")]
		public static extern int ISteamFriends_GetClanOfficerCount(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6000716")]
		[Address(RVA = "0x10F9D5C", Offset = "0x10F9D5C", VA = "0x10F9D5C")]
		public static extern ulong ISteamFriends_GetClanOfficerByIndex(CSteamID steamIDClan, int iOfficer);

		[PreserveSig]
		[Token(Token = "0x6000717")]
		[Address(RVA = "0x10F9E0C", Offset = "0x10F9E0C", VA = "0x10F9E0C")]
		public static extern uint ISteamFriends_GetUserRestrictions();

		[PreserveSig]
		[Token(Token = "0x6000718")]
		[Address(RVA = "0x10F9E9C", Offset = "0x10F9E9C", VA = "0x10F9E9C")]
		public static extern bool ISteamFriends_SetRichPresence(InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x6000719")]
		[Address(RVA = "0x10F9FD0", Offset = "0x10F9FD0", VA = "0x10F9FD0")]
		public static extern void ISteamFriends_ClearRichPresence();

		[PreserveSig]
		[Token(Token = "0x600071A")]
		[Address(RVA = "0x10FA060", Offset = "0x10FA060", VA = "0x10FA060")]
		public static extern IntPtr ISteamFriends_GetFriendRichPresence(CSteamID steamIDFriend, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x600071B")]
		[Address(RVA = "0x10FA154", Offset = "0x10FA154", VA = "0x10FA154")]
		public static extern int ISteamFriends_GetFriendRichPresenceKeyCount(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x600071C")]
		[Address(RVA = "0x10FA1F4", Offset = "0x10FA1F4", VA = "0x10FA1F4")]
		public static extern IntPtr ISteamFriends_GetFriendRichPresenceKeyByIndex(CSteamID steamIDFriend, int iKey);

		[PreserveSig]
		[Token(Token = "0x600071D")]
		[Address(RVA = "0x10FA2A4", Offset = "0x10FA2A4", VA = "0x10FA2A4")]
		public static extern void ISteamFriends_RequestFriendRichPresence(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x600071E")]
		[Address(RVA = "0x10FA344", Offset = "0x10FA344", VA = "0x10FA344")]
		public static extern bool ISteamFriends_InviteUserToGame(CSteamID steamIDFriend, InteropHelp.UTF8StringHandle pchConnectString);

		[PreserveSig]
		[Token(Token = "0x600071F")]
		[Address(RVA = "0x10FA43C", Offset = "0x10FA43C", VA = "0x10FA43C")]
		public static extern int ISteamFriends_GetCoplayFriendCount();

		[PreserveSig]
		[Token(Token = "0x6000720")]
		[Address(RVA = "0x10FA4CC", Offset = "0x10FA4CC", VA = "0x10FA4CC")]
		public static extern ulong ISteamFriends_GetCoplayFriend(int iCoplayFriend);

		[PreserveSig]
		[Token(Token = "0x6000721")]
		[Address(RVA = "0x10FA56C", Offset = "0x10FA56C", VA = "0x10FA56C")]
		public static extern int ISteamFriends_GetFriendCoplayTime(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6000722")]
		[Address(RVA = "0x10FA60C", Offset = "0x10FA60C", VA = "0x10FA60C")]
		public static extern uint ISteamFriends_GetFriendCoplayGame(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6000723")]
		[Address(RVA = "0x10FA6AC", Offset = "0x10FA6AC", VA = "0x10FA6AC")]
		public static extern ulong ISteamFriends_JoinClanChatRoom(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6000724")]
		[Address(RVA = "0x10FA74C", Offset = "0x10FA74C", VA = "0x10FA74C")]
		public static extern bool ISteamFriends_LeaveClanChatRoom(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6000725")]
		[Address(RVA = "0x10FA7F4", Offset = "0x10FA7F4", VA = "0x10FA7F4")]
		public static extern int ISteamFriends_GetClanChatMemberCount(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6000726")]
		[Address(RVA = "0x10FA894", Offset = "0x10FA894", VA = "0x10FA894")]
		public static extern ulong ISteamFriends_GetChatMemberByIndex(CSteamID steamIDClan, int iUser);

		[PreserveSig]
		[Token(Token = "0x6000727")]
		[Address(RVA = "0x10FA944", Offset = "0x10FA944", VA = "0x10FA944")]
		public static extern bool ISteamFriends_SendClanChatMessage(CSteamID steamIDClanChat, InteropHelp.UTF8StringHandle pchText);

		[PreserveSig]
		[Token(Token = "0x6000728")]
		[Address(RVA = "0x10FAA3C", Offset = "0x10FAA3C", VA = "0x10FAA3C")]
		public static extern int ISteamFriends_GetClanChatMessage(CSteamID steamIDClanChat, int iMessage, IntPtr prgchText, int cchTextMax, out EChatEntryType peChatEntryType, out CSteamID psteamidChatter);

		[PreserveSig]
		[Token(Token = "0x6000729")]
		[Address(RVA = "0x10FAB1C", Offset = "0x10FAB1C", VA = "0x10FAB1C")]
		public static extern bool ISteamFriends_IsClanChatAdmin(CSteamID steamIDClanChat, CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x600072A")]
		[Address(RVA = "0x10FABD4", Offset = "0x10FABD4", VA = "0x10FABD4")]
		public static extern bool ISteamFriends_IsClanChatWindowOpenInSteam(CSteamID steamIDClanChat);

		[PreserveSig]
		[Token(Token = "0x600072B")]
		[Address(RVA = "0x10FAC7C", Offset = "0x10FAC7C", VA = "0x10FAC7C")]
		public static extern bool ISteamFriends_OpenClanChatWindowInSteam(CSteamID steamIDClanChat);

		[PreserveSig]
		[Token(Token = "0x600072C")]
		[Address(RVA = "0x10FAD24", Offset = "0x10FAD24", VA = "0x10FAD24")]
		public static extern bool ISteamFriends_CloseClanChatWindowInSteam(CSteamID steamIDClanChat);

		[PreserveSig]
		[Token(Token = "0x600072D")]
		[Address(RVA = "0x10FADCC", Offset = "0x10FADCC", VA = "0x10FADCC")]
		public static extern bool ISteamFriends_SetListenForFriendsMessages(bool bInterceptEnabled);

		[PreserveSig]
		[Token(Token = "0x600072E")]
		[Address(RVA = "0x10FAE74", Offset = "0x10FAE74", VA = "0x10FAE74")]
		public static extern bool ISteamFriends_ReplyToFriendMessage(CSteamID steamIDFriend, InteropHelp.UTF8StringHandle pchMsgToSend);

		[PreserveSig]
		[Token(Token = "0x600072F")]
		[Address(RVA = "0x10FAF6C", Offset = "0x10FAF6C", VA = "0x10FAF6C")]
		public static extern int ISteamFriends_GetFriendMessage(CSteamID steamIDFriend, int iMessageID, IntPtr pvData, int cubData, out EChatEntryType peChatEntryType);

		[PreserveSig]
		[Token(Token = "0x6000730")]
		[Address(RVA = "0x10FB03C", Offset = "0x10FB03C", VA = "0x10FB03C")]
		public static extern ulong ISteamFriends_GetFollowerCount(CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x6000731")]
		[Address(RVA = "0x10FB0DC", Offset = "0x10FB0DC", VA = "0x10FB0DC")]
		public static extern ulong ISteamFriends_IsFollowing(CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x6000732")]
		[Address(RVA = "0x10FB17C", Offset = "0x10FB17C", VA = "0x10FB17C")]
		public static extern ulong ISteamFriends_EnumerateFollowingList(uint unStartIndex);

		[PreserveSig]
		[Token(Token = "0x6000733")]
		[Address(RVA = "0x10FB21C", Offset = "0x10FB21C", VA = "0x10FB21C")]
		public static extern bool ISteamGameServer_InitGameServer(uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, AppId_t nGameAppId, InteropHelp.UTF8StringHandle pchVersionString);

		[PreserveSig]
		[Token(Token = "0x6000734")]
		[Address(RVA = "0x10FB344", Offset = "0x10FB344", VA = "0x10FB344")]
		public static extern void ISteamGameServer_SetProduct(InteropHelp.UTF8StringHandle pszProduct);

		[PreserveSig]
		[Token(Token = "0x6000735")]
		[Address(RVA = "0x10FB420", Offset = "0x10FB420", VA = "0x10FB420")]
		public static extern void ISteamGameServer_SetGameDescription(InteropHelp.UTF8StringHandle pszGameDescription);

		[PreserveSig]
		[Token(Token = "0x6000736")]
		[Address(RVA = "0x10FB4FC", Offset = "0x10FB4FC", VA = "0x10FB4FC")]
		public static extern void ISteamGameServer_SetModDir(InteropHelp.UTF8StringHandle pszModDir);

		[PreserveSig]
		[Token(Token = "0x6000737")]
		[Address(RVA = "0x10FB5D8", Offset = "0x10FB5D8", VA = "0x10FB5D8")]
		public static extern void ISteamGameServer_SetDedicatedServer(bool bDedicated);

		[PreserveSig]
		[Token(Token = "0x6000738")]
		[Address(RVA = "0x10FB678", Offset = "0x10FB678", VA = "0x10FB678")]
		public static extern void ISteamGameServer_LogOn(InteropHelp.UTF8StringHandle pszToken);

		[PreserveSig]
		[Token(Token = "0x6000739")]
		[Address(RVA = "0x10FB754", Offset = "0x10FB754", VA = "0x10FB754")]
		public static extern void ISteamGameServer_LogOnAnonymous();

		[PreserveSig]
		[Token(Token = "0x600073A")]
		[Address(RVA = "0x10FB7E4", Offset = "0x10FB7E4", VA = "0x10FB7E4")]
		public static extern void ISteamGameServer_LogOff();

		[PreserveSig]
		[Token(Token = "0x600073B")]
		[Address(RVA = "0x10FB874", Offset = "0x10FB874", VA = "0x10FB874")]
		public static extern bool ISteamGameServer_BLoggedOn();

		[PreserveSig]
		[Token(Token = "0x600073C")]
		[Address(RVA = "0x10FB90C", Offset = "0x10FB90C", VA = "0x10FB90C")]
		public static extern bool ISteamGameServer_BSecure();

		[PreserveSig]
		[Token(Token = "0x600073D")]
		[Address(RVA = "0x10FB9A4", Offset = "0x10FB9A4", VA = "0x10FB9A4")]
		public static extern ulong ISteamGameServer_GetSteamID();

		[PreserveSig]
		[Token(Token = "0x600073E")]
		[Address(RVA = "0x10FBA34", Offset = "0x10FBA34", VA = "0x10FBA34")]
		public static extern bool ISteamGameServer_WasRestartRequested();

		[PreserveSig]
		[Token(Token = "0x600073F")]
		[Address(RVA = "0x10FBACC", Offset = "0x10FBACC", VA = "0x10FBACC")]
		public static extern void ISteamGameServer_SetMaxPlayerCount(int cPlayersMax);

		[PreserveSig]
		[Token(Token = "0x6000740")]
		[Address(RVA = "0x10FBB6C", Offset = "0x10FBB6C", VA = "0x10FBB6C")]
		public static extern void ISteamGameServer_SetBotPlayerCount(int cBotplayers);

		[PreserveSig]
		[Token(Token = "0x6000741")]
		[Address(RVA = "0x10FBC0C", Offset = "0x10FBC0C", VA = "0x10FBC0C")]
		public static extern void ISteamGameServer_SetServerName(InteropHelp.UTF8StringHandle pszServerName);

		[PreserveSig]
		[Token(Token = "0x6000742")]
		[Address(RVA = "0x10FBCE8", Offset = "0x10FBCE8", VA = "0x10FBCE8")]
		public static extern void ISteamGameServer_SetMapName(InteropHelp.UTF8StringHandle pszMapName);

		[PreserveSig]
		[Token(Token = "0x6000743")]
		[Address(RVA = "0x10FBDC4", Offset = "0x10FBDC4", VA = "0x10FBDC4")]
		public static extern void ISteamGameServer_SetPasswordProtected(bool bPasswordProtected);

		[PreserveSig]
		[Token(Token = "0x6000744")]
		[Address(RVA = "0x10FBE64", Offset = "0x10FBE64", VA = "0x10FBE64")]
		public static extern void ISteamGameServer_SetSpectatorPort(ushort unSpectatorPort);

		[PreserveSig]
		[Token(Token = "0x6000745")]
		[Address(RVA = "0x10FBF04", Offset = "0x10FBF04", VA = "0x10FBF04")]
		public static extern void ISteamGameServer_SetSpectatorServerName(InteropHelp.UTF8StringHandle pszSpectatorServerName);

		[PreserveSig]
		[Token(Token = "0x6000746")]
		[Address(RVA = "0x10FBFE0", Offset = "0x10FBFE0", VA = "0x10FBFE0")]
		public static extern void ISteamGameServer_ClearAllKeyValues();

		[PreserveSig]
		[Token(Token = "0x6000747")]
		[Address(RVA = "0x10FC070", Offset = "0x10FC070", VA = "0x10FC070")]
		public static extern void ISteamGameServer_SetKeyValue(InteropHelp.UTF8StringHandle pKey, InteropHelp.UTF8StringHandle pValue);

		[PreserveSig]
		[Token(Token = "0x6000748")]
		[Address(RVA = "0x10FC198", Offset = "0x10FC198", VA = "0x10FC198")]
		public static extern void ISteamGameServer_SetGameTags(InteropHelp.UTF8StringHandle pchGameTags);

		[PreserveSig]
		[Token(Token = "0x6000749")]
		[Address(RVA = "0x10FC274", Offset = "0x10FC274", VA = "0x10FC274")]
		public static extern void ISteamGameServer_SetGameData(InteropHelp.UTF8StringHandle pchGameData);

		[PreserveSig]
		[Token(Token = "0x600074A")]
		[Address(RVA = "0x10FC350", Offset = "0x10FC350", VA = "0x10FC350")]
		public static extern void ISteamGameServer_SetRegion(InteropHelp.UTF8StringHandle pszRegion);

		[PreserveSig]
		[Token(Token = "0x600074B")]
		[Address(RVA = "0x10FC42C", Offset = "0x10FC42C", VA = "0x10FC42C")]
		public static extern bool ISteamGameServer_SendUserConnectAndAuthenticate(uint unIPClient, [In][Out] byte[] pvAuthBlob, uint cubAuthBlobSize, out CSteamID pSteamIDUser);

		[PreserveSig]
		[Token(Token = "0x600074C")]
		[Address(RVA = "0x10FC504", Offset = "0x10FC504", VA = "0x10FC504")]
		public static extern ulong ISteamGameServer_CreateUnauthenticatedUserConnection();

		[PreserveSig]
		[Token(Token = "0x600074D")]
		[Address(RVA = "0x10FC594", Offset = "0x10FC594", VA = "0x10FC594")]
		public static extern void ISteamGameServer_SendUserDisconnect(CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x600074E")]
		[Address(RVA = "0x10FC634", Offset = "0x10FC634", VA = "0x10FC634")]
		public static extern bool ISteamGameServer_BUpdateUserData(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchPlayerName, uint uScore);

		[PreserveSig]
		[Token(Token = "0x600074F")]
		[Address(RVA = "0x10FC734", Offset = "0x10FC734", VA = "0x10FC734")]
		public static extern uint ISteamGameServer_GetAuthSessionTicket([In][Out] byte[] pTicket, int cbMaxTicket, out uint pcbTicket);

		[PreserveSig]
		[Token(Token = "0x6000750")]
		[Address(RVA = "0x10FC7F4", Offset = "0x10FC7F4", VA = "0x10FC7F4")]
		public static extern EBeginAuthSessionResult ISteamGameServer_BeginAuthSession([In][Out] byte[] pAuthTicket, int cbAuthTicket, CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x6000751")]
		[Address(RVA = "0x10FC8B4", Offset = "0x10FC8B4", VA = "0x10FC8B4")]
		public static extern void ISteamGameServer_EndAuthSession(CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x6000752")]
		[Address(RVA = "0x10FC954", Offset = "0x10FC954", VA = "0x10FC954")]
		public static extern void ISteamGameServer_CancelAuthTicket(HAuthTicket hAuthTicket);

		[PreserveSig]
		[Token(Token = "0x6000753")]
		[Address(RVA = "0x10FC9F4", Offset = "0x10FC9F4", VA = "0x10FC9F4")]
		public static extern EUserHasLicenseForAppResult ISteamGameServer_UserHasLicenseForApp(CSteamID steamID, AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x6000754")]
		[Address(RVA = "0x10FCAA4", Offset = "0x10FCAA4", VA = "0x10FCAA4")]
		public static extern bool ISteamGameServer_RequestUserGroupStatus(CSteamID steamIDUser, CSteamID steamIDGroup);

		[PreserveSig]
		[Token(Token = "0x6000755")]
		[Address(RVA = "0x10FCB5C", Offset = "0x10FCB5C", VA = "0x10FCB5C")]
		public static extern void ISteamGameServer_GetGameplayStats();

		[PreserveSig]
		[Token(Token = "0x6000756")]
		[Address(RVA = "0x10FCBEC", Offset = "0x10FCBEC", VA = "0x10FCBEC")]
		public static extern ulong ISteamGameServer_GetServerReputation();

		[PreserveSig]
		[Token(Token = "0x6000757")]
		[Address(RVA = "0x10FCC7C", Offset = "0x10FCC7C", VA = "0x10FCC7C")]
		public static extern uint ISteamGameServer_GetPublicIP();

		[PreserveSig]
		[Token(Token = "0x6000758")]
		[Address(RVA = "0x10FCD0C", Offset = "0x10FCD0C", VA = "0x10FCD0C")]
		public static extern bool ISteamGameServer_HandleIncomingPacket([In][Out] byte[] pData, int cbData, uint srcIP, ushort srcPort);

		[PreserveSig]
		[Token(Token = "0x6000759")]
		[Address(RVA = "0x10FCDE4", Offset = "0x10FCDE4", VA = "0x10FCDE4")]
		public static extern int ISteamGameServer_GetNextOutgoingPacket([In][Out] byte[] pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort);

		[PreserveSig]
		[Token(Token = "0x600075A")]
		[Address(RVA = "0x10FCEB4", Offset = "0x10FCEB4", VA = "0x10FCEB4")]
		public static extern void ISteamGameServer_EnableHeartbeats(bool bActive);

		[PreserveSig]
		[Token(Token = "0x600075B")]
		[Address(RVA = "0x10FCF54", Offset = "0x10FCF54", VA = "0x10FCF54")]
		public static extern void ISteamGameServer_SetHeartbeatInterval(int iHeartbeatInterval);

		[PreserveSig]
		[Token(Token = "0x600075C")]
		[Address(RVA = "0x10FCFF4", Offset = "0x10FCFF4", VA = "0x10FCFF4")]
		public static extern void ISteamGameServer_ForceHeartbeat();

		[PreserveSig]
		[Token(Token = "0x600075D")]
		[Address(RVA = "0x10FD084", Offset = "0x10FD084", VA = "0x10FD084")]
		public static extern ulong ISteamGameServer_AssociateWithClan(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x600075E")]
		[Address(RVA = "0x10FD124", Offset = "0x10FD124", VA = "0x10FD124")]
		public static extern ulong ISteamGameServer_ComputeNewPlayerCompatibility(CSteamID steamIDNewPlayer);

		[PreserveSig]
		[Token(Token = "0x600075F")]
		[Address(RVA = "0x10FD1C4", Offset = "0x10FD1C4", VA = "0x10FD1C4")]
		public static extern ulong ISteamGameServerStats_RequestUserStats(CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x6000760")]
		[Address(RVA = "0x10FD264", Offset = "0x10FD264", VA = "0x10FD264")]
		public static extern bool ISteamGameServerStats_GetUserStat(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out int pData);

		[PreserveSig]
		[Token(Token = "0x6000761")]
		[Address(RVA = "0x10FD364", Offset = "0x10FD364", VA = "0x10FD364")]
		public static extern bool ISteamGameServerStats_GetUserStat_(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out float pData);

		[PreserveSig]
		[Token(Token = "0x6000762")]
		[Address(RVA = "0x10FD464", Offset = "0x10FD464", VA = "0x10FD464")]
		public static extern bool ISteamGameServerStats_GetUserAchievement(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x6000763")]
		[Address(RVA = "0x10FD578", Offset = "0x10FD578", VA = "0x10FD578")]
		public static extern bool ISteamGameServerStats_SetUserStat(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, int nData);

		[PreserveSig]
		[Token(Token = "0x6000764")]
		[Address(RVA = "0x10FD678", Offset = "0x10FD678", VA = "0x10FD678")]
		public static extern bool ISteamGameServerStats_SetUserStat_(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, float fData);

		[PreserveSig]
		[Token(Token = "0x6000765")]
		[Address(RVA = "0x10FD780", Offset = "0x10FD780", VA = "0x10FD780")]
		public static extern bool ISteamGameServerStats_UpdateUserAvgRateStat(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, float flCountThisSession, double dSessionLength);

		[PreserveSig]
		[Token(Token = "0x6000766")]
		[Address(RVA = "0x10FD890", Offset = "0x10FD890", VA = "0x10FD890")]
		public static extern bool ISteamGameServerStats_SetUserAchievement(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x6000767")]
		[Address(RVA = "0x10FD988", Offset = "0x10FD988", VA = "0x10FD988")]
		public static extern bool ISteamGameServerStats_ClearUserAchievement(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x6000768")]
		[Address(RVA = "0x10FDA80", Offset = "0x10FDA80", VA = "0x10FDA80")]
		public static extern ulong ISteamGameServerStats_StoreUserStats(CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x6000769")]
		[Address(RVA = "0x10FDB20", Offset = "0x10FDB20", VA = "0x10FDB20")]
		public static extern bool ISteamHTMLSurface_Init();

		[PreserveSig]
		[Token(Token = "0x600076A")]
		[Address(RVA = "0x10FDBB8", Offset = "0x10FDBB8", VA = "0x10FDBB8")]
		public static extern bool ISteamHTMLSurface_Shutdown();

		[PreserveSig]
		[Token(Token = "0x600076B")]
		[Address(RVA = "0x10FDC50", Offset = "0x10FDC50", VA = "0x10FDC50")]
		public static extern ulong ISteamHTMLSurface_CreateBrowser(InteropHelp.UTF8StringHandle pchUserAgent, InteropHelp.UTF8StringHandle pchUserCSS);

		[PreserveSig]
		[Token(Token = "0x600076C")]
		[Address(RVA = "0x10FDD80", Offset = "0x10FDD80", VA = "0x10FDD80")]
		public static extern void ISteamHTMLSurface_RemoveBrowser(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x600076D")]
		[Address(RVA = "0x10FDE20", Offset = "0x10FDE20", VA = "0x10FDE20")]
		public static extern void ISteamHTMLSurface_LoadURL(HHTMLBrowser unBrowserHandle, InteropHelp.UTF8StringHandle pchURL, InteropHelp.UTF8StringHandle pchPostData);

		[PreserveSig]
		[Token(Token = "0x600076E")]
		[Address(RVA = "0x10FDF58", Offset = "0x10FDF58", VA = "0x10FDF58")]
		public static extern void ISteamHTMLSurface_SetSize(HHTMLBrowser unBrowserHandle, uint unWidth, uint unHeight);

		[PreserveSig]
		[Token(Token = "0x600076F")]
		[Address(RVA = "0x10FE010", Offset = "0x10FE010", VA = "0x10FE010")]
		public static extern void ISteamHTMLSurface_StopLoad(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x6000770")]
		[Address(RVA = "0x10FE0B0", Offset = "0x10FE0B0", VA = "0x10FE0B0")]
		public static extern void ISteamHTMLSurface_Reload(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x6000771")]
		[Address(RVA = "0x10FE150", Offset = "0x10FE150", VA = "0x10FE150")]
		public static extern void ISteamHTMLSurface_GoBack(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x6000772")]
		[Address(RVA = "0x10FE1F0", Offset = "0x10FE1F0", VA = "0x10FE1F0")]
		public static extern void ISteamHTMLSurface_GoForward(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x6000773")]
		[Address(RVA = "0x10FE290", Offset = "0x10FE290", VA = "0x10FE290")]
		public static extern void ISteamHTMLSurface_AddHeader(HHTMLBrowser unBrowserHandle, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x6000774")]
		[Address(RVA = "0x10FE3C8", Offset = "0x10FE3C8", VA = "0x10FE3C8")]
		public static extern void ISteamHTMLSurface_ExecuteJavascript(HHTMLBrowser unBrowserHandle, InteropHelp.UTF8StringHandle pchScript);

		[PreserveSig]
		[Token(Token = "0x6000775")]
		[Address(RVA = "0x10FE4B4", Offset = "0x10FE4B4", VA = "0x10FE4B4")]
		public static extern void ISteamHTMLSurface_MouseUp(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton);

		[PreserveSig]
		[Token(Token = "0x6000776")]
		[Address(RVA = "0x10FE564", Offset = "0x10FE564", VA = "0x10FE564")]
		public static extern void ISteamHTMLSurface_MouseDown(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton);

		[PreserveSig]
		[Token(Token = "0x6000777")]
		[Address(RVA = "0x10FE614", Offset = "0x10FE614", VA = "0x10FE614")]
		public static extern void ISteamHTMLSurface_MouseDoubleClick(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton);

		[PreserveSig]
		[Token(Token = "0x6000778")]
		[Address(RVA = "0x10FE6C4", Offset = "0x10FE6C4", VA = "0x10FE6C4")]
		public static extern void ISteamHTMLSurface_MouseMove(HHTMLBrowser unBrowserHandle, int x, int y);

		[PreserveSig]
		[Token(Token = "0x6000779")]
		[Address(RVA = "0x10FE77C", Offset = "0x10FE77C", VA = "0x10FE77C")]
		public static extern void ISteamHTMLSurface_MouseWheel(HHTMLBrowser unBrowserHandle, int nDelta);

		[PreserveSig]
		[Token(Token = "0x600077A")]
		[Address(RVA = "0x10FE82C", Offset = "0x10FE82C", VA = "0x10FE82C")]
		public static extern void ISteamHTMLSurface_KeyDown(HHTMLBrowser unBrowserHandle, uint nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers);

		[PreserveSig]
		[Token(Token = "0x600077B")]
		[Address(RVA = "0x10FE8E4", Offset = "0x10FE8E4", VA = "0x10FE8E4")]
		public static extern void ISteamHTMLSurface_KeyUp(HHTMLBrowser unBrowserHandle, uint nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers);

		[PreserveSig]
		[Token(Token = "0x600077C")]
		[Address(RVA = "0x10FE99C", Offset = "0x10FE99C", VA = "0x10FE99C")]
		public static extern void ISteamHTMLSurface_KeyChar(HHTMLBrowser unBrowserHandle, uint cUnicodeChar, EHTMLKeyModifiers eHTMLKeyModifiers);

		[PreserveSig]
		[Token(Token = "0x600077D")]
		[Address(RVA = "0x10FEA54", Offset = "0x10FEA54", VA = "0x10FEA54")]
		public static extern void ISteamHTMLSurface_SetHorizontalScroll(HHTMLBrowser unBrowserHandle, uint nAbsolutePixelScroll);

		[PreserveSig]
		[Token(Token = "0x600077E")]
		[Address(RVA = "0x10FEB04", Offset = "0x10FEB04", VA = "0x10FEB04")]
		public static extern void ISteamHTMLSurface_SetVerticalScroll(HHTMLBrowser unBrowserHandle, uint nAbsolutePixelScroll);

		[PreserveSig]
		[Token(Token = "0x600077F")]
		[Address(RVA = "0x10FEBB4", Offset = "0x10FEBB4", VA = "0x10FEBB4")]
		public static extern void ISteamHTMLSurface_SetKeyFocus(HHTMLBrowser unBrowserHandle, bool bHasKeyFocus);

		[PreserveSig]
		[Token(Token = "0x6000780")]
		[Address(RVA = "0x10FEC64", Offset = "0x10FEC64", VA = "0x10FEC64")]
		public static extern void ISteamHTMLSurface_ViewSource(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x6000781")]
		[Address(RVA = "0x10FED04", Offset = "0x10FED04", VA = "0x10FED04")]
		public static extern void ISteamHTMLSurface_CopyToClipboard(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x6000782")]
		[Address(RVA = "0x10FEDA4", Offset = "0x10FEDA4", VA = "0x10FEDA4")]
		public static extern void ISteamHTMLSurface_PasteFromClipboard(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x6000783")]
		[Address(RVA = "0x10FEE44", Offset = "0x10FEE44", VA = "0x10FEE44")]
		public static extern void ISteamHTMLSurface_Find(HHTMLBrowser unBrowserHandle, InteropHelp.UTF8StringHandle pchSearchStr, bool bCurrentlyInFind, bool bReverse);

		[PreserveSig]
		[Token(Token = "0x6000784")]
		[Address(RVA = "0x10FEF50", Offset = "0x10FEF50", VA = "0x10FEF50")]
		public static extern void ISteamHTMLSurface_StopFind(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x6000785")]
		[Address(RVA = "0x10FEFF0", Offset = "0x10FEFF0", VA = "0x10FEFF0")]
		public static extern void ISteamHTMLSurface_GetLinkAtPosition(HHTMLBrowser unBrowserHandle, int x, int y);

		[PreserveSig]
		[Token(Token = "0x6000786")]
		[Address(RVA = "0x10FF0A8", Offset = "0x10FF0A8", VA = "0x10FF0A8")]
		public static extern void ISteamHTMLSurface_SetCookie(InteropHelp.UTF8StringHandle pchHostname, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue, InteropHelp.UTF8StringHandle pchPath, uint nExpires, bool bSecure, bool bHTTPOnly);

		[PreserveSig]
		[Token(Token = "0x6000787")]
		[Address(RVA = "0x10FF294", Offset = "0x10FF294", VA = "0x10FF294")]
		public static extern void ISteamHTMLSurface_SetPageScaleFactor(HHTMLBrowser unBrowserHandle, float flZoom, int nPointX, int nPointY);

		[PreserveSig]
		[Token(Token = "0x6000788")]
		[Address(RVA = "0x10FF35C", Offset = "0x10FF35C", VA = "0x10FF35C")]
		public static extern void ISteamHTMLSurface_SetBackgroundMode(HHTMLBrowser unBrowserHandle, bool bBackgroundMode);

		[PreserveSig]
		[Token(Token = "0x6000789")]
		[Address(RVA = "0x10FF40C", Offset = "0x10FF40C", VA = "0x10FF40C")]
		public static extern void ISteamHTMLSurface_AllowStartRequest(HHTMLBrowser unBrowserHandle, bool bAllowed);

		[PreserveSig]
		[Token(Token = "0x600078A")]
		[Address(RVA = "0x10FF4BC", Offset = "0x10FF4BC", VA = "0x10FF4BC")]
		public static extern void ISteamHTMLSurface_JSDialogResponse(HHTMLBrowser unBrowserHandle, bool bResult);

		[PreserveSig]
		[Token(Token = "0x600078B")]
		[Address(RVA = "0x10FF56C", Offset = "0x10FF56C", VA = "0x10FF56C")]
		public static extern void ISteamHTMLSurface_FileLoadDialogResponse(HHTMLBrowser unBrowserHandle, IntPtr pchSelectedFiles);

		[PreserveSig]
		[Token(Token = "0x600078C")]
		[Address(RVA = "0x10FF61C", Offset = "0x10FF61C", VA = "0x10FF61C")]
		public static extern uint ISteamHTTP_CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, InteropHelp.UTF8StringHandle pchAbsoluteURL);

		[PreserveSig]
		[Token(Token = "0x600078D")]
		[Address(RVA = "0x10FF710", Offset = "0x10FF710", VA = "0x10FF710")]
		public static extern bool ISteamHTTP_SetHTTPRequestContextValue(HTTPRequestHandle hRequest, ulong ulContextValue);

		[PreserveSig]
		[Token(Token = "0x600078E")]
		[Address(RVA = "0x10FF7C8", Offset = "0x10FF7C8", VA = "0x10FF7C8")]
		public static extern bool ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, uint unTimeoutSeconds);

		[PreserveSig]
		[Token(Token = "0x600078F")]
		[Address(RVA = "0x10FF880", Offset = "0x10FF880", VA = "0x10FF880")]
		public static extern bool ISteamHTTP_SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, InteropHelp.UTF8StringHandle pchHeaderValue);

		[PreserveSig]
		[Token(Token = "0x6000790")]
		[Address(RVA = "0x10FF9C4", Offset = "0x10FF9C4", VA = "0x10FF9C4")]
		public static extern bool ISteamHTTP_SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchParamName, InteropHelp.UTF8StringHandle pchParamValue);

		[PreserveSig]
		[Token(Token = "0x6000791")]
		[Address(RVA = "0x10FFB08", Offset = "0x10FFB08", VA = "0x10FFB08")]
		public static extern bool ISteamHTTP_SendHTTPRequest(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle);

		[PreserveSig]
		[Token(Token = "0x6000792")]
		[Address(RVA = "0x10FFBC0", Offset = "0x10FFBC0", VA = "0x10FFBC0")]
		public static extern bool ISteamHTTP_SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle);

		[PreserveSig]
		[Token(Token = "0x6000793")]
		[Address(RVA = "0x10FFC78", Offset = "0x10FFC78", VA = "0x10FFC78")]
		public static extern bool ISteamHTTP_DeferHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x6000794")]
		[Address(RVA = "0x10FFD20", Offset = "0x10FFD20", VA = "0x10FFD20")]
		public static extern bool ISteamHTTP_PrioritizeHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x6000795")]
		[Address(RVA = "0x10FFDC8", Offset = "0x10FFDC8", VA = "0x10FFDC8")]
		public static extern bool ISteamHTTP_GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, out uint unResponseHeaderSize);

		[PreserveSig]
		[Token(Token = "0x6000796")]
		[Address(RVA = "0x10FFEC8", Offset = "0x10FFEC8", VA = "0x10FFEC8")]
		public static extern bool ISteamHTTP_GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, [In][Out] byte[] pHeaderValueBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000797")]
		[Address(RVA = "0x10FFFE0", Offset = "0x10FFFE0", VA = "0x10FFFE0")]
		public static extern bool ISteamHTTP_GetHTTPResponseBodySize(HTTPRequestHandle hRequest, out uint unBodySize);

		[PreserveSig]
		[Token(Token = "0x6000798")]
		[Address(RVA = "0x1100098", Offset = "0x1100098", VA = "0x1100098")]
		public static extern bool ISteamHTTP_GetHTTPResponseBodyData(HTTPRequestHandle hRequest, [In][Out] byte[] pBodyDataBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000799")]
		[Address(RVA = "0x1100160", Offset = "0x1100160", VA = "0x1100160")]
		public static extern bool ISteamHTTP_GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, uint cOffset, [In][Out] byte[] pBodyDataBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x600079A")]
		[Address(RVA = "0x1100238", Offset = "0x1100238", VA = "0x1100238")]
		public static extern bool ISteamHTTP_ReleaseHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x600079B")]
		[Address(RVA = "0x11002E0", Offset = "0x11002E0", VA = "0x11002E0")]
		public static extern bool ISteamHTTP_GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, out float pflPercentOut);

		[PreserveSig]
		[Token(Token = "0x600079C")]
		[Address(RVA = "0x1100398", Offset = "0x1100398", VA = "0x1100398")]
		public static extern bool ISteamHTTP_SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchContentType, [In][Out] byte[] pubBody, uint unBodyLen);

		[PreserveSig]
		[Token(Token = "0x600079D")]
		[Address(RVA = "0x11004B0", Offset = "0x11004B0", VA = "0x11004B0")]
		public static extern uint ISteamHTTP_CreateCookieContainer(bool bAllowResponsesToModify);

		[PreserveSig]
		[Token(Token = "0x600079E")]
		[Address(RVA = "0x1100550", Offset = "0x1100550", VA = "0x1100550")]
		public static extern bool ISteamHTTP_ReleaseCookieContainer(HTTPCookieContainerHandle hCookieContainer);

		[PreserveSig]
		[Token(Token = "0x600079F")]
		[Address(RVA = "0x11005F8", Offset = "0x11005F8", VA = "0x11005F8")]
		public static extern bool ISteamHTTP_SetCookie(HTTPCookieContainerHandle hCookieContainer, InteropHelp.UTF8StringHandle pchHost, InteropHelp.UTF8StringHandle pchUrl, InteropHelp.UTF8StringHandle pchCookie);

		[PreserveSig]
		[Token(Token = "0x60007A0")]
		[Address(RVA = "0x1100788", Offset = "0x1100788", VA = "0x1100788")]
		public static extern bool ISteamHTTP_SetHTTPRequestCookieContainer(HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer);

		[PreserveSig]
		[Token(Token = "0x60007A1")]
		[Address(RVA = "0x1100840", Offset = "0x1100840", VA = "0x1100840")]
		public static extern bool ISteamHTTP_SetHTTPRequestUserAgentInfo(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchUserAgentInfo);

		[PreserveSig]
		[Token(Token = "0x60007A2")]
		[Address(RVA = "0x1100938", Offset = "0x1100938", VA = "0x1100938")]
		public static extern bool ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate);

		[PreserveSig]
		[Token(Token = "0x60007A3")]
		[Address(RVA = "0x11009F0", Offset = "0x11009F0", VA = "0x11009F0")]
		public static extern bool ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(HTTPRequestHandle hRequest, uint unMilliseconds);

		[PreserveSig]
		[Token(Token = "0x60007A4")]
		[Address(RVA = "0x1100AA8", Offset = "0x1100AA8", VA = "0x1100AA8")]
		public static extern bool ISteamHTTP_GetHTTPRequestWasTimedOut(HTTPRequestHandle hRequest, out bool pbWasTimedOut);

		[PreserveSig]
		[Token(Token = "0x60007A5")]
		[Address(RVA = "0x1100B74", Offset = "0x1100B74", VA = "0x1100B74")]
		public static extern EResult ISteamInventory_GetResultStatus(SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x60007A6")]
		[Address(RVA = "0x1100C14", Offset = "0x1100C14", VA = "0x1100C14")]
		public static extern bool ISteamInventory_GetResultItems(SteamInventoryResult_t resultHandle, [In][Out] SteamItemDetails_t[] pOutItemsArray, ref uint punOutItemsArraySize);

		[PreserveSig]
		[Token(Token = "0x60007A7")]
		[Address(RVA = "0x1100CDC", Offset = "0x1100CDC", VA = "0x1100CDC")]
		public static extern uint ISteamInventory_GetResultTimestamp(SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x60007A8")]
		[Address(RVA = "0x1100D7C", Offset = "0x1100D7C", VA = "0x1100D7C")]
		public static extern bool ISteamInventory_CheckResultSteamID(SteamInventoryResult_t resultHandle, CSteamID steamIDExpected);

		[PreserveSig]
		[Token(Token = "0x60007A9")]
		[Address(RVA = "0x1100E34", Offset = "0x1100E34", VA = "0x1100E34")]
		public static extern void ISteamInventory_DestroyResult(SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x60007AA")]
		[Address(RVA = "0x1100ED4", Offset = "0x1100ED4", VA = "0x1100ED4")]
		public static extern bool ISteamInventory_GetAllItems(out SteamInventoryResult_t pResultHandle);

		[PreserveSig]
		[Token(Token = "0x60007AB")]
		[Address(RVA = "0x1100F7C", Offset = "0x1100F7C", VA = "0x1100F7C")]
		public static extern bool ISteamInventory_GetItemsByID(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemInstanceID_t[] pInstanceIDs, uint unCountInstanceIDs);

		[PreserveSig]
		[Token(Token = "0x60007AC")]
		[Address(RVA = "0x1101044", Offset = "0x1101044", VA = "0x1101044")]
		public static extern bool ISteamInventory_SerializeResult(SteamInventoryResult_t resultHandle, [In][Out] byte[] pOutBuffer, out uint punOutBufferSize);

		[PreserveSig]
		[Token(Token = "0x60007AD")]
		[Address(RVA = "0x110110C", Offset = "0x110110C", VA = "0x110110C")]
		public static extern bool ISteamInventory_DeserializeResult(out SteamInventoryResult_t pOutResultHandle, [In][Out] byte[] pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE);

		[PreserveSig]
		[Token(Token = "0x60007AE")]
		[Address(RVA = "0x11011E4", Offset = "0x11011E4", VA = "0x11011E4")]
		public static extern bool ISteamInventory_GenerateItems(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayItemDefs, [In][Out] uint[] punArrayQuantity, uint unArrayLength);

		[PreserveSig]
		[Token(Token = "0x60007AF")]
		[Address(RVA = "0x11012C4", Offset = "0x11012C4", VA = "0x11012C4")]
		public static extern bool ISteamInventory_GrantPromoItems(out SteamInventoryResult_t pResultHandle);

		[PreserveSig]
		[Token(Token = "0x60007B0")]
		[Address(RVA = "0x110136C", Offset = "0x110136C", VA = "0x110136C")]
		public static extern bool ISteamInventory_AddPromoItem(out SteamInventoryResult_t pResultHandle, SteamItemDef_t itemDef);

		[PreserveSig]
		[Token(Token = "0x60007B1")]
		[Address(RVA = "0x1101424", Offset = "0x1101424", VA = "0x1101424")]
		public static extern bool ISteamInventory_AddPromoItems(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayItemDefs, uint unArrayLength);

		[PreserveSig]
		[Token(Token = "0x60007B2")]
		[Address(RVA = "0x11014EC", Offset = "0x11014EC", VA = "0x11014EC")]
		public static extern bool ISteamInventory_ConsumeItem(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemConsume, uint unQuantity);

		[PreserveSig]
		[Token(Token = "0x60007B3")]
		[Address(RVA = "0x11015AC", Offset = "0x11015AC", VA = "0x11015AC")]
		public static extern bool ISteamInventory_ExchangeItems(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayGenerate, [In][Out] uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, [In][Out] SteamItemInstanceID_t[] pArrayDestroy, [In][Out] uint[] punArrayDestroyQuantity, uint unArrayDestroyLength);

		[PreserveSig]
		[Token(Token = "0x60007B4")]
		[Address(RVA = "0x11016BC", Offset = "0x11016BC", VA = "0x11016BC")]
		public static extern bool ISteamInventory_TransferItemQuantity(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemIdSource, uint unQuantity, SteamItemInstanceID_t itemIdDest);

		[PreserveSig]
		[Token(Token = "0x60007B5")]
		[Address(RVA = "0x110178C", Offset = "0x110178C", VA = "0x110178C")]
		public static extern void ISteamInventory_SendItemDropHeartbeat();

		[PreserveSig]
		[Token(Token = "0x60007B6")]
		[Address(RVA = "0x110181C", Offset = "0x110181C", VA = "0x110181C")]
		public static extern bool ISteamInventory_TriggerItemDrop(out SteamInventoryResult_t pResultHandle, SteamItemDef_t dropListDefinition);

		[PreserveSig]
		[Token(Token = "0x60007B7")]
		[Address(RVA = "0x11018D4", Offset = "0x11018D4", VA = "0x11018D4")]
		public static extern bool ISteamInventory_TradeItems(out SteamInventoryResult_t pResultHandle, CSteamID steamIDTradePartner, [In][Out] SteamItemInstanceID_t[] pArrayGive, [In][Out] uint[] pArrayGiveQuantity, uint nArrayGiveLength, [In][Out] SteamItemInstanceID_t[] pArrayGet, [In][Out] uint[] pArrayGetQuantity, uint nArrayGetLength);

		[PreserveSig]
		[Token(Token = "0x60007B8")]
		[Address(RVA = "0x11019F4", Offset = "0x11019F4", VA = "0x11019F4")]
		public static extern bool ISteamInventory_LoadItemDefinitions();

		[PreserveSig]
		[Token(Token = "0x60007B9")]
		[Address(RVA = "0x1101A8C", Offset = "0x1101A8C", VA = "0x1101A8C")]
		public static extern bool ISteamInventory_GetItemDefinitionIDs([In][Out] SteamItemDef_t[] pItemDefIDs, out uint punItemDefIDsArraySize);

		[PreserveSig]
		[Token(Token = "0x60007BA")]
		[Address(RVA = "0x1101B4C", Offset = "0x1101B4C", VA = "0x1101B4C")]
		public static extern bool ISteamInventory_GetItemDefinitionProperty(SteamItemDef_t iDefinition, InteropHelp.UTF8StringHandle pchPropertyName, IntPtr pchValueBuffer, ref uint punValueBufferSize);

		[PreserveSig]
		[Token(Token = "0x60007BB")]
		[Address(RVA = "0x1101C5C", Offset = "0x1101C5C", VA = "0x1101C5C")]
		public static extern int ISteamMatchmaking_GetFavoriteGameCount();

		[PreserveSig]
		[Token(Token = "0x60007BC")]
		[Address(RVA = "0x1101CEC", Offset = "0x1101CEC", VA = "0x1101CEC")]
		public static extern bool ISteamMatchmaking_GetFavoriteGame(int iGame, out AppId_t pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer);

		[PreserveSig]
		[Token(Token = "0x60007BD")]
		[Address(RVA = "0x1101DDC", Offset = "0x1101DDC", VA = "0x1101DDC")]
		public static extern int ISteamMatchmaking_AddFavoriteGame(AppId_t nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer);

		[PreserveSig]
		[Token(Token = "0x60007BE")]
		[Address(RVA = "0x1101EBC", Offset = "0x1101EBC", VA = "0x1101EBC")]
		public static extern bool ISteamMatchmaking_RemoveFavoriteGame(AppId_t nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags);

		[PreserveSig]
		[Token(Token = "0x60007BF")]
		[Address(RVA = "0x1101F94", Offset = "0x1101F94", VA = "0x1101F94")]
		public static extern ulong ISteamMatchmaking_RequestLobbyList();

		[PreserveSig]
		[Token(Token = "0x60007C0")]
		[Address(RVA = "0x1102024", Offset = "0x1102024", VA = "0x1102024")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListStringFilter(InteropHelp.UTF8StringHandle pchKeyToMatch, InteropHelp.UTF8StringHandle pchValueToMatch, ELobbyComparison eComparisonType);

		[PreserveSig]
		[Token(Token = "0x60007C1")]
		[Address(RVA = "0x110215C", Offset = "0x110215C", VA = "0x110215C")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListNumericalFilter(InteropHelp.UTF8StringHandle pchKeyToMatch, int nValueToMatch, ELobbyComparison eComparisonType);

		[PreserveSig]
		[Token(Token = "0x60007C2")]
		[Address(RVA = "0x1102250", Offset = "0x1102250", VA = "0x1102250")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListNearValueFilter(InteropHelp.UTF8StringHandle pchKeyToMatch, int nValueToBeCloseTo);

		[PreserveSig]
		[Token(Token = "0x60007C3")]
		[Address(RVA = "0x110233C", Offset = "0x110233C", VA = "0x110233C")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable);

		[PreserveSig]
		[Token(Token = "0x60007C4")]
		[Address(RVA = "0x11023DC", Offset = "0x11023DC", VA = "0x11023DC")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListDistanceFilter(ELobbyDistanceFilter eLobbyDistanceFilter);

		[PreserveSig]
		[Token(Token = "0x60007C5")]
		[Address(RVA = "0x110247C", Offset = "0x110247C", VA = "0x110247C")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults);

		[PreserveSig]
		[Token(Token = "0x60007C6")]
		[Address(RVA = "0x110251C", Offset = "0x110251C", VA = "0x110251C")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x60007C7")]
		[Address(RVA = "0x11025BC", Offset = "0x11025BC", VA = "0x11025BC")]
		public static extern ulong ISteamMatchmaking_GetLobbyByIndex(int iLobby);

		[PreserveSig]
		[Token(Token = "0x60007C8")]
		[Address(RVA = "0x110265C", Offset = "0x110265C", VA = "0x110265C")]
		public static extern ulong ISteamMatchmaking_CreateLobby(ELobbyType eLobbyType, int cMaxMembers);

		[PreserveSig]
		[Token(Token = "0x60007C9")]
		[Address(RVA = "0x110270C", Offset = "0x110270C", VA = "0x110270C")]
		public static extern ulong ISteamMatchmaking_JoinLobby(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x60007CA")]
		[Address(RVA = "0x11027AC", Offset = "0x11027AC", VA = "0x11027AC")]
		public static extern void ISteamMatchmaking_LeaveLobby(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x60007CB")]
		[Address(RVA = "0x110284C", Offset = "0x110284C", VA = "0x110284C")]
		public static extern bool ISteamMatchmaking_InviteUserToLobby(CSteamID steamIDLobby, CSteamID steamIDInvitee);

		[PreserveSig]
		[Token(Token = "0x60007CC")]
		[Address(RVA = "0x1102904", Offset = "0x1102904", VA = "0x1102904")]
		public static extern int ISteamMatchmaking_GetNumLobbyMembers(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x60007CD")]
		[Address(RVA = "0x11029A4", Offset = "0x11029A4", VA = "0x11029A4")]
		public static extern ulong ISteamMatchmaking_GetLobbyMemberByIndex(CSteamID steamIDLobby, int iMember);

		[PreserveSig]
		[Token(Token = "0x60007CE")]
		[Address(RVA = "0x1102A54", Offset = "0x1102A54", VA = "0x1102A54")]
		public static extern IntPtr ISteamMatchmaking_GetLobbyData(CSteamID steamIDLobby, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x60007CF")]
		[Address(RVA = "0x1102B48", Offset = "0x1102B48", VA = "0x1102B48")]
		public static extern bool ISteamMatchmaking_SetLobbyData(CSteamID steamIDLobby, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x60007D0")]
		[Address(RVA = "0x1102C8C", Offset = "0x1102C8C", VA = "0x1102C8C")]
		public static extern int ISteamMatchmaking_GetLobbyDataCount(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x60007D1")]
		[Address(RVA = "0x1102D2C", Offset = "0x1102D2C", VA = "0x1102D2C")]
		public static extern bool ISteamMatchmaking_GetLobbyDataByIndex(CSteamID steamIDLobby, int iLobbyData, IntPtr pchKey, int cchKeyBufferSize, IntPtr pchValue, int cchValueBufferSize);

		[PreserveSig]
		[Token(Token = "0x60007D2")]
		[Address(RVA = "0x1102E14", Offset = "0x1102E14", VA = "0x1102E14")]
		public static extern bool ISteamMatchmaking_DeleteLobbyData(CSteamID steamIDLobby, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x60007D3")]
		[Address(RVA = "0x1102F0C", Offset = "0x1102F0C", VA = "0x1102F0C")]
		public static extern IntPtr ISteamMatchmaking_GetLobbyMemberData(CSteamID steamIDLobby, CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x60007D4")]
		[Address(RVA = "0x1103008", Offset = "0x1103008", VA = "0x1103008")]
		public static extern void ISteamMatchmaking_SetLobbyMemberData(CSteamID steamIDLobby, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x60007D5")]
		[Address(RVA = "0x1103140", Offset = "0x1103140", VA = "0x1103140")]
		public static extern bool ISteamMatchmaking_SendLobbyChatMsg(CSteamID steamIDLobby, [In][Out] byte[] pvMsgBody, int cubMsgBody);

		[PreserveSig]
		[Token(Token = "0x60007D6")]
		[Address(RVA = "0x1103208", Offset = "0x1103208", VA = "0x1103208")]
		public static extern int ISteamMatchmaking_GetLobbyChatEntry(CSteamID steamIDLobby, int iChatID, out CSteamID pSteamIDUser, [In][Out] byte[] pvData, int cubData, out EChatEntryType peChatEntryType);

		[PreserveSig]
		[Token(Token = "0x60007D7")]
		[Address(RVA = "0x11032F0", Offset = "0x11032F0", VA = "0x11032F0")]
		public static extern bool ISteamMatchmaking_RequestLobbyData(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x60007D8")]
		[Address(RVA = "0x1103398", Offset = "0x1103398", VA = "0x1103398")]
		public static extern void ISteamMatchmaking_SetLobbyGameServer(CSteamID steamIDLobby, uint unGameServerIP, ushort unGameServerPort, CSteamID steamIDGameServer);

		[PreserveSig]
		[Token(Token = "0x60007D9")]
		[Address(RVA = "0x1103460", Offset = "0x1103460", VA = "0x1103460")]
		public static extern bool ISteamMatchmaking_GetLobbyGameServer(CSteamID steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out CSteamID psteamIDGameServer);

		[PreserveSig]
		[Token(Token = "0x60007DA")]
		[Address(RVA = "0x1103530", Offset = "0x1103530", VA = "0x1103530")]
		public static extern bool ISteamMatchmaking_SetLobbyMemberLimit(CSteamID steamIDLobby, int cMaxMembers);

		[PreserveSig]
		[Token(Token = "0x60007DB")]
		[Address(RVA = "0x11035E8", Offset = "0x11035E8", VA = "0x11035E8")]
		public static extern int ISteamMatchmaking_GetLobbyMemberLimit(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x60007DC")]
		[Address(RVA = "0x1103688", Offset = "0x1103688", VA = "0x1103688")]
		public static extern bool ISteamMatchmaking_SetLobbyType(CSteamID steamIDLobby, ELobbyType eLobbyType);

		[PreserveSig]
		[Token(Token = "0x60007DD")]
		[Address(RVA = "0x1103740", Offset = "0x1103740", VA = "0x1103740")]
		public static extern bool ISteamMatchmaking_SetLobbyJoinable(CSteamID steamIDLobby, bool bLobbyJoinable);

		[PreserveSig]
		[Token(Token = "0x60007DE")]
		[Address(RVA = "0x11037F8", Offset = "0x11037F8", VA = "0x11037F8")]
		public static extern ulong ISteamMatchmaking_GetLobbyOwner(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x60007DF")]
		[Address(RVA = "0x1103898", Offset = "0x1103898", VA = "0x1103898")]
		public static extern bool ISteamMatchmaking_SetLobbyOwner(CSteamID steamIDLobby, CSteamID steamIDNewOwner);

		[PreserveSig]
		[Token(Token = "0x60007E0")]
		[Address(RVA = "0x1103950", Offset = "0x1103950", VA = "0x1103950")]
		public static extern bool ISteamMatchmaking_SetLinkedLobby(CSteamID steamIDLobby, CSteamID steamIDLobbyDependent);

		[PreserveSig]
		[Token(Token = "0x60007E1")]
		[Address(RVA = "0x1103A08", Offset = "0x1103A08", VA = "0x1103A08")]
		public static extern IntPtr ISteamMatchmakingServers_RequestInternetServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x60007E2")]
		[Address(RVA = "0x1103AD0", Offset = "0x1103AD0", VA = "0x1103AD0")]
		public static extern IntPtr ISteamMatchmakingServers_RequestLANServerList(AppId_t iApp, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x60007E3")]
		[Address(RVA = "0x1103B80", Offset = "0x1103B80", VA = "0x1103B80")]
		public static extern IntPtr ISteamMatchmakingServers_RequestFriendsServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x60007E4")]
		[Address(RVA = "0x1103C48", Offset = "0x1103C48", VA = "0x1103C48")]
		public static extern IntPtr ISteamMatchmakingServers_RequestFavoritesServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x60007E5")]
		[Address(RVA = "0x1103D10", Offset = "0x1103D10", VA = "0x1103D10")]
		public static extern IntPtr ISteamMatchmakingServers_RequestHistoryServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x60007E6")]
		[Address(RVA = "0x1103DD8", Offset = "0x1103DD8", VA = "0x1103DD8")]
		public static extern IntPtr ISteamMatchmakingServers_RequestSpectatorServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x60007E7")]
		[Address(RVA = "0x1103EA0", Offset = "0x1103EA0", VA = "0x1103EA0")]
		public static extern void ISteamMatchmakingServers_ReleaseRequest(HServerListRequest hServerListRequest);

		[PreserveSig]
		[Token(Token = "0x60007E8")]
		[Address(RVA = "0x1103F40", Offset = "0x1103F40", VA = "0x1103F40")]
		public static extern IntPtr ISteamMatchmakingServers_GetServerDetails(HServerListRequest hRequest, int iServer);

		[PreserveSig]
		[Token(Token = "0x60007E9")]
		[Address(RVA = "0x1103FF0", Offset = "0x1103FF0", VA = "0x1103FF0")]
		public static extern void ISteamMatchmakingServers_CancelQuery(HServerListRequest hRequest);

		[PreserveSig]
		[Token(Token = "0x60007EA")]
		[Address(RVA = "0x1104090", Offset = "0x1104090", VA = "0x1104090")]
		public static extern void ISteamMatchmakingServers_RefreshQuery(HServerListRequest hRequest);

		[PreserveSig]
		[Token(Token = "0x60007EB")]
		[Address(RVA = "0x1104130", Offset = "0x1104130", VA = "0x1104130")]
		public static extern bool ISteamMatchmakingServers_IsRefreshing(HServerListRequest hRequest);

		[PreserveSig]
		[Token(Token = "0x60007EC")]
		[Address(RVA = "0x11041D8", Offset = "0x11041D8", VA = "0x11041D8")]
		public static extern int ISteamMatchmakingServers_GetServerCount(HServerListRequest hRequest);

		[PreserveSig]
		[Token(Token = "0x60007ED")]
		[Address(RVA = "0x1104278", Offset = "0x1104278", VA = "0x1104278")]
		public static extern void ISteamMatchmakingServers_RefreshServer(HServerListRequest hRequest, int iServer);

		[PreserveSig]
		[Token(Token = "0x60007EE")]
		[Address(RVA = "0x1104328", Offset = "0x1104328", VA = "0x1104328")]
		public static extern int ISteamMatchmakingServers_PingServer(uint unIP, ushort usPort, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x60007EF")]
		[Address(RVA = "0x11043E0", Offset = "0x11043E0", VA = "0x11043E0")]
		public static extern int ISteamMatchmakingServers_PlayerDetails(uint unIP, ushort usPort, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x60007F0")]
		[Address(RVA = "0x1104498", Offset = "0x1104498", VA = "0x1104498")]
		public static extern int ISteamMatchmakingServers_ServerRules(uint unIP, ushort usPort, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x60007F1")]
		[Address(RVA = "0x1104550", Offset = "0x1104550", VA = "0x1104550")]
		public static extern void ISteamMatchmakingServers_CancelServerQuery(HServerQuery hServerQuery);

		[PreserveSig]
		[Token(Token = "0x60007F2")]
		[Address(RVA = "0x11045F0", Offset = "0x11045F0", VA = "0x11045F0")]
		public static extern bool ISteamMusic_BIsEnabled();

		[PreserveSig]
		[Token(Token = "0x60007F3")]
		[Address(RVA = "0x1104688", Offset = "0x1104688", VA = "0x1104688")]
		public static extern bool ISteamMusic_BIsPlaying();

		[PreserveSig]
		[Token(Token = "0x60007F4")]
		[Address(RVA = "0x1104720", Offset = "0x1104720", VA = "0x1104720")]
		public static extern AudioPlayback_Status ISteamMusic_GetPlaybackStatus();

		[PreserveSig]
		[Token(Token = "0x60007F5")]
		[Address(RVA = "0x11047B0", Offset = "0x11047B0", VA = "0x11047B0")]
		public static extern void ISteamMusic_Play();

		[PreserveSig]
		[Token(Token = "0x60007F6")]
		[Address(RVA = "0x1104840", Offset = "0x1104840", VA = "0x1104840")]
		public static extern void ISteamMusic_Pause();

		[PreserveSig]
		[Token(Token = "0x60007F7")]
		[Address(RVA = "0x11048D0", Offset = "0x11048D0", VA = "0x11048D0")]
		public static extern void ISteamMusic_PlayPrevious();

		[PreserveSig]
		[Token(Token = "0x60007F8")]
		[Address(RVA = "0x1104960", Offset = "0x1104960", VA = "0x1104960")]
		public static extern void ISteamMusic_PlayNext();

		[PreserveSig]
		[Token(Token = "0x60007F9")]
		[Address(RVA = "0x11049F0", Offset = "0x11049F0", VA = "0x11049F0")]
		public static extern void ISteamMusic_SetVolume(float flVolume);

		[PreserveSig]
		[Token(Token = "0x60007FA")]
		[Address(RVA = "0x1104A94", Offset = "0x1104A94", VA = "0x1104A94")]
		public static extern float ISteamMusic_GetVolume();

		[PreserveSig]
		[Token(Token = "0x60007FB")]
		[Address(RVA = "0x1104B24", Offset = "0x1104B24", VA = "0x1104B24")]
		public static extern bool ISteamMusicRemote_RegisterSteamMusicRemote(InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x60007FC")]
		[Address(RVA = "0x1104C0C", Offset = "0x1104C0C", VA = "0x1104C0C")]
		public static extern bool ISteamMusicRemote_DeregisterSteamMusicRemote();

		[PreserveSig]
		[Token(Token = "0x60007FD")]
		[Address(RVA = "0x1104CA4", Offset = "0x1104CA4", VA = "0x1104CA4")]
		public static extern bool ISteamMusicRemote_BIsCurrentMusicRemote();

		[PreserveSig]
		[Token(Token = "0x60007FE")]
		[Address(RVA = "0x1104D3C", Offset = "0x1104D3C", VA = "0x1104D3C")]
		public static extern bool ISteamMusicRemote_BActivationSuccess(bool bValue);

		[PreserveSig]
		[Token(Token = "0x60007FF")]
		[Address(RVA = "0x1104DE4", Offset = "0x1104DE4", VA = "0x1104DE4")]
		public static extern bool ISteamMusicRemote_SetDisplayName(InteropHelp.UTF8StringHandle pchDisplayName);

		[PreserveSig]
		[Token(Token = "0x6000800")]
		[Address(RVA = "0x1104ECC", Offset = "0x1104ECC", VA = "0x1104ECC")]
		public static extern bool ISteamMusicRemote_SetPNGIcon_64x64([In][Out] byte[] pvBuffer, uint cbBufferLength);

		[PreserveSig]
		[Token(Token = "0x6000801")]
		[Address(RVA = "0x1104F8C", Offset = "0x1104F8C", VA = "0x1104F8C")]
		public static extern bool ISteamMusicRemote_EnablePlayPrevious(bool bValue);

		[PreserveSig]
		[Token(Token = "0x6000802")]
		[Address(RVA = "0x1105034", Offset = "0x1105034", VA = "0x1105034")]
		public static extern bool ISteamMusicRemote_EnablePlayNext(bool bValue);

		[PreserveSig]
		[Token(Token = "0x6000803")]
		[Address(RVA = "0x11050DC", Offset = "0x11050DC", VA = "0x11050DC")]
		public static extern bool ISteamMusicRemote_EnableShuffled(bool bValue);

		[PreserveSig]
		[Token(Token = "0x6000804")]
		[Address(RVA = "0x1105184", Offset = "0x1105184", VA = "0x1105184")]
		public static extern bool ISteamMusicRemote_EnableLooped(bool bValue);

		[PreserveSig]
		[Token(Token = "0x6000805")]
		[Address(RVA = "0x110522C", Offset = "0x110522C", VA = "0x110522C")]
		public static extern bool ISteamMusicRemote_EnableQueue(bool bValue);

		[PreserveSig]
		[Token(Token = "0x6000806")]
		[Address(RVA = "0x11052D4", Offset = "0x11052D4", VA = "0x11052D4")]
		public static extern bool ISteamMusicRemote_EnablePlaylists(bool bValue);

		[PreserveSig]
		[Token(Token = "0x6000807")]
		[Address(RVA = "0x110537C", Offset = "0x110537C", VA = "0x110537C")]
		public static extern bool ISteamMusicRemote_UpdatePlaybackStatus(AudioPlayback_Status nStatus);

		[PreserveSig]
		[Token(Token = "0x6000808")]
		[Address(RVA = "0x1105424", Offset = "0x1105424", VA = "0x1105424")]
		public static extern bool ISteamMusicRemote_UpdateShuffled(bool bValue);

		[PreserveSig]
		[Token(Token = "0x6000809")]
		[Address(RVA = "0x11054CC", Offset = "0x11054CC", VA = "0x11054CC")]
		public static extern bool ISteamMusicRemote_UpdateLooped(bool bValue);

		[PreserveSig]
		[Token(Token = "0x600080A")]
		[Address(RVA = "0x1105574", Offset = "0x1105574", VA = "0x1105574")]
		public static extern bool ISteamMusicRemote_UpdateVolume(float flValue);

		[PreserveSig]
		[Token(Token = "0x600080B")]
		[Address(RVA = "0x1105620", Offset = "0x1105620", VA = "0x1105620")]
		public static extern bool ISteamMusicRemote_CurrentEntryWillChange();

		[PreserveSig]
		[Token(Token = "0x600080C")]
		[Address(RVA = "0x11056B8", Offset = "0x11056B8", VA = "0x11056B8")]
		public static extern bool ISteamMusicRemote_CurrentEntryIsAvailable(bool bAvailable);

		[PreserveSig]
		[Token(Token = "0x600080D")]
		[Address(RVA = "0x1105760", Offset = "0x1105760", VA = "0x1105760")]
		public static extern bool ISteamMusicRemote_UpdateCurrentEntryText(InteropHelp.UTF8StringHandle pchText);

		[PreserveSig]
		[Token(Token = "0x600080E")]
		[Address(RVA = "0x1105848", Offset = "0x1105848", VA = "0x1105848")]
		public static extern bool ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue);

		[PreserveSig]
		[Token(Token = "0x600080F")]
		[Address(RVA = "0x11058F0", Offset = "0x11058F0", VA = "0x11058F0")]
		public static extern bool ISteamMusicRemote_UpdateCurrentEntryCoverArt([In][Out] byte[] pvBuffer, uint cbBufferLength);

		[PreserveSig]
		[Token(Token = "0x6000810")]
		[Address(RVA = "0x11059B0", Offset = "0x11059B0", VA = "0x11059B0")]
		public static extern bool ISteamMusicRemote_CurrentEntryDidChange();

		[PreserveSig]
		[Token(Token = "0x6000811")]
		[Address(RVA = "0x1105A48", Offset = "0x1105A48", VA = "0x1105A48")]
		public static extern bool ISteamMusicRemote_QueueWillChange();

		[PreserveSig]
		[Token(Token = "0x6000812")]
		[Address(RVA = "0x1105AE0", Offset = "0x1105AE0", VA = "0x1105AE0")]
		public static extern bool ISteamMusicRemote_ResetQueueEntries();

		[PreserveSig]
		[Token(Token = "0x6000813")]
		[Address(RVA = "0x1105B78", Offset = "0x1105B78", VA = "0x1105B78")]
		public static extern bool ISteamMusicRemote_SetQueueEntry(int nID, int nPosition, InteropHelp.UTF8StringHandle pchEntryText);

		[PreserveSig]
		[Token(Token = "0x6000814")]
		[Address(RVA = "0x1105C78", Offset = "0x1105C78", VA = "0x1105C78")]
		public static extern bool ISteamMusicRemote_SetCurrentQueueEntry(int nID);

		[PreserveSig]
		[Token(Token = "0x6000815")]
		[Address(RVA = "0x1105D20", Offset = "0x1105D20", VA = "0x1105D20")]
		public static extern bool ISteamMusicRemote_QueueDidChange();

		[PreserveSig]
		[Token(Token = "0x6000816")]
		[Address(RVA = "0x1105DB8", Offset = "0x1105DB8", VA = "0x1105DB8")]
		public static extern bool ISteamMusicRemote_PlaylistWillChange();

		[PreserveSig]
		[Token(Token = "0x6000817")]
		[Address(RVA = "0x1105E50", Offset = "0x1105E50", VA = "0x1105E50")]
		public static extern bool ISteamMusicRemote_ResetPlaylistEntries();

		[PreserveSig]
		[Token(Token = "0x6000818")]
		[Address(RVA = "0x1105EE8", Offset = "0x1105EE8", VA = "0x1105EE8")]
		public static extern bool ISteamMusicRemote_SetPlaylistEntry(int nID, int nPosition, InteropHelp.UTF8StringHandle pchEntryText);

		[PreserveSig]
		[Token(Token = "0x6000819")]
		[Address(RVA = "0x1105FE8", Offset = "0x1105FE8", VA = "0x1105FE8")]
		public static extern bool ISteamMusicRemote_SetCurrentPlaylistEntry(int nID);

		[PreserveSig]
		[Token(Token = "0x600081A")]
		[Address(RVA = "0x1106090", Offset = "0x1106090", VA = "0x1106090")]
		public static extern bool ISteamMusicRemote_PlaylistDidChange();

		[PreserveSig]
		[Token(Token = "0x600081B")]
		[Address(RVA = "0x1106128", Offset = "0x1106128", VA = "0x1106128")]
		public static extern bool ISteamNetworking_SendP2PPacket(CSteamID steamIDRemote, [In][Out] byte[] pubData, uint cubData, EP2PSend eP2PSendType, int nChannel);

		[PreserveSig]
		[Token(Token = "0x600081C")]
		[Address(RVA = "0x1106208", Offset = "0x1106208", VA = "0x1106208")]
		public static extern bool ISteamNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel);

		[PreserveSig]
		[Token(Token = "0x600081D")]
		[Address(RVA = "0x11062C0", Offset = "0x11062C0", VA = "0x11062C0")]
		public static extern bool ISteamNetworking_ReadP2PPacket([In][Out] byte[] pubDest, uint cubDest, out uint pcubMsgSize, out CSteamID psteamIDRemote, int nChannel);

		[PreserveSig]
		[Token(Token = "0x600081E")]
		[Address(RVA = "0x11063A0", Offset = "0x11063A0", VA = "0x11063A0")]
		public static extern bool ISteamNetworking_AcceptP2PSessionWithUser(CSteamID steamIDRemote);

		[PreserveSig]
		[Token(Token = "0x600081F")]
		[Address(RVA = "0x1106448", Offset = "0x1106448", VA = "0x1106448")]
		public static extern bool ISteamNetworking_CloseP2PSessionWithUser(CSteamID steamIDRemote);

		[PreserveSig]
		[Token(Token = "0x6000820")]
		[Address(RVA = "0x11064F0", Offset = "0x11064F0", VA = "0x11064F0")]
		public static extern bool ISteamNetworking_CloseP2PChannelWithUser(CSteamID steamIDRemote, int nChannel);

		[PreserveSig]
		[Token(Token = "0x6000821")]
		[Address(RVA = "0x11065A8", Offset = "0x11065A8", VA = "0x11065A8")]
		public static extern bool ISteamNetworking_GetP2PSessionState(CSteamID steamIDRemote, out P2PSessionState_t pConnectionState);

		[PreserveSig]
		[Token(Token = "0x6000822")]
		[Address(RVA = "0x1106660", Offset = "0x1106660", VA = "0x1106660")]
		public static extern bool ISteamNetworking_AllowP2PPacketRelay(bool bAllow);

		[PreserveSig]
		[Token(Token = "0x6000823")]
		[Address(RVA = "0x1106708", Offset = "0x1106708", VA = "0x1106708")]
		public static extern uint ISteamNetworking_CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay);

		[PreserveSig]
		[Token(Token = "0x6000824")]
		[Address(RVA = "0x11067D0", Offset = "0x11067D0", VA = "0x11067D0")]
		public static extern uint ISteamNetworking_CreateP2PConnectionSocket(CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay);

		[PreserveSig]
		[Token(Token = "0x6000825")]
		[Address(RVA = "0x1106898", Offset = "0x1106898", VA = "0x1106898")]
		public static extern uint ISteamNetworking_CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec);

		[PreserveSig]
		[Token(Token = "0x6000826")]
		[Address(RVA = "0x1106950", Offset = "0x1106950", VA = "0x1106950")]
		public static extern bool ISteamNetworking_DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd);

		[PreserveSig]
		[Token(Token = "0x6000827")]
		[Address(RVA = "0x1106A08", Offset = "0x1106A08", VA = "0x1106A08")]
		public static extern bool ISteamNetworking_DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd);

		[PreserveSig]
		[Token(Token = "0x6000828")]
		[Address(RVA = "0x1106AC0", Offset = "0x1106AC0", VA = "0x1106AC0")]
		public static extern bool ISteamNetworking_SendDataOnSocket(SNetSocket_t hSocket, IntPtr pubData, uint cubData, bool bReliable);

		[PreserveSig]
		[Token(Token = "0x6000829")]
		[Address(RVA = "0x1106B90", Offset = "0x1106B90", VA = "0x1106B90")]
		public static extern bool ISteamNetworking_IsDataAvailableOnSocket(SNetSocket_t hSocket, out uint pcubMsgSize);

		[PreserveSig]
		[Token(Token = "0x600082A")]
		[Address(RVA = "0x1106C48", Offset = "0x1106C48", VA = "0x1106C48")]
		public static extern bool ISteamNetworking_RetrieveDataFromSocket(SNetSocket_t hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize);

		[PreserveSig]
		[Token(Token = "0x600082B")]
		[Address(RVA = "0x1106D18", Offset = "0x1106D18", VA = "0x1106D18")]
		public static extern bool ISteamNetworking_IsDataAvailable(SNetListenSocket_t hListenSocket, out uint pcubMsgSize, out SNetSocket_t phSocket);

		[PreserveSig]
		[Token(Token = "0x600082C")]
		[Address(RVA = "0x1106DD8", Offset = "0x1106DD8", VA = "0x1106DD8")]
		public static extern bool ISteamNetworking_RetrieveData(SNetListenSocket_t hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out SNetSocket_t phSocket);

		[PreserveSig]
		[Token(Token = "0x600082D")]
		[Address(RVA = "0x1106EB0", Offset = "0x1106EB0", VA = "0x1106EB0")]
		public static extern bool ISteamNetworking_GetSocketInfo(SNetSocket_t hSocket, out CSteamID pSteamIDRemote, out int peSocketStatus, out uint punIPRemote, out ushort punPortRemote);

		[PreserveSig]
		[Token(Token = "0x600082E")]
		[Address(RVA = "0x1106F88", Offset = "0x1106F88", VA = "0x1106F88")]
		public static extern bool ISteamNetworking_GetListenSocketInfo(SNetListenSocket_t hListenSocket, out uint pnIP, out ushort pnPort);

		[PreserveSig]
		[Token(Token = "0x600082F")]
		[Address(RVA = "0x1107048", Offset = "0x1107048", VA = "0x1107048")]
		public static extern ESNetSocketConnectionType ISteamNetworking_GetSocketConnectionType(SNetSocket_t hSocket);

		[PreserveSig]
		[Token(Token = "0x6000830")]
		[Address(RVA = "0x11070E8", Offset = "0x11070E8", VA = "0x11070E8")]
		public static extern int ISteamNetworking_GetMaxPacketSize(SNetSocket_t hSocket);

		[PreserveSig]
		[Token(Token = "0x6000831")]
		[Address(RVA = "0x1107188", Offset = "0x1107188", VA = "0x1107188")]
		public static extern bool ISteamRemoteStorage_FileWrite(InteropHelp.UTF8StringHandle pchFile, [In][Out] byte[] pvData, int cubData);

		[PreserveSig]
		[Token(Token = "0x6000832")]
		[Address(RVA = "0x1107290", Offset = "0x1107290", VA = "0x1107290")]
		public static extern int ISteamRemoteStorage_FileRead(InteropHelp.UTF8StringHandle pchFile, [In][Out] byte[] pvData, int cubDataToRead);

		[PreserveSig]
		[Token(Token = "0x6000833")]
		[Address(RVA = "0x1107394", Offset = "0x1107394", VA = "0x1107394")]
		public static extern bool ISteamRemoteStorage_FileForget(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x6000834")]
		[Address(RVA = "0x110747C", Offset = "0x110747C", VA = "0x110747C")]
		public static extern bool ISteamRemoteStorage_FileDelete(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x6000835")]
		[Address(RVA = "0x1107564", Offset = "0x1107564", VA = "0x1107564")]
		public static extern ulong ISteamRemoteStorage_FileShare(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x6000836")]
		[Address(RVA = "0x1107648", Offset = "0x1107648", VA = "0x1107648")]
		public static extern bool ISteamRemoteStorage_SetSyncPlatforms(InteropHelp.UTF8StringHandle pchFile, ERemoteStoragePlatform eRemoteStoragePlatform);

		[PreserveSig]
		[Token(Token = "0x6000837")]
		[Address(RVA = "0x1107740", Offset = "0x1107740", VA = "0x1107740")]
		public static extern ulong ISteamRemoteStorage_FileWriteStreamOpen(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x6000838")]
		[Address(RVA = "0x1107824", Offset = "0x1107824", VA = "0x1107824")]
		public static extern bool ISteamRemoteStorage_FileWriteStreamWriteChunk(UGCFileWriteStreamHandle_t writeHandle, [In][Out] byte[] pvData, int cubData);

		[PreserveSig]
		[Token(Token = "0x6000839")]
		[Address(RVA = "0x11078EC", Offset = "0x11078EC", VA = "0x11078EC")]
		public static extern bool ISteamRemoteStorage_FileWriteStreamClose(UGCFileWriteStreamHandle_t writeHandle);

		[PreserveSig]
		[Token(Token = "0x600083A")]
		[Address(RVA = "0x1107994", Offset = "0x1107994", VA = "0x1107994")]
		public static extern bool ISteamRemoteStorage_FileWriteStreamCancel(UGCFileWriteStreamHandle_t writeHandle);

		[PreserveSig]
		[Token(Token = "0x600083B")]
		[Address(RVA = "0x1107A3C", Offset = "0x1107A3C", VA = "0x1107A3C")]
		public static extern bool ISteamRemoteStorage_FileExists(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x600083C")]
		[Address(RVA = "0x1107B24", Offset = "0x1107B24", VA = "0x1107B24")]
		public static extern bool ISteamRemoteStorage_FilePersisted(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x600083D")]
		[Address(RVA = "0x1107C0C", Offset = "0x1107C0C", VA = "0x1107C0C")]
		public static extern int ISteamRemoteStorage_GetFileSize(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x600083E")]
		[Address(RVA = "0x1107CF0", Offset = "0x1107CF0", VA = "0x1107CF0")]
		public static extern long ISteamRemoteStorage_GetFileTimestamp(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x600083F")]
		[Address(RVA = "0x1107DD4", Offset = "0x1107DD4", VA = "0x1107DD4")]
		public static extern ERemoteStoragePlatform ISteamRemoteStorage_GetSyncPlatforms(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x6000840")]
		[Address(RVA = "0x1107EB8", Offset = "0x1107EB8", VA = "0x1107EB8")]
		public static extern int ISteamRemoteStorage_GetFileCount();

		[PreserveSig]
		[Token(Token = "0x6000841")]
		[Address(RVA = "0x1107F48", Offset = "0x1107F48", VA = "0x1107F48")]
		public static extern IntPtr ISteamRemoteStorage_GetFileNameAndSize(int iFile, out int pnFileSizeInBytes);

		[PreserveSig]
		[Token(Token = "0x6000842")]
		[Address(RVA = "0x1107FF8", Offset = "0x1107FF8", VA = "0x1107FF8")]
		public static extern bool ISteamRemoteStorage_GetQuota(out int pnTotalBytes, out int puAvailableBytes);

		[PreserveSig]
		[Token(Token = "0x6000843")]
		[Address(RVA = "0x11080B0", Offset = "0x11080B0", VA = "0x11080B0")]
		public static extern bool ISteamRemoteStorage_IsCloudEnabledForAccount();

		[PreserveSig]
		[Token(Token = "0x6000844")]
		[Address(RVA = "0x1108148", Offset = "0x1108148", VA = "0x1108148")]
		public static extern bool ISteamRemoteStorage_IsCloudEnabledForApp();

		[PreserveSig]
		[Token(Token = "0x6000845")]
		[Address(RVA = "0x11081E0", Offset = "0x11081E0", VA = "0x11081E0")]
		public static extern void ISteamRemoteStorage_SetCloudEnabledForApp(bool bEnabled);

		[PreserveSig]
		[Token(Token = "0x6000846")]
		[Address(RVA = "0x1108280", Offset = "0x1108280", VA = "0x1108280")]
		public static extern ulong ISteamRemoteStorage_UGCDownload(UGCHandle_t hContent, uint unPriority);

		[PreserveSig]
		[Token(Token = "0x6000847")]
		[Address(RVA = "0x1108330", Offset = "0x1108330", VA = "0x1108330")]
		public static extern bool ISteamRemoteStorage_GetUGCDownloadProgress(UGCHandle_t hContent, out int pnBytesDownloaded, out int pnBytesExpected);

		[PreserveSig]
		[Token(Token = "0x6000848")]
		[Address(RVA = "0x11083F0", Offset = "0x11083F0", VA = "0x11083F0")]
		public static extern bool ISteamRemoteStorage_GetUGCDetails(UGCHandle_t hContent, out AppId_t pnAppID, out IntPtr ppchName, out int pnFileSizeInBytes, out CSteamID pSteamIDOwner);

		[PreserveSig]
		[Token(Token = "0x6000849")]
		[Address(RVA = "0x11084C8", Offset = "0x11084C8", VA = "0x11084C8")]
		public static extern int ISteamRemoteStorage_UGCRead(UGCHandle_t hContent, [In][Out] byte[] pvData, int cubDataToRead, uint cOffset, EUGCReadAction eAction);

		[PreserveSig]
		[Token(Token = "0x600084A")]
		[Address(RVA = "0x11085A0", Offset = "0x11085A0", VA = "0x11085A0")]
		public static extern int ISteamRemoteStorage_GetCachedUGCCount();

		[PreserveSig]
		[Token(Token = "0x600084B")]
		[Address(RVA = "0x1108630", Offset = "0x1108630", VA = "0x1108630")]
		public static extern ulong ISteamRemoteStorage_GetCachedUGCHandle(int iCachedContent);

		[PreserveSig]
		[Token(Token = "0x600084C")]
		[Address(RVA = "0x11086D0", Offset = "0x11086D0", VA = "0x11086D0")]
		public static extern ulong ISteamRemoteStorage_PublishWorkshopFile(InteropHelp.UTF8StringHandle pchFile, InteropHelp.UTF8StringHandle pchPreviewFile, AppId_t nConsumerAppId, InteropHelp.UTF8StringHandle pchTitle, InteropHelp.UTF8StringHandle pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, IntPtr pTags, EWorkshopFileType eWorkshopFileType);

		[PreserveSig]
		[Token(Token = "0x600084D")]
		[Address(RVA = "0x11088CC", Offset = "0x11088CC", VA = "0x11088CC")]
		public static extern ulong ISteamRemoteStorage_CreatePublishedFileUpdateRequest(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x600084E")]
		[Address(RVA = "0x110896C", Offset = "0x110896C", VA = "0x110896C")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileFile(PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x600084F")]
		[Address(RVA = "0x1108A64", Offset = "0x1108A64", VA = "0x1108A64")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFilePreviewFile(PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchPreviewFile);

		[PreserveSig]
		[Token(Token = "0x6000850")]
		[Address(RVA = "0x1108B5C", Offset = "0x1108B5C", VA = "0x1108B5C")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileTitle(PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchTitle);

		[PreserveSig]
		[Token(Token = "0x6000851")]
		[Address(RVA = "0x1108C54", Offset = "0x1108C54", VA = "0x1108C54")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileDescription(PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchDescription);

		[PreserveSig]
		[Token(Token = "0x6000852")]
		[Address(RVA = "0x1108D4C", Offset = "0x1108D4C", VA = "0x1108D4C")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileVisibility(PublishedFileUpdateHandle_t updateHandle, ERemoteStoragePublishedFileVisibility eVisibility);

		[PreserveSig]
		[Token(Token = "0x6000853")]
		[Address(RVA = "0x1108E04", Offset = "0x1108E04", VA = "0x1108E04")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileTags(PublishedFileUpdateHandle_t updateHandle, IntPtr pTags);

		[PreserveSig]
		[Token(Token = "0x6000854")]
		[Address(RVA = "0x1108EBC", Offset = "0x1108EBC", VA = "0x1108EBC")]
		public static extern ulong ISteamRemoteStorage_CommitPublishedFileUpdate(PublishedFileUpdateHandle_t updateHandle);

		[PreserveSig]
		[Token(Token = "0x6000855")]
		[Address(RVA = "0x1108F5C", Offset = "0x1108F5C", VA = "0x1108F5C")]
		public static extern ulong ISteamRemoteStorage_GetPublishedFileDetails(PublishedFileId_t unPublishedFileId, uint unMaxSecondsOld);

		[PreserveSig]
		[Token(Token = "0x6000856")]
		[Address(RVA = "0x110900C", Offset = "0x110900C", VA = "0x110900C")]
		public static extern ulong ISteamRemoteStorage_DeletePublishedFile(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x6000857")]
		[Address(RVA = "0x11090AC", Offset = "0x11090AC", VA = "0x11090AC")]
		public static extern ulong ISteamRemoteStorage_EnumerateUserPublishedFiles(uint unStartIndex);

		[PreserveSig]
		[Token(Token = "0x6000858")]
		[Address(RVA = "0x110914C", Offset = "0x110914C", VA = "0x110914C")]
		public static extern ulong ISteamRemoteStorage_SubscribePublishedFile(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x6000859")]
		[Address(RVA = "0x11091EC", Offset = "0x11091EC", VA = "0x11091EC")]
		public static extern ulong ISteamRemoteStorage_EnumerateUserSubscribedFiles(uint unStartIndex);

		[PreserveSig]
		[Token(Token = "0x600085A")]
		[Address(RVA = "0x110928C", Offset = "0x110928C", VA = "0x110928C")]
		public static extern ulong ISteamRemoteStorage_UnsubscribePublishedFile(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x600085B")]
		[Address(RVA = "0x110932C", Offset = "0x110932C", VA = "0x110932C")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchChangeDescription);

		[PreserveSig]
		[Token(Token = "0x600085C")]
		[Address(RVA = "0x1109424", Offset = "0x1109424", VA = "0x1109424")]
		public static extern ulong ISteamRemoteStorage_GetPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x600085D")]
		[Address(RVA = "0x11094C4", Offset = "0x11094C4", VA = "0x11094C4")]
		public static extern ulong ISteamRemoteStorage_UpdateUserPublishedItemVote(PublishedFileId_t unPublishedFileId, bool bVoteUp);

		[PreserveSig]
		[Token(Token = "0x600085E")]
		[Address(RVA = "0x1109574", Offset = "0x1109574", VA = "0x1109574")]
		public static extern ulong ISteamRemoteStorage_GetUserPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x600085F")]
		[Address(RVA = "0x1109614", Offset = "0x1109614", VA = "0x1109614")]
		public static extern ulong ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(CSteamID steamId, uint unStartIndex, IntPtr pRequiredTags, IntPtr pExcludedTags);

		[PreserveSig]
		[Token(Token = "0x6000860")]
		[Address(RVA = "0x11096DC", Offset = "0x11096DC", VA = "0x11096DC")]
		public static extern ulong ISteamRemoteStorage_PublishVideo(EWorkshopVideoProvider eVideoProvider, InteropHelp.UTF8StringHandle pchVideoAccount, InteropHelp.UTF8StringHandle pchVideoIdentifier, InteropHelp.UTF8StringHandle pchPreviewFile, AppId_t nConsumerAppId, InteropHelp.UTF8StringHandle pchTitle, InteropHelp.UTF8StringHandle pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, IntPtr pTags);

		[PreserveSig]
		[Token(Token = "0x6000861")]
		[Address(RVA = "0x1109934", Offset = "0x1109934", VA = "0x1109934")]
		public static extern ulong ISteamRemoteStorage_SetUserPublishedFileAction(PublishedFileId_t unPublishedFileId, EWorkshopFileAction eAction);

		[PreserveSig]
		[Token(Token = "0x6000862")]
		[Address(RVA = "0x11099E4", Offset = "0x11099E4", VA = "0x11099E4")]
		public static extern ulong ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(EWorkshopFileAction eAction, uint unStartIndex);

		[PreserveSig]
		[Token(Token = "0x6000863")]
		[Address(RVA = "0x1109A94", Offset = "0x1109A94", VA = "0x1109A94")]
		public static extern ulong ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(EWorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, IntPtr pTags, IntPtr pUserTags);

		[PreserveSig]
		[Token(Token = "0x6000864")]
		[Address(RVA = "0x1109B74", Offset = "0x1109B74", VA = "0x1109B74")]
		public static extern ulong ISteamRemoteStorage_UGCDownloadToLocation(UGCHandle_t hContent, InteropHelp.UTF8StringHandle pchLocation, uint unPriority);

		[PreserveSig]
		[Token(Token = "0x6000865")]
		[Address(RVA = "0x1109C70", Offset = "0x1109C70", VA = "0x1109C70")]
		public static extern uint ISteamScreenshots_WriteScreenshot([In][Out] byte[] pubRGB, uint cubRGB, int nWidth, int nHeight);

		[PreserveSig]
		[Token(Token = "0x6000866")]
		[Address(RVA = "0x1109D40", Offset = "0x1109D40", VA = "0x1109D40")]
		public static extern uint ISteamScreenshots_AddScreenshotToLibrary(InteropHelp.UTF8StringHandle pchFilename, InteropHelp.UTF8StringHandle pchThumbnailFilename, int nWidth, int nHeight);

		[PreserveSig]
		[Token(Token = "0x6000867")]
		[Address(RVA = "0x1109E88", Offset = "0x1109E88", VA = "0x1109E88")]
		public static extern void ISteamScreenshots_TriggerScreenshot();

		[PreserveSig]
		[Token(Token = "0x6000868")]
		[Address(RVA = "0x1109F18", Offset = "0x1109F18", VA = "0x1109F18")]
		public static extern void ISteamScreenshots_HookScreenshots(bool bHook);

		[PreserveSig]
		[Token(Token = "0x6000869")]
		[Address(RVA = "0x1109FB8", Offset = "0x1109FB8", VA = "0x1109FB8")]
		public static extern bool ISteamScreenshots_SetLocation(ScreenshotHandle hScreenshot, InteropHelp.UTF8StringHandle pchLocation);

		[PreserveSig]
		[Token(Token = "0x600086A")]
		[Address(RVA = "0x110A0B0", Offset = "0x110A0B0", VA = "0x110A0B0")]
		public static extern bool ISteamScreenshots_TagUser(ScreenshotHandle hScreenshot, CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x600086B")]
		[Address(RVA = "0x110A168", Offset = "0x110A168", VA = "0x110A168")]
		public static extern bool ISteamScreenshots_TagPublishedFile(ScreenshotHandle hScreenshot, PublishedFileId_t unPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x600086C")]
		[Address(RVA = "0x110A220", Offset = "0x110A220", VA = "0x110A220")]
		public static extern ulong ISteamUGC_CreateQueryUserUGCRequest(AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage);

		[PreserveSig]
		[Token(Token = "0x600086D")]
		[Address(RVA = "0x110A308", Offset = "0x110A308", VA = "0x110A308")]
		public static extern ulong ISteamUGC_CreateQueryAllUGCRequest(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage);

		[PreserveSig]
		[Token(Token = "0x600086E")]
		[Address(RVA = "0x110A3D8", Offset = "0x110A3D8", VA = "0x110A3D8")]
		public static extern ulong ISteamUGC_CreateQueryUGCDetailsRequest([In][Out] PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs);

		[PreserveSig]
		[Token(Token = "0x600086F")]
		[Address(RVA = "0x110A490", Offset = "0x110A490", VA = "0x110A490")]
		public static extern ulong ISteamUGC_SendQueryUGCRequest(UGCQueryHandle_t handle);

		[PreserveSig]
		[Token(Token = "0x6000870")]
		[Address(RVA = "0x110A530", Offset = "0x110A530", VA = "0x110A530")]
		public static extern bool ISteamUGC_GetQueryUGCResult(UGCQueryHandle_t handle, uint index, out SteamUGCDetails_t pDetails);

		[PreserveSig]
		[Token(Token = "0x6000871")]
		[Address(RVA = "0x110A648", Offset = "0x110A648", VA = "0x110A648")]
		public static extern bool ISteamUGC_GetQueryUGCPreviewURL(UGCQueryHandle_t handle, uint index, IntPtr pchURL, uint cchURLSize);

		[PreserveSig]
		[Token(Token = "0x6000872")]
		[Address(RVA = "0x110A718", Offset = "0x110A718", VA = "0x110A718")]
		public static extern bool ISteamUGC_GetQueryUGCMetadata(UGCQueryHandle_t handle, uint index, IntPtr pchMetadata, uint cchMetadatasize);

		[PreserveSig]
		[Token(Token = "0x6000873")]
		[Address(RVA = "0x110A7E8", Offset = "0x110A7E8", VA = "0x110A7E8")]
		public static extern bool ISteamUGC_GetQueryUGCChildren(UGCQueryHandle_t handle, uint index, [In][Out] PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries);

		[PreserveSig]
		[Token(Token = "0x6000874")]
		[Address(RVA = "0x110A8C0", Offset = "0x110A8C0", VA = "0x110A8C0")]
		public static extern bool ISteamUGC_GetQueryUGCStatistic(UGCQueryHandle_t handle, uint index, EItemStatistic eStatType, out uint pStatValue);

		[PreserveSig]
		[Token(Token = "0x6000875")]
		[Address(RVA = "0x110A990", Offset = "0x110A990", VA = "0x110A990")]
		public static extern uint ISteamUGC_GetQueryUGCNumAdditionalPreviews(UGCQueryHandle_t handle, uint index);

		[PreserveSig]
		[Token(Token = "0x6000876")]
		[Address(RVA = "0x110AA40", Offset = "0x110AA40", VA = "0x110AA40")]
		public static extern bool ISteamUGC_GetQueryUGCAdditionalPreview(UGCQueryHandle_t handle, uint index, uint previewIndex, IntPtr pchURLOrVideoID, uint cchURLSize, out bool pbIsImage);

		[PreserveSig]
		[Token(Token = "0x6000877")]
		[Address(RVA = "0x110AB3C", Offset = "0x110AB3C", VA = "0x110AB3C")]
		public static extern uint ISteamUGC_GetQueryUGCNumKeyValueTags(UGCQueryHandle_t handle, uint index);

		[PreserveSig]
		[Token(Token = "0x6000878")]
		[Address(RVA = "0x110ABEC", Offset = "0x110ABEC", VA = "0x110ABEC")]
		public static extern bool ISteamUGC_GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, uint index, uint keyValueTagIndex, IntPtr pchKey, uint cchKeySize, IntPtr pchValue, uint cchValueSize);

		[PreserveSig]
		[Token(Token = "0x6000879")]
		[Address(RVA = "0x110ACDC", Offset = "0x110ACDC", VA = "0x110ACDC")]
		public static extern bool ISteamUGC_ReleaseQueryUGCRequest(UGCQueryHandle_t handle);

		[PreserveSig]
		[Token(Token = "0x600087A")]
		[Address(RVA = "0x110AD84", Offset = "0x110AD84", VA = "0x110AD84")]
		public static extern bool ISteamUGC_AddRequiredTag(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pTagName);

		[PreserveSig]
		[Token(Token = "0x600087B")]
		[Address(RVA = "0x110AE7C", Offset = "0x110AE7C", VA = "0x110AE7C")]
		public static extern bool ISteamUGC_AddExcludedTag(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pTagName);

		[PreserveSig]
		[Token(Token = "0x600087C")]
		[Address(RVA = "0x110AF74", Offset = "0x110AF74", VA = "0x110AF74")]
		public static extern bool ISteamUGC_SetReturnKeyValueTags(UGCQueryHandle_t handle, bool bReturnKeyValueTags);

		[PreserveSig]
		[Token(Token = "0x600087D")]
		[Address(RVA = "0x110B02C", Offset = "0x110B02C", VA = "0x110B02C")]
		public static extern bool ISteamUGC_SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription);

		[PreserveSig]
		[Token(Token = "0x600087E")]
		[Address(RVA = "0x110B0E4", Offset = "0x110B0E4", VA = "0x110B0E4")]
		public static extern bool ISteamUGC_SetReturnMetadata(UGCQueryHandle_t handle, bool bReturnMetadata);

		[PreserveSig]
		[Token(Token = "0x600087F")]
		[Address(RVA = "0x110B19C", Offset = "0x110B19C", VA = "0x110B19C")]
		public static extern bool ISteamUGC_SetReturnChildren(UGCQueryHandle_t handle, bool bReturnChildren);

		[PreserveSig]
		[Token(Token = "0x6000880")]
		[Address(RVA = "0x110B254", Offset = "0x110B254", VA = "0x110B254")]
		public static extern bool ISteamUGC_SetReturnAdditionalPreviews(UGCQueryHandle_t handle, bool bReturnAdditionalPreviews);

		[PreserveSig]
		[Token(Token = "0x6000881")]
		[Address(RVA = "0x110B30C", Offset = "0x110B30C", VA = "0x110B30C")]
		public static extern bool ISteamUGC_SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly);

		[PreserveSig]
		[Token(Token = "0x6000882")]
		[Address(RVA = "0x110B3C4", Offset = "0x110B3C4", VA = "0x110B3C4")]
		public static extern bool ISteamUGC_SetLanguage(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pchLanguage);

		[PreserveSig]
		[Token(Token = "0x6000883")]
		[Address(RVA = "0x110B4BC", Offset = "0x110B4BC", VA = "0x110B4BC")]
		public static extern bool ISteamUGC_SetAllowCachedResponse(UGCQueryHandle_t handle, uint unMaxAgeSeconds);

		[PreserveSig]
		[Token(Token = "0x6000884")]
		[Address(RVA = "0x110B574", Offset = "0x110B574", VA = "0x110B574")]
		public static extern bool ISteamUGC_SetCloudFileNameFilter(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pMatchCloudFileName);

		[PreserveSig]
		[Token(Token = "0x6000885")]
		[Address(RVA = "0x110B66C", Offset = "0x110B66C", VA = "0x110B66C")]
		public static extern bool ISteamUGC_SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag);

		[PreserveSig]
		[Token(Token = "0x6000886")]
		[Address(RVA = "0x110B724", Offset = "0x110B724", VA = "0x110B724")]
		public static extern bool ISteamUGC_SetSearchText(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pSearchText);

		[PreserveSig]
		[Token(Token = "0x6000887")]
		[Address(RVA = "0x110B81C", Offset = "0x110B81C", VA = "0x110B81C")]
		public static extern bool ISteamUGC_SetRankedByTrendDays(UGCQueryHandle_t handle, uint unDays);

		[PreserveSig]
		[Token(Token = "0x6000888")]
		[Address(RVA = "0x110B8D4", Offset = "0x110B8D4", VA = "0x110B8D4")]
		public static extern bool ISteamUGC_AddRequiredKeyValueTag(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pKey, InteropHelp.UTF8StringHandle pValue);

		[PreserveSig]
		[Token(Token = "0x6000889")]
		[Address(RVA = "0x110BA18", Offset = "0x110BA18", VA = "0x110BA18")]
		public static extern ulong ISteamUGC_RequestUGCDetails(PublishedFileId_t nPublishedFileID, uint unMaxAgeSeconds);

		[PreserveSig]
		[Token(Token = "0x600088A")]
		[Address(RVA = "0x110BAC8", Offset = "0x110BAC8", VA = "0x110BAC8")]
		public static extern ulong ISteamUGC_CreateItem(AppId_t nConsumerAppId, EWorkshopFileType eFileType);

		[PreserveSig]
		[Token(Token = "0x600088B")]
		[Address(RVA = "0x110BB78", Offset = "0x110BB78", VA = "0x110BB78")]
		public static extern ulong ISteamUGC_StartItemUpdate(AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x600088C")]
		[Address(RVA = "0x110BC28", Offset = "0x110BC28", VA = "0x110BC28")]
		public static extern bool ISteamUGC_SetItemTitle(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchTitle);

		[PreserveSig]
		[Token(Token = "0x600088D")]
		[Address(RVA = "0x110BD20", Offset = "0x110BD20", VA = "0x110BD20")]
		public static extern bool ISteamUGC_SetItemDescription(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchDescription);

		[PreserveSig]
		[Token(Token = "0x600088E")]
		[Address(RVA = "0x110BE18", Offset = "0x110BE18", VA = "0x110BE18")]
		public static extern bool ISteamUGC_SetItemUpdateLanguage(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchLanguage);

		[PreserveSig]
		[Token(Token = "0x600088F")]
		[Address(RVA = "0x110BF10", Offset = "0x110BF10", VA = "0x110BF10")]
		public static extern bool ISteamUGC_SetItemMetadata(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchMetaData);

		[PreserveSig]
		[Token(Token = "0x6000890")]
		[Address(RVA = "0x110C008", Offset = "0x110C008", VA = "0x110C008")]
		public static extern bool ISteamUGC_SetItemVisibility(UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility);

		[PreserveSig]
		[Token(Token = "0x6000891")]
		[Address(RVA = "0x110C0C0", Offset = "0x110C0C0", VA = "0x110C0C0")]
		public static extern bool ISteamUGC_SetItemTags(UGCUpdateHandle_t updateHandle, IntPtr pTags);

		[PreserveSig]
		[Token(Token = "0x6000892")]
		[Address(RVA = "0x110C178", Offset = "0x110C178", VA = "0x110C178")]
		public static extern bool ISteamUGC_SetItemContent(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszContentFolder);

		[PreserveSig]
		[Token(Token = "0x6000893")]
		[Address(RVA = "0x110C270", Offset = "0x110C270", VA = "0x110C270")]
		public static extern bool ISteamUGC_SetItemPreview(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszPreviewFile);

		[PreserveSig]
		[Token(Token = "0x6000894")]
		[Address(RVA = "0x110C368", Offset = "0x110C368", VA = "0x110C368")]
		public static extern bool ISteamUGC_RemoveItemKeyValueTags(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x6000895")]
		[Address(RVA = "0x110C460", Offset = "0x110C460", VA = "0x110C460")]
		public static extern bool ISteamUGC_AddItemKeyValueTag(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x6000896")]
		[Address(RVA = "0x110C5A4", Offset = "0x110C5A4", VA = "0x110C5A4")]
		public static extern ulong ISteamUGC_SubmitItemUpdate(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchChangeNote);

		[PreserveSig]
		[Token(Token = "0x6000897")]
		[Address(RVA = "0x110C698", Offset = "0x110C698", VA = "0x110C698")]
		public static extern EItemUpdateStatus ISteamUGC_GetItemUpdateProgress(UGCUpdateHandle_t handle, out ulong punBytesProcessed, out ulong punBytesTotal);

		[PreserveSig]
		[Token(Token = "0x6000898")]
		[Address(RVA = "0x110C750", Offset = "0x110C750", VA = "0x110C750")]
		public static extern ulong ISteamUGC_SetUserItemVote(PublishedFileId_t nPublishedFileID, bool bVoteUp);

		[PreserveSig]
		[Token(Token = "0x6000899")]
		[Address(RVA = "0x110C800", Offset = "0x110C800", VA = "0x110C800")]
		public static extern ulong ISteamUGC_GetUserItemVote(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x600089A")]
		[Address(RVA = "0x110C8A0", Offset = "0x110C8A0", VA = "0x110C8A0")]
		public static extern ulong ISteamUGC_AddItemToFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x600089B")]
		[Address(RVA = "0x110C950", Offset = "0x110C950", VA = "0x110C950")]
		public static extern ulong ISteamUGC_RemoveItemFromFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x600089C")]
		[Address(RVA = "0x110CA00", Offset = "0x110CA00", VA = "0x110CA00")]
		public static extern ulong ISteamUGC_SubscribeItem(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x600089D")]
		[Address(RVA = "0x110CAA0", Offset = "0x110CAA0", VA = "0x110CAA0")]
		public static extern ulong ISteamUGC_UnsubscribeItem(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x600089E")]
		[Address(RVA = "0x110CB40", Offset = "0x110CB40", VA = "0x110CB40")]
		public static extern uint ISteamUGC_GetNumSubscribedItems();

		[PreserveSig]
		[Token(Token = "0x600089F")]
		[Address(RVA = "0x110CBD0", Offset = "0x110CBD0", VA = "0x110CBD0")]
		public static extern uint ISteamUGC_GetSubscribedItems([In][Out] PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries);

		[PreserveSig]
		[Token(Token = "0x60008A0")]
		[Address(RVA = "0x110CC88", Offset = "0x110CC88", VA = "0x110CC88")]
		public static extern uint ISteamUGC_GetItemState(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60008A1")]
		[Address(RVA = "0x110CD28", Offset = "0x110CD28", VA = "0x110CD28")]
		public static extern bool ISteamUGC_GetItemInstallInfo(PublishedFileId_t nPublishedFileID, out ulong punSizeOnDisk, IntPtr pchFolder, uint cchFolderSize, out uint punTimeStamp);

		[PreserveSig]
		[Token(Token = "0x60008A2")]
		[Address(RVA = "0x110CE00", Offset = "0x110CE00", VA = "0x110CE00")]
		public static extern bool ISteamUGC_GetItemDownloadInfo(PublishedFileId_t nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal);

		[PreserveSig]
		[Token(Token = "0x60008A3")]
		[Address(RVA = "0x110CEC0", Offset = "0x110CEC0", VA = "0x110CEC0")]
		public static extern bool ISteamUGC_DownloadItem(PublishedFileId_t nPublishedFileID, bool bHighPriority);

		[PreserveSig]
		[Token(Token = "0x60008A4")]
		[Address(RVA = "0x110CF78", Offset = "0x110CF78", VA = "0x110CF78")]
		public static extern ulong ISteamUnifiedMessages_SendMethod(InteropHelp.UTF8StringHandle pchServiceMethod, [In][Out] byte[] pRequestBuffer, uint unRequestBufferSize, ulong unContext);

		[PreserveSig]
		[Token(Token = "0x60008A5")]
		[Address(RVA = "0x110D08C", Offset = "0x110D08C", VA = "0x110D08C")]
		public static extern bool ISteamUnifiedMessages_GetMethodResponseInfo(ClientUnifiedMessageHandle hHandle, out uint punResponseSize, out EResult peResult);

		[PreserveSig]
		[Token(Token = "0x60008A6")]
		[Address(RVA = "0x110D14C", Offset = "0x110D14C", VA = "0x110D14C")]
		public static extern bool ISteamUnifiedMessages_GetMethodResponseData(ClientUnifiedMessageHandle hHandle, [In][Out] byte[] pResponseBuffer, uint unResponseBufferSize, bool bAutoRelease);

		[PreserveSig]
		[Token(Token = "0x60008A7")]
		[Address(RVA = "0x110D224", Offset = "0x110D224", VA = "0x110D224")]
		public static extern bool ISteamUnifiedMessages_ReleaseMethod(ClientUnifiedMessageHandle hHandle);

		[PreserveSig]
		[Token(Token = "0x60008A8")]
		[Address(RVA = "0x110D2CC", Offset = "0x110D2CC", VA = "0x110D2CC")]
		public static extern bool ISteamUnifiedMessages_SendNotification(InteropHelp.UTF8StringHandle pchServiceNotification, [In][Out] byte[] pNotificationBuffer, uint unNotificationBufferSize);

		[PreserveSig]
		[Token(Token = "0x60008A9")]
		[Address(RVA = "0x110D3D4", Offset = "0x110D3D4", VA = "0x110D3D4")]
		public static extern int ISteamUser_GetHSteamUser();

		[PreserveSig]
		[Token(Token = "0x60008AA")]
		[Address(RVA = "0x110D464", Offset = "0x110D464", VA = "0x110D464")]
		public static extern bool ISteamUser_BLoggedOn();

		[PreserveSig]
		[Token(Token = "0x60008AB")]
		[Address(RVA = "0x110D4FC", Offset = "0x110D4FC", VA = "0x110D4FC")]
		public static extern ulong ISteamUser_GetSteamID();

		[PreserveSig]
		[Token(Token = "0x60008AC")]
		[Address(RVA = "0x110D58C", Offset = "0x110D58C", VA = "0x110D58C")]
		public static extern int ISteamUser_InitiateGameConnection([In][Out] byte[] pAuthBlob, int cbMaxAuthBlob, CSteamID steamIDGameServer, uint unIPServer, ushort usPortServer, bool bSecure);

		[PreserveSig]
		[Token(Token = "0x60008AD")]
		[Address(RVA = "0x110D674", Offset = "0x110D674", VA = "0x110D674")]
		public static extern void ISteamUser_TerminateGameConnection(uint unIPServer, ushort usPortServer);

		[PreserveSig]
		[Token(Token = "0x60008AE")]
		[Address(RVA = "0x110D724", Offset = "0x110D724", VA = "0x110D724")]
		public static extern void ISteamUser_TrackAppUsageEvent(CGameID gameID, int eAppUsageEvent, InteropHelp.UTF8StringHandle pchExtraInfo);

		[PreserveSig]
		[Token(Token = "0x60008AF")]
		[Address(RVA = "0x110D818", Offset = "0x110D818", VA = "0x110D818")]
		public static extern bool ISteamUser_GetUserDataFolder(IntPtr pchBuffer, int cubBuffer);

		[PreserveSig]
		[Token(Token = "0x60008B0")]
		[Address(RVA = "0x110D8D0", Offset = "0x110D8D0", VA = "0x110D8D0")]
		public static extern void ISteamUser_StartVoiceRecording();

		[PreserveSig]
		[Token(Token = "0x60008B1")]
		[Address(RVA = "0x110D960", Offset = "0x110D960", VA = "0x110D960")]
		public static extern void ISteamUser_StopVoiceRecording();

		[PreserveSig]
		[Token(Token = "0x60008B2")]
		[Address(RVA = "0x110D9F0", Offset = "0x110D9F0", VA = "0x110D9F0")]
		public static extern EVoiceResult ISteamUser_GetAvailableVoice(out uint pcbCompressed, out uint pcbUncompressed, uint nUncompressedVoiceDesiredSampleRate);

		[PreserveSig]
		[Token(Token = "0x60008B3")]
		[Address(RVA = "0x110DAA8", Offset = "0x110DAA8", VA = "0x110DAA8")]
		public static extern EVoiceResult ISteamUser_GetVoice(bool bWantCompressed, [In][Out] byte[] pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, bool bWantUncompressed, [In][Out] byte[] pUncompressedDestBuffer, uint cbUncompressedDestBufferSize, out uint nUncompressBytesWritten, uint nUncompressedVoiceDesiredSampleRate);

		[PreserveSig]
		[Token(Token = "0x60008B4")]
		[Address(RVA = "0x110DBB8", Offset = "0x110DBB8", VA = "0x110DBB8")]
		public static extern EVoiceResult ISteamUser_DecompressVoice([In][Out] byte[] pCompressed, uint cbCompressed, [In][Out] byte[] pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate);

		[PreserveSig]
		[Token(Token = "0x60008B5")]
		[Address(RVA = "0x110DCA8", Offset = "0x110DCA8", VA = "0x110DCA8")]
		public static extern uint ISteamUser_GetVoiceOptimalSampleRate();

		[PreserveSig]
		[Token(Token = "0x60008B6")]
		[Address(RVA = "0x110DD38", Offset = "0x110DD38", VA = "0x110DD38")]
		public static extern uint ISteamUser_GetAuthSessionTicket([In][Out] byte[] pTicket, int cbMaxTicket, out uint pcbTicket);

		[PreserveSig]
		[Token(Token = "0x60008B7")]
		[Address(RVA = "0x110DDF8", Offset = "0x110DDF8", VA = "0x110DDF8")]
		public static extern EBeginAuthSessionResult ISteamUser_BeginAuthSession([In][Out] byte[] pAuthTicket, int cbAuthTicket, CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x60008B8")]
		[Address(RVA = "0x110DEB8", Offset = "0x110DEB8", VA = "0x110DEB8")]
		public static extern void ISteamUser_EndAuthSession(CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x60008B9")]
		[Address(RVA = "0x110DF58", Offset = "0x110DF58", VA = "0x110DF58")]
		public static extern void ISteamUser_CancelAuthTicket(HAuthTicket hAuthTicket);

		[PreserveSig]
		[Token(Token = "0x60008BA")]
		[Address(RVA = "0x110DFF8", Offset = "0x110DFF8", VA = "0x110DFF8")]
		public static extern EUserHasLicenseForAppResult ISteamUser_UserHasLicenseForApp(CSteamID steamID, AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x60008BB")]
		[Address(RVA = "0x110E0A8", Offset = "0x110E0A8", VA = "0x110E0A8")]
		public static extern bool ISteamUser_BIsBehindNAT();

		[PreserveSig]
		[Token(Token = "0x60008BC")]
		[Address(RVA = "0x110E140", Offset = "0x110E140", VA = "0x110E140")]
		public static extern void ISteamUser_AdvertiseGame(CSteamID steamIDGameServer, uint unIPServer, ushort usPortServer);

		[PreserveSig]
		[Token(Token = "0x60008BD")]
		[Address(RVA = "0x110E1F8", Offset = "0x110E1F8", VA = "0x110E1F8")]
		public static extern ulong ISteamUser_RequestEncryptedAppTicket([In][Out] byte[] pDataToInclude, int cbDataToInclude);

		[PreserveSig]
		[Token(Token = "0x60008BE")]
		[Address(RVA = "0x110E2B0", Offset = "0x110E2B0", VA = "0x110E2B0")]
		public static extern bool ISteamUser_GetEncryptedAppTicket([In][Out] byte[] pTicket, int cbMaxTicket, out uint pcbTicket);

		[PreserveSig]
		[Token(Token = "0x60008BF")]
		[Address(RVA = "0x110E378", Offset = "0x110E378", VA = "0x110E378")]
		public static extern int ISteamUser_GetGameBadgeLevel(int nSeries, bool bFoil);

		[PreserveSig]
		[Token(Token = "0x60008C0")]
		[Address(RVA = "0x110E428", Offset = "0x110E428", VA = "0x110E428")]
		public static extern int ISteamUser_GetPlayerSteamLevel();

		[PreserveSig]
		[Token(Token = "0x60008C1")]
		[Address(RVA = "0x110E4B8", Offset = "0x110E4B8", VA = "0x110E4B8")]
		public static extern ulong ISteamUser_RequestStoreAuthURL(InteropHelp.UTF8StringHandle pchRedirectURL);

		[PreserveSig]
		[Token(Token = "0x60008C2")]
		[Address(RVA = "0x110E59C", Offset = "0x110E59C", VA = "0x110E59C")]
		public static extern bool ISteamUserStats_RequestCurrentStats();

		[PreserveSig]
		[Token(Token = "0x60008C3")]
		[Address(RVA = "0x110E634", Offset = "0x110E634", VA = "0x110E634")]
		public static extern bool ISteamUserStats_GetStat(InteropHelp.UTF8StringHandle pchName, out int pData);

		[PreserveSig]
		[Token(Token = "0x60008C4")]
		[Address(RVA = "0x110E72C", Offset = "0x110E72C", VA = "0x110E72C")]
		public static extern bool ISteamUserStats_GetStat_(InteropHelp.UTF8StringHandle pchName, out float pData);

		[PreserveSig]
		[Token(Token = "0x60008C5")]
		[Address(RVA = "0x110E824", Offset = "0x110E824", VA = "0x110E824")]
		public static extern bool ISteamUserStats_SetStat(InteropHelp.UTF8StringHandle pchName, int nData);

		[PreserveSig]
		[Token(Token = "0x60008C6")]
		[Address(RVA = "0x110E91C", Offset = "0x110E91C", VA = "0x110E91C")]
		public static extern bool ISteamUserStats_SetStat_(InteropHelp.UTF8StringHandle pchName, float fData);

		[PreserveSig]
		[Token(Token = "0x60008C7")]
		[Address(RVA = "0x110EA14", Offset = "0x110EA14", VA = "0x110EA14")]
		public static extern bool ISteamUserStats_UpdateAvgRateStat(InteropHelp.UTF8StringHandle pchName, float flCountThisSession, double dSessionLength);

		[PreserveSig]
		[Token(Token = "0x60008C8")]
		[Address(RVA = "0x110EB14", Offset = "0x110EB14", VA = "0x110EB14")]
		public static extern bool ISteamUserStats_GetAchievement(InteropHelp.UTF8StringHandle pchName, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x60008C9")]
		[Address(RVA = "0x110EC20", Offset = "0x110EC20", VA = "0x110EC20")]
		public static extern bool ISteamUserStats_SetAchievement(InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x60008CA")]
		[Address(RVA = "0x110ED08", Offset = "0x110ED08", VA = "0x110ED08")]
		public static extern bool ISteamUserStats_ClearAchievement(InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x60008CB")]
		[Address(RVA = "0x110EDF0", Offset = "0x110EDF0", VA = "0x110EDF0")]
		public static extern bool ISteamUserStats_GetAchievementAndUnlockTime(InteropHelp.UTF8StringHandle pchName, out bool pbAchieved, out uint punUnlockTime);

		[PreserveSig]
		[Token(Token = "0x60008CC")]
		[Address(RVA = "0x110EF04", Offset = "0x110EF04", VA = "0x110EF04")]
		public static extern bool ISteamUserStats_StoreStats();

		[PreserveSig]
		[Token(Token = "0x60008CD")]
		[Address(RVA = "0x110EF9C", Offset = "0x110EF9C", VA = "0x110EF9C")]
		public static extern int ISteamUserStats_GetAchievementIcon(InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x60008CE")]
		[Address(RVA = "0x110F080", Offset = "0x110F080", VA = "0x110F080")]
		public static extern IntPtr ISteamUserStats_GetAchievementDisplayAttribute(InteropHelp.UTF8StringHandle pchName, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x60008CF")]
		[Address(RVA = "0x110F1B0", Offset = "0x110F1B0", VA = "0x110F1B0")]
		public static extern bool ISteamUserStats_IndicateAchievementProgress(InteropHelp.UTF8StringHandle pchName, uint nCurProgress, uint nMaxProgress);

		[PreserveSig]
		[Token(Token = "0x60008D0")]
		[Address(RVA = "0x110F2B0", Offset = "0x110F2B0", VA = "0x110F2B0")]
		public static extern uint ISteamUserStats_GetNumAchievements();

		[PreserveSig]
		[Token(Token = "0x60008D1")]
		[Address(RVA = "0x110F340", Offset = "0x110F340", VA = "0x110F340")]
		public static extern IntPtr ISteamUserStats_GetAchievementName(uint iAchievement);

		[PreserveSig]
		[Token(Token = "0x60008D2")]
		[Address(RVA = "0x110F3E0", Offset = "0x110F3E0", VA = "0x110F3E0")]
		public static extern ulong ISteamUserStats_RequestUserStats(CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x60008D3")]
		[Address(RVA = "0x110F480", Offset = "0x110F480", VA = "0x110F480")]
		public static extern bool ISteamUserStats_GetUserStat(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out int pData);

		[PreserveSig]
		[Token(Token = "0x60008D4")]
		[Address(RVA = "0x110F580", Offset = "0x110F580", VA = "0x110F580")]
		public static extern bool ISteamUserStats_GetUserStat_(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out float pData);

		[PreserveSig]
		[Token(Token = "0x60008D5")]
		[Address(RVA = "0x110F680", Offset = "0x110F680", VA = "0x110F680")]
		public static extern bool ISteamUserStats_GetUserAchievement(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x60008D6")]
		[Address(RVA = "0x110F794", Offset = "0x110F794", VA = "0x110F794")]
		public static extern bool ISteamUserStats_GetUserAchievementAndUnlockTime(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out bool pbAchieved, out uint punUnlockTime);

		[PreserveSig]
		[Token(Token = "0x60008D7")]
		[Address(RVA = "0x110F8B8", Offset = "0x110F8B8", VA = "0x110F8B8")]
		public static extern bool ISteamUserStats_ResetAllStats(bool bAchievementsToo);

		[PreserveSig]
		[Token(Token = "0x60008D8")]
		[Address(RVA = "0x110F960", Offset = "0x110F960", VA = "0x110F960")]
		public static extern ulong ISteamUserStats_FindOrCreateLeaderboard(InteropHelp.UTF8StringHandle pchLeaderboardName, ELeaderboardSortMethod eLeaderboardSortMethod, ELeaderboardDisplayType eLeaderboardDisplayType);

		[PreserveSig]
		[Token(Token = "0x60008D9")]
		[Address(RVA = "0x110FA5C", Offset = "0x110FA5C", VA = "0x110FA5C")]
		public static extern ulong ISteamUserStats_FindLeaderboard(InteropHelp.UTF8StringHandle pchLeaderboardName);

		[PreserveSig]
		[Token(Token = "0x60008DA")]
		[Address(RVA = "0x110FB40", Offset = "0x110FB40", VA = "0x110FB40")]
		public static extern IntPtr ISteamUserStats_GetLeaderboardName(SteamLeaderboard_t hSteamLeaderboard);

		[PreserveSig]
		[Token(Token = "0x60008DB")]
		[Address(RVA = "0x110FBE0", Offset = "0x110FBE0", VA = "0x110FBE0")]
		public static extern int ISteamUserStats_GetLeaderboardEntryCount(SteamLeaderboard_t hSteamLeaderboard);

		[PreserveSig]
		[Token(Token = "0x60008DC")]
		[Address(RVA = "0x110FC80", Offset = "0x110FC80", VA = "0x110FC80")]
		public static extern ELeaderboardSortMethod ISteamUserStats_GetLeaderboardSortMethod(SteamLeaderboard_t hSteamLeaderboard);

		[PreserveSig]
		[Token(Token = "0x60008DD")]
		[Address(RVA = "0x110FD20", Offset = "0x110FD20", VA = "0x110FD20")]
		public static extern ELeaderboardDisplayType ISteamUserStats_GetLeaderboardDisplayType(SteamLeaderboard_t hSteamLeaderboard);

		[PreserveSig]
		[Token(Token = "0x60008DE")]
		[Address(RVA = "0x110FDC0", Offset = "0x110FDC0", VA = "0x110FDC0")]
		public static extern ulong ISteamUserStats_DownloadLeaderboardEntries(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd);

		[PreserveSig]
		[Token(Token = "0x60008DF")]
		[Address(RVA = "0x110FE88", Offset = "0x110FE88", VA = "0x110FE88")]
		public static extern ulong ISteamUserStats_DownloadLeaderboardEntriesForUsers(SteamLeaderboard_t hSteamLeaderboard, [In][Out] CSteamID[] prgUsers, int cUsers);

		[PreserveSig]
		[Token(Token = "0x60008E0")]
		[Address(RVA = "0x110FF48", Offset = "0x110FF48", VA = "0x110FF48")]
		public static extern bool ISteamUserStats_GetDownloadedLeaderboardEntry(SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, out LeaderboardEntry_t pLeaderboardEntry, [In][Out] int[] pDetails, int cDetailsMax);

		[PreserveSig]
		[Token(Token = "0x60008E1")]
		[Address(RVA = "0x1110028", Offset = "0x1110028", VA = "0x1110028")]
		public static extern ulong ISteamUserStats_UploadLeaderboardScore(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, [In][Out] int[] pScoreDetails, int cScoreDetailsCount);

		[PreserveSig]
		[Token(Token = "0x60008E2")]
		[Address(RVA = "0x1110100", Offset = "0x1110100", VA = "0x1110100")]
		public static extern ulong ISteamUserStats_AttachLeaderboardUGC(SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC);

		[PreserveSig]
		[Token(Token = "0x60008E3")]
		[Address(RVA = "0x11101B0", Offset = "0x11101B0", VA = "0x11101B0")]
		public static extern ulong ISteamUserStats_GetNumberOfCurrentPlayers();

		[PreserveSig]
		[Token(Token = "0x60008E4")]
		[Address(RVA = "0x1110240", Offset = "0x1110240", VA = "0x1110240")]
		public static extern ulong ISteamUserStats_RequestGlobalAchievementPercentages();

		[PreserveSig]
		[Token(Token = "0x60008E5")]
		[Address(RVA = "0x11102D0", Offset = "0x11102D0", VA = "0x11102D0")]
		public static extern int ISteamUserStats_GetMostAchievedAchievementInfo(IntPtr pchName, uint unNameBufLen, out float pflPercent, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x60008E6")]
		[Address(RVA = "0x11103AC", Offset = "0x11103AC", VA = "0x11103AC")]
		public static extern int ISteamUserStats_GetNextMostAchievedAchievementInfo(int iIteratorPrevious, IntPtr pchName, uint unNameBufLen, out float pflPercent, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x60008E7")]
		[Address(RVA = "0x1110490", Offset = "0x1110490", VA = "0x1110490")]
		public static extern bool ISteamUserStats_GetAchievementAchievedPercent(InteropHelp.UTF8StringHandle pchName, out float pflPercent);

		[PreserveSig]
		[Token(Token = "0x60008E8")]
		[Address(RVA = "0x1110588", Offset = "0x1110588", VA = "0x1110588")]
		public static extern ulong ISteamUserStats_RequestGlobalStats(int nHistoryDays);

		[PreserveSig]
		[Token(Token = "0x60008E9")]
		[Address(RVA = "0x1110628", Offset = "0x1110628", VA = "0x1110628")]
		public static extern bool ISteamUserStats_GetGlobalStat(InteropHelp.UTF8StringHandle pchStatName, out long pData);

		[PreserveSig]
		[Token(Token = "0x60008EA")]
		[Address(RVA = "0x1110720", Offset = "0x1110720", VA = "0x1110720")]
		public static extern bool ISteamUserStats_GetGlobalStat_(InteropHelp.UTF8StringHandle pchStatName, out double pData);

		[PreserveSig]
		[Token(Token = "0x60008EB")]
		[Address(RVA = "0x1110818", Offset = "0x1110818", VA = "0x1110818")]
		public static extern int ISteamUserStats_GetGlobalStatHistory(InteropHelp.UTF8StringHandle pchStatName, [In][Out] long[] pData, uint cubData);

		[PreserveSig]
		[Token(Token = "0x60008EC")]
		[Address(RVA = "0x111091C", Offset = "0x111091C", VA = "0x111091C")]
		public static extern int ISteamUserStats_GetGlobalStatHistory_(InteropHelp.UTF8StringHandle pchStatName, [In][Out] double[] pData, uint cubData);

		[PreserveSig]
		[Token(Token = "0x60008ED")]
		[Address(RVA = "0x1110A20", Offset = "0x1110A20", VA = "0x1110A20")]
		public static extern uint ISteamUtils_GetSecondsSinceAppActive();

		[PreserveSig]
		[Token(Token = "0x60008EE")]
		[Address(RVA = "0x1110AB0", Offset = "0x1110AB0", VA = "0x1110AB0")]
		public static extern uint ISteamUtils_GetSecondsSinceComputerActive();

		[PreserveSig]
		[Token(Token = "0x60008EF")]
		[Address(RVA = "0x1110B40", Offset = "0x1110B40", VA = "0x1110B40")]
		public static extern EUniverse ISteamUtils_GetConnectedUniverse();

		[PreserveSig]
		[Token(Token = "0x60008F0")]
		[Address(RVA = "0x1110BD0", Offset = "0x1110BD0", VA = "0x1110BD0")]
		public static extern uint ISteamUtils_GetServerRealTime();

		[PreserveSig]
		[Token(Token = "0x60008F1")]
		[Address(RVA = "0x1110C60", Offset = "0x1110C60", VA = "0x1110C60")]
		public static extern IntPtr ISteamUtils_GetIPCountry();

		[PreserveSig]
		[Token(Token = "0x60008F2")]
		[Address(RVA = "0x1110CF0", Offset = "0x1110CF0", VA = "0x1110CF0")]
		public static extern bool ISteamUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight);

		[PreserveSig]
		[Token(Token = "0x60008F3")]
		[Address(RVA = "0x1110DB0", Offset = "0x1110DB0", VA = "0x1110DB0")]
		public static extern bool ISteamUtils_GetImageRGBA(int iImage, [In][Out] byte[] pubDest, int nDestBufferSize);

		[PreserveSig]
		[Token(Token = "0x60008F4")]
		[Address(RVA = "0x1110E78", Offset = "0x1110E78", VA = "0x1110E78")]
		public static extern bool ISteamUtils_GetCSERIPPort(out uint unIP, out ushort usPort);

		[PreserveSig]
		[Token(Token = "0x60008F5")]
		[Address(RVA = "0x1110F30", Offset = "0x1110F30", VA = "0x1110F30")]
		public static extern byte ISteamUtils_GetCurrentBatteryPower();

		[PreserveSig]
		[Token(Token = "0x60008F6")]
		[Address(RVA = "0x1110FC0", Offset = "0x1110FC0", VA = "0x1110FC0")]
		public static extern uint ISteamUtils_GetAppID();

		[PreserveSig]
		[Token(Token = "0x60008F7")]
		[Address(RVA = "0x1111050", Offset = "0x1111050", VA = "0x1111050")]
		public static extern void ISteamUtils_SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition);

		[PreserveSig]
		[Token(Token = "0x60008F8")]
		[Address(RVA = "0x11110F0", Offset = "0x11110F0", VA = "0x11110F0")]
		public static extern bool ISteamUtils_IsAPICallCompleted(SteamAPICall_t hSteamAPICall, out bool pbFailed);

		[PreserveSig]
		[Token(Token = "0x60008F9")]
		[Address(RVA = "0x11111BC", Offset = "0x11111BC", VA = "0x11111BC")]
		public static extern ESteamAPICallFailure ISteamUtils_GetAPICallFailureReason(SteamAPICall_t hSteamAPICall);

		[PreserveSig]
		[Token(Token = "0x60008FA")]
		[Address(RVA = "0x111125C", Offset = "0x111125C", VA = "0x111125C")]
		public static extern bool ISteamUtils_GetAPICallResult(SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, out bool pbFailed);

		[PreserveSig]
		[Token(Token = "0x60008FB")]
		[Address(RVA = "0x1111348", Offset = "0x1111348", VA = "0x1111348")]
		public static extern void ISteamUtils_RunFrame();

		[PreserveSig]
		[Token(Token = "0x60008FC")]
		[Address(RVA = "0x11113D8", Offset = "0x11113D8", VA = "0x11113D8")]
		public static extern uint ISteamUtils_GetIPCCallCount();

		[PreserveSig]
		[Token(Token = "0x60008FD")]
		[Address(RVA = "0x1111468", Offset = "0x1111468", VA = "0x1111468")]
		public static extern void ISteamUtils_SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction);

		[PreserveSig]
		[Token(Token = "0x60008FE")]
		[Address(RVA = "0x111150C", Offset = "0x111150C", VA = "0x111150C")]
		public static extern bool ISteamUtils_IsOverlayEnabled();

		[PreserveSig]
		[Token(Token = "0x60008FF")]
		[Address(RVA = "0x11115A4", Offset = "0x11115A4", VA = "0x11115A4")]
		public static extern bool ISteamUtils_BOverlayNeedsPresent();

		[PreserveSig]
		[Token(Token = "0x6000900")]
		[Address(RVA = "0x111163C", Offset = "0x111163C", VA = "0x111163C")]
		public static extern ulong ISteamUtils_CheckFileSignature(InteropHelp.UTF8StringHandle szFileName);

		[PreserveSig]
		[Token(Token = "0x6000901")]
		[Address(RVA = "0x1111720", Offset = "0x1111720", VA = "0x1111720")]
		public static extern bool ISteamUtils_ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, InteropHelp.UTF8StringHandle pchDescription, uint unCharMax, InteropHelp.UTF8StringHandle pchExistingText);

		[PreserveSig]
		[Token(Token = "0x6000902")]
		[Address(RVA = "0x111187C", Offset = "0x111187C", VA = "0x111187C")]
		public static extern uint ISteamUtils_GetEnteredGamepadTextLength();

		[PreserveSig]
		[Token(Token = "0x6000903")]
		[Address(RVA = "0x111190C", Offset = "0x111190C", VA = "0x111190C")]
		public static extern bool ISteamUtils_GetEnteredGamepadTextInput(IntPtr pchText, uint cchText);

		[PreserveSig]
		[Token(Token = "0x6000904")]
		[Address(RVA = "0x11119C4", Offset = "0x11119C4", VA = "0x11119C4")]
		public static extern IntPtr ISteamUtils_GetSteamUILanguage();

		[PreserveSig]
		[Token(Token = "0x6000905")]
		[Address(RVA = "0x1111A54", Offset = "0x1111A54", VA = "0x1111A54")]
		public static extern bool ISteamUtils_IsSteamRunningInVR();

		[PreserveSig]
		[Token(Token = "0x6000906")]
		[Address(RVA = "0x1111AEC", Offset = "0x1111AEC", VA = "0x1111AEC")]
		public static extern void ISteamUtils_SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset);

		[PreserveSig]
		[Token(Token = "0x6000907")]
		[Address(RVA = "0x1111B9C", Offset = "0x1111B9C", VA = "0x1111B9C")]
		public static extern void ISteamVideo_GetVideoURL(AppId_t unVideoAppID);

		[PreserveSig]
		[Token(Token = "0x6000908")]
		[Address(RVA = "0x1111C3C", Offset = "0x1111C3C", VA = "0x1111C3C")]
		public static extern bool ISteamVideo_IsBroadcasting(out int pnNumViewers);

		[PreserveSig]
		[Token(Token = "0x6000909")]
		[Address(RVA = "0x1111CE4", Offset = "0x1111CE4", VA = "0x1111CE4")]
		public static extern uint ISteamGameServerHTTP_CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, InteropHelp.UTF8StringHandle pchAbsoluteURL);

		[PreserveSig]
		[Token(Token = "0x600090A")]
		[Address(RVA = "0x1111DD8", Offset = "0x1111DD8", VA = "0x1111DD8")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestContextValue(HTTPRequestHandle hRequest, ulong ulContextValue);

		[PreserveSig]
		[Token(Token = "0x600090B")]
		[Address(RVA = "0x1111E90", Offset = "0x1111E90", VA = "0x1111E90")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, uint unTimeoutSeconds);

		[PreserveSig]
		[Token(Token = "0x600090C")]
		[Address(RVA = "0x1111F48", Offset = "0x1111F48", VA = "0x1111F48")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, InteropHelp.UTF8StringHandle pchHeaderValue);

		[PreserveSig]
		[Token(Token = "0x600090D")]
		[Address(RVA = "0x111208C", Offset = "0x111208C", VA = "0x111208C")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchParamName, InteropHelp.UTF8StringHandle pchParamValue);

		[PreserveSig]
		[Token(Token = "0x600090E")]
		[Address(RVA = "0x11121D0", Offset = "0x11121D0", VA = "0x11121D0")]
		public static extern bool ISteamGameServerHTTP_SendHTTPRequest(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle);

		[PreserveSig]
		[Token(Token = "0x600090F")]
		[Address(RVA = "0x1112288", Offset = "0x1112288", VA = "0x1112288")]
		public static extern bool ISteamGameServerHTTP_SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle);

		[PreserveSig]
		[Token(Token = "0x6000910")]
		[Address(RVA = "0x1112340", Offset = "0x1112340", VA = "0x1112340")]
		public static extern bool ISteamGameServerHTTP_DeferHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x6000911")]
		[Address(RVA = "0x11123E8", Offset = "0x11123E8", VA = "0x11123E8")]
		public static extern bool ISteamGameServerHTTP_PrioritizeHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x6000912")]
		[Address(RVA = "0x1112490", Offset = "0x1112490", VA = "0x1112490")]
		public static extern bool ISteamGameServerHTTP_GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, out uint unResponseHeaderSize);

		[PreserveSig]
		[Token(Token = "0x6000913")]
		[Address(RVA = "0x1112590", Offset = "0x1112590", VA = "0x1112590")]
		public static extern bool ISteamGameServerHTTP_GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, [In][Out] byte[] pHeaderValueBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000914")]
		[Address(RVA = "0x11126A8", Offset = "0x11126A8", VA = "0x11126A8")]
		public static extern bool ISteamGameServerHTTP_GetHTTPResponseBodySize(HTTPRequestHandle hRequest, out uint unBodySize);

		[PreserveSig]
		[Token(Token = "0x6000915")]
		[Address(RVA = "0x1112760", Offset = "0x1112760", VA = "0x1112760")]
		public static extern bool ISteamGameServerHTTP_GetHTTPResponseBodyData(HTTPRequestHandle hRequest, [In][Out] byte[] pBodyDataBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000916")]
		[Address(RVA = "0x1112828", Offset = "0x1112828", VA = "0x1112828")]
		public static extern bool ISteamGameServerHTTP_GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, uint cOffset, [In][Out] byte[] pBodyDataBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000917")]
		[Address(RVA = "0x1112900", Offset = "0x1112900", VA = "0x1112900")]
		public static extern bool ISteamGameServerHTTP_ReleaseHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x6000918")]
		[Address(RVA = "0x11129A8", Offset = "0x11129A8", VA = "0x11129A8")]
		public static extern bool ISteamGameServerHTTP_GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, out float pflPercentOut);

		[PreserveSig]
		[Token(Token = "0x6000919")]
		[Address(RVA = "0x1112A60", Offset = "0x1112A60", VA = "0x1112A60")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchContentType, [In][Out] byte[] pubBody, uint unBodyLen);

		[PreserveSig]
		[Token(Token = "0x600091A")]
		[Address(RVA = "0x1112B78", Offset = "0x1112B78", VA = "0x1112B78")]
		public static extern uint ISteamGameServerHTTP_CreateCookieContainer(bool bAllowResponsesToModify);

		[PreserveSig]
		[Token(Token = "0x600091B")]
		[Address(RVA = "0x1112C18", Offset = "0x1112C18", VA = "0x1112C18")]
		public static extern bool ISteamGameServerHTTP_ReleaseCookieContainer(HTTPCookieContainerHandle hCookieContainer);

		[PreserveSig]
		[Token(Token = "0x600091C")]
		[Address(RVA = "0x1112CC0", Offset = "0x1112CC0", VA = "0x1112CC0")]
		public static extern bool ISteamGameServerHTTP_SetCookie(HTTPCookieContainerHandle hCookieContainer, InteropHelp.UTF8StringHandle pchHost, InteropHelp.UTF8StringHandle pchUrl, InteropHelp.UTF8StringHandle pchCookie);

		[PreserveSig]
		[Token(Token = "0x600091D")]
		[Address(RVA = "0x1112E50", Offset = "0x1112E50", VA = "0x1112E50")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestCookieContainer(HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer);

		[PreserveSig]
		[Token(Token = "0x600091E")]
		[Address(RVA = "0x1112F08", Offset = "0x1112F08", VA = "0x1112F08")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestUserAgentInfo(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchUserAgentInfo);

		[PreserveSig]
		[Token(Token = "0x600091F")]
		[Address(RVA = "0x1113000", Offset = "0x1113000", VA = "0x1113000")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestRequiresVerifiedCertificate(HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate);

		[PreserveSig]
		[Token(Token = "0x6000920")]
		[Address(RVA = "0x11130B8", Offset = "0x11130B8", VA = "0x11130B8")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestAbsoluteTimeoutMS(HTTPRequestHandle hRequest, uint unMilliseconds);

		[PreserveSig]
		[Token(Token = "0x6000921")]
		[Address(RVA = "0x1113170", Offset = "0x1113170", VA = "0x1113170")]
		public static extern bool ISteamGameServerHTTP_GetHTTPRequestWasTimedOut(HTTPRequestHandle hRequest, out bool pbWasTimedOut);

		[PreserveSig]
		[Token(Token = "0x6000922")]
		[Address(RVA = "0x111323C", Offset = "0x111323C", VA = "0x111323C")]
		public static extern EResult ISteamGameServerInventory_GetResultStatus(SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x6000923")]
		[Address(RVA = "0x11132DC", Offset = "0x11132DC", VA = "0x11132DC")]
		public static extern bool ISteamGameServerInventory_GetResultItems(SteamInventoryResult_t resultHandle, [In][Out] SteamItemDetails_t[] pOutItemsArray, ref uint punOutItemsArraySize);

		[PreserveSig]
		[Token(Token = "0x6000924")]
		[Address(RVA = "0x11133A4", Offset = "0x11133A4", VA = "0x11133A4")]
		public static extern uint ISteamGameServerInventory_GetResultTimestamp(SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x6000925")]
		[Address(RVA = "0x1113444", Offset = "0x1113444", VA = "0x1113444")]
		public static extern bool ISteamGameServerInventory_CheckResultSteamID(SteamInventoryResult_t resultHandle, CSteamID steamIDExpected);

		[PreserveSig]
		[Token(Token = "0x6000926")]
		[Address(RVA = "0x11134FC", Offset = "0x11134FC", VA = "0x11134FC")]
		public static extern void ISteamGameServerInventory_DestroyResult(SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x6000927")]
		[Address(RVA = "0x111359C", Offset = "0x111359C", VA = "0x111359C")]
		public static extern bool ISteamGameServerInventory_GetAllItems(out SteamInventoryResult_t pResultHandle);

		[PreserveSig]
		[Token(Token = "0x6000928")]
		[Address(RVA = "0x1113644", Offset = "0x1113644", VA = "0x1113644")]
		public static extern bool ISteamGameServerInventory_GetItemsByID(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemInstanceID_t[] pInstanceIDs, uint unCountInstanceIDs);

		[PreserveSig]
		[Token(Token = "0x6000929")]
		[Address(RVA = "0x111370C", Offset = "0x111370C", VA = "0x111370C")]
		public static extern bool ISteamGameServerInventory_SerializeResult(SteamInventoryResult_t resultHandle, [In][Out] byte[] pOutBuffer, out uint punOutBufferSize);

		[PreserveSig]
		[Token(Token = "0x600092A")]
		[Address(RVA = "0x11137D4", Offset = "0x11137D4", VA = "0x11137D4")]
		public static extern bool ISteamGameServerInventory_DeserializeResult(out SteamInventoryResult_t pOutResultHandle, [In][Out] byte[] pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE);

		[PreserveSig]
		[Token(Token = "0x600092B")]
		[Address(RVA = "0x11138AC", Offset = "0x11138AC", VA = "0x11138AC")]
		public static extern bool ISteamGameServerInventory_GenerateItems(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayItemDefs, [In][Out] uint[] punArrayQuantity, uint unArrayLength);

		[PreserveSig]
		[Token(Token = "0x600092C")]
		[Address(RVA = "0x111398C", Offset = "0x111398C", VA = "0x111398C")]
		public static extern bool ISteamGameServerInventory_GrantPromoItems(out SteamInventoryResult_t pResultHandle);

		[PreserveSig]
		[Token(Token = "0x600092D")]
		[Address(RVA = "0x1113A34", Offset = "0x1113A34", VA = "0x1113A34")]
		public static extern bool ISteamGameServerInventory_AddPromoItem(out SteamInventoryResult_t pResultHandle, SteamItemDef_t itemDef);

		[PreserveSig]
		[Token(Token = "0x600092E")]
		[Address(RVA = "0x1113AEC", Offset = "0x1113AEC", VA = "0x1113AEC")]
		public static extern bool ISteamGameServerInventory_AddPromoItems(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayItemDefs, uint unArrayLength);

		[PreserveSig]
		[Token(Token = "0x600092F")]
		[Address(RVA = "0x1113BB4", Offset = "0x1113BB4", VA = "0x1113BB4")]
		public static extern bool ISteamGameServerInventory_ConsumeItem(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemConsume, uint unQuantity);

		[PreserveSig]
		[Token(Token = "0x6000930")]
		[Address(RVA = "0x1113C74", Offset = "0x1113C74", VA = "0x1113C74")]
		public static extern bool ISteamGameServerInventory_ExchangeItems(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayGenerate, [In][Out] uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, [In][Out] SteamItemInstanceID_t[] pArrayDestroy, [In][Out] uint[] punArrayDestroyQuantity, uint unArrayDestroyLength);

		[PreserveSig]
		[Token(Token = "0x6000931")]
		[Address(RVA = "0x1113D84", Offset = "0x1113D84", VA = "0x1113D84")]
		public static extern bool ISteamGameServerInventory_TransferItemQuantity(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemIdSource, uint unQuantity, SteamItemInstanceID_t itemIdDest);

		[PreserveSig]
		[Token(Token = "0x6000932")]
		[Address(RVA = "0x1113E54", Offset = "0x1113E54", VA = "0x1113E54")]
		public static extern void ISteamGameServerInventory_SendItemDropHeartbeat();

		[PreserveSig]
		[Token(Token = "0x6000933")]
		[Address(RVA = "0x1113EE4", Offset = "0x1113EE4", VA = "0x1113EE4")]
		public static extern bool ISteamGameServerInventory_TriggerItemDrop(out SteamInventoryResult_t pResultHandle, SteamItemDef_t dropListDefinition);

		[PreserveSig]
		[Token(Token = "0x6000934")]
		[Address(RVA = "0x1113F9C", Offset = "0x1113F9C", VA = "0x1113F9C")]
		public static extern bool ISteamGameServerInventory_TradeItems(out SteamInventoryResult_t pResultHandle, CSteamID steamIDTradePartner, [In][Out] SteamItemInstanceID_t[] pArrayGive, [In][Out] uint[] pArrayGiveQuantity, uint nArrayGiveLength, [In][Out] SteamItemInstanceID_t[] pArrayGet, [In][Out] uint[] pArrayGetQuantity, uint nArrayGetLength);

		[PreserveSig]
		[Token(Token = "0x6000935")]
		[Address(RVA = "0x11140BC", Offset = "0x11140BC", VA = "0x11140BC")]
		public static extern bool ISteamGameServerInventory_LoadItemDefinitions();

		[PreserveSig]
		[Token(Token = "0x6000936")]
		[Address(RVA = "0x1114154", Offset = "0x1114154", VA = "0x1114154")]
		public static extern bool ISteamGameServerInventory_GetItemDefinitionIDs([In][Out] SteamItemDef_t[] pItemDefIDs, out uint punItemDefIDsArraySize);

		[PreserveSig]
		[Token(Token = "0x6000937")]
		[Address(RVA = "0x1114214", Offset = "0x1114214", VA = "0x1114214")]
		public static extern bool ISteamGameServerInventory_GetItemDefinitionProperty(SteamItemDef_t iDefinition, InteropHelp.UTF8StringHandle pchPropertyName, IntPtr pchValueBuffer, ref uint punValueBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000938")]
		[Address(RVA = "0x1114324", Offset = "0x1114324", VA = "0x1114324")]
		public static extern bool ISteamGameServerNetworking_SendP2PPacket(CSteamID steamIDRemote, [In][Out] byte[] pubData, uint cubData, EP2PSend eP2PSendType, int nChannel);

		[PreserveSig]
		[Token(Token = "0x6000939")]
		[Address(RVA = "0x1114404", Offset = "0x1114404", VA = "0x1114404")]
		public static extern bool ISteamGameServerNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel);

		[PreserveSig]
		[Token(Token = "0x600093A")]
		[Address(RVA = "0x11144BC", Offset = "0x11144BC", VA = "0x11144BC")]
		public static extern bool ISteamGameServerNetworking_ReadP2PPacket([In][Out] byte[] pubDest, uint cubDest, out uint pcubMsgSize, out CSteamID psteamIDRemote, int nChannel);

		[PreserveSig]
		[Token(Token = "0x600093B")]
		[Address(RVA = "0x111459C", Offset = "0x111459C", VA = "0x111459C")]
		public static extern bool ISteamGameServerNetworking_AcceptP2PSessionWithUser(CSteamID steamIDRemote);

		[PreserveSig]
		[Token(Token = "0x600093C")]
		[Address(RVA = "0x1114644", Offset = "0x1114644", VA = "0x1114644")]
		public static extern bool ISteamGameServerNetworking_CloseP2PSessionWithUser(CSteamID steamIDRemote);

		[PreserveSig]
		[Token(Token = "0x600093D")]
		[Address(RVA = "0x11146EC", Offset = "0x11146EC", VA = "0x11146EC")]
		public static extern bool ISteamGameServerNetworking_CloseP2PChannelWithUser(CSteamID steamIDRemote, int nChannel);

		[PreserveSig]
		[Token(Token = "0x600093E")]
		[Address(RVA = "0x11147A4", Offset = "0x11147A4", VA = "0x11147A4")]
		public static extern bool ISteamGameServerNetworking_GetP2PSessionState(CSteamID steamIDRemote, out P2PSessionState_t pConnectionState);

		[PreserveSig]
		[Token(Token = "0x600093F")]
		[Address(RVA = "0x111485C", Offset = "0x111485C", VA = "0x111485C")]
		public static extern bool ISteamGameServerNetworking_AllowP2PPacketRelay(bool bAllow);

		[PreserveSig]
		[Token(Token = "0x6000940")]
		[Address(RVA = "0x1114904", Offset = "0x1114904", VA = "0x1114904")]
		public static extern uint ISteamGameServerNetworking_CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay);

		[PreserveSig]
		[Token(Token = "0x6000941")]
		[Address(RVA = "0x11149CC", Offset = "0x11149CC", VA = "0x11149CC")]
		public static extern uint ISteamGameServerNetworking_CreateP2PConnectionSocket(CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay);

		[PreserveSig]
		[Token(Token = "0x6000942")]
		[Address(RVA = "0x1114A94", Offset = "0x1114A94", VA = "0x1114A94")]
		public static extern uint ISteamGameServerNetworking_CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec);

		[PreserveSig]
		[Token(Token = "0x6000943")]
		[Address(RVA = "0x1114B4C", Offset = "0x1114B4C", VA = "0x1114B4C")]
		public static extern bool ISteamGameServerNetworking_DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd);

		[PreserveSig]
		[Token(Token = "0x6000944")]
		[Address(RVA = "0x1114C04", Offset = "0x1114C04", VA = "0x1114C04")]
		public static extern bool ISteamGameServerNetworking_DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd);

		[PreserveSig]
		[Token(Token = "0x6000945")]
		[Address(RVA = "0x1114CBC", Offset = "0x1114CBC", VA = "0x1114CBC")]
		public static extern bool ISteamGameServerNetworking_SendDataOnSocket(SNetSocket_t hSocket, IntPtr pubData, uint cubData, bool bReliable);

		[PreserveSig]
		[Token(Token = "0x6000946")]
		[Address(RVA = "0x1114D8C", Offset = "0x1114D8C", VA = "0x1114D8C")]
		public static extern bool ISteamGameServerNetworking_IsDataAvailableOnSocket(SNetSocket_t hSocket, out uint pcubMsgSize);

		[PreserveSig]
		[Token(Token = "0x6000947")]
		[Address(RVA = "0x1114E44", Offset = "0x1114E44", VA = "0x1114E44")]
		public static extern bool ISteamGameServerNetworking_RetrieveDataFromSocket(SNetSocket_t hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize);

		[PreserveSig]
		[Token(Token = "0x6000948")]
		[Address(RVA = "0x1114F14", Offset = "0x1114F14", VA = "0x1114F14")]
		public static extern bool ISteamGameServerNetworking_IsDataAvailable(SNetListenSocket_t hListenSocket, out uint pcubMsgSize, out SNetSocket_t phSocket);

		[PreserveSig]
		[Token(Token = "0x6000949")]
		[Address(RVA = "0x1114FD4", Offset = "0x1114FD4", VA = "0x1114FD4")]
		public static extern bool ISteamGameServerNetworking_RetrieveData(SNetListenSocket_t hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out SNetSocket_t phSocket);

		[PreserveSig]
		[Token(Token = "0x600094A")]
		[Address(RVA = "0x11150AC", Offset = "0x11150AC", VA = "0x11150AC")]
		public static extern bool ISteamGameServerNetworking_GetSocketInfo(SNetSocket_t hSocket, out CSteamID pSteamIDRemote, out int peSocketStatus, out uint punIPRemote, out ushort punPortRemote);

		[PreserveSig]
		[Token(Token = "0x600094B")]
		[Address(RVA = "0x1115184", Offset = "0x1115184", VA = "0x1115184")]
		public static extern bool ISteamGameServerNetworking_GetListenSocketInfo(SNetListenSocket_t hListenSocket, out uint pnIP, out ushort pnPort);

		[PreserveSig]
		[Token(Token = "0x600094C")]
		[Address(RVA = "0x1115244", Offset = "0x1115244", VA = "0x1115244")]
		public static extern ESNetSocketConnectionType ISteamGameServerNetworking_GetSocketConnectionType(SNetSocket_t hSocket);

		[PreserveSig]
		[Token(Token = "0x600094D")]
		[Address(RVA = "0x11152E4", Offset = "0x11152E4", VA = "0x11152E4")]
		public static extern int ISteamGameServerNetworking_GetMaxPacketSize(SNetSocket_t hSocket);

		[PreserveSig]
		[Token(Token = "0x600094E")]
		[Address(RVA = "0x1115384", Offset = "0x1115384", VA = "0x1115384")]
		public static extern ulong ISteamGameServerUGC_CreateQueryUserUGCRequest(AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage);

		[PreserveSig]
		[Token(Token = "0x600094F")]
		[Address(RVA = "0x111546C", Offset = "0x111546C", VA = "0x111546C")]
		public static extern ulong ISteamGameServerUGC_CreateQueryAllUGCRequest(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage);

		[PreserveSig]
		[Token(Token = "0x6000950")]
		[Address(RVA = "0x111553C", Offset = "0x111553C", VA = "0x111553C")]
		public static extern ulong ISteamGameServerUGC_CreateQueryUGCDetailsRequest([In][Out] PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs);

		[PreserveSig]
		[Token(Token = "0x6000951")]
		[Address(RVA = "0x11155F4", Offset = "0x11155F4", VA = "0x11155F4")]
		public static extern ulong ISteamGameServerUGC_SendQueryUGCRequest(UGCQueryHandle_t handle);

		[PreserveSig]
		[Token(Token = "0x6000952")]
		[Address(RVA = "0x1115694", Offset = "0x1115694", VA = "0x1115694")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCResult(UGCQueryHandle_t handle, uint index, out SteamUGCDetails_t pDetails);

		[PreserveSig]
		[Token(Token = "0x6000953")]
		[Address(RVA = "0x11157AC", Offset = "0x11157AC", VA = "0x11157AC")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCPreviewURL(UGCQueryHandle_t handle, uint index, IntPtr pchURL, uint cchURLSize);

		[PreserveSig]
		[Token(Token = "0x6000954")]
		[Address(RVA = "0x111587C", Offset = "0x111587C", VA = "0x111587C")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCMetadata(UGCQueryHandle_t handle, uint index, IntPtr pchMetadata, uint cchMetadatasize);

		[PreserveSig]
		[Token(Token = "0x6000955")]
		[Address(RVA = "0x111594C", Offset = "0x111594C", VA = "0x111594C")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCChildren(UGCQueryHandle_t handle, uint index, [In][Out] PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries);

		[PreserveSig]
		[Token(Token = "0x6000956")]
		[Address(RVA = "0x1115A24", Offset = "0x1115A24", VA = "0x1115A24")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCStatistic(UGCQueryHandle_t handle, uint index, EItemStatistic eStatType, out uint pStatValue);

		[PreserveSig]
		[Token(Token = "0x6000957")]
		[Address(RVA = "0x1115AF4", Offset = "0x1115AF4", VA = "0x1115AF4")]
		public static extern uint ISteamGameServerUGC_GetQueryUGCNumAdditionalPreviews(UGCQueryHandle_t handle, uint index);

		[PreserveSig]
		[Token(Token = "0x6000958")]
		[Address(RVA = "0x1115BA4", Offset = "0x1115BA4", VA = "0x1115BA4")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCAdditionalPreview(UGCQueryHandle_t handle, uint index, uint previewIndex, IntPtr pchURLOrVideoID, uint cchURLSize, out bool pbIsImage);

		[PreserveSig]
		[Token(Token = "0x6000959")]
		[Address(RVA = "0x1115CA0", Offset = "0x1115CA0", VA = "0x1115CA0")]
		public static extern uint ISteamGameServerUGC_GetQueryUGCNumKeyValueTags(UGCQueryHandle_t handle, uint index);

		[PreserveSig]
		[Token(Token = "0x600095A")]
		[Address(RVA = "0x1115D50", Offset = "0x1115D50", VA = "0x1115D50")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, uint index, uint keyValueTagIndex, IntPtr pchKey, uint cchKeySize, IntPtr pchValue, uint cchValueSize);

		[PreserveSig]
		[Token(Token = "0x600095B")]
		[Address(RVA = "0x1115E40", Offset = "0x1115E40", VA = "0x1115E40")]
		public static extern bool ISteamGameServerUGC_ReleaseQueryUGCRequest(UGCQueryHandle_t handle);

		[PreserveSig]
		[Token(Token = "0x600095C")]
		[Address(RVA = "0x1115EE8", Offset = "0x1115EE8", VA = "0x1115EE8")]
		public static extern bool ISteamGameServerUGC_AddRequiredTag(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pTagName);

		[PreserveSig]
		[Token(Token = "0x600095D")]
		[Address(RVA = "0x1115FE0", Offset = "0x1115FE0", VA = "0x1115FE0")]
		public static extern bool ISteamGameServerUGC_AddExcludedTag(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pTagName);

		[PreserveSig]
		[Token(Token = "0x600095E")]
		[Address(RVA = "0x11160D8", Offset = "0x11160D8", VA = "0x11160D8")]
		public static extern bool ISteamGameServerUGC_SetReturnKeyValueTags(UGCQueryHandle_t handle, bool bReturnKeyValueTags);

		[PreserveSig]
		[Token(Token = "0x600095F")]
		[Address(RVA = "0x1116190", Offset = "0x1116190", VA = "0x1116190")]
		public static extern bool ISteamGameServerUGC_SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription);

		[PreserveSig]
		[Token(Token = "0x6000960")]
		[Address(RVA = "0x1116248", Offset = "0x1116248", VA = "0x1116248")]
		public static extern bool ISteamGameServerUGC_SetReturnMetadata(UGCQueryHandle_t handle, bool bReturnMetadata);

		[PreserveSig]
		[Token(Token = "0x6000961")]
		[Address(RVA = "0x1116300", Offset = "0x1116300", VA = "0x1116300")]
		public static extern bool ISteamGameServerUGC_SetReturnChildren(UGCQueryHandle_t handle, bool bReturnChildren);

		[PreserveSig]
		[Token(Token = "0x6000962")]
		[Address(RVA = "0x11163B8", Offset = "0x11163B8", VA = "0x11163B8")]
		public static extern bool ISteamGameServerUGC_SetReturnAdditionalPreviews(UGCQueryHandle_t handle, bool bReturnAdditionalPreviews);

		[PreserveSig]
		[Token(Token = "0x6000963")]
		[Address(RVA = "0x1116470", Offset = "0x1116470", VA = "0x1116470")]
		public static extern bool ISteamGameServerUGC_SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly);

		[PreserveSig]
		[Token(Token = "0x6000964")]
		[Address(RVA = "0x1116528", Offset = "0x1116528", VA = "0x1116528")]
		public static extern bool ISteamGameServerUGC_SetLanguage(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pchLanguage);

		[PreserveSig]
		[Token(Token = "0x6000965")]
		[Address(RVA = "0x1116620", Offset = "0x1116620", VA = "0x1116620")]
		public static extern bool ISteamGameServerUGC_SetAllowCachedResponse(UGCQueryHandle_t handle, uint unMaxAgeSeconds);

		[PreserveSig]
		[Token(Token = "0x6000966")]
		[Address(RVA = "0x11166D8", Offset = "0x11166D8", VA = "0x11166D8")]
		public static extern bool ISteamGameServerUGC_SetCloudFileNameFilter(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pMatchCloudFileName);

		[PreserveSig]
		[Token(Token = "0x6000967")]
		[Address(RVA = "0x11167D0", Offset = "0x11167D0", VA = "0x11167D0")]
		public static extern bool ISteamGameServerUGC_SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag);

		[PreserveSig]
		[Token(Token = "0x6000968")]
		[Address(RVA = "0x1116888", Offset = "0x1116888", VA = "0x1116888")]
		public static extern bool ISteamGameServerUGC_SetSearchText(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pSearchText);

		[PreserveSig]
		[Token(Token = "0x6000969")]
		[Address(RVA = "0x1116980", Offset = "0x1116980", VA = "0x1116980")]
		public static extern bool ISteamGameServerUGC_SetRankedByTrendDays(UGCQueryHandle_t handle, uint unDays);

		[PreserveSig]
		[Token(Token = "0x600096A")]
		[Address(RVA = "0x1116A38", Offset = "0x1116A38", VA = "0x1116A38")]
		public static extern bool ISteamGameServerUGC_AddRequiredKeyValueTag(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pKey, InteropHelp.UTF8StringHandle pValue);

		[PreserveSig]
		[Token(Token = "0x600096B")]
		[Address(RVA = "0x1116B7C", Offset = "0x1116B7C", VA = "0x1116B7C")]
		public static extern ulong ISteamGameServerUGC_RequestUGCDetails(PublishedFileId_t nPublishedFileID, uint unMaxAgeSeconds);

		[PreserveSig]
		[Token(Token = "0x600096C")]
		[Address(RVA = "0x1116C2C", Offset = "0x1116C2C", VA = "0x1116C2C")]
		public static extern ulong ISteamGameServerUGC_CreateItem(AppId_t nConsumerAppId, EWorkshopFileType eFileType);

		[PreserveSig]
		[Token(Token = "0x600096D")]
		[Address(RVA = "0x1116CDC", Offset = "0x1116CDC", VA = "0x1116CDC")]
		public static extern ulong ISteamGameServerUGC_StartItemUpdate(AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x600096E")]
		[Address(RVA = "0x1116D8C", Offset = "0x1116D8C", VA = "0x1116D8C")]
		public static extern bool ISteamGameServerUGC_SetItemTitle(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchTitle);

		[PreserveSig]
		[Token(Token = "0x600096F")]
		[Address(RVA = "0x1116E84", Offset = "0x1116E84", VA = "0x1116E84")]
		public static extern bool ISteamGameServerUGC_SetItemDescription(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchDescription);

		[PreserveSig]
		[Token(Token = "0x6000970")]
		[Address(RVA = "0x1116F7C", Offset = "0x1116F7C", VA = "0x1116F7C")]
		public static extern bool ISteamGameServerUGC_SetItemUpdateLanguage(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchLanguage);

		[PreserveSig]
		[Token(Token = "0x6000971")]
		[Address(RVA = "0x1117074", Offset = "0x1117074", VA = "0x1117074")]
		public static extern bool ISteamGameServerUGC_SetItemMetadata(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchMetaData);

		[PreserveSig]
		[Token(Token = "0x6000972")]
		[Address(RVA = "0x111716C", Offset = "0x111716C", VA = "0x111716C")]
		public static extern bool ISteamGameServerUGC_SetItemVisibility(UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility);

		[PreserveSig]
		[Token(Token = "0x6000973")]
		[Address(RVA = "0x1117224", Offset = "0x1117224", VA = "0x1117224")]
		public static extern bool ISteamGameServerUGC_SetItemTags(UGCUpdateHandle_t updateHandle, IntPtr pTags);

		[PreserveSig]
		[Token(Token = "0x6000974")]
		[Address(RVA = "0x11172DC", Offset = "0x11172DC", VA = "0x11172DC")]
		public static extern bool ISteamGameServerUGC_SetItemContent(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszContentFolder);

		[PreserveSig]
		[Token(Token = "0x6000975")]
		[Address(RVA = "0x11173D4", Offset = "0x11173D4", VA = "0x11173D4")]
		public static extern bool ISteamGameServerUGC_SetItemPreview(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszPreviewFile);

		[PreserveSig]
		[Token(Token = "0x6000976")]
		[Address(RVA = "0x11174CC", Offset = "0x11174CC", VA = "0x11174CC")]
		public static extern bool ISteamGameServerUGC_RemoveItemKeyValueTags(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x6000977")]
		[Address(RVA = "0x11175C4", Offset = "0x11175C4", VA = "0x11175C4")]
		public static extern bool ISteamGameServerUGC_AddItemKeyValueTag(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x6000978")]
		[Address(RVA = "0x1117708", Offset = "0x1117708", VA = "0x1117708")]
		public static extern ulong ISteamGameServerUGC_SubmitItemUpdate(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchChangeNote);

		[PreserveSig]
		[Token(Token = "0x6000979")]
		[Address(RVA = "0x11177FC", Offset = "0x11177FC", VA = "0x11177FC")]
		public static extern EItemUpdateStatus ISteamGameServerUGC_GetItemUpdateProgress(UGCUpdateHandle_t handle, out ulong punBytesProcessed, out ulong punBytesTotal);

		[PreserveSig]
		[Token(Token = "0x600097A")]
		[Address(RVA = "0x11178B4", Offset = "0x11178B4", VA = "0x11178B4")]
		public static extern ulong ISteamGameServerUGC_SetUserItemVote(PublishedFileId_t nPublishedFileID, bool bVoteUp);

		[PreserveSig]
		[Token(Token = "0x600097B")]
		[Address(RVA = "0x1117964", Offset = "0x1117964", VA = "0x1117964")]
		public static extern ulong ISteamGameServerUGC_GetUserItemVote(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x600097C")]
		[Address(RVA = "0x1117A04", Offset = "0x1117A04", VA = "0x1117A04")]
		public static extern ulong ISteamGameServerUGC_AddItemToFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x600097D")]
		[Address(RVA = "0x1117AB4", Offset = "0x1117AB4", VA = "0x1117AB4")]
		public static extern ulong ISteamGameServerUGC_RemoveItemFromFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x600097E")]
		[Address(RVA = "0x1117B64", Offset = "0x1117B64", VA = "0x1117B64")]
		public static extern ulong ISteamGameServerUGC_SubscribeItem(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x600097F")]
		[Address(RVA = "0x1117C04", Offset = "0x1117C04", VA = "0x1117C04")]
		public static extern ulong ISteamGameServerUGC_UnsubscribeItem(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x6000980")]
		[Address(RVA = "0x1117CA4", Offset = "0x1117CA4", VA = "0x1117CA4")]
		public static extern uint ISteamGameServerUGC_GetNumSubscribedItems();

		[PreserveSig]
		[Token(Token = "0x6000981")]
		[Address(RVA = "0x1117D34", Offset = "0x1117D34", VA = "0x1117D34")]
		public static extern uint ISteamGameServerUGC_GetSubscribedItems([In][Out] PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries);

		[PreserveSig]
		[Token(Token = "0x6000982")]
		[Address(RVA = "0x1117DEC", Offset = "0x1117DEC", VA = "0x1117DEC")]
		public static extern uint ISteamGameServerUGC_GetItemState(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x6000983")]
		[Address(RVA = "0x1117E8C", Offset = "0x1117E8C", VA = "0x1117E8C")]
		public static extern bool ISteamGameServerUGC_GetItemInstallInfo(PublishedFileId_t nPublishedFileID, out ulong punSizeOnDisk, IntPtr pchFolder, uint cchFolderSize, out uint punTimeStamp);

		[PreserveSig]
		[Token(Token = "0x6000984")]
		[Address(RVA = "0x1117F64", Offset = "0x1117F64", VA = "0x1117F64")]
		public static extern bool ISteamGameServerUGC_GetItemDownloadInfo(PublishedFileId_t nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal);

		[PreserveSig]
		[Token(Token = "0x6000985")]
		[Address(RVA = "0x1118024", Offset = "0x1118024", VA = "0x1118024")]
		public static extern bool ISteamGameServerUGC_DownloadItem(PublishedFileId_t nPublishedFileID, bool bHighPriority);

		[PreserveSig]
		[Token(Token = "0x6000986")]
		[Address(RVA = "0x11180DC", Offset = "0x11180DC", VA = "0x11180DC")]
		public static extern uint ISteamGameServerUtils_GetSecondsSinceAppActive();

		[PreserveSig]
		[Token(Token = "0x6000987")]
		[Address(RVA = "0x111816C", Offset = "0x111816C", VA = "0x111816C")]
		public static extern uint ISteamGameServerUtils_GetSecondsSinceComputerActive();

		[PreserveSig]
		[Token(Token = "0x6000988")]
		[Address(RVA = "0x11181FC", Offset = "0x11181FC", VA = "0x11181FC")]
		public static extern EUniverse ISteamGameServerUtils_GetConnectedUniverse();

		[PreserveSig]
		[Token(Token = "0x6000989")]
		[Address(RVA = "0x111828C", Offset = "0x111828C", VA = "0x111828C")]
		public static extern uint ISteamGameServerUtils_GetServerRealTime();

		[PreserveSig]
		[Token(Token = "0x600098A")]
		[Address(RVA = "0x111831C", Offset = "0x111831C", VA = "0x111831C")]
		public static extern IntPtr ISteamGameServerUtils_GetIPCountry();

		[PreserveSig]
		[Token(Token = "0x600098B")]
		[Address(RVA = "0x11183AC", Offset = "0x11183AC", VA = "0x11183AC")]
		public static extern bool ISteamGameServerUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight);

		[PreserveSig]
		[Token(Token = "0x600098C")]
		[Address(RVA = "0x111846C", Offset = "0x111846C", VA = "0x111846C")]
		public static extern bool ISteamGameServerUtils_GetImageRGBA(int iImage, [In][Out] byte[] pubDest, int nDestBufferSize);

		[PreserveSig]
		[Token(Token = "0x600098D")]
		[Address(RVA = "0x1118534", Offset = "0x1118534", VA = "0x1118534")]
		public static extern bool ISteamGameServerUtils_GetCSERIPPort(out uint unIP, out ushort usPort);

		[PreserveSig]
		[Token(Token = "0x600098E")]
		[Address(RVA = "0x11185EC", Offset = "0x11185EC", VA = "0x11185EC")]
		public static extern byte ISteamGameServerUtils_GetCurrentBatteryPower();

		[PreserveSig]
		[Token(Token = "0x600098F")]
		[Address(RVA = "0x111867C", Offset = "0x111867C", VA = "0x111867C")]
		public static extern uint ISteamGameServerUtils_GetAppID();

		[PreserveSig]
		[Token(Token = "0x6000990")]
		[Address(RVA = "0x111870C", Offset = "0x111870C", VA = "0x111870C")]
		public static extern void ISteamGameServerUtils_SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition);

		[PreserveSig]
		[Token(Token = "0x6000991")]
		[Address(RVA = "0x11187AC", Offset = "0x11187AC", VA = "0x11187AC")]
		public static extern bool ISteamGameServerUtils_IsAPICallCompleted(SteamAPICall_t hSteamAPICall, out bool pbFailed);

		[PreserveSig]
		[Token(Token = "0x6000992")]
		[Address(RVA = "0x1118878", Offset = "0x1118878", VA = "0x1118878")]
		public static extern ESteamAPICallFailure ISteamGameServerUtils_GetAPICallFailureReason(SteamAPICall_t hSteamAPICall);

		[PreserveSig]
		[Token(Token = "0x6000993")]
		[Address(RVA = "0x1118918", Offset = "0x1118918", VA = "0x1118918")]
		public static extern bool ISteamGameServerUtils_GetAPICallResult(SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, out bool pbFailed);

		[PreserveSig]
		[Token(Token = "0x6000994")]
		[Address(RVA = "0x1118A04", Offset = "0x1118A04", VA = "0x1118A04")]
		public static extern void ISteamGameServerUtils_RunFrame();

		[PreserveSig]
		[Token(Token = "0x6000995")]
		[Address(RVA = "0x1118A94", Offset = "0x1118A94", VA = "0x1118A94")]
		public static extern uint ISteamGameServerUtils_GetIPCCallCount();

		[PreserveSig]
		[Token(Token = "0x6000996")]
		[Address(RVA = "0x1118B24", Offset = "0x1118B24", VA = "0x1118B24")]
		public static extern void ISteamGameServerUtils_SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction);

		[PreserveSig]
		[Token(Token = "0x6000997")]
		[Address(RVA = "0x1118BC8", Offset = "0x1118BC8", VA = "0x1118BC8")]
		public static extern bool ISteamGameServerUtils_IsOverlayEnabled();

		[PreserveSig]
		[Token(Token = "0x6000998")]
		[Address(RVA = "0x1118C60", Offset = "0x1118C60", VA = "0x1118C60")]
		public static extern bool ISteamGameServerUtils_BOverlayNeedsPresent();

		[PreserveSig]
		[Token(Token = "0x6000999")]
		[Address(RVA = "0x1118CF8", Offset = "0x1118CF8", VA = "0x1118CF8")]
		public static extern ulong ISteamGameServerUtils_CheckFileSignature(InteropHelp.UTF8StringHandle szFileName);

		[PreserveSig]
		[Token(Token = "0x600099A")]
		[Address(RVA = "0x1118DDC", Offset = "0x1118DDC", VA = "0x1118DDC")]
		public static extern bool ISteamGameServerUtils_ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, InteropHelp.UTF8StringHandle pchDescription, uint unCharMax, InteropHelp.UTF8StringHandle pchExistingText);

		[PreserveSig]
		[Token(Token = "0x600099B")]
		[Address(RVA = "0x1118F38", Offset = "0x1118F38", VA = "0x1118F38")]
		public static extern uint ISteamGameServerUtils_GetEnteredGamepadTextLength();

		[PreserveSig]
		[Token(Token = "0x600099C")]
		[Address(RVA = "0x1118FC8", Offset = "0x1118FC8", VA = "0x1118FC8")]
		public static extern bool ISteamGameServerUtils_GetEnteredGamepadTextInput(IntPtr pchText, uint cchText);

		[PreserveSig]
		[Token(Token = "0x600099D")]
		[Address(RVA = "0x1119080", Offset = "0x1119080", VA = "0x1119080")]
		public static extern IntPtr ISteamGameServerUtils_GetSteamUILanguage();

		[PreserveSig]
		[Token(Token = "0x600099E")]
		[Address(RVA = "0x1119110", Offset = "0x1119110", VA = "0x1119110")]
		public static extern bool ISteamGameServerUtils_IsSteamRunningInVR();

		[PreserveSig]
		[Token(Token = "0x600099F")]
		[Address(RVA = "0x11191A8", Offset = "0x11191A8", VA = "0x11191A8")]
		public static extern void ISteamGameServerUtils_SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset);
	}
	[Token(Token = "0x200009C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A513C", Offset = "0x9A513C")]
	public struct SteamAppInstalled_t
	{
		[Token(Token = "0x40003AF")]
		public const int k_iCallback = 3901;

		[Token(Token = "0x40003B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x200009D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5150", Offset = "0x9A5150")]
	public struct SteamAppUninstalled_t
	{
		[Token(Token = "0x40003B1")]
		public const int k_iCallback = 3902;

		[Token(Token = "0x40003B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x200009E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5164", Offset = "0x9A5164")]
	public struct DlcInstalled_t
	{
		[Token(Token = "0x40003B3")]
		public const int k_iCallback = 1005;

		[Token(Token = "0x40003B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x200009F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5178", Offset = "0x9A5178")]
	public struct RegisterActivationCodeResponse_t
	{
		[Token(Token = "0x40003B5")]
		public const int k_iCallback = 1008;

		[Token(Token = "0x40003B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ERegisterActivationCodeResult m_eResult;

		[Token(Token = "0x40003B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_unPackageRegistered;
	}
	[Token(Token = "0x20000A0")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A518C", Offset = "0x9A518C")]
	public struct AppProofOfPurchaseKeyResponse_t
	{
		[Token(Token = "0x40003B8")]
		public const int k_iCallback = 1013;

		[Token(Token = "0x40003B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40003BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_nAppID;

		[Token(Token = "0x40003BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_rgchKey;
	}
	[Token(Token = "0x20000A1")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A51A0", Offset = "0x9A51A0")]
	public struct NewLaunchQueryParameters_t
	{
		[Token(Token = "0x40003BC")]
		public const int k_iCallback = 1014;
	}
	[Token(Token = "0x20000A2")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A51B4", Offset = "0x9A51B4")]
	public struct PersonaStateChange_t
	{
		[Token(Token = "0x40003BD")]
		public const int k_iCallback = 304;

		[Token(Token = "0x40003BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamID;

		[Token(Token = "0x40003BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EPersonaChange m_nChangeFlags;
	}
	[Token(Token = "0x20000A3")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A51C8", Offset = "0x9A51C8")]
	public struct GameOverlayActivated_t
	{
		[Token(Token = "0x40003C0")]
		public const int k_iCallback = 331;

		[Token(Token = "0x40003C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bActive;
	}
	[Token(Token = "0x20000A4")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A51DC", Offset = "0x9A51DC")]
	public struct GameServerChangeRequested_t
	{
		[Token(Token = "0x40003C2")]
		public const int k_iCallback = 332;

		[Token(Token = "0x40003C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_rgchServer;

		[Token(Token = "0x40003C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_rgchPassword;
	}
	[Token(Token = "0x20000A5")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A51F0", Offset = "0x9A51F0")]
	public struct GameLobbyJoinRequested_t
	{
		[Token(Token = "0x40003C5")]
		public const int k_iCallback = 333;

		[Token(Token = "0x40003C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDLobby;

		[Token(Token = "0x40003C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDFriend;
	}
	[Token(Token = "0x20000A6")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5204", Offset = "0x9A5204")]
	public struct AvatarImageLoaded_t
	{
		[Token(Token = "0x40003C8")]
		public const int k_iCallback = 334;

		[Token(Token = "0x40003C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamID;

		[Token(Token = "0x40003CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_iImage;

		[Token(Token = "0x40003CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_iWide;

		[Token(Token = "0x40003CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_iTall;
	}
	[Token(Token = "0x20000A7")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5218", Offset = "0x9A5218")]
	public struct ClanOfficerListResponse_t
	{
		[Token(Token = "0x40003CD")]
		public const int k_iCallback = 335;

		[Token(Token = "0x40003CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClan;

		[Token(Token = "0x40003CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_cOfficers;

		[Token(Token = "0x40003D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public byte m_bSuccess;
	}
	[Token(Token = "0x20000A8")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A522C", Offset = "0x9A522C")]
	public struct FriendRichPresenceUpdate_t
	{
		[Token(Token = "0x40003D1")]
		public const int k_iCallback = 336;

		[Token(Token = "0x40003D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDFriend;

		[Token(Token = "0x40003D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x20000A9")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5240", Offset = "0x9A5240")]
	public struct GameRichPresenceJoinRequested_t
	{
		[Token(Token = "0x40003D4")]
		public const int k_iCallback = 337;

		[Token(Token = "0x40003D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDFriend;

		[Token(Token = "0x40003D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_rgchConnect;
	}
	[Token(Token = "0x20000AA")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5254", Offset = "0x9A5254")]
	public struct GameConnectedClanChatMsg_t
	{
		[Token(Token = "0x40003D7")]
		public const int k_iCallback = 338;

		[Token(Token = "0x40003D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClanChat;

		[Token(Token = "0x40003D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDUser;

		[Token(Token = "0x40003DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_iMessageID;
	}
	[Token(Token = "0x20000AB")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5268", Offset = "0x9A5268")]
	public struct GameConnectedChatJoin_t
	{
		[Token(Token = "0x40003DB")]
		public const int k_iCallback = 339;

		[Token(Token = "0x40003DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClanChat;

		[Token(Token = "0x40003DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x20000AC")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A527C", Offset = "0x9A527C")]
	public struct GameConnectedChatLeave_t
	{
		[Token(Token = "0x40003DE")]
		public const int k_iCallback = 340;

		[Token(Token = "0x40003DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClanChat;

		[Token(Token = "0x40003E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDUser;

		[Token(Token = "0x40003E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bKicked;

		[Token(Token = "0x40003E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool m_bDropped;
	}
	[Token(Token = "0x20000AD")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5290", Offset = "0x9A5290")]
	public struct DownloadClanActivityCountsResult_t
	{
		[Token(Token = "0x40003E3")]
		public const int k_iCallback = 341;

		[Token(Token = "0x40003E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bSuccess;
	}
	[Token(Token = "0x20000AE")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A52A4", Offset = "0x9A52A4")]
	public struct JoinClanChatRoomCompletionResult_t
	{
		[Token(Token = "0x40003E5")]
		public const int k_iCallback = 342;

		[Token(Token = "0x40003E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClanChat;

		[Token(Token = "0x40003E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EChatRoomEnterResponse m_eChatRoomEnterResponse;
	}
	[Token(Token = "0x20000AF")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A52B8", Offset = "0x9A52B8")]
	public struct GameConnectedFriendChatMsg_t
	{
		[Token(Token = "0x40003E8")]
		public const int k_iCallback = 343;

		[Token(Token = "0x40003E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDUser;

		[Token(Token = "0x40003EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_iMessageID;
	}
	[Token(Token = "0x20000B0")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A52CC", Offset = "0x9A52CC")]
	public struct FriendsGetFollowerCount_t
	{
		[Token(Token = "0x40003EB")]
		public const int k_iCallback = 344;

		[Token(Token = "0x40003EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40003ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CSteamID m_steamID;

		[Token(Token = "0x40003EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nCount;
	}
	[Token(Token = "0x20000B1")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A52E0", Offset = "0x9A52E0")]
	public struct FriendsIsFollowing_t
	{
		[Token(Token = "0x40003EF")]
		public const int k_iCallback = 345;

		[Token(Token = "0x40003F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40003F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CSteamID m_steamID;

		[Token(Token = "0x40003F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bIsFollowing;
	}
	[Token(Token = "0x20000B2")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A52F4", Offset = "0x9A52F4")]
	public struct FriendsEnumerateFollowingList_t
	{
		[Token(Token = "0x40003F3")]
		public const int k_iCallback = 346;

		[Token(Token = "0x40003F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40003F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID[] m_rgSteamID;

		[Token(Token = "0x40003F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_nResultsReturned;

		[Token(Token = "0x40003F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int m_nTotalResultCount;
	}
	[Token(Token = "0x20000B3")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5308", Offset = "0x9A5308")]
	public struct SetPersonaNameResponse_t
	{
		[Token(Token = "0x40003F8")]
		public const int k_iCallback = 347;

		[Token(Token = "0x40003F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bSuccess;

		[Token(Token = "0x40003FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public bool m_bLocalSuccess;

		[Token(Token = "0x40003FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_result;
	}
	[Token(Token = "0x20000B4")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A531C", Offset = "0x9A531C")]
	public struct GCMessageAvailable_t
	{
		[Token(Token = "0x40003FC")]
		public const int k_iCallback = 1701;

		[Token(Token = "0x40003FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nMessageSize;
	}
	[Token(Token = "0x20000B5")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5330", Offset = "0x9A5330")]
	public struct GCMessageFailed_t
	{
		[Token(Token = "0x40003FE")]
		public const int k_iCallback = 1702;
	}
	[Token(Token = "0x20000B6")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5344", Offset = "0x9A5344")]
	public struct GSClientApprove_t
	{
		[Token(Token = "0x40003FF")]
		public const int k_iCallback = 201;

		[Token(Token = "0x4000400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamID;

		[Token(Token = "0x4000401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_OwnerSteamID;
	}
	[Token(Token = "0x20000B7")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5358", Offset = "0x9A5358")]
	public struct GSClientDeny_t
	{
		[Token(Token = "0x4000402")]
		public const int k_iCallback = 202;

		[Token(Token = "0x4000403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamID;

		[Token(Token = "0x4000404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EDenyReason m_eDenyReason;

		[Token(Token = "0x4000405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string m_rgchOptionalText;
	}
	[Token(Token = "0x20000B8")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A536C", Offset = "0x9A536C")]
	public struct GSClientKick_t
	{
		[Token(Token = "0x4000406")]
		public const int k_iCallback = 203;

		[Token(Token = "0x4000407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamID;

		[Token(Token = "0x4000408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EDenyReason m_eDenyReason;
	}
	[Token(Token = "0x20000B9")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5380", Offset = "0x9A5380")]
	public struct GSClientAchievementStatus_t
	{
		[Token(Token = "0x4000409")]
		public const int k_iCallback = 206;

		[Token(Token = "0x400040A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamID;

		[Token(Token = "0x400040B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_pchAchievement;

		[Token(Token = "0x400040C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bUnlocked;
	}
	[Token(Token = "0x20000BA")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5394", Offset = "0x9A5394")]
	public struct GSPolicyResponse_t
	{
		[Token(Token = "0x400040D")]
		public const int k_iCallback = 115;

		[Token(Token = "0x400040E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bSecure;
	}
	[Token(Token = "0x20000BB")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A53A8", Offset = "0x9A53A8")]
	public struct GSGameplayStats_t
	{
		[Token(Token = "0x400040F")]
		public const int k_iCallback = 207;

		[Token(Token = "0x4000410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nRank;

		[Token(Token = "0x4000412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_unTotalConnects;

		[Token(Token = "0x4000413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_unTotalMinutesPlayed;
	}
	[Token(Token = "0x20000BC")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A53BC", Offset = "0x9A53BC")]
	public struct GSClientGroupStatus_t
	{
		[Token(Token = "0x4000414")]
		public const int k_iCallback = 208;

		[Token(Token = "0x4000415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamIDUser;

		[Token(Token = "0x4000416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_SteamIDGroup;

		[Token(Token = "0x4000417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bMember;

		[Token(Token = "0x4000418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool m_bOfficer;
	}
	[Token(Token = "0x20000BD")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A53D0", Offset = "0x9A53D0")]
	public struct GSReputation_t
	{
		[Token(Token = "0x4000419")]
		public const int k_iCallback = 209;

		[Token(Token = "0x400041A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400041B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_unReputationScore;

		[Token(Token = "0x400041C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool m_bBanned;

		[Token(Token = "0x400041D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_unBannedIP;

		[Token(Token = "0x400041E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ushort m_usBannedPort;

		[Token(Token = "0x400041F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ulong m_ulBannedGameID;

		[Token(Token = "0x4000420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uint m_unBanExpires;
	}
	[Token(Token = "0x20000BE")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A53E4", Offset = "0x9A53E4")]
	public struct AssociateWithClanResult_t
	{
		[Token(Token = "0x4000421")]
		public const int k_iCallback = 210;

		[Token(Token = "0x4000422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x20000BF")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A53F8", Offset = "0x9A53F8")]
	public struct ComputeNewPlayerCompatibilityResult_t
	{
		[Token(Token = "0x4000423")]
		public const int k_iCallback = 211;

		[Token(Token = "0x4000424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_cPlayersThatDontLikeCandidate;

		[Token(Token = "0x4000426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_cPlayersThatCandidateDoesntLike;

		[Token(Token = "0x4000427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_cClanPlayersThatDontLikeCandidate;

		[Token(Token = "0x4000428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CSteamID m_SteamIDCandidate;
	}
	[Token(Token = "0x20000C0")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A540C", Offset = "0x9A540C")]
	public struct GSStatsReceived_t
	{
		[Token(Token = "0x4000429")]
		public const int k_iCallback = 1800;

		[Token(Token = "0x400042A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400042B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x20000C1")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5420", Offset = "0x9A5420")]
	public struct GSStatsStored_t
	{
		[Token(Token = "0x400042C")]
		public const int k_iCallback = 1801;

		[Token(Token = "0x400042D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400042E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x20000C2")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5434", Offset = "0x9A5434")]
	public struct GSStatsUnloaded_t
	{
		[Token(Token = "0x400042F")]
		public const int k_iCallback = 1108;

		[Token(Token = "0x4000430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x20000C3")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5448", Offset = "0x9A5448")]
	public struct HTML_BrowserReady_t
	{
		[Token(Token = "0x4000431")]
		public const int k_iCallback = 4501;

		[Token(Token = "0x4000432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;
	}
	[Token(Token = "0x20000C4")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A545C", Offset = "0x9A545C")]
	public struct HTML_NeedsPaint_t
	{
		[Token(Token = "0x4000433")]
		public const int k_iCallback = 4502;

		[Token(Token = "0x4000434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr pBGRA;

		[Token(Token = "0x4000436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint unWide;

		[Token(Token = "0x4000437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint unTall;

		[Token(Token = "0x4000438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint unUpdateX;

		[Token(Token = "0x4000439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint unUpdateY;

		[Token(Token = "0x400043A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uint unUpdateWide;

		[Token(Token = "0x400043B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public uint unUpdateTall;

		[Token(Token = "0x400043C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public uint unScrollX;

		[Token(Token = "0x400043D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public uint unScrollY;

		[Token(Token = "0x400043E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float flPageScale;

		[Token(Token = "0x400043F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public uint unPageSerial;
	}
	[Token(Token = "0x20000C5")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5470", Offset = "0x9A5470")]
	public struct HTML_StartRequest_t
	{
		[Token(Token = "0x4000440")]
		public const int k_iCallback = 4503;

		[Token(Token = "0x4000441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchURL;

		[Token(Token = "0x4000443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string pchTarget;

		[Token(Token = "0x4000444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string pchPostData;

		[Token(Token = "0x4000445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool bIsRedirect;
	}
	[Token(Token = "0x20000C6")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5484", Offset = "0x9A5484")]
	public struct HTML_CloseBrowser_t
	{
		[Token(Token = "0x4000446")]
		public const int k_iCallback = 4504;

		[Token(Token = "0x4000447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;
	}
	[Token(Token = "0x20000C7")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5498", Offset = "0x9A5498")]
	public struct HTML_URLChanged_t
	{
		[Token(Token = "0x4000448")]
		public const int k_iCallback = 4505;

		[Token(Token = "0x4000449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x400044A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchURL;

		[Token(Token = "0x400044B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string pchPostData;

		[Token(Token = "0x400044C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool bIsRedirect;

		[Token(Token = "0x400044D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string pchPageTitle;

		[Token(Token = "0x400044E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool bNewNavigation;
	}
	[Token(Token = "0x20000C8")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A54AC", Offset = "0x9A54AC")]
	public struct HTML_FinishedRequest_t
	{
		[Token(Token = "0x400044F")]
		public const int k_iCallback = 4506;

		[Token(Token = "0x4000450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchURL;

		[Token(Token = "0x4000452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string pchPageTitle;
	}
	[Token(Token = "0x20000C9")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A54C0", Offset = "0x9A54C0")]
	public struct HTML_OpenLinkInNewTab_t
	{
		[Token(Token = "0x4000453")]
		public const int k_iCallback = 4507;

		[Token(Token = "0x4000454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchURL;
	}
	[Token(Token = "0x20000CA")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A54D4", Offset = "0x9A54D4")]
	public struct HTML_ChangedTitle_t
	{
		[Token(Token = "0x4000456")]
		public const int k_iCallback = 4508;

		[Token(Token = "0x4000457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchTitle;
	}
	[Token(Token = "0x20000CB")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A54E8", Offset = "0x9A54E8")]
	public struct HTML_SearchResults_t
	{
		[Token(Token = "0x4000459")]
		public const int k_iCallback = 4509;

		[Token(Token = "0x400045A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x400045B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint unResults;

		[Token(Token = "0x400045C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unCurrentMatch;
	}
	[Token(Token = "0x20000CC")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A54FC", Offset = "0x9A54FC")]
	public struct HTML_CanGoBackAndForward_t
	{
		[Token(Token = "0x400045D")]
		public const int k_iCallback = 4510;

		[Token(Token = "0x400045E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x400045F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public bool bCanGoBack;

		[Token(Token = "0x4000460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
		public bool bCanGoForward;
	}
	[Token(Token = "0x20000CD")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5510", Offset = "0x9A5510")]
	public struct HTML_HorizontalScroll_t
	{
		[Token(Token = "0x4000461")]
		public const int k_iCallback = 4511;

		[Token(Token = "0x4000462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint unScrollMax;

		[Token(Token = "0x4000464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unScrollCurrent;

		[Token(Token = "0x4000465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float flPageScale;

		[Token(Token = "0x4000466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool bVisible;

		[Token(Token = "0x4000467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint unPageSize;
	}
	[Token(Token = "0x20000CE")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5524", Offset = "0x9A5524")]
	public struct HTML_VerticalScroll_t
	{
		[Token(Token = "0x4000468")]
		public const int k_iCallback = 4512;

		[Token(Token = "0x4000469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x400046A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint unScrollMax;

		[Token(Token = "0x400046B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unScrollCurrent;

		[Token(Token = "0x400046C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float flPageScale;

		[Token(Token = "0x400046D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool bVisible;

		[Token(Token = "0x400046E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint unPageSize;
	}
	[Token(Token = "0x20000CF")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5538", Offset = "0x9A5538")]
	public struct HTML_LinkAtPosition_t
	{
		[Token(Token = "0x400046F")]
		public const int k_iCallback = 4513;

		[Token(Token = "0x4000470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint x;

		[Token(Token = "0x4000472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint y;

		[Token(Token = "0x4000473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string pchURL;

		[Token(Token = "0x4000474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool bInput;

		[Token(Token = "0x4000475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool bLiveLink;
	}
	[Token(Token = "0x20000D0")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A554C", Offset = "0x9A554C")]
	public struct HTML_JSAlert_t
	{
		[Token(Token = "0x4000476")]
		public const int k_iCallback = 4514;

		[Token(Token = "0x4000477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchMessage;
	}
	[Token(Token = "0x20000D1")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5560", Offset = "0x9A5560")]
	public struct HTML_JSConfirm_t
	{
		[Token(Token = "0x4000479")]
		public const int k_iCallback = 4515;

		[Token(Token = "0x400047A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x400047B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchMessage;
	}
	[Token(Token = "0x20000D2")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5574", Offset = "0x9A5574")]
	public struct HTML_FileOpenDialog_t
	{
		[Token(Token = "0x400047C")]
		public const int k_iCallback = 4516;

		[Token(Token = "0x400047D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x400047E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchTitle;

		[Token(Token = "0x400047F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string pchInitialFile;
	}
	[Token(Token = "0x20000D3")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5588", Offset = "0x9A5588")]
	public struct HTML_NewWindow_t
	{
		[Token(Token = "0x4000480")]
		public const int k_iCallback = 4521;

		[Token(Token = "0x4000481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchURL;

		[Token(Token = "0x4000483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint unX;

		[Token(Token = "0x4000484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint unY;

		[Token(Token = "0x4000485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint unWide;

		[Token(Token = "0x4000486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint unTall;

		[Token(Token = "0x4000487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HHTMLBrowser unNewWindow_BrowserHandle;
	}
	[Token(Token = "0x20000D4")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A559C", Offset = "0x9A559C")]
	public struct HTML_SetCursor_t
	{
		[Token(Token = "0x4000488")]
		public const int k_iCallback = 4522;

		[Token(Token = "0x4000489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x400048A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint eMouseCursor;
	}
	[Token(Token = "0x20000D5")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A55B0", Offset = "0x9A55B0")]
	public struct HTML_StatusText_t
	{
		[Token(Token = "0x400048B")]
		public const int k_iCallback = 4523;

		[Token(Token = "0x400048C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x400048D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchMsg;
	}
	[Token(Token = "0x20000D6")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A55C4", Offset = "0x9A55C4")]
	public struct HTML_ShowToolTip_t
	{
		[Token(Token = "0x400048E")]
		public const int k_iCallback = 4524;

		[Token(Token = "0x400048F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchMsg;
	}
	[Token(Token = "0x20000D7")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A55D8", Offset = "0x9A55D8")]
	public struct HTML_UpdateToolTip_t
	{
		[Token(Token = "0x4000491")]
		public const int k_iCallback = 4525;

		[Token(Token = "0x4000492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchMsg;
	}
	[Token(Token = "0x20000D8")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A55EC", Offset = "0x9A55EC")]
	public struct HTML_HideToolTip_t
	{
		[Token(Token = "0x4000494")]
		public const int k_iCallback = 4526;

		[Token(Token = "0x4000495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;
	}
	[Token(Token = "0x20000D9")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5600", Offset = "0x9A5600")]
	public struct HTTPRequestCompleted_t
	{
		[Token(Token = "0x4000496")]
		public const int k_iCallback = 2101;

		[Token(Token = "0x4000497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HTTPRequestHandle m_hRequest;

		[Token(Token = "0x4000498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulContextValue;

		[Token(Token = "0x4000499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bRequestSuccessful;

		[Token(Token = "0x400049A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public EHTTPStatusCode m_eStatusCode;

		[Token(Token = "0x400049B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint m_unBodySize;
	}
	[Token(Token = "0x20000DA")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5614", Offset = "0x9A5614")]
	public struct HTTPRequestHeadersReceived_t
	{
		[Token(Token = "0x400049C")]
		public const int k_iCallback = 2102;

		[Token(Token = "0x400049D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HTTPRequestHandle m_hRequest;

		[Token(Token = "0x400049E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulContextValue;
	}
	[Token(Token = "0x20000DB")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5628", Offset = "0x9A5628")]
	public struct HTTPRequestDataReceived_t
	{
		[Token(Token = "0x400049F")]
		public const int k_iCallback = 2103;

		[Token(Token = "0x40004A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HTTPRequestHandle m_hRequest;

		[Token(Token = "0x40004A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulContextValue;

		[Token(Token = "0x40004A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_cOffset;

		[Token(Token = "0x40004A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_cBytesReceived;
	}
	[Token(Token = "0x20000DC")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A563C", Offset = "0x9A563C")]
	public struct SteamInventoryResultReady_t
	{
		[Token(Token = "0x40004A4")]
		public const int k_iCallback = 4700;

		[Token(Token = "0x40004A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamInventoryResult_t m_handle;

		[Token(Token = "0x40004A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_result;
	}
	[Token(Token = "0x20000DD")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5650", Offset = "0x9A5650")]
	public struct SteamInventoryFullUpdate_t
	{
		[Token(Token = "0x40004A7")]
		public const int k_iCallback = 4701;

		[Token(Token = "0x40004A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamInventoryResult_t m_handle;
	}
	[Token(Token = "0x20000DE")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5664", Offset = "0x9A5664")]
	public struct SteamInventoryDefinitionUpdate_t
	{
		[Token(Token = "0x40004A9")]
		public const int k_iCallback = 4702;
	}
	[Token(Token = "0x20000DF")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5678", Offset = "0x9A5678")]
	public struct FavoritesListChanged_t
	{
		[Token(Token = "0x40004AA")]
		public const int k_iCallback = 502;

		[Token(Token = "0x40004AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nIP;

		[Token(Token = "0x40004AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_nQueryPort;

		[Token(Token = "0x40004AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_nConnPort;

		[Token(Token = "0x40004AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_nAppID;

		[Token(Token = "0x40004AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_nFlags;

		[Token(Token = "0x40004B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool m_bAdd;

		[Token(Token = "0x40004B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AccountID_t m_unAccountId;
	}
	[Token(Token = "0x20000E0")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A568C", Offset = "0x9A568C")]
	public struct LobbyInvite_t
	{
		[Token(Token = "0x40004B2")]
		public const int k_iCallback = 503;

		[Token(Token = "0x40004B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDUser;

		[Token(Token = "0x40004B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x40004B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong m_ulGameID;
	}
	[Token(Token = "0x20000E1")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A56A0", Offset = "0x9A56A0")]
	public struct LobbyEnter_t
	{
		[Token(Token = "0x40004B6")]
		public const int k_iCallback = 504;

		[Token(Token = "0x40004B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x40004B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_rgfChatPermissions;

		[Token(Token = "0x40004B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bLocked;

		[Token(Token = "0x40004BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_EChatRoomEnterResponse;
	}
	[Token(Token = "0x20000E2")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A56B4", Offset = "0x9A56B4")]
	public struct LobbyDataUpdate_t
	{
		[Token(Token = "0x40004BB")]
		public const int k_iCallback = 505;

		[Token(Token = "0x40004BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x40004BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDMember;

		[Token(Token = "0x40004BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte m_bSuccess;
	}
	[Token(Token = "0x20000E3")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A56C8", Offset = "0x9A56C8")]
	public struct LobbyChatUpdate_t
	{
		[Token(Token = "0x40004BF")]
		public const int k_iCallback = 506;

		[Token(Token = "0x40004C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x40004C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDUserChanged;

		[Token(Token = "0x40004C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong m_ulSteamIDMakingChange;

		[Token(Token = "0x40004C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint m_rgfChatMemberStateChange;
	}
	[Token(Token = "0x20000E4")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A56DC", Offset = "0x9A56DC")]
	public struct LobbyChatMsg_t
	{
		[Token(Token = "0x40004C4")]
		public const int k_iCallback = 507;

		[Token(Token = "0x40004C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x40004C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDUser;

		[Token(Token = "0x40004C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte m_eChatEntryType;

		[Token(Token = "0x40004C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_iChatID;
	}
	[Token(Token = "0x20000E5")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A56F0", Offset = "0x9A56F0")]
	public struct LobbyGameCreated_t
	{
		[Token(Token = "0x40004C9")]
		public const int k_iCallback = 509;

		[Token(Token = "0x40004CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x40004CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDGameServer;

		[Token(Token = "0x40004CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_unIP;

		[Token(Token = "0x40004CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public ushort m_usPort;
	}
	[Token(Token = "0x20000E6")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5704", Offset = "0x9A5704")]
	public struct LobbyMatchList_t
	{
		[Token(Token = "0x40004CE")]
		public const int k_iCallback = 510;

		[Token(Token = "0x40004CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nLobbiesMatching;
	}
	[Token(Token = "0x20000E7")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5718", Offset = "0x9A5718")]
	public struct LobbyKicked_t
	{
		[Token(Token = "0x40004D0")]
		public const int k_iCallback = 512;

		[Token(Token = "0x40004D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x40004D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDAdmin;

		[Token(Token = "0x40004D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte m_bKickedDueToDisconnect;
	}
	[Token(Token = "0x20000E8")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A572C", Offset = "0x9A572C")]
	public struct LobbyCreated_t
	{
		[Token(Token = "0x40004D4")]
		public const int k_iCallback = 513;

		[Token(Token = "0x40004D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40004D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDLobby;
	}
	[Token(Token = "0x20000E9")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5740", Offset = "0x9A5740")]
	public struct FavoritesListAccountsUpdated_t
	{
		[Token(Token = "0x40004D7")]
		public const int k_iCallback = 516;

		[Token(Token = "0x40004D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x20000EA")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5754", Offset = "0x9A5754")]
	public struct PlaybackStatusHasChanged_t
	{
		[Token(Token = "0x40004D9")]
		public const int k_iCallback = 4001;
	}
	[Token(Token = "0x20000EB")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5768", Offset = "0x9A5768")]
	public struct VolumeHasChanged_t
	{
		[Token(Token = "0x40004DA")]
		public const int k_iCallback = 4002;

		[Token(Token = "0x40004DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m_flNewVolume;
	}
	[Token(Token = "0x20000EC")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A577C", Offset = "0x9A577C")]
	public struct MusicPlayerRemoteWillActivate_t
	{
		[Token(Token = "0x40004DC")]
		public const int k_iCallback = 4101;
	}
	[Token(Token = "0x20000ED")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5790", Offset = "0x9A5790")]
	public struct MusicPlayerRemoteWillDeactivate_t
	{
		[Token(Token = "0x40004DD")]
		public const int k_iCallback = 4102;
	}
	[Token(Token = "0x20000EE")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A57A4", Offset = "0x9A57A4")]
	public struct MusicPlayerRemoteToFront_t
	{
		[Token(Token = "0x40004DE")]
		public const int k_iCallback = 4103;
	}
	[Token(Token = "0x20000EF")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A57B8", Offset = "0x9A57B8")]
	public struct MusicPlayerWillQuit_t
	{
		[Token(Token = "0x40004DF")]
		public const int k_iCallback = 4104;
	}
	[Token(Token = "0x20000F0")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A57CC", Offset = "0x9A57CC")]
	public struct MusicPlayerWantsPlay_t
	{
		[Token(Token = "0x40004E0")]
		public const int k_iCallback = 4105;
	}
	[Token(Token = "0x20000F1")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A57E0", Offset = "0x9A57E0")]
	public struct MusicPlayerWantsPause_t
	{
		[Token(Token = "0x40004E1")]
		public const int k_iCallback = 4106;
	}
	[Token(Token = "0x20000F2")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A57F4", Offset = "0x9A57F4")]
	public struct MusicPlayerWantsPlayPrevious_t
	{
		[Token(Token = "0x40004E2")]
		public const int k_iCallback = 4107;
	}
	[Token(Token = "0x20000F3")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5808", Offset = "0x9A5808")]
	public struct MusicPlayerWantsPlayNext_t
	{
		[Token(Token = "0x40004E3")]
		public const int k_iCallback = 4108;
	}
	[Token(Token = "0x20000F4")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A581C", Offset = "0x9A581C")]
	public struct MusicPlayerWantsShuffled_t
	{
		[Token(Token = "0x40004E4")]
		public const int k_iCallback = 4109;

		[Token(Token = "0x40004E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bShuffled;
	}
	[Token(Token = "0x20000F5")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5830", Offset = "0x9A5830")]
	public struct MusicPlayerWantsLooped_t
	{
		[Token(Token = "0x40004E6")]
		public const int k_iCallback = 4110;

		[Token(Token = "0x40004E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bLooped;
	}
	[Token(Token = "0x20000F6")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5844", Offset = "0x9A5844")]
	public struct MusicPlayerWantsVolume_t
	{
		[Token(Token = "0x40004E8")]
		public const int k_iCallback = 4011;

		[Token(Token = "0x40004E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m_flNewVolume;
	}
	[Token(Token = "0x20000F7")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5858", Offset = "0x9A5858")]
	public struct MusicPlayerSelectsQueueEntry_t
	{
		[Token(Token = "0x40004EA")]
		public const int k_iCallback = 4012;

		[Token(Token = "0x40004EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int nID;
	}
	[Token(Token = "0x20000F8")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A586C", Offset = "0x9A586C")]
	public struct MusicPlayerSelectsPlaylistEntry_t
	{
		[Token(Token = "0x40004EC")]
		public const int k_iCallback = 4013;

		[Token(Token = "0x40004ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int nID;
	}
	[Token(Token = "0x20000F9")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5880", Offset = "0x9A5880")]
	public struct MusicPlayerWantsPlayingRepeatStatus_t
	{
		[Token(Token = "0x40004EE")]
		public const int k_iCallback = 4114;

		[Token(Token = "0x40004EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_nPlayingRepeatStatus;
	}
	[Token(Token = "0x20000FA")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5894", Offset = "0x9A5894")]
	public struct P2PSessionRequest_t
	{
		[Token(Token = "0x40004F0")]
		public const int k_iCallback = 1202;

		[Token(Token = "0x40004F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDRemote;
	}
	[Token(Token = "0x20000FB")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A58A8", Offset = "0x9A58A8")]
	public struct P2PSessionConnectFail_t
	{
		[Token(Token = "0x40004F2")]
		public const int k_iCallback = 1203;

		[Token(Token = "0x40004F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDRemote;

		[Token(Token = "0x40004F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public byte m_eP2PSessionError;
	}
	[Token(Token = "0x20000FC")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A58BC", Offset = "0x9A58BC")]
	public struct SocketStatusCallback_t
	{
		[Token(Token = "0x40004F5")]
		public const int k_iCallback = 1201;

		[Token(Token = "0x40004F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SNetSocket_t m_hSocket;

		[Token(Token = "0x40004F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public SNetListenSocket_t m_hListenSocket;

		[Token(Token = "0x40004F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDRemote;

		[Token(Token = "0x40004F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_eSNetSocketState;
	}
	[Token(Token = "0x20000FD")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A58D0", Offset = "0x9A58D0")]
	public struct RemoteStorageAppSyncedClient_t
	{
		[Token(Token = "0x40004FA")]
		public const int k_iCallback = 1301;

		[Token(Token = "0x40004FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;

		[Token(Token = "0x40004FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;

		[Token(Token = "0x40004FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_unNumDownloads;
	}
	[Token(Token = "0x20000FE")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A58E4", Offset = "0x9A58E4")]
	public struct RemoteStorageAppSyncedServer_t
	{
		[Token(Token = "0x40004FE")]
		public const int k_iCallback = 1302;

		[Token(Token = "0x40004FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;

		[Token(Token = "0x4000500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;

		[Token(Token = "0x4000501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_unNumUploads;
	}
	[Token(Token = "0x20000FF")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A58F8", Offset = "0x9A58F8")]
	public struct RemoteStorageAppSyncProgress_t
	{
		[Token(Token = "0x4000502")]
		public const int k_iCallback = 1303;

		[Token(Token = "0x4000503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_rgchCurrentFile;

		[Token(Token = "0x4000504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;

		[Token(Token = "0x4000505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_uBytesTransferredThisChunk;

		[Token(Token = "0x4000506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double m_dAppPercentComplete;

		[Token(Token = "0x4000507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool m_bUploading;
	}
	[Token(Token = "0x2000100")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A590C", Offset = "0x9A590C")]
	public struct RemoteStorageAppSyncStatusCheck_t
	{
		[Token(Token = "0x4000508")]
		public const int k_iCallback = 1305;

		[Token(Token = "0x4000509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;

		[Token(Token = "0x400050A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000101")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5920", Offset = "0x9A5920")]
	public struct RemoteStorageConflictResolution_t
	{
		[Token(Token = "0x400050B")]
		public const int k_iCallback = 1306;

		[Token(Token = "0x400050C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;

		[Token(Token = "0x400050D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000102")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5934", Offset = "0x9A5934")]
	public struct RemoteStorageFileShareResult_t
	{
		[Token(Token = "0x400050E")]
		public const int k_iCallback = 1307;

		[Token(Token = "0x400050F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public UGCHandle_t m_hFile;

		[Token(Token = "0x4000511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string m_rgchFilename;
	}
	[Token(Token = "0x2000103")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5948", Offset = "0x9A5948")]
	public struct RemoteStoragePublishFileResult_t
	{
		[Token(Token = "0x4000512")]
		public const int k_iCallback = 1309;

		[Token(Token = "0x4000513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
	}
	[Token(Token = "0x2000104")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A595C", Offset = "0x9A595C")]
	public struct RemoteStorageDeletePublishedFileResult_t
	{
		[Token(Token = "0x4000516")]
		public const int k_iCallback = 1311;

		[Token(Token = "0x4000517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x2000105")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5970", Offset = "0x9A5970")]
	public struct RemoteStorageEnumerateUserPublishedFilesResult_t
	{
		[Token(Token = "0x4000519")]
		public const int k_iCallback = 1312;

		[Token(Token = "0x400051A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400051B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nResultsReturned;

		[Token(Token = "0x400051C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nTotalResultCount;

		[Token(Token = "0x400051D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PublishedFileId_t[] m_rgPublishedFileId;
	}
	[Token(Token = "0x2000106")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5984", Offset = "0x9A5984")]
	public struct RemoteStorageSubscribePublishedFileResult_t
	{
		[Token(Token = "0x400051E")]
		public const int k_iCallback = 1313;

		[Token(Token = "0x400051F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x2000107")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5998", Offset = "0x9A5998")]
	public struct RemoteStorageEnumerateUserSubscribedFilesResult_t
	{
		[Token(Token = "0x4000521")]
		public const int k_iCallback = 1314;

		[Token(Token = "0x4000522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nResultsReturned;

		[Token(Token = "0x4000524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nTotalResultCount;

		[Token(Token = "0x4000525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PublishedFileId_t[] m_rgPublishedFileId;

		[Token(Token = "0x4000526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint[] m_rgRTimeSubscribed;
	}
	[Token(Token = "0x2000108")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A59AC", Offset = "0x9A59AC")]
	public struct RemoteStorageUnsubscribePublishedFileResult_t
	{
		[Token(Token = "0x4000527")]
		public const int k_iCallback = 1315;

		[Token(Token = "0x4000528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x2000109")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A59C0", Offset = "0x9A59C0")]
	public struct RemoteStorageUpdatePublishedFileResult_t
	{
		[Token(Token = "0x400052A")]
		public const int k_iCallback = 1316;

		[Token(Token = "0x400052B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400052C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x400052D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
	}
	[Token(Token = "0x200010A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A59D4", Offset = "0x9A59D4")]
	public struct RemoteStorageDownloadUGCResult_t
	{
		[Token(Token = "0x400052E")]
		public const int k_iCallback = 1317;

		[Token(Token = "0x400052F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public UGCHandle_t m_hFile;

		[Token(Token = "0x4000531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AppId_t m_nAppID;

		[Token(Token = "0x4000532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int m_nSizeInBytes;

		[Token(Token = "0x4000533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string m_pchFileName;

		[Token(Token = "0x4000534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ulong m_ulSteamIDOwner;
	}
	[Token(Token = "0x200010B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A59E8", Offset = "0x9A59E8")]
	public struct RemoteStorageGetPublishedFileDetailsResult_t
	{
		[Token(Token = "0x4000535")]
		public const int k_iCallback = 1318;

		[Token(Token = "0x4000536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AppId_t m_nCreatorAppID;

		[Token(Token = "0x4000539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public AppId_t m_nConsumerAppID;

		[Token(Token = "0x400053A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string m_rgchTitle;

		[Token(Token = "0x400053B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string m_rgchDescription;

		[Token(Token = "0x400053C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UGCHandle_t m_hFile;

		[Token(Token = "0x400053D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UGCHandle_t m_hPreviewFile;

		[Token(Token = "0x400053E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ulong m_ulSteamIDOwner;

		[Token(Token = "0x400053F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public uint m_rtimeCreated;

		[Token(Token = "0x4000540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public uint m_rtimeUpdated;

		[Token(Token = "0x4000541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ERemoteStoragePublishedFileVisibility m_eVisibility;

		[Token(Token = "0x4000542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool m_bBanned;

		[Token(Token = "0x4000543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string m_rgchTags;

		[Token(Token = "0x4000544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool m_bTagsTruncated;

		[Token(Token = "0x4000545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string m_pchFileName;

		[Token(Token = "0x4000546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int m_nFileSize;

		[Token(Token = "0x4000547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int m_nPreviewFileSize;

		[Token(Token = "0x4000548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string m_rgchURL;

		[Token(Token = "0x4000549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public EWorkshopFileType m_eFileType;

		[Token(Token = "0x400054A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public bool m_bAcceptedForUse;
	}
	[Token(Token = "0x200010C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A59FC", Offset = "0x9A59FC")]
	public struct RemoteStorageEnumerateWorkshopFilesResult_t
	{
		[Token(Token = "0x400054B")]
		public const int k_iCallback = 1319;

		[Token(Token = "0x400054C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400054D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nResultsReturned;

		[Token(Token = "0x400054E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nTotalResultCount;

		[Token(Token = "0x400054F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PublishedFileId_t[] m_rgPublishedFileId;

		[Token(Token = "0x4000550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float[] m_rgScore;

		[Token(Token = "0x4000551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AppId_t m_nAppId;

		[Token(Token = "0x4000552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public uint m_unStartIndex;
	}
	[Token(Token = "0x200010D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5A10", Offset = "0x9A5A10")]
	public struct RemoteStorageGetPublishedItemVoteDetailsResult_t
	{
		[Token(Token = "0x4000553")]
		public const int k_iCallback = 1320;

		[Token(Token = "0x4000554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_unPublishedFileId;

		[Token(Token = "0x4000556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_nVotesFor;

		[Token(Token = "0x4000557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int m_nVotesAgainst;

		[Token(Token = "0x4000558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int m_nReports;

		[Token(Token = "0x4000559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float m_fScore;
	}
	[Token(Token = "0x200010E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5A24", Offset = "0x9A5A24")]
	public struct RemoteStoragePublishedFileSubscribed_t
	{
		[Token(Token = "0x400055A")]
		public const int k_iCallback = 1321;

		[Token(Token = "0x400055B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x400055C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x200010F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5A38", Offset = "0x9A5A38")]
	public struct RemoteStoragePublishedFileUnsubscribed_t
	{
		[Token(Token = "0x400055D")]
		public const int k_iCallback = 1322;

		[Token(Token = "0x400055E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x400055F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x2000110")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5A4C", Offset = "0x9A5A4C")]
	public struct RemoteStoragePublishedFileDeleted_t
	{
		[Token(Token = "0x4000560")]
		public const int k_iCallback = 1323;

		[Token(Token = "0x4000561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x2000111")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5A60", Offset = "0x9A5A60")]
	public struct RemoteStorageUpdateUserPublishedItemVoteResult_t
	{
		[Token(Token = "0x4000563")]
		public const int k_iCallback = 1324;

		[Token(Token = "0x4000564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x2000112")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5A74", Offset = "0x9A5A74")]
	public struct RemoteStorageUserVoteDetails_t
	{
		[Token(Token = "0x4000566")]
		public const int k_iCallback = 1325;

		[Token(Token = "0x4000567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EWorkshopVote m_eVote;
	}
	[Token(Token = "0x2000113")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5A88", Offset = "0x9A5A88")]
	public struct RemoteStorageEnumerateUserSharedWorkshopFilesResult_t
	{
		[Token(Token = "0x400056A")]
		public const int k_iCallback = 1326;

		[Token(Token = "0x400056B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400056C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nResultsReturned;

		[Token(Token = "0x400056D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nTotalResultCount;

		[Token(Token = "0x400056E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PublishedFileId_t[] m_rgPublishedFileId;
	}
	[Token(Token = "0x2000114")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5A9C", Offset = "0x9A5A9C")]
	public struct RemoteStorageSetUserPublishedFileActionResult_t
	{
		[Token(Token = "0x400056F")]
		public const int k_iCallback = 1327;

		[Token(Token = "0x4000570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EWorkshopFileAction m_eAction;
	}
	[Token(Token = "0x2000115")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5AB0", Offset = "0x9A5AB0")]
	public struct RemoteStorageEnumeratePublishedFilesByUserActionResult_t
	{
		[Token(Token = "0x4000573")]
		public const int k_iCallback = 1328;

		[Token(Token = "0x4000574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EWorkshopFileAction m_eAction;

		[Token(Token = "0x4000576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nResultsReturned;

		[Token(Token = "0x4000577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nTotalResultCount;

		[Token(Token = "0x4000578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PublishedFileId_t[] m_rgPublishedFileId;

		[Token(Token = "0x4000579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint[] m_rgRTimeUpdated;
	}
	[Token(Token = "0x2000116")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5AC4", Offset = "0x9A5AC4")]
	public struct RemoteStoragePublishFileProgress_t
	{
		[Token(Token = "0x400057A")]
		public const int k_iCallback = 1329;

		[Token(Token = "0x400057B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double m_dPercentFile;

		[Token(Token = "0x400057C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool m_bPreview;
	}
	[Token(Token = "0x2000117")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5AD8", Offset = "0x9A5AD8")]
	public struct RemoteStoragePublishedFileUpdated_t
	{
		[Token(Token = "0x400057D")]
		public const int k_iCallback = 1330;

		[Token(Token = "0x400057E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x400057F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;

		[Token(Token = "0x4000580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public UGCHandle_t m_hFile;
	}
	[Token(Token = "0x2000118")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5AEC", Offset = "0x9A5AEC")]
	public struct ScreenshotReady_t
	{
		[Token(Token = "0x4000581")]
		public const int k_iCallback = 2301;

		[Token(Token = "0x4000582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ScreenshotHandle m_hLocal;

		[Token(Token = "0x4000583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000119")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5B00", Offset = "0x9A5B00")]
	public struct ScreenshotRequested_t
	{
		[Token(Token = "0x4000584")]
		public const int k_iCallback = 2302;
	}
	[Token(Token = "0x200011A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5B14", Offset = "0x9A5B14")]
	public struct SteamUGCQueryCompleted_t
	{
		[Token(Token = "0x4000585")]
		public const int k_iCallback = 3401;

		[Token(Token = "0x4000586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public UGCQueryHandle_t m_handle;

		[Token(Token = "0x4000587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x4000588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_unNumResultsReturned;

		[Token(Token = "0x4000589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_unTotalMatchingResults;

		[Token(Token = "0x400058A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool m_bCachedData;
	}
	[Token(Token = "0x200011B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5B28", Offset = "0x9A5B28")]
	public struct SteamUGCRequestUGCDetailsResult_t
	{
		[Token(Token = "0x400058B")]
		public const int k_iCallback = 3402;

		[Token(Token = "0x400058C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamUGCDetails_t m_details;

		[Token(Token = "0x400058D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool m_bCachedData;
	}
	[Token(Token = "0x200011C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5B3C", Offset = "0x9A5B3C")]
	public struct CreateItemResult_t
	{
		[Token(Token = "0x400058E")]
		public const int k_iCallback = 3403;

		[Token(Token = "0x400058F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
	}
	[Token(Token = "0x200011D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5B50", Offset = "0x9A5B50")]
	public struct SubmitItemUpdateResult_t
	{
		[Token(Token = "0x4000592")]
		public const int k_iCallback = 3404;

		[Token(Token = "0x4000593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
	}
	[Token(Token = "0x200011E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5B64", Offset = "0x9A5B64")]
	public struct ItemInstalled_t
	{
		[Token(Token = "0x4000595")]
		public const int k_iCallback = 3405;

		[Token(Token = "0x4000596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_unAppID;

		[Token(Token = "0x4000597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x200011F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5B78", Offset = "0x9A5B78")]
	public struct DownloadItemResult_t
	{
		[Token(Token = "0x4000598")]
		public const int k_iCallback = 3406;

		[Token(Token = "0x4000599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_unAppID;

		[Token(Token = "0x400059A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x400059B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000120")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5B8C", Offset = "0x9A5B8C")]
	public struct UserFavoriteItemsListChanged_t
	{
		[Token(Token = "0x400059C")]
		public const int k_iCallback = 3407;

		[Token(Token = "0x400059D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x400059E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x400059F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bWasAddRequest;
	}
	[Token(Token = "0x2000121")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5BA0", Offset = "0x9A5BA0")]
	public struct SetUserItemVoteResult_t
	{
		[Token(Token = "0x40005A0")]
		public const int k_iCallback = 3408;

		[Token(Token = "0x40005A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40005A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x40005A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bVoteUp;
	}
	[Token(Token = "0x2000122")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5BB4", Offset = "0x9A5BB4")]
	public struct GetUserItemVoteResult_t
	{
		[Token(Token = "0x40005A4")]
		public const int k_iCallback = 3409;

		[Token(Token = "0x40005A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40005A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x40005A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bVotedUp;

		[Token(Token = "0x40005A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
		public bool m_bVotedDown;

		[Token(Token = "0x40005A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		public bool m_bVoteSkipped;
	}
	[Token(Token = "0x2000123")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5BC8", Offset = "0x9A5BC8")]
	public struct SteamUnifiedMessagesSendMethodResult_t
	{
		[Token(Token = "0x40005AA")]
		public const int k_iCallback = 2501;

		[Token(Token = "0x40005AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ClientUnifiedMessageHandle m_hHandle;

		[Token(Token = "0x40005AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_unContext;

		[Token(Token = "0x40005AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EResult m_eResult;

		[Token(Token = "0x40005AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_unResponseSize;
	}
	[Token(Token = "0x2000124")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5BDC", Offset = "0x9A5BDC")]
	public struct SteamServersConnected_t
	{
		[Token(Token = "0x40005AF")]
		public const int k_iCallback = 101;
	}
	[Token(Token = "0x2000125")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5BF0", Offset = "0x9A5BF0")]
	public struct SteamServerConnectFailure_t
	{
		[Token(Token = "0x40005B0")]
		public const int k_iCallback = 102;

		[Token(Token = "0x40005B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000126")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5C04", Offset = "0x9A5C04")]
	public struct SteamServersDisconnected_t
	{
		[Token(Token = "0x40005B2")]
		public const int k_iCallback = 103;

		[Token(Token = "0x40005B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000127")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5C18", Offset = "0x9A5C18")]
	public struct ClientGameServerDeny_t
	{
		[Token(Token = "0x40005B4")]
		public const int k_iCallback = 113;

		[Token(Token = "0x40005B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_uAppID;

		[Token(Token = "0x40005B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_unGameServerIP;

		[Token(Token = "0x40005B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ushort m_usGameServerPort;

		[Token(Token = "0x40005B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		public ushort m_bSecure;

		[Token(Token = "0x40005B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_uReason;
	}
	[Token(Token = "0x2000128")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5C2C", Offset = "0x9A5C2C")]
	public struct IPCFailure_t
	{
		[Token(Token = "0x40005BA")]
		public const int k_iCallback = 117;

		[Token(Token = "0x40005BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_eFailureType;
	}
	[Token(Token = "0x2000129")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5C40", Offset = "0x9A5C40")]
	public struct LicensesUpdated_t
	{
		[Token(Token = "0x40005BC")]
		public const int k_iCallback = 125;
	}
	[Token(Token = "0x200012A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5C54", Offset = "0x9A5C54")]
	public struct ValidateAuthTicketResponse_t
	{
		[Token(Token = "0x40005BD")]
		public const int k_iCallback = 143;

		[Token(Token = "0x40005BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamID;

		[Token(Token = "0x40005BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EAuthSessionResponse m_eAuthSessionResponse;

		[Token(Token = "0x40005C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public CSteamID m_OwnerSteamID;
	}
	[Token(Token = "0x200012B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5C68", Offset = "0x9A5C68")]
	public struct MicroTxnAuthorizationResponse_t
	{
		[Token(Token = "0x40005C1")]
		public const int k_iCallback = 152;

		[Token(Token = "0x40005C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_unAppID;

		[Token(Token = "0x40005C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulOrderID;

		[Token(Token = "0x40005C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte m_bAuthorized;
	}
	[Token(Token = "0x200012C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5C7C", Offset = "0x9A5C7C")]
	public struct EncryptedAppTicketResponse_t
	{
		[Token(Token = "0x40005C5")]
		public const int k_iCallback = 154;

		[Token(Token = "0x40005C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x200012D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5C90", Offset = "0x9A5C90")]
	public struct GetAuthSessionTicketResponse_t
	{
		[Token(Token = "0x40005C7")]
		public const int k_iCallback = 163;

		[Token(Token = "0x40005C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HAuthTicket m_hAuthTicket;

		[Token(Token = "0x40005C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;
	}
	[Token(Token = "0x200012E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5CA4", Offset = "0x9A5CA4")]
	public struct GameWebCallback_t
	{
		[Token(Token = "0x40005CA")]
		public const int k_iCallback = 164;

		[Token(Token = "0x40005CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_szURL;
	}
	[Token(Token = "0x200012F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5CB8", Offset = "0x9A5CB8")]
	public struct StoreAuthURLResponse_t
	{
		[Token(Token = "0x40005CC")]
		public const int k_iCallback = 165;

		[Token(Token = "0x40005CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_szURL;
	}
	[StructLayout(2)]
	[Token(Token = "0x2000130")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5CCC", Offset = "0x9A5CCC")]
	public struct UserStatsReceived_t
	{
		[Token(Token = "0x40005CE")]
		public const int k_iCallback = 1101;

		[Token(Token = "0x40005CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x40005D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x40005D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x2000131")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5CE0", Offset = "0x9A5CE0")]
	public struct UserStatsStored_t
	{
		[Token(Token = "0x40005D2")]
		public const int k_iCallback = 1102;

		[Token(Token = "0x40005D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x40005D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000132")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5CF4", Offset = "0x9A5CF4")]
	public struct UserAchievementStored_t
	{
		[Token(Token = "0x40005D5")]
		public const int k_iCallback = 1103;

		[Token(Token = "0x40005D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x40005D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool m_bGroupAchievement;

		[Token(Token = "0x40005D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string m_rgchAchievementName;

		[Token(Token = "0x40005D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint m_nCurProgress;

		[Token(Token = "0x40005DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint m_nMaxProgress;
	}
	[Token(Token = "0x2000133")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5D08", Offset = "0x9A5D08")]
	public struct LeaderboardFindResult_t
	{
		[Token(Token = "0x40005DB")]
		public const int k_iCallback = 1104;

		[Token(Token = "0x40005DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamLeaderboard_t m_hSteamLeaderboard;

		[Token(Token = "0x40005DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public byte m_bLeaderboardFound;
	}
	[Token(Token = "0x2000134")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5D1C", Offset = "0x9A5D1C")]
	public struct LeaderboardScoresDownloaded_t
	{
		[Token(Token = "0x40005DE")]
		public const int k_iCallback = 1105;

		[Token(Token = "0x40005DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamLeaderboard_t m_hSteamLeaderboard;

		[Token(Token = "0x40005E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public SteamLeaderboardEntries_t m_hSteamLeaderboardEntries;

		[Token(Token = "0x40005E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_cEntryCount;
	}
	[Token(Token = "0x2000135")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5D30", Offset = "0x9A5D30")]
	public struct LeaderboardScoreUploaded_t
	{
		[Token(Token = "0x40005E2")]
		public const int k_iCallback = 1106;

		[Token(Token = "0x40005E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bSuccess;

		[Token(Token = "0x40005E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public SteamLeaderboard_t m_hSteamLeaderboard;

		[Token(Token = "0x40005E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_nScore;

		[Token(Token = "0x40005E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public byte m_bScoreChanged;

		[Token(Token = "0x40005E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int m_nGlobalRankNew;

		[Token(Token = "0x40005E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int m_nGlobalRankPrevious;
	}
	[Token(Token = "0x2000136")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5D44", Offset = "0x9A5D44")]
	public struct NumberOfCurrentPlayers_t
	{
		[Token(Token = "0x40005E9")]
		public const int k_iCallback = 1107;

		[Token(Token = "0x40005EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bSuccess;

		[Token(Token = "0x40005EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_cPlayers;
	}
	[Token(Token = "0x2000137")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5D58", Offset = "0x9A5D58")]
	public struct UserStatsUnloaded_t
	{
		[Token(Token = "0x40005EC")]
		public const int k_iCallback = 1108;

		[Token(Token = "0x40005ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x2000138")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5D6C", Offset = "0x9A5D6C")]
	public struct UserAchievementIconFetched_t
	{
		[Token(Token = "0x40005EE")]
		public const int k_iCallback = 1109;

		[Token(Token = "0x40005EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CGameID m_nGameID;

		[Token(Token = "0x40005F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_rgchAchievementName;

		[Token(Token = "0x40005F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bAchieved;

		[Token(Token = "0x40005F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int m_nIconHandle;
	}
	[Token(Token = "0x2000139")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5D80", Offset = "0x9A5D80")]
	public struct GlobalAchievementPercentagesReady_t
	{
		[Token(Token = "0x40005F3")]
		public const int k_iCallback = 1110;

		[Token(Token = "0x40005F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x40005F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;
	}
	[Token(Token = "0x200013A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5D94", Offset = "0x9A5D94")]
	public struct LeaderboardUGCSet_t
	{
		[Token(Token = "0x40005F6")]
		public const int k_iCallback = 1111;

		[Token(Token = "0x40005F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40005F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public SteamLeaderboard_t m_hSteamLeaderboard;
	}
	[Token(Token = "0x200013B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5DA8", Offset = "0x9A5DA8")]
	public struct GlobalStatsReceived_t
	{
		[Token(Token = "0x40005F9")]
		public const int k_iCallback = 1112;

		[Token(Token = "0x40005FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x40005FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;
	}
	[Token(Token = "0x200013C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5DBC", Offset = "0x9A5DBC")]
	public struct IPCountry_t
	{
		[Token(Token = "0x40005FC")]
		public const int k_iCallback = 701;
	}
	[Token(Token = "0x200013D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5DD0", Offset = "0x9A5DD0")]
	public struct LowBatteryPower_t
	{
		[Token(Token = "0x40005FD")]
		public const int k_iCallback = 702;

		[Token(Token = "0x40005FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_nMinutesBatteryLeft;
	}
	[Token(Token = "0x200013E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5DE4", Offset = "0x9A5DE4")]
	public struct SteamAPICallCompleted_t
	{
		[Token(Token = "0x40005FF")]
		public const int k_iCallback = 703;

		[Token(Token = "0x4000600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamAPICall_t m_hAsyncCall;
	}
	[Token(Token = "0x200013F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5DF8", Offset = "0x9A5DF8")]
	public struct SteamShutdown_t
	{
		[Token(Token = "0x4000601")]
		public const int k_iCallback = 704;
	}
	[Token(Token = "0x2000140")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5E0C", Offset = "0x9A5E0C")]
	public struct CheckFileSignature_t
	{
		[Token(Token = "0x4000602")]
		public const int k_iCallback = 705;

		[Token(Token = "0x4000603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ECheckFileSignature m_eCheckFileSignature;
	}
	[Token(Token = "0x2000141")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5E20", Offset = "0x9A5E20")]
	public struct GamepadTextInputDismissed_t
	{
		[Token(Token = "0x4000604")]
		public const int k_iCallback = 714;

		[Token(Token = "0x4000605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bSubmitted;

		[Token(Token = "0x4000606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_unSubmittedText;
	}
	[Token(Token = "0x2000142")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5E34", Offset = "0x9A5E34")]
	public struct BroadcastUploadStart_t
	{
		[Token(Token = "0x4000607")]
		public const int k_iCallback = 4604;
	}
	[Token(Token = "0x2000143")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5E48", Offset = "0x9A5E48")]
	public struct BroadcastUploadStop_t
	{
		[Token(Token = "0x4000608")]
		public const int k_iCallback = 4605;

		[Token(Token = "0x4000609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EBroadcastUploadResult m_eResult;
	}
	[Token(Token = "0x2000144")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x9A5E5C", Offset = "0x9A5E5C")]
	public struct GetVideoURLResult_t
	{
		[Token(Token = "0x400060A")]
		public const int k_iCallback = 4611;

		[Token(Token = "0x400060B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400060C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public AppId_t m_unVideoAppID;

		[Token(Token = "0x400060D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_rgchURL;
	}
	[Token(Token = "0x2000145")]
	public static class Constants
	{
		[Token(Token = "0x400060E")]
		public const string STEAMAPPLIST_INTERFACE_VERSION = "STEAMAPPLIST_INTERFACE_VERSION001";

		[Token(Token = "0x400060F")]
		public const string STEAMAPPS_INTERFACE_VERSION = "STEAMAPPS_INTERFACE_VERSION007";

		[Token(Token = "0x4000610")]
		public const string STEAMAPPTICKET_INTERFACE_VERSION = "STEAMAPPTICKET_INTERFACE_VERSION001";

		[Token(Token = "0x4000611")]
		public const string STEAMCLIENT_INTERFACE_VERSION = "SteamClient017";

		[Token(Token = "0x4000612")]
		public const string STEAMCONTROLLER_INTERFACE_VERSION = "STEAMCONTROLLER_INTERFACE_VERSION";

		[Token(Token = "0x4000613")]
		public const string STEAMFRIENDS_INTERFACE_VERSION = "SteamFriends015";

		[Token(Token = "0x4000614")]
		public const string STEAMGAMECOORDINATOR_INTERFACE_VERSION = "SteamGameCoordinator001";

		[Token(Token = "0x4000615")]
		public const string STEAMGAMESERVER_INTERFACE_VERSION = "SteamGameServer012";

		[Token(Token = "0x4000616")]
		public const string STEAMGAMESERVERSTATS_INTERFACE_VERSION = "SteamGameServerStats001";

		[Token(Token = "0x4000617")]
		public const string STEAMHTMLSURFACE_INTERFACE_VERSION = "STEAMHTMLSURFACE_INTERFACE_VERSION_003";

		[Token(Token = "0x4000618")]
		public const string STEAMHTTP_INTERFACE_VERSION = "STEAMHTTP_INTERFACE_VERSION002";

		[Token(Token = "0x4000619")]
		public const string STEAMINVENTORY_INTERFACE_VERSION = "STEAMINVENTORY_INTERFACE_V001";

		[Token(Token = "0x400061A")]
		public const string STEAMMATCHMAKING_INTERFACE_VERSION = "SteamMatchMaking009";

		[Token(Token = "0x400061B")]
		public const string STEAMMATCHMAKINGSERVERS_INTERFACE_VERSION = "SteamMatchMakingServers002";

		[Token(Token = "0x400061C")]
		public const string STEAMMUSIC_INTERFACE_VERSION = "STEAMMUSIC_INTERFACE_VERSION001";

		[Token(Token = "0x400061D")]
		public const string STEAMMUSICREMOTE_INTERFACE_VERSION = "STEAMMUSICREMOTE_INTERFACE_VERSION001";

		[Token(Token = "0x400061E")]
		public const string STEAMNETWORKING_INTERFACE_VERSION = "SteamNetworking005";

		[Token(Token = "0x400061F")]
		public const string STEAMREMOTESTORAGE_INTERFACE_VERSION = "STEAMREMOTESTORAGE_INTERFACE_VERSION012";

		[Token(Token = "0x4000620")]
		public const string STEAMSCREENSHOTS_INTERFACE_VERSION = "STEAMSCREENSHOTS_INTERFACE_VERSION002";

		[Token(Token = "0x4000621")]
		public const string STEAMUGC_INTERFACE_VERSION = "STEAMUGC_INTERFACE_VERSION007";

		[Token(Token = "0x4000622")]
		public const string STEAMUNIFIEDMESSAGES_INTERFACE_VERSION = "STEAMUNIFIEDMESSAGES_INTERFACE_VERSION001";

		[Token(Token = "0x4000623")]
		public const string STEAMUSER_INTERFACE_VERSION = "SteamUser018";

		[Token(Token = "0x4000624")]
		public const string STEAMUSERSTATS_INTERFACE_VERSION = "STEAMUSERSTATS_INTERFACE_VERSION011";

		[Token(Token = "0x4000625")]
		public const string STEAMUTILS_INTERFACE_VERSION = "SteamUtils007";

		[Token(Token = "0x4000626")]
		public const string STEAMVIDEO_INTERFACE_VERSION = "STEAMVIDEO_INTERFACE_V001";

		[Token(Token = "0x4000627")]
		public const int k_cubAppProofOfPurchaseKeyMax = 64;

		[Token(Token = "0x4000628")]
		public const int k_iSteamUserCallbacks = 100;

		[Token(Token = "0x4000629")]
		public const int k_iSteamGameServerCallbacks = 200;

		[Token(Token = "0x400062A")]
		public const int k_iSteamFriendsCallbacks = 300;

		[Token(Token = "0x400062B")]
		public const int k_iSteamBillingCallbacks = 400;

		[Token(Token = "0x400062C")]
		public const int k_iSteamMatchmakingCallbacks = 500;

		[Token(Token = "0x400062D")]
		public const int k_iSteamContentServerCallbacks = 600;

		[Token(Token = "0x400062E")]
		public const int k_iSteamUtilsCallbacks = 700;

		[Token(Token = "0x400062F")]
		public const int k_iClientFriendsCallbacks = 800;

		[Token(Token = "0x4000630")]
		public const int k_iClientUserCallbacks = 900;

		[Token(Token = "0x4000631")]
		public const int k_iSteamAppsCallbacks = 1000;

		[Token(Token = "0x4000632")]
		public const int k_iSteamUserStatsCallbacks = 1100;

		[Token(Token = "0x4000633")]
		public const int k_iSteamNetworkingCallbacks = 1200;

		[Token(Token = "0x4000634")]
		public const int k_iClientRemoteStorageCallbacks = 1300;

		[Token(Token = "0x4000635")]
		public const int k_iClientDepotBuilderCallbacks = 1400;

		[Token(Token = "0x4000636")]
		public const int k_iSteamGameServerItemsCallbacks = 1500;

		[Token(Token = "0x4000637")]
		public const int k_iClientUtilsCallbacks = 1600;

		[Token(Token = "0x4000638")]
		public const int k_iSteamGameCoordinatorCallbacks = 1700;

		[Token(Token = "0x4000639")]
		public const int k_iSteamGameServerStatsCallbacks = 1800;

		[Token(Token = "0x400063A")]
		public const int k_iSteam2AsyncCallbacks = 1900;

		[Token(Token = "0x400063B")]
		public const int k_iSteamGameStatsCallbacks = 2000;

		[Token(Token = "0x400063C")]
		public const int k_iClientHTTPCallbacks = 2100;

		[Token(Token = "0x400063D")]
		public const int k_iClientScreenshotsCallbacks = 2200;

		[Token(Token = "0x400063E")]
		public const int k_iSteamScreenshotsCallbacks = 2300;

		[Token(Token = "0x400063F")]
		public const int k_iClientAudioCallbacks = 2400;

		[Token(Token = "0x4000640")]
		public const int k_iClientUnifiedMessagesCallbacks = 2500;

		[Token(Token = "0x4000641")]
		public const int k_iSteamStreamLauncherCallbacks = 2600;

		[Token(Token = "0x4000642")]
		public const int k_iClientControllerCallbacks = 2700;

		[Token(Token = "0x4000643")]
		public const int k_iSteamControllerCallbacks = 2800;

		[Token(Token = "0x4000644")]
		public const int k_iClientParentalSettingsCallbacks = 2900;

		[Token(Token = "0x4000645")]
		public const int k_iClientDeviceAuthCallbacks = 3000;

		[Token(Token = "0x4000646")]
		public const int k_iClientNetworkDeviceManagerCallbacks = 3100;

		[Token(Token = "0x4000647")]
		public const int k_iClientMusicCallbacks = 3200;

		[Token(Token = "0x4000648")]
		public const int k_iClientRemoteClientManagerCallbacks = 3300;

		[Token(Token = "0x4000649")]
		public const int k_iClientUGCCallbacks = 3400;

		[Token(Token = "0x400064A")]
		public const int k_iSteamStreamClientCallbacks = 3500;

		[Token(Token = "0x400064B")]
		public const int k_IClientProductBuilderCallbacks = 3600;

		[Token(Token = "0x400064C")]
		public const int k_iClientShortcutsCallbacks = 3700;

		[Token(Token = "0x400064D")]
		public const int k_iClientRemoteControlManagerCallbacks = 3800;

		[Token(Token = "0x400064E")]
		public const int k_iSteamAppListCallbacks = 3900;

		[Token(Token = "0x400064F")]
		public const int k_iSteamMusicCallbacks = 4000;

		[Token(Token = "0x4000650")]
		public const int k_iSteamMusicRemoteCallbacks = 4100;

		[Token(Token = "0x4000651")]
		public const int k_iClientVRCallbacks = 4200;

		[Token(Token = "0x4000652")]
		public const int k_iClientReservedCallbacks = 4300;

		[Token(Token = "0x4000653")]
		public const int k_iSteamReservedCallbacks = 4400;

		[Token(Token = "0x4000654")]
		public const int k_iSteamHTMLSurfaceCallbacks = 4500;

		[Token(Token = "0x4000655")]
		public const int k_iClientVideoCallbacks = 4600;

		[Token(Token = "0x4000656")]
		public const int k_iClientInventoryCallbacks = 4700;

		[Token(Token = "0x4000657")]
		public const int k_cchMaxFriendsGroupName = 64;

		[Token(Token = "0x4000658")]
		public const int k_cFriendsGroupLimit = 100;

		[Token(Token = "0x4000659")]
		public const int k_cEnumerateFollowersMax = 50;

		[Token(Token = "0x400065A")]
		public const int k_cchPersonaNameMax = 128;

		[Token(Token = "0x400065B")]
		public const int k_cwchPersonaNameMax = 32;

		[Token(Token = "0x400065C")]
		public const int k_cubChatMetadataMax = 8192;

		[Token(Token = "0x400065D")]
		public const int k_cchMaxRichPresenceKeys = 20;

		[Token(Token = "0x400065E")]
		public const int k_cchMaxRichPresenceKeyLength = 64;

		[Token(Token = "0x400065F")]
		public const int k_cchMaxRichPresenceValueLength = 256;

		[Token(Token = "0x4000660")]
		public const int k_unServerFlagNone = 0;

		[Token(Token = "0x4000661")]
		public const int k_unServerFlagActive = 1;

		[Token(Token = "0x4000662")]
		public const int k_unServerFlagSecure = 2;

		[Token(Token = "0x4000663")]
		public const int k_unServerFlagDedicated = 4;

		[Token(Token = "0x4000664")]
		public const int k_unServerFlagLinux = 8;

		[Token(Token = "0x4000665")]
		public const int k_unServerFlagPassworded = 16;

		[Token(Token = "0x4000666")]
		public const int k_unServerFlagPrivate = 32;

		[Token(Token = "0x4000667")]
		public const int k_unFavoriteFlagNone = 0;

		[Token(Token = "0x4000668")]
		public const int k_unFavoriteFlagFavorite = 1;

		[Token(Token = "0x4000669")]
		public const int k_unFavoriteFlagHistory = 2;

		[Token(Token = "0x400066A")]
		public const int k_unMaxCloudFileChunkSize = 104857600;

		[Token(Token = "0x400066B")]
		public const int k_cchPublishedDocumentTitleMax = 129;

		[Token(Token = "0x400066C")]
		public const int k_cchPublishedDocumentDescriptionMax = 8000;

		[Token(Token = "0x400066D")]
		public const int k_cchPublishedDocumentChangeDescriptionMax = 8000;

		[Token(Token = "0x400066E")]
		public const int k_unEnumeratePublishedFilesMaxResults = 50;

		[Token(Token = "0x400066F")]
		public const int k_cchTagListMax = 1025;

		[Token(Token = "0x4000670")]
		public const int k_cchFilenameMax = 260;

		[Token(Token = "0x4000671")]
		public const int k_cchPublishedFileURLMax = 256;

		[Token(Token = "0x4000672")]
		public const int k_nScreenshotMaxTaggedUsers = 32;

		[Token(Token = "0x4000673")]
		public const int k_nScreenshotMaxTaggedPublishedFiles = 32;

		[Token(Token = "0x4000674")]
		public const int k_cubUFSTagTypeMax = 255;

		[Token(Token = "0x4000675")]
		public const int k_cubUFSTagValueMax = 255;

		[Token(Token = "0x4000676")]
		public const int k_ScreenshotThumbWidth = 200;

		[Token(Token = "0x4000677")]
		public const int kNumUGCResultsPerPage = 50;

		[Token(Token = "0x4000678")]
		public const int k_cchDeveloperMetadataMax = 5000;

		[Token(Token = "0x4000679")]
		public const int k_cchStatNameMax = 128;

		[Token(Token = "0x400067A")]
		public const int k_cchLeaderboardNameMax = 128;

		[Token(Token = "0x400067B")]
		public const int k_cLeaderboardDetailsMax = 64;

		[Token(Token = "0x400067C")]
		public const int k_cbMaxGameServerGameDir = 32;

		[Token(Token = "0x400067D")]
		public const int k_cbMaxGameServerMapName = 32;

		[Token(Token = "0x400067E")]
		public const int k_cbMaxGameServerGameDescription = 64;

		[Token(Token = "0x400067F")]
		public const int k_cbMaxGameServerName = 64;

		[Token(Token = "0x4000680")]
		public const int k_cbMaxGameServerTags = 128;

		[Token(Token = "0x4000681")]
		public const int k_cbMaxGameServerGameData = 2048;

		[Token(Token = "0x4000682")]
		public const int k_unSteamAccountIDMask = -1;

		[Token(Token = "0x4000683")]
		public const int k_unSteamAccountInstanceMask = 1048575;

		[Token(Token = "0x4000684")]
		public const int k_unSteamUserDesktopInstance = 1;

		[Token(Token = "0x4000685")]
		public const int k_unSteamUserConsoleInstance = 2;

		[Token(Token = "0x4000686")]
		public const int k_unSteamUserWebInstance = 4;

		[Token(Token = "0x4000687")]
		public const int k_cchGameExtraInfoMax = 64;

		[Token(Token = "0x4000688")]
		public const int k_nSteamEncryptedAppTicketSymmetricKeyLen = 32;

		[Token(Token = "0x4000689")]
		public const int k_cubSaltSize = 8;

		[Token(Token = "0x400068A")]
		public const ulong k_GIDNil = ulong.MaxValue;

		[Token(Token = "0x400068B")]
		public const ulong k_TxnIDNil = ulong.MaxValue;

		[Token(Token = "0x400068C")]
		public const ulong k_TxnIDUnknown = 0uL;

		[Token(Token = "0x400068D")]
		public const int k_uPackageIdFreeSub = 0;

		[Token(Token = "0x400068E")]
		public const int k_uPackageIdInvalid = -1;

		[Token(Token = "0x400068F")]
		public const ulong k_ulAssetClassIdInvalid = 0uL;

		[Token(Token = "0x4000690")]
		public const int k_uPhysicalItemIdInvalid = 0;

		[Token(Token = "0x4000691")]
		public const int k_uCellIDInvalid = -1;

		[Token(Token = "0x4000692")]
		public const int k_uPartnerIdInvalid = 0;

		[Token(Token = "0x4000693")]
		public const int MAX_STEAM_CONTROLLERS = 16;

		[Token(Token = "0x4000694")]
		public const int STEAM_RIGHT_TRIGGER_MASK = 1;

		[Token(Token = "0x4000695")]
		public const int STEAM_LEFT_TRIGGER_MASK = 2;

		[Token(Token = "0x4000696")]
		public const int STEAM_RIGHT_BUMPER_MASK = 4;

		[Token(Token = "0x4000697")]
		public const int STEAM_LEFT_BUMPER_MASK = 8;

		[Token(Token = "0x4000698")]
		public const int STEAM_BUTTON_0_MASK = 16;

		[Token(Token = "0x4000699")]
		public const int STEAM_BUTTON_1_MASK = 32;

		[Token(Token = "0x400069A")]
		public const int STEAM_BUTTON_2_MASK = 64;

		[Token(Token = "0x400069B")]
		public const int STEAM_BUTTON_3_MASK = 128;

		[Token(Token = "0x400069C")]
		public const int STEAM_TOUCH_0_MASK = 256;

		[Token(Token = "0x400069D")]
		public const int STEAM_TOUCH_1_MASK = 512;

		[Token(Token = "0x400069E")]
		public const int STEAM_TOUCH_2_MASK = 1024;

		[Token(Token = "0x400069F")]
		public const int STEAM_TOUCH_3_MASK = 2048;

		[Token(Token = "0x40006A0")]
		public const int STEAM_BUTTON_MENU_MASK = 4096;

		[Token(Token = "0x40006A1")]
		public const int STEAM_BUTTON_STEAM_MASK = 8192;

		[Token(Token = "0x40006A2")]
		public const int STEAM_BUTTON_ESCAPE_MASK = 16384;

		[Token(Token = "0x40006A3")]
		public const int STEAM_BUTTON_BACK_LEFT_MASK = 32768;

		[Token(Token = "0x40006A4")]
		public const int STEAM_BUTTON_BACK_RIGHT_MASK = 65536;

		[Token(Token = "0x40006A5")]
		public const int STEAM_BUTTON_LEFTPAD_CLICKED_MASK = 131072;

		[Token(Token = "0x40006A6")]
		public const int STEAM_BUTTON_RIGHTPAD_CLICKED_MASK = 262144;

		[Token(Token = "0x40006A7")]
		public const int STEAM_LEFTPAD_FINGERDOWN_MASK = 524288;

		[Token(Token = "0x40006A8")]
		public const int STEAM_RIGHTPAD_FINGERDOWN_MASK = 1048576;

		[Token(Token = "0x40006A9")]
		public const int STEAM_JOYSTICK_BUTTON_MASK = 4194304;

		[Token(Token = "0x40006AA")]
		public const short MASTERSERVERUPDATERPORT_USEGAMESOCKETSHARE = -1;

		[Token(Token = "0x40006AB")]
		public const int INVALID_HTTPREQUEST_HANDLE = 0;

		[Token(Token = "0x40006AC")]
		public const byte k_nMaxLobbyKeyLength = byte.MaxValue;

		[Token(Token = "0x40006AD")]
		public const int k_SteamMusicNameMaxLength = 255;

		[Token(Token = "0x40006AE")]
		public const int k_SteamMusicPNGMaxLength = 65535;

		[Token(Token = "0x40006AF")]
		public const int QUERY_PORT_NOT_INITIALIZED = 65535;

		[Token(Token = "0x40006B0")]
		public const int QUERY_PORT_ERROR = 65534;
	}
	[Token(Token = "0x2000146")]
	public enum ERegisterActivationCodeResult
	{
		[Token(Token = "0x40006B2")]
		k_ERegisterActivationCodeResultOK,
		[Token(Token = "0x40006B3")]
		k_ERegisterActivationCodeResultFail,
		[Token(Token = "0x40006B4")]
		k_ERegisterActivationCodeResultAlreadyRegistered,
		[Token(Token = "0x40006B5")]
		k_ERegisterActivationCodeResultTimeout,
		[Token(Token = "0x40006B6")]
		k_ERegisterActivationCodeAlreadyOwned
	}
	[Token(Token = "0x2000147")]
	public enum ESteamControllerPad
	{
		[Token(Token = "0x40006B8")]
		k_ESteamControllerPad_Left,
		[Token(Token = "0x40006B9")]
		k_ESteamControllerPad_Right
	}
	[Token(Token = "0x2000148")]
	public enum EFriendRelationship
	{
		[Token(Token = "0x40006BB")]
		k_EFriendRelationshipNone,
		[Token(Token = "0x40006BC")]
		k_EFriendRelationshipBlocked,
		[Token(Token = "0x40006BD")]
		k_EFriendRelationshipRequestRecipient,
		[Token(Token = "0x40006BE")]
		k_EFriendRelationshipFriend,
		[Token(Token = "0x40006BF")]
		k_EFriendRelationshipRequestInitiator,
		[Token(Token = "0x40006C0")]
		k_EFriendRelationshipIgnored,
		[Token(Token = "0x40006C1")]
		k_EFriendRelationshipIgnoredFriend,
		[Token(Token = "0x40006C2")]
		k_EFriendRelationshipSuggested,
		[Token(Token = "0x40006C3")]
		k_EFriendRelationshipMax
	}
	[Token(Token = "0x2000149")]
	public enum EPersonaState
	{
		[Token(Token = "0x40006C5")]
		k_EPersonaStateOffline,
		[Token(Token = "0x40006C6")]
		k_EPersonaStateOnline,
		[Token(Token = "0x40006C7")]
		k_EPersonaStateBusy,
		[Token(Token = "0x40006C8")]
		k_EPersonaStateAway,
		[Token(Token = "0x40006C9")]
		k_EPersonaStateSnooze,
		[Token(Token = "0x40006CA")]
		k_EPersonaStateLookingToTrade,
		[Token(Token = "0x40006CB")]
		k_EPersonaStateLookingToPlay,
		[Token(Token = "0x40006CC")]
		k_EPersonaStateMax
	}
	[Token(Token = "0x200014A")]
	[Flags]
	public enum EFriendFlags
	{
		[Token(Token = "0x40006CE")]
		k_EFriendFlagNone = 0,
		[Token(Token = "0x40006CF")]
		k_EFriendFlagBlocked = 1,
		[Token(Token = "0x40006D0")]
		k_EFriendFlagFriendshipRequested = 2,
		[Token(Token = "0x40006D1")]
		k_EFriendFlagImmediate = 4,
		[Token(Token = "0x40006D2")]
		k_EFriendFlagClanMember = 8,
		[Token(Token = "0x40006D3")]
		k_EFriendFlagOnGameServer = 0x10,
		[Token(Token = "0x40006D4")]
		k_EFriendFlagRequestingFriendship = 0x80,
		[Token(Token = "0x40006D5")]
		k_EFriendFlagRequestingInfo = 0x100,
		[Token(Token = "0x40006D6")]
		k_EFriendFlagIgnored = 0x200,
		[Token(Token = "0x40006D7")]
		k_EFriendFlagIgnoredFriend = 0x400,
		[Token(Token = "0x40006D8")]
		k_EFriendFlagSuggested = 0x800,
		[Token(Token = "0x40006D9")]
		k_EFriendFlagAll = 0xFFFF
	}
	[Token(Token = "0x200014B")]
	public enum EUserRestriction
	{
		[Token(Token = "0x40006DB")]
		k_nUserRestrictionNone = 0,
		[Token(Token = "0x40006DC")]
		k_nUserRestrictionUnknown = 1,
		[Token(Token = "0x40006DD")]
		k_nUserRestrictionAnyChat = 2,
		[Token(Token = "0x40006DE")]
		k_nUserRestrictionVoiceChat = 4,
		[Token(Token = "0x40006DF")]
		k_nUserRestrictionGroupChat = 8,
		[Token(Token = "0x40006E0")]
		k_nUserRestrictionRating = 0x10,
		[Token(Token = "0x40006E1")]
		k_nUserRestrictionGameInvites = 0x20,
		[Token(Token = "0x40006E2")]
		k_nUserRestrictionTrading = 0x40
	}
	[Token(Token = "0x200014C")]
	public enum EOverlayToStoreFlag
	{
		[Token(Token = "0x40006E4")]
		k_EOverlayToStoreFlag_None,
		[Token(Token = "0x40006E5")]
		k_EOverlayToStoreFlag_AddToCart,
		[Token(Token = "0x40006E6")]
		k_EOverlayToStoreFlag_AddToCartAndShow
	}
	[Token(Token = "0x200014D")]
	[Flags]
	public enum EPersonaChange
	{
		[Token(Token = "0x40006E8")]
		k_EPersonaChangeName = 1,
		[Token(Token = "0x40006E9")]
		k_EPersonaChangeStatus = 2,
		[Token(Token = "0x40006EA")]
		k_EPersonaChangeComeOnline = 4,
		[Token(Token = "0x40006EB")]
		k_EPersonaChangeGoneOffline = 8,
		[Token(Token = "0x40006EC")]
		k_EPersonaChangeGamePlayed = 0x10,
		[Token(Token = "0x40006ED")]
		k_EPersonaChangeGameServer = 0x20,
		[Token(Token = "0x40006EE")]
		k_EPersonaChangeAvatar = 0x40,
		[Token(Token = "0x40006EF")]
		k_EPersonaChangeJoinedSource = 0x80,
		[Token(Token = "0x40006F0")]
		k_EPersonaChangeLeftSource = 0x100,
		[Token(Token = "0x40006F1")]
		k_EPersonaChangeRelationshipChanged = 0x200,
		[Token(Token = "0x40006F2")]
		k_EPersonaChangeNameFirstSet = 0x400,
		[Token(Token = "0x40006F3")]
		k_EPersonaChangeFacebookInfo = 0x800,
		[Token(Token = "0x40006F4")]
		k_EPersonaChangeNickname = 0x1000,
		[Token(Token = "0x40006F5")]
		k_EPersonaChangeSteamLevel = 0x2000
	}
	[Token(Token = "0x200014E")]
	public enum EGCResults
	{
		[Token(Token = "0x40006F7")]
		k_EGCResultOK,
		[Token(Token = "0x40006F8")]
		k_EGCResultNoMessage,
		[Token(Token = "0x40006F9")]
		k_EGCResultBufferTooSmall,
		[Token(Token = "0x40006FA")]
		k_EGCResultNotLoggedOn,
		[Token(Token = "0x40006FB")]
		k_EGCResultInvalidMessage
	}
	[Token(Token = "0x200014F")]
	public enum EHTMLMouseButton
	{
		[Token(Token = "0x40006FD")]
		eHTMLMouseButton_Left,
		[Token(Token = "0x40006FE")]
		eHTMLMouseButton_Right,
		[Token(Token = "0x40006FF")]
		eHTMLMouseButton_Middle
	}
	[Token(Token = "0x2000150")]
	public enum EMouseCursor
	{
		[Token(Token = "0x4000701")]
		dc_user,
		[Token(Token = "0x4000702")]
		dc_none,
		[Token(Token = "0x4000703")]
		dc_arrow,
		[Token(Token = "0x4000704")]
		dc_ibeam,
		[Token(Token = "0x4000705")]
		dc_hourglass,
		[Token(Token = "0x4000706")]
		dc_waitarrow,
		[Token(Token = "0x4000707")]
		dc_crosshair,
		[Token(Token = "0x4000708")]
		dc_up,
		[Token(Token = "0x4000709")]
		dc_sizenw,
		[Token(Token = "0x400070A")]
		dc_sizese,
		[Token(Token = "0x400070B")]
		dc_sizene,
		[Token(Token = "0x400070C")]
		dc_sizesw,
		[Token(Token = "0x400070D")]
		dc_sizew,
		[Token(Token = "0x400070E")]
		dc_sizee,
		[Token(Token = "0x400070F")]
		dc_sizen,
		[Token(Token = "0x4000710")]
		dc_sizes,
		[Token(Token = "0x4000711")]
		dc_sizewe,
		[Token(Token = "0x4000712")]
		dc_sizens,
		[Token(Token = "0x4000713")]
		dc_sizeall,
		[Token(Token = "0x4000714")]
		dc_no,
		[Token(Token = "0x4000715")]
		dc_hand,
		[Token(Token = "0x4000716")]
		dc_blank,
		[Token(Token = "0x4000717")]
		dc_middle_pan,
		[Token(Token = "0x4000718")]
		dc_north_pan,
		[Token(Token = "0x4000719")]
		dc_north_east_pan,
		[Token(Token = "0x400071A")]
		dc_east_pan,
		[Token(Token = "0x400071B")]
		dc_south_east_pan,
		[Token(Token = "0x400071C")]
		dc_south_pan,
		[Token(Token = "0x400071D")]
		dc_south_west_pan,
		[Token(Token = "0x400071E")]
		dc_west_pan,
		[Token(Token = "0x400071F")]
		dc_north_west_pan,
		[Token(Token = "0x4000720")]
		dc_alias,
		[Token(Token = "0x4000721")]
		dc_cell,
		[Token(Token = "0x4000722")]
		dc_colresize,
		[Token(Token = "0x4000723")]
		dc_copycur,
		[Token(Token = "0x4000724")]
		dc_verticaltext,
		[Token(Token = "0x4000725")]
		dc_rowresize,
		[Token(Token = "0x4000726")]
		dc_zoomin,
		[Token(Token = "0x4000727")]
		dc_zoomout,
		[Token(Token = "0x4000728")]
		dc_help,
		[Token(Token = "0x4000729")]
		dc_custom,
		[Token(Token = "0x400072A")]
		dc_last
	}
	[Token(Token = "0x2000151")]
	[Flags]
	public enum EHTMLKeyModifiers
	{
		[Token(Token = "0x400072C")]
		k_eHTMLKeyModifier_None = 0,
		[Token(Token = "0x400072D")]
		k_eHTMLKeyModifier_AltDown = 1,
		[Token(Token = "0x400072E")]
		k_eHTMLKeyModifier_CtrlDown = 2,
		[Token(Token = "0x400072F")]
		k_eHTMLKeyModifier_ShiftDown = 4
	}
	[Token(Token = "0x2000152")]
	[Flags]
	public enum ESteamItemFlags
	{
		[Token(Token = "0x4000731")]
		k_ESteamItemNoTrade = 1,
		[Token(Token = "0x4000732")]
		k_ESteamItemRemoved = 0x100,
		[Token(Token = "0x4000733")]
		k_ESteamItemConsumed = 0x200
	}
	[Token(Token = "0x2000153")]
	public enum ELobbyType
	{
		[Token(Token = "0x4000735")]
		k_ELobbyTypePrivate,
		[Token(Token = "0x4000736")]
		k_ELobbyTypeFriendsOnly,
		[Token(Token = "0x4000737")]
		k_ELobbyTypePublic,
		[Token(Token = "0x4000738")]
		k_ELobbyTypeInvisible
	}
	[Token(Token = "0x2000154")]
	public enum ELobbyComparison
	{
		[Token(Token = "0x400073A")]
		k_ELobbyComparisonEqualToOrLessThan = -2,
		[Token(Token = "0x400073B")]
		k_ELobbyComparisonLessThan,
		[Token(Token = "0x400073C")]
		k_ELobbyComparisonEqual,
		[Token(Token = "0x400073D")]
		k_ELobbyComparisonGreaterThan,
		[Token(Token = "0x400073E")]
		k_ELobbyComparisonEqualToOrGreaterThan,
		[Token(Token = "0x400073F")]
		k_ELobbyComparisonNotEqual
	}
	[Token(Token = "0x2000155")]
	public enum ELobbyDistanceFilter
	{
		[Token(Token = "0x4000741")]
		k_ELobbyDistanceFilterClose,
		[Token(Token = "0x4000742")]
		k_ELobbyDistanceFilterDefault,
		[Token(Token = "0x4000743")]
		k_ELobbyDistanceFilterFar,
		[Token(Token = "0x4000744")]
		k_ELobbyDistanceFilterWorldwide
	}
	[Token(Token = "0x2000156")]
	[Flags]
	public enum EChatMemberStateChange
	{
		[Token(Token = "0x4000746")]
		k_EChatMemberStateChangeEntered = 1,
		[Token(Token = "0x4000747")]
		k_EChatMemberStateChangeLeft = 2,
		[Token(Token = "0x4000748")]
		k_EChatMemberStateChangeDisconnected = 4,
		[Token(Token = "0x4000749")]
		k_EChatMemberStateChangeKicked = 8,
		[Token(Token = "0x400074A")]
		k_EChatMemberStateChangeBanned = 0x10
	}
	[Token(Token = "0x2000157")]
	public enum AudioPlayback_Status
	{
		[Token(Token = "0x400074C")]
		AudioPlayback_Undefined,
		[Token(Token = "0x400074D")]
		AudioPlayback_Playing,
		[Token(Token = "0x400074E")]
		AudioPlayback_Paused,
		[Token(Token = "0x400074F")]
		AudioPlayback_Idle
	}
	[Token(Token = "0x2000158")]
	public enum EP2PSessionError
	{
		[Token(Token = "0x4000751")]
		k_EP2PSessionErrorNone,
		[Token(Token = "0x4000752")]
		k_EP2PSessionErrorNotRunningApp,
		[Token(Token = "0x4000753")]
		k_EP2PSessionErrorNoRightsToApp,
		[Token(Token = "0x4000754")]
		k_EP2PSessionErrorDestinationNotLoggedIn,
		[Token(Token = "0x4000755")]
		k_EP2PSessionErrorTimeout,
		[Token(Token = "0x4000756")]
		k_EP2PSessionErrorMax
	}
	[Token(Token = "0x2000159")]
	public enum EP2PSend
	{
		[Token(Token = "0x4000758")]
		k_EP2PSendUnreliable,
		[Token(Token = "0x4000759")]
		k_EP2PSendUnreliableNoDelay,
		[Token(Token = "0x400075A")]
		k_EP2PSendReliable,
		[Token(Token = "0x400075B")]
		k_EP2PSendReliableWithBuffering
	}
	[Token(Token = "0x200015A")]
	public enum ESNetSocketState
	{
		[Token(Token = "0x400075D")]
		k_ESNetSocketStateInvalid = 0,
		[Token(Token = "0x400075E")]
		k_ESNetSocketStateConnected = 1,
		[Token(Token = "0x400075F")]
		k_ESNetSocketStateInitiated = 10,
		[Token(Token = "0x4000760")]
		k_ESNetSocketStateLocalCandidatesFound = 11,
		[Token(Token = "0x4000761")]
		k_ESNetSocketStateReceivedRemoteCandidates = 12,
		[Token(Token = "0x4000762")]
		k_ESNetSocketStateChallengeHandshake = 15,
		[Token(Token = "0x4000763")]
		k_ESNetSocketStateDisconnecting = 21,
		[Token(Token = "0x4000764")]
		k_ESNetSocketStateLocalDisconnect = 22,
		[Token(Token = "0x4000765")]
		k_ESNetSocketStateTimeoutDuringConnect = 23,
		[Token(Token = "0x4000766")]
		k_ESNetSocketStateRemoteEndDisconnected = 24,
		[Token(Token = "0x4000767")]
		k_ESNetSocketStateConnectionBroken = 25
	}
	[Token(Token = "0x200015B")]
	public enum ESNetSocketConnectionType
	{
		[Token(Token = "0x4000769")]
		k_ESNetSocketConnectionTypeNotConnected,
		[Token(Token = "0x400076A")]
		k_ESNetSocketConnectionTypeUDP,
		[Token(Token = "0x400076B")]
		k_ESNetSocketConnectionTypeUDPRelay
	}
	[Token(Token = "0x200015C")]
	public enum EResolveConflict
	{
		[Token(Token = "0x400076D")]
		k_EResolveConflictKeepClient = 1,
		[Token(Token = "0x400076E")]
		k_EResolveConflictKeepServer
	}
	[Token(Token = "0x200015D")]
	[Flags]
	public enum ERemoteStoragePlatform
	{
		[Token(Token = "0x4000770")]
		k_ERemoteStoragePlatformNone = 0,
		[Token(Token = "0x4000771")]
		k_ERemoteStoragePlatformWindows = 1,
		[Token(Token = "0x4000772")]
		k_ERemoteStoragePlatformOSX = 2,
		[Token(Token = "0x4000773")]
		k_ERemoteStoragePlatformPS3 = 4,
		[Token(Token = "0x4000774")]
		k_ERemoteStoragePlatformLinux = 8,
		[Token(Token = "0x4000775")]
		k_ERemoteStoragePlatformReserved2 = 0x10,
		[Token(Token = "0x4000776")]
		k_ERemoteStoragePlatformAll = -1
	}
	[Token(Token = "0x200015E")]
	public enum ERemoteStoragePublishedFileVisibility
	{
		[Token(Token = "0x4000778")]
		k_ERemoteStoragePublishedFileVisibilityPublic,
		[Token(Token = "0x4000779")]
		k_ERemoteStoragePublishedFileVisibilityFriendsOnly,
		[Token(Token = "0x400077A")]
		k_ERemoteStoragePublishedFileVisibilityPrivate
	}
	[Token(Token = "0x200015F")]
	public enum EWorkshopFileType
	{
		[Token(Token = "0x400077C")]
		k_EWorkshopFileTypeFirst = 0,
		[Token(Token = "0x400077D")]
		k_EWorkshopFileTypeCommunity = 0,
		[Token(Token = "0x400077E")]
		k_EWorkshopFileTypeMicrotransaction = 1,
		[Token(Token = "0x400077F")]
		k_EWorkshopFileTypeCollection = 2,
		[Token(Token = "0x4000780")]
		k_EWorkshopFileTypeArt = 3,
		[Token(Token = "0x4000781")]
		k_EWorkshopFileTypeVideo = 4,
		[Token(Token = "0x4000782")]
		k_EWorkshopFileTypeScreenshot = 5,
		[Token(Token = "0x4000783")]
		k_EWorkshopFileTypeGame = 6,
		[Token(Token = "0x4000784")]
		k_EWorkshopFileTypeSoftware = 7,
		[Token(Token = "0x4000785")]
		k_EWorkshopFileTypeConcept = 8,
		[Token(Token = "0x4000786")]
		k_EWorkshopFileTypeWebGuide = 9,
		[Token(Token = "0x4000787")]
		k_EWorkshopFileTypeIntegratedGuide = 10,
		[Token(Token = "0x4000788")]
		k_EWorkshopFileTypeMerch = 11,
		[Token(Token = "0x4000789")]
		k_EWorkshopFileTypeControllerBinding = 12,
		[Token(Token = "0x400078A")]
		k_EWorkshopFileTypeSteamworksAccessInvite = 13,
		[Token(Token = "0x400078B")]
		k_EWorkshopFileTypeSteamVideo = 14,
		[Token(Token = "0x400078C")]
		k_EWorkshopFileTypeGameManagedItem = 15,
		[Token(Token = "0x400078D")]
		k_EWorkshopFileTypeMax = 16
	}
	[Token(Token = "0x2000160")]
	public enum EWorkshopVote
	{
		[Token(Token = "0x400078F")]
		k_EWorkshopVoteUnvoted,
		[Token(Token = "0x4000790")]
		k_EWorkshopVoteFor,
		[Token(Token = "0x4000791")]
		k_EWorkshopVoteAgainst,
		[Token(Token = "0x4000792")]
		k_EWorkshopVoteLater
	}
	[Token(Token = "0x2000161")]
	public enum EWorkshopFileAction
	{
		[Token(Token = "0x4000794")]
		k_EWorkshopFileActionPlayed,
		[Token(Token = "0x4000795")]
		k_EWorkshopFileActionCompleted
	}
	[Token(Token = "0x2000162")]
	public enum EWorkshopEnumerationType
	{
		[Token(Token = "0x4000797")]
		k_EWorkshopEnumerationTypeRankedByVote,
		[Token(Token = "0x4000798")]
		k_EWorkshopEnumerationTypeRecent,
		[Token(Token = "0x4000799")]
		k_EWorkshopEnumerationTypeTrending,
		[Token(Token = "0x400079A")]
		k_EWorkshopEnumerationTypeFavoritesOfFriends,
		[Token(Token = "0x400079B")]
		k_EWorkshopEnumerationTypeVotedByFriends,
		[Token(Token = "0x400079C")]
		k_EWorkshopEnumerationTypeContentByFriends,
		[Token(Token = "0x400079D")]
		k_EWorkshopEnumerationTypeRecentFromFollowedUsers
	}
	[Token(Token = "0x2000163")]
	public enum EWorkshopVideoProvider
	{
		[Token(Token = "0x400079F")]
		k_EWorkshopVideoProviderNone,
		[Token(Token = "0x40007A0")]
		k_EWorkshopVideoProviderYoutube
	}
	[Token(Token = "0x2000164")]
	public enum EUGCReadAction
	{
		[Token(Token = "0x40007A2")]
		k_EUGCRead_ContinueReadingUntilFinished,
		[Token(Token = "0x40007A3")]
		k_EUGCRead_ContinueReading,
		[Token(Token = "0x40007A4")]
		k_EUGCRead_Close
	}
	[Token(Token = "0x2000165")]
	public enum EUGCMatchingUGCType
	{
		[Token(Token = "0x40007A6")]
		k_EUGCMatchingUGCType_Items,
		[Token(Token = "0x40007A7")]
		k_EUGCMatchingUGCType_Items_Mtx,
		[Token(Token = "0x40007A8")]
		k_EUGCMatchingUGCType_Items_ReadyToUse,
		[Token(Token = "0x40007A9")]
		k_EUGCMatchingUGCType_Collections,
		[Token(Token = "0x40007AA")]
		k_EUGCMatchingUGCType_Artwork,
		[Token(Token = "0x40007AB")]
		k_EUGCMatchingUGCType_Videos,
		[Token(Token = "0x40007AC")]
		k_EUGCMatchingUGCType_Screenshots,
		[Token(Token = "0x40007AD")]
		k_EUGCMatchingUGCType_AllGuides,
		[Token(Token = "0x40007AE")]
		k_EUGCMatchingUGCType_WebGuides,
		[Token(Token = "0x40007AF")]
		k_EUGCMatchingUGCType_IntegratedGuides,
		[Token(Token = "0x40007B0")]
		k_EUGCMatchingUGCType_UsableInGame,
		[Token(Token = "0x40007B1")]
		k_EUGCMatchingUGCType_ControllerBindings,
		[Token(Token = "0x40007B2")]
		k_EUGCMatchingUGCType_GameManagedItems
	}
	[Token(Token = "0x2000166")]
	public enum EUserUGCList
	{
		[Token(Token = "0x40007B4")]
		k_EUserUGCList_Published,
		[Token(Token = "0x40007B5")]
		k_EUserUGCList_VotedOn,
		[Token(Token = "0x40007B6")]
		k_EUserUGCList_VotedUp,
		[Token(Token = "0x40007B7")]
		k_EUserUGCList_VotedDown,
		[Token(Token = "0x40007B8")]
		k_EUserUGCList_WillVoteLater,
		[Token(Token = "0x40007B9")]
		k_EUserUGCList_Favorited,
		[Token(Token = "0x40007BA")]
		k_EUserUGCList_Subscribed,
		[Token(Token = "0x40007BB")]
		k_EUserUGCList_UsedOrPlayed,
		[Token(Token = "0x40007BC")]
		k_EUserUGCList_Followed
	}
	[Token(Token = "0x2000167")]
	public enum EUserUGCListSortOrder
	{
		[Token(Token = "0x40007BE")]
		k_EUserUGCListSortOrder_CreationOrderDesc,
		[Token(Token = "0x40007BF")]
		k_EUserUGCListSortOrder_CreationOrderAsc,
		[Token(Token = "0x40007C0")]
		k_EUserUGCListSortOrder_TitleAsc,
		[Token(Token = "0x40007C1")]
		k_EUserUGCListSortOrder_LastUpdatedDesc,
		[Token(Token = "0x40007C2")]
		k_EUserUGCListSortOrder_SubscriptionDateDesc,
		[Token(Token = "0x40007C3")]
		k_EUserUGCListSortOrder_VoteScoreDesc,
		[Token(Token = "0x40007C4")]
		k_EUserUGCListSortOrder_ForModeration
	}
	[Token(Token = "0x2000168")]
	public enum EUGCQuery
	{
		[Token(Token = "0x40007C6")]
		k_EUGCQuery_RankedByVote,
		[Token(Token = "0x40007C7")]
		k_EUGCQuery_RankedByPublicationDate,
		[Token(Token = "0x40007C8")]
		k_EUGCQuery_AcceptedForGameRankedByAcceptanceDate,
		[Token(Token = "0x40007C9")]
		k_EUGCQuery_RankedByTrend,
		[Token(Token = "0x40007CA")]
		k_EUGCQuery_FavoritedByFriendsRankedByPublicationDate,
		[Token(Token = "0x40007CB")]
		k_EUGCQuery_CreatedByFriendsRankedByPublicationDate,
		[Token(Token = "0x40007CC")]
		k_EUGCQuery_RankedByNumTimesReported,
		[Token(Token = "0x40007CD")]
		k_EUGCQuery_CreatedByFollowedUsersRankedByPublicationDate,
		[Token(Token = "0x40007CE")]
		k_EUGCQuery_NotYetRated,
		[Token(Token = "0x40007CF")]
		k_EUGCQuery_RankedByTotalVotesAsc,
		[Token(Token = "0x40007D0")]
		k_EUGCQuery_RankedByVotesUp,
		[Token(Token = "0x40007D1")]
		k_EUGCQuery_RankedByTextSearch,
		[Token(Token = "0x40007D2")]
		k_EUGCQuery_RankedByTotalUniqueSubscriptions
	}
	[Token(Token = "0x2000169")]
	public enum EItemUpdateStatus
	{
		[Token(Token = "0x40007D4")]
		k_EItemUpdateStatusInvalid,
		[Token(Token = "0x40007D5")]
		k_EItemUpdateStatusPreparingConfig,
		[Token(Token = "0x40007D6")]
		k_EItemUpdateStatusPreparingContent,
		[Token(Token = "0x40007D7")]
		k_EItemUpdateStatusUploadingContent,
		[Token(Token = "0x40007D8")]
		k_EItemUpdateStatusUploadingPreviewFile,
		[Token(Token = "0x40007D9")]
		k_EItemUpdateStatusCommittingChanges
	}
	[Token(Token = "0x200016A")]
	[Flags]
	public enum EItemState
	{
		[Token(Token = "0x40007DB")]
		k_EItemStateNone = 0,
		[Token(Token = "0x40007DC")]
		k_EItemStateSubscribed = 1,
		[Token(Token = "0x40007DD")]
		k_EItemStateLegacyItem = 2,
		[Token(Token = "0x40007DE")]
		k_EItemStateInstalled = 4,
		[Token(Token = "0x40007DF")]
		k_EItemStateNeedsUpdate = 8,
		[Token(Token = "0x40007E0")]
		k_EItemStateDownloading = 0x10,
		[Token(Token = "0x40007E1")]
		k_EItemStateDownloadPending = 0x20
	}
	[Token(Token = "0x200016B")]
	public enum EItemStatistic
	{
		[Token(Token = "0x40007E3")]
		k_EItemStatistic_NumSubscriptions,
		[Token(Token = "0x40007E4")]
		k_EItemStatistic_NumFavorites,
		[Token(Token = "0x40007E5")]
		k_EItemStatistic_NumFollowers,
		[Token(Token = "0x40007E6")]
		k_EItemStatistic_NumUniqueSubscriptions,
		[Token(Token = "0x40007E7")]
		k_EItemStatistic_NumUniqueFavorites,
		[Token(Token = "0x40007E8")]
		k_EItemStatistic_NumUniqueFollowers,
		[Token(Token = "0x40007E9")]
		k_EItemStatistic_NumUniqueWebsiteViews,
		[Token(Token = "0x40007EA")]
		k_EItemStatistic_ReportScore
	}
	[Token(Token = "0x200016C")]
	public enum EFailureType
	{
		[Token(Token = "0x40007EC")]
		k_EFailureFlushedCallbackQueue,
		[Token(Token = "0x40007ED")]
		k_EFailurePipeFail
	}
	[Token(Token = "0x200016D")]
	public enum ELeaderboardDataRequest
	{
		[Token(Token = "0x40007EF")]
		k_ELeaderboardDataRequestGlobal,
		[Token(Token = "0x40007F0")]
		k_ELeaderboardDataRequestGlobalAroundUser,
		[Token(Token = "0x40007F1")]
		k_ELeaderboardDataRequestFriends,
		[Token(Token = "0x40007F2")]
		k_ELeaderboardDataRequestUsers
	}
	[Token(Token = "0x200016E")]
	public enum ELeaderboardSortMethod
	{
		[Token(Token = "0x40007F4")]
		k_ELeaderboardSortMethodNone,
		[Token(Token = "0x40007F5")]
		k_ELeaderboardSortMethodAscending,
		[Token(Token = "0x40007F6")]
		k_ELeaderboardSortMethodDescending
	}
	[Token(Token = "0x200016F")]
	public enum ELeaderboardDisplayType
	{
		[Token(Token = "0x40007F8")]
		k_ELeaderboardDisplayTypeNone,
		[Token(Token = "0x40007F9")]
		k_ELeaderboardDisplayTypeNumeric,
		[Token(Token = "0x40007FA")]
		k_ELeaderboardDisplayTypeTimeSeconds,
		[Token(Token = "0x40007FB")]
		k_ELeaderboardDisplayTypeTimeMilliSeconds
	}
	[Token(Token = "0x2000170")]
	public enum ELeaderboardUploadScoreMethod
	{
		[Token(Token = "0x40007FD")]
		k_ELeaderboardUploadScoreMethodNone,
		[Token(Token = "0x40007FE")]
		k_ELeaderboardUploadScoreMethodKeepBest,
		[Token(Token = "0x40007FF")]
		k_ELeaderboardUploadScoreMethodForceUpdate
	}
	[Token(Token = "0x2000171")]
	public enum ESteamAPICallFailure
	{
		[Token(Token = "0x4000801")]
		k_ESteamAPICallFailureNone = -1,
		[Token(Token = "0x4000802")]
		k_ESteamAPICallFailureSteamGone,
		[Token(Token = "0x4000803")]
		k_ESteamAPICallFailureNetworkFailure,
		[Token(Token = "0x4000804")]
		k_ESteamAPICallFailureInvalidHandle,
		[Token(Token = "0x4000805")]
		k_ESteamAPICallFailureMismatchedCallback
	}
	[Token(Token = "0x2000172")]
	public enum EGamepadTextInputMode
	{
		[Token(Token = "0x4000807")]
		k_EGamepadTextInputModeNormal,
		[Token(Token = "0x4000808")]
		k_EGamepadTextInputModePassword
	}
	[Token(Token = "0x2000173")]
	public enum EGamepadTextInputLineMode
	{
		[Token(Token = "0x400080A")]
		k_EGamepadTextInputLineModeSingleLine,
		[Token(Token = "0x400080B")]
		k_EGamepadTextInputLineModeMultipleLines
	}
	[Token(Token = "0x2000174")]
	public enum ECheckFileSignature
	{
		[Token(Token = "0x400080D")]
		k_ECheckFileSignatureInvalidSignature,
		[Token(Token = "0x400080E")]
		k_ECheckFileSignatureValidSignature,
		[Token(Token = "0x400080F")]
		k_ECheckFileSignatureFileNotFound,
		[Token(Token = "0x4000810")]
		k_ECheckFileSignatureNoSignaturesFoundForThisApp,
		[Token(Token = "0x4000811")]
		k_ECheckFileSignatureNoSignaturesFoundForThisFile
	}
	[Token(Token = "0x2000175")]
	public enum EMatchMakingServerResponse
	{
		[Token(Token = "0x4000813")]
		eServerResponded,
		[Token(Token = "0x4000814")]
		eServerFailedToRespond,
		[Token(Token = "0x4000815")]
		eNoServersListedOnMasterServer
	}
	[Token(Token = "0x2000176")]
	public enum EServerMode
	{
		[Token(Token = "0x4000817")]
		eServerModeInvalid,
		[Token(Token = "0x4000818")]
		eServerModeNoAuthentication,
		[Token(Token = "0x4000819")]
		eServerModeAuthentication,
		[Token(Token = "0x400081A")]
		eServerModeAuthenticationAndSecure
	}
	[Token(Token = "0x2000177")]
	public enum EResult
	{
		[Token(Token = "0x400081C")]
		k_EResultOK = 1,
		[Token(Token = "0x400081D")]
		k_EResultFail = 2,
		[Token(Token = "0x400081E")]
		k_EResultNoConnection = 3,
		[Token(Token = "0x400081F")]
		k_EResultInvalidPassword = 5,
		[Token(Token = "0x4000820")]
		k_EResultLoggedInElsewhere = 6,
		[Token(Token = "0x4000821")]
		k_EResultInvalidProtocolVer = 7,
		[Token(Token = "0x4000822")]
		k_EResultInvalidParam = 8,
		[Token(Token = "0x4000823")]
		k_EResultFileNotFound = 9,
		[Token(Token = "0x4000824")]
		k_EResultBusy = 10,
		[Token(Token = "0x4000825")]
		k_EResultInvalidState = 11,
		[Token(Token = "0x4000826")]
		k_EResultInvalidName = 12,
		[Token(Token = "0x4000827")]
		k_EResultInvalidEmail = 13,
		[Token(Token = "0x4000828")]
		k_EResultDuplicateName = 14,
		[Token(Token = "0x4000829")]
		k_EResultAccessDenied = 15,
		[Token(Token = "0x400082A")]
		k_EResultTimeout = 16,
		[Token(Token = "0x400082B")]
		k_EResultBanned = 17,
		[Token(Token = "0x400082C")]
		k_EResultAccountNotFound = 18,
		[Token(Token = "0x400082D")]
		k_EResultInvalidSteamID = 19,
		[Token(Token = "0x400082E")]
		k_EResultServiceUnavailable = 20,
		[Token(Token = "0x400082F")]
		k_EResultNotLoggedOn = 21,
		[Token(Token = "0x4000830")]
		k_EResultPending = 22,
		[Token(Token = "0x4000831")]
		k_EResultEncryptionFailure = 23,
		[Token(Token = "0x4000832")]
		k_EResultInsufficientPrivilege = 24,
		[Token(Token = "0x4000833")]
		k_EResultLimitExceeded = 25,
		[Token(Token = "0x4000834")]
		k_EResultRevoked = 26,
		[Token(Token = "0x4000835")]
		k_EResultExpired = 27,
		[Token(Token = "0x4000836")]
		k_EResultAlreadyRedeemed = 28,
		[Token(Token = "0x4000837")]
		k_EResultDuplicateRequest = 29,
		[Token(Token = "0x4000838")]
		k_EResultAlreadyOwned = 30,
		[Token(Token = "0x4000839")]
		k_EResultIPNotFound = 31,
		[Token(Token = "0x400083A")]
		k_EResultPersistFailed = 32,
		[Token(Token = "0x400083B")]
		k_EResultLockingFailed = 33,
		[Token(Token = "0x400083C")]
		k_EResultLogonSessionReplaced = 34,
		[Token(Token = "0x400083D")]
		k_EResultConnectFailed = 35,
		[Token(Token = "0x400083E")]
		k_EResultHandshakeFailed = 36,
		[Token(Token = "0x400083F")]
		k_EResultIOFailure = 37,
		[Token(Token = "0x4000840")]
		k_EResultRemoteDisconnect = 38,
		[Token(Token = "0x4000841")]
		k_EResultShoppingCartNotFound = 39,
		[Token(Token = "0x4000842")]
		k_EResultBlocked = 40,
		[Token(Token = "0x4000843")]
		k_EResultIgnored = 41,
		[Token(Token = "0x4000844")]
		k_EResultNoMatch = 42,
		[Token(Token = "0x4000845")]
		k_EResultAccountDisabled = 43,
		[Token(Token = "0x4000846")]
		k_EResultServiceReadOnly = 44,
		[Token(Token = "0x4000847")]
		k_EResultAccountNotFeatured = 45,
		[Token(Token = "0x4000848")]
		k_EResultAdministratorOK = 46,
		[Token(Token = "0x4000849")]
		k_EResultContentVersion = 47,
		[Token(Token = "0x400084A")]
		k_EResultTryAnotherCM = 48,
		[Token(Token = "0x400084B")]
		k_EResultPasswordRequiredToKickSession = 49,
		[Token(Token = "0x400084C")]
		k_EResultAlreadyLoggedInElsewhere = 50,
		[Token(Token = "0x400084D")]
		k_EResultSuspended = 51,
		[Token(Token = "0x400084E")]
		k_EResultCancelled = 52,
		[Token(Token = "0x400084F")]
		k_EResultDataCorruption = 53,
		[Token(Token = "0x4000850")]
		k_EResultDiskFull = 54,
		[Token(Token = "0x4000851")]
		k_EResultRemoteCallFailed = 55,
		[Token(Token = "0x4000852")]
		k_EResultPasswordUnset = 56,
		[Token(Token = "0x4000853")]
		k_EResultExternalAccountUnlinked = 57,
		[Token(Token = "0x4000854")]
		k_EResultPSNTicketInvalid = 58,
		[Token(Token = "0x4000855")]
		k_EResultExternalAccountAlreadyLinked = 59,
		[Token(Token = "0x4000856")]
		k_EResultRemoteFileConflict = 60,
		[Token(Token = "0x4000857")]
		k_EResultIllegalPassword = 61,
		[Token(Token = "0x4000858")]
		k_EResultSameAsPreviousValue = 62,
		[Token(Token = "0x4000859")]
		k_EResultAccountLogonDenied = 63,
		[Token(Token = "0x400085A")]
		k_EResultCannotUseOldPassword = 64,
		[Token(Token = "0x400085B")]
		k_EResultInvalidLoginAuthCode = 65,
		[Token(Token = "0x400085C")]
		k_EResultAccountLogonDeniedNoMail = 66,
		[Token(Token = "0x400085D")]
		k_EResultHardwareNotCapableOfIPT = 67,
		[Token(Token = "0x400085E")]
		k_EResultIPTInitError = 68,
		[Token(Token = "0x400085F")]
		k_EResultParentalControlRestricted = 69,
		[Token(Token = "0x4000860")]
		k_EResultFacebookQueryError = 70,
		[Token(Token = "0x4000861")]
		k_EResultExpiredLoginAuthCode = 71,
		[Token(Token = "0x4000862")]
		k_EResultIPLoginRestrictionFailed = 72,
		[Token(Token = "0x4000863")]
		k_EResultAccountLockedDown = 73,
		[Token(Token = "0x4000864")]
		k_EResultAccountLogonDeniedVerifiedEmailRequired = 74,
		[Token(Token = "0x4000865")]
		k_EResultNoMatchingURL = 75,
		[Token(Token = "0x4000866")]
		k_EResultBadResponse = 76,
		[Token(Token = "0x4000867")]
		k_EResultRequirePasswordReEntry = 77,
		[Token(Token = "0x4000868")]
		k_EResultValueOutOfRange = 78,
		[Token(Token = "0x4000869")]
		k_EResultUnexpectedError = 79,
		[Token(Token = "0x400086A")]
		k_EResultDisabled = 80,
		[Token(Token = "0x400086B")]
		k_EResultInvalidCEGSubmission = 81,
		[Token(Token = "0x400086C")]
		k_EResultRestrictedDevice = 82,
		[Token(Token = "0x400086D")]
		k_EResultRegionLocked = 83,
		[Token(Token = "0x400086E")]
		k_EResultRateLimitExceeded = 84,
		[Token(Token = "0x400086F")]
		k_EResultAccountLoginDeniedNeedTwoFactor = 85,
		[Token(Token = "0x4000870")]
		k_EResultItemDeleted = 86,
		[Token(Token = "0x4000871")]
		k_EResultAccountLoginDeniedThrottle = 87,
		[Token(Token = "0x4000872")]
		k_EResultTwoFactorCodeMismatch = 88,
		[Token(Token = "0x4000873")]
		k_EResultTwoFactorActivationCodeMismatch = 89,
		[Token(Token = "0x4000874")]
		k_EResultAccountAssociatedToMultiplePartners = 90,
		[Token(Token = "0x4000875")]
		k_EResultNotModified = 91,
		[Token(Token = "0x4000876")]
		k_EResultNoMobileDevice = 92,
		[Token(Token = "0x4000877")]
		k_EResultTimeNotSynced = 93,
		[Token(Token = "0x4000878")]
		k_EResultSmsCodeFailed = 94,
		[Token(Token = "0x4000879")]
		k_EResultAccountLimitExceeded = 95,
		[Token(Token = "0x400087A")]
		k_EResultAccountActivityLimitExceeded = 96,
		[Token(Token = "0x400087B")]
		k_EResultPhoneActivityLimitExceeded = 97,
		[Token(Token = "0x400087C")]
		k_EResultRefundToWallet = 98,
		[Token(Token = "0x400087D")]
		k_EResultEmailSendFailure = 99,
		[Token(Token = "0x400087E")]
		k_EResultNotSettled = 100
	}
	[Token(Token = "0x2000178")]
	public enum EVoiceResult
	{
		[Token(Token = "0x4000880")]
		k_EVoiceResultOK,
		[Token(Token = "0x4000881")]
		k_EVoiceResultNotInitialized,
		[Token(Token = "0x4000882")]
		k_EVoiceResultNotRecording,
		[Token(Token = "0x4000883")]
		k_EVoiceResultNoData,
		[Token(Token = "0x4000884")]
		k_EVoiceResultBufferTooSmall,
		[Token(Token = "0x4000885")]
		k_EVoiceResultDataCorrupted,
		[Token(Token = "0x4000886")]
		k_EVoiceResultRestricted,
		[Token(Token = "0x4000887")]
		k_EVoiceResultUnsupportedCodec,
		[Token(Token = "0x4000888")]
		k_EVoiceResultReceiverOutOfDate,
		[Token(Token = "0x4000889")]
		k_EVoiceResultReceiverDidNotAnswer
	}
	[Token(Token = "0x2000179")]
	public enum EDenyReason
	{
		[Token(Token = "0x400088B")]
		k_EDenyInvalid,
		[Token(Token = "0x400088C")]
		k_EDenyInvalidVersion,
		[Token(Token = "0x400088D")]
		k_EDenyGeneric,
		[Token(Token = "0x400088E")]
		k_EDenyNotLoggedOn,
		[Token(Token = "0x400088F")]
		k_EDenyNoLicense,
		[Token(Token = "0x4000890")]
		k_EDenyCheater,
		[Token(Token = "0x4000891")]
		k_EDenyLoggedInElseWhere,
		[Token(Token = "0x4000892")]
		k_EDenyUnknownText,
		[Token(Token = "0x4000893")]
		k_EDenyIncompatibleAnticheat,
		[Token(Token = "0x4000894")]
		k_EDenyMemoryCorruption,
		[Token(Token = "0x4000895")]
		k_EDenyIncompatibleSoftware,
		[Token(Token = "0x4000896")]
		k_EDenySteamConnectionLost,
		[Token(Token = "0x4000897")]
		k_EDenySteamConnectionError,
		[Token(Token = "0x4000898")]
		k_EDenySteamResponseTimedOut,
		[Token(Token = "0x4000899")]
		k_EDenySteamValidationStalled,
		[Token(Token = "0x400089A")]
		k_EDenySteamOwnerLeftGuestUser
	}
	[Token(Token = "0x200017A")]
	public enum EBeginAuthSessionResult
	{
		[Token(Token = "0x400089C")]
		k_EBeginAuthSessionResultOK,
		[Token(Token = "0x400089D")]
		k_EBeginAuthSessionResultInvalidTicket,
		[Token(Token = "0x400089E")]
		k_EBeginAuthSessionResultDuplicateRequest,
		[Token(Token = "0x400089F")]
		k_EBeginAuthSessionResultInvalidVersion,
		[Token(Token = "0x40008A0")]
		k_EBeginAuthSessionResultGameMismatch,
		[Token(Token = "0x40008A1")]
		k_EBeginAuthSessionResultExpiredTicket
	}
	[Token(Token = "0x200017B")]
	public enum EAuthSessionResponse
	{
		[Token(Token = "0x40008A3")]
		k_EAuthSessionResponseOK,
		[Token(Token = "0x40008A4")]
		k_EAuthSessionResponseUserNotConnectedToSteam,
		[Token(Token = "0x40008A5")]
		k_EAuthSessionResponseNoLicenseOrExpired,
		[Token(Token = "0x40008A6")]
		k_EAuthSessionResponseVACBanned,
		[Token(Token = "0x40008A7")]
		k_EAuthSessionResponseLoggedInElseWhere,
		[Token(Token = "0x40008A8")]
		k_EAuthSessionResponseVACCheckTimedOut,
		[Token(Token = "0x40008A9")]
		k_EAuthSessionResponseAuthTicketCanceled,
		[Token(Token = "0x40008AA")]
		k_EAuthSessionResponseAuthTicketInvalidAlreadyUsed,
		[Token(Token = "0x40008AB")]
		k_EAuthSessionResponseAuthTicketInvalid,
		[Token(Token = "0x40008AC")]
		k_EAuthSessionResponsePublisherIssuedBan
	}
	[Token(Token = "0x200017C")]
	public enum EUserHasLicenseForAppResult
	{
		[Token(Token = "0x40008AE")]
		k_EUserHasLicenseResultHasLicense,
		[Token(Token = "0x40008AF")]
		k_EUserHasLicenseResultDoesNotHaveLicense,
		[Token(Token = "0x40008B0")]
		k_EUserHasLicenseResultNoAuth
	}
	[Token(Token = "0x200017D")]
	public enum EAccountType
	{
		[Token(Token = "0x40008B2")]
		k_EAccountTypeInvalid,
		[Token(Token = "0x40008B3")]
		k_EAccountTypeIndividual,
		[Token(Token = "0x40008B4")]
		k_EAccountTypeMultiseat,
		[Token(Token = "0x40008B5")]
		k_EAccountTypeGameServer,
		[Token(Token = "0x40008B6")]
		k_EAccountTypeAnonGameServer,
		[Token(Token = "0x40008B7")]
		k_EAccountTypePending,
		[Token(Token = "0x40008B8")]
		k_EAccountTypeContentServer,
		[Token(Token = "0x40008B9")]
		k_EAccountTypeClan,
		[Token(Token = "0x40008BA")]
		k_EAccountTypeChat,
		[Token(Token = "0x40008BB")]
		k_EAccountTypeConsoleUser,
		[Token(Token = "0x40008BC")]
		k_EAccountTypeAnonUser,
		[Token(Token = "0x40008BD")]
		k_EAccountTypeMax
	}
	[Token(Token = "0x200017E")]
	public enum EAppReleaseState
	{
		[Token(Token = "0x40008BF")]
		k_EAppReleaseState_Unknown,
		[Token(Token = "0x40008C0")]
		k_EAppReleaseState_Unavailable,
		[Token(Token = "0x40008C1")]
		k_EAppReleaseState_Prerelease,
		[Token(Token = "0x40008C2")]
		k_EAppReleaseState_PreloadOnly,
		[Token(Token = "0x40008C3")]
		k_EAppReleaseState_Released
	}
	[Token(Token = "0x200017F")]
	[Flags]
	public enum EAppOwnershipFlags
	{
		[Token(Token = "0x40008C5")]
		k_EAppOwnershipFlags_None = 0,
		[Token(Token = "0x40008C6")]
		k_EAppOwnershipFlags_OwnsLicense = 1,
		[Token(Token = "0x40008C7")]
		k_EAppOwnershipFlags_FreeLicense = 2,
		[Token(Token = "0x40008C8")]
		k_EAppOwnershipFlags_RegionRestricted = 4,
		[Token(Token = "0x40008C9")]
		k_EAppOwnershipFlags_LowViolence = 8,
		[Token(Token = "0x40008CA")]
		k_EAppOwnershipFlags_InvalidPlatform = 0x10,
		[Token(Token = "0x40008CB")]
		k_EAppOwnershipFlags_SharedLicense = 0x20,
		[Token(Token = "0x40008CC")]
		k_EAppOwnershipFlags_FreeWeekend = 0x40,
		[Token(Token = "0x40008CD")]
		k_EAppOwnershipFlags_RetailLicense = 0x80,
		[Token(Token = "0x40008CE")]
		k_EAppOwnershipFlags_LicenseLocked = 0x100,
		[Token(Token = "0x40008CF")]
		k_EAppOwnershipFlags_LicensePending = 0x200,
		[Token(Token = "0x40008D0")]
		k_EAppOwnershipFlags_LicenseExpired = 0x400,
		[Token(Token = "0x40008D1")]
		k_EAppOwnershipFlags_LicensePermanent = 0x800,
		[Token(Token = "0x40008D2")]
		k_EAppOwnershipFlags_LicenseRecurring = 0x1000,
		[Token(Token = "0x40008D3")]
		k_EAppOwnershipFlags_LicenseCanceled = 0x2000,
		[Token(Token = "0x40008D4")]
		k_EAppOwnershipFlags_AutoGrant = 0x4000
	}
	[Token(Token = "0x2000180")]
	[Flags]
	public enum EAppType
	{
		[Token(Token = "0x40008D6")]
		k_EAppType_Invalid = 0,
		[Token(Token = "0x40008D7")]
		k_EAppType_Game = 1,
		[Token(Token = "0x40008D8")]
		k_EAppType_Application = 2,
		[Token(Token = "0x40008D9")]
		k_EAppType_Tool = 4,
		[Token(Token = "0x40008DA")]
		k_EAppType_Demo = 8,
		[Token(Token = "0x40008DB")]
		k_EAppType_Media_DEPRECATED = 0x10,
		[Token(Token = "0x40008DC")]
		k_EAppType_DLC = 0x20,
		[Token(Token = "0x40008DD")]
		k_EAppType_Guide = 0x40,
		[Token(Token = "0x40008DE")]
		k_EAppType_Driver = 0x80,
		[Token(Token = "0x40008DF")]
		k_EAppType_Config = 0x100,
		[Token(Token = "0x40008E0")]
		k_EAppType_Hardware = 0x200,
		[Token(Token = "0x40008E1")]
		k_EAppType_Video = 0x800,
		[Token(Token = "0x40008E2")]
		k_EAppType_Plugin = 0x1000,
		[Token(Token = "0x40008E3")]
		k_EAppType_Music = 0x2000,
		[Token(Token = "0x40008E4")]
		k_EAppType_Shortcut = 0x40000000,
		[Token(Token = "0x40008E5")]
		k_EAppType_DepotOnly = -2147483647
	}
	[Token(Token = "0x2000181")]
	public enum ESteamUserStatType
	{
		[Token(Token = "0x40008E7")]
		k_ESteamUserStatTypeINVALID,
		[Token(Token = "0x40008E8")]
		k_ESteamUserStatTypeINT,
		[Token(Token = "0x40008E9")]
		k_ESteamUserStatTypeFLOAT,
		[Token(Token = "0x40008EA")]
		k_ESteamUserStatTypeAVGRATE,
		[Token(Token = "0x40008EB")]
		k_ESteamUserStatTypeACHIEVEMENTS,
		[Token(Token = "0x40008EC")]
		k_ESteamUserStatTypeGROUPACHIEVEMENTS,
		[Token(Token = "0x40008ED")]
		k_ESteamUserStatTypeMAX
	}
	[Token(Token = "0x2000182")]
	public enum EChatEntryType
	{
		[Token(Token = "0x40008EF")]
		k_EChatEntryTypeInvalid = 0,
		[Token(Token = "0x40008F0")]
		k_EChatEntryTypeChatMsg = 1,
		[Token(Token = "0x40008F1")]
		k_EChatEntryTypeTyping = 2,
		[Token(Token = "0x40008F2")]
		k_EChatEntryTypeInviteGame = 3,
		[Token(Token = "0x40008F3")]
		k_EChatEntryTypeEmote = 4,
		[Token(Token = "0x40008F4")]
		k_EChatEntryTypeLeftConversation = 6,
		[Token(Token = "0x40008F5")]
		k_EChatEntryTypeEntered = 7,
		[Token(Token = "0x40008F6")]
		k_EChatEntryTypeWasKicked = 8,
		[Token(Token = "0x40008F7")]
		k_EChatEntryTypeWasBanned = 9,
		[Token(Token = "0x40008F8")]
		k_EChatEntryTypeDisconnected = 10,
		[Token(Token = "0x40008F9")]
		k_EChatEntryTypeHistoricalChat = 11,
		[Token(Token = "0x40008FA")]
		k_EChatEntryTypeReserved1 = 12,
		[Token(Token = "0x40008FB")]
		k_EChatEntryTypeReserved2 = 13,
		[Token(Token = "0x40008FC")]
		k_EChatEntryTypeLinkBlocked = 14
	}
	[Token(Token = "0x2000183")]
	public enum EChatRoomEnterResponse
	{
		[Token(Token = "0x40008FE")]
		k_EChatRoomEnterResponseSuccess = 1,
		[Token(Token = "0x40008FF")]
		k_EChatRoomEnterResponseDoesntExist,
		[Token(Token = "0x4000900")]
		k_EChatRoomEnterResponseNotAllowed,
		[Token(Token = "0x4000901")]
		k_EChatRoomEnterResponseFull,
		[Token(Token = "0x4000902")]
		k_EChatRoomEnterResponseError,
		[Token(Token = "0x4000903")]
		k_EChatRoomEnterResponseBanned,
		[Token(Token = "0x4000904")]
		k_EChatRoomEnterResponseLimited,
		[Token(Token = "0x4000905")]
		k_EChatRoomEnterResponseClanDisabled,
		[Token(Token = "0x4000906")]
		k_EChatRoomEnterResponseCommunityBan,
		[Token(Token = "0x4000907")]
		k_EChatRoomEnterResponseMemberBlockedYou,
		[Token(Token = "0x4000908")]
		k_EChatRoomEnterResponseYouBlockedMember
	}
	[Token(Token = "0x2000184")]
	[Flags]
	public enum EChatSteamIDInstanceFlags
	{
		[Token(Token = "0x400090A")]
		k_EChatAccountInstanceMask = 0xFFF,
		[Token(Token = "0x400090B")]
		k_EChatInstanceFlagClan = 0x80000,
		[Token(Token = "0x400090C")]
		k_EChatInstanceFlagLobby = 0x40000,
		[Token(Token = "0x400090D")]
		k_EChatInstanceFlagMMSLobby = 0x20000
	}
	[Token(Token = "0x2000185")]
	[Flags]
	public enum EMarketingMessageFlags
	{
		[Token(Token = "0x400090F")]
		k_EMarketingMessageFlagsNone = 0,
		[Token(Token = "0x4000910")]
		k_EMarketingMessageFlagsHighPriority = 1,
		[Token(Token = "0x4000911")]
		k_EMarketingMessageFlagsPlatformWindows = 2,
		[Token(Token = "0x4000912")]
		k_EMarketingMessageFlagsPlatformMac = 4,
		[Token(Token = "0x4000913")]
		k_EMarketingMessageFlagsPlatformLinux = 8,
		[Token(Token = "0x4000914")]
		k_EMarketingMessageFlagsPlatformRestrictions = 0xE
	}
	[Token(Token = "0x2000186")]
	public enum ENotificationPosition
	{
		[Token(Token = "0x4000916")]
		k_EPositionTopLeft,
		[Token(Token = "0x4000917")]
		k_EPositionTopRight,
		[Token(Token = "0x4000918")]
		k_EPositionBottomLeft,
		[Token(Token = "0x4000919")]
		k_EPositionBottomRight
	}
	[Token(Token = "0x2000187")]
	public enum EBroadcastUploadResult
	{
		[Token(Token = "0x400091B")]
		k_EBroadcastUploadResultNone,
		[Token(Token = "0x400091C")]
		k_EBroadcastUploadResultOK,
		[Token(Token = "0x400091D")]
		k_EBroadcastUploadResultInitFailed,
		[Token(Token = "0x400091E")]
		k_EBroadcastUploadResultFrameFailed,
		[Token(Token = "0x400091F")]
		k_EBroadcastUploadResultTimeout,
		[Token(Token = "0x4000920")]
		k_EBroadcastUploadResultBandwidthExceeded,
		[Token(Token = "0x4000921")]
		k_EBroadcastUploadResultLowFPS,
		[Token(Token = "0x4000922")]
		k_EBroadcastUploadResultMissingKeyFrames,
		[Token(Token = "0x4000923")]
		k_EBroadcastUploadResultNoConnection,
		[Token(Token = "0x4000924")]
		k_EBroadcastUploadResultRelayFailed,
		[Token(Token = "0x4000925")]
		k_EBroadcastUploadResultSettingsChanged,
		[Token(Token = "0x4000926")]
		k_EBroadcastUploadResultMissingAudio,
		[Token(Token = "0x4000927")]
		k_EBroadcastUploadResultTooFarBehind
	}
	[Token(Token = "0x2000188")]
	public enum EHTTPMethod
	{
		[Token(Token = "0x4000929")]
		k_EHTTPMethodInvalid,
		[Token(Token = "0x400092A")]
		k_EHTTPMethodGET,
		[Token(Token = "0x400092B")]
		k_EHTTPMethodHEAD,
		[Token(Token = "0x400092C")]
		k_EHTTPMethodPOST,
		[Token(Token = "0x400092D")]
		k_EHTTPMethodPUT,
		[Token(Token = "0x400092E")]
		k_EHTTPMethodDELETE,
		[Token(Token = "0x400092F")]
		k_EHTTPMethodOPTIONS
	}
	[Token(Token = "0x2000189")]
	public enum EHTTPStatusCode
	{
		[Token(Token = "0x4000931")]
		k_EHTTPStatusCodeInvalid = 0,
		[Token(Token = "0x4000932")]
		k_EHTTPStatusCode100Continue = 100,
		[Token(Token = "0x4000933")]
		k_EHTTPStatusCode101SwitchingProtocols = 101,
		[Token(Token = "0x4000934")]
		k_EHTTPStatusCode200OK = 200,
		[Token(Token = "0x4000935")]
		k_EHTTPStatusCode201Created = 201,
		[Token(Token = "0x4000936")]
		k_EHTTPStatusCode202Accepted = 202,
		[Token(Token = "0x4000937")]
		k_EHTTPStatusCode203NonAuthoritative = 203,
		[Token(Token = "0x4000938")]
		k_EHTTPStatusCode204NoContent = 204,
		[Token(Token = "0x4000939")]
		k_EHTTPStatusCode205ResetContent = 205,
		[Token(Token = "0x400093A")]
		k_EHTTPStatusCode206PartialContent = 206,
		[Token(Token = "0x400093B")]
		k_EHTTPStatusCode300MultipleChoices = 300,
		[Token(Token = "0x400093C")]
		k_EHTTPStatusCode301MovedPermanently = 301,
		[Token(Token = "0x400093D")]
		k_EHTTPStatusCode302Found = 302,
		[Token(Token = "0x400093E")]
		k_EHTTPStatusCode303SeeOther = 303,
		[Token(Token = "0x400093F")]
		k_EHTTPStatusCode304NotModified = 304,
		[Token(Token = "0x4000940")]
		k_EHTTPStatusCode305UseProxy = 305,
		[Token(Token = "0x4000941")]
		k_EHTTPStatusCode307TemporaryRedirect = 307,
		[Token(Token = "0x4000942")]
		k_EHTTPStatusCode400BadRequest = 400,
		[Token(Token = "0x4000943")]
		k_EHTTPStatusCode401Unauthorized = 401,
		[Token(Token = "0x4000944")]
		k_EHTTPStatusCode402PaymentRequired = 402,
		[Token(Token = "0x4000945")]
		k_EHTTPStatusCode403Forbidden = 403,
		[Token(Token = "0x4000946")]
		k_EHTTPStatusCode404NotFound = 404,
		[Token(Token = "0x4000947")]
		k_EHTTPStatusCode405MethodNotAllowed = 405,
		[Token(Token = "0x4000948")]
		k_EHTTPStatusCode406NotAcceptable = 406,
		[Token(Token = "0x4000949")]
		k_EHTTPStatusCode407ProxyAuthRequired = 407,
		[Token(Token = "0x400094A")]
		k_EHTTPStatusCode408RequestTimeout = 408,
		[Token(Token = "0x400094B")]
		k_EHTTPStatusCode409Conflict = 409,
		[Token(Token = "0x400094C")]
		k_EHTTPStatusCode410Gone = 410,
		[Token(Token = "0x400094D")]
		k_EHTTPStatusCode411LengthRequired = 411,
		[Token(Token = "0x400094E")]
		k_EHTTPStatusCode412PreconditionFailed = 412,
		[Token(Token = "0x400094F")]
		k_EHTTPStatusCode413RequestEntityTooLarge = 413,
		[Token(Token = "0x4000950")]
		k_EHTTPStatusCode414RequestURITooLong = 414,
		[Token(Token = "0x4000951")]
		k_EHTTPStatusCode415UnsupportedMediaType = 415,
		[Token(Token = "0x4000952")]
		k_EHTTPStatusCode416RequestedRangeNotSatisfiable = 416,
		[Token(Token = "0x4000953")]
		k_EHTTPStatusCode417ExpectationFailed = 417,
		[Token(Token = "0x4000954")]
		k_EHTTPStatusCode4xxUnknown = 418,
		[Token(Token = "0x4000955")]
		k_EHTTPStatusCode429TooManyRequests = 429,
		[Token(Token = "0x4000956")]
		k_EHTTPStatusCode500InternalServerError = 500,
		[Token(Token = "0x4000957")]
		k_EHTTPStatusCode501NotImplemented = 501,
		[Token(Token = "0x4000958")]
		k_EHTTPStatusCode502BadGateway = 502,
		[Token(Token = "0x4000959")]
		k_EHTTPStatusCode503ServiceUnavailable = 503,
		[Token(Token = "0x400095A")]
		k_EHTTPStatusCode504GatewayTimeout = 504,
		[Token(Token = "0x400095B")]
		k_EHTTPStatusCode505HTTPVersionNotSupported = 505,
		[Token(Token = "0x400095C")]
		k_EHTTPStatusCode5xxUnknown = 599
	}
	[Token(Token = "0x200018A")]
	public enum EUniverse
	{
		[Token(Token = "0x400095E")]
		k_EUniverseInvalid,
		[Token(Token = "0x400095F")]
		k_EUniversePublic,
		[Token(Token = "0x4000960")]
		k_EUniverseBeta,
		[Token(Token = "0x4000961")]
		k_EUniverseInternal,
		[Token(Token = "0x4000962")]
		k_EUniverseDev,
		[Token(Token = "0x4000963")]
		k_EUniverseMax
	}
	[Token(Token = "0x200018B")]
	public struct SteamControllerState_t
	{
		[Token(Token = "0x4000964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint unPacketNum;

		[Token(Token = "0x4000965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ulong ulButtons;

		[Token(Token = "0x4000966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public short sLeftPadX;

		[Token(Token = "0x4000967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		public short sLeftPadY;

		[Token(Token = "0x4000968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public short sRightPadX;

		[Token(Token = "0x4000969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public short sRightPadY;
	}
	[Token(Token = "0x200018C")]
	public struct FriendGameInfo_t
	{
		[Token(Token = "0x400096A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CGameID m_gameID;

		[Token(Token = "0x400096B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_unGameIP;

		[Token(Token = "0x400096C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public ushort m_usGamePort;

		[Token(Token = "0x400096D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		public ushort m_usQueryPort;

		[Token(Token = "0x400096E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CSteamID m_steamIDLobby;
	}
	[Token(Token = "0x200018D")]
	public struct FriendSessionStateInfo_t
	{
		[Token(Token = "0x400096F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_uiOnlineSessionInstances;

		[Token(Token = "0x4000970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public byte m_uiPublishedToFriendsSessionInstance;
	}
	[Token(Token = "0x200018E")]
	public struct SteamItemDetails_t
	{
		[Token(Token = "0x4000971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamItemInstanceID_t m_itemId;

		[Token(Token = "0x4000972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public SteamItemDef_t m_iDefinition;

		[Token(Token = "0x4000973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public ushort m_unQuantity;

		[Token(Token = "0x4000974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		public ushort m_unFlags;
	}
	[Token(Token = "0x200018F")]
	public struct P2PSessionState_t
	{
		[Token(Token = "0x4000975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bConnectionActive;

		[Token(Token = "0x4000976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public byte m_bConnecting;

		[Token(Token = "0x4000977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public byte m_eP2PSessionError;

		[Token(Token = "0x4000978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
		public byte m_bUsingRelay;

		[Token(Token = "0x4000979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nBytesQueuedForSend;

		[Token(Token = "0x400097A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nPacketsQueuedForSend;

		[Token(Token = "0x400097B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_nRemoteIP;

		[Token(Token = "0x400097C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ushort m_nRemotePort;
	}
	[Token(Token = "0x2000190")]
	public struct SteamParamStringArray_t
	{
		[Token(Token = "0x400097D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr m_ppStrings;

		[Token(Token = "0x400097E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nNumStrings;
	}
	[Token(Token = "0x2000191")]
	public struct SteamUGCDetails_t
	{
		[Token(Token = "0x400097F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x4000981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public EWorkshopFileType m_eFileType;

		[Token(Token = "0x4000982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AppId_t m_nCreatorAppID;

		[Token(Token = "0x4000983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public AppId_t m_nConsumerAppID;

		[Token(Token = "0x4000984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string m_rgchTitle;

		[Token(Token = "0x4000985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string m_rgchDescription;

		[Token(Token = "0x4000986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ulong m_ulSteamIDOwner;

		[Token(Token = "0x4000987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public uint m_rtimeCreated;

		[Token(Token = "0x4000988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public uint m_rtimeUpdated;

		[Token(Token = "0x4000989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public uint m_rtimeAddedToUserList;

		[Token(Token = "0x400098A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public ERemoteStoragePublishedFileVisibility m_eVisibility;

		[Token(Token = "0x400098B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool m_bBanned;

		[Token(Token = "0x400098C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool m_bAcceptedForUse;

		[Token(Token = "0x400098D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		public bool m_bTagsTruncated;

		[Token(Token = "0x400098E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string m_rgchTags;

		[Token(Token = "0x400098F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UGCHandle_t m_hFile;

		[Token(Token = "0x4000990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UGCHandle_t m_hPreviewFile;

		[Token(Token = "0x4000991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string m_pchFileName;

		[Token(Token = "0x4000992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int m_nFileSize;

		[Token(Token = "0x4000993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int m_nPreviewFileSize;

		[Token(Token = "0x4000994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string m_rgchURL;

		[Token(Token = "0x4000995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public uint m_unVotesUp;

		[Token(Token = "0x4000996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public uint m_unVotesDown;

		[Token(Token = "0x4000997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float m_flScore;

		[Token(Token = "0x4000998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public uint m_unNumChildren;
	}
	[Token(Token = "0x2000192")]
	public struct CallbackMsg_t
	{
		[Token(Token = "0x4000999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_hSteamUser;

		[Token(Token = "0x400099A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_iCallback;

		[Token(Token = "0x400099B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr m_pubParam;

		[Token(Token = "0x400099C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_cubParam;
	}
	[Token(Token = "0x2000193")]
	public struct LeaderboardEntry_t
	{
		[Token(Token = "0x400099D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDUser;

		[Token(Token = "0x400099E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nGlobalRank;

		[Token(Token = "0x400099F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nScore;

		[Token(Token = "0x40009A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_cDetails;

		[Token(Token = "0x40009A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UGCHandle_t m_hUGC;
	}
	[Token(Token = "0x2000194")]
	public struct MatchMakingKeyValuePair_t
	{
		[Token(Token = "0x40009A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_szKey;

		[Token(Token = "0x40009A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_szValue;

		[Token(Token = "0x60009A0")]
		[Address(RVA = "0xA6AC18", Offset = "0xA6AC18", VA = "0xA6AC18")]
		private MatchMakingKeyValuePair_t(string strKey, string strValue)
		{
		}
	}
	[Token(Token = "0x2000195")]
	public static class CallbackDispatcher
	{
		[Token(Token = "0x60009A1")]
		[Address(RVA = "0x10E75FC", Offset = "0x10E75FC", VA = "0x10E75FC")]
		public static void ExceptionHandler(Exception e)
		{
		}
	}
	[Token(Token = "0x2000196")]
	public sealed class Callback<T>
	{
		[Token(Token = "0x20002D9")]
		public delegate void DispatchDelegate(T param);

		[Token(Token = "0x40009A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private CCallbackBaseVTable VTable;

		[Token(Token = "0x40009A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IntPtr m_pVTable;

		[Token(Token = "0x40009A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private CCallbackBase m_CCallbackBase;

		[Token(Token = "0x40009A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private GCHandle m_pCCallbackBase;

		[Token(Token = "0x40009A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool m_bGameServer;

		[Token(Token = "0x40009AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int m_size;

		[Token(Token = "0x14000004")]
		private event DispatchDelegate m_Func
		{
			[Token(Token = "0x60009A2")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9058", Offset = "0x9A9058")]
			add
			{
			}
			[Token(Token = "0x60009A3")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9068", Offset = "0x9A9068")]
			remove
			{
			}
		}

		[Token(Token = "0x60009A4")]
		public static Callback<T> Create(DispatchDelegate func)
		{
			return null;
		}

		[Token(Token = "0x60009A5")]
		public static Callback<T> CreateGameServer(DispatchDelegate func)
		{
			return null;
		}

		[Token(Token = "0x60009A6")]
		public Callback(DispatchDelegate func, bool bGameServer = false)
		{
		}

		[Token(Token = "0x60009A7")]
		~Callback()
		{
		}

		[Token(Token = "0x60009A8")]
		public void Register(DispatchDelegate func)
		{
		}

		[Token(Token = "0x60009A9")]
		public void Unregister()
		{
		}

		[Token(Token = "0x60009AA")]
		public void SetGameserverFlag()
		{
		}

		[Token(Token = "0x60009AB")]
		private void OnRunCallback(IntPtr thisptr, IntPtr pvParam)
		{
		}

		[Token(Token = "0x60009AC")]
		private void OnRunCallResult(IntPtr thisptr, IntPtr pvParam, bool bFailed, ulong hSteamAPICall)
		{
		}

		[Token(Token = "0x60009AD")]
		private int OnGetCallbackSizeBytes(IntPtr thisptr)
		{
			return default(int);
		}

		[Token(Token = "0x60009AE")]
		private void BuildCCallbackBase()
		{
		}
	}
	[Token(Token = "0x2000197")]
	public sealed class CallResult<T>
	{
		[Token(Token = "0x20002DA")]
		public delegate void APIDispatchDelegate(T param, bool bIOFailure);

		[Token(Token = "0x40009AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private CCallbackBaseVTable VTable;

		[Token(Token = "0x40009AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IntPtr m_pVTable;

		[Token(Token = "0x40009AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private CCallbackBase m_CCallbackBase;

		[Token(Token = "0x40009AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private GCHandle m_pCCallbackBase;

		[Token(Token = "0x40009B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private SteamAPICall_t m_hAPICall;

		[Token(Token = "0x40009B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int m_size;

		[Token(Token = "0x1700007A")]
		public SteamAPICall_t Handle
		{
			[Token(Token = "0x60009B1")]
			get
			{
				return default(SteamAPICall_t);
			}
		}

		[Token(Token = "0x14000005")]
		private event APIDispatchDelegate m_Func
		{
			[Token(Token = "0x60009AF")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9078", Offset = "0x9A9078")]
			add
			{
			}
			[Token(Token = "0x60009B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9088", Offset = "0x9A9088")]
			remove
			{
			}
		}

		[Token(Token = "0x60009B2")]
		public static CallResult<T> Create([Optional] APIDispatchDelegate func)
		{
			return null;
		}

		[Token(Token = "0x60009B3")]
		public CallResult([Optional] APIDispatchDelegate func)
		{
		}

		[Token(Token = "0x60009B4")]
		~CallResult()
		{
		}

		[Token(Token = "0x60009B5")]
		public void Set(SteamAPICall_t hAPICall, [Optional] APIDispatchDelegate func)
		{
		}

		[Token(Token = "0x60009B6")]
		public bool IsActive()
		{
			return default(bool);
		}

		[Token(Token = "0x60009B7")]
		public void Cancel()
		{
		}

		[Token(Token = "0x60009B8")]
		public void SetGameserverFlag()
		{
		}

		[Token(Token = "0x60009B9")]
		private void OnRunCallback(IntPtr thisptr, IntPtr pvParam)
		{
		}

		[Token(Token = "0x60009BA")]
		private void OnRunCallResult(IntPtr thisptr, IntPtr pvParam, bool bFailed, ulong hSteamAPICall)
		{
		}

		[Token(Token = "0x60009BB")]
		private int OnGetCallbackSizeBytes(IntPtr thisptr)
		{
			return default(int);
		}

		[Token(Token = "0x60009BC")]
		private void BuildCCallbackBase()
		{
		}
	}
	[StructLayout(0)]
	[Token(Token = "0x2000198")]
	internal class CCallbackBase
	{
		[Token(Token = "0x40009B2")]
		public const byte k_ECallbackFlagsRegistered = 1;

		[Token(Token = "0x40009B3")]
		public const byte k_ECallbackFlagsGameServer = 2;

		[Token(Token = "0x40009B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntPtr m_vfptr;

		[Token(Token = "0x40009B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public byte m_nCallbackFlags;

		[Token(Token = "0x40009B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int m_iCallback;

		[Token(Token = "0x60009BD")]
		[Address(RVA = "0x16CF1A0", Offset = "0x16CF1A0", VA = "0x16CF1A0")]
		public CCallbackBase()
		{
		}
	}
	[StructLayout(0)]
	[Token(Token = "0x2000199")]
	internal class CCallbackBaseVTable
	{
		[Token(Token = "0x20002DB")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x9A659C", Offset = "0x9A659C")]
		public delegate void RunCBDel(IntPtr thisptr, IntPtr pvParam);

		[Token(Token = "0x20002DC")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x9A65B0", Offset = "0x9A65B0")]
		public delegate void RunCRDel(IntPtr thisptr, IntPtr pvParam, bool bIOFailure, ulong hSteamAPICall);

		[Token(Token = "0x20002DD")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x9A65C4", Offset = "0x9A65C4")]
		public delegate int GetCallbackSizeBytesDel(IntPtr thisptr);

		[Token(Token = "0x40009B7")]
		private const CallingConvention cc = CallingConvention.Cdecl;

		[NonSerialized]
		[Token(Token = "0x40009B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public RunCBDel m_RunCallback;

		[NonSerialized]
		[Token(Token = "0x40009B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RunCRDel m_RunCallResult;

		[NonSerialized]
		[Token(Token = "0x40009BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GetCallbackSizeBytesDel m_GetCallbackSizeBytes;

		[Token(Token = "0x60009BE")]
		[Address(RVA = "0x16CF1A8", Offset = "0x16CF1A8", VA = "0x16CF1A8")]
		public CCallbackBaseVTable()
		{
		}
	}
	[Token(Token = "0x200019A")]
	internal class CallbackIdentities
	{
		[Token(Token = "0x60009BF")]
		[Address(RVA = "0x10E7688", Offset = "0x10E7688", VA = "0x10E7688")]
		public static int GetCallbackIdentity(Type callbackStruct)
		{
			return default(int);
		}

		[Token(Token = "0x60009C0")]
		[Address(RVA = "0x10E78A4", Offset = "0x10E78A4", VA = "0x10E78A4")]
		public CallbackIdentities()
		{
		}
	}
	[Token(Token = "0x200019B")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x9A5F20", Offset = "0x9A5F20")]
	internal class CallbackIdentityAttribute : Attribute
	{
		[Token(Token = "0x40009BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7C00", Offset = "0x9A7C00")]
		private int <Identity>k__BackingField;

		[Token(Token = "0x1700007B")]
		public int Identity
		{
			[Token(Token = "0x60009C1")]
			[Address(RVA = "0x10E789C", Offset = "0x10E789C", VA = "0x10E789C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9098", Offset = "0x9A9098")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60009C2")]
			[Address(RVA = "0x10E78AC", Offset = "0x10E78AC", VA = "0x10E78AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A90A8", Offset = "0x9A90A8")]
			set
			{
			}
		}

		[Token(Token = "0x60009C3")]
		[Address(RVA = "0x10E78B4", Offset = "0x10E78B4", VA = "0x10E78B4")]
		public CallbackIdentityAttribute(int callbackNum)
		{
		}
	}
	[Token(Token = "0x200019C")]
	public class InteropHelp
	{
		[Token(Token = "0x20002DE")]
		public class UTF8StringHandle : SafeHandleZeroOrMinusOneIsInvalid
		{
			[Token(Token = "0x600154E")]
			[Address(RVA = "0x10E8048", Offset = "0x10E8048", VA = "0x10E8048")]
			public UTF8StringHandle(string str)
			{
			}

			[Token(Token = "0x600154F")]
			[Address(RVA = "0x10F239C", Offset = "0x10F239C", VA = "0x10F239C", Slot = "7")]
			protected override bool ReleaseHandle()
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20002DF")]
		public class SteamParamStringArray
		{
			[Token(Token = "0x4000E76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private IntPtr[] m_Strings;

			[Token(Token = "0x4000E77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private IntPtr m_ptrStrings;

			[Token(Token = "0x4000E78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private IntPtr m_pSteamParamStringArray;

			[Token(Token = "0x6001550")]
			[Address(RVA = "0x10F1C60", Offset = "0x10F1C60", VA = "0x10F1C60")]
			public SteamParamStringArray(IList<string> strings)
			{
			}

			[Token(Token = "0x6001551")]
			[Address(RVA = "0x10F21B8", Offset = "0x10F21B8", VA = "0x10F21B8", Slot = "1")]
			~SteamParamStringArray()
			{
			}

			[Token(Token = "0x6001552")]
			[Address(RVA = "0x10F2374", Offset = "0x10F2374", VA = "0x10F2374")]
			public static implicit operator IntPtr(SteamParamStringArray that)
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x60009C4")]
		[Address(RVA = "0x10E7FD4", Offset = "0x10E7FD4", VA = "0x10E7FD4")]
		public static void TestIfPlatformSupported()
		{
		}

		[Token(Token = "0x60009C5")]
		[Address(RVA = "0x10F1AD0", Offset = "0x10F1AD0", VA = "0x10F1AD0")]
		public static void TestIfAvailableClient()
		{
		}

		[Token(Token = "0x60009C6")]
		[Address(RVA = "0x10F1B94", Offset = "0x10F1B94", VA = "0x10F1B94")]
		public static void TestIfAvailableGameServer()
		{
		}

		[Token(Token = "0x60009C7")]
		[Address(RVA = "0x10EB018", Offset = "0x10EB018", VA = "0x10EB018")]
		public static string PtrToStringUTF8(IntPtr nativeUtf8)
		{
			return null;
		}

		[Token(Token = "0x60009C8")]
		[Address(RVA = "0x10F1C58", Offset = "0x10F1C58", VA = "0x10F1C58")]
		public InteropHelp()
		{
		}
	}
	[Token(Token = "0x200019D")]
	public class MMKVPMarshaller
	{
		[Token(Token = "0x40009BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr m_pNativeArray;

		[Token(Token = "0x40009BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IntPtr m_pArrayEntries;

		[Token(Token = "0x60009C9")]
		[Address(RVA = "0x10F2424", Offset = "0x10F2424", VA = "0x10F2424")]
		public MMKVPMarshaller(MatchMakingKeyValuePair_t[] filters)
		{
		}

		[Token(Token = "0x60009CA")]
		[Address(RVA = "0x10F2634", Offset = "0x10F2634", VA = "0x10F2634", Slot = "1")]
		~MMKVPMarshaller()
		{
		}

		[Token(Token = "0x60009CB")]
		[Address(RVA = "0x10F275C", Offset = "0x10F275C", VA = "0x10F275C")]
		public static implicit operator IntPtr(MMKVPMarshaller that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x200019E")]
	public class DllCheck
	{
		[PreserveSig]
		[Token(Token = "0x60009CC")]
		[Address(RVA = "0x10E7C3C", Offset = "0x10E7C3C", VA = "0x10E7C3C")]
		public static extern IntPtr GetModuleHandle(string lpModuleName);

		[PreserveSig]
		[Token(Token = "0x60009CD")]
		[Address(RVA = "0x10E7CF0", Offset = "0x10E7CF0", VA = "0x10E7CF0")]
		private static extern int GetModuleFileName(IntPtr hModule, StringBuilder strFullPath, int nSize);

		[Token(Token = "0x60009CE")]
		[Address(RVA = "0x10E7DCC", Offset = "0x10E7DCC", VA = "0x10E7DCC")]
		public static bool Test()
		{
			return default(bool);
		}

		[Token(Token = "0x60009CF")]
		[Address(RVA = "0x10E7DD4", Offset = "0x10E7DD4", VA = "0x10E7DD4")]
		private static bool CheckSteamAPIDLL()
		{
			return default(bool);
		}

		[Token(Token = "0x60009D0")]
		[Address(RVA = "0x10E7DDC", Offset = "0x10E7DDC", VA = "0x10E7DDC")]
		public DllCheck()
		{
		}
	}
	[Token(Token = "0x200019F")]
	public class ISteamMatchmakingServerListResponse
	{
		[Token(Token = "0x20002E0")]
		public delegate void ServerResponded(HServerListRequest hRequest, int iServer);

		[Token(Token = "0x20002E1")]
		public delegate void ServerFailedToRespond(HServerListRequest hRequest, int iServer);

		[Token(Token = "0x20002E2")]
		public delegate void RefreshComplete(HServerListRequest hRequest, EMatchMakingServerResponse response);

		[Token(Token = "0x20002E3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x9A65D8", Offset = "0x9A65D8")]
		private delegate void InternalServerResponded(IntPtr thisptr, HServerListRequest hRequest, int iServer);

		[Token(Token = "0x20002E4")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x9A65EC", Offset = "0x9A65EC")]
		private delegate void InternalServerFailedToRespond(IntPtr thisptr, HServerListRequest hRequest, int iServer);

		[Token(Token = "0x20002E5")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x9A6600", Offset = "0x9A6600")]
		private delegate void InternalRefreshComplete(IntPtr thisptr, HServerListRequest hRequest, EMatchMakingServerResponse response);

		[StructLayout(0)]
		[Token(Token = "0x20002E6")]
		private class VTable
		{
			[NonSerialized]
			[Token(Token = "0x4000E79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public InternalServerResponded m_VTServerResponded;

			[NonSerialized]
			[Token(Token = "0x4000E7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public InternalServerFailedToRespond m_VTServerFailedToRespond;

			[NonSerialized]
			[Token(Token = "0x4000E7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InternalRefreshComplete m_VTRefreshComplete;

			[Token(Token = "0x600156B")]
			[Address(RVA = "0x10EF8A4", Offset = "0x10EF8A4", VA = "0x10EF8A4")]
			public VTable()
			{
			}
		}

		[Token(Token = "0x40009BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private VTable m_VTable;

		[Token(Token = "0x40009BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IntPtr m_pVTable;

		[Token(Token = "0x40009C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GCHandle m_pGCHandle;

		[Token(Token = "0x40009C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ServerResponded m_ServerResponded;

		[Token(Token = "0x40009C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ServerFailedToRespond m_ServerFailedToRespond;

		[Token(Token = "0x40009C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RefreshComplete m_RefreshComplete;

		[Token(Token = "0x60009D1")]
		[Address(RVA = "0x10EF658", Offset = "0x10EF658", VA = "0x10EF658")]
		public ISteamMatchmakingServerListResponse(ServerResponded onServerResponded, ServerFailedToRespond onServerFailedToRespond, RefreshComplete onRefreshComplete)
		{
		}

		[Token(Token = "0x60009D2")]
		[Address(RVA = "0x10EF8DC", Offset = "0x10EF8DC", VA = "0x10EF8DC", Slot = "1")]
		~ISteamMatchmakingServerListResponse()
		{
		}

		[Token(Token = "0x60009D3")]
		[Address(RVA = "0x10EF9E0", Offset = "0x10EF9E0", VA = "0x10EF9E0")]
		private void InternalOnServerResponded(IntPtr thisptr, HServerListRequest hRequest, int iServer)
		{
		}

		[Token(Token = "0x60009D4")]
		[Address(RVA = "0x10EFE8C", Offset = "0x10EFE8C", VA = "0x10EFE8C")]
		private void InternalOnServerFailedToRespond(IntPtr thisptr, HServerListRequest hRequest, int iServer)
		{
		}

		[Token(Token = "0x60009D5")]
		[Address(RVA = "0x10F0338", Offset = "0x10F0338", VA = "0x10F0338")]
		private void InternalOnRefreshComplete(IntPtr thisptr, HServerListRequest hRequest, EMatchMakingServerResponse response)
		{
		}

		[Token(Token = "0x60009D6")]
		[Address(RVA = "0x10F07E4", Offset = "0x10F07E4", VA = "0x10F07E4")]
		public static explicit operator IntPtr(ISteamMatchmakingServerListResponse that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x20001A0")]
	public class ISteamMatchmakingPingResponse
	{
		[Token(Token = "0x20002E7")]
		public delegate void ServerResponded(gameserveritem_t server);

		[Token(Token = "0x20002E8")]
		public delegate void ServerFailedToRespond();

		[Token(Token = "0x20002E9")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x9A6614", Offset = "0x9A6614")]
		private delegate void InternalServerResponded(IntPtr thisptr, gameserveritem_t server);

		[Token(Token = "0x20002EA")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x9A6628", Offset = "0x9A6628")]
		private delegate void InternalServerFailedToRespond(IntPtr thisptr);

		[StructLayout(0)]
		[Token(Token = "0x20002EB")]
		private class VTable
		{
			[NonSerialized]
			[Token(Token = "0x4000E7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public InternalServerResponded m_VTServerResponded;

			[NonSerialized]
			[Token(Token = "0x4000E7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public InternalServerFailedToRespond m_VTServerFailedToRespond;

			[Token(Token = "0x600157C")]
			[Address(RVA = "0x10E94D8", Offset = "0x10E94D8", VA = "0x10E94D8")]
			public VTable()
			{
			}
		}

		[Token(Token = "0x40009C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private VTable m_VTable;

		[Token(Token = "0x40009C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IntPtr m_pVTable;

		[Token(Token = "0x40009C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GCHandle m_pGCHandle;

		[Token(Token = "0x40009C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ServerResponded m_ServerResponded;

		[Token(Token = "0x40009C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ServerFailedToRespond m_ServerFailedToRespond;

		[Token(Token = "0x60009D7")]
		[Address(RVA = "0x10E92D4", Offset = "0x10E92D4", VA = "0x10E92D4")]
		public ISteamMatchmakingPingResponse(ServerResponded onServerResponded, ServerFailedToRespond onServerFailedToRespond)
		{
		}

		[Token(Token = "0x60009D8")]
		[Address(RVA = "0x10E9500", Offset = "0x10E9500", VA = "0x10E9500", Slot = "1")]
		~ISteamMatchmakingPingResponse()
		{
		}

		[Token(Token = "0x60009D9")]
		[Address(RVA = "0x10E9604", Offset = "0x10E9604", VA = "0x10E9604")]
		private void InternalOnServerResponded(IntPtr thisptr, gameserveritem_t server)
		{
		}

		[Token(Token = "0x60009DA")]
		[Address(RVA = "0x10E9D6C", Offset = "0x10E9D6C", VA = "0x10E9D6C")]
		private void InternalOnServerFailedToRespond(IntPtr thisptr)
		{
		}

		[Token(Token = "0x60009DB")]
		[Address(RVA = "0x10EA198", Offset = "0x10EA198", VA = "0x10EA198")]
		public static explicit operator IntPtr(ISteamMatchmakingPingResponse that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x20001A1")]
	public class ISteamMatchmakingPlayersResponse
	{
		[Token(Token = "0x20002EC")]
		public delegate void AddPlayerToList(string pchName, int nScore, float flTimePlayed);

		[Token(Token = "0x20002ED")]
		public delegate void PlayersFailedToRespond();

		[Token(Token = "0x20002EE")]
		public delegate void PlayersRefreshComplete();

		[Token(Token = "0x20002EF")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x9A663C", Offset = "0x9A663C")]
		public delegate void InternalAddPlayerToList(IntPtr thisptr, IntPtr pchName, int nScore, float flTimePlayed);

		[Token(Token = "0x20002F0")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x9A6650", Offset = "0x9A6650")]
		public delegate void InternalPlayersFailedToRespond(IntPtr thisptr);

		[Token(Token = "0x20002F1")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x9A6664", Offset = "0x9A6664")]
		public delegate void InternalPlayersRefreshComplete(IntPtr thisptr);

		[StructLayout(0)]
		[Token(Token = "0x20002F2")]
		private class VTable
		{
			[NonSerialized]
			[Token(Token = "0x4000E7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public InternalAddPlayerToList m_VTAddPlayerToList;

			[NonSerialized]
			[Token(Token = "0x4000E7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public InternalPlayersFailedToRespond m_VTPlayersFailedToRespond;

			[NonSerialized]
			[Token(Token = "0x4000E80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InternalPlayersRefreshComplete m_VTPlayersRefreshComplete;

			[Token(Token = "0x6001595")]
			[Address(RVA = "0x10EAE80", Offset = "0x10EAE80", VA = "0x10EAE80")]
			public VTable()
			{
			}
		}

		[Token(Token = "0x40009C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private VTable m_VTable;

		[Token(Token = "0x40009CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IntPtr m_pVTable;

		[Token(Token = "0x40009CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GCHandle m_pGCHandle;

		[Token(Token = "0x40009CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AddPlayerToList m_AddPlayerToList;

		[Token(Token = "0x40009CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private PlayersFailedToRespond m_PlayersFailedToRespond;

		[Token(Token = "0x40009CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PlayersRefreshComplete m_PlayersRefreshComplete;

		[Token(Token = "0x60009DC")]
		[Address(RVA = "0x10EAC34", Offset = "0x10EAC34", VA = "0x10EAC34")]
		public ISteamMatchmakingPlayersResponse(AddPlayerToList onAddPlayerToList, PlayersFailedToRespond onPlayersFailedToRespond, PlayersRefreshComplete onPlayersRefreshComplete)
		{
		}

		[Token(Token = "0x60009DD")]
		[Address(RVA = "0x10EAEB8", Offset = "0x10EAEB8", VA = "0x10EAEB8", Slot = "1")]
		~ISteamMatchmakingPlayersResponse()
		{
		}

		[Token(Token = "0x60009DE")]
		[Address(RVA = "0x10EAFBC", Offset = "0x10EAFBC", VA = "0x10EAFBC")]
		private void InternalOnAddPlayerToList(IntPtr thisptr, IntPtr pchName, int nScore, float flTimePlayed)
		{
		}

		[Token(Token = "0x60009DF")]
		[Address(RVA = "0x10EB910", Offset = "0x10EB910", VA = "0x10EB910")]
		private void InternalOnPlayersFailedToRespond(IntPtr thisptr)
		{
		}

		[Token(Token = "0x60009E0")]
		[Address(RVA = "0x10EBD3C", Offset = "0x10EBD3C", VA = "0x10EBD3C")]
		private void InternalOnPlayersRefreshComplete(IntPtr thisptr)
		{
		}

		[Token(Token = "0x60009E1")]
		[Address(RVA = "0x10EC168", Offset = "0x10EC168", VA = "0x10EC168")]
		public static explicit operator IntPtr(ISteamMatchmakingPlayersResponse that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x20001A2")]
	public class ISteamMatchmakingRulesResponse
	{
		[Token(Token = "0x20002F3")]
		public delegate void RulesResponded(string pchRule, string pchValue);

		[Token(Token = "0x20002F4")]
		public delegate void RulesFailedToRespond();

		[Token(Token = "0x20002F5")]
		public delegate void RulesRefreshComplete();

		[Token(Token = "0x20002F6")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x9A6678", Offset = "0x9A6678")]
		public delegate void InternalRulesResponded(IntPtr thisptr, IntPtr pchRule, IntPtr pchValue);

		[Token(Token = "0x20002F7")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x9A668C", Offset = "0x9A668C")]
		public delegate void InternalRulesFailedToRespond(IntPtr thisptr);

		[Token(Token = "0x20002F8")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x9A66A0", Offset = "0x9A66A0")]
		public delegate void InternalRulesRefreshComplete(IntPtr thisptr);

		[StructLayout(0)]
		[Token(Token = "0x20002F9")]
		private class VTable
		{
			[NonSerialized]
			[Token(Token = "0x4000E81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public InternalRulesResponded m_VTRulesResponded;

			[NonSerialized]
			[Token(Token = "0x4000E82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public InternalRulesFailedToRespond m_VTRulesFailedToRespond;

			[NonSerialized]
			[Token(Token = "0x4000E83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InternalRulesRefreshComplete m_VTRulesRefreshComplete;

			[Token(Token = "0x60015AE")]
			[Address(RVA = "0x10ED4C0", Offset = "0x10ED4C0", VA = "0x10ED4C0")]
			public VTable()
			{
			}
		}

		[Token(Token = "0x40009CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private VTable m_VTable;

		[Token(Token = "0x40009D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IntPtr m_pVTable;

		[Token(Token = "0x40009D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GCHandle m_pGCHandle;

		[Token(Token = "0x40009D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RulesResponded m_RulesResponded;

		[Token(Token = "0x40009D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RulesFailedToRespond m_RulesFailedToRespond;

		[Token(Token = "0x40009D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RulesRefreshComplete m_RulesRefreshComplete;

		[Token(Token = "0x60009E2")]
		[Address(RVA = "0x10ED274", Offset = "0x10ED274", VA = "0x10ED274")]
		public ISteamMatchmakingRulesResponse(RulesResponded onRulesResponded, RulesFailedToRespond onRulesFailedToRespond, RulesRefreshComplete onRulesRefreshComplete)
		{
		}

		[Token(Token = "0x60009E3")]
		[Address(RVA = "0x10ED4F8", Offset = "0x10ED4F8", VA = "0x10ED4F8", Slot = "1")]
		~ISteamMatchmakingRulesResponse()
		{
		}

		[Token(Token = "0x60009E4")]
		[Address(RVA = "0x10ED5FC", Offset = "0x10ED5FC", VA = "0x10ED5FC")]
		private void InternalOnRulesResponded(IntPtr thisptr, IntPtr pchRule, IntPtr pchValue)
		{
		}

		[Token(Token = "0x60009E5")]
		[Address(RVA = "0x10EDDD4", Offset = "0x10EDDD4", VA = "0x10EDDD4")]
		private void InternalOnRulesFailedToRespond(IntPtr thisptr)
		{
		}

		[Token(Token = "0x60009E6")]
		[Address(RVA = "0x10EE200", Offset = "0x10EE200", VA = "0x10EE200")]
		private void InternalOnRulesRefreshComplete(IntPtr thisptr)
		{
		}

		[Token(Token = "0x60009E7")]
		[Address(RVA = "0x10EE62C", Offset = "0x10EE62C", VA = "0x10EE62C")]
		public static explicit operator IntPtr(ISteamMatchmakingRulesResponse that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x20001A3")]
	public static class Packsize
	{
		[Token(Token = "0x20002FA")]
		private struct ValvePackingSentinel_t
		{
			[Token(Token = "0x4000E84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private uint m_u32;

			[Token(Token = "0x4000E85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private ulong m_u64;

			[Token(Token = "0x4000E86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private ushort m_u16;

			[Token(Token = "0x4000E87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private double m_d;
		}

		[Token(Token = "0x40009D5")]
		public const int value = 8;

		[Token(Token = "0x60009E8")]
		[Address(RVA = "0x1AB41E4", Offset = "0x1AB41E4", VA = "0x1AB41E4")]
		public static bool Test()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001A4")]
	public static class Version
	{
		[Token(Token = "0x40009D6")]
		public const string SteamworksNETVersion = "7.0.0";

		[Token(Token = "0x40009D7")]
		public const string SteamworksSDKVersion = "1.34";

		[Token(Token = "0x40009D8")]
		public const string SteamAPIDLLVersion = "02.89.45.04";

		[Token(Token = "0x40009D9")]
		public const int SteamAPIDLLSize = 186560;

		[Token(Token = "0x40009DA")]
		public const int SteamAPI64DLLSize = 206760;
	}
	[Token(Token = "0x20001A5")]
	public static class SteamAPI
	{
		[Token(Token = "0x60009E9")]
		[Address(RVA = "0x1AB498C", Offset = "0x1AB498C", VA = "0x1AB498C")]
		public static bool RestartAppIfNecessary(AppId_t unOwnAppID)
		{
			return default(bool);
		}

		[Token(Token = "0x60009EA")]
		[Address(RVA = "0x1AB49B8", Offset = "0x1AB49B8", VA = "0x1AB49B8")]
		public static bool InitSafe()
		{
			return default(bool);
		}

		[Token(Token = "0x60009EB")]
		[Address(RVA = "0x1AB49D4", Offset = "0x1AB49D4", VA = "0x1AB49D4")]
		public static bool Init()
		{
			return default(bool);
		}

		[Token(Token = "0x60009EC")]
		[Address(RVA = "0x1AB49F0", Offset = "0x1AB49F0", VA = "0x1AB49F0")]
		public static void Shutdown()
		{
		}

		[Token(Token = "0x60009ED")]
		[Address(RVA = "0x1AB4A0C", Offset = "0x1AB4A0C", VA = "0x1AB4A0C")]
		public static void RunCallbacks()
		{
		}

		[Token(Token = "0x60009EE")]
		[Address(RVA = "0x1AB4A28", Offset = "0x1AB4A28", VA = "0x1AB4A28")]
		public static bool IsSteamRunning()
		{
			return default(bool);
		}

		[Token(Token = "0x60009EF")]
		[Address(RVA = "0x1AB4A44", Offset = "0x1AB4A44", VA = "0x1AB4A44")]
		public static HSteamUser GetHSteamUserCurrent()
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x60009F0")]
		[Address(RVA = "0x1AB4A70", Offset = "0x1AB4A70", VA = "0x1AB4A70")]
		public static HSteamPipe GetHSteamPipe()
		{
			return default(HSteamPipe);
		}

		[Token(Token = "0x60009F1")]
		[Address(RVA = "0x1AB4A9C", Offset = "0x1AB4A9C", VA = "0x1AB4A9C")]
		public static HSteamUser GetHSteamUser()
		{
			return default(HSteamUser);
		}
	}
	[Token(Token = "0x20001A6")]
	public static class GameServer
	{
		[Token(Token = "0x60009F2")]
		[Address(RVA = "0x10E7FA0", Offset = "0x10E7FA0", VA = "0x10E7FA0")]
		public static bool InitSafe(uint unIP, ushort usSteamPort, ushort usGamePort, ushort usQueryPort, EServerMode eServerMode, string pchVersionString)
		{
			return default(bool);
		}

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0x10E82E4", Offset = "0x10E82E4", VA = "0x10E82E4")]
		public static bool Init(uint unIP, ushort usSteamPort, ushort usGamePort, ushort usQueryPort, EServerMode eServerMode, string pchVersionString)
		{
			return default(bool);
		}

		[Token(Token = "0x60009F4")]
		[Address(RVA = "0x10E8318", Offset = "0x10E8318", VA = "0x10E8318")]
		public static void Shutdown()
		{
		}

		[Token(Token = "0x60009F5")]
		[Address(RVA = "0x10E83B4", Offset = "0x10E83B4", VA = "0x10E83B4")]
		public static void RunCallbacks()
		{
		}

		[Token(Token = "0x60009F6")]
		[Address(RVA = "0x10E8450", Offset = "0x10E8450", VA = "0x10E8450")]
		public static bool BSecure()
		{
			return default(bool);
		}

		[Token(Token = "0x60009F7")]
		[Address(RVA = "0x10E84F4", Offset = "0x10E84F4", VA = "0x10E84F4")]
		public static CSteamID GetSteamID()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60009F8")]
		[Address(RVA = "0x10E85B8", Offset = "0x10E85B8", VA = "0x10E85B8")]
		public static HSteamPipe GetHSteamPipe()
		{
			return default(HSteamPipe);
		}

		[Token(Token = "0x60009F9")]
		[Address(RVA = "0x10E865C", Offset = "0x10E865C", VA = "0x10E865C")]
		public static HSteamUser GetHSteamUser()
		{
			return default(HSteamUser);
		}
	}
	[Token(Token = "0x20001A7")]
	public static class SteamEncryptedAppTicket
	{
		[Token(Token = "0x60009FA")]
		[Address(RVA = "0x1AB87AC", Offset = "0x1AB87AC", VA = "0x1AB87AC")]
		public static bool BDecryptTicket(byte[] rgubTicketEncrypted, uint cubTicketEncrypted, byte[] rgubTicketDecrypted, ref uint pcubTicketDecrypted, byte[] rgubKey, int cubKey)
		{
			return default(bool);
		}

		[Token(Token = "0x60009FB")]
		[Address(RVA = "0x1AB8810", Offset = "0x1AB8810", VA = "0x1AB8810")]
		public static bool BIsTicketForApp(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, AppId_t nAppID)
		{
			return default(bool);
		}

		[Token(Token = "0x60009FC")]
		[Address(RVA = "0x1AB8854", Offset = "0x1AB8854", VA = "0x1AB8854")]
		public static uint GetTicketIssueTime(byte[] rgubTicketDecrypted, uint cubTicketDecrypted)
		{
			return default(uint);
		}

		[Token(Token = "0x60009FD")]
		[Address(RVA = "0x1AB8888", Offset = "0x1AB8888", VA = "0x1AB8888")]
		public static void GetTicketSteamID(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, out CSteamID psteamID)
		{
		}

		[Token(Token = "0x60009FE")]
		[Address(RVA = "0x1AB88CC", Offset = "0x1AB88CC", VA = "0x1AB88CC")]
		public static uint GetTicketAppID(byte[] rgubTicketDecrypted, uint cubTicketDecrypted)
		{
			return default(uint);
		}

		[Token(Token = "0x60009FF")]
		[Address(RVA = "0x1AB8900", Offset = "0x1AB8900", VA = "0x1AB8900")]
		public static bool BUserOwnsAppInTicket(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, AppId_t nAppID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A00")]
		[Address(RVA = "0x1AB8944", Offset = "0x1AB8944", VA = "0x1AB8944")]
		public static bool BUserIsVacBanned(byte[] rgubTicketDecrypted, uint cubTicketDecrypted)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A01")]
		[Address(RVA = "0x1AB8978", Offset = "0x1AB8978", VA = "0x1AB8978")]
		public static byte[] GetUserVariableData(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, out uint pcubUserData)
		{
			return null;
		}
	}
	[StructLayout(0)]
	[Token(Token = "0x20001A8")]
	public class gameserveritem_t
	{
		[Token(Token = "0x40009DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public servernetadr_t m_NetAdr;

		[Token(Token = "0x40009DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int m_nPing;

		[Token(Token = "0x40009DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool m_bHadSuccessfulResponse;

		[Token(Token = "0x40009DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool m_bDoNotRefresh;

		[Token(Token = "0x40009DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private byte[] m_szGameDir;

		[Token(Token = "0x40009E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private byte[] m_szMap;

		[Token(Token = "0x40009E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private byte[] m_szGameDescription;

		[Token(Token = "0x40009E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public uint m_nAppID;

		[Token(Token = "0x40009E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int m_nPlayers;

		[Token(Token = "0x40009E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int m_nMaxPlayers;

		[Token(Token = "0x40009E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int m_nBotPlayers;

		[Token(Token = "0x40009E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool m_bPassword;

		[Token(Token = "0x40009E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool m_bSecure;

		[Token(Token = "0x40009E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public uint m_ulTimeLastPlayed;

		[Token(Token = "0x40009E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int m_nServerVersion;

		[Token(Token = "0x40009EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private byte[] m_szServerName;

		[Token(Token = "0x40009EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private byte[] m_szGameTags;

		[Token(Token = "0x40009EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public CSteamID m_steamID;

		[Token(Token = "0x6000A02")]
		[Address(RVA = "0x19F4FC0", Offset = "0x19F4FC0", VA = "0x19F4FC0")]
		public string GetGameDir()
		{
			return null;
		}

		[Token(Token = "0x6000A03")]
		[Address(RVA = "0x19F505C", Offset = "0x19F505C", VA = "0x19F505C")]
		public void SetGameDir(string dir)
		{
		}

		[Token(Token = "0x6000A04")]
		[Address(RVA = "0x19F50F8", Offset = "0x19F50F8", VA = "0x19F50F8")]
		public string GetMap()
		{
			return null;
		}

		[Token(Token = "0x6000A05")]
		[Address(RVA = "0x19F5194", Offset = "0x19F5194", VA = "0x19F5194")]
		public void SetMap(string map)
		{
		}

		[Token(Token = "0x6000A06")]
		[Address(RVA = "0x19F5230", Offset = "0x19F5230", VA = "0x19F5230")]
		public string GetGameDescription()
		{
			return null;
		}

		[Token(Token = "0x6000A07")]
		[Address(RVA = "0x19F52CC", Offset = "0x19F52CC", VA = "0x19F52CC")]
		public void SetGameDescription(string desc)
		{
		}

		[Token(Token = "0x6000A08")]
		[Address(RVA = "0x19F5368", Offset = "0x19F5368", VA = "0x19F5368")]
		public string GetServerName()
		{
			return null;
		}

		[Token(Token = "0x6000A09")]
		[Address(RVA = "0x19F545C", Offset = "0x19F545C", VA = "0x19F545C")]
		public void SetServerName(string name)
		{
		}

		[Token(Token = "0x6000A0A")]
		[Address(RVA = "0x19F54F8", Offset = "0x19F54F8", VA = "0x19F54F8")]
		public string GetGameTags()
		{
			return null;
		}

		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0x19F5594", Offset = "0x19F5594", VA = "0x19F5594")]
		public void SetGameTags(string tags)
		{
		}

		[Token(Token = "0x6000A0C")]
		[Address(RVA = "0x19F5630", Offset = "0x19F5630", VA = "0x19F5630")]
		public gameserveritem_t()
		{
		}
	}
	[Token(Token = "0x20001A9")]
	public struct servernetadr_t
	{
		[Token(Token = "0x40009ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ushort m_usConnectionPort;

		[Token(Token = "0x40009EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		private ushort m_usQueryPort;

		[Token(Token = "0x40009EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private uint m_unIP;

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0xA7F7E0", Offset = "0xA7F7E0", VA = "0xA7F7E0")]
		public void Init(uint ip, ushort usQueryPort, ushort usConnectionPort)
		{
		}

		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0xA7F7F0", Offset = "0xA7F7F0", VA = "0xA7F7F0")]
		public ushort GetQueryPort()
		{
			return default(ushort);
		}

		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0xA7F7F8", Offset = "0xA7F7F8", VA = "0xA7F7F8")]
		public void SetQueryPort(ushort usPort)
		{
		}

		[Token(Token = "0x6000A10")]
		[Address(RVA = "0xA7F800", Offset = "0xA7F800", VA = "0xA7F800")]
		public ushort GetConnectionPort()
		{
			return default(ushort);
		}

		[Token(Token = "0x6000A11")]
		[Address(RVA = "0xA7F808", Offset = "0xA7F808", VA = "0xA7F808")]
		public void SetConnectionPort(ushort usPort)
		{
		}

		[Token(Token = "0x6000A12")]
		[Address(RVA = "0xA7F810", Offset = "0xA7F810", VA = "0xA7F810")]
		public uint GetIP()
		{
			return default(uint);
		}

		[Token(Token = "0x6000A13")]
		[Address(RVA = "0xA7F818", Offset = "0xA7F818", VA = "0xA7F818")]
		public void SetIP(uint unIP)
		{
		}

		[Token(Token = "0x6000A14")]
		[Address(RVA = "0xA7F820", Offset = "0xA7F820", VA = "0xA7F820")]
		public string GetConnectionAddressString()
		{
			return null;
		}

		[Token(Token = "0x6000A15")]
		[Address(RVA = "0xA7F830", Offset = "0xA7F830", VA = "0xA7F830")]
		public string GetQueryAddressString()
		{
			return null;
		}

		[Token(Token = "0x6000A16")]
		[Address(RVA = "0x19F5678", Offset = "0x19F5678", VA = "0x19F5678")]
		public static string ToString(uint unIP, ushort usPort)
		{
			return null;
		}

		[Token(Token = "0x6000A17")]
		[Address(RVA = "0x19F5910", Offset = "0x19F5910", VA = "0x19F5910")]
		public static bool operator <(servernetadr_t x, servernetadr_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A18")]
		[Address(RVA = "0x19F5944", Offset = "0x19F5944", VA = "0x19F5944")]
		public static bool operator >(servernetadr_t x, servernetadr_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A19")]
		[Address(RVA = "0xA7F840", Offset = "0xA7F840", VA = "0xA7F840", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0xA7F848", Offset = "0xA7F848", VA = "0xA7F848", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000A1B")]
		[Address(RVA = "0x19F5A20", Offset = "0x19F5A20", VA = "0x19F5A20")]
		public static bool operator ==(servernetadr_t x, servernetadr_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A1C")]
		[Address(RVA = "0x19F5AAC", Offset = "0x19F5AAC", VA = "0x19F5AAC")]
		public static bool operator !=(servernetadr_t x, servernetadr_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A1D")]
		[Address(RVA = "0xA7F850", Offset = "0xA7F850", VA = "0xA7F850")]
		public bool Equals(servernetadr_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A1E")]
		[Address(RVA = "0xA7F884", Offset = "0xA7F884", VA = "0xA7F884")]
		public int CompareTo(servernetadr_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001AA")]
	public struct HSteamPipe : IEquatable<HSteamPipe>, IComparable<HSteamPipe>
	{
		[Token(Token = "0x40009F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_HSteamPipe;

		[Token(Token = "0x6000A1F")]
		[Address(RVA = "0xA69B58", Offset = "0xA69B58", VA = "0xA69B58")]
		public HSteamPipe(int value)
		{
		}

		[Token(Token = "0x6000A20")]
		[Address(RVA = "0xA69B60", Offset = "0xA69B60", VA = "0xA69B60", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A21")]
		[Address(RVA = "0xA69B6C", Offset = "0xA69B6C", VA = "0xA69B6C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A22")]
		[Address(RVA = "0xA69B74", Offset = "0xA69B74", VA = "0xA69B74", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000A23")]
		[Address(RVA = "0x10E8E64", Offset = "0x10E8E64", VA = "0x10E8E64")]
		public static bool operator ==(HSteamPipe x, HSteamPipe y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A24")]
		[Address(RVA = "0x10E8E78", Offset = "0x10E8E78", VA = "0x10E8E78")]
		public static bool operator !=(HSteamPipe x, HSteamPipe y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A25")]
		[Address(RVA = "0x10E8654", Offset = "0x10E8654", VA = "0x10E8654")]
		public static explicit operator HSteamPipe(int value)
		{
			return default(HSteamPipe);
		}

		[Token(Token = "0x6000A26")]
		[Address(RVA = "0x10E8E84", Offset = "0x10E8E84", VA = "0x10E8E84")]
		public static explicit operator int(HSteamPipe that)
		{
			return default(int);
		}

		[Token(Token = "0x6000A27")]
		[Address(RVA = "0xA69B80", Offset = "0xA69B80", VA = "0xA69B80", Slot = "4")]
		public bool Equals(HSteamPipe other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A28")]
		[Address(RVA = "0xA69B90", Offset = "0xA69B90", VA = "0xA69B90", Slot = "5")]
		public int CompareTo(HSteamPipe other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001AB")]
	public struct HSteamUser : IEquatable<HSteamUser>, IComparable<HSteamUser>
	{
		[Token(Token = "0x40009F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_HSteamUser;

		[Token(Token = "0x6000A29")]
		[Address(RVA = "0xA69B9C", Offset = "0xA69B9C", VA = "0xA69B9C")]
		public HSteamUser(int value)
		{
		}

		[Token(Token = "0x6000A2A")]
		[Address(RVA = "0xA69BA4", Offset = "0xA69BA4", VA = "0xA69BA4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A2B")]
		[Address(RVA = "0xA69BB0", Offset = "0xA69BB0", VA = "0xA69BB0", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0xA69BB8", Offset = "0xA69BB8", VA = "0xA69BB8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000A2D")]
		[Address(RVA = "0x10E8F38", Offset = "0x10E8F38", VA = "0x10E8F38")]
		public static bool operator ==(HSteamUser x, HSteamUser y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A2E")]
		[Address(RVA = "0x10E8F4C", Offset = "0x10E8F4C", VA = "0x10E8F4C")]
		public static bool operator !=(HSteamUser x, HSteamUser y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0x10E86F8", Offset = "0x10E86F8", VA = "0x10E86F8")]
		public static explicit operator HSteamUser(int value)
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x6000A30")]
		[Address(RVA = "0x10E8F58", Offset = "0x10E8F58", VA = "0x10E8F58")]
		public static explicit operator int(HSteamUser that)
		{
			return default(int);
		}

		[Token(Token = "0x6000A31")]
		[Address(RVA = "0xA69BC4", Offset = "0xA69BC4", VA = "0xA69BC4", Slot = "4")]
		public bool Equals(HSteamUser other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A32")]
		[Address(RVA = "0xA69BD4", Offset = "0xA69BD4", VA = "0xA69BD4", Slot = "5")]
		public int CompareTo(HSteamUser other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001AC")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x9A5F5C", Offset = "0x9A5F5C")]
	public delegate void SteamAPI_CheckCallbackRegistered_t(int iCallbackNum);
	[Token(Token = "0x20001AD")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x9A5F70", Offset = "0x9A5F70")]
	public delegate void SteamAPI_PostAPIResultInProcess_t(SteamAPICall_t callHandle, IntPtr pUnknown, uint unCallbackSize, int iCallbackNum);
	[Token(Token = "0x20001AE")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x9A5F84", Offset = "0x9A5F84")]
	public delegate void SteamAPIWarningMessageHook_t(int nSeverity, StringBuilder pchDebugText);
	[Token(Token = "0x20001AF")]
	public struct CGameID : IEquatable<CGameID>, IComparable<CGameID>
	{
		[Token(Token = "0x20002FB")]
		public enum EGameIDType
		{
			[Token(Token = "0x4000E89")]
			k_EGameIDTypeApp,
			[Token(Token = "0x4000E8A")]
			k_EGameIDTypeGameMod,
			[Token(Token = "0x4000E8B")]
			k_EGameIDTypeShortcut,
			[Token(Token = "0x4000E8C")]
			k_EGameIDTypeP2P
		}

		[Token(Token = "0x40009F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_GameID;

		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0xA78848", Offset = "0xA78848", VA = "0xA78848")]
		public CGameID(ulong GameID)
		{
		}

		[Token(Token = "0x6000A40")]
		[Address(RVA = "0xA78850", Offset = "0xA78850", VA = "0xA78850")]
		public CGameID(AppId_t nAppID)
		{
		}

		[Token(Token = "0x6000A41")]
		[Address(RVA = "0xA7885C", Offset = "0xA7885C", VA = "0xA7885C")]
		public CGameID(AppId_t nAppID, uint nModID)
		{
		}

		[Token(Token = "0x6000A42")]
		[Address(RVA = "0xA788A0", Offset = "0xA788A0", VA = "0xA788A0")]
		public bool IsSteamApp()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A43")]
		[Address(RVA = "0xA788B0", Offset = "0xA788B0", VA = "0xA788B0")]
		public bool IsMod()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A44")]
		[Address(RVA = "0xA788C8", Offset = "0xA788C8", VA = "0xA788C8")]
		public bool IsShortcut()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A45")]
		[Address(RVA = "0xA788E0", Offset = "0xA788E0", VA = "0xA788E0")]
		public bool IsP2PFile()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A46")]
		[Address(RVA = "0xA788F8", Offset = "0xA788F8", VA = "0xA788F8")]
		public AppId_t AppID()
		{
			return default(AppId_t);
		}

		[Token(Token = "0x6000A47")]
		[Address(RVA = "0xA78904", Offset = "0xA78904", VA = "0xA78904")]
		public EGameIDType Type()
		{
			return default(EGameIDType);
		}

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0xA7890C", Offset = "0xA7890C", VA = "0xA7890C")]
		public uint ModID()
		{
			return default(uint);
		}

		[Token(Token = "0x6000A49")]
		[Address(RVA = "0xA78914", Offset = "0xA78914", VA = "0xA78914")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A4A")]
		[Address(RVA = "0xA7891C", Offset = "0xA7891C", VA = "0xA7891C")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0xA78924", Offset = "0xA78924", VA = "0xA78924")]
		public void Set(ulong GameID)
		{
		}

		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0xA7892C", Offset = "0xA7892C", VA = "0xA7892C")]
		private void SetAppID(AppId_t other)
		{
		}

		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0xA78938", Offset = "0xA78938", VA = "0xA78938")]
		private void SetType(EGameIDType other)
		{
		}

		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0xA78940", Offset = "0xA78940", VA = "0xA78940")]
		private void SetModID(uint other)
		{
		}

		[Token(Token = "0x6000A4F")]
		[Address(RVA = "0xA78948", Offset = "0xA78948", VA = "0xA78948", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A50")]
		[Address(RVA = "0xA78954", Offset = "0xA78954", VA = "0xA78954", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A51")]
		[Address(RVA = "0xA7895C", Offset = "0xA7895C", VA = "0xA7895C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000A52")]
		[Address(RVA = "0x16D04F8", Offset = "0x16D04F8", VA = "0x16D04F8")]
		public static bool operator ==(CGameID x, CGameID y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A53")]
		[Address(RVA = "0x16D050C", Offset = "0x16D050C", VA = "0x16D050C")]
		public static bool operator !=(CGameID x, CGameID y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A54")]
		[Address(RVA = "0x16D0518", Offset = "0x16D0518", VA = "0x16D0518")]
		public static explicit operator CGameID(ulong value)
		{
			return default(CGameID);
		}

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0x16D051C", Offset = "0x16D051C", VA = "0x16D051C")]
		public static explicit operator ulong(CGameID that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000A56")]
		[Address(RVA = "0xA78968", Offset = "0xA78968", VA = "0xA78968", Slot = "4")]
		public bool Equals(CGameID other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A57")]
		[Address(RVA = "0xA78978", Offset = "0xA78978", VA = "0xA78978", Slot = "5")]
		public int CompareTo(CGameID other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001B0")]
	public struct CSteamID : IEquatable<CSteamID>, IComparable<CSteamID>
	{
		[Token(Token = "0x40009F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly CSteamID Nil;

		[Token(Token = "0x40009F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly CSteamID OutofDateGS;

		[Token(Token = "0x40009F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly CSteamID LanModeGS;

		[Token(Token = "0x40009F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly CSteamID NotInitYetGS;

		[Token(Token = "0x40009F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly CSteamID NonSteamGS;

		[Token(Token = "0x40009F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamID;

		[Token(Token = "0x6000A58")]
		[Address(RVA = "0xA78984", Offset = "0xA78984", VA = "0xA78984")]
		public CSteamID(AccountID_t unAccountID, EUniverse eUniverse, EAccountType eAccountType)
		{
		}

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0xA789B0", Offset = "0xA789B0", VA = "0xA789B0")]
		public CSteamID(AccountID_t unAccountID, uint unAccountInstance, EUniverse eUniverse, EAccountType eAccountType)
		{
		}

		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0xA789D0", Offset = "0xA789D0", VA = "0xA789D0")]
		public CSteamID(ulong ulSteamID)
		{
		}

		[Token(Token = "0x6000A5B")]
		[Address(RVA = "0xA789D8", Offset = "0xA789D8", VA = "0xA789D8")]
		public void Set(AccountID_t unAccountID, EUniverse eUniverse, EAccountType eAccountType)
		{
		}

		[Token(Token = "0x6000A5C")]
		[Address(RVA = "0xA78A10", Offset = "0xA78A10", VA = "0xA78A10")]
		public void InstancedSet(AccountID_t unAccountID, uint unInstance, EUniverse eUniverse, EAccountType eAccountType)
		{
		}

		[Token(Token = "0x6000A5D")]
		[Address(RVA = "0xA78A30", Offset = "0xA78A30", VA = "0xA78A30")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000A5E")]
		[Address(RVA = "0xA78A38", Offset = "0xA78A38", VA = "0xA78A38")]
		public void CreateBlankAnonLogon(EUniverse eUniverse)
		{
		}

		[Token(Token = "0x6000A5F")]
		[Address(RVA = "0xA78A48", Offset = "0xA78A48", VA = "0xA78A48")]
		public void CreateBlankAnonUserLogon(EUniverse eUniverse)
		{
		}

		[Token(Token = "0x6000A60")]
		[Address(RVA = "0xA78A58", Offset = "0xA78A58", VA = "0xA78A58")]
		public bool BBlankAnonAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A61")]
		[Address(RVA = "0xA78A88", Offset = "0xA78A88", VA = "0xA78A88")]
		public bool BGameServerAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A62")]
		[Address(RVA = "0xA78AA0", Offset = "0xA78AA0", VA = "0xA78AA0")]
		public bool BPersistentGameServerAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A63")]
		[Address(RVA = "0xA78AB8", Offset = "0xA78AB8", VA = "0xA78AB8")]
		public bool BAnonGameServerAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A64")]
		[Address(RVA = "0xA78AD0", Offset = "0xA78AD0", VA = "0xA78AD0")]
		public bool BContentServerAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A65")]
		[Address(RVA = "0xA78AE8", Offset = "0xA78AE8", VA = "0xA78AE8")]
		public bool BClanAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A66")]
		[Address(RVA = "0xA78B00", Offset = "0xA78B00", VA = "0xA78B00")]
		public bool BChatAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A67")]
		[Address(RVA = "0xA78B18", Offset = "0xA78B18", VA = "0xA78B18")]
		public bool IsLobby()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A68")]
		[Address(RVA = "0xA78B34", Offset = "0xA78B34", VA = "0xA78B34")]
		public bool BIndividualAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A69")]
		[Address(RVA = "0xA78B4C", Offset = "0xA78B4C", VA = "0xA78B4C")]
		public bool BAnonAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0xA78B6C", Offset = "0xA78B6C", VA = "0xA78B6C")]
		public bool BAnonUserAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A6B")]
		[Address(RVA = "0xA78B84", Offset = "0xA78B84", VA = "0xA78B84")]
		public bool BConsoleUserAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A6C")]
		[Address(RVA = "0xA78B9C", Offset = "0xA78B9C", VA = "0xA78B9C")]
		public void SetAccountID(AccountID_t other)
		{
		}

		[Token(Token = "0x6000A6D")]
		[Address(RVA = "0xA78BA4", Offset = "0xA78BA4", VA = "0xA78BA4")]
		public void SetAccountInstance(uint other)
		{
		}

		[Token(Token = "0x6000A6E")]
		[Address(RVA = "0xA78BB8", Offset = "0xA78BB8", VA = "0xA78BB8")]
		public void SetEAccountType(EAccountType other)
		{
		}

		[Token(Token = "0x6000A6F")]
		[Address(RVA = "0xA78BCC", Offset = "0xA78BCC", VA = "0xA78BCC")]
		public void SetEUniverse(EUniverse other)
		{
		}

		[Token(Token = "0x6000A70")]
		[Address(RVA = "0xA78BD4", Offset = "0xA78BD4", VA = "0xA78BD4")]
		public void ClearIndividualInstance()
		{
		}

		[Token(Token = "0x6000A71")]
		[Address(RVA = "0xA78BF4", Offset = "0xA78BF4", VA = "0xA78BF4")]
		public bool HasNoIndividualInstance()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A72")]
		[Address(RVA = "0xA78C18", Offset = "0xA78C18", VA = "0xA78C18")]
		public AccountID_t GetAccountID()
		{
			return default(AccountID_t);
		}

		[Token(Token = "0x6000A73")]
		[Address(RVA = "0xA78C20", Offset = "0xA78C20", VA = "0xA78C20")]
		public uint GetUnAccountInstance()
		{
			return default(uint);
		}

		[Token(Token = "0x6000A74")]
		[Address(RVA = "0xA78C2C", Offset = "0xA78C2C", VA = "0xA78C2C")]
		public EAccountType GetEAccountType()
		{
			return default(EAccountType);
		}

		[Token(Token = "0x6000A75")]
		[Address(RVA = "0xA78C38", Offset = "0xA78C38", VA = "0xA78C38")]
		public EUniverse GetEUniverse()
		{
			return default(EUniverse);
		}

		[Token(Token = "0x6000A76")]
		[Address(RVA = "0xA78C40", Offset = "0xA78C40", VA = "0xA78C40")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A77")]
		[Address(RVA = "0xA78C48", Offset = "0xA78C48", VA = "0xA78C48", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A78")]
		[Address(RVA = "0xA78C54", Offset = "0xA78C54", VA = "0xA78C54", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A79")]
		[Address(RVA = "0xA78C5C", Offset = "0xA78C5C", VA = "0xA78C5C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000A7A")]
		[Address(RVA = "0x16D0920", Offset = "0x16D0920", VA = "0x16D0920")]
		public static bool operator ==(CSteamID x, CSteamID y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0x16D0934", Offset = "0x16D0934", VA = "0x16D0934")]
		public static bool operator !=(CSteamID x, CSteamID y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A7C")]
		[Address(RVA = "0x16D09A8", Offset = "0x16D09A8", VA = "0x16D09A8")]
		public static explicit operator CSteamID(ulong value)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000A7D")]
		[Address(RVA = "0x16D09AC", Offset = "0x16D09AC", VA = "0x16D09AC")]
		public static explicit operator ulong(CSteamID that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000A7E")]
		[Address(RVA = "0xA78C68", Offset = "0xA78C68", VA = "0xA78C68", Slot = "4")]
		public bool Equals(CSteamID other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A7F")]
		[Address(RVA = "0xA78C78", Offset = "0xA78C78", VA = "0xA78C78", Slot = "5")]
		public int CompareTo(CSteamID other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001B1")]
	public struct HAuthTicket : IEquatable<HAuthTicket>, IComparable<HAuthTicket>
	{
		[Token(Token = "0x40009F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HAuthTicket Invalid;

		[Token(Token = "0x40009FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_HAuthTicket;

		[Token(Token = "0x6000A81")]
		[Address(RVA = "0xA69A58", Offset = "0xA69A58", VA = "0xA69A58")]
		public HAuthTicket(uint value)
		{
		}

		[Token(Token = "0x6000A82")]
		[Address(RVA = "0xA69A60", Offset = "0xA69A60", VA = "0xA69A60", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A83")]
		[Address(RVA = "0xA69A6C", Offset = "0xA69A6C", VA = "0xA69A6C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A84")]
		[Address(RVA = "0xA69A74", Offset = "0xA69A74", VA = "0xA69A74", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000A85")]
		[Address(RVA = "0x10E87B4", Offset = "0x10E87B4", VA = "0x10E87B4")]
		public static bool operator ==(HAuthTicket x, HAuthTicket y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A86")]
		[Address(RVA = "0x10E87C8", Offset = "0x10E87C8", VA = "0x10E87C8")]
		public static bool operator !=(HAuthTicket x, HAuthTicket y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A87")]
		[Address(RVA = "0x10E883C", Offset = "0x10E883C", VA = "0x10E883C")]
		public static explicit operator HAuthTicket(uint value)
		{
			return default(HAuthTicket);
		}

		[Token(Token = "0x6000A88")]
		[Address(RVA = "0x10E8844", Offset = "0x10E8844", VA = "0x10E8844")]
		public static explicit operator uint(HAuthTicket that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A89")]
		[Address(RVA = "0xA69A80", Offset = "0xA69A80", VA = "0xA69A80", Slot = "4")]
		public bool Equals(HAuthTicket other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A8A")]
		[Address(RVA = "0xA69A90", Offset = "0xA69A90", VA = "0xA69A90", Slot = "5")]
		public int CompareTo(HAuthTicket other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001B2")]
	public struct FriendsGroupID_t : IEquatable<FriendsGroupID_t>, IComparable<FriendsGroupID_t>
	{
		[Token(Token = "0x40009FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly FriendsGroupID_t Invalid;

		[Token(Token = "0x40009FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public short m_FriendsGroupID;

		[Token(Token = "0x6000A8C")]
		[Address(RVA = "0xA697EC", Offset = "0xA697EC", VA = "0xA697EC")]
		public FriendsGroupID_t(short value)
		{
		}

		[Token(Token = "0x6000A8D")]
		[Address(RVA = "0xA697F4", Offset = "0xA697F4", VA = "0xA697F4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A8E")]
		[Address(RVA = "0xA69800", Offset = "0xA69800", VA = "0xA69800", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A8F")]
		[Address(RVA = "0xA69808", Offset = "0xA69808", VA = "0xA69808", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000A90")]
		[Address(RVA = "0x10E7E98", Offset = "0x10E7E98", VA = "0x10E7E98")]
		public static bool operator ==(FriendsGroupID_t x, FriendsGroupID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A91")]
		[Address(RVA = "0x10E7EB0", Offset = "0x10E7EB0", VA = "0x10E7EB0")]
		public static bool operator !=(FriendsGroupID_t x, FriendsGroupID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A92")]
		[Address(RVA = "0x10E7F28", Offset = "0x10E7F28", VA = "0x10E7F28")]
		public static explicit operator FriendsGroupID_t(short value)
		{
			return default(FriendsGroupID_t);
		}

		[Token(Token = "0x6000A93")]
		[Address(RVA = "0x10E7F30", Offset = "0x10E7F30", VA = "0x10E7F30")]
		public static explicit operator short(FriendsGroupID_t that)
		{
			return default(short);
		}

		[Token(Token = "0x6000A94")]
		[Address(RVA = "0xA69814", Offset = "0xA69814", VA = "0xA69814", Slot = "4")]
		public bool Equals(FriendsGroupID_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A95")]
		[Address(RVA = "0xA69824", Offset = "0xA69824", VA = "0xA69824", Slot = "5")]
		public int CompareTo(FriendsGroupID_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001B3")]
	public struct HHTMLBrowser : IEquatable<HHTMLBrowser>, IComparable<HHTMLBrowser>
	{
		[Token(Token = "0x40009FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HHTMLBrowser Invalid;

		[Token(Token = "0x40009FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_HHTMLBrowser;

		[Token(Token = "0x6000A97")]
		[Address(RVA = "0xA69A9C", Offset = "0xA69A9C", VA = "0xA69A9C")]
		public HHTMLBrowser(uint value)
		{
		}

		[Token(Token = "0x6000A98")]
		[Address(RVA = "0xA69AA4", Offset = "0xA69AA4", VA = "0xA69AA4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A99")]
		[Address(RVA = "0xA69AB0", Offset = "0xA69AB0", VA = "0xA69AB0", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A9A")]
		[Address(RVA = "0xA69AB8", Offset = "0xA69AB8", VA = "0xA69AB8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0x10E8964", Offset = "0x10E8964", VA = "0x10E8964")]
		public static bool operator ==(HHTMLBrowser x, HHTMLBrowser y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0x10E8978", Offset = "0x10E8978", VA = "0x10E8978")]
		public static bool operator !=(HHTMLBrowser x, HHTMLBrowser y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0x10E89EC", Offset = "0x10E89EC", VA = "0x10E89EC")]
		public static explicit operator HHTMLBrowser(uint value)
		{
			return default(HHTMLBrowser);
		}

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0x10E89F4", Offset = "0x10E89F4", VA = "0x10E89F4")]
		public static explicit operator uint(HHTMLBrowser that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0xA69AC4", Offset = "0xA69AC4", VA = "0xA69AC4", Slot = "4")]
		public bool Equals(HHTMLBrowser other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA0")]
		[Address(RVA = "0xA69AD4", Offset = "0xA69AD4", VA = "0xA69AD4", Slot = "5")]
		public int CompareTo(HHTMLBrowser other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001B4")]
	public struct HTTPCookieContainerHandle : IEquatable<HTTPCookieContainerHandle>, IComparable<HTTPCookieContainerHandle>
	{
		[Token(Token = "0x40009FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HTTPCookieContainerHandle Invalid;

		[Token(Token = "0x4000A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_HTTPCookieContainerHandle;

		[Token(Token = "0x6000AA2")]
		[Address(RVA = "0xA6A4B8", Offset = "0xA6A4B8", VA = "0xA6A4B8")]
		public HTTPCookieContainerHandle(uint value)
		{
		}

		[Token(Token = "0x6000AA3")]
		[Address(RVA = "0xA6A4C0", Offset = "0xA6A4C0", VA = "0xA6A4C0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000AA4")]
		[Address(RVA = "0xA6A4CC", Offset = "0xA6A4CC", VA = "0xA6A4CC", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA5")]
		[Address(RVA = "0xA6A4D4", Offset = "0xA6A4D4", VA = "0xA6A4D4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000AA6")]
		[Address(RVA = "0x10E9028", Offset = "0x10E9028", VA = "0x10E9028")]
		public static bool operator ==(HTTPCookieContainerHandle x, HTTPCookieContainerHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA7")]
		[Address(RVA = "0x10E903C", Offset = "0x10E903C", VA = "0x10E903C")]
		public static bool operator !=(HTTPCookieContainerHandle x, HTTPCookieContainerHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA8")]
		[Address(RVA = "0x10E90B0", Offset = "0x10E90B0", VA = "0x10E90B0")]
		public static explicit operator HTTPCookieContainerHandle(uint value)
		{
			return default(HTTPCookieContainerHandle);
		}

		[Token(Token = "0x6000AA9")]
		[Address(RVA = "0x10E90B8", Offset = "0x10E90B8", VA = "0x10E90B8")]
		public static explicit operator uint(HTTPCookieContainerHandle that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AAA")]
		[Address(RVA = "0xA6A4E0", Offset = "0xA6A4E0", VA = "0xA6A4E0", Slot = "4")]
		public bool Equals(HTTPCookieContainerHandle other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AAB")]
		[Address(RVA = "0xA6A4F0", Offset = "0xA6A4F0", VA = "0xA6A4F0", Slot = "5")]
		public int CompareTo(HTTPCookieContainerHandle other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001B5")]
	public struct HTTPRequestHandle : IEquatable<HTTPRequestHandle>, IComparable<HTTPRequestHandle>
	{
		[Token(Token = "0x4000A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HTTPRequestHandle Invalid;

		[Token(Token = "0x4000A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_HTTPRequestHandle;

		[Token(Token = "0x6000AAD")]
		[Address(RVA = "0xA6A4FC", Offset = "0xA6A4FC", VA = "0xA6A4FC")]
		public HTTPRequestHandle(uint value)
		{
		}

		[Token(Token = "0x6000AAE")]
		[Address(RVA = "0xA6A504", Offset = "0xA6A504", VA = "0xA6A504", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000AAF")]
		[Address(RVA = "0xA6A510", Offset = "0xA6A510", VA = "0xA6A510", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB0")]
		[Address(RVA = "0xA6A518", Offset = "0xA6A518", VA = "0xA6A518", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000AB1")]
		[Address(RVA = "0x10E91D8", Offset = "0x10E91D8", VA = "0x10E91D8")]
		public static bool operator ==(HTTPRequestHandle x, HTTPRequestHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB2")]
		[Address(RVA = "0x10E91EC", Offset = "0x10E91EC", VA = "0x10E91EC")]
		public static bool operator !=(HTTPRequestHandle x, HTTPRequestHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB3")]
		[Address(RVA = "0x10E9260", Offset = "0x10E9260", VA = "0x10E9260")]
		public static explicit operator HTTPRequestHandle(uint value)
		{
			return default(HTTPRequestHandle);
		}

		[Token(Token = "0x6000AB4")]
		[Address(RVA = "0x10E9268", Offset = "0x10E9268", VA = "0x10E9268")]
		public static explicit operator uint(HTTPRequestHandle that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AB5")]
		[Address(RVA = "0xA6A524", Offset = "0xA6A524", VA = "0xA6A524", Slot = "4")]
		public bool Equals(HTTPRequestHandle other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB6")]
		[Address(RVA = "0xA6A534", Offset = "0xA6A534", VA = "0xA6A534", Slot = "5")]
		public int CompareTo(HTTPRequestHandle other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001B6")]
	public struct SteamInventoryResult_t : IEquatable<SteamInventoryResult_t>, IComparable<SteamInventoryResult_t>
	{
		[Token(Token = "0x4000A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly SteamInventoryResult_t Invalid;

		[Token(Token = "0x4000A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_SteamInventoryResult;

		[Token(Token = "0x6000AB8")]
		[Address(RVA = "0xA81CB8", Offset = "0xA81CB8", VA = "0xA81CB8")]
		public SteamInventoryResult_t(int value)
		{
		}

		[Token(Token = "0x6000AB9")]
		[Address(RVA = "0xA81CC0", Offset = "0xA81CC0", VA = "0xA81CC0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000ABA")]
		[Address(RVA = "0xA81CCC", Offset = "0xA81CCC", VA = "0xA81CCC", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABB")]
		[Address(RVA = "0xA81CD4", Offset = "0xA81CD4", VA = "0xA81CD4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000ABC")]
		[Address(RVA = "0x1AC448C", Offset = "0x1AC448C", VA = "0x1AC448C")]
		public static bool operator ==(SteamInventoryResult_t x, SteamInventoryResult_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABD")]
		[Address(RVA = "0x1AC44A0", Offset = "0x1AC44A0", VA = "0x1AC44A0")]
		public static bool operator !=(SteamInventoryResult_t x, SteamInventoryResult_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABE")]
		[Address(RVA = "0x1AC4514", Offset = "0x1AC4514", VA = "0x1AC4514")]
		public static explicit operator SteamInventoryResult_t(int value)
		{
			return default(SteamInventoryResult_t);
		}

		[Token(Token = "0x6000ABF")]
		[Address(RVA = "0x1AC451C", Offset = "0x1AC451C", VA = "0x1AC451C")]
		public static explicit operator int(SteamInventoryResult_t that)
		{
			return default(int);
		}

		[Token(Token = "0x6000AC0")]
		[Address(RVA = "0xA81CE0", Offset = "0xA81CE0", VA = "0xA81CE0", Slot = "4")]
		public bool Equals(SteamInventoryResult_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC1")]
		[Address(RVA = "0xA81CF0", Offset = "0xA81CF0", VA = "0xA81CF0", Slot = "5")]
		public int CompareTo(SteamInventoryResult_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001B7")]
	public struct SteamItemDef_t : IEquatable<SteamItemDef_t>, IComparable<SteamItemDef_t>
	{
		[Token(Token = "0x4000A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_SteamItemDef;

		[Token(Token = "0x6000AC3")]
		[Address(RVA = "0xA81CFC", Offset = "0xA81CFC", VA = "0xA81CFC")]
		public SteamItemDef_t(int value)
		{
		}

		[Token(Token = "0x6000AC4")]
		[Address(RVA = "0xA81D04", Offset = "0xA81D04", VA = "0xA81D04", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000AC5")]
		[Address(RVA = "0xA81D10", Offset = "0xA81D10", VA = "0xA81D10", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC6")]
		[Address(RVA = "0xA81D18", Offset = "0xA81D18", VA = "0xA81D18", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000AC7")]
		[Address(RVA = "0x1AC4624", Offset = "0x1AC4624", VA = "0x1AC4624")]
		public static bool operator ==(SteamItemDef_t x, SteamItemDef_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC8")]
		[Address(RVA = "0x1AC4638", Offset = "0x1AC4638", VA = "0x1AC4638")]
		public static bool operator !=(SteamItemDef_t x, SteamItemDef_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC9")]
		[Address(RVA = "0x1AC4644", Offset = "0x1AC4644", VA = "0x1AC4644")]
		public static explicit operator SteamItemDef_t(int value)
		{
			return default(SteamItemDef_t);
		}

		[Token(Token = "0x6000ACA")]
		[Address(RVA = "0x1AC464C", Offset = "0x1AC464C", VA = "0x1AC464C")]
		public static explicit operator int(SteamItemDef_t that)
		{
			return default(int);
		}

		[Token(Token = "0x6000ACB")]
		[Address(RVA = "0xA81D24", Offset = "0xA81D24", VA = "0xA81D24", Slot = "4")]
		public bool Equals(SteamItemDef_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ACC")]
		[Address(RVA = "0xA81D34", Offset = "0xA81D34", VA = "0xA81D34", Slot = "5")]
		public int CompareTo(SteamItemDef_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001B8")]
	public struct SteamItemInstanceID_t : IEquatable<SteamItemInstanceID_t>, IComparable<SteamItemInstanceID_t>
	{
		[Token(Token = "0x4000A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly SteamItemInstanceID_t Invalid;

		[Token(Token = "0x4000A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamItemInstanceID;

		[Token(Token = "0x6000ACD")]
		[Address(RVA = "0xA81D40", Offset = "0xA81D40", VA = "0xA81D40")]
		public SteamItemInstanceID_t(ulong value)
		{
		}

		[Token(Token = "0x6000ACE")]
		[Address(RVA = "0xA81D48", Offset = "0xA81D48", VA = "0xA81D48", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000ACF")]
		[Address(RVA = "0xA81D54", Offset = "0xA81D54", VA = "0xA81D54", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD0")]
		[Address(RVA = "0xA81D5C", Offset = "0xA81D5C", VA = "0xA81D5C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000AD1")]
		[Address(RVA = "0x1AC471C", Offset = "0x1AC471C", VA = "0x1AC471C")]
		public static bool operator ==(SteamItemInstanceID_t x, SteamItemInstanceID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD2")]
		[Address(RVA = "0x1AC4730", Offset = "0x1AC4730", VA = "0x1AC4730")]
		public static bool operator !=(SteamItemInstanceID_t x, SteamItemInstanceID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD3")]
		[Address(RVA = "0x1AC47A4", Offset = "0x1AC47A4", VA = "0x1AC47A4")]
		public static explicit operator SteamItemInstanceID_t(ulong value)
		{
			return default(SteamItemInstanceID_t);
		}

		[Token(Token = "0x6000AD4")]
		[Address(RVA = "0x1AC47A8", Offset = "0x1AC47A8", VA = "0x1AC47A8")]
		public static explicit operator ulong(SteamItemInstanceID_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000AD5")]
		[Address(RVA = "0xA81D68", Offset = "0xA81D68", VA = "0xA81D68", Slot = "4")]
		public bool Equals(SteamItemInstanceID_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD6")]
		[Address(RVA = "0xA81D78", Offset = "0xA81D78", VA = "0xA81D78", Slot = "5")]
		public int CompareTo(SteamItemInstanceID_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001B9")]
	public struct HServerListRequest : IEquatable<HServerListRequest>
	{
		[Token(Token = "0x4000A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HServerListRequest Invalid;

		[Token(Token = "0x4000A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr m_HServerListRequest;

		[Token(Token = "0x6000AD8")]
		[Address(RVA = "0xA69AE0", Offset = "0xA69AE0", VA = "0xA69AE0")]
		public HServerListRequest(IntPtr value)
		{
		}

		[Token(Token = "0x6000AD9")]
		[Address(RVA = "0xA69AE8", Offset = "0xA69AE8", VA = "0xA69AE8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000ADA")]
		[Address(RVA = "0xA69AF4", Offset = "0xA69AF4", VA = "0xA69AF4", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ADB")]
		[Address(RVA = "0xA69AFC", Offset = "0xA69AFC", VA = "0xA69AFC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000ADC")]
		[Address(RVA = "0x10E8B20", Offset = "0x10E8B20", VA = "0x10E8B20")]
		public static bool operator ==(HServerListRequest x, HServerListRequest y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ADD")]
		[Address(RVA = "0x10E8B30", Offset = "0x10E8B30", VA = "0x10E8B30")]
		public static bool operator !=(HServerListRequest x, HServerListRequest y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ADE")]
		[Address(RVA = "0x10E8BB4", Offset = "0x10E8BB4", VA = "0x10E8BB4")]
		public static explicit operator HServerListRequest(IntPtr value)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000ADF")]
		[Address(RVA = "0x10E8BB8", Offset = "0x10E8BB8", VA = "0x10E8BB8")]
		public static explicit operator IntPtr(HServerListRequest that)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000AE0")]
		[Address(RVA = "0xA69B08", Offset = "0xA69B08", VA = "0xA69B08", Slot = "4")]
		public bool Equals(HServerListRequest other)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001BA")]
	public struct HServerQuery : IEquatable<HServerQuery>, IComparable<HServerQuery>
	{
		[Token(Token = "0x4000A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HServerQuery Invalid;

		[Token(Token = "0x4000A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_HServerQuery;

		[Token(Token = "0x6000AE2")]
		[Address(RVA = "0xA69B14", Offset = "0xA69B14", VA = "0xA69B14")]
		public HServerQuery(int value)
		{
		}

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0xA69B1C", Offset = "0xA69B1C", VA = "0xA69B1C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000AE4")]
		[Address(RVA = "0xA69B28", Offset = "0xA69B28", VA = "0xA69B28", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0xA69B30", Offset = "0xA69B30", VA = "0xA69B30", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000AE6")]
		[Address(RVA = "0x10E8CCC", Offset = "0x10E8CCC", VA = "0x10E8CCC")]
		public static bool operator ==(HServerQuery x, HServerQuery y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE7")]
		[Address(RVA = "0x10E8CE0", Offset = "0x10E8CE0", VA = "0x10E8CE0")]
		public static bool operator !=(HServerQuery x, HServerQuery y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE8")]
		[Address(RVA = "0x10E8D54", Offset = "0x10E8D54", VA = "0x10E8D54")]
		public static explicit operator HServerQuery(int value)
		{
			return default(HServerQuery);
		}

		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0x10E8D5C", Offset = "0x10E8D5C", VA = "0x10E8D5C")]
		public static explicit operator int(HServerQuery that)
		{
			return default(int);
		}

		[Token(Token = "0x6000AEA")]
		[Address(RVA = "0xA69B3C", Offset = "0xA69B3C", VA = "0xA69B3C", Slot = "4")]
		public bool Equals(HServerQuery other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AEB")]
		[Address(RVA = "0xA69B4C", Offset = "0xA69B4C", VA = "0xA69B4C", Slot = "5")]
		public int CompareTo(HServerQuery other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001BB")]
	public struct SNetListenSocket_t : IEquatable<SNetListenSocket_t>, IComparable<SNetListenSocket_t>
	{
		[Token(Token = "0x4000A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_SNetListenSocket;

		[Token(Token = "0x6000AED")]
		[Address(RVA = "0xA81B24", Offset = "0xA81B24", VA = "0xA81B24")]
		public SNetListenSocket_t(uint value)
		{
		}

		[Token(Token = "0x6000AEE")]
		[Address(RVA = "0xA81B2C", Offset = "0xA81B2C", VA = "0xA81B2C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000AEF")]
		[Address(RVA = "0xA81B38", Offset = "0xA81B38", VA = "0xA81B38", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AF0")]
		[Address(RVA = "0xA81B40", Offset = "0xA81B40", VA = "0xA81B40", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000AF1")]
		[Address(RVA = "0x1AB46BC", Offset = "0x1AB46BC", VA = "0x1AB46BC")]
		public static bool operator ==(SNetListenSocket_t x, SNetListenSocket_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AF2")]
		[Address(RVA = "0x1AB46D0", Offset = "0x1AB46D0", VA = "0x1AB46D0")]
		public static bool operator !=(SNetListenSocket_t x, SNetListenSocket_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AF3")]
		[Address(RVA = "0x1AB46DC", Offset = "0x1AB46DC", VA = "0x1AB46DC")]
		public static explicit operator SNetListenSocket_t(uint value)
		{
			return default(SNetListenSocket_t);
		}

		[Token(Token = "0x6000AF4")]
		[Address(RVA = "0x1AB46E4", Offset = "0x1AB46E4", VA = "0x1AB46E4")]
		public static explicit operator uint(SNetListenSocket_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AF5")]
		[Address(RVA = "0xA81B4C", Offset = "0xA81B4C", VA = "0xA81B4C", Slot = "4")]
		public bool Equals(SNetListenSocket_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AF6")]
		[Address(RVA = "0xA81B5C", Offset = "0xA81B5C", VA = "0xA81B5C", Slot = "5")]
		public int CompareTo(SNetListenSocket_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001BC")]
	public struct SNetSocket_t : IEquatable<SNetSocket_t>, IComparable<SNetSocket_t>
	{
		[Token(Token = "0x4000A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_SNetSocket;

		[Token(Token = "0x6000AF7")]
		[Address(RVA = "0xA81B68", Offset = "0xA81B68", VA = "0xA81B68")]
		public SNetSocket_t(uint value)
		{
		}

		[Token(Token = "0x6000AF8")]
		[Address(RVA = "0xA81B70", Offset = "0xA81B70", VA = "0xA81B70", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000AF9")]
		[Address(RVA = "0xA81B7C", Offset = "0xA81B7C", VA = "0xA81B7C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AFA")]
		[Address(RVA = "0xA81B84", Offset = "0xA81B84", VA = "0xA81B84", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000AFB")]
		[Address(RVA = "0x1AB4798", Offset = "0x1AB4798", VA = "0x1AB4798")]
		public static bool operator ==(SNetSocket_t x, SNetSocket_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AFC")]
		[Address(RVA = "0x1AB47AC", Offset = "0x1AB47AC", VA = "0x1AB47AC")]
		public static bool operator !=(SNetSocket_t x, SNetSocket_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AFD")]
		[Address(RVA = "0x1AB47B8", Offset = "0x1AB47B8", VA = "0x1AB47B8")]
		public static explicit operator SNetSocket_t(uint value)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x6000AFE")]
		[Address(RVA = "0x1AB47C0", Offset = "0x1AB47C0", VA = "0x1AB47C0")]
		public static explicit operator uint(SNetSocket_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AFF")]
		[Address(RVA = "0xA81B90", Offset = "0xA81B90", VA = "0xA81B90", Slot = "4")]
		public bool Equals(SNetSocket_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B00")]
		[Address(RVA = "0xA81BA0", Offset = "0xA81BA0", VA = "0xA81BA0", Slot = "5")]
		public int CompareTo(SNetSocket_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001BD")]
	public struct PublishedFileId_t : IEquatable<PublishedFileId_t>, IComparable<PublishedFileId_t>
	{
		[Token(Token = "0x4000A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly PublishedFileId_t Invalid;

		[Token(Token = "0x4000A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_PublishedFileId;

		[Token(Token = "0x6000B01")]
		[Address(RVA = "0xA80F0C", Offset = "0xA80F0C", VA = "0xA80F0C")]
		public PublishedFileId_t(ulong value)
		{
		}

		[Token(Token = "0x6000B02")]
		[Address(RVA = "0xA80F14", Offset = "0xA80F14", VA = "0xA80F14", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B03")]
		[Address(RVA = "0xA80F20", Offset = "0xA80F20", VA = "0xA80F20", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B04")]
		[Address(RVA = "0xA80F28", Offset = "0xA80F28", VA = "0xA80F28", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0x1AB437C", Offset = "0x1AB437C", VA = "0x1AB437C")]
		public static bool operator ==(PublishedFileId_t x, PublishedFileId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B06")]
		[Address(RVA = "0x1AB4390", Offset = "0x1AB4390", VA = "0x1AB4390")]
		public static bool operator !=(PublishedFileId_t x, PublishedFileId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B07")]
		[Address(RVA = "0x1AB4404", Offset = "0x1AB4404", VA = "0x1AB4404")]
		public static explicit operator PublishedFileId_t(ulong value)
		{
			return default(PublishedFileId_t);
		}

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0x1AB4408", Offset = "0x1AB4408", VA = "0x1AB4408")]
		public static explicit operator ulong(PublishedFileId_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0xA80F34", Offset = "0xA80F34", VA = "0xA80F34", Slot = "4")]
		public bool Equals(PublishedFileId_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0xA80F44", Offset = "0xA80F44", VA = "0xA80F44", Slot = "5")]
		public int CompareTo(PublishedFileId_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001BE")]
	public struct PublishedFileUpdateHandle_t : IEquatable<PublishedFileUpdateHandle_t>, IComparable<PublishedFileUpdateHandle_t>
	{
		[Token(Token = "0x4000A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly PublishedFileUpdateHandle_t Invalid;

		[Token(Token = "0x4000A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_PublishedFileUpdateHandle;

		[Token(Token = "0x6000B0C")]
		[Address(RVA = "0xA80F50", Offset = "0xA80F50", VA = "0xA80F50")]
		public PublishedFileUpdateHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000B0D")]
		[Address(RVA = "0xA80F58", Offset = "0xA80F58", VA = "0xA80F58", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B0E")]
		[Address(RVA = "0xA80F64", Offset = "0xA80F64", VA = "0xA80F64", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B0F")]
		[Address(RVA = "0xA80F6C", Offset = "0xA80F6C", VA = "0xA80F6C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B10")]
		[Address(RVA = "0x1AB4528", Offset = "0x1AB4528", VA = "0x1AB4528")]
		public static bool operator ==(PublishedFileUpdateHandle_t x, PublishedFileUpdateHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B11")]
		[Address(RVA = "0x1AB453C", Offset = "0x1AB453C", VA = "0x1AB453C")]
		public static bool operator !=(PublishedFileUpdateHandle_t x, PublishedFileUpdateHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B12")]
		[Address(RVA = "0x1AB45B0", Offset = "0x1AB45B0", VA = "0x1AB45B0")]
		public static explicit operator PublishedFileUpdateHandle_t(ulong value)
		{
			return default(PublishedFileUpdateHandle_t);
		}

		[Token(Token = "0x6000B13")]
		[Address(RVA = "0x1AB45B4", Offset = "0x1AB45B4", VA = "0x1AB45B4")]
		public static explicit operator ulong(PublishedFileUpdateHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000B14")]
		[Address(RVA = "0xA80F78", Offset = "0xA80F78", VA = "0xA80F78", Slot = "4")]
		public bool Equals(PublishedFileUpdateHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B15")]
		[Address(RVA = "0xA80F88", Offset = "0xA80F88", VA = "0xA80F88", Slot = "5")]
		public int CompareTo(PublishedFileUpdateHandle_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001BF")]
	public struct UGCFileWriteStreamHandle_t : IEquatable<UGCFileWriteStreamHandle_t>, IComparable<UGCFileWriteStreamHandle_t>
	{
		[Token(Token = "0x4000A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly UGCFileWriteStreamHandle_t Invalid;

		[Token(Token = "0x4000A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_UGCFileWriteStreamHandle;

		[Token(Token = "0x6000B17")]
		[Address(RVA = "0xA7F1A0", Offset = "0xA7F1A0", VA = "0xA7F1A0")]
		public UGCFileWriteStreamHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000B18")]
		[Address(RVA = "0xA7F1A8", Offset = "0xA7F1A8", VA = "0xA7F1A8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B19")]
		[Address(RVA = "0xA7F1B4", Offset = "0xA7F1B4", VA = "0xA7F1B4", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B1A")]
		[Address(RVA = "0xA7F1BC", Offset = "0xA7F1BC", VA = "0xA7F1BC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B1B")]
		[Address(RVA = "0x19F49BC", Offset = "0x19F49BC", VA = "0x19F49BC")]
		public static bool operator ==(UGCFileWriteStreamHandle_t x, UGCFileWriteStreamHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B1C")]
		[Address(RVA = "0x19F49D0", Offset = "0x19F49D0", VA = "0x19F49D0")]
		public static bool operator !=(UGCFileWriteStreamHandle_t x, UGCFileWriteStreamHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B1D")]
		[Address(RVA = "0x19F4A44", Offset = "0x19F4A44", VA = "0x19F4A44")]
		public static explicit operator UGCFileWriteStreamHandle_t(ulong value)
		{
			return default(UGCFileWriteStreamHandle_t);
		}

		[Token(Token = "0x6000B1E")]
		[Address(RVA = "0x19F4A48", Offset = "0x19F4A48", VA = "0x19F4A48")]
		public static explicit operator ulong(UGCFileWriteStreamHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000B1F")]
		[Address(RVA = "0xA7F1C8", Offset = "0xA7F1C8", VA = "0xA7F1C8", Slot = "4")]
		public bool Equals(UGCFileWriteStreamHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B20")]
		[Address(RVA = "0xA7F1D8", Offset = "0xA7F1D8", VA = "0xA7F1D8", Slot = "5")]
		public int CompareTo(UGCFileWriteStreamHandle_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001C0")]
	public struct UGCHandle_t : IEquatable<UGCHandle_t>, IComparable<UGCHandle_t>
	{
		[Token(Token = "0x4000A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly UGCHandle_t Invalid;

		[Token(Token = "0x4000A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_UGCHandle;

		[Token(Token = "0x6000B22")]
		[Address(RVA = "0xA7F1E4", Offset = "0xA7F1E4", VA = "0xA7F1E4")]
		public UGCHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000B23")]
		[Address(RVA = "0xA7F1EC", Offset = "0xA7F1EC", VA = "0xA7F1EC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B24")]
		[Address(RVA = "0xA7F1F8", Offset = "0xA7F1F8", VA = "0xA7F1F8", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B25")]
		[Address(RVA = "0xA7F200", Offset = "0xA7F200", VA = "0xA7F200", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B26")]
		[Address(RVA = "0x19F4B6C", Offset = "0x19F4B6C", VA = "0x19F4B6C")]
		public static bool operator ==(UGCHandle_t x, UGCHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B27")]
		[Address(RVA = "0x19F4B80", Offset = "0x19F4B80", VA = "0x19F4B80")]
		public static bool operator !=(UGCHandle_t x, UGCHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B28")]
		[Address(RVA = "0x19F4BF4", Offset = "0x19F4BF4", VA = "0x19F4BF4")]
		public static explicit operator UGCHandle_t(ulong value)
		{
			return default(UGCHandle_t);
		}

		[Token(Token = "0x6000B29")]
		[Address(RVA = "0x19F4BF8", Offset = "0x19F4BF8", VA = "0x19F4BF8")]
		public static explicit operator ulong(UGCHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000B2A")]
		[Address(RVA = "0xA7F20C", Offset = "0xA7F20C", VA = "0xA7F20C", Slot = "4")]
		public bool Equals(UGCHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0xA7F21C", Offset = "0xA7F21C", VA = "0xA7F21C", Slot = "5")]
		public int CompareTo(UGCHandle_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001C1")]
	public struct ScreenshotHandle : IEquatable<ScreenshotHandle>, IComparable<ScreenshotHandle>
	{
		[Token(Token = "0x4000A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ScreenshotHandle Invalid;

		[Token(Token = "0x4000A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_ScreenshotHandle;

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0xA81BAC", Offset = "0xA81BAC", VA = "0xA81BAC")]
		public ScreenshotHandle(uint value)
		{
		}

		[Token(Token = "0x6000B2E")]
		[Address(RVA = "0xA81BB4", Offset = "0xA81BB4", VA = "0xA81BB4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B2F")]
		[Address(RVA = "0xA81BC0", Offset = "0xA81BC0", VA = "0xA81BC0", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B30")]
		[Address(RVA = "0xA81BC8", Offset = "0xA81BC8", VA = "0xA81BC8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B31")]
		[Address(RVA = "0x1AB4890", Offset = "0x1AB4890", VA = "0x1AB4890")]
		public static bool operator ==(ScreenshotHandle x, ScreenshotHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B32")]
		[Address(RVA = "0x1AB48A4", Offset = "0x1AB48A4", VA = "0x1AB48A4")]
		public static bool operator !=(ScreenshotHandle x, ScreenshotHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B33")]
		[Address(RVA = "0x1AB4918", Offset = "0x1AB4918", VA = "0x1AB4918")]
		public static explicit operator ScreenshotHandle(uint value)
		{
			return default(ScreenshotHandle);
		}

		[Token(Token = "0x6000B34")]
		[Address(RVA = "0x1AB4920", Offset = "0x1AB4920", VA = "0x1AB4920")]
		public static explicit operator uint(ScreenshotHandle that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B35")]
		[Address(RVA = "0xA81BD4", Offset = "0xA81BD4", VA = "0xA81BD4", Slot = "4")]
		public bool Equals(ScreenshotHandle other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B36")]
		[Address(RVA = "0xA81BE4", Offset = "0xA81BE4", VA = "0xA81BE4", Slot = "5")]
		public int CompareTo(ScreenshotHandle other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001C2")]
	public struct AccountID_t : IEquatable<AccountID_t>, IComparable<AccountID_t>
	{
		[Token(Token = "0x4000A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_AccountID;

		[Token(Token = "0x6000B38")]
		[Address(RVA = "0xA78608", Offset = "0xA78608", VA = "0xA78608")]
		public AccountID_t(uint value)
		{
		}

		[Token(Token = "0x6000B39")]
		[Address(RVA = "0xA78610", Offset = "0xA78610", VA = "0xA78610", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B3A")]
		[Address(RVA = "0xA7861C", Offset = "0xA7861C", VA = "0xA7861C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B3B")]
		[Address(RVA = "0xA78624", Offset = "0xA78624", VA = "0xA78624", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B3C")]
		[Address(RVA = "0x16CEFAC", Offset = "0x16CEFAC", VA = "0x16CEFAC")]
		public static bool operator ==(AccountID_t x, AccountID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B3D")]
		[Address(RVA = "0x16CEFC0", Offset = "0x16CEFC0", VA = "0x16CEFC0")]
		public static bool operator !=(AccountID_t x, AccountID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B3E")]
		[Address(RVA = "0x16CEFCC", Offset = "0x16CEFCC", VA = "0x16CEFCC")]
		public static explicit operator AccountID_t(uint value)
		{
			return default(AccountID_t);
		}

		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0x16CEFD4", Offset = "0x16CEFD4", VA = "0x16CEFD4")]
		public static explicit operator uint(AccountID_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B40")]
		[Address(RVA = "0xA78630", Offset = "0xA78630", VA = "0xA78630", Slot = "4")]
		public bool Equals(AccountID_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B41")]
		[Address(RVA = "0xA78640", Offset = "0xA78640", VA = "0xA78640", Slot = "5")]
		public int CompareTo(AccountID_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001C3")]
	public struct AppId_t : IEquatable<AppId_t>, IComparable<AppId_t>
	{
		[Token(Token = "0x4000A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly AppId_t Invalid;

		[Token(Token = "0x4000A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_AppId;

		[Token(Token = "0x6000B42")]
		[Address(RVA = "0xA7864C", Offset = "0xA7864C", VA = "0xA7864C")]
		public AppId_t(uint value)
		{
		}

		[Token(Token = "0x6000B43")]
		[Address(RVA = "0xA78654", Offset = "0xA78654", VA = "0xA78654", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B44")]
		[Address(RVA = "0xA78660", Offset = "0xA78660", VA = "0xA78660", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B45")]
		[Address(RVA = "0xA78668", Offset = "0xA78668", VA = "0xA78668", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B46")]
		[Address(RVA = "0x16CF0A4", Offset = "0x16CF0A4", VA = "0x16CF0A4")]
		public static bool operator ==(AppId_t x, AppId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B47")]
		[Address(RVA = "0x16CF0B8", Offset = "0x16CF0B8", VA = "0x16CF0B8")]
		public static bool operator !=(AppId_t x, AppId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B48")]
		[Address(RVA = "0x16CF12C", Offset = "0x16CF12C", VA = "0x16CF12C")]
		public static explicit operator AppId_t(uint value)
		{
			return default(AppId_t);
		}

		[Token(Token = "0x6000B49")]
		[Address(RVA = "0x16CF134", Offset = "0x16CF134", VA = "0x16CF134")]
		public static explicit operator uint(AppId_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B4A")]
		[Address(RVA = "0xA78674", Offset = "0xA78674", VA = "0xA78674", Slot = "4")]
		public bool Equals(AppId_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B4B")]
		[Address(RVA = "0xA78684", Offset = "0xA78684", VA = "0xA78684", Slot = "5")]
		public int CompareTo(AppId_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001C4")]
	public struct DepotId_t : IEquatable<DepotId_t>, IComparable<DepotId_t>
	{
		[Token(Token = "0x4000A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly DepotId_t Invalid;

		[Token(Token = "0x4000A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_DepotId;

		[Token(Token = "0x6000B4D")]
		[Address(RVA = "0xA69674", Offset = "0xA69674", VA = "0xA69674")]
		public DepotId_t(uint value)
		{
		}

		[Token(Token = "0x6000B4E")]
		[Address(RVA = "0xA6967C", Offset = "0xA6967C", VA = "0xA6967C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B4F")]
		[Address(RVA = "0xA69688", Offset = "0xA69688", VA = "0xA69688", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B50")]
		[Address(RVA = "0xA69690", Offset = "0xA69690", VA = "0xA69690", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B51")]
		[Address(RVA = "0x10E7B40", Offset = "0x10E7B40", VA = "0x10E7B40")]
		public static bool operator ==(DepotId_t x, DepotId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B52")]
		[Address(RVA = "0x10E7B54", Offset = "0x10E7B54", VA = "0x10E7B54")]
		public static bool operator !=(DepotId_t x, DepotId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B53")]
		[Address(RVA = "0x10E7BC8", Offset = "0x10E7BC8", VA = "0x10E7BC8")]
		public static explicit operator DepotId_t(uint value)
		{
			return default(DepotId_t);
		}

		[Token(Token = "0x6000B54")]
		[Address(RVA = "0x10E7BD0", Offset = "0x10E7BD0", VA = "0x10E7BD0")]
		public static explicit operator uint(DepotId_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B55")]
		[Address(RVA = "0xA6969C", Offset = "0xA6969C", VA = "0xA6969C", Slot = "4")]
		public bool Equals(DepotId_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B56")]
		[Address(RVA = "0xA696AC", Offset = "0xA696AC", VA = "0xA696AC", Slot = "5")]
		public int CompareTo(DepotId_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001C5")]
	public struct ManifestId_t : IEquatable<ManifestId_t>, IComparable<ManifestId_t>
	{
		[Token(Token = "0x4000A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ManifestId_t Invalid;

		[Token(Token = "0x4000A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ManifestId;

		[Token(Token = "0x6000B58")]
		[Address(RVA = "0xA6AB64", Offset = "0xA6AB64", VA = "0xA6AB64")]
		public ManifestId_t(ulong value)
		{
		}

		[Token(Token = "0x6000B59")]
		[Address(RVA = "0xA6AB6C", Offset = "0xA6AB6C", VA = "0xA6AB6C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B5A")]
		[Address(RVA = "0xA6AB78", Offset = "0xA6AB78", VA = "0xA6AB78", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B5B")]
		[Address(RVA = "0xA6AB80", Offset = "0xA6AB80", VA = "0xA6AB80", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B5C")]
		[Address(RVA = "0x10F2838", Offset = "0x10F2838", VA = "0x10F2838")]
		public static bool operator ==(ManifestId_t x, ManifestId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B5D")]
		[Address(RVA = "0x10F284C", Offset = "0x10F284C", VA = "0x10F284C")]
		public static bool operator !=(ManifestId_t x, ManifestId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B5E")]
		[Address(RVA = "0x10F28C0", Offset = "0x10F28C0", VA = "0x10F28C0")]
		public static explicit operator ManifestId_t(ulong value)
		{
			return default(ManifestId_t);
		}

		[Token(Token = "0x6000B5F")]
		[Address(RVA = "0x10F28C4", Offset = "0x10F28C4", VA = "0x10F28C4")]
		public static explicit operator ulong(ManifestId_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000B60")]
		[Address(RVA = "0xA6AB8C", Offset = "0xA6AB8C", VA = "0xA6AB8C", Slot = "4")]
		public bool Equals(ManifestId_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B61")]
		[Address(RVA = "0xA6AB9C", Offset = "0xA6AB9C", VA = "0xA6AB9C", Slot = "5")]
		public int CompareTo(ManifestId_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001C6")]
	public struct SteamAPICall_t : IEquatable<SteamAPICall_t>, IComparable<SteamAPICall_t>
	{
		[Token(Token = "0x4000A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly SteamAPICall_t Invalid;

		[Token(Token = "0x4000A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamAPICall;

		[Token(Token = "0x6000B63")]
		[Address(RVA = "0xA81BF0", Offset = "0xA81BF0", VA = "0xA81BF0")]
		public SteamAPICall_t(ulong value)
		{
		}

		[Token(Token = "0x6000B64")]
		[Address(RVA = "0xA81BF8", Offset = "0xA81BF8", VA = "0xA81BF8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B65")]
		[Address(RVA = "0xA81C04", Offset = "0xA81C04", VA = "0xA81C04", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B66")]
		[Address(RVA = "0xA81C0C", Offset = "0xA81C0C", VA = "0xA81C0C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B67")]
		[Address(RVA = "0x1AB4B7C", Offset = "0x1AB4B7C", VA = "0x1AB4B7C")]
		public static bool operator ==(SteamAPICall_t x, SteamAPICall_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B68")]
		[Address(RVA = "0x1AB4B90", Offset = "0x1AB4B90", VA = "0x1AB4B90")]
		public static bool operator !=(SteamAPICall_t x, SteamAPICall_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B69")]
		[Address(RVA = "0x1AB4C04", Offset = "0x1AB4C04", VA = "0x1AB4C04")]
		public static explicit operator SteamAPICall_t(ulong value)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000B6A")]
		[Address(RVA = "0x1AB4C08", Offset = "0x1AB4C08", VA = "0x1AB4C08")]
		public static explicit operator ulong(SteamAPICall_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000B6B")]
		[Address(RVA = "0xA81C18", Offset = "0xA81C18", VA = "0xA81C18", Slot = "4")]
		public bool Equals(SteamAPICall_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B6C")]
		[Address(RVA = "0xA81C28", Offset = "0xA81C28", VA = "0xA81C28", Slot = "5")]
		public int CompareTo(SteamAPICall_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001C7")]
	public struct UGCQueryHandle_t : IEquatable<UGCQueryHandle_t>, IComparable<UGCQueryHandle_t>
	{
		[Token(Token = "0x4000A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly UGCQueryHandle_t Invalid;

		[Token(Token = "0x4000A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_UGCQueryHandle;

		[Token(Token = "0x6000B6E")]
		[Address(RVA = "0xA7F228", Offset = "0xA7F228", VA = "0xA7F228")]
		public UGCQueryHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000B6F")]
		[Address(RVA = "0xA7F230", Offset = "0xA7F230", VA = "0xA7F230", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B70")]
		[Address(RVA = "0xA7F23C", Offset = "0xA7F23C", VA = "0xA7F23C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0xA7F244", Offset = "0xA7F244", VA = "0xA7F244", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B72")]
		[Address(RVA = "0x19F4D1C", Offset = "0x19F4D1C", VA = "0x19F4D1C")]
		public static bool operator ==(UGCQueryHandle_t x, UGCQueryHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B73")]
		[Address(RVA = "0x19F4D30", Offset = "0x19F4D30", VA = "0x19F4D30")]
		public static bool operator !=(UGCQueryHandle_t x, UGCQueryHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B74")]
		[Address(RVA = "0x19EE7EC", Offset = "0x19EE7EC", VA = "0x19EE7EC")]
		public static explicit operator UGCQueryHandle_t(ulong value)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6000B75")]
		[Address(RVA = "0x19F4DA4", Offset = "0x19F4DA4", VA = "0x19F4DA4")]
		public static explicit operator ulong(UGCQueryHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000B76")]
		[Address(RVA = "0xA7F250", Offset = "0xA7F250", VA = "0xA7F250", Slot = "4")]
		public bool Equals(UGCQueryHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B77")]
		[Address(RVA = "0xA7F260", Offset = "0xA7F260", VA = "0xA7F260", Slot = "5")]
		public int CompareTo(UGCQueryHandle_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001C8")]
	public struct UGCUpdateHandle_t : IEquatable<UGCUpdateHandle_t>, IComparable<UGCUpdateHandle_t>
	{
		[Token(Token = "0x4000A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly UGCUpdateHandle_t Invalid;

		[Token(Token = "0x4000A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_UGCUpdateHandle;

		[Token(Token = "0x6000B79")]
		[Address(RVA = "0xA7F26C", Offset = "0xA7F26C", VA = "0xA7F26C")]
		public UGCUpdateHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0xA7F274", Offset = "0xA7F274", VA = "0xA7F274", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0xA7F280", Offset = "0xA7F280", VA = "0xA7F280", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0xA7F288", Offset = "0xA7F288", VA = "0xA7F288", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0x19F4EC8", Offset = "0x19F4EC8", VA = "0x19F4EC8")]
		public static bool operator ==(UGCUpdateHandle_t x, UGCUpdateHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B7E")]
		[Address(RVA = "0x19F4EDC", Offset = "0x19F4EDC", VA = "0x19F4EDC")]
		public static bool operator !=(UGCUpdateHandle_t x, UGCUpdateHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B7F")]
		[Address(RVA = "0x19EFB44", Offset = "0x19EFB44", VA = "0x19EFB44")]
		public static explicit operator UGCUpdateHandle_t(ulong value)
		{
			return default(UGCUpdateHandle_t);
		}

		[Token(Token = "0x6000B80")]
		[Address(RVA = "0x19F4F50", Offset = "0x19F4F50", VA = "0x19F4F50")]
		public static explicit operator ulong(UGCUpdateHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000B81")]
		[Address(RVA = "0xA7F294", Offset = "0xA7F294", VA = "0xA7F294", Slot = "4")]
		public bool Equals(UGCUpdateHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B82")]
		[Address(RVA = "0xA7F2A4", Offset = "0xA7F2A4", VA = "0xA7F2A4", Slot = "5")]
		public int CompareTo(UGCUpdateHandle_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001C9")]
	public struct ClientUnifiedMessageHandle : IEquatable<ClientUnifiedMessageHandle>, IComparable<ClientUnifiedMessageHandle>
	{
		[Token(Token = "0x4000A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ClientUnifiedMessageHandle Invalid;

		[Token(Token = "0x4000A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ClientUnifiedMessageHandle;

		[Token(Token = "0x6000B84")]
		[Address(RVA = "0xA69630", Offset = "0xA69630", VA = "0xA69630")]
		public ClientUnifiedMessageHandle(ulong value)
		{
		}

		[Token(Token = "0x6000B85")]
		[Address(RVA = "0xA69638", Offset = "0xA69638", VA = "0xA69638", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B86")]
		[Address(RVA = "0xA69644", Offset = "0xA69644", VA = "0xA69644", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B87")]
		[Address(RVA = "0xA6964C", Offset = "0xA6964C", VA = "0xA6964C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B88")]
		[Address(RVA = "0x10E7994", Offset = "0x10E7994", VA = "0x10E7994")]
		public static bool operator ==(ClientUnifiedMessageHandle x, ClientUnifiedMessageHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B89")]
		[Address(RVA = "0x10E79A8", Offset = "0x10E79A8", VA = "0x10E79A8")]
		public static bool operator !=(ClientUnifiedMessageHandle x, ClientUnifiedMessageHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8A")]
		[Address(RVA = "0x10E7A1C", Offset = "0x10E7A1C", VA = "0x10E7A1C")]
		public static explicit operator ClientUnifiedMessageHandle(ulong value)
		{
			return default(ClientUnifiedMessageHandle);
		}

		[Token(Token = "0x6000B8B")]
		[Address(RVA = "0x10E7A20", Offset = "0x10E7A20", VA = "0x10E7A20")]
		public static explicit operator ulong(ClientUnifiedMessageHandle that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000B8C")]
		[Address(RVA = "0xA69658", Offset = "0xA69658", VA = "0xA69658", Slot = "4")]
		public bool Equals(ClientUnifiedMessageHandle other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8D")]
		[Address(RVA = "0xA69668", Offset = "0xA69668", VA = "0xA69668", Slot = "5")]
		public int CompareTo(ClientUnifiedMessageHandle other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001CA")]
	public struct SteamLeaderboard_t : IEquatable<SteamLeaderboard_t>, IComparable<SteamLeaderboard_t>
	{
		[Token(Token = "0x4000A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamLeaderboard;

		[Token(Token = "0x6000B8F")]
		[Address(RVA = "0xA81DC8", Offset = "0xA81DC8", VA = "0xA81DC8")]
		public SteamLeaderboard_t(ulong value)
		{
		}

		[Token(Token = "0x6000B90")]
		[Address(RVA = "0xA81DD0", Offset = "0xA81DD0", VA = "0xA81DD0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B91")]
		[Address(RVA = "0xA81DDC", Offset = "0xA81DDC", VA = "0xA81DDC", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B92")]
		[Address(RVA = "0xA81DE4", Offset = "0xA81DE4", VA = "0xA81DE4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B93")]
		[Address(RVA = "0x1AC4988", Offset = "0x1AC4988", VA = "0x1AC4988")]
		public static bool operator ==(SteamLeaderboard_t x, SteamLeaderboard_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B94")]
		[Address(RVA = "0x1AC499C", Offset = "0x1AC499C", VA = "0x1AC499C")]
		public static bool operator !=(SteamLeaderboard_t x, SteamLeaderboard_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B95")]
		[Address(RVA = "0x1AC49A8", Offset = "0x1AC49A8", VA = "0x1AC49A8")]
		public static explicit operator SteamLeaderboard_t(ulong value)
		{
			return default(SteamLeaderboard_t);
		}

		[Token(Token = "0x6000B96")]
		[Address(RVA = "0x1AC49AC", Offset = "0x1AC49AC", VA = "0x1AC49AC")]
		public static explicit operator ulong(SteamLeaderboard_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000B97")]
		[Address(RVA = "0xA81DF0", Offset = "0xA81DF0", VA = "0xA81DF0", Slot = "4")]
		public bool Equals(SteamLeaderboard_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B98")]
		[Address(RVA = "0xA81E00", Offset = "0xA81E00", VA = "0xA81E00", Slot = "5")]
		public int CompareTo(SteamLeaderboard_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001CB")]
	public struct SteamLeaderboardEntries_t : IEquatable<SteamLeaderboardEntries_t>, IComparable<SteamLeaderboardEntries_t>
	{
		[Token(Token = "0x4000A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamLeaderboardEntries;

		[Token(Token = "0x6000B99")]
		[Address(RVA = "0xA81D84", Offset = "0xA81D84", VA = "0xA81D84")]
		public SteamLeaderboardEntries_t(ulong value)
		{
		}

		[Token(Token = "0x6000B9A")]
		[Address(RVA = "0xA81D8C", Offset = "0xA81D8C", VA = "0xA81D8C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B9B")]
		[Address(RVA = "0xA81D98", Offset = "0xA81D98", VA = "0xA81D98", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B9C")]
		[Address(RVA = "0xA81DA0", Offset = "0xA81DA0", VA = "0xA81DA0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B9D")]
		[Address(RVA = "0x1AC48B0", Offset = "0x1AC48B0", VA = "0x1AC48B0")]
		public static bool operator ==(SteamLeaderboardEntries_t x, SteamLeaderboardEntries_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B9E")]
		[Address(RVA = "0x1AC48C4", Offset = "0x1AC48C4", VA = "0x1AC48C4")]
		public static bool operator !=(SteamLeaderboardEntries_t x, SteamLeaderboardEntries_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B9F")]
		[Address(RVA = "0x1AC48D0", Offset = "0x1AC48D0", VA = "0x1AC48D0")]
		public static explicit operator SteamLeaderboardEntries_t(ulong value)
		{
			return default(SteamLeaderboardEntries_t);
		}

		[Token(Token = "0x6000BA0")]
		[Address(RVA = "0x1AC48D4", Offset = "0x1AC48D4", VA = "0x1AC48D4")]
		public static explicit operator ulong(SteamLeaderboardEntries_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000BA1")]
		[Address(RVA = "0xA81DAC", Offset = "0xA81DAC", VA = "0xA81DAC", Slot = "4")]
		public bool Equals(SteamLeaderboardEntries_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BA2")]
		[Address(RVA = "0xA81DBC", Offset = "0xA81DBC", VA = "0xA81DBC", Slot = "5")]
		public int CompareTo(SteamLeaderboardEntries_t other)
		{
			return default(int);
		}
	}
}
namespace MP
{
	[Token(Token = "0x20001CC")]
	public class AtomicBinaryReader
	{
		[Token(Token = "0x4000A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly object locker;

		[Token(Token = "0x4000A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BinaryReader reader;

		[Token(Token = "0x1700007C")]
		public long StreamLength
		{
			[Token(Token = "0x6000BA6")]
			[Address(RVA = "0x15D175C", Offset = "0x15D175C", VA = "0x15D175C")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x6000BA3")]
		[Address(RVA = "0x15CB7D0", Offset = "0x15CB7D0", VA = "0x15CB7D0")]
		public AtomicBinaryReader(Stream stream)
		{
		}

		[Token(Token = "0x6000BA4")]
		[Address(RVA = "0x15D16A0", Offset = "0x15D16A0", VA = "0x15D16A0")]
		public AtomicBinaryReader(Stream stream, Encoding encoding)
		{
		}

		[Token(Token = "0x6000BA5")]
		[Address(RVA = "0x15D1744", Offset = "0x15D1744", VA = "0x15D1744")]
		public void Close()
		{
		}

		[Token(Token = "0x6000BA7")]
		[Address(RVA = "0x15D17AC", Offset = "0x15D17AC", VA = "0x15D17AC")]
		public long BytesLeft(long offset)
		{
			return default(long);
		}

		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0x15CC39C", Offset = "0x15CC39C", VA = "0x15CC39C")]
		public int Read(ref long offset, byte[] buffer, int index, int count)
		{
			return default(int);
		}

		[Token(Token = "0x6000BA9")]
		[Address(RVA = "0x15CD808", Offset = "0x15CD808", VA = "0x15CD808")]
		public int Read(ref long offset, uint[] buffer, int index, int count)
		{
			return default(int);
		}

		[Token(Token = "0x6000BAA")]
		[Address(RVA = "0x15CDE64", Offset = "0x15CDE64", VA = "0x15CDE64")]
		public byte ReadByte(ref long offset)
		{
			return default(byte);
		}

		[Token(Token = "0x6000BAB")]
		[Address(RVA = "0x15D1808", Offset = "0x15D1808", VA = "0x15D1808")]
		public sbyte ReadSByte(ref long offset)
		{
			return default(sbyte);
		}

		[Token(Token = "0x6000BAC")]
		[Address(RVA = "0x15CD07C", Offset = "0x15CD07C", VA = "0x15CD07C")]
		public short ReadInt16(ref long offset)
		{
			return default(short);
		}

		[Token(Token = "0x6000BAD")]
		[Address(RVA = "0x15CCF14", Offset = "0x15CCF14", VA = "0x15CCF14")]
		public ushort ReadUInt16(ref long offset)
		{
			return default(ushort);
		}

		[Token(Token = "0x6000BAE")]
		[Address(RVA = "0x15CD408", Offset = "0x15CD408", VA = "0x15CD408")]
		public int ReadInt32(ref long offset)
		{
			return default(int);
		}

		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0x15CCA9C", Offset = "0x15CCA9C", VA = "0x15CCA9C")]
		public uint ReadUInt32(ref long offset)
		{
			return default(uint);
		}

		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0x15CDFC8", Offset = "0x15CDFC8", VA = "0x15CDFC8")]
		public long ReadInt64(ref long offset)
		{
			return default(long);
		}

		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0x15D196C", Offset = "0x15D196C", VA = "0x15D196C")]
		public ulong ReadUInt64(ref long offset)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0x15D1AD4", Offset = "0x15D1AD4", VA = "0x15D1AD4")]
		public byte[] ReadBytes(ref long offset, int count)
		{
			return null;
		}
	}
	[Token(Token = "0x20001CD")]
	public abstract class AudioDecoder
	{
		[Token(Token = "0x1700007D")]
		public abstract int Position
		{
			[Token(Token = "0x6000BB6")]
			get;
			[Token(Token = "0x6000BB7")]
			set;
		}

		[Token(Token = "0x1700007E")]
		public abstract float totalDecodeTime
		{
			[Token(Token = "0x6000BB9")]
			get;
		}

		[Token(Token = "0x6000BB3")]
		[Address(RVA = "0x15D1C4C", Offset = "0x15D1C4C", VA = "0x15D1C4C")]
		public static AudioDecoder CreateFor(AudioStreamInfo streamInfo)
		{
			return null;
		}

		[Token(Token = "0x6000BB4")]
		public abstract void Init(out AudioClip audioClip, Demux demux, [Optional] LoadOptions loadOptions);

		[Token(Token = "0x6000BB5")]
		public abstract void Shutdown();

		[Token(Token = "0x6000BB8")]
		public abstract void DecodeNext(float[] data, int sampleCount);

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0x15D2020", Offset = "0x15D2020", VA = "0x15D2020")]
		protected AudioDecoder()
		{
		}
	}
	[Token(Token = "0x20001CE")]
	public class AudioStreamInfo
	{
		[Token(Token = "0x4000A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint codecFourCC;

		[Token(Token = "0x4000A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint audioFormat;

		[Token(Token = "0x4000A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int sampleCount;

		[Token(Token = "0x4000A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int sampleSize;

		[Token(Token = "0x4000A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int channels;

		[Token(Token = "0x4000A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int sampleRate;

		[Token(Token = "0x4000A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public long lengthBytes;

		[Token(Token = "0x1700007F")]
		public float lengthSeconds
		{
			[Token(Token = "0x6000BBB")]
			[Address(RVA = "0x15D2028", Offset = "0x15D2028", VA = "0x15D2028")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000BBC")]
		[Address(RVA = "0x15CBC2C", Offset = "0x15CBC2C", VA = "0x15CBC2C")]
		public AudioStreamInfo()
		{
		}

		[Token(Token = "0x6000BBD")]
		[Address(RVA = "0x15D2040", Offset = "0x15D2040", VA = "0x15D2040")]
		public AudioStreamInfo(AudioStreamInfo ai)
		{
		}
	}
	[Token(Token = "0x20001CF")]
	public abstract class Demux
	{
		[Token(Token = "0x4000A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7C10", Offset = "0x9A7C10")]
		private VideoStreamInfo <videoStreamInfo>k__BackingField;

		[Token(Token = "0x4000A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7C20", Offset = "0x9A7C20")]
		private AudioStreamInfo <audioStreamInfo>k__BackingField;

		[Token(Token = "0x17000080")]
		public VideoStreamInfo videoStreamInfo
		{
			[Token(Token = "0x6000BC1")]
			[Address(RVA = "0x15CBC24", Offset = "0x15CBC24", VA = "0x15CBC24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A90B8", Offset = "0x9A90B8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BC2")]
			[Address(RVA = "0x15CBC1C", Offset = "0x15CBC1C", VA = "0x15CBC1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A90C8", Offset = "0x9A90C8")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000081")]
		public AudioStreamInfo audioStreamInfo
		{
			[Token(Token = "0x6000BC3")]
			[Address(RVA = "0x15CBC3C", Offset = "0x15CBC3C", VA = "0x15CBC3C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A90D8", Offset = "0x9A90D8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BC4")]
			[Address(RVA = "0x15CBC34", Offset = "0x15CBC34", VA = "0x15CBC34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A90E8", Offset = "0x9A90E8")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000082")]
		public bool hasVideo
		{
			[Token(Token = "0x6000BC5")]
			[Address(RVA = "0x15CBC44", Offset = "0x15CBC44", VA = "0x15CBC44")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000083")]
		public bool hasAudio
		{
			[Token(Token = "0x6000BC6")]
			[Address(RVA = "0x15CC068", Offset = "0x15CC068", VA = "0x15CC068")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000084")]
		public abstract int VideoPosition
		{
			[Token(Token = "0x6000BC7")]
			get;
			[Token(Token = "0x6000BC8")]
			set;
		}

		[Token(Token = "0x17000085")]
		public abstract int AudioPosition
		{
			[Token(Token = "0x6000BCA")]
			get;
			[Token(Token = "0x6000BCB")]
			set;
		}

		[Token(Token = "0x6000BBE")]
		[Address(RVA = "0x15D4004", Offset = "0x15D4004", VA = "0x15D4004")]
		public static Demux forSource(Stream sourceStream)
		{
			return null;
		}

		[Token(Token = "0x6000BBF")]
		public abstract void Init(Stream sourceStream, [Optional] LoadOptions loadOptions);

		[Token(Token = "0x6000BC0")]
		public abstract void Shutdown(bool force = false);

		[Token(Token = "0x6000BC9")]
		public abstract int ReadVideoFrame(out byte[] targetBuf);

		[Token(Token = "0x6000BCC")]
		public abstract int ReadAudioSamples(out byte[] targetBuf, int sampleCount);

		[Token(Token = "0x6000BCD")]
		[Address(RVA = "0x15CEF20", Offset = "0x15CEF20", VA = "0x15CEF20")]
		protected Demux()
		{
		}
	}
	[Token(Token = "0x20001D0")]
	public class DuplicateFrameFinder
	{
		[Token(Token = "0x20002FC")]
		public class Options
		{
			[Token(Token = "0x4000E8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float maxImageDiff;

			[Token(Token = "0x4000E8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int maxPixelDiff;

			[Token(Token = "0x4000E8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int maxLookbackFrames;

			[Token(Token = "0x4000E90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int toneCompareDistrust;

			[Token(Token = "0x4000E91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int pixelCacheSize;

			[Token(Token = "0x4000E92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public bool otherStreamsAvailable;

			[Token(Token = "0x17000242")]
			public static Options Default
			{
				[Token(Token = "0x60015AF")]
				[Address(RVA = "0x15D4410", Offset = "0x15D4410", VA = "0x15D4410")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60015B0")]
			[Address(RVA = "0x15D4E80", Offset = "0x15D4E80", VA = "0x15D4E80")]
			public Options()
			{
			}
		}

		[Token(Token = "0x20002FD")]
		public struct Stats
		{
			[Token(Token = "0x4000E93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public long totalFramesCompared;

			[Token(Token = "0x4000E94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public long framesPartiallyCompared;

			[Token(Token = "0x4000E95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public long framesFullyCompared;

			[Token(Token = "0x4000E96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public long pixelCacheQueries;

			[Token(Token = "0x4000E97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public long pixelCacheHits;

			[Token(Token = "0x4000E98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int duplicateCount;

			[Token(Token = "0x17000243")]
			public float framesPartiallyComparedPercent
			{
				[Token(Token = "0x60015B1")]
				[Address(RVA = "0xA75DA0", Offset = "0xA75DA0", VA = "0xA75DA0")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000244")]
			public float framesFullyComparedPercent
			{
				[Token(Token = "0x60015B2")]
				[Address(RVA = "0xA75DC0", Offset = "0xA75DC0", VA = "0xA75DC0")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000245")]
			public float pixelCacheHitPercent
			{
				[Token(Token = "0x60015B3")]
				[Address(RVA = "0xA75DE4", Offset = "0xA75DE4", VA = "0xA75DE4")]
				get
				{
					return default(float);
				}
			}
		}

		[Token(Token = "0x4000A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Stats stats;

		[Token(Token = "0x4000A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int[] duplicateOf;

		[Token(Token = "0x4000A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Color32[] frameTones;

		[Token(Token = "0x4000A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Color32[][] pixelCache;

		[Token(Token = "0x4000A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int currentFrame;

		[Token(Token = "0x4000A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private VideoDecoder videoDecoder;

		[Token(Token = "0x4000A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Texture2D framebuffer;

		[Token(Token = "0x4000A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int frameOffset;

		[Token(Token = "0x4000A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int frameCount;

		[Token(Token = "0x4000A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Options options;

		[Token(Token = "0x17000086")]
		public int framesProcessed
		{
			[Token(Token = "0x6000BCE")]
			[Address(RVA = "0x15D4390", Offset = "0x15D4390", VA = "0x15D4390")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000087")]
		public int[] duplicates
		{
			[Token(Token = "0x6000BCF")]
			[Address(RVA = "0x15D4398", Offset = "0x15D4398", VA = "0x15D4398")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BD0")]
		[Address(RVA = "0x15D43A0", Offset = "0x15D43A0", VA = "0x15D43A0")]
		public DuplicateFrameFinder(VideoDecoder videoDecoder, Texture2D framebuffer, int frameOffset, int frameCount, [Optional] Options options)
		{
		}

		[Token(Token = "0x6000BD1")]
		[Address(RVA = "0x15D4480", Offset = "0x15D4480", VA = "0x15D4480")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000BD2")]
		[Address(RVA = "0x15D448C", Offset = "0x15D448C", VA = "0x15D448C")]
		public void Reset(int frameOffset, int frameCount, [Optional] Options options)
		{
		}

		[Token(Token = "0x6000BD3")]
		[Address(RVA = "0x15D45C0", Offset = "0x15D45C0", VA = "0x15D45C0")]
		public bool Progress()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BD4")]
		[Address(RVA = "0x15D4BD8", Offset = "0x15D4BD8", VA = "0x15D4BD8")]
		private static int SqrPixelDiff(Color32 c1, Color32 c2)
		{
			return default(int);
		}

		[Token(Token = "0x6000BD5")]
		[Address(RVA = "0x15D4C14", Offset = "0x15D4C14", VA = "0x15D4C14")]
		private static void ImageDiff(out float sqrImageDiff, out int maxPixelDiff, Color32[] a, Color32[] b, bool fasterPixelCompare = false, int considerEveryNthPixel = 1)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D1")]
	public class LoadOptions
	{
		[Token(Token = "0x4000A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool _3DSound;

		[Token(Token = "0x4000A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool preloadAudio;

		[Token(Token = "0x4000A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public bool skipVideo;

		[Token(Token = "0x4000A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		public bool skipAudio;

		[Token(Token = "0x4000A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioStreamInfo audioStreamInfo;

		[Token(Token = "0x4000A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VideoStreamInfo videoStreamInfo;

		[Token(Token = "0x4000A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float connectTimeout;

		[Token(Token = "0x17000088")]
		public static LoadOptions Default
		{
			[Token(Token = "0x6000BD6")]
			[Address(RVA = "0x15D2338", Offset = "0x15D2338", VA = "0x15D2338")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BD7")]
		[Address(RVA = "0x15D4F00", Offset = "0x15D4F00", VA = "0x15D4F00")]
		public LoadOptions()
		{
		}
	}
	[Token(Token = "0x20001D2")]
	public class MovieSource
	{
		[Token(Token = "0x4000A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Stream stream;

		[Token(Token = "0x4000A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string url;

		[Token(Token = "0x6000BD8")]
		[Address(RVA = "0x15D4FB4", Offset = "0x15D4FB4", VA = "0x15D4FB4")]
		public MovieSource()
		{
		}
	}
	[Token(Token = "0x20001D3")]
	public class Movie
	{
		[Token(Token = "0x4000A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Stream sourceStream;

		[Token(Token = "0x4000A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Demux demux;

		[Token(Token = "0x4000A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VideoDecoder videoDecoder;

		[Token(Token = "0x4000A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioDecoder audioDecoder;

		[Token(Token = "0x6000BD9")]
		[Address(RVA = "0x15D4F10", Offset = "0x15D4F10", VA = "0x15D4F10")]
		public Movie()
		{
		}
	}
	[Token(Token = "0x20001D4")]
	public class MoviePlayerUtil
	{
		[Token(Token = "0x6000BDA")]
		[Address(RVA = "0x15D4F18", Offset = "0x15D4F18", VA = "0x15D4F18")]
		public static Movie Load(Stream srcStream, out Texture2D targetFramebuffer, [Optional] LoadOptions loadOptions)
		{
			return null;
		}

		[Token(Token = "0x6000BDB")]
		[Address(RVA = "0x15D5320", Offset = "0x15D5320", VA = "0x15D5320")]
		public static Movie Load(Stream srcStream, out Texture2D targetFramebuffer, out AudioClip targetAudioBuffer, [Optional] LoadOptions loadOptions)
		{
			return null;
		}

		[Token(Token = "0x6000BDC")]
		[Address(RVA = "0x15D53B8", Offset = "0x15D53B8", VA = "0x15D53B8")]
		public static Movie Load(string srcUrl, out Texture2D targetFramebuffer, [Optional] LoadOptions loadOptions)
		{
			return null;
		}

		[Token(Token = "0x6000BDD")]
		[Address(RVA = "0x15D5454", Offset = "0x15D5454", VA = "0x15D5454")]
		public static Movie Load(string srcUrl, out Texture2D targetFramebuffer, out AudioClip targetAudioBuffer, [Optional] LoadOptions loadOptions)
		{
			return null;
		}

		[Token(Token = "0x6000BDE")]
		[Address(RVA = "0x15D4FBC", Offset = "0x15D4FBC", VA = "0x15D4FBC")]
		public static Movie Load(MovieSource source, out Texture2D targetFramebuffer, out AudioClip targetAudioBuffer, [Optional] LoadOptions loadOptions)
		{
			return null;
		}

		[Token(Token = "0x6000BDF")]
		[Address(RVA = "0x15D58A0", Offset = "0x15D58A0", VA = "0x15D58A0")]
		public static void Unload(Movie movie)
		{
		}

		[Token(Token = "0x6000BE0")]
		[Address(RVA = "0x15D5928", Offset = "0x15D5928", VA = "0x15D5928")]
		public static byte[] ExtractRawAudio(Stream sourceStream)
		{
			return null;
		}

		[Token(Token = "0x6000BE1")]
		[Address(RVA = "0x15D594C", Offset = "0x15D594C", VA = "0x15D594C")]
		public static byte[] ExtractRawAudio(Stream sourceStream, out Demux demux)
		{
			return null;
		}

		[Token(Token = "0x6000BE2")]
		[Address(RVA = "0x15D5A60", Offset = "0x15D5A60", VA = "0x15D5A60")]
		public static byte[] ExtractRawVideo(Stream sourceStream)
		{
			return null;
		}

		[Token(Token = "0x6000BE3")]
		[Address(RVA = "0x15D5A84", Offset = "0x15D5A84", VA = "0x15D5A84")]
		public static byte[] ExtractRawVideo(Stream sourceStream, out Demux demux)
		{
			return null;
		}

		[Token(Token = "0x6000BE4")]
		[Address(RVA = "0x15D5BC0", Offset = "0x15D5BC0", VA = "0x15D5BC0")]
		public MoviePlayerUtil()
		{
		}
	}
	[Token(Token = "0x20001D5")]
	public class MpException : ApplicationException
	{
		[Token(Token = "0x6000BE5")]
		[Address(RVA = "0x15D5BC8", Offset = "0x15D5BC8", VA = "0x15D5BC8")]
		public MpException()
		{
		}

		[Token(Token = "0x6000BE6")]
		[Address(RVA = "0x15CBEEC", Offset = "0x15CBEEC", VA = "0x15CBEEC")]
		public MpException(string msg)
		{
		}

		[Token(Token = "0x6000BE7")]
		[Address(RVA = "0x15D5BD0", Offset = "0x15D5BD0", VA = "0x15D5BD0")]
		public MpException(string msg, Exception inner)
		{
		}

		[Token(Token = "0x6000BE8")]
		[Address(RVA = "0x15D5BD8", Offset = "0x15D5BD8", VA = "0x15D5BD8")]
		public MpException(SerializationInfo info, StreamingContext ctx)
		{
		}
	}
	[Token(Token = "0x20001D6")]
	public abstract class Remux
	{
		[Token(Token = "0x4000A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected Stream dstStream;

		[Token(Token = "0x4000A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private VideoStreamInfo _videoStreamInfo;

		[Token(Token = "0x4000A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AudioStreamInfo _audioStreamInfo;

		[Token(Token = "0x17000089")]
		public VideoStreamInfo videoStreamInfo
		{
			[Token(Token = "0x6000BEF")]
			[Address(RVA = "0x15D7630", Offset = "0x15D7630", VA = "0x15D7630")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008A")]
		public AudioStreamInfo audioStreamInfo
		{
			[Token(Token = "0x6000BF0")]
			[Address(RVA = "0x15CEF38", Offset = "0x15CEF38", VA = "0x15CEF38")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BE9")]
		[Address(RVA = "0x15CF2F0", Offset = "0x15CF2F0", VA = "0x15CF2F0", Slot = "4")]
		public virtual void Init(Stream dstStream, VideoStreamInfo videoStreamInfo, AudioStreamInfo audioStreamInfo)
		{
		}

		[Token(Token = "0x6000BEA")]
		public abstract void Shutdown();

		[Token(Token = "0x6000BEB")]
		public abstract void WriteNextVideoFrame(byte[] frameBytes, int size = -1);

		[Token(Token = "0x6000BEC")]
		public abstract void WriteVideoFrame(int frameOffset, byte[] frameBytes, int size = -1);

		[Token(Token = "0x6000BED")]
		public abstract void WriteNextAudioSamples(byte[] sampleBytes, int size = -1);

		[Token(Token = "0x6000BEE")]
		public abstract void WriteAudioSamples(int sampleOffset, byte[] sampleBytes, int size = -1);

		[Token(Token = "0x6000BF1")]
		[Address(RVA = "0x15CEF78", Offset = "0x15CEF78", VA = "0x15CEF78")]
		protected Remux()
		{
		}
	}
	[Token(Token = "0x20001D7")]
	public class RiffParserException : ApplicationException
	{
		[Token(Token = "0x6000BF2")]
		[Address(RVA = "0x15D91E4", Offset = "0x15D91E4", VA = "0x15D91E4")]
		public RiffParserException()
		{
		}

		[Token(Token = "0x6000BF3")]
		[Address(RVA = "0x15D7638", Offset = "0x15D7638", VA = "0x15D7638")]
		public RiffParserException(string msg)
		{
		}

		[Token(Token = "0x6000BF4")]
		[Address(RVA = "0x15D91EC", Offset = "0x15D91EC", VA = "0x15D91EC")]
		public RiffParserException(string msg, Exception inner)
		{
		}

		[Token(Token = "0x6000BF5")]
		[Address(RVA = "0x15D91F4", Offset = "0x15D91F4", VA = "0x15D91F4")]
		public RiffParserException(SerializationInfo info, StreamingContext ctx)
		{
		}
	}
	[Token(Token = "0x20001D8")]
	public class RiffParser
	{
		[Token(Token = "0x20002FE")]
		public delegate bool ProcessRiffElement(RiffParser rp, uint fourCC, int length);

		[Token(Token = "0x20002FF")]
		public delegate bool ProcessListElement(RiffParser rp, uint fourCC, int length);

		[Token(Token = "0x2000300")]
		public delegate void ProcessChunkElement(RiffParser rp, uint fourCC, int unpaddedLength, int paddedLength);

		[Token(Token = "0x4000A4E")]
		public const uint RIFF4CC = 1179011410u;

		[Token(Token = "0x4000A4F")]
		public const uint RIFX4CC = 1481001298u;

		[Token(Token = "0x4000A50")]
		public const uint LIST4CC = 1414744396u;

		[Token(Token = "0x4000A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private long nextElementOffset;

		[Token(Token = "0x4000A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly AtomicBinaryReader reader;

		[Token(Token = "0x4000A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private uint streamRiff;

		[Token(Token = "0x1700008B")]
		public uint StreamRIFF
		{
			[Token(Token = "0x6000BF9")]
			[Address(RVA = "0x15D8E10", Offset = "0x15D8E10", VA = "0x15D8E10")]
			get
			{
				return default(uint);
			}
		}

		[Token(Token = "0x1700008C")]
		public long Position
		{
			[Token(Token = "0x6000BFA")]
			[Address(RVA = "0x15CEBD4", Offset = "0x15CEBD4", VA = "0x15CEBD4")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0x15CB804", Offset = "0x15CB804", VA = "0x15CB804")]
		public RiffParser(AtomicBinaryReader reader)
		{
		}

		[Token(Token = "0x6000BF7")]
		[Address(RVA = "0x15CB914", Offset = "0x15CB914", VA = "0x15CB914")]
		public bool ReadNext(ProcessChunkElement chunkCallback, [Optional] ProcessListElement listCallback, [Optional] ProcessRiffElement riffCallback)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BF8")]
		[Address(RVA = "0x15D8E08", Offset = "0x15D8E08", VA = "0x15D8E08")]
		public void Rewind()
		{
		}

		[Token(Token = "0x6000BFB")]
		[Address(RVA = "0x15CE808", Offset = "0x15CE808", VA = "0x15CE808")]
		public static string FromFourCC(uint fourCC)
		{
			return null;
		}

		[Token(Token = "0x6000BFC")]
		[Address(RVA = "0x15CE908", Offset = "0x15CE908", VA = "0x15CE908")]
		public static uint ToFourCC(string fourCC)
		{
			return default(uint);
		}

		[Token(Token = "0x6000BFD")]
		[Address(RVA = "0x15D8E18", Offset = "0x15D8E18", VA = "0x15D8E18")]
		public static uint ToFourCC(char[] fourCC)
		{
			return default(uint);
		}

		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0x15D8F00", Offset = "0x15D8F00", VA = "0x15D8F00")]
		public static uint ToFourCC(char c0, char c1, char c2, char c3)
		{
			return default(uint);
		}
	}
	[Token(Token = "0x20001D9")]
	public class RiffWriterException : ApplicationException
	{
		[Token(Token = "0x6000BFF")]
		[Address(RVA = "0x15D95B0", Offset = "0x15D95B0", VA = "0x15D95B0")]
		public RiffWriterException()
		{
		}

		[Token(Token = "0x6000C00")]
		[Address(RVA = "0x15D95A8", Offset = "0x15D95A8", VA = "0x15D95A8")]
		public RiffWriterException(string msg)
		{
		}

		[Token(Token = "0x6000C01")]
		[Address(RVA = "0x15D95B8", Offset = "0x15D95B8", VA = "0x15D95B8")]
		public RiffWriterException(string msg, Exception inner)
		{
		}

		[Token(Token = "0x6000C02")]
		[Address(RVA = "0x15D95C0", Offset = "0x15D95C0", VA = "0x15D95C0")]
		public RiffWriterException(SerializationInfo info, StreamingContext ctx)
		{
		}
	}
	[Token(Token = "0x20001DA")]
	public class RiffWriter
	{
		[Token(Token = "0x4000A54")]
		public const uint RIFF4CC = 1179011410u;

		[Token(Token = "0x4000A55")]
		public const uint LIST4CC = 1414744396u;

		[Token(Token = "0x4000A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private BinaryWriter writer;

		[Token(Token = "0x4000A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Stack<long> stack;

		[Token(Token = "0x1700008D")]
		public BinaryWriter binaryWriter
		{
			[Token(Token = "0x6000C0C")]
			[Address(RVA = "0x15D024C", Offset = "0x15D024C", VA = "0x15D024C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008E")]
		public long currentElementSize
		{
			[Token(Token = "0x6000C0D")]
			[Address(RVA = "0x15D03F4", Offset = "0x15D03F4", VA = "0x15D03F4")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x6000C03")]
		[Address(RVA = "0x15CF2FC", Offset = "0x15CF2FC", VA = "0x15CF2FC")]
		public RiffWriter(Stream stream)
		{
		}

		[Token(Token = "0x6000C04")]
		[Address(RVA = "0x15D91FC", Offset = "0x15D91FC", VA = "0x15D91FC")]
		public RiffWriter(BinaryWriter writer)
		{
		}

		[Token(Token = "0x6000C05")]
		[Address(RVA = "0x15CF3A0", Offset = "0x15CF3A0", VA = "0x15CF3A0")]
		public void BeginRiff(uint fourCC)
		{
		}

		[Token(Token = "0x6000C06")]
		[Address(RVA = "0x15CF3B4", Offset = "0x15CF3B4", VA = "0x15CF3B4")]
		public void BeginList(uint fourCC)
		{
		}

		[Token(Token = "0x6000C07")]
		[Address(RVA = "0x15D1488", Offset = "0x15D1488", VA = "0x15D1488")]
		public void BeginChunk(uint fourCC)
		{
		}

		[Token(Token = "0x6000C08")]
		[Address(RVA = "0x15D13B0", Offset = "0x15D13B0", VA = "0x15D13B0")]
		public void EndRiff()
		{
		}

		[Token(Token = "0x6000C09")]
		[Address(RVA = "0x15CFDAC", Offset = "0x15CFDAC", VA = "0x15CFDAC")]
		public void EndList()
		{
		}

		[Token(Token = "0x6000C0A")]
		[Address(RVA = "0x15D1584", Offset = "0x15D1584", VA = "0x15D1584")]
		public void EndChunk()
		{
		}

		[Token(Token = "0x6000C0B")]
		[Address(RVA = "0x15D0654", Offset = "0x15D0654", VA = "0x15D0654")]
		public void WriteChunk(uint fourCC, byte[] data, int size = -1)
		{
		}

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0x15D13B4", Offset = "0x15D13B4", VA = "0x15D13B4")]
		public void Close()
		{
		}

		[Token(Token = "0x6000C0F")]
		[Address(RVA = "0x15D9280", Offset = "0x15D9280", VA = "0x15D9280")]
		private void Begin(uint what, uint fourCC)
		{
		}

		[Token(Token = "0x6000C10")]
		[Address(RVA = "0x15D93A8", Offset = "0x15D93A8", VA = "0x15D93A8")]
		private void End()
		{
		}
	}
	[Token(Token = "0x20001DB")]
	public abstract class Streamer : Demux
	{
		[Token(Token = "0x1700008F")]
		public abstract bool IsConnected
		{
			[Token(Token = "0x6000C13")]
			get;
		}

		[Token(Token = "0x6000C11")]
		[Address(RVA = "0x15D54EC", Offset = "0x15D54EC", VA = "0x15D54EC")]
		public static Streamer forUrl(string url)
		{
			return null;
		}

		[Token(Token = "0x6000C12")]
		public abstract void Connect(string url, [Optional] LoadOptions loadOptions);

		[Token(Token = "0x6000C14")]
		[Address(RVA = "0x15D95C8", Offset = "0x15D95C8", VA = "0x15D95C8", Slot = "4")]
		public override void Init(Stream stream, [Optional] LoadOptions loadOptions)
		{
		}

		[Token(Token = "0x6000C15")]
		[Address(RVA = "0x15D963C", Offset = "0x15D963C", VA = "0x15D963C", Slot = "8")]
		public override int ReadVideoFrame(out byte[] targetBuf)
		{
			return default(int);
		}

		[Token(Token = "0x6000C16")]
		[Address(RVA = "0x15D96B0", Offset = "0x15D96B0", VA = "0x15D96B0", Slot = "11")]
		public override int ReadAudioSamples(out byte[] targetBuf, int sampleCount)
		{
			return default(int);
		}

		[Token(Token = "0x6000C17")]
		[Address(RVA = "0x15D6BC4", Offset = "0x15D6BC4", VA = "0x15D6BC4")]
		protected Streamer()
		{
		}
	}
	[Token(Token = "0x20001DC")]
	public abstract class VideoDecoder
	{
		[Token(Token = "0x17000090")]
		public abstract int Position
		{
			[Token(Token = "0x6000C1B")]
			get;
			[Token(Token = "0x6000C1C")]
			set;
		}

		[Token(Token = "0x17000091")]
		public abstract float lastFrameDecodeTime
		{
			[Token(Token = "0x6000C1F")]
			get;
		}

		[Token(Token = "0x17000092")]
		public abstract int lastFrameSizeBytes
		{
			[Token(Token = "0x6000C20")]
			get;
		}

		[Token(Token = "0x17000093")]
		public abstract float totalDecodeTime
		{
			[Token(Token = "0x6000C21")]
			get;
		}

		[Token(Token = "0x17000094")]
		public abstract long totalSizeBytes
		{
			[Token(Token = "0x6000C22")]
			get;
		}

		[Token(Token = "0x6000C18")]
		[Address(RVA = "0x15D55CC", Offset = "0x15D55CC", VA = "0x15D55CC")]
		public static VideoDecoder CreateFor(VideoStreamInfo streamInfo)
		{
			return null;
		}

		[Token(Token = "0x6000C19")]
		public abstract void Init(out Texture2D framebuffer, Demux demux, [Optional] LoadOptions loadOptions);

		[Token(Token = "0x6000C1A")]
		public abstract void Shutdown();

		[Token(Token = "0x6000C1D")]
		public abstract void DecodeNext();

		[Token(Token = "0x6000C1E")]
		[Address(RVA = "0x15D4BA4", Offset = "0x15D4BA4", VA = "0x15D4BA4")]
		public void Decode(int frame)
		{
		}

		[Token(Token = "0x6000C23")]
		[Address(RVA = "0x15D2D90", Offset = "0x15D2D90", VA = "0x15D2D90")]
		protected VideoDecoder()
		{
		}
	}
	[Token(Token = "0x20001DD")]
	public class VideoStreamInfo
	{
		[Token(Token = "0x4000A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint codecFourCC;

		[Token(Token = "0x4000A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int bitsPerPixel;

		[Token(Token = "0x4000A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int frameCount;

		[Token(Token = "0x4000A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int width;

		[Token(Token = "0x4000A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int height;

		[Token(Token = "0x4000A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float framerate;

		[Token(Token = "0x4000A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public long lengthBytes;

		[Token(Token = "0x17000095")]
		public float lengthSeconds
		{
			[Token(Token = "0x6000C24")]
			[Address(RVA = "0x15D9724", Offset = "0x15D9724", VA = "0x15D9724")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000C25")]
		[Address(RVA = "0x15CBC04", Offset = "0x15CBC04", VA = "0x15CBC04")]
		public VideoStreamInfo()
		{
		}

		[Token(Token = "0x6000C26")]
		[Address(RVA = "0x15D9738", Offset = "0x15D9738", VA = "0x15D9738")]
		public VideoStreamInfo(VideoStreamInfo vi)
		{
		}
	}
}
namespace MP.RAW
{
	[Token(Token = "0x20001DE")]
	public class RawMjpegDemux : Demux
	{
		[Token(Token = "0x4000A5F")]
		private const int FILE_READ_BUFFER_SIZE = 8096;

		[Token(Token = "0x4000A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AtomicBinaryReader reader;

		[Token(Token = "0x4000A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<long> frameStartIndex;

		[Token(Token = "0x4000A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<int> frameSize;

		[Token(Token = "0x4000A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private byte[] rawJpgBuffer;

		[Token(Token = "0x4000A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int nextVideoFrame;

		[Token(Token = "0x17000096")]
		public override int VideoPosition
		{
			[Token(Token = "0x6000C29")]
			[Address(RVA = "0x15D6FBC", Offset = "0x15D6FBC", VA = "0x15D6FBC", Slot = "6")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C2A")]
			[Address(RVA = "0x15D6FC4", Offset = "0x15D6FC4", VA = "0x15D6FC4", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x17000097")]
		public override int AudioPosition
		{
			[Token(Token = "0x6000C2C")]
			[Address(RVA = "0x15D70E8", Offset = "0x15D70E8", VA = "0x15D70E8", Slot = "9")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C2D")]
			[Address(RVA = "0x15D715C", Offset = "0x15D715C", VA = "0x15D715C", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x6000C27")]
		[Address(RVA = "0x15D6BCC", Offset = "0x15D6BCC", VA = "0x15D6BCC", Slot = "4")]
		public override void Init(Stream sourceStream, [Optional] LoadOptions loadOptions)
		{
		}

		[Token(Token = "0x6000C28")]
		[Address(RVA = "0x15D6FB8", Offset = "0x15D6FB8", VA = "0x15D6FB8", Slot = "5")]
		public override void Shutdown(bool force = false)
		{
		}

		[Token(Token = "0x6000C2B")]
		[Address(RVA = "0x15D6FCC", Offset = "0x15D6FCC", VA = "0x15D6FCC", Slot = "8")]
		public override int ReadVideoFrame(out byte[] targetBuf)
		{
			return default(int);
		}

		[Token(Token = "0x6000C2E")]
		[Address(RVA = "0x15D71D0", Offset = "0x15D71D0", VA = "0x15D71D0", Slot = "11")]
		public override int ReadAudioSamples(out byte[] targetBuf, int sampleCount)
		{
			return default(int);
		}

		[Token(Token = "0x6000C2F")]
		[Address(RVA = "0x15D42F8", Offset = "0x15D42F8", VA = "0x15D42F8")]
		public RawMjpegDemux()
		{
		}
	}
	[Token(Token = "0x20001DF")]
	public class RawPcmDemux : Demux
	{
		[Token(Token = "0x4000A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AtomicBinaryReader reader;

		[Token(Token = "0x4000A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private byte[] rawAudioBuf;

		[Token(Token = "0x4000A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int nextAudioSample;

		[Token(Token = "0x17000098")]
		public override int VideoPosition
		{
			[Token(Token = "0x6000C32")]
			[Address(RVA = "0x15D7350", Offset = "0x15D7350", VA = "0x15D7350", Slot = "6")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C33")]
			[Address(RVA = "0x15D73C4", Offset = "0x15D73C4", VA = "0x15D73C4", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x17000099")]
		public override int AudioPosition
		{
			[Token(Token = "0x6000C35")]
			[Address(RVA = "0x15D74AC", Offset = "0x15D74AC", VA = "0x15D74AC", Slot = "9")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C36")]
			[Address(RVA = "0x15D74B4", Offset = "0x15D74B4", VA = "0x15D74B4", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x6000C30")]
		[Address(RVA = "0x15D7244", Offset = "0x15D7244", VA = "0x15D7244", Slot = "4")]
		public override void Init(Stream sourceStream, [Optional] LoadOptions loadOptions)
		{
		}

		[Token(Token = "0x6000C31")]
		[Address(RVA = "0x15D734C", Offset = "0x15D734C", VA = "0x15D734C", Slot = "5")]
		public override void Shutdown(bool force = false)
		{
		}

		[Token(Token = "0x6000C34")]
		[Address(RVA = "0x15D7438", Offset = "0x15D7438", VA = "0x15D7438", Slot = "8")]
		public override int ReadVideoFrame(out byte[] targetBuf)
		{
			return default(int);
		}

		[Token(Token = "0x6000C37")]
		[Address(RVA = "0x15D74BC", Offset = "0x15D74BC", VA = "0x15D74BC", Slot = "11")]
		public override int ReadAudioSamples(out byte[] targetBuf, int sampleCount)
		{
			return default(int);
		}

		[Token(Token = "0x6000C38")]
		[Address(RVA = "0x15D7628", Offset = "0x15D7628", VA = "0x15D7628")]
		public RawPcmDemux()
		{
		}
	}
}
namespace MP.Net
{
	[Token(Token = "0x20001E0")]
	public class HttpMjpegStreamer : Streamer
	{
		[Token(Token = "0x4000A68")]
		private const int INITIAL_BYTE_BUFFER_SIZE = 131072;

		[Token(Token = "0x4000A69")]
		private const int MAX_BYTE_BUFFER_SIZE = 1048576;

		[Token(Token = "0x4000A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private object locker;

		[Token(Token = "0x4000A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Thread thread;

		[Token(Token = "0x4000A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float timeout;

		[Token(Token = "0x4000A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private byte[][] frameRingBuffer;

		[Token(Token = "0x4000A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int receivedFrameCount;

		[Token(Token = "0x4000A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string _status;

		[Token(Token = "0x4000A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private long _bytesReceived;

		[Token(Token = "0x4000A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool shouldStop;

		[Token(Token = "0x4000A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool connected;

		[Token(Token = "0x1700009A")]
		public string Status
		{
			[Token(Token = "0x6000C39")]
			[Address(RVA = "0x15D5BE0", Offset = "0x15D5BE0", VA = "0x15D5BE0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C3A")]
			[Address(RVA = "0x15D5C70", Offset = "0x15D5C70", VA = "0x15D5C70")]
			private set
			{
			}
		}

		[Token(Token = "0x1700009B")]
		public long BytesReceived
		{
			[Token(Token = "0x6000C3B")]
			[Address(RVA = "0x15D5D04", Offset = "0x15D5D04", VA = "0x15D5D04")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x6000C3C")]
			[Address(RVA = "0x15D5D94", Offset = "0x15D5D94", VA = "0x15D5D94")]
			private set
			{
			}
		}

		[Token(Token = "0x1700009C")]
		public override bool IsConnected
		{
			[Token(Token = "0x6000C3F")]
			[Address(RVA = "0x15D6030", Offset = "0x15D6030", VA = "0x15D6030", Slot = "13")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700009D")]
		public override int VideoPosition
		{
			[Token(Token = "0x6000C40")]
			[Address(RVA = "0x15D607C", Offset = "0x15D607C", VA = "0x15D607C", Slot = "6")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C41")]
			[Address(RVA = "0x15D6084", Offset = "0x15D6084", VA = "0x15D6084", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x1700009E")]
		public override int AudioPosition
		{
			[Token(Token = "0x6000C43")]
			[Address(RVA = "0x15D6204", Offset = "0x15D6204", VA = "0x15D6204", Slot = "9")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C44")]
			[Address(RVA = "0x15D6278", Offset = "0x15D6278", VA = "0x15D6278", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x6000C3D")]
		[Address(RVA = "0x15D5E28", Offset = "0x15D5E28", VA = "0x15D5E28", Slot = "12")]
		public override void Connect(string url, [Optional] LoadOptions loadOptions)
		{
		}

		[Token(Token = "0x6000C3E")]
		[Address(RVA = "0x15D5FEC", Offset = "0x15D5FEC", VA = "0x15D5FEC", Slot = "5")]
		public override void Shutdown(bool force = false)
		{
		}

		[Token(Token = "0x6000C42")]
		[Address(RVA = "0x15D60F8", Offset = "0x15D60F8", VA = "0x15D60F8", Slot = "8")]
		public override int ReadVideoFrame(out byte[] targetBuf)
		{
			return default(int);
		}

		[Token(Token = "0x6000C45")]
		[Address(RVA = "0x15D62EC", Offset = "0x15D62EC", VA = "0x15D62EC", Slot = "11")]
		public override int ReadAudioSamples(out byte[] targetBuf, int sampleCount)
		{
			return default(int);
		}

		[Token(Token = "0x6000C46")]
		[Address(RVA = "0x15D6360", Offset = "0x15D6360", VA = "0x15D6360")]
		private void FrameReceived(byte[] bytes)
		{
		}

		[Token(Token = "0x6000C47")]
		[Address(RVA = "0x15D64E8", Offset = "0x15D64E8", VA = "0x15D64E8")]
		private void ThreadRun(object url)
		{
		}

		[Token(Token = "0x6000C48")]
		[Address(RVA = "0x15D6A88", Offset = "0x15D6A88", VA = "0x15D6A88")]
		private static string ReadLine(BinaryReader reader)
		{
			return null;
		}

		[Token(Token = "0x6000C49")]
		[Address(RVA = "0x15D6B5C", Offset = "0x15D6B5C", VA = "0x15D6B5C")]
		public HttpMjpegStreamer()
		{
		}
	}
}
namespace MP.Decoder
{
	[Token(Token = "0x20001E1")]
	public class AudioDecoderPCM : AudioDecoder
	{
		[Token(Token = "0x4000A73")]
		public const uint FOURCC_MS = 1u;

		[Token(Token = "0x4000A74")]
		public const uint FORMAT_UNCOMPRESSED = 1u;

		[Token(Token = "0x4000A75")]
		public const uint FORMAT_ALAW = 6u;

		[Token(Token = "0x4000A76")]
		public const uint FORMAT_ULAW = 7u;

		[Token(Token = "0x4000A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private AudioStreamInfo streamInfo;

		[Token(Token = "0x4000A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Demux demux;

		[Token(Token = "0x4000A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AudioClip audioClip;

		[Token(Token = "0x4000A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float _totalDecodeTime;

		[Token(Token = "0x4000A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Stopwatch watch;

		[Token(Token = "0x4000A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float[] ALawExpandLookupTable;

		[Token(Token = "0x4000A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static float[] uLawExpandLookupTable;

		[Token(Token = "0x1700009F")]
		public override float totalDecodeTime
		{
			[Token(Token = "0x6000C4D")]
			[Address(RVA = "0x15D248C", Offset = "0x15D248C", VA = "0x15D248C", Slot = "9")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000A0")]
		public override int Position
		{
			[Token(Token = "0x6000C4E")]
			[Address(RVA = "0x15D2494", Offset = "0x15D2494", VA = "0x15D2494", Slot = "6")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C4F")]
			[Address(RVA = "0x15D24C8", Offset = "0x15D24C8", VA = "0x15D24C8", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x6000C4A")]
		[Address(RVA = "0x15D1E88", Offset = "0x15D1E88", VA = "0x15D1E88")]
		public AudioDecoderPCM(AudioStreamInfo streamInfo)
		{
		}

		[Token(Token = "0x6000C4B")]
		[Address(RVA = "0x15D2128", Offset = "0x15D2128", VA = "0x15D2128", Slot = "4")]
		public override void Init(out AudioClip audioClip, Demux demux, [Optional] LoadOptions loadOptions)
		{
		}

		[Token(Token = "0x6000C4C")]
		[Address(RVA = "0x15D239C", Offset = "0x15D239C", VA = "0x15D239C", Slot = "5")]
		public override void Shutdown()
		{
		}

		[Token(Token = "0x6000C50")]
		[Address(RVA = "0x15D2504", Offset = "0x15D2504", VA = "0x15D2504", Slot = "8")]
		public override void DecodeNext(float[] data, int sampleCount)
		{
		}

		[Token(Token = "0x6000C51")]
		[Address(RVA = "0x15D2BA8", Offset = "0x15D2BA8", VA = "0x15D2BA8")]
		public void OnAudioRead(float[] data)
		{
		}

		[Token(Token = "0x6000C52")]
		[Address(RVA = "0x15D2C08", Offset = "0x15D2C08", VA = "0x15D2C08")]
		public void OnAudioSeek(int newPosition)
		{
		}
	}
	[Token(Token = "0x20001E2")]
	public class VideoDecoderMJPEG : VideoDecoderUnity
	{
		[Token(Token = "0x4000A7E")]
		public const uint FOURCC_MJPG = 1196444237u;

		[Token(Token = "0x4000A7F")]
		public const uint FOURCC_CJPG = 1196444227u;

		[Token(Token = "0x4000A80")]
		public const uint FOURCC_ffds = 1935959654u;

		[Token(Token = "0x6000C54")]
		[Address(RVA = "0x15D2CC8", Offset = "0x15D2CC8", VA = "0x15D2CC8")]
		public VideoDecoderMJPEG([Optional] VideoStreamInfo streamInfo)
		{
		}
	}
	[Token(Token = "0x20001E3")]
	public class VideoDecoderMPNG : VideoDecoderUnity
	{
		[Token(Token = "0x4000A81")]
		public const uint FOURCC_MPNG = 1196314701u;

		[Token(Token = "0x6000C55")]
		[Address(RVA = "0x15D2D30", Offset = "0x15D2D30", VA = "0x15D2D30")]
		public VideoDecoderMPNG([Optional] VideoStreamInfo streamInfo)
		{
		}
	}
	[Token(Token = "0x20001E4")]
	public class VideoDecoderRGB : VideoDecoder
	{
		[Token(Token = "0x4000A82")]
		public const uint FOURCC_NULL = 0u;

		[Token(Token = "0x4000A83")]
		public const uint FOURCC_DIB_ = 541215044u;

		[Token(Token = "0x4000A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Texture2D framebuffer;

		[Token(Token = "0x4000A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Color32[] rgbBuffer;

		[Token(Token = "0x4000A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Demux demux;

		[Token(Token = "0x4000A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private VideoStreamInfo info;

		[Token(Token = "0x4000A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float _lastFrameDecodeTime;

		[Token(Token = "0x4000A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int _lastFrameSizeBytes;

		[Token(Token = "0x4000A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _totalDecodeTime;

		[Token(Token = "0x4000A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private long _totalSizeBytes;

		[Token(Token = "0x4000A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Stopwatch watch;

		[Token(Token = "0x170000A1")]
		public override int Position
		{
			[Token(Token = "0x6000C59")]
			[Address(RVA = "0x15D3060", Offset = "0x15D3060", VA = "0x15D3060", Slot = "6")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C5A")]
			[Address(RVA = "0x15D3094", Offset = "0x15D3094", VA = "0x15D3094", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x170000A2")]
		public override float lastFrameDecodeTime
		{
			[Token(Token = "0x6000C5C")]
			[Address(RVA = "0x15D38B0", Offset = "0x15D38B0", VA = "0x15D38B0", Slot = "9")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000A3")]
		public override int lastFrameSizeBytes
		{
			[Token(Token = "0x6000C5D")]
			[Address(RVA = "0x15D38B8", Offset = "0x15D38B8", VA = "0x15D38B8", Slot = "10")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000A4")]
		public override float totalDecodeTime
		{
			[Token(Token = "0x6000C5E")]
			[Address(RVA = "0x15D38C0", Offset = "0x15D38C0", VA = "0x15D38C0", Slot = "11")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000A5")]
		public override long totalSizeBytes
		{
			[Token(Token = "0x6000C5F")]
			[Address(RVA = "0x15D38C8", Offset = "0x15D38C8", VA = "0x15D38C8", Slot = "12")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x6000C56")]
		[Address(RVA = "0x15D2D64", Offset = "0x15D2D64", VA = "0x15D2D64")]
		public VideoDecoderRGB([Optional] VideoStreamInfo info)
		{
		}

		[Token(Token = "0x6000C57")]
		[Address(RVA = "0x15D2D98", Offset = "0x15D2D98", VA = "0x15D2D98", Slot = "4")]
		public override void Init(out Texture2D framebuffer, Demux demux, [Optional] LoadOptions loadOptions)
		{
		}

		[Token(Token = "0x6000C58")]
		[Address(RVA = "0x15D2F70", Offset = "0x15D2F70", VA = "0x15D2F70", Slot = "5")]
		public override void Shutdown()
		{
		}

		[Token(Token = "0x6000C5B")]
		[Address(RVA = "0x15D30D0", Offset = "0x15D30D0", VA = "0x15D30D0", Slot = "8")]
		public override void DecodeNext()
		{
		}
	}
	[Token(Token = "0x20001E5")]
	public abstract class VideoDecoderUnity : VideoDecoder
	{
		[Token(Token = "0x4000A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected Texture2D framebuffer;

		[Token(Token = "0x4000A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected VideoStreamInfo streamInfo;

		[Token(Token = "0x4000A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Demux demux;

		[Token(Token = "0x4000A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float _lastFrameDecodeTime;

		[Token(Token = "0x4000A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int _lastFrameSizeBytes;

		[Token(Token = "0x4000A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float _totalDecodeTime;

		[Token(Token = "0x4000A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private long _totalSizeBytes;

		[Token(Token = "0x4000A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Stopwatch watch;

		[Token(Token = "0x4000A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int lastFbWidth;

		[Token(Token = "0x4000A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int lastFbHeight;

		[Token(Token = "0x170000A6")]
		public override int Position
		{
			[Token(Token = "0x6000C63")]
			[Address(RVA = "0x15D3AB8", Offset = "0x15D3AB8", VA = "0x15D3AB8", Slot = "6")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C64")]
			[Address(RVA = "0x15D3AEC", Offset = "0x15D3AEC", VA = "0x15D3AEC", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x170000A7")]
		public override float lastFrameDecodeTime
		{
			[Token(Token = "0x6000C66")]
			[Address(RVA = "0x15D3FE4", Offset = "0x15D3FE4", VA = "0x15D3FE4", Slot = "9")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000A8")]
		public override int lastFrameSizeBytes
		{
			[Token(Token = "0x6000C67")]
			[Address(RVA = "0x15D3FEC", Offset = "0x15D3FEC", VA = "0x15D3FEC", Slot = "10")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000A9")]
		public override float totalDecodeTime
		{
			[Token(Token = "0x6000C68")]
			[Address(RVA = "0x15D3FF4", Offset = "0x15D3FF4", VA = "0x15D3FF4", Slot = "11")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000AA")]
		public override long totalSizeBytes
		{
			[Token(Token = "0x6000C69")]
			[Address(RVA = "0x15D3FFC", Offset = "0x15D3FFC", VA = "0x15D3FFC", Slot = "12")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x6000C60")]
		[Address(RVA = "0x15D2CFC", Offset = "0x15D2CFC", VA = "0x15D2CFC")]
		public VideoDecoderUnity([Optional] VideoStreamInfo streamInfo)
		{
		}

		[Token(Token = "0x6000C61")]
		[Address(RVA = "0x15D38D0", Offset = "0x15D38D0", VA = "0x15D38D0", Slot = "4")]
		public override void Init(out Texture2D framebuffer, Demux demux, [Optional] LoadOptions loadOptions)
		{
		}

		[Token(Token = "0x6000C62")]
		[Address(RVA = "0x15D39C8", Offset = "0x15D39C8", VA = "0x15D39C8", Slot = "5")]
		public override void Shutdown()
		{
		}

		[Token(Token = "0x6000C65")]
		[Address(RVA = "0x15D3B28", Offset = "0x15D3B28", VA = "0x15D3B28", Slot = "8")]
		public override void DecodeNext()
		{
		}
	}
}
namespace MP.AVI
{
	[Token(Token = "0x20001E6")]
	public class AVIMainHeader
	{
		[Token(Token = "0x4000A97")]
		public const uint AVIF_COPYRIGHTED = 131072u;

		[Token(Token = "0x4000A98")]
		public const uint AVIF_HASINDEX = 16u;

		[Token(Token = "0x4000A99")]
		public const uint AVIF_ISINTERLEAVED = 256u;

		[Token(Token = "0x4000A9A")]
		public const uint AVIF_MUSTUSEINDEX = 32u;

		[Token(Token = "0x4000A9B")]
		public const uint AVIF_TRUSTCKTYPE = 2048u;

		[Token(Token = "0x4000A9C")]
		public const uint AVIF_WASCAPTUREFILE = 65536u;

		[Token(Token = "0x4000A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint dwMicroSecPerFrame;

		[Token(Token = "0x4000A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint dwMaxBytesPerSec;

		[Token(Token = "0x4000A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint dwPaddingGranularity;

		[Token(Token = "0x4000AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint dwFlags;

		[Token(Token = "0x4000AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uint dwTotalFrames;

		[Token(Token = "0x4000AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public uint dwInitialFrames;

		[Token(Token = "0x4000AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public uint dwStreams;

		[Token(Token = "0x4000AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public uint dwSuggestedBufferSize;

		[Token(Token = "0x4000AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public uint dwWidth;

		[Token(Token = "0x4000AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public uint dwHeight;

		[Token(Token = "0x4000AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public uint dwReserved0;

		[Token(Token = "0x4000AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public uint dwReserved1;

		[Token(Token = "0x4000AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public uint dwReserved2;

		[Token(Token = "0x4000AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public uint dwReserved3;

		[Token(Token = "0x6000C6A")]
		[Address(RVA = "0x15CAFEC", Offset = "0x15CAFEC", VA = "0x15CAFEC")]
		public AVIMainHeader()
		{
		}
	}
	[Token(Token = "0x20001E7")]
	public class AVIStreamHeader
	{
		[Token(Token = "0x4000AAB")]
		public const uint AVISF_DISABLED = 1u;

		[Token(Token = "0x4000AAC")]
		public const uint AVISF_VIDEO_PALCHANGES = 65536u;

		[Token(Token = "0x4000AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint fccType;

		[Token(Token = "0x4000AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint fccHandler;

		[Token(Token = "0x4000AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint dwFlags;

		[Token(Token = "0x4000AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ushort wPriority;

		[Token(Token = "0x4000AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		public ushort wLanguage;

		[Token(Token = "0x4000AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uint dwInitialFrames;

		[Token(Token = "0x4000AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public uint dwScale;

		[Token(Token = "0x4000AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public uint dwRate;

		[Token(Token = "0x4000AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public uint dwStart;

		[Token(Token = "0x4000AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public uint dwLength;

		[Token(Token = "0x4000AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public uint dwSuggestedBufferSize;

		[Token(Token = "0x4000AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public uint dwQuality;

		[Token(Token = "0x4000AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public uint dwSampleSize;

		[Token(Token = "0x4000ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public short rcFrameLeft;

		[Token(Token = "0x4000ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		public short rcFrameTop;

		[Token(Token = "0x4000ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public short rcFrameRight;

		[Token(Token = "0x4000ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		public short rcFrameBottom;

		[Token(Token = "0x6000C6B")]
		[Address(RVA = "0x15CAFF4", Offset = "0x15CAFF4", VA = "0x15CAFF4")]
		public AVIStreamHeader()
		{
		}
	}
	[Token(Token = "0x20001E8")]
	public class ODMLHeader
	{
		[Token(Token = "0x4000ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint dwTotalFrames;

		[Token(Token = "0x6000C6C")]
		[Address(RVA = "0x15CD790", Offset = "0x15CD790", VA = "0x15CD790")]
		public ODMLHeader()
		{
		}
	}
	[Token(Token = "0x20001E9")]
	public class BitmapInfoHeader
	{
		[Token(Token = "0x4000ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint biSize;

		[Token(Token = "0x4000AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int biWidth;

		[Token(Token = "0x4000AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int biHeight;

		[Token(Token = "0x4000AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ushort biPlanes;

		[Token(Token = "0x4000AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		public ushort biBitCount;

		[Token(Token = "0x4000AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uint biCompression;

		[Token(Token = "0x4000AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public uint biSizeImage;

		[Token(Token = "0x4000AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int biXPelsPerMeter;

		[Token(Token = "0x4000AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int biYPelsPerMeter;

		[Token(Token = "0x4000AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public uint biClrUsed;

		[Token(Token = "0x4000AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public uint biClrImportant;

		[Token(Token = "0x6000C6D")]
		[Address(RVA = "0x15CD400", Offset = "0x15CD400", VA = "0x15CD400")]
		public BitmapInfoHeader()
		{
		}
	}
	[Token(Token = "0x20001EA")]
	public class WaveFormatEx
	{
		[Token(Token = "0x4000ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ushort wFormatTag;

		[Token(Token = "0x4000ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public ushort nChannels;

		[Token(Token = "0x4000ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint nSamplesPerSec;

		[Token(Token = "0x4000ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint nAvgBytesPerSec;

		[Token(Token = "0x4000ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ushort nBlockAlign;

		[Token(Token = "0x4000ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		public ushort wBitsPerSample;

		[Token(Token = "0x4000AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ushort cbSize;

		[Token(Token = "0x6000C6E")]
		[Address(RVA = "0x15CD6F0", Offset = "0x15CD6F0", VA = "0x15CD6F0")]
		public WaveFormatEx()
		{
		}
	}
	[Token(Token = "0x20001EB")]
	public class AviStreamIndex
	{
		[Token(Token = "0x2000301")]
		public class Entry
		{
			[Token(Token = "0x4000E99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public long chunkOffset;

			[Token(Token = "0x4000E9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int chunkLength;

			[Token(Token = "0x4000E9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public bool isKeyframe;

			[Token(Token = "0x60015C0")]
			[Address(RVA = "0x15CDA58", Offset = "0x15CDA58", VA = "0x15CDA58")]
			public Entry()
			{
			}
		}

		[Token(Token = "0x2000302")]
		public enum Type
		{
			[Token(Token = "0x4000E9D")]
			SUPERINDEX = 0,
			[Token(Token = "0x4000E9E")]
			CHUNKS = 1,
			[Token(Token = "0x4000E9F")]
			DATA = 0x80
		}

		[Token(Token = "0x4000AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint streamId;

		[Token(Token = "0x4000AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Entry> entries;

		[Token(Token = "0x4000AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int globalOffset;

		[Token(Token = "0x6000C6F")]
		[Address(RVA = "0x15CD798", Offset = "0x15CD798", VA = "0x15CD798")]
		public AviStreamIndex()
		{
		}
	}
	[Token(Token = "0x20001EC")]
	public class AVIFile
	{
		[Token(Token = "0x4000AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AVIMainHeader avih;

		[Token(Token = "0x4000AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AVIStreamHeader strhVideo;

		[Token(Token = "0x4000AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BitmapInfoHeader strfVideo;

		[Token(Token = "0x4000AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AVIStreamHeader strhAudio;

		[Token(Token = "0x4000AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public WaveFormatEx strfAudio;

		[Token(Token = "0x4000AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ODMLHeader odml;

		[Token(Token = "0x4000ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AviStreamIndex videoIndex;

		[Token(Token = "0x4000ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AviStreamIndex audioIndex;

		[Token(Token = "0x6000C70")]
		[Address(RVA = "0x15CAFE4", Offset = "0x15CAFE4", VA = "0x15CAFE4")]
		public AVIFile()
		{
		}
	}
	[Token(Token = "0x20001ED")]
	public class AviDemux : Demux
	{
		[Token(Token = "0x4000ADC")]
		public const uint ID_AVI_ = 541677121u;

		[Token(Token = "0x4000ADD")]
		public const uint ID_AVIX = 1481201217u;

		[Token(Token = "0x4000ADE")]
		public const uint ID_hdrl = 1819436136u;

		[Token(Token = "0x4000ADF")]
		public const uint ID_avih = 1751742049u;

		[Token(Token = "0x4000AE0")]
		public const uint ID_strl = 1819440243u;

		[Token(Token = "0x4000AE1")]
		public const uint ID_strh = 1752331379u;

		[Token(Token = "0x4000AE2")]
		public const uint ID_strf = 1718776947u;

		[Token(Token = "0x4000AE3")]
		public const uint ID_odml = 1819108463u;

		[Token(Token = "0x4000AE4")]
		public const uint ID_dmlh = 1751936356u;

		[Token(Token = "0x4000AE5")]
		public const uint ID_movi = 1769369453u;

		[Token(Token = "0x4000AE6")]
		public const uint ID_00dc = 1667510320u;

		[Token(Token = "0x4000AE7")]
		public const uint ID_00db = 1650733104u;

		[Token(Token = "0x4000AE8")]
		public const uint ID_01wb = 1651978544u;

		[Token(Token = "0x4000AE9")]
		public const uint ID_idx1 = 829973609u;

		[Token(Token = "0x4000AEA")]
		public const uint ID_indx = 2019847785u;

		[Token(Token = "0x4000AEB")]
		public const uint FCC_vids = 1935960438u;

		[Token(Token = "0x4000AEC")]
		public const uint FCC_auds = 1935963489u;

		[Token(Token = "0x4000AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AVIFile avi;

		[Token(Token = "0x4000AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AtomicBinaryReader reader;

		[Token(Token = "0x4000AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private uint currentStrh4CC;

		[Token(Token = "0x4000AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private long idx1EntryOffset;

		[Token(Token = "0x4000AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private long idx1Offset;

		[Token(Token = "0x4000AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int idx1Size;

		[Token(Token = "0x4000AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private byte[] rawVideoBuf;

		[Token(Token = "0x4000AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private byte[] rawAudioBuf;

		[Token(Token = "0x4000AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private long[] audioByteIndex;

		[Token(Token = "0x4000AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int nextVideoFrame;

		[Token(Token = "0x4000AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int nextAudioSample;

		[Token(Token = "0x170000AB")]
		public override int VideoPosition
		{
			[Token(Token = "0x6000C73")]
			[Address(RVA = "0x15CC250", Offset = "0x15CC250", VA = "0x15CC250", Slot = "6")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C74")]
			[Address(RVA = "0x15CC258", Offset = "0x15CC258", VA = "0x15CC258", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x170000AC")]
		public override int AudioPosition
		{
			[Token(Token = "0x6000C76")]
			[Address(RVA = "0x15CC4EC", Offset = "0x15CC4EC", VA = "0x15CC4EC", Slot = "9")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C77")]
			[Address(RVA = "0x15CC4F4", Offset = "0x15CC4F4", VA = "0x15CC4F4", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x6000C71")]
		[Address(RVA = "0x15CAFFC", Offset = "0x15CAFFC", VA = "0x15CAFFC", Slot = "4")]
		public override void Init(Stream sourceStream, [Optional] LoadOptions loadOptions)
		{
		}

		[Token(Token = "0x6000C72")]
		[Address(RVA = "0x15CC24C", Offset = "0x15CC24C", VA = "0x15CC24C", Slot = "5")]
		public override void Shutdown(bool force = false)
		{
		}

		[Token(Token = "0x6000C75")]
		[Address(RVA = "0x15CC260", Offset = "0x15CC260", VA = "0x15CC260", Slot = "8")]
		public override int ReadVideoFrame(out byte[] targetBuf)
		{
			return default(int);
		}

		[Token(Token = "0x6000C78")]
		[Address(RVA = "0x15CC4FC", Offset = "0x15CC4FC", VA = "0x15CC4FC", Slot = "11")]
		public override int ReadAudioSamples(out byte[] targetBuf, int sampleCount)
		{
			return default(int);
		}

		[Token(Token = "0x6000C79")]
		[Address(RVA = "0x15CC804", Offset = "0x15CC804", VA = "0x15CC804")]
		private static AVIMainHeader ParseMainHeader(AtomicBinaryReader br, long p)
		{
			return null;
		}

		[Token(Token = "0x6000C7A")]
		[Address(RVA = "0x15CCC04", Offset = "0x15CCC04", VA = "0x15CCC04")]
		private static AVIStreamHeader ParseStreamHeader(AtomicBinaryReader br, long p)
		{
			return null;
		}

		[Token(Token = "0x6000C7B")]
		[Address(RVA = "0x15CD1E0", Offset = "0x15CD1E0", VA = "0x15CD1E0")]
		private static BitmapInfoHeader ParseVideoFormatHeader(AtomicBinaryReader br, long p)
		{
			return null;
		}

		[Token(Token = "0x6000C7C")]
		[Address(RVA = "0x15CD570", Offset = "0x15CD570", VA = "0x15CD570")]
		private static WaveFormatEx ParseAudioFormatHeader(AtomicBinaryReader br, long p)
		{
			return null;
		}

		[Token(Token = "0x6000C7D")]
		[Address(RVA = "0x15CD6F8", Offset = "0x15CD6F8", VA = "0x15CD6F8")]
		private static ODMLHeader ParseOdmlHeader(AtomicBinaryReader br, long p)
		{
			return null;
		}

		[Token(Token = "0x6000C7E")]
		[Address(RVA = "0x15CBC54", Offset = "0x15CBC54", VA = "0x15CBC54")]
		private static AviStreamIndex ParseOldIndex(long idx1Offset, AtomicBinaryReader abr, int size, uint streamId, long idx1EntryOffset)
		{
			return null;
		}

		[Token(Token = "0x6000C7F")]
		[Address(RVA = "0x15CDA60", Offset = "0x15CDA60", VA = "0x15CDA60")]
		private static AviStreamIndex ParseOdmlIndex(AtomicBinaryReader reader, long p, out uint streamId)
		{
			return null;
		}

		[Token(Token = "0x6000C80")]
		[Address(RVA = "0x15CE130", Offset = "0x15CE130", VA = "0x15CE130")]
		private static void ParseChunkIndex(AtomicBinaryReader reader, long p, ref AviStreamIndex index)
		{
		}

		[Token(Token = "0x6000C81")]
		[Address(RVA = "0x15CEA94", Offset = "0x15CEA94", VA = "0x15CEA94")]
		private bool ProcessAviRiff(RiffParser rp, uint fourCC, int length)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C82")]
		[Address(RVA = "0x15CEB3C", Offset = "0x15CEB3C", VA = "0x15CEB3C")]
		private bool ProcessAviList(RiffParser rp, uint fourCC, int length)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C83")]
		[Address(RVA = "0x15CEBDC", Offset = "0x15CEBDC", VA = "0x15CEBDC")]
		private void ProcessAviChunk(RiffParser rp, uint fourCC, int unpaddedLength, int paddedLength)
		{
		}

		[Token(Token = "0x6000C84")]
		[Address(RVA = "0x15CC078", Offset = "0x15CC078", VA = "0x15CC078")]
		private void PrepareAudioStream()
		{
		}

		[Token(Token = "0x6000C85")]
		[Address(RVA = "0x15CBEF4", Offset = "0x15CBEF4", VA = "0x15CBEF4")]
		private void PrepareVideoStream()
		{
		}

		[Token(Token = "0x6000C86")]
		[Address(RVA = "0x15CEF18", Offset = "0x15CEF18", VA = "0x15CEF18")]
		public AviDemux()
		{
		}
	}
	[Token(Token = "0x20001EE")]
	public class AviRemux : Remux
	{
		[Token(Token = "0x2000303")]
		private struct ByteOffsets
		{
			[Token(Token = "0x4000EA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public long indexBase;

			[Token(Token = "0x4000EA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int avih;

			[Token(Token = "0x4000EA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int videoStrh;

			[Token(Token = "0x4000EA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int videoIndx;

			[Token(Token = "0x4000EA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int audioStrh;

			[Token(Token = "0x4000EA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int audioIndx;

			[Token(Token = "0x4000EA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int dmlh;
		}

		[Token(Token = "0x4000AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int maxSuperindexEntries;

		[Token(Token = "0x4000AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int maxRiffElementSize;

		[Token(Token = "0x4000AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RiffWriter writer;

		[Token(Token = "0x4000AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AviStreamIndex videoIndex;

		[Token(Token = "0x4000AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int videoSuperIndexEntryCount;

		[Token(Token = "0x4000AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AviStreamIndex audioIndex;

		[Token(Token = "0x4000AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int audioSuperIndexEntryCount;

		[Token(Token = "0x4000AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool usingMultipleRiffs;

		[Token(Token = "0x4000B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int totalFramesOld;

		[Token(Token = "0x4000B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int totalFrames;

		[Token(Token = "0x4000B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int totalSamples;

		[Token(Token = "0x4000B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private ByteOffsets offsets;

		[Token(Token = "0x170000AD")]
		private bool hasAudioStream
		{
			[Token(Token = "0x6000C87")]
			[Address(RVA = "0x15CEF28", Offset = "0x15CEF28", VA = "0x15CEF28")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000C88")]
		[Address(RVA = "0x15CEF40", Offset = "0x15CEF40", VA = "0x15CEF40")]
		public AviRemux(int maxSuperindexEntries = 32, int maxRiffElementSize = 2000000000)
		{
		}

		[Token(Token = "0x6000C89")]
		[Address(RVA = "0x15CEF80", Offset = "0x15CEF80", VA = "0x15CEF80", Slot = "4")]
		public override void Init(Stream dstStream, VideoStreamInfo videoStreamInfo, AudioStreamInfo audioStreamInfo)
		{
		}

		[Token(Token = "0x6000C8A")]
		[Address(RVA = "0x15D0254", Offset = "0x15D0254", VA = "0x15D0254", Slot = "6")]
		public override void WriteNextVideoFrame(byte[] frameBytes, int size = -1)
		{
		}

		[Token(Token = "0x6000C8B")]
		[Address(RVA = "0x15D0758", Offset = "0x15D0758", VA = "0x15D0758", Slot = "7")]
		public override void WriteVideoFrame(int frameOffset, byte[] frameBytes, int size = -1)
		{
		}

		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0x15D07CC", Offset = "0x15D07CC", VA = "0x15D07CC")]
		public bool WriteLookbackVideoFrame(int frame)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C8D")]
		[Address(RVA = "0x15D0980", Offset = "0x15D0980", VA = "0x15D0980", Slot = "8")]
		public override void WriteNextAudioSamples(byte[] sampleBytes, int size = -1)
		{
		}

		[Token(Token = "0x6000C8E")]
		[Address(RVA = "0x15D0B24", Offset = "0x15D0B24", VA = "0x15D0B24", Slot = "9")]
		public override void WriteAudioSamples(int sampleOffset, byte[] frameBytes, int size = -1)
		{
		}

		[Token(Token = "0x6000C8F")]
		[Address(RVA = "0x15D0B98", Offset = "0x15D0B98", VA = "0x15D0B98", Slot = "5")]
		public override void Shutdown()
		{
		}

		[Token(Token = "0x6000C90")]
		[Address(RVA = "0x15D049C", Offset = "0x15D049C", VA = "0x15D049C")]
		private void StartNewRiff()
		{
		}

		[Token(Token = "0x6000C91")]
		[Address(RVA = "0x15CF3C8", Offset = "0x15CF3C8", VA = "0x15CF3C8")]
		private static int WriteMainHeader(RiffWriter rw, VideoStreamInfo vsi, bool hasAudioStream)
		{
			return default(int);
		}

		[Token(Token = "0x6000C92")]
		[Address(RVA = "0x15CF70C", Offset = "0x15CF70C", VA = "0x15CF70C")]
		private static int WriteVideoStreamHeader(RiffWriter rw, VideoStreamInfo vsi)
		{
			return default(int);
		}

		[Token(Token = "0x6000C93")]
		[Address(RVA = "0x15CFDB0", Offset = "0x15CFDB0", VA = "0x15CFDB0")]
		private static int WriteAudioStreamHeader(RiffWriter rw, AudioStreamInfo asi)
		{
			return default(int);
		}

		[Token(Token = "0x6000C94")]
		[Address(RVA = "0x15D1588", Offset = "0x15D1588", VA = "0x15D1588")]
		private static void FindScaleAndRate(out int scale, out int rate, float framerate)
		{
		}

		[Token(Token = "0x6000C95")]
		[Address(RVA = "0x15CF9C0", Offset = "0x15CF9C0", VA = "0x15CF9C0")]
		private static void WriteVideoFormatHeader(RiffWriter rw, VideoStreamInfo vsi)
		{
		}

		[Token(Token = "0x6000C96")]
		[Address(RVA = "0x15CFFD8", Offset = "0x15CFFD8", VA = "0x15CFFD8")]
		private static void WriteAudioFormatHeader(RiffWriter rw, AudioStreamInfo asi)
		{
		}

		[Token(Token = "0x6000C97")]
		[Address(RVA = "0x15D0190", Offset = "0x15D0190", VA = "0x15D0190")]
		private static int WriteDmlhHeader(RiffWriter rw, int totalFrames)
		{
			return default(int);
		}

		[Token(Token = "0x6000C98")]
		[Address(RVA = "0x15CFBCC", Offset = "0x15CFBCC", VA = "0x15CFBCC")]
		private static int WriteDummySuperIndex(RiffWriter rw, uint streamId, int entriesToReserve)
		{
			return default(int);
		}

		[Token(Token = "0x6000C99")]
		[Address(RVA = "0x15D0E70", Offset = "0x15D0E70", VA = "0x15D0E70")]
		private static void WriteChunkIndex(RiffWriter rw, AviStreamIndex index, int superIndexChunkOffset, ref int superIndexEntryCount, long indexBaseOffset, int maxSuperindexEntries)
		{
		}
	}
}
namespace System.Runtime.Serialization
{
	[Token(Token = "0x20001EF")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x9A5F98", Offset = "0x9A5F98")]
	public sealed class DataContractAttribute : Attribute
	{
		[Token(Token = "0x4000B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string name;

		[Token(Token = "0x4000B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string ns;

		[Token(Token = "0x4000B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7C30", Offset = "0x9A7C30")]
		private bool <IsReference>k__BackingField;

		[Token(Token = "0x170000AE")]
		public string Name
		{
			[Token(Token = "0x6000C9B")]
			[Address(RVA = "0x19F61D4", Offset = "0x19F61D4", VA = "0x19F61D4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C9C")]
			[Address(RVA = "0x19F61DC", Offset = "0x19F61DC", VA = "0x19F61DC")]
			set
			{
			}
		}

		[Token(Token = "0x170000AF")]
		public string Namespace
		{
			[Token(Token = "0x6000C9D")]
			[Address(RVA = "0x19F61E4", Offset = "0x19F61E4", VA = "0x19F61E4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C9E")]
			[Address(RVA = "0x19F61EC", Offset = "0x19F61EC", VA = "0x19F61EC")]
			set
			{
			}
		}

		[Token(Token = "0x170000B0")]
		public bool IsReference
		{
			[Token(Token = "0x6000C9F")]
			[Address(RVA = "0x19F61F4", Offset = "0x19F61F4", VA = "0x19F61F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A90F8", Offset = "0x9A90F8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CA0")]
			[Address(RVA = "0x19F61FC", Offset = "0x19F61FC", VA = "0x19F61FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9108", Offset = "0x9A9108")]
			set
			{
			}
		}

		[Token(Token = "0x6000C9A")]
		[Address(RVA = "0x19F61CC", Offset = "0x19F61CC", VA = "0x19F61CC")]
		public DataContractAttribute()
		{
		}
	}
	[Token(Token = "0x20001F0")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x9A5FE4", Offset = "0x9A5FE4")]
	public sealed class DataMemberAttribute : Attribute
	{
		[Token(Token = "0x4000B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool is_required;

		[Token(Token = "0x4000B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool emit_default;

		[Token(Token = "0x4000B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string name;

		[Token(Token = "0x4000B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int order;

		[Token(Token = "0x170000B1")]
		public bool EmitDefaultValue
		{
			[Token(Token = "0x6000CA2")]
			[Address(RVA = "0x19F6220", Offset = "0x19F6220", VA = "0x19F6220")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CA3")]
			[Address(RVA = "0x19F6228", Offset = "0x19F6228", VA = "0x19F6228")]
			set
			{
			}
		}

		[Token(Token = "0x170000B2")]
		public bool IsRequired
		{
			[Token(Token = "0x6000CA4")]
			[Address(RVA = "0x19F6234", Offset = "0x19F6234", VA = "0x19F6234")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CA5")]
			[Address(RVA = "0x19F623C", Offset = "0x19F623C", VA = "0x19F623C")]
			set
			{
			}
		}

		[Token(Token = "0x170000B3")]
		public string Name
		{
			[Token(Token = "0x6000CA6")]
			[Address(RVA = "0x19F6248", Offset = "0x19F6248", VA = "0x19F6248")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CA7")]
			[Address(RVA = "0x19F6250", Offset = "0x19F6250", VA = "0x19F6250")]
			set
			{
			}
		}

		[Token(Token = "0x170000B4")]
		public int Order
		{
			[Token(Token = "0x6000CA8")]
			[Address(RVA = "0x19F6258", Offset = "0x19F6258", VA = "0x19F6258")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000CA9")]
			[Address(RVA = "0x19F6260", Offset = "0x19F6260", VA = "0x19F6260")]
			set
			{
			}
		}

		[Token(Token = "0x6000CA1")]
		[Address(RVA = "0x19F6208", Offset = "0x19F6208", VA = "0x19F6208")]
		public DataMemberAttribute()
		{
		}
	}
	[Token(Token = "0x20001F1")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x9A6030", Offset = "0x9A6030")]
	public sealed class EnumMemberAttribute : Attribute
	{
		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string value;

		[Token(Token = "0x170000B5")]
		public string Value
		{
			[Token(Token = "0x6000CAB")]
			[Address(RVA = "0x19F6270", Offset = "0x19F6270", VA = "0x19F6270")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CAC")]
			[Address(RVA = "0x19F6278", Offset = "0x19F6278", VA = "0x19F6278")]
			set
			{
			}
		}

		[Token(Token = "0x6000CAA")]
		[Address(RVA = "0x19F6268", Offset = "0x19F6268", VA = "0x19F6268")]
		public EnumMemberAttribute()
		{
		}
	}
}
namespace Newtonsoft.Json
{
	[Token(Token = "0x20001F2")]
	public enum ConstructorHandling
	{
		[Token(Token = "0x4000B0D")]
		Default,
		[Token(Token = "0x4000B0E")]
		AllowNonPublicDefaultConstructor
	}
	[Token(Token = "0x20001F3")]
	[Flags]
	public enum DefaultValueHandling
	{
		[Token(Token = "0x4000B10")]
		Include = 0,
		[Token(Token = "0x4000B11")]
		Ignore = 1,
		[Token(Token = "0x4000B12")]
		Populate = 2,
		[Token(Token = "0x4000B13")]
		IgnoreAndPopulate = 3
	}
	[Token(Token = "0x20001F4")]
	public interface IJsonLineInfo
	{
		[Token(Token = "0x170000B6")]
		int LineNumber
		{
			[Token(Token = "0x6000CAE")]
			get;
		}

		[Token(Token = "0x170000B7")]
		int LinePosition
		{
			[Token(Token = "0x6000CAF")]
			get;
		}

		[Token(Token = "0x6000CAD")]
		bool HasLineInfo();
	}
	[Token(Token = "0x20001F5")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x9A608C", Offset = "0x9A608C")]
	public sealed class JsonArrayAttribute : JsonContainerAttribute
	{
		[Token(Token = "0x4000B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		private bool _allowNullItems;

		[Token(Token = "0x170000B8")]
		public bool AllowNullItems
		{
			[Token(Token = "0x6000CB0")]
			[Address(RVA = "0x12E93C8", Offset = "0x12E93C8", VA = "0x12E93C8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CB1")]
			[Address(RVA = "0x12E93D0", Offset = "0x12E93D0", VA = "0x12E93D0")]
			set
			{
			}
		}

		[Token(Token = "0x6000CB2")]
		[Address(RVA = "0x12E93DC", Offset = "0x12E93DC", VA = "0x12E93DC")]
		public JsonArrayAttribute()
		{
		}

		[Token(Token = "0x6000CB3")]
		[Address(RVA = "0x12E93EC", Offset = "0x12E93EC", VA = "0x12E93EC")]
		public JsonArrayAttribute(bool allowNullItems)
		{
		}

		[Token(Token = "0x6000CB4")]
		[Address(RVA = "0x12E941C", Offset = "0x12E941C", VA = "0x12E941C")]
		public JsonArrayAttribute(string id)
		{
		}
	}
	[Token(Token = "0x20001F6")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x9A60C8", Offset = "0x9A60C8")]
	public sealed class JsonConstructorAttribute : Attribute
	{
		[Token(Token = "0x6000CB5")]
		[Address(RVA = "0x12E9474", Offset = "0x12E9474", VA = "0x12E9474")]
		public JsonConstructorAttribute()
		{
		}
	}
	[Token(Token = "0x20001F7")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x9A6104", Offset = "0x9A6104")]
	public abstract class JsonContainerAttribute : Attribute
	{
		[Token(Token = "0x4000B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7C40", Offset = "0x9A7C40")]
		private string <Id>k__BackingField;

		[Token(Token = "0x4000B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7C50", Offset = "0x9A7C50")]
		private string <Title>k__BackingField;

		[Token(Token = "0x4000B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7C60", Offset = "0x9A7C60")]
		private string <Description>k__BackingField;

		[Token(Token = "0x4000B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal bool? _isReference;

		[Token(Token = "0x170000B9")]
		public string Id
		{
			[Token(Token = "0x6000CB6")]
			[Address(RVA = "0x12E947C", Offset = "0x12E947C", VA = "0x12E947C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9118", Offset = "0x9A9118")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CB7")]
			[Address(RVA = "0x12E9484", Offset = "0x12E9484", VA = "0x12E9484")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9128", Offset = "0x9A9128")]
			set
			{
			}
		}

		[Token(Token = "0x170000BA")]
		public string Title
		{
			[Token(Token = "0x6000CB8")]
			[Address(RVA = "0x12E948C", Offset = "0x12E948C", VA = "0x12E948C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9138", Offset = "0x9A9138")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CB9")]
			[Address(RVA = "0x12E9494", Offset = "0x12E9494", VA = "0x12E9494")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9148", Offset = "0x9A9148")]
			set
			{
			}
		}

		[Token(Token = "0x170000BB")]
		public string Description
		{
			[Token(Token = "0x6000CBA")]
			[Address(RVA = "0x12E949C", Offset = "0x12E949C", VA = "0x12E949C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9158", Offset = "0x9A9158")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CBB")]
			[Address(RVA = "0x12E94A4", Offset = "0x12E94A4", VA = "0x12E94A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9168", Offset = "0x9A9168")]
			set
			{
			}
		}

		[Token(Token = "0x170000BC")]
		public bool IsReference
		{
			[Token(Token = "0x6000CBC")]
			[Address(RVA = "0x12E94AC", Offset = "0x12E94AC", VA = "0x12E94AC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CBD")]
			[Address(RVA = "0x12E9534", Offset = "0x12E9534", VA = "0x12E9534")]
			set
			{
			}
		}

		[Token(Token = "0x6000CBE")]
		[Address(RVA = "0x12E93E4", Offset = "0x12E93E4", VA = "0x12E93E4")]
		protected JsonContainerAttribute()
		{
		}

		[Token(Token = "0x6000CBF")]
		[Address(RVA = "0x12E9448", Offset = "0x12E9448", VA = "0x12E9448")]
		protected JsonContainerAttribute(string id)
		{
		}
	}
	[Token(Token = "0x20001F8")]
	public static class JsonConvert
	{
		[Token(Token = "0x4000B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string True;

		[Token(Token = "0x4000B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly string False;

		[Token(Token = "0x4000B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly string Null;

		[Token(Token = "0x4000B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly string Undefined;

		[Token(Token = "0x4000B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly string PositiveInfinity;

		[Token(Token = "0x4000B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly string NegativeInfinity;

		[Token(Token = "0x4000B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly string NaN;

		[Token(Token = "0x4000B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal static readonly long InitialJavaScriptDateTicks;

		[Token(Token = "0x6000CC0")]
		[Address(RVA = "0x12E95A4", Offset = "0x12E95A4", VA = "0x12E95A4")]
		public static string ToString(DateTime value)
		{
			return null;
		}

		[Token(Token = "0x6000CC1")]
		[Address(RVA = "0x12E99D0", Offset = "0x12E99D0", VA = "0x12E99D0")]
		public static string ToString(DateTimeOffset value)
		{
			return null;
		}

		[Token(Token = "0x6000CC2")]
		[Address(RVA = "0x12E9724", Offset = "0x12E9724", VA = "0x12E9724")]
		private static TimeSpan GetUtcOffset(DateTime dateTime)
		{
			return default(TimeSpan);
		}

		[Token(Token = "0x6000CC3")]
		[Address(RVA = "0x12E9B58", Offset = "0x12E9B58", VA = "0x12E9B58")]
		internal static void WriteDateTimeString(TextWriter writer, DateTime value)
		{
		}

		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0x12E97A8", Offset = "0x12E97A8", VA = "0x12E97A8")]
		internal static void WriteDateTimeString(TextWriter writer, DateTime value, TimeSpan offset, DateTimeKind kind)
		{
		}

		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0x12E9C6C", Offset = "0x12E9C6C", VA = "0x12E9C6C")]
		private static long ToUniversalTicks(DateTime dateTime)
		{
			return default(long);
		}

		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0x12E9D08", Offset = "0x12E9D08", VA = "0x12E9D08")]
		private static long ToUniversalTicks(DateTime dateTime, TimeSpan offset)
		{
			return default(long);
		}

		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0x12E9BF4", Offset = "0x12E9BF4", VA = "0x12E9BF4")]
		internal static long ConvertDateTimeToJavaScriptTicks(DateTime dateTime, TimeSpan offset)
		{
			return default(long);
		}

		[Token(Token = "0x6000CC8")]
		[Address(RVA = "0x12DF9B8", Offset = "0x12DF9B8", VA = "0x12DF9B8")]
		internal static long ConvertDateTimeToJavaScriptTicks(DateTime dateTime)
		{
			return default(long);
		}

		[Token(Token = "0x6000CC9")]
		[Address(RVA = "0x12E9E1C", Offset = "0x12E9E1C", VA = "0x12E9E1C")]
		internal static long ConvertDateTimeToJavaScriptTicks(DateTime dateTime, bool convertToUtc)
		{
			return default(long);
		}

		[Token(Token = "0x6000CCA")]
		[Address(RVA = "0x12E9D90", Offset = "0x12E9D90", VA = "0x12E9D90")]
		private static long UniversialTicksToJavaScriptTicks(long universialTicks)
		{
			return default(long);
		}

		[Token(Token = "0x6000CCB")]
		[Address(RVA = "0x12DFFB4", Offset = "0x12DFFB4", VA = "0x12DFFB4")]
		internal static DateTime ConvertJavaScriptTicksToDateTime(long javaScriptTicks)
		{
			return default(DateTime);
		}

		[Token(Token = "0x6000CCC")]
		[Address(RVA = "0x12E9ED4", Offset = "0x12E9ED4", VA = "0x12E9ED4")]
		public static string ToString(bool value)
		{
			return null;
		}

		[Token(Token = "0x6000CCD")]
		[Address(RVA = "0x12E9F64", Offset = "0x12E9F64", VA = "0x12E9F64")]
		public static string ToString(char value)
		{
			return null;
		}

		[Token(Token = "0x6000CCE")]
		[Address(RVA = "0x12EA06C", Offset = "0x12EA06C", VA = "0x12EA06C")]
		public static string ToString(Enum value)
		{
			return null;
		}

		[Token(Token = "0x6000CCF")]
		[Address(RVA = "0x12EA0CC", Offset = "0x12EA0CC", VA = "0x12EA0CC")]
		public static string ToString(int value)
		{
			return null;
		}

		[Token(Token = "0x6000CD0")]
		[Address(RVA = "0x12EA148", Offset = "0x12EA148", VA = "0x12EA148")]
		public static string ToString(short value)
		{
			return null;
		}

		[Token(Token = "0x6000CD1")]
		[Address(RVA = "0x12EA1C4", Offset = "0x12EA1C4", VA = "0x12EA1C4")]
		public static string ToString(ushort value)
		{
			return null;
		}

		[Token(Token = "0x6000CD2")]
		[Address(RVA = "0x12EA240", Offset = "0x12EA240", VA = "0x12EA240")]
		public static string ToString(uint value)
		{
			return null;
		}

		[Token(Token = "0x6000CD3")]
		[Address(RVA = "0x12EA2BC", Offset = "0x12EA2BC", VA = "0x12EA2BC")]
		public static string ToString(long value)
		{
			return null;
		}

		[Token(Token = "0x6000CD4")]
		[Address(RVA = "0x12EA338", Offset = "0x12EA338", VA = "0x12EA338")]
		public static string ToString(ulong value)
		{
			return null;
		}

		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0x12EA3B4", Offset = "0x12EA3B4", VA = "0x12EA3B4")]
		public static string ToString(float value)
		{
			return null;
		}

		[Token(Token = "0x6000CD6")]
		[Address(RVA = "0x12EA594", Offset = "0x12EA594", VA = "0x12EA594")]
		public static string ToString(double value)
		{
			return null;
		}

		[Token(Token = "0x6000CD7")]
		[Address(RVA = "0x12EA480", Offset = "0x12EA480", VA = "0x12EA480")]
		private static string EnsureDecimalPlace(double value, string text)
		{
			return null;
		}

		[Token(Token = "0x6000CD8")]
		[Address(RVA = "0x12EA660", Offset = "0x12EA660", VA = "0x12EA660")]
		private static string EnsureDecimalPlace(string text)
		{
			return null;
		}

		[Token(Token = "0x6000CD9")]
		[Address(RVA = "0x12EA6E8", Offset = "0x12EA6E8", VA = "0x12EA6E8")]
		public static string ToString(byte value)
		{
			return null;
		}

		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0x12EA764", Offset = "0x12EA764", VA = "0x12EA764")]
		public static string ToString(sbyte value)
		{
			return null;
		}

		[Token(Token = "0x6000CDB")]
		[Address(RVA = "0x12EA7E0", Offset = "0x12EA7E0", VA = "0x12EA7E0")]
		public static string ToString(decimal value)
		{
			return null;
		}

		[Token(Token = "0x6000CDC")]
		[Address(RVA = "0x12EA894", Offset = "0x12EA894", VA = "0x12EA894")]
		public static string ToString(Guid value)
		{
			return null;
		}

		[Token(Token = "0x6000CDD")]
		[Address(RVA = "0x12EA940", Offset = "0x12EA940", VA = "0x12EA940")]
		public static string ToString(TimeSpan value)
		{
			return null;
		}

		[Token(Token = "0x6000CDE")]
		[Address(RVA = "0x12EA9AC", Offset = "0x12EA9AC", VA = "0x12EA9AC")]
		public static string ToString(Uri value)
		{
			return null;
		}

		[Token(Token = "0x6000CDF")]
		[Address(RVA = "0x12E9FFC", Offset = "0x12E9FFC", VA = "0x12E9FFC")]
		public static string ToString(string value)
		{
			return null;
		}

		[Token(Token = "0x6000CE0")]
		[Address(RVA = "0x12EAA24", Offset = "0x12EAA24", VA = "0x12EAA24")]
		public static string ToString(string value, char delimter)
		{
			return null;
		}

		[Token(Token = "0x6000CE1")]
		[Address(RVA = "0x12EAA30", Offset = "0x12EAA30", VA = "0x12EAA30")]
		public static string ToString(object value)
		{
			return null;
		}

		[Token(Token = "0x6000CE2")]
		[Address(RVA = "0x12EBADC", Offset = "0x12EBADC", VA = "0x12EBADC")]
		private static bool IsJsonPrimitiveTypeCode(TypeCode typeCode)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0x12EBAFC", Offset = "0x12EBAFC", VA = "0x12EBAFC")]
		internal static bool IsJsonPrimitiveType(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CE4")]
		[Address(RVA = "0x12EBD2C", Offset = "0x12EBD2C", VA = "0x12EBD2C")]
		internal static bool IsJsonPrimitive(object value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CE5")]
		[Address(RVA = "0x12EBEE8", Offset = "0x12EBEE8", VA = "0x12EBEE8")]
		public static string SerializeObject(object value)
		{
			return null;
		}

		[Token(Token = "0x6000CE6")]
		[Address(RVA = "0x12EC140", Offset = "0x12EC140", VA = "0x12EC140")]
		public static string SerializeObject(object value, Formatting formatting)
		{
			return null;
		}

		[Token(Token = "0x6000CE7")]
		[Address(RVA = "0x12EC1B8", Offset = "0x12EC1B8", VA = "0x12EC1B8")]
		public static string SerializeObject(object value, params JsonConverter[] converters)
		{
			return null;
		}

		[Token(Token = "0x6000CE8")]
		[Address(RVA = "0x12EC230", Offset = "0x12EC230", VA = "0x12EC230")]
		public static string SerializeObject(object value, Formatting formatting, params JsonConverter[] converters)
		{
			return null;
		}

		[Token(Token = "0x6000CE9")]
		[Address(RVA = "0x12EBF54", Offset = "0x12EBF54", VA = "0x12EBF54")]
		public static string SerializeObject(object value, Formatting formatting, JsonSerializerSettings settings)
		{
			return null;
		}

		[Token(Token = "0x6000CEA")]
		[Address(RVA = "0x12EC754", Offset = "0x12EC754", VA = "0x12EC754")]
		public static object DeserializeObject(string value)
		{
			return null;
		}

		[Token(Token = "0x6000CEB")]
		[Address(RVA = "0x12EC9BC", Offset = "0x12EC9BC", VA = "0x12EC9BC")]
		public static object DeserializeObject(string value, JsonSerializerSettings settings)
		{
			return null;
		}

		[Token(Token = "0x6000CEC")]
		[Address(RVA = "0x12ECA34", Offset = "0x12ECA34", VA = "0x12ECA34")]
		public static object DeserializeObject(string value, Type type)
		{
			return null;
		}

		[Token(Token = "0x6000CED")]
		public static T DeserializeObject<T>(string value)
		{
			return (T)null;
		}

		[Token(Token = "0x6000CEE")]
		public static T DeserializeAnonymousType<T>(string value, T anonymousTypeObject)
		{
			return (T)null;
		}

		[Token(Token = "0x6000CEF")]
		public static T DeserializeObject<T>(string value, params JsonConverter[] converters)
		{
			return (T)null;
		}

		[Token(Token = "0x6000CF0")]
		public static T DeserializeObject<T>(string value, JsonSerializerSettings settings)
		{
			return (T)null;
		}

		[Token(Token = "0x6000CF1")]
		[Address(RVA = "0x12ECAAC", Offset = "0x12ECAAC", VA = "0x12ECAAC")]
		public static object DeserializeObject(string value, Type type, params JsonConverter[] converters)
		{
			return null;
		}

		[Token(Token = "0x6000CF2")]
		[Address(RVA = "0x12EC7C0", Offset = "0x12EC7C0", VA = "0x12EC7C0")]
		public static object DeserializeObject(string value, Type type, JsonSerializerSettings settings)
		{
			return null;
		}

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0x12ECC30", Offset = "0x12ECC30", VA = "0x12ECC30")]
		public static void PopulateObject(string value, object target)
		{
		}

		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0x12ECCA8", Offset = "0x12ECCA8", VA = "0x12ECCA8")]
		public static void PopulateObject(string value, object target, JsonSerializerSettings settings)
		{
		}

		[Token(Token = "0x6000CF5")]
		[Address(RVA = "0x12ECEB4", Offset = "0x12ECEB4", VA = "0x12ECEB4")]
		public static string SerializeXmlNode(XmlNode node)
		{
			return null;
		}

		[Token(Token = "0x6000CF6")]
		[Address(RVA = "0x12ECF1C", Offset = "0x12ECF1C", VA = "0x12ECF1C")]
		public static string SerializeXmlNode(XmlNode node, Formatting formatting)
		{
			return null;
		}

		[Token(Token = "0x6000CF7")]
		[Address(RVA = "0x12ED01C", Offset = "0x12ED01C", VA = "0x12ED01C")]
		public static string SerializeXmlNode(XmlNode node, Formatting formatting, bool omitRootObject)
		{
			return null;
		}

		[Token(Token = "0x6000CF8")]
		[Address(RVA = "0x12ED128", Offset = "0x12ED128", VA = "0x12ED128")]
		public static XmlDocument DeserializeXmlNode(string value)
		{
			return null;
		}

		[Token(Token = "0x6000CF9")]
		[Address(RVA = "0x12ED190", Offset = "0x12ED190", VA = "0x12ED190")]
		public static XmlDocument DeserializeXmlNode(string value, string deserializeRootElementName)
		{
			return null;
		}

		[Token(Token = "0x6000CFA")]
		[Address(RVA = "0x12ED208", Offset = "0x12ED208", VA = "0x12ED208")]
		public static XmlDocument DeserializeXmlNode(string value, string deserializeRootElementName, bool writeArrayAttribute)
		{
			return null;
		}
	}
	[Token(Token = "0x20001F9")]
	public abstract class JsonConverter
	{
		[Token(Token = "0x170000BD")]
		public virtual bool CanRead
		{
			[Token(Token = "0x6000D00")]
			[Address(RVA = "0x12ED4F0", Offset = "0x12ED4F0", VA = "0x12ED4F0", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000BE")]
		public virtual bool CanWrite
		{
			[Token(Token = "0x6000D01")]
			[Address(RVA = "0x12ED4F8", Offset = "0x12ED4F8", VA = "0x12ED4F8", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000CFC")]
		public abstract void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);

		[Token(Token = "0x6000CFD")]
		public abstract object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);

		[Token(Token = "0x6000CFE")]
		public abstract bool CanConvert(Type objectType);

		[Token(Token = "0x6000CFF")]
		[Address(RVA = "0x12ED4E8", Offset = "0x12ED4E8", VA = "0x12ED4E8", Slot = "7")]
		public virtual JsonSchema GetSchema()
		{
			return null;
		}

		[Token(Token = "0x6000D02")]
		[Address(RVA = "0x12DEE60", Offset = "0x12DEE60", VA = "0x12DEE60")]
		protected JsonConverter()
		{
		}
	}
	[Token(Token = "0x20001FA")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x9A6140", Offset = "0x9A6140")]
	public sealed class JsonConverterAttribute : Attribute
	{
		[Token(Token = "0x4000B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Type _converterType;

		[Token(Token = "0x170000BF")]
		public Type ConverterType
		{
			[Token(Token = "0x6000D03")]
			[Address(RVA = "0x12ED500", Offset = "0x12ED500", VA = "0x12ED500")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D04")]
		[Address(RVA = "0x12ED508", Offset = "0x12ED508", VA = "0x12ED508")]
		public JsonConverterAttribute(Type converterType)
		{
		}

		[Token(Token = "0x6000D05")]
		[Address(RVA = "0x12ED5DC", Offset = "0x12ED5DC", VA = "0x12ED5DC")]
		internal static JsonConverter CreateJsonConverterInstance(Type converterType)
		{
			return null;
		}
	}
	[Token(Token = "0x20001FB")]
	public class JsonConverterCollection : Collection<JsonConverter>
	{
		[Token(Token = "0x6000D06")]
		[Address(RVA = "0x12ED7F4", Offset = "0x12ED7F4", VA = "0x12ED7F4")]
		public JsonConverterCollection()
		{
		}
	}
	[Token(Token = "0x20001FC")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x9A617C", Offset = "0x9A617C")]
	public sealed class JsonIgnoreAttribute : Attribute
	{
		[Token(Token = "0x6000D07")]
		[Address(RVA = "0x12ED844", Offset = "0x12ED844", VA = "0x12ED844")]
		public JsonIgnoreAttribute()
		{
		}
	}
	[Token(Token = "0x20001FD")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x9A61B8", Offset = "0x9A61B8")]
	public sealed class JsonObjectAttribute : JsonContainerAttribute
	{
		[Token(Token = "0x4000B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private MemberSerialization _memberSerialization;

		[Token(Token = "0x170000C0")]
		public MemberSerialization MemberSerialization
		{
			[Token(Token = "0x6000D08")]
			[Address(RVA = "0x12ED84C", Offset = "0x12ED84C", VA = "0x12ED84C")]
			get
			{
				return default(MemberSerialization);
			}
			[Token(Token = "0x6000D09")]
			[Address(RVA = "0x12ED854", Offset = "0x12ED854", VA = "0x12ED854")]
			set
			{
			}
		}

		[Token(Token = "0x6000D0A")]
		[Address(RVA = "0x12ED85C", Offset = "0x12ED85C", VA = "0x12ED85C")]
		public JsonObjectAttribute()
		{
		}

		[Token(Token = "0x6000D0B")]
		[Address(RVA = "0x12ED864", Offset = "0x12ED864", VA = "0x12ED864")]
		public JsonObjectAttribute(MemberSerialization memberSerialization)
		{
		}

		[Token(Token = "0x6000D0C")]
		[Address(RVA = "0x12ED890", Offset = "0x12ED890", VA = "0x12ED890")]
		public JsonObjectAttribute(string id)
		{
		}
	}
	[Token(Token = "0x20001FE")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x9A61F4", Offset = "0x9A61F4")]
	public sealed class JsonPropertyAttribute : Attribute
	{
		[Token(Token = "0x4000B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal NullValueHandling? _nullValueHandling;

		[Token(Token = "0x4000B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal DefaultValueHandling? _defaultValueHandling;

		[Token(Token = "0x4000B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal ReferenceLoopHandling? _referenceLoopHandling;

		[Token(Token = "0x4000B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal ObjectCreationHandling? _objectCreationHandling;

		[Token(Token = "0x4000B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal TypeNameHandling? _typeNameHandling;

		[Token(Token = "0x4000B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal bool? _isReference;

		[Token(Token = "0x4000B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		internal int? _order;

		[Token(Token = "0x4000B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7C70", Offset = "0x9A7C70")]
		private string <PropertyName>k__BackingField;

		[Token(Token = "0x4000B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7C80", Offset = "0x9A7C80")]
		private Required <Required>k__BackingField;

		[Token(Token = "0x170000C1")]
		public NullValueHandling NullValueHandling
		{
			[Token(Token = "0x6000D0D")]
			[Address(RVA = "0x12ED8BC", Offset = "0x12ED8BC", VA = "0x12ED8BC")]
			get
			{
				return default(NullValueHandling);
			}
			[Token(Token = "0x6000D0E")]
			[Address(RVA = "0x12ED940", Offset = "0x12ED940", VA = "0x12ED940")]
			set
			{
			}
		}

		[Token(Token = "0x170000C2")]
		public DefaultValueHandling DefaultValueHandling
		{
			[Token(Token = "0x6000D0F")]
			[Address(RVA = "0x12ED9B0", Offset = "0x12ED9B0", VA = "0x12ED9B0")]
			get
			{
				return default(DefaultValueHandling);
			}
			[Token(Token = "0x6000D10")]
			[Address(RVA = "0x12EDA34", Offset = "0x12EDA34", VA = "0x12EDA34")]
			set
			{
			}
		}

		[Token(Token = "0x170000C3")]
		public ReferenceLoopHandling ReferenceLoopHandling
		{
			[Token(Token = "0x6000D11")]
			[Address(RVA = "0x12EDAA4", Offset = "0x12EDAA4", VA = "0x12EDAA4")]
			get
			{
				return default(ReferenceLoopHandling);
			}
			[Token(Token = "0x6000D12")]
			[Address(RVA = "0x12EDB28", Offset = "0x12EDB28", VA = "0x12EDB28")]
			set
			{
			}
		}

		[Token(Token = "0x170000C4")]
		public ObjectCreationHandling ObjectCreationHandling
		{
			[Token(Token = "0x6000D13")]
			[Address(RVA = "0x12EDB98", Offset = "0x12EDB98", VA = "0x12EDB98")]
			get
			{
				return default(ObjectCreationHandling);
			}
			[Token(Token = "0x6000D14")]
			[Address(RVA = "0x12EDC1C", Offset = "0x12EDC1C", VA = "0x12EDC1C")]
			set
			{
			}
		}

		[Token(Token = "0x170000C5")]
		public TypeNameHandling TypeNameHandling
		{
			[Token(Token = "0x6000D15")]
			[Address(RVA = "0x12EDC8C", Offset = "0x12EDC8C", VA = "0x12EDC8C")]
			get
			{
				return default(TypeNameHandling);
			}
			[Token(Token = "0x6000D16")]
			[Address(RVA = "0x12EDD10", Offset = "0x12EDD10", VA = "0x12EDD10")]
			set
			{
			}
		}

		[Token(Token = "0x170000C6")]
		public bool IsReference
		{
			[Token(Token = "0x6000D17")]
			[Address(RVA = "0x12EDD80", Offset = "0x12EDD80", VA = "0x12EDD80")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D18")]
			[Address(RVA = "0x12EDE08", Offset = "0x12EDE08", VA = "0x12EDE08")]
			set
			{
			}
		}

		[Token(Token = "0x170000C7")]
		public int Order
		{
			[Token(Token = "0x6000D19")]
			[Address(RVA = "0x12EDE78", Offset = "0x12EDE78", VA = "0x12EDE78")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D1A")]
			[Address(RVA = "0x12EDEFC", Offset = "0x12EDEFC", VA = "0x12EDEFC")]
			set
			{
			}
		}

		[Token(Token = "0x170000C8")]
		public string PropertyName
		{
			[Token(Token = "0x6000D1B")]
			[Address(RVA = "0x12EDF6C", Offset = "0x12EDF6C", VA = "0x12EDF6C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9178", Offset = "0x9A9178")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D1C")]
			[Address(RVA = "0x12EDF74", Offset = "0x12EDF74", VA = "0x12EDF74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9188", Offset = "0x9A9188")]
			set
			{
			}
		}

		[Token(Token = "0x170000C9")]
		public Required Required
		{
			[Token(Token = "0x6000D1D")]
			[Address(RVA = "0x12EDF7C", Offset = "0x12EDF7C", VA = "0x12EDF7C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9198", Offset = "0x9A9198")]
			get
			{
				return default(Required);
			}
			[Token(Token = "0x6000D1E")]
			[Address(RVA = "0x12EDF84", Offset = "0x12EDF84", VA = "0x12EDF84")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A91A8", Offset = "0x9A91A8")]
			set
			{
			}
		}

		[Token(Token = "0x6000D1F")]
		[Address(RVA = "0x12EDF8C", Offset = "0x12EDF8C", VA = "0x12EDF8C")]
		public JsonPropertyAttribute()
		{
		}

		[Token(Token = "0x6000D20")]
		[Address(RVA = "0x12EDF94", Offset = "0x12EDF94", VA = "0x12EDF94")]
		public JsonPropertyAttribute(string propertyName)
		{
		}
	}
	[Token(Token = "0x20001FF")]
	public abstract class JsonReader : IDisposable
	{
		[Token(Token = "0x2000304")]
		protected enum State
		{
			[Token(Token = "0x4000EA8")]
			Start,
			[Token(Token = "0x4000EA9")]
			Complete,
			[Token(Token = "0x4000EAA")]
			Property,
			[Token(Token = "0x4000EAB")]
			ObjectStart,
			[Token(Token = "0x4000EAC")]
			Object,
			[Token(Token = "0x4000EAD")]
			ArrayStart,
			[Token(Token = "0x4000EAE")]
			Array,
			[Token(Token = "0x4000EAF")]
			Closed,
			[Token(Token = "0x4000EB0")]
			PostValue,
			[Token(Token = "0x4000EB1")]
			ConstructorStart,
			[Token(Token = "0x4000EB2")]
			Constructor,
			[Token(Token = "0x4000EB3")]
			Error,
			[Token(Token = "0x4000EB4")]
			Finished
		}

		[Token(Token = "0x4000B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private JsonToken _token;

		[Token(Token = "0x4000B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object _value;

		[Token(Token = "0x4000B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Type _valueType;

		[Token(Token = "0x4000B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private char _quoteChar;

		[Token(Token = "0x4000B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private State _currentState;

		[Token(Token = "0x4000B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private JTokenType _currentTypeContext;

		[Token(Token = "0x4000B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int _top;

		[Token(Token = "0x4000B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly List<JTokenType> _stack;

		[Token(Token = "0x4000B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7C90", Offset = "0x9A7C90")]
		private bool <CloseInput>k__BackingField;

		[Token(Token = "0x170000CA")]
		protected State CurrentState
		{
			[Token(Token = "0x6000D21")]
			[Address(RVA = "0x12EDFC0", Offset = "0x12EDFC0", VA = "0x12EDFC0")]
			get
			{
				return default(State);
			}
		}

		[Token(Token = "0x170000CB")]
		public bool CloseInput
		{
			[Token(Token = "0x6000D22")]
			[Address(RVA = "0x12EDFC8", Offset = "0x12EDFC8", VA = "0x12EDFC8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A91B8", Offset = "0x9A91B8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D23")]
			[Address(RVA = "0x12EDFD0", Offset = "0x12EDFD0", VA = "0x12EDFD0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A91C8", Offset = "0x9A91C8")]
			set
			{
			}
		}

		[Token(Token = "0x170000CC")]
		public virtual char QuoteChar
		{
			[Token(Token = "0x6000D24")]
			[Address(RVA = "0x12EDFDC", Offset = "0x12EDFDC", VA = "0x12EDFDC", Slot = "5")]
			get
			{
				return default(char);
			}
			[Token(Token = "0x6000D25")]
			[Address(RVA = "0x12EDFE4", Offset = "0x12EDFE4", VA = "0x12EDFE4", Slot = "6")]
			protected internal set
			{
			}
		}

		[Token(Token = "0x170000CD")]
		public virtual JsonToken TokenType
		{
			[Token(Token = "0x6000D26")]
			[Address(RVA = "0x12EDFEC", Offset = "0x12EDFEC", VA = "0x12EDFEC", Slot = "7")]
			get
			{
				return default(JsonToken);
			}
		}

		[Token(Token = "0x170000CE")]
		public virtual object Value
		{
			[Token(Token = "0x6000D27")]
			[Address(RVA = "0x12EDFF4", Offset = "0x12EDFF4", VA = "0x12EDFF4", Slot = "8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000CF")]
		public virtual Type ValueType
		{
			[Token(Token = "0x6000D28")]
			[Address(RVA = "0x12EDFFC", Offset = "0x12EDFFC", VA = "0x12EDFFC", Slot = "9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D0")]
		public virtual int Depth
		{
			[Token(Token = "0x6000D29")]
			[Address(RVA = "0x12EE004", Offset = "0x12EE004", VA = "0x12EE004", Slot = "10")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000D2A")]
		[Address(RVA = "0x12EE0F8", Offset = "0x12EE0F8", VA = "0x12EE0F8")]
		protected JsonReader()
		{
		}

		[Token(Token = "0x6000D2B")]
		[Address(RVA = "0x12EE180", Offset = "0x12EE180", VA = "0x12EE180")]
		private void Push(JTokenType value)
		{
		}

		[Token(Token = "0x6000D2C")]
		[Address(RVA = "0x12EE200", Offset = "0x12EE200", VA = "0x12EE200")]
		private JTokenType Pop()
		{
			return default(JTokenType);
		}

		[Token(Token = "0x6000D2D")]
		[Address(RVA = "0x12EE2EC", Offset = "0x12EE2EC", VA = "0x12EE2EC")]
		private JTokenType Peek()
		{
			return default(JTokenType);
		}

		[Token(Token = "0x6000D2E")]
		public abstract bool Read();

		[Token(Token = "0x6000D2F")]
		public abstract byte[] ReadAsBytes();

		[Token(Token = "0x6000D30")]
		public abstract decimal? ReadAsDecimal();

		[Token(Token = "0x6000D31")]
		public abstract DateTimeOffset? ReadAsDateTimeOffset();

		[Token(Token = "0x6000D32")]
		[Address(RVA = "0x12EE2F4", Offset = "0x12EE2F4", VA = "0x12EE2F4")]
		public void Skip()
		{
		}

		[Token(Token = "0x6000D33")]
		[Address(RVA = "0x12EE364", Offset = "0x12EE364", VA = "0x12EE364")]
		protected void SetToken(JsonToken newToken)
		{
		}

		[Token(Token = "0x6000D34")]
		[Address(RVA = "0x12EE378", Offset = "0x12EE378", VA = "0x12EE378", Slot = "15")]
		protected virtual void SetToken(JsonToken newToken, object value)
		{
		}

		[Token(Token = "0x6000D35")]
		[Address(RVA = "0x12EE46C", Offset = "0x12EE46C", VA = "0x12EE46C")]
		private void ValidateEnd(JsonToken endToken)
		{
		}

		[Token(Token = "0x6000D36")]
		[Address(RVA = "0x12EE7C0", Offset = "0x12EE7C0", VA = "0x12EE7C0")]
		protected void SetStateBasedOnCurrent()
		{
		}

		[Token(Token = "0x6000D37")]
		[Address(RVA = "0x12EE910", Offset = "0x12EE910", VA = "0x12EE910")]
		internal static bool IsPrimitiveToken(JsonToken token)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D38")]
		[Address(RVA = "0x12EE040", Offset = "0x12EE040", VA = "0x12EE040")]
		internal static bool IsStartToken(JsonToken token)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D39")]
		[Address(RVA = "0x12EE608", Offset = "0x12EE608", VA = "0x12EE608")]
		private JTokenType GetTypeForCloseToken(JsonToken token)
		{
			return default(JTokenType);
		}

		[Token(Token = "0x6000D3A")]
		[Address(RVA = "0x12EE934", Offset = "0x12EE934", VA = "0x12EE934", Slot = "4")]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D3B")]
		[Address(RVA = "0x12EE948", Offset = "0x12EE948", VA = "0x12EE948", Slot = "16")]
		protected virtual void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0x12EE96C", Offset = "0x12EE96C", VA = "0x12EE96C", Slot = "17")]
		public virtual void Close()
		{
		}
	}
	[Token(Token = "0x2000200")]
	public class JsonReaderException : Exception
	{
		[Token(Token = "0x4000B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7CA0", Offset = "0x9A7CA0")]
		private int <LineNumber>k__BackingField;

		[Token(Token = "0x4000B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7CB0", Offset = "0x9A7CB0")]
		private int <LinePosition>k__BackingField;

		[Token(Token = "0x170000D1")]
		public int LineNumber
		{
			[Token(Token = "0x6000D3D")]
			[Address(RVA = "0x12EE980", Offset = "0x12EE980", VA = "0x12EE980")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A91D8", Offset = "0x9A91D8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D3E")]
			[Address(RVA = "0x12EE988", Offset = "0x12EE988", VA = "0x12EE988")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A91E8", Offset = "0x9A91E8")]
			private set
			{
			}
		}

		[Token(Token = "0x170000D2")]
		public int LinePosition
		{
			[Token(Token = "0x6000D3F")]
			[Address(RVA = "0x12EE990", Offset = "0x12EE990", VA = "0x12EE990")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A91F8", Offset = "0x9A91F8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D40")]
			[Address(RVA = "0x12EE998", Offset = "0x12EE998", VA = "0x12EE998")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9208", Offset = "0x9A9208")]
			private set
			{
			}
		}

		[Token(Token = "0x6000D41")]
		[Address(RVA = "0x12EE9A0", Offset = "0x12EE9A0", VA = "0x12EE9A0")]
		public JsonReaderException()
		{
		}

		[Token(Token = "0x6000D42")]
		[Address(RVA = "0x12EE748", Offset = "0x12EE748", VA = "0x12EE748")]
		public JsonReaderException(string message)
		{
		}

		[Token(Token = "0x6000D43")]
		[Address(RVA = "0x12EEA08", Offset = "0x12EEA08", VA = "0x12EEA08")]
		public JsonReaderException(string message, Exception innerException)
		{
		}

		[Token(Token = "0x6000D44")]
		[Address(RVA = "0x12EEA88", Offset = "0x12EEA88", VA = "0x12EEA88")]
		internal JsonReaderException(string message, Exception innerException, int lineNumber, int linePosition)
		{
		}
	}
	[Token(Token = "0x2000201")]
	public class JsonSerializationException : Exception
	{
		[Token(Token = "0x6000D45")]
		[Address(RVA = "0x12EEB20", Offset = "0x12EEB20", VA = "0x12EEB20")]
		public JsonSerializationException()
		{
		}

		[Token(Token = "0x6000D46")]
		[Address(RVA = "0x12DED5C", Offset = "0x12DED5C", VA = "0x12DED5C")]
		public JsonSerializationException(string message)
		{
		}

		[Token(Token = "0x6000D47")]
		[Address(RVA = "0x12EEB88", Offset = "0x12EEB88", VA = "0x12EEB88")]
		public JsonSerializationException(string message, Exception innerException)
		{
		}
	}
	[Token(Token = "0x2000202")]
	public class JsonSerializer
	{
		[Token(Token = "0x4000B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private TypeNameHandling _typeNameHandling;

		[Token(Token = "0x4000B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private FormatterAssemblyStyle _typeNameAssemblyFormat;

		[Token(Token = "0x4000B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private PreserveReferencesHandling _preserveReferencesHandling;

		[Token(Token = "0x4000B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private ReferenceLoopHandling _referenceLoopHandling;

		[Token(Token = "0x4000B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private MissingMemberHandling _missingMemberHandling;

		[Token(Token = "0x4000B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private ObjectCreationHandling _objectCreationHandling;

		[Token(Token = "0x4000B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private NullValueHandling _nullValueHandling;

		[Token(Token = "0x4000B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private DefaultValueHandling _defaultValueHandling;

		[Token(Token = "0x4000B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ConstructorHandling _constructorHandling;

		[Token(Token = "0x4000B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private JsonConverterCollection _converters;

		[Token(Token = "0x4000B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private IContractResolver _contractResolver;

		[Token(Token = "0x4000B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private IReferenceResolver _referenceResolver;

		[Token(Token = "0x4000B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private SerializationBinder _binder;

		[Token(Token = "0x4000B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private StreamingContext _context;

		[Token(Token = "0x170000D3")]
		public virtual IReferenceResolver ReferenceResolver
		{
			[Token(Token = "0x6000D4A")]
			[Address(RVA = "0x12EEDE0", Offset = "0x12EEDE0", VA = "0x12EEDE0", Slot = "6")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D4B")]
			[Address(RVA = "0x12EEE4C", Offset = "0x12EEE4C", VA = "0x12EEE4C", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x170000D4")]
		public virtual SerializationBinder Binder
		{
			[Token(Token = "0x6000D4C")]
			[Address(RVA = "0x12EEEF0", Offset = "0x12EEEF0", VA = "0x12EEEF0", Slot = "8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D4D")]
			[Address(RVA = "0x12EEEF8", Offset = "0x12EEEF8", VA = "0x12EEEF8", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x170000D5")]
		public virtual TypeNameHandling TypeNameHandling
		{
			[Token(Token = "0x6000D4E")]
			[Address(RVA = "0x12EEF9C", Offset = "0x12EEF9C", VA = "0x12EEF9C", Slot = "10")]
			get
			{
				return default(TypeNameHandling);
			}
			[Token(Token = "0x6000D4F")]
			[Address(RVA = "0x12EEFA4", Offset = "0x12EEFA4", VA = "0x12EEFA4", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x170000D6")]
		public virtual FormatterAssemblyStyle TypeNameAssemblyFormat
		{
			[Token(Token = "0x6000D50")]
			[Address(RVA = "0x12EF040", Offset = "0x12EF040", VA = "0x12EF040", Slot = "12")]
			get
			{
				return default(FormatterAssemblyStyle);
			}
			[Token(Token = "0x6000D51")]
			[Address(RVA = "0x12EF048", Offset = "0x12EF048", VA = "0x12EF048", Slot = "13")]
			set
			{
			}
		}

		[Token(Token = "0x170000D7")]
		public virtual PreserveReferencesHandling PreserveReferencesHandling
		{
			[Token(Token = "0x6000D52")]
			[Address(RVA = "0x12EF0E4", Offset = "0x12EF0E4", VA = "0x12EF0E4", Slot = "14")]
			get
			{
				return default(PreserveReferencesHandling);
			}
			[Token(Token = "0x6000D53")]
			[Address(RVA = "0x12EF0EC", Offset = "0x12EF0EC", VA = "0x12EF0EC", Slot = "15")]
			set
			{
			}
		}

		[Token(Token = "0x170000D8")]
		public virtual ReferenceLoopHandling ReferenceLoopHandling
		{
			[Token(Token = "0x6000D54")]
			[Address(RVA = "0x12EF188", Offset = "0x12EF188", VA = "0x12EF188", Slot = "16")]
			get
			{
				return default(ReferenceLoopHandling);
			}
			[Token(Token = "0x6000D55")]
			[Address(RVA = "0x12EF190", Offset = "0x12EF190", VA = "0x12EF190", Slot = "17")]
			set
			{
			}
		}

		[Token(Token = "0x170000D9")]
		public virtual MissingMemberHandling MissingMemberHandling
		{
			[Token(Token = "0x6000D56")]
			[Address(RVA = "0x12EF22C", Offset = "0x12EF22C", VA = "0x12EF22C", Slot = "18")]
			get
			{
				return default(MissingMemberHandling);
			}
			[Token(Token = "0x6000D57")]
			[Address(RVA = "0x12EF234", Offset = "0x12EF234", VA = "0x12EF234", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x170000DA")]
		public virtual NullValueHandling NullValueHandling
		{
			[Token(Token = "0x6000D58")]
			[Address(RVA = "0x12EF2D0", Offset = "0x12EF2D0", VA = "0x12EF2D0", Slot = "20")]
			get
			{
				return default(NullValueHandling);
			}
			[Token(Token = "0x6000D59")]
			[Address(RVA = "0x12EF2D8", Offset = "0x12EF2D8", VA = "0x12EF2D8", Slot = "21")]
			set
			{
			}
		}

		[Token(Token = "0x170000DB")]
		public virtual DefaultValueHandling DefaultValueHandling
		{
			[Token(Token = "0x6000D5A")]
			[Address(RVA = "0x12EF374", Offset = "0x12EF374", VA = "0x12EF374", Slot = "22")]
			get
			{
				return default(DefaultValueHandling);
			}
			[Token(Token = "0x6000D5B")]
			[Address(RVA = "0x12EF37C", Offset = "0x12EF37C", VA = "0x12EF37C", Slot = "23")]
			set
			{
			}
		}

		[Token(Token = "0x170000DC")]
		public virtual ObjectCreationHandling ObjectCreationHandling
		{
			[Token(Token = "0x6000D5C")]
			[Address(RVA = "0x12EF418", Offset = "0x12EF418", VA = "0x12EF418", Slot = "24")]
			get
			{
				return default(ObjectCreationHandling);
			}
			[Token(Token = "0x6000D5D")]
			[Address(RVA = "0x12EF420", Offset = "0x12EF420", VA = "0x12EF420", Slot = "25")]
			set
			{
			}
		}

		[Token(Token = "0x170000DD")]
		public virtual ConstructorHandling ConstructorHandling
		{
			[Token(Token = "0x6000D5E")]
			[Address(RVA = "0x12EF4BC", Offset = "0x12EF4BC", VA = "0x12EF4BC", Slot = "26")]
			get
			{
				return default(ConstructorHandling);
			}
			[Token(Token = "0x6000D5F")]
			[Address(RVA = "0x12EF4C4", Offset = "0x12EF4C4", VA = "0x12EF4C4", Slot = "27")]
			set
			{
			}
		}

		[Token(Token = "0x170000DE")]
		public virtual JsonConverterCollection Converters
		{
			[Token(Token = "0x6000D60")]
			[Address(RVA = "0x12EF560", Offset = "0x12EF560", VA = "0x12EF560", Slot = "28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DF")]
		public virtual IContractResolver ContractResolver
		{
			[Token(Token = "0x6000D61")]
			[Address(RVA = "0x12EF5C8", Offset = "0x12EF5C8", VA = "0x12EF5C8", Slot = "29")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D62")]
			[Address(RVA = "0x12EF63C", Offset = "0x12EF63C", VA = "0x12EF63C", Slot = "30")]
			set
			{
			}
		}

		[Token(Token = "0x170000E0")]
		public virtual StreamingContext Context
		{
			[Token(Token = "0x6000D63")]
			[Address(RVA = "0x12EF644", Offset = "0x12EF644", VA = "0x12EF644", Slot = "31")]
			get
			{
				return default(StreamingContext);
			}
			[Token(Token = "0x6000D64")]
			[Address(RVA = "0x12EF650", Offset = "0x12EF650", VA = "0x12EF650", Slot = "32")]
			set
			{
			}
		}

		[Token(Token = "0x14000006")]
		public virtual event EventHandler<ErrorEventArgs> Error
		{
			[Token(Token = "0x6000D48")]
			[Address(RVA = "0x12EEC08", Offset = "0x12EEC08", VA = "0x12EEC08", Slot = "4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9218", Offset = "0x9A9218")]
			add
			{
			}
			[Token(Token = "0x6000D49")]
			[Address(RVA = "0x12EECF4", Offset = "0x12EECF4", VA = "0x12EECF4", Slot = "5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9228", Offset = "0x9A9228")]
			remove
			{
			}
		}

		[Token(Token = "0x6000D65")]
		[Address(RVA = "0x12EF658", Offset = "0x12EF658", VA = "0x12EF658")]
		public JsonSerializer()
		{
		}

		[Token(Token = "0x6000D66")]
		[Address(RVA = "0x12EC3A4", Offset = "0x12EC3A4", VA = "0x12EC3A4")]
		public static JsonSerializer Create(JsonSerializerSettings settings)
		{
			return null;
		}

		[Token(Token = "0x6000D67")]
		[Address(RVA = "0x12EF790", Offset = "0x12EF790", VA = "0x12EF790")]
		public void Populate(TextReader reader, object target)
		{
		}

		[Token(Token = "0x6000D68")]
		[Address(RVA = "0x12ECEA4", Offset = "0x12ECEA4", VA = "0x12ECEA4")]
		public void Populate(JsonReader reader, object target)
		{
		}

		[Token(Token = "0x6000D69")]
		[Address(RVA = "0x12EF814", Offset = "0x12EF814", VA = "0x12EF814", Slot = "33")]
		internal virtual void PopulateInternal(JsonReader reader, object target)
		{
		}

		[Token(Token = "0x6000D6A")]
		[Address(RVA = "0x12EF8D0", Offset = "0x12EF8D0", VA = "0x12EF8D0")]
		public object Deserialize(JsonReader reader)
		{
			return null;
		}

		[Token(Token = "0x6000D6B")]
		[Address(RVA = "0x12EF8E4", Offset = "0x12EF8E4", VA = "0x12EF8E4")]
		public object Deserialize(TextReader reader, Type objectType)
		{
			return null;
		}

		[Token(Token = "0x6000D6C")]
		public T Deserialize<T>(JsonReader reader)
		{
			return (T)null;
		}

		[Token(Token = "0x6000D6D")]
		[Address(RVA = "0x12E0504", Offset = "0x12E0504", VA = "0x12E0504")]
		public object Deserialize(JsonReader reader, Type objectType)
		{
			return null;
		}

		[Token(Token = "0x6000D6E")]
		[Address(RVA = "0x12EF968", Offset = "0x12EF968", VA = "0x12EF968", Slot = "34")]
		internal virtual object DeserializeInternal(JsonReader reader, Type objectType)
		{
			return null;
		}

		[Token(Token = "0x6000D6F")]
		[Address(RVA = "0x12EFA0C", Offset = "0x12EFA0C", VA = "0x12EFA0C")]
		public void Serialize(TextWriter textWriter, object value)
		{
		}

		[Token(Token = "0x6000D70")]
		[Address(RVA = "0x12E020C", Offset = "0x12E020C", VA = "0x12E020C")]
		public void Serialize(JsonWriter jsonWriter, object value)
		{
		}

		[Token(Token = "0x6000D71")]
		[Address(RVA = "0x12EFA90", Offset = "0x12EFA90", VA = "0x12EFA90", Slot = "35")]
		internal virtual void SerializeInternal(JsonWriter jsonWriter, object value)
		{
		}

		[Token(Token = "0x6000D72")]
		[Address(RVA = "0x12EFB34", Offset = "0x12EFB34", VA = "0x12EFB34")]
		internal JsonConverter GetMatchingConverter(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000D73")]
		[Address(RVA = "0x12EFB3C", Offset = "0x12EFB3C", VA = "0x12EFB3C")]
		internal static JsonConverter GetMatchingConverter(IList<JsonConverter> converters, Type objectType)
		{
			return null;
		}

		[Token(Token = "0x6000D74")]
		[Address(RVA = "0x12EFCC0", Offset = "0x12EFCC0", VA = "0x12EFCC0")]
		internal void OnError(ErrorEventArgs e)
		{
		}
	}
	[Token(Token = "0x2000203")]
	public class JsonSerializerSettings
	{
		[Token(Token = "0x4000B46")]
		internal const ReferenceLoopHandling DefaultReferenceLoopHandling = ReferenceLoopHandling.Error;

		[Token(Token = "0x4000B47")]
		internal const MissingMemberHandling DefaultMissingMemberHandling = MissingMemberHandling.Ignore;

		[Token(Token = "0x4000B48")]
		internal const NullValueHandling DefaultNullValueHandling = NullValueHandling.Include;

		[Token(Token = "0x4000B49")]
		internal const DefaultValueHandling DefaultDefaultValueHandling = DefaultValueHandling.Include;

		[Token(Token = "0x4000B4A")]
		internal const ObjectCreationHandling DefaultObjectCreationHandling = ObjectCreationHandling.Auto;

		[Token(Token = "0x4000B4B")]
		internal const PreserveReferencesHandling DefaultPreserveReferencesHandling = PreserveReferencesHandling.None;

		[Token(Token = "0x4000B4C")]
		internal const ConstructorHandling DefaultConstructorHandling = ConstructorHandling.Default;

		[Token(Token = "0x4000B4D")]
		internal const TypeNameHandling DefaultTypeNameHandling = TypeNameHandling.None;

		[Token(Token = "0x4000B4E")]
		internal const FormatterAssemblyStyle DefaultTypeNameAssemblyFormat = FormatterAssemblyStyle.Simple;

		[Token(Token = "0x4000B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly StreamingContext DefaultContext;

		[Token(Token = "0x4000B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7CD0", Offset = "0x9A7CD0")]
		private ReferenceLoopHandling <ReferenceLoopHandling>k__BackingField;

		[Token(Token = "0x4000B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7CE0", Offset = "0x9A7CE0")]
		private MissingMemberHandling <MissingMemberHandling>k__BackingField;

		[Token(Token = "0x4000B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7CF0", Offset = "0x9A7CF0")]
		private ObjectCreationHandling <ObjectCreationHandling>k__BackingField;

		[Token(Token = "0x4000B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7D00", Offset = "0x9A7D00")]
		private NullValueHandling <NullValueHandling>k__BackingField;

		[Token(Token = "0x4000B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7D10", Offset = "0x9A7D10")]
		private DefaultValueHandling <DefaultValueHandling>k__BackingField;

		[Token(Token = "0x4000B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7D20", Offset = "0x9A7D20")]
		private IList<JsonConverter> <Converters>k__BackingField;

		[Token(Token = "0x4000B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7D30", Offset = "0x9A7D30")]
		private PreserveReferencesHandling <PreserveReferencesHandling>k__BackingField;

		[Token(Token = "0x4000B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7D40", Offset = "0x9A7D40")]
		private TypeNameHandling <TypeNameHandling>k__BackingField;

		[Token(Token = "0x4000B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7D50", Offset = "0x9A7D50")]
		private FormatterAssemblyStyle <TypeNameAssemblyFormat>k__BackingField;

		[Token(Token = "0x4000B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7D60", Offset = "0x9A7D60")]
		private ConstructorHandling <ConstructorHandling>k__BackingField;

		[Token(Token = "0x4000B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7D70", Offset = "0x9A7D70")]
		private IContractResolver <ContractResolver>k__BackingField;

		[Token(Token = "0x4000B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7D80", Offset = "0x9A7D80")]
		private IReferenceResolver <ReferenceResolver>k__BackingField;

		[Token(Token = "0x4000B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7D90", Offset = "0x9A7D90")]
		private SerializationBinder <Binder>k__BackingField;

		[Token(Token = "0x4000B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7DA0", Offset = "0x9A7DA0")]
		private EventHandler<ErrorEventArgs> <Error>k__BackingField;

		[Token(Token = "0x4000B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7DB0", Offset = "0x9A7DB0")]
		private StreamingContext <Context>k__BackingField;

		[Token(Token = "0x170000E1")]
		public ReferenceLoopHandling ReferenceLoopHandling
		{
			[Token(Token = "0x6000D75")]
			[Address(RVA = "0x12EF734", Offset = "0x12EF734", VA = "0x12EF734")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9238", Offset = "0x9A9238")]
			get
			{
				return default(ReferenceLoopHandling);
			}
			[Token(Token = "0x6000D76")]
			[Address(RVA = "0x12EFD38", Offset = "0x12EFD38", VA = "0x12EFD38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9248", Offset = "0x9A9248")]
			set
			{
			}
		}

		[Token(Token = "0x170000E2")]
		public MissingMemberHandling MissingMemberHandling
		{
			[Token(Token = "0x6000D77")]
			[Address(RVA = "0x12EF73C", Offset = "0x12EF73C", VA = "0x12EF73C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9258", Offset = "0x9A9258")]
			get
			{
				return default(MissingMemberHandling);
			}
			[Token(Token = "0x6000D78")]
			[Address(RVA = "0x12EFD40", Offset = "0x12EFD40", VA = "0x12EFD40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9268", Offset = "0x9A9268")]
			set
			{
			}
		}

		[Token(Token = "0x170000E3")]
		public ObjectCreationHandling ObjectCreationHandling
		{
			[Token(Token = "0x6000D79")]
			[Address(RVA = "0x12EF744", Offset = "0x12EF744", VA = "0x12EF744")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9278", Offset = "0x9A9278")]
			get
			{
				return default(ObjectCreationHandling);
			}
			[Token(Token = "0x6000D7A")]
			[Address(RVA = "0x12EFD48", Offset = "0x12EFD48", VA = "0x12EFD48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9288", Offset = "0x9A9288")]
			set
			{
			}
		}

		[Token(Token = "0x170000E4")]
		public NullValueHandling NullValueHandling
		{
			[Token(Token = "0x6000D7B")]
			[Address(RVA = "0x12EF74C", Offset = "0x12EF74C", VA = "0x12EF74C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9298", Offset = "0x9A9298")]
			get
			{
				return default(NullValueHandling);
			}
			[Token(Token = "0x6000D7C")]
			[Address(RVA = "0x12EFD50", Offset = "0x12EFD50", VA = "0x12EFD50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A92A8", Offset = "0x9A92A8")]
			set
			{
			}
		}

		[Token(Token = "0x170000E5")]
		public DefaultValueHandling DefaultValueHandling
		{
			[Token(Token = "0x6000D7D")]
			[Address(RVA = "0x12EF754", Offset = "0x12EF754", VA = "0x12EF754")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A92B8", Offset = "0x9A92B8")]
			get
			{
				return default(DefaultValueHandling);
			}
			[Token(Token = "0x6000D7E")]
			[Address(RVA = "0x12EFD58", Offset = "0x12EFD58", VA = "0x12EFD58")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A92C8", Offset = "0x9A92C8")]
			set
			{
			}
		}

		[Token(Token = "0x170000E6")]
		public IList<JsonConverter> Converters
		{
			[Token(Token = "0x6000D7F")]
			[Address(RVA = "0x12EF714", Offset = "0x12EF714", VA = "0x12EF714")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A92D8", Offset = "0x9A92D8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D80")]
			[Address(RVA = "0x12EC39C", Offset = "0x12EC39C", VA = "0x12EC39C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A92E8", Offset = "0x9A92E8")]
			set
			{
			}
		}

		[Token(Token = "0x170000E7")]
		public PreserveReferencesHandling PreserveReferencesHandling
		{
			[Token(Token = "0x6000D81")]
			[Address(RVA = "0x12EF72C", Offset = "0x12EF72C", VA = "0x12EF72C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A92F8", Offset = "0x9A92F8")]
			get
			{
				return default(PreserveReferencesHandling);
			}
			[Token(Token = "0x6000D82")]
			[Address(RVA = "0x12EFD60", Offset = "0x12EFD60", VA = "0x12EFD60")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9308", Offset = "0x9A9308")]
			set
			{
			}
		}

		[Token(Token = "0x170000E8")]
		public TypeNameHandling TypeNameHandling
		{
			[Token(Token = "0x6000D83")]
			[Address(RVA = "0x12EF71C", Offset = "0x12EF71C", VA = "0x12EF71C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9318", Offset = "0x9A9318")]
			get
			{
				return default(TypeNameHandling);
			}
			[Token(Token = "0x6000D84")]
			[Address(RVA = "0x12EFD68", Offset = "0x12EFD68", VA = "0x12EFD68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9328", Offset = "0x9A9328")]
			set
			{
			}
		}

		[Token(Token = "0x170000E9")]
		public FormatterAssemblyStyle TypeNameAssemblyFormat
		{
			[Token(Token = "0x6000D85")]
			[Address(RVA = "0x12EF724", Offset = "0x12EF724", VA = "0x12EF724")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9338", Offset = "0x9A9338")]
			get
			{
				return default(FormatterAssemblyStyle);
			}
			[Token(Token = "0x6000D86")]
			[Address(RVA = "0x12EFD70", Offset = "0x12EFD70", VA = "0x12EFD70")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9348", Offset = "0x9A9348")]
			set
			{
			}
		}

		[Token(Token = "0x170000EA")]
		public ConstructorHandling ConstructorHandling
		{
			[Token(Token = "0x6000D87")]
			[Address(RVA = "0x12EF75C", Offset = "0x12EF75C", VA = "0x12EF75C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9358", Offset = "0x9A9358")]
			get
			{
				return default(ConstructorHandling);
			}
			[Token(Token = "0x6000D88")]
			[Address(RVA = "0x12EFD78", Offset = "0x12EFD78", VA = "0x12EFD78")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9368", Offset = "0x9A9368")]
			set
			{
			}
		}

		[Token(Token = "0x170000EB")]
		public IContractResolver ContractResolver
		{
			[Token(Token = "0x6000D89")]
			[Address(RVA = "0x12EF778", Offset = "0x12EF778", VA = "0x12EF778")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9378", Offset = "0x9A9378")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D8A")]
			[Address(RVA = "0x12EFD80", Offset = "0x12EFD80", VA = "0x12EFD80")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9388", Offset = "0x9A9388")]
			set
			{
			}
		}

		[Token(Token = "0x170000EC")]
		public IReferenceResolver ReferenceResolver
		{
			[Token(Token = "0x6000D8B")]
			[Address(RVA = "0x12EF780", Offset = "0x12EF780", VA = "0x12EF780")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9398", Offset = "0x9A9398")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D8C")]
			[Address(RVA = "0x12EFD88", Offset = "0x12EFD88", VA = "0x12EFD88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A93A8", Offset = "0x9A93A8")]
			set
			{
			}
		}

		[Token(Token = "0x170000ED")]
		public SerializationBinder Binder
		{
			[Token(Token = "0x6000D8D")]
			[Address(RVA = "0x12EF788", Offset = "0x12EF788", VA = "0x12EF788")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A93B8", Offset = "0x9A93B8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D8E")]
			[Address(RVA = "0x12EFD90", Offset = "0x12EFD90", VA = "0x12EFD90")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A93C8", Offset = "0x9A93C8")]
			set
			{
			}
		}

		[Token(Token = "0x170000EE")]
		public EventHandler<ErrorEventArgs> Error
		{
			[Token(Token = "0x6000D8F")]
			[Address(RVA = "0x12EF770", Offset = "0x12EF770", VA = "0x12EF770")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A93D8", Offset = "0x9A93D8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D90")]
			[Address(RVA = "0x12EFD98", Offset = "0x12EFD98", VA = "0x12EFD98")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A93E8", Offset = "0x9A93E8")]
			set
			{
			}
		}

		[Token(Token = "0x170000EF")]
		public StreamingContext Context
		{
			[Token(Token = "0x6000D91")]
			[Address(RVA = "0x12EF764", Offset = "0x12EF764", VA = "0x12EF764")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A93F8", Offset = "0x9A93F8")]
			get
			{
				return default(StreamingContext);
			}
			[Token(Token = "0x6000D92")]
			[Address(RVA = "0x12EFDA0", Offset = "0x12EFDA0", VA = "0x12EFDA0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9408", Offset = "0x9A9408")]
			set
			{
			}
		}

		[Token(Token = "0x6000D93")]
		[Address(RVA = "0x12EC2E8", Offset = "0x12EC2E8", VA = "0x12EC2E8")]
		public JsonSerializerSettings()
		{
		}
	}
	[Token(Token = "0x2000204")]
	public class JsonTextReader : JsonReader, IJsonLineInfo
	{
		[Token(Token = "0x2000305")]
		private enum ReadType
		{
			[Token(Token = "0x4000EB6")]
			Read,
			[Token(Token = "0x4000EB7")]
			ReadAsBytes,
			[Token(Token = "0x4000EB8")]
			ReadAsDecimal,
			[Token(Token = "0x4000EB9")]
			ReadAsDateTimeOffset
		}

		[Token(Token = "0x4000B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly TextReader _reader;

		[Token(Token = "0x4000B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly StringBuffer _buffer;

		[Token(Token = "0x4000B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private char? _lastChar;

		[Token(Token = "0x4000B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int _currentLinePosition;

		[Token(Token = "0x4000B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int _currentLineNumber;

		[Token(Token = "0x4000B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool _end;

		[Token(Token = "0x4000B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private ReadType _readType;

		[Token(Token = "0x4000B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private CultureInfo _culture;

		[Token(Token = "0x4000B67")]
		private const int LineFeedValue = 10;

		[Token(Token = "0x4000B68")]
		private const int CarriageReturnValue = 13;

		[Token(Token = "0x170000F0")]
		public CultureInfo Culture
		{
			[Token(Token = "0x6000D95")]
			[Address(RVA = "0x12EFDAC", Offset = "0x12EFDAC", VA = "0x12EFDAC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D96")]
			[Address(RVA = "0x12EFE24", Offset = "0x12EFE24", VA = "0x12EFE24")]
			set
			{
			}
		}

		[Token(Token = "0x170000F1")]
		public int LineNumber
		{
			[Token(Token = "0x6000DBB")]
			[Address(RVA = "0x12F45E4", Offset = "0x12F45E4", VA = "0x12F45E4", Slot = "19")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000F2")]
		public int LinePosition
		{
			[Token(Token = "0x6000DBC")]
			[Address(RVA = "0x12F45FC", Offset = "0x12F45FC", VA = "0x12F45FC", Slot = "20")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000D97")]
		[Address(RVA = "0x12ECB64", Offset = "0x12ECB64", VA = "0x12ECB64")]
		public JsonTextReader(TextReader reader)
		{
		}

		[Token(Token = "0x6000D98")]
		[Address(RVA = "0x12EFE2C", Offset = "0x12EFE2C", VA = "0x12EFE2C")]
		private void ParseString(char quote)
		{
		}

		[Token(Token = "0x6000D99")]
		[Address(RVA = "0x12F0060", Offset = "0x12F0060", VA = "0x12F0060")]
		private void ReadStringIntoBuffer(char quote)
		{
		}

		[Token(Token = "0x6000D9A")]
		[Address(RVA = "0x12F09C4", Offset = "0x12F09C4", VA = "0x12F09C4")]
		private JsonReaderException CreateJsonReaderException(string format, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x6000D9B")]
		[Address(RVA = "0x12F0A88", Offset = "0x12F0A88", VA = "0x12F0A88")]
		private TimeSpan ReadOffset(string offsetText)
		{
			return default(TimeSpan);
		}

		[Token(Token = "0x6000D9C")]
		[Address(RVA = "0x12F0650", Offset = "0x12F0650", VA = "0x12F0650")]
		private void ParseDate(string text)
		{
		}

		[Token(Token = "0x6000D9D")]
		[Address(RVA = "0x12F08EC", Offset = "0x12F08EC", VA = "0x12F08EC")]
		private char MoveNext()
		{
			return default(char);
		}

		[Token(Token = "0x6000D9E")]
		[Address(RVA = "0x12F0C68", Offset = "0x12F0C68", VA = "0x12F0C68")]
		private bool HasNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D9F")]
		[Address(RVA = "0x12F0CA8", Offset = "0x12F0CA8", VA = "0x12F0CA8")]
		private int PeekNext()
		{
			return default(int);
		}

		[Token(Token = "0x6000DA0")]
		[Address(RVA = "0x12F0CDC", Offset = "0x12F0CDC", VA = "0x12F0CDC", Slot = "11")]
		public override bool Read()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DA1")]
		[Address(RVA = "0x12F0F28", Offset = "0x12F0F28", VA = "0x12F0F28", Slot = "12")]
		public override byte[] ReadAsBytes()
		{
			return null;
		}

		[Token(Token = "0x6000DA2")]
		[Address(RVA = "0x12F13A4", Offset = "0x12F13A4", VA = "0x12F13A4", Slot = "13")]
		public override decimal? ReadAsDecimal()
		{
			return null;
		}

		[Token(Token = "0x6000DA3")]
		[Address(RVA = "0x12F180C", Offset = "0x12F180C", VA = "0x12F180C", Slot = "14")]
		public override DateTimeOffset? ReadAsDateTimeOffset()
		{
			return null;
		}

		[Token(Token = "0x6000DA4")]
		[Address(RVA = "0x12F0CE4", Offset = "0x12F0CE4", VA = "0x12F0CE4")]
		private bool ReadInternal()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DA5")]
		[Address(RVA = "0x12F234C", Offset = "0x12F234C", VA = "0x12F234C")]
		private bool ParsePostValue(char currentChar)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DA6")]
		[Address(RVA = "0x12F2228", Offset = "0x12F2228", VA = "0x12F2228")]
		private bool ParseObject(char currentChar)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DA7")]
		[Address(RVA = "0x12F27E0", Offset = "0x12F27E0", VA = "0x12F27E0")]
		private bool ParseProperty(char firstChar)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DA8")]
		[Address(RVA = "0x12F2B40", Offset = "0x12F2B40", VA = "0x12F2B40")]
		private bool ValidIdentifierChar(char value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DA9")]
		[Address(RVA = "0x12F2BD0", Offset = "0x12F2BD0", VA = "0x12F2BD0")]
		private char ParseUnquotedProperty(char firstChar)
		{
			return default(char);
		}

		[Token(Token = "0x6000DAA")]
		[Address(RVA = "0x12F1C08", Offset = "0x12F1C08", VA = "0x12F1C08")]
		private bool ParseValue(char currentChar)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DAB")]
		[Address(RVA = "0x12F2E8C", Offset = "0x12F2E8C", VA = "0x12F2E8C")]
		private bool EatWhitespace(char initialChar, bool oneOrMore, out char finalChar)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DAC")]
		[Address(RVA = "0x12F33F8", Offset = "0x12F33F8", VA = "0x12F33F8")]
		private void ParseConstructor()
		{
		}

		[Token(Token = "0x6000DAD")]
		[Address(RVA = "0x12F3B50", Offset = "0x12F3B50", VA = "0x12F3B50")]
		private void ParseNumber(char firstChar)
		{
		}

		[Token(Token = "0x6000DAE")]
		[Address(RVA = "0x12F25C8", Offset = "0x12F25C8", VA = "0x12F25C8")]
		private void ParseComment()
		{
		}

		[Token(Token = "0x6000DAF")]
		[Address(RVA = "0x12F449C", Offset = "0x12F449C", VA = "0x12F449C")]
		private bool MatchValue(char firstChar, string value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DB0")]
		[Address(RVA = "0x12F42BC", Offset = "0x12F42BC", VA = "0x12F42BC")]
		private bool MatchValue(char firstChar, string value, bool noTrailingNonSeperatorCharacters)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DB1")]
		[Address(RVA = "0x12F434C", Offset = "0x12F434C", VA = "0x12F434C")]
		private bool IsSeperator(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DB2")]
		[Address(RVA = "0x12F2F54", Offset = "0x12F2F54", VA = "0x12F2F54")]
		private void ParseTrue()
		{
		}

		[Token(Token = "0x6000DB3")]
		[Address(RVA = "0x12F3280", Offset = "0x12F3280", VA = "0x12F3280")]
		private void ParseNull()
		{
		}

		[Token(Token = "0x6000DB4")]
		[Address(RVA = "0x12F4144", Offset = "0x12F4144", VA = "0x12F4144")]
		private void ParseUndefined()
		{
		}

		[Token(Token = "0x6000DB5")]
		[Address(RVA = "0x12F30EC", Offset = "0x12F30EC", VA = "0x12F30EC")]
		private void ParseFalse()
		{
		}

		[Token(Token = "0x6000DB6")]
		[Address(RVA = "0x12F39B8", Offset = "0x12F39B8", VA = "0x12F39B8")]
		private void ParseNumberNegativeInfinity()
		{
		}

		[Token(Token = "0x6000DB7")]
		[Address(RVA = "0x12F3820", Offset = "0x12F3820", VA = "0x12F3820")]
		private void ParseNumberPositiveInfinity()
		{
		}

		[Token(Token = "0x6000DB8")]
		[Address(RVA = "0x12F3688", Offset = "0x12F3688", VA = "0x12F3688")]
		private void ParseNumberNaN()
		{
		}

		[Token(Token = "0x6000DB9")]
		[Address(RVA = "0x12F457C", Offset = "0x12F457C", VA = "0x12F457C", Slot = "17")]
		public override void Close()
		{
		}

		[Token(Token = "0x6000DBA")]
		[Address(RVA = "0x12F45DC", Offset = "0x12F45DC", VA = "0x12F45DC", Slot = "18")]
		public bool HasLineInfo()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000205")]
	public class JsonTextWriter : JsonWriter
	{
		[Token(Token = "0x4000B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly TextWriter _writer;

		[Token(Token = "0x4000B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Base64Encoder _base64Encoder;

		[Token(Token = "0x4000B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private char _indentChar;

		[Token(Token = "0x4000B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int _indentation;

		[Token(Token = "0x4000B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private char _quoteChar;

		[Token(Token = "0x4000B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		private bool _quoteName;

		[Token(Token = "0x170000F3")]
		private Base64Encoder Base64Encoder
		{
			[Token(Token = "0x6000DBD")]
			[Address(RVA = "0x12F4604", Offset = "0x12F4604", VA = "0x12F4604")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F4")]
		public int Indentation
		{
			[Token(Token = "0x6000DBE")]
			[Address(RVA = "0x12F4680", Offset = "0x12F4680", VA = "0x12F4680")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000DBF")]
			[Address(RVA = "0x12F4688", Offset = "0x12F4688", VA = "0x12F4688")]
			set
			{
			}
		}

		[Token(Token = "0x170000F5")]
		public char QuoteChar
		{
			[Token(Token = "0x6000DC0")]
			[Address(RVA = "0x12F4720", Offset = "0x12F4720", VA = "0x12F4720")]
			get
			{
				return default(char);
			}
			[Token(Token = "0x6000DC1")]
			[Address(RVA = "0x12F4728", Offset = "0x12F4728", VA = "0x12F4728")]
			set
			{
			}
		}

		[Token(Token = "0x170000F6")]
		public char IndentChar
		{
			[Token(Token = "0x6000DC2")]
			[Address(RVA = "0x12F47D0", Offset = "0x12F47D0", VA = "0x12F47D0")]
			get
			{
				return default(char);
			}
			[Token(Token = "0x6000DC3")]
			[Address(RVA = "0x12F47D8", Offset = "0x12F47D8", VA = "0x12F47D8")]
			set
			{
			}
		}

		[Token(Token = "0x170000F7")]
		public bool QuoteName
		{
			[Token(Token = "0x6000DC4")]
			[Address(RVA = "0x12F47E0", Offset = "0x12F47E0", VA = "0x12F47E0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DC5")]
			[Address(RVA = "0x12F47E8", Offset = "0x12F47E8", VA = "0x12F47E8")]
			set
			{
			}
		}

		[Token(Token = "0x6000DC6")]
		[Address(RVA = "0x12EC66C", Offset = "0x12EC66C", VA = "0x12EC66C")]
		public JsonTextWriter(TextWriter textWriter)
		{
		}

		[Token(Token = "0x6000DC7")]
		[Address(RVA = "0x12F47F4", Offset = "0x12F47F4", VA = "0x12F47F4", Slot = "5")]
		public override void Flush()
		{
		}

		[Token(Token = "0x6000DC8")]
		[Address(RVA = "0x12F4828", Offset = "0x12F4828", VA = "0x12F4828", Slot = "6")]
		public override void Close()
		{
		}

		[Token(Token = "0x6000DC9")]
		[Address(RVA = "0x12F4894", Offset = "0x12F4894", VA = "0x12F4894", Slot = "7")]
		public override void WriteStartObject()
		{
		}

		[Token(Token = "0x6000DCA")]
		[Address(RVA = "0x12F4918", Offset = "0x12F4918", VA = "0x12F4918", Slot = "9")]
		public override void WriteStartArray()
		{
		}

		[Token(Token = "0x6000DCB")]
		[Address(RVA = "0x12F499C", Offset = "0x12F499C", VA = "0x12F499C", Slot = "11")]
		public override void WriteStartConstructor(string name)
		{
		}

		[Token(Token = "0x6000DCC")]
		[Address(RVA = "0x12F4AB0", Offset = "0x12F4AB0", VA = "0x12F4AB0", Slot = "15")]
		protected override void WriteEnd(JsonToken token)
		{
		}

		[Token(Token = "0x6000DCD")]
		[Address(RVA = "0x12F4BF8", Offset = "0x12F4BF8", VA = "0x12F4BF8", Slot = "13")]
		public override void WritePropertyName(string name)
		{
		}

		[Token(Token = "0x6000DCE")]
		[Address(RVA = "0x12F4C58", Offset = "0x12F4C58", VA = "0x12F4C58", Slot = "16")]
		protected override void WriteIndent()
		{
		}

		[Token(Token = "0x6000DCF")]
		[Address(RVA = "0x12F4D08", Offset = "0x12F4D08", VA = "0x12F4D08", Slot = "17")]
		protected override void WriteValueDelimiter()
		{
		}

		[Token(Token = "0x6000DD0")]
		[Address(RVA = "0x12F4D40", Offset = "0x12F4D40", VA = "0x12F4D40", Slot = "18")]
		protected override void WriteIndentSpace()
		{
		}

		[Token(Token = "0x6000DD1")]
		[Address(RVA = "0x12F4D78", Offset = "0x12F4D78", VA = "0x12F4D78")]
		private void WriteValueInternal(string value, JsonToken token)
		{
		}

		[Token(Token = "0x6000DD2")]
		[Address(RVA = "0x12F4DB8", Offset = "0x12F4DB8", VA = "0x12F4DB8", Slot = "19")]
		public override void WriteNull()
		{
		}

		[Token(Token = "0x6000DD3")]
		[Address(RVA = "0x12F4E54", Offset = "0x12F4E54", VA = "0x12F4E54", Slot = "20")]
		public override void WriteUndefined()
		{
		}

		[Token(Token = "0x6000DD4")]
		[Address(RVA = "0x12F4EF0", Offset = "0x12F4EF0", VA = "0x12F4EF0", Slot = "21")]
		public override void WriteRaw(string json)
		{
		}

		[Token(Token = "0x6000DD5")]
		[Address(RVA = "0x12F4F34", Offset = "0x12F4F34", VA = "0x12F4F34", Slot = "23")]
		public override void WriteValue(string value)
		{
		}

		[Token(Token = "0x6000DD6")]
		[Address(RVA = "0x12F5004", Offset = "0x12F5004", VA = "0x12F5004", Slot = "24")]
		public override void WriteValue(int value)
		{
		}

		[Token(Token = "0x6000DD7")]
		[Address(RVA = "0x12F50AC", Offset = "0x12F50AC", VA = "0x12F50AC", Slot = "25")]
		public override void WriteValue(uint value)
		{
		}

		[Token(Token = "0x6000DD8")]
		[Address(RVA = "0x12F5154", Offset = "0x12F5154", VA = "0x12F5154", Slot = "26")]
		public override void WriteValue(long value)
		{
		}

		[Token(Token = "0x6000DD9")]
		[Address(RVA = "0x12F51FC", Offset = "0x12F51FC", VA = "0x12F51FC", Slot = "27")]
		public override void WriteValue(ulong value)
		{
		}

		[Token(Token = "0x6000DDA")]
		[Address(RVA = "0x12F52A4", Offset = "0x12F52A4", VA = "0x12F52A4", Slot = "28")]
		public override void WriteValue(float value)
		{
		}

		[Token(Token = "0x6000DDB")]
		[Address(RVA = "0x12F534C", Offset = "0x12F534C", VA = "0x12F534C", Slot = "29")]
		public override void WriteValue(double value)
		{
		}

		[Token(Token = "0x6000DDC")]
		[Address(RVA = "0x12F53F4", Offset = "0x12F53F4", VA = "0x12F53F4", Slot = "30")]
		public override void WriteValue(bool value)
		{
		}

		[Token(Token = "0x6000DDD")]
		[Address(RVA = "0x12F549C", Offset = "0x12F549C", VA = "0x12F549C", Slot = "31")]
		public override void WriteValue(short value)
		{
		}

		[Token(Token = "0x6000DDE")]
		[Address(RVA = "0x12F5544", Offset = "0x12F5544", VA = "0x12F5544", Slot = "32")]
		public override void WriteValue(ushort value)
		{
		}

		[Token(Token = "0x6000DDF")]
		[Address(RVA = "0x12F55EC", Offset = "0x12F55EC", VA = "0x12F55EC", Slot = "33")]
		public override void WriteValue(char value)
		{
		}

		[Token(Token = "0x6000DE0")]
		[Address(RVA = "0x12F5694", Offset = "0x12F5694", VA = "0x12F5694", Slot = "34")]
		public override void WriteValue(byte value)
		{
		}

		[Token(Token = "0x6000DE1")]
		[Address(RVA = "0x12F573C", Offset = "0x12F573C", VA = "0x12F573C", Slot = "35")]
		public override void WriteValue(sbyte value)
		{
		}

		[Token(Token = "0x6000DE2")]
		[Address(RVA = "0x12F57E4", Offset = "0x12F57E4", VA = "0x12F57E4", Slot = "36")]
		public override void WriteValue(decimal value)
		{
		}

		[Token(Token = "0x6000DE3")]
		[Address(RVA = "0x12F5894", Offset = "0x12F5894", VA = "0x12F5894", Slot = "37")]
		public override void WriteValue(DateTime value)
		{
		}

		[Token(Token = "0x6000DE4")]
		[Address(RVA = "0x12F5918", Offset = "0x12F5918", VA = "0x12F5918", Slot = "58")]
		public override void WriteValue(byte[] value)
		{
		}

		[Token(Token = "0x6000DE5")]
		[Address(RVA = "0x12F5A08", Offset = "0x12F5A08", VA = "0x12F5A08", Slot = "38")]
		public override void WriteValue(DateTimeOffset value)
		{
		}

		[Token(Token = "0x6000DE6")]
		[Address(RVA = "0x12F5AB8", Offset = "0x12F5AB8", VA = "0x12F5AB8", Slot = "39")]
		public override void WriteValue(Guid value)
		{
		}

		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0x12F5B68", Offset = "0x12F5B68", VA = "0x12F5B68", Slot = "40")]
		public override void WriteValue(TimeSpan value)
		{
		}

		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0x12F5C10", Offset = "0x12F5C10", VA = "0x12F5C10", Slot = "59")]
		public override void WriteValue(Uri value)
		{
		}

		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0x12F5CB8", Offset = "0x12F5CB8", VA = "0x12F5CB8", Slot = "61")]
		public override void WriteComment(string text)
		{
		}

		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0x12F5D9C", Offset = "0x12F5D9C", VA = "0x12F5D9C", Slot = "62")]
		public override void WriteWhitespace(string ws)
		{
		}
	}
	[Token(Token = "0x2000206")]
	public enum JsonToken
	{
		[Token(Token = "0x4000B70")]
		None,
		[Token(Token = "0x4000B71")]
		StartObject,
		[Token(Token = "0x4000B72")]
		StartArray,
		[Token(Token = "0x4000B73")]
		StartConstructor,
		[Token(Token = "0x4000B74")]
		PropertyName,
		[Token(Token = "0x4000B75")]
		Comment,
		[Token(Token = "0x4000B76")]
		Raw,
		[Token(Token = "0x4000B77")]
		Integer,
		[Token(Token = "0x4000B78")]
		Float,
		[Token(Token = "0x4000B79")]
		String,
		[Token(Token = "0x4000B7A")]
		Boolean,
		[Token(Token = "0x4000B7B")]
		Null,
		[Token(Token = "0x4000B7C")]
		Undefined,
		[Token(Token = "0x4000B7D")]
		EndObject,
		[Token(Token = "0x4000B7E")]
		EndArray,
		[Token(Token = "0x4000B7F")]
		EndConstructor,
		[Token(Token = "0x4000B80")]
		Date,
		[Token(Token = "0x4000B81")]
		Bytes
	}
	[Token(Token = "0x2000207")]
	public class JsonValidatingReader : JsonReader, IJsonLineInfo
	{
		[Token(Token = "0x2000306")]
		private class SchemaScope
		{
			[Serializable]
			[Token(Token = "0x2000351")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6A74", Offset = "0x9A6A74")]
			private sealed class <>c
			{
				[Token(Token = "0x4000F7C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public static readonly <>c <>9;

				[Token(Token = "0x4000F7D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
				public static Func<string, string> <>9__17_0;

				[Token(Token = "0x4000F7E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public static Func<string, bool> <>9__17_1;

				[Token(Token = "0x4000F7F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				public static Func<KeyValuePair<string, JsonSchemaModel>, bool> <>9__18_0;

				[Token(Token = "0x4000F80")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				public static Func<KeyValuePair<string, JsonSchemaModel>, string> <>9__18_1;

				[Token(Token = "0x60016C3")]
				[Address(RVA = "0x12FD060", Offset = "0x12FD060", VA = "0x12FD060")]
				public <>c()
				{
				}

				[Token(Token = "0x60016C4")]
				[Address(RVA = "0x12FD068", Offset = "0x12FD068", VA = "0x12FD068")]
				internal string <.ctor>b__17_0(string p)
				{
					return null;
				}

				[Token(Token = "0x60016C5")]
				[Address(RVA = "0x12FD070", Offset = "0x12FD070", VA = "0x12FD070")]
				internal bool <.ctor>b__17_1(string p)
				{
					return default(bool);
				}

				[Token(Token = "0x60016C6")]
				[Address(RVA = "0x12FD078", Offset = "0x12FD078", VA = "0x12FD078")]
				internal bool <GetRequiredProperties>b__18_0(KeyValuePair<string, JsonSchemaModel> p)
				{
					return default(bool);
				}

				[Token(Token = "0x60016C7")]
				[Address(RVA = "0x12FD0F0", Offset = "0x12FD0F0", VA = "0x12FD0F0")]
				internal string <GetRequiredProperties>b__18_1(KeyValuePair<string, JsonSchemaModel> p)
				{
					return null;
				}
			}

			[Token(Token = "0x4000EBA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly JTokenType _tokenType;

			[Token(Token = "0x4000EBB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly IList<JsonSchemaModel> _schemas;

			[Token(Token = "0x4000EBC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private readonly Dictionary<string, bool> _requiredProperties;

			[Token(Token = "0x4000EBD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8698", Offset = "0x9A8698")]
			private string <CurrentPropertyName>k__BackingField;

			[Token(Token = "0x4000EBE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A86A8", Offset = "0x9A86A8")]
			private int <ArrayItemCount>k__BackingField;

			[Token(Token = "0x17000246")]
			public string CurrentPropertyName
			{
				[Token(Token = "0x60015C1")]
				[Address(RVA = "0x12F75C4", Offset = "0x12F75C4", VA = "0x12F75C4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AAEB4", Offset = "0x9AAEB4")]
				get
				{
					return null;
				}
				[Token(Token = "0x60015C2")]
				[Address(RVA = "0x12FCA6C", Offset = "0x12FCA6C", VA = "0x12FCA6C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AAEC4", Offset = "0x9AAEC4")]
				set
				{
				}
			}

			[Token(Token = "0x17000247")]
			public int ArrayItemCount
			{
				[Token(Token = "0x60015C3")]
				[Address(RVA = "0x12F75CC", Offset = "0x12F75CC", VA = "0x12F75CC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AAED4", Offset = "0x9AAED4")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x60015C4")]
				[Address(RVA = "0x12FC5F8", Offset = "0x12FC5F8", VA = "0x12FC5F8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AAEE4", Offset = "0x9AAEE4")]
				set
				{
				}
			}

			[Token(Token = "0x17000248")]
			public IList<JsonSchemaModel> Schemas
			{
				[Token(Token = "0x60015C5")]
				[Address(RVA = "0x12F62CC", Offset = "0x12F62CC", VA = "0x12F62CC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000249")]
			public Dictionary<string, bool> RequiredProperties
			{
				[Token(Token = "0x60015C6")]
				[Address(RVA = "0x12FC36C", Offset = "0x12FC36C", VA = "0x12FC36C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700024A")]
			public JTokenType TokenType
			{
				[Token(Token = "0x60015C7")]
				[Address(RVA = "0x12F75BC", Offset = "0x12F75BC", VA = "0x12F75BC")]
				get
				{
					return default(JTokenType);
				}
			}

			[Token(Token = "0x60015C8")]
			[Address(RVA = "0x12F9CA0", Offset = "0x12F9CA0", VA = "0x12F9CA0")]
			public SchemaScope(JTokenType tokenType, IList<JsonSchemaModel> schemas)
			{
			}

			[Token(Token = "0x60015C9")]
			[Address(RVA = "0x12FCE1C", Offset = "0x12FCE1C", VA = "0x12FCE1C")]
			private IEnumerable<string> GetRequiredProperties(JsonSchemaModel schema)
			{
				return null;
			}
		}

		[Serializable]
		[Token(Token = "0x2000307")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A66B4", Offset = "0x9A66B4")]
		private sealed class <>c
		{
			[Token(Token = "0x4000EBF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000EC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<KeyValuePair<string, bool>, bool> <>9__41_0;

			[Token(Token = "0x4000EC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<KeyValuePair<string, bool>, string> <>9__41_1;

			[Token(Token = "0x60015CB")]
			[Address(RVA = "0x12FCD54", Offset = "0x12FCD54", VA = "0x12FCD54")]
			public <>c()
			{
			}

			[Token(Token = "0x60015CC")]
			[Address(RVA = "0x12FCD5C", Offset = "0x12FCD5C", VA = "0x12FCD5C")]
			internal bool <ValidateEndObject>b__41_0(KeyValuePair<string, bool> kv)
			{
				return default(bool);
			}

			[Token(Token = "0x60015CD")]
			[Address(RVA = "0x12FCDC0", Offset = "0x12FCDC0", VA = "0x12FCDC0")]
			internal string <ValidateEndObject>b__41_1(KeyValuePair<string, bool> kv)
			{
				return null;
			}
		}

		[Token(Token = "0x4000B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly JsonReader _reader;

		[Token(Token = "0x4000B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly Stack<SchemaScope> _stack;

		[Token(Token = "0x4000B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private JsonSchema _schema;

		[Token(Token = "0x4000B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private JsonSchemaModel _model;

		[Token(Token = "0x4000B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private SchemaScope _currentScope;

		[Token(Token = "0x170000F8")]
		public override object Value
		{
			[Token(Token = "0x6000DED")]
			[Address(RVA = "0x12F6054", Offset = "0x12F6054", VA = "0x12F6054", Slot = "8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F9")]
		public override int Depth
		{
			[Token(Token = "0x6000DEE")]
			[Address(RVA = "0x12F6088", Offset = "0x12F6088", VA = "0x12F6088", Slot = "10")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000FA")]
		public override char QuoteChar
		{
			[Token(Token = "0x6000DEF")]
			[Address(RVA = "0x12F60BC", Offset = "0x12F60BC", VA = "0x12F60BC", Slot = "5")]
			get
			{
				return default(char);
			}
			[Token(Token = "0x6000DF0")]
			[Address(RVA = "0x12F60F0", Offset = "0x12F60F0", VA = "0x12F60F0", Slot = "6")]
			protected internal set
			{
			}
		}

		[Token(Token = "0x170000FB")]
		public override JsonToken TokenType
		{
			[Token(Token = "0x6000DF1")]
			[Address(RVA = "0x12F60F4", Offset = "0x12F60F4", VA = "0x12F60F4", Slot = "7")]
			get
			{
				return default(JsonToken);
			}
		}

		[Token(Token = "0x170000FC")]
		public override Type ValueType
		{
			[Token(Token = "0x6000DF2")]
			[Address(RVA = "0x12F6128", Offset = "0x12F6128", VA = "0x12F6128", Slot = "9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FD")]
		private IEnumerable<JsonSchemaModel> CurrentSchemas
		{
			[Token(Token = "0x6000DF5")]
			[Address(RVA = "0x12F62A0", Offset = "0x12F62A0", VA = "0x12F62A0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FE")]
		private IEnumerable<JsonSchemaModel> CurrentMemberSchemas
		{
			[Token(Token = "0x6000DF6")]
			[Address(RVA = "0x12F62D4", Offset = "0x12F62D4", VA = "0x12F62D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FF")]
		public JsonSchema Schema
		{
			[Token(Token = "0x6000DFA")]
			[Address(RVA = "0x12F7B38", Offset = "0x12F7B38", VA = "0x12F7B38")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DFB")]
			[Address(RVA = "0x12F7B40", Offset = "0x12F7B40", VA = "0x12F7B40")]
			set
			{
			}
		}

		[Token(Token = "0x17000100")]
		public JsonReader Reader
		{
			[Token(Token = "0x6000DFC")]
			[Address(RVA = "0x12F7BE8", Offset = "0x12F7BE8", VA = "0x12F7BE8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000101")]
		private int Newtonsoft.Json.IJsonLineInfo.LineNumber
		{
			[Token(Token = "0x6000E13")]
			[Address(RVA = "0x12FCB60", Offset = "0x12FCB60", VA = "0x12FCB60", Slot = "19")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000102")]
		private int Newtonsoft.Json.IJsonLineInfo.LinePosition
		{
			[Token(Token = "0x6000E14")]
			[Address(RVA = "0x12FCC28", Offset = "0x12FCC28", VA = "0x12FCC28", Slot = "20")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x14000007")]
		public event ValidationEventHandler ValidationEventHandler
		{
			[Token(Token = "0x6000DEB")]
			[Address(RVA = "0x12F5E7C", Offset = "0x12F5E7C", VA = "0x12F5E7C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9418", Offset = "0x9A9418")]
			add
			{
			}
			[Token(Token = "0x6000DEC")]
			[Address(RVA = "0x12F5F68", Offset = "0x12F5F68", VA = "0x12F5F68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9428", Offset = "0x9A9428")]
			remove
			{
			}
		}

		[Token(Token = "0x6000DF3")]
		[Address(RVA = "0x12F615C", Offset = "0x12F615C", VA = "0x12F615C")]
		private void Push(SchemaScope scope)
		{
		}

		[Token(Token = "0x6000DF4")]
		[Address(RVA = "0x12F61D4", Offset = "0x12F61D4", VA = "0x12F61D4")]
		private SchemaScope Pop()
		{
			return null;
		}

		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0x12F75D4", Offset = "0x12F75D4", VA = "0x12F75D4")]
		private void RaiseError(string message, JsonSchemaModel schema)
		{
		}

		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0x12F7A00", Offset = "0x12F7A00", VA = "0x12F7A00")]
		private void OnValidationEvent(JsonSchemaException exception)
		{
		}

		[Token(Token = "0x6000DF9")]
		[Address(RVA = "0x12F7AA0", Offset = "0x12F7AA0", VA = "0x12F7AA0")]
		public JsonValidatingReader(JsonReader reader)
		{
		}

		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0x12F7BF0", Offset = "0x12F7BF0", VA = "0x12F7BF0")]
		private void ValidateInEnumAndNotDisallowed(JsonSchemaModel schema)
		{
		}

		[Token(Token = "0x6000DFE")]
		[Address(RVA = "0x12F7FDC", Offset = "0x12F7FDC", VA = "0x12F7FDC")]
		private JsonSchemaType? GetCurrentNodeSchemaType()
		{
			return null;
		}

		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0x12F8104", Offset = "0x12F8104", VA = "0x12F8104", Slot = "12")]
		public override byte[] ReadAsBytes()
		{
			return null;
		}

		[Token(Token = "0x6000E00")]
		[Address(RVA = "0x12F9654", Offset = "0x12F9654", VA = "0x12F9654", Slot = "13")]
		public override decimal? ReadAsDecimal()
		{
			return null;
		}

		[Token(Token = "0x6000E01")]
		[Address(RVA = "0x12F96A4", Offset = "0x12F96A4", VA = "0x12F96A4", Slot = "14")]
		public override DateTimeOffset? ReadAsDateTimeOffset()
		{
			return null;
		}

		[Token(Token = "0x6000E02")]
		[Address(RVA = "0x12F96F8", Offset = "0x12F96F8", VA = "0x12F96F8", Slot = "11")]
		public override bool Read()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E03")]
		[Address(RVA = "0x12F8150", Offset = "0x12F8150", VA = "0x12F8150")]
		private void ValidateCurrentToken()
		{
		}

		[Token(Token = "0x6000E04")]
		[Address(RVA = "0x12FBC78", Offset = "0x12FBC78", VA = "0x12FBC78")]
		private void ValidateEndObject(JsonSchemaModel schema)
		{
		}

		[Token(Token = "0x6000E05")]
		[Address(RVA = "0x12FBF84", Offset = "0x12FBF84", VA = "0x12FBF84")]
		private void ValidateEndArray(JsonSchemaModel schema)
		{
		}

		[Token(Token = "0x6000E06")]
		[Address(RVA = "0x12FBC2C", Offset = "0x12FBC2C", VA = "0x12FBC2C")]
		private void ValidateNull(JsonSchemaModel schema)
		{
		}

		[Token(Token = "0x6000E07")]
		[Address(RVA = "0x12FBBE0", Offset = "0x12FBBE0", VA = "0x12FBBE0")]
		private void ValidateBoolean(JsonSchemaModel schema)
		{
		}

		[Token(Token = "0x6000E08")]
		[Address(RVA = "0x12FB42C", Offset = "0x12FB42C", VA = "0x12FB42C")]
		private void ValidateString(JsonSchemaModel schema)
		{
		}

		[Token(Token = "0x6000E09")]
		[Address(RVA = "0x12FA0F4", Offset = "0x12FA0F4", VA = "0x12FA0F4")]
		private void ValidateInteger(JsonSchemaModel schema)
		{
		}

		[Token(Token = "0x6000E0A")]
		[Address(RVA = "0x12F9774", Offset = "0x12F9774", VA = "0x12F9774")]
		private void ProcessValue()
		{
		}

		[Token(Token = "0x6000E0B")]
		[Address(RVA = "0x12FAA70", Offset = "0x12FAA70", VA = "0x12FAA70")]
		private void ValidateFloat(JsonSchemaModel schema)
		{
		}

		[Token(Token = "0x6000E0C")]
		[Address(RVA = "0x12FC57C", Offset = "0x12FC57C", VA = "0x12FC57C")]
		private static bool IsZero(double value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E0D")]
		[Address(RVA = "0x12F9EB0", Offset = "0x12F9EB0", VA = "0x12F9EB0")]
		private void ValidatePropertyName(JsonSchemaModel schema)
		{
		}

		[Token(Token = "0x6000E0E")]
		[Address(RVA = "0x12FC600", Offset = "0x12FC600", VA = "0x12FC600")]
		private bool IsPropertyDefinied(JsonSchemaModel schema, string propertyName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E0F")]
		[Address(RVA = "0x12FCA74", Offset = "0x12FCA74", VA = "0x12FCA74")]
		private bool ValidateArray(JsonSchemaModel schema)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E10")]
		[Address(RVA = "0x12FCA88", Offset = "0x12FCA88", VA = "0x12FCA88")]
		private bool ValidateObject(JsonSchemaModel schema)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E11")]
		[Address(RVA = "0x12FC374", Offset = "0x12FC374", VA = "0x12FC374")]
		private bool TestType(JsonSchemaModel currentSchema, JsonSchemaType currentType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E12")]
		[Address(RVA = "0x12FCA9C", Offset = "0x12FCA9C", VA = "0x12FCA9C", Slot = "18")]
		private bool Newtonsoft.Json.IJsonLineInfo.HasLineInfo()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000208")]
	public enum WriteState
	{
		[Token(Token = "0x4000B89")]
		Error,
		[Token(Token = "0x4000B8A")]
		Closed,
		[Token(Token = "0x4000B8B")]
		Object,
		[Token(Token = "0x4000B8C")]
		Array,
		[Token(Token = "0x4000B8D")]
		Constructor,
		[Token(Token = "0x4000B8E")]
		Property,
		[Token(Token = "0x4000B8F")]
		Start
	}
	[Token(Token = "0x2000209")]
	public enum Formatting
	{
		[Token(Token = "0x4000B91")]
		None,
		[Token(Token = "0x4000B92")]
		Indented
	}
	[Token(Token = "0x200020A")]
	public abstract class JsonWriter : IDisposable
	{
		[Token(Token = "0x2000308")]
		private enum State
		{
			[Token(Token = "0x4000EC3")]
			Start,
			[Token(Token = "0x4000EC4")]
			Property,
			[Token(Token = "0x4000EC5")]
			ObjectStart,
			[Token(Token = "0x4000EC6")]
			Object,
			[Token(Token = "0x4000EC7")]
			ArrayStart,
			[Token(Token = "0x4000EC8")]
			Array,
			[Token(Token = "0x4000EC9")]
			ConstructorStart,
			[Token(Token = "0x4000ECA")]
			Constructor,
			[Token(Token = "0x4000ECB")]
			Bytes,
			[Token(Token = "0x4000ECC")]
			Closed,
			[Token(Token = "0x4000ECD")]
			Error
		}

		[Token(Token = "0x4000B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly State[][] stateArray;

		[Token(Token = "0x4000B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int _top;

		[Token(Token = "0x4000B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly List<JTokenType> _stack;

		[Token(Token = "0x4000B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private State _currentState;

		[Token(Token = "0x4000B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Formatting _formatting;

		[Token(Token = "0x4000B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7DD0", Offset = "0x9A7DD0")]
		private bool <CloseOutput>k__BackingField;

		[Token(Token = "0x17000103")]
		public bool CloseOutput
		{
			[Token(Token = "0x6000E15")]
			[Address(RVA = "0x12DD478", Offset = "0x12DD478", VA = "0x12DD478")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9438", Offset = "0x9A9438")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E16")]
			[Address(RVA = "0x12FD14C", Offset = "0x12FD14C", VA = "0x12FD14C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9448", Offset = "0x9A9448")]
			set
			{
			}
		}

		[Token(Token = "0x17000104")]
		protected internal int Top
		{
			[Token(Token = "0x6000E17")]
			[Address(RVA = "0x12DD034", Offset = "0x12DD034", VA = "0x12DD034")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000105")]
		public WriteState WriteState
		{
			[Token(Token = "0x6000E18")]
			[Address(RVA = "0x12FD158", Offset = "0x12FD158", VA = "0x12FD158")]
			get
			{
				return default(WriteState);
			}
		}

		[Token(Token = "0x17000106")]
		public Formatting Formatting
		{
			[Token(Token = "0x6000E19")]
			[Address(RVA = "0x12F4D00", Offset = "0x12F4D00", VA = "0x12F4D00")]
			get
			{
				return default(Formatting);
			}
			[Token(Token = "0x6000E1A")]
			[Address(RVA = "0x12EC74C", Offset = "0x12EC74C", VA = "0x12EC74C")]
			set
			{
			}
		}

		[Token(Token = "0x6000E1B")]
		[Address(RVA = "0x12DCEBC", Offset = "0x12DCEBC", VA = "0x12DCEBC")]
		protected JsonWriter()
		{
		}

		[Token(Token = "0x6000E1C")]
		[Address(RVA = "0x12FD244", Offset = "0x12FD244", VA = "0x12FD244")]
		private void Push(JTokenType value)
		{
		}

		[Token(Token = "0x6000E1D")]
		[Address(RVA = "0x12FD324", Offset = "0x12FD324", VA = "0x12FD324")]
		private JTokenType Pop()
		{
			return default(JTokenType);
		}

		[Token(Token = "0x6000E1E")]
		[Address(RVA = "0x12FD350", Offset = "0x12FD350", VA = "0x12FD350")]
		private JTokenType Peek()
		{
			return default(JTokenType);
		}

		[Token(Token = "0x6000E1F")]
		public abstract void Flush();

		[Token(Token = "0x6000E20")]
		[Address(RVA = "0x12DD430", Offset = "0x12DD430", VA = "0x12DD430", Slot = "6")]
		public virtual void Close()
		{
		}

		[Token(Token = "0x6000E21")]
		[Address(RVA = "0x12DD368", Offset = "0x12DD368", VA = "0x12DD368", Slot = "7")]
		public virtual void WriteStartObject()
		{
		}

		[Token(Token = "0x6000E22")]
		[Address(RVA = "0x12FD400", Offset = "0x12FD400", VA = "0x12FD400", Slot = "8")]
		public virtual void WriteEndObject()
		{
		}

		[Token(Token = "0x6000E23")]
		[Address(RVA = "0x12DD290", Offset = "0x12DD290", VA = "0x12DD290", Slot = "9")]
		public virtual void WriteStartArray()
		{
		}

		[Token(Token = "0x6000E24")]
		[Address(RVA = "0x12FD608", Offset = "0x12FD608", VA = "0x12FD608", Slot = "10")]
		public virtual void WriteEndArray()
		{
		}

		[Token(Token = "0x6000E25")]
		[Address(RVA = "0x12F4A84", Offset = "0x12F4A84", VA = "0x12F4A84", Slot = "11")]
		public virtual void WriteStartConstructor(string name)
		{
		}

		[Token(Token = "0x6000E26")]
		[Address(RVA = "0x12FD610", Offset = "0x12FD610", VA = "0x12FD610", Slot = "12")]
		public virtual void WriteEndConstructor()
		{
		}

		[Token(Token = "0x6000E27")]
		[Address(RVA = "0x12DD3C0", Offset = "0x12DD3C0", VA = "0x12DD3C0", Slot = "13")]
		public virtual void WritePropertyName(string name)
		{
		}

		[Token(Token = "0x6000E28")]
		[Address(RVA = "0x12FD618", Offset = "0x12FD618", VA = "0x12FD618", Slot = "14")]
		public virtual void WriteEnd()
		{
		}

		[Token(Token = "0x6000E29")]
		[Address(RVA = "0x12FD740", Offset = "0x12FD740", VA = "0x12FD740")]
		public void WriteToken(JsonReader reader)
		{
		}

		[Token(Token = "0x6000E2A")]
		[Address(RVA = "0x12FD810", Offset = "0x12FD810", VA = "0x12FD810")]
		internal void WriteToken(JsonReader reader, int initialDepth)
		{
		}

		[Token(Token = "0x6000E2B")]
		[Address(RVA = "0x12FDE24", Offset = "0x12FDE24", VA = "0x12FDE24")]
		private void WriteConstructorDate(JsonReader reader)
		{
		}

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0x12FE044", Offset = "0x12FE044", VA = "0x12FE044")]
		private bool IsEndToken(JsonToken token)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E2D")]
		[Address(RVA = "0x12FD800", Offset = "0x12FD800", VA = "0x12FD800")]
		private bool IsStartToken(JsonToken token)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0x12FD640", Offset = "0x12FD640", VA = "0x12FD640")]
		private void WriteEnd(JTokenType type)
		{
		}

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0x12FD3B8", Offset = "0x12FD3B8", VA = "0x12FD3B8")]
		private void AutoCompleteAll()
		{
		}

		[Token(Token = "0x6000E30")]
		[Address(RVA = "0x12FE054", Offset = "0x12FE054", VA = "0x12FE054")]
		private JTokenType GetTypeForCloseToken(JsonToken token)
		{
			return default(JTokenType);
		}

		[Token(Token = "0x6000E31")]
		[Address(RVA = "0x12FE124", Offset = "0x12FE124", VA = "0x12FE124")]
		private JsonToken GetCloseTokenForType(JTokenType type)
		{
			return default(JsonToken);
		}

		[Token(Token = "0x6000E32")]
		[Address(RVA = "0x12FD408", Offset = "0x12FD408", VA = "0x12FD408")]
		private void AutoCompleteClose(JsonToken tokenBeingClosed)
		{
		}

		[Token(Token = "0x6000E33")]
		[Address(RVA = "0x12DCFFC", Offset = "0x12DCFFC", VA = "0x12DCFFC", Slot = "15")]
		protected virtual void WriteEnd(JsonToken token)
		{
		}

		[Token(Token = "0x6000E34")]
		[Address(RVA = "0x12FE1F4", Offset = "0x12FE1F4", VA = "0x12FE1F4", Slot = "16")]
		protected virtual void WriteIndent()
		{
		}

		[Token(Token = "0x6000E35")]
		[Address(RVA = "0x12FE1F8", Offset = "0x12FE1F8", VA = "0x12FE1F8", Slot = "17")]
		protected virtual void WriteValueDelimiter()
		{
		}

		[Token(Token = "0x6000E36")]
		[Address(RVA = "0x12FE1FC", Offset = "0x12FE1FC", VA = "0x12FE1FC", Slot = "18")]
		protected virtual void WriteIndentSpace()
		{
		}

		[Token(Token = "0x6000E37")]
		[Address(RVA = "0x12DE5EC", Offset = "0x12DE5EC", VA = "0x12DE5EC")]
		internal void AutoComplete(JsonToken tokenBeingWritten)
		{
		}

		[Token(Token = "0x6000E38")]
		[Address(RVA = "0x12DD820", Offset = "0x12DD820", VA = "0x12DD820", Slot = "19")]
		public virtual void WriteNull()
		{
		}

		[Token(Token = "0x6000E39")]
		[Address(RVA = "0x12DD858", Offset = "0x12DD858", VA = "0x12DD858", Slot = "20")]
		public virtual void WriteUndefined()
		{
		}

		[Token(Token = "0x6000E3A")]
		[Address(RVA = "0x12F4F30", Offset = "0x12F4F30", VA = "0x12F4F30", Slot = "21")]
		public virtual void WriteRaw(string json)
		{
		}

		[Token(Token = "0x6000E3B")]
		[Address(RVA = "0x12FE200", Offset = "0x12FE200", VA = "0x12FE200", Slot = "22")]
		public virtual void WriteRawValue(string json)
		{
		}

		[Token(Token = "0x6000E3C")]
		[Address(RVA = "0x12DD910", Offset = "0x12DD910", VA = "0x12DD910", Slot = "23")]
		public virtual void WriteValue(string value)
		{
		}

		[Token(Token = "0x6000E3D")]
		[Address(RVA = "0x12DD998", Offset = "0x12DD998", VA = "0x12DD998", Slot = "24")]
		public virtual void WriteValue(int value)
		{
		}

		[Token(Token = "0x6000E3E")]
		[Address(RVA = "0x12DDA68", Offset = "0x12DDA68", VA = "0x12DDA68", Slot = "25")]
		public virtual void WriteValue(uint value)
		{
		}

		[Token(Token = "0x6000E3F")]
		[Address(RVA = "0x12DDAF0", Offset = "0x12DDAF0", VA = "0x12DDAF0", Slot = "26")]
		public virtual void WriteValue(long value)
		{
		}

		[Token(Token = "0x6000E40")]
		[Address(RVA = "0x12DDBC0", Offset = "0x12DDBC0", VA = "0x12DDBC0", Slot = "27")]
		public virtual void WriteValue(ulong value)
		{
		}

		[Token(Token = "0x6000E41")]
		[Address(RVA = "0x12DDC48", Offset = "0x12DDC48", VA = "0x12DDC48", Slot = "28")]
		public virtual void WriteValue(float value)
		{
		}

		[Token(Token = "0x6000E42")]
		[Address(RVA = "0x12DDCD0", Offset = "0x12DDCD0", VA = "0x12DDCD0", Slot = "29")]
		public virtual void WriteValue(double value)
		{
		}

		[Token(Token = "0x6000E43")]
		[Address(RVA = "0x12DDD58", Offset = "0x12DDD58", VA = "0x12DDD58", Slot = "30")]
		public virtual void WriteValue(bool value)
		{
		}

		[Token(Token = "0x6000E44")]
		[Address(RVA = "0x12DDDE0", Offset = "0x12DDDE0", VA = "0x12DDDE0", Slot = "31")]
		public virtual void WriteValue(short value)
		{
		}

		[Token(Token = "0x6000E45")]
		[Address(RVA = "0x12DDE68", Offset = "0x12DDE68", VA = "0x12DDE68", Slot = "32")]
		public virtual void WriteValue(ushort value)
		{
		}

		[Token(Token = "0x6000E46")]
		[Address(RVA = "0x12DDF18", Offset = "0x12DDF18", VA = "0x12DDF18", Slot = "33")]
		public virtual void WriteValue(char value)
		{
		}

		[Token(Token = "0x6000E47")]
		[Address(RVA = "0x12DDFA0", Offset = "0x12DDFA0", VA = "0x12DDFA0", Slot = "34")]
		public virtual void WriteValue(byte value)
		{
		}

		[Token(Token = "0x6000E48")]
		[Address(RVA = "0x12DE028", Offset = "0x12DE028", VA = "0x12DE028", Slot = "35")]
		public virtual void WriteValue(sbyte value)
		{
		}

		[Token(Token = "0x6000E49")]
		[Address(RVA = "0x12DE0BC", Offset = "0x12DE0BC", VA = "0x12DE0BC", Slot = "36")]
		public virtual void WriteValue(decimal value)
		{
		}

		[Token(Token = "0x6000E4A")]
		[Address(RVA = "0x12DE144", Offset = "0x12DE144", VA = "0x12DE144", Slot = "37")]
		public virtual void WriteValue(DateTime value)
		{
		}

		[Token(Token = "0x6000E4B")]
		[Address(RVA = "0x12DE1D8", Offset = "0x12DE1D8", VA = "0x12DE1D8", Slot = "38")]
		public virtual void WriteValue(DateTimeOffset value)
		{
		}

		[Token(Token = "0x6000E4C")]
		[Address(RVA = "0x12DE300", Offset = "0x12DE300", VA = "0x12DE300", Slot = "39")]
		public virtual void WriteValue(Guid value)
		{
		}

		[Token(Token = "0x6000E4D")]
		[Address(RVA = "0x12DE3B0", Offset = "0x12DE3B0", VA = "0x12DE3B0", Slot = "40")]
		public virtual void WriteValue(TimeSpan value)
		{
		}

		[Token(Token = "0x6000E4E")]
		[Address(RVA = "0x12FE23C", Offset = "0x12FE23C", VA = "0x12FE23C", Slot = "41")]
		public virtual void WriteValue(int? value)
		{
		}

		[Token(Token = "0x6000E4F")]
		[Address(RVA = "0x12FE2E4", Offset = "0x12FE2E4", VA = "0x12FE2E4", Slot = "42")]
		public virtual void WriteValue(uint? value)
		{
		}

		[Token(Token = "0x6000E50")]
		[Address(RVA = "0x12FE38C", Offset = "0x12FE38C", VA = "0x12FE38C", Slot = "43")]
		public virtual void WriteValue(long? value)
		{
		}

		[Token(Token = "0x6000E51")]
		[Address(RVA = "0x12FE434", Offset = "0x12FE434", VA = "0x12FE434", Slot = "44")]
		public virtual void WriteValue(ulong? value)
		{
		}

		[Token(Token = "0x6000E52")]
		[Address(RVA = "0x12FE4DC", Offset = "0x12FE4DC", VA = "0x12FE4DC", Slot = "45")]
		public virtual void WriteValue(float? value)
		{
		}

		[Token(Token = "0x6000E53")]
		[Address(RVA = "0x12FE580", Offset = "0x12FE580", VA = "0x12FE580", Slot = "46")]
		public virtual void WriteValue(double? value)
		{
		}

		[Token(Token = "0x6000E54")]
		[Address(RVA = "0x12FE624", Offset = "0x12FE624", VA = "0x12FE624", Slot = "47")]
		public virtual void WriteValue(bool? value)
		{
		}

		[Token(Token = "0x6000E55")]
		[Address(RVA = "0x12FE6CC", Offset = "0x12FE6CC", VA = "0x12FE6CC", Slot = "48")]
		public virtual void WriteValue(short? value)
		{
		}

		[Token(Token = "0x6000E56")]
		[Address(RVA = "0x12FE774", Offset = "0x12FE774", VA = "0x12FE774", Slot = "49")]
		public virtual void WriteValue(ushort? value)
		{
		}

		[Token(Token = "0x6000E57")]
		[Address(RVA = "0x12FE81C", Offset = "0x12FE81C", VA = "0x12FE81C", Slot = "50")]
		public virtual void WriteValue(char? value)
		{
		}

		[Token(Token = "0x6000E58")]
		[Address(RVA = "0x12FE8C4", Offset = "0x12FE8C4", VA = "0x12FE8C4", Slot = "51")]
		public virtual void WriteValue(byte? value)
		{
		}

		[Token(Token = "0x6000E59")]
		[Address(RVA = "0x12FE96C", Offset = "0x12FE96C", VA = "0x12FE96C", Slot = "52")]
		public virtual void WriteValue(sbyte? value)
		{
		}

		[Token(Token = "0x6000E5A")]
		[Address(RVA = "0x12FEA14", Offset = "0x12FEA14", VA = "0x12FEA14", Slot = "53")]
		public virtual void WriteValue(decimal? value)
		{
		}

		[Token(Token = "0x6000E5B")]
		[Address(RVA = "0x12FEACC", Offset = "0x12FEACC", VA = "0x12FEACC", Slot = "54")]
		public virtual void WriteValue(DateTime? value)
		{
		}

		[Token(Token = "0x6000E5C")]
		[Address(RVA = "0x12FEB74", Offset = "0x12FEB74", VA = "0x12FEB74", Slot = "55")]
		public virtual void WriteValue(DateTimeOffset? value)
		{
		}

		[Token(Token = "0x6000E5D")]
		[Address(RVA = "0x12FEC2C", Offset = "0x12FEC2C", VA = "0x12FEC2C", Slot = "56")]
		public virtual void WriteValue(Guid? value)
		{
		}

		[Token(Token = "0x6000E5E")]
		[Address(RVA = "0x12FECE4", Offset = "0x12FECE4", VA = "0x12FECE4", Slot = "57")]
		public virtual void WriteValue(TimeSpan? value)
		{
		}

		[Token(Token = "0x6000E5F")]
		[Address(RVA = "0x12DE234", Offset = "0x12DE234", VA = "0x12DE234", Slot = "58")]
		public virtual void WriteValue(byte[] value)
		{
		}

		[Token(Token = "0x6000E60")]
		[Address(RVA = "0x12DE46C", Offset = "0x12DE46C", VA = "0x12DE46C", Slot = "59")]
		public virtual void WriteValue(Uri value)
		{
		}

		[Token(Token = "0x6000E61")]
		[Address(RVA = "0x12FED8C", Offset = "0x12FED8C", VA = "0x12FED8C", Slot = "60")]
		public virtual void WriteValue(object value)
		{
		}

		[Token(Token = "0x6000E62")]
		[Address(RVA = "0x12F5D94", Offset = "0x12F5D94", VA = "0x12F5D94", Slot = "61")]
		public virtual void WriteComment(string text)
		{
		}

		[Token(Token = "0x6000E63")]
		[Address(RVA = "0x12F5DE4", Offset = "0x12F5DE4", VA = "0x12F5DE4", Slot = "62")]
		public virtual void WriteWhitespace(string ws)
		{
		}

		[Token(Token = "0x6000E64")]
		[Address(RVA = "0x12FFC08", Offset = "0x12FFC08", VA = "0x12FFC08", Slot = "4")]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E65")]
		[Address(RVA = "0x12FFC48", Offset = "0x12FFC48", VA = "0x12FFC48")]
		private void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x200020B")]
	public class JsonWriterException : Exception
	{
		[Token(Token = "0x6000E67")]
		[Address(RVA = "0x184E924", Offset = "0x184E924", VA = "0x184E924")]
		public JsonWriterException()
		{
		}

		[Token(Token = "0x6000E68")]
		[Address(RVA = "0x184E98C", Offset = "0x184E98C", VA = "0x184E98C")]
		public JsonWriterException(string message)
		{
		}

		[Token(Token = "0x6000E69")]
		[Address(RVA = "0x184EA04", Offset = "0x184EA04", VA = "0x184EA04")]
		public JsonWriterException(string message, Exception innerException)
		{
		}
	}
	[Token(Token = "0x200020C")]
	public enum MemberSerialization
	{
		[Token(Token = "0x4000B9A")]
		OptOut,
		[Token(Token = "0x4000B9B")]
		OptIn
	}
	[Token(Token = "0x200020D")]
	public enum MissingMemberHandling
	{
		[Token(Token = "0x4000B9D")]
		Ignore,
		[Token(Token = "0x4000B9E")]
		Error
	}
	[Token(Token = "0x200020E")]
	public enum NullValueHandling
	{
		[Token(Token = "0x4000BA0")]
		Include,
		[Token(Token = "0x4000BA1")]
		Ignore
	}
	[Token(Token = "0x200020F")]
	public enum ObjectCreationHandling
	{
		[Token(Token = "0x4000BA3")]
		Auto,
		[Token(Token = "0x4000BA4")]
		Reuse,
		[Token(Token = "0x4000BA5")]
		Replace
	}
	[Token(Token = "0x2000210")]
	[Flags]
	public enum PreserveReferencesHandling
	{
		[Token(Token = "0x4000BA7")]
		None = 0,
		[Token(Token = "0x4000BA8")]
		Objects = 1,
		[Token(Token = "0x4000BA9")]
		Arrays = 2,
		[Token(Token = "0x4000BAA")]
		All = 3
	}
	[Token(Token = "0x2000211")]
	public enum ReferenceLoopHandling
	{
		[Token(Token = "0x4000BAC")]
		Error,
		[Token(Token = "0x4000BAD")]
		Ignore,
		[Token(Token = "0x4000BAE")]
		Serialize
	}
	[Token(Token = "0x2000212")]
	public enum Required
	{
		[Token(Token = "0x4000BB0")]
		Default,
		[Token(Token = "0x4000BB1")]
		AllowNull,
		[Token(Token = "0x4000BB2")]
		Always
	}
	[Token(Token = "0x2000213")]
	[Flags]
	public enum TypeNameHandling
	{
		[Token(Token = "0x4000BB4")]
		None = 0,
		[Token(Token = "0x4000BB5")]
		Objects = 1,
		[Token(Token = "0x4000BB6")]
		Arrays = 2,
		[Token(Token = "0x4000BB7")]
		Auto = 4,
		[Token(Token = "0x4000BB8")]
		All = 3
	}
}
namespace Newtonsoft.Json.Utilities
{
	[Token(Token = "0x2000214")]
	internal class Base64Encoder
	{
		[Token(Token = "0x4000BB9")]
		private const int Base64LineSize = 76;

		[Token(Token = "0x4000BBA")]
		private const int LineSizeInBytes = 57;

		[Token(Token = "0x4000BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly char[] _charsLine;

		[Token(Token = "0x4000BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly TextWriter _writer;

		[Token(Token = "0x4000BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private byte[] _leftOverBytes;

		[Token(Token = "0x4000BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int _leftOverBytesCount;

		[Token(Token = "0x6000E6A")]
		[Address(RVA = "0x16B7834", Offset = "0x16B7834", VA = "0x16B7834")]
		public Base64Encoder(TextWriter writer)
		{
		}

		[Token(Token = "0x6000E6B")]
		[Address(RVA = "0x16B78BC", Offset = "0x16B78BC", VA = "0x16B78BC")]
		public void Encode(byte[] buffer, int index, int count)
		{
		}

		[Token(Token = "0x6000E6C")]
		[Address(RVA = "0x16B7CC8", Offset = "0x16B7CC8", VA = "0x16B7CC8")]
		public void Flush()
		{
		}

		[Token(Token = "0x6000E6D")]
		[Address(RVA = "0x16B7C70", Offset = "0x16B7C70", VA = "0x16B7C70")]
		private void WriteChars(char[] chars, int index, int count)
		{
		}
	}
	[Token(Token = "0x2000215")]
	internal class BidirectionalDictionary<TFirst, TSecond>
	{
		[Token(Token = "0x4000BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IDictionary<TFirst, TSecond> _firstToSecond;

		[Token(Token = "0x4000BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IDictionary<TSecond, TFirst> _secondToFirst;

		[Token(Token = "0x6000E6E")]
		public BidirectionalDictionary()
		{
		}

		[Token(Token = "0x6000E6F")]
		public BidirectionalDictionary(IEqualityComparer<TFirst> firstEqualityComparer, IEqualityComparer<TSecond> secondEqualityComparer)
		{
		}

		[Token(Token = "0x6000E70")]
		public void Add(TFirst first, TSecond second)
		{
		}

		[Token(Token = "0x6000E71")]
		public bool TryGetByFirst(TFirst first, out TSecond second)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E72")]
		public bool TryGetBySecond(TSecond second, out TFirst first)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000216")]
	internal static class CollectionUtils
	{
		[Serializable]
		[Token(Token = "0x2000309")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A66C4", Offset = "0x9A66C4")]
		private sealed class <>c__0<T>
		{
			[Token(Token = "0x4000ECE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__0<T> <>9;

			[Token(Token = "0x4000ECF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<object, bool> <>9__0_0;

			[Token(Token = "0x60015CF")]
			public <>c__0()
			{
			}

			[Token(Token = "0x60015D0")]
			internal bool <CastValid>b__0_0(object o)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200030A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A66D4", Offset = "0x9A66D4")]
		private sealed class <>c__DisplayClass16_0<T>
		{
			[Token(Token = "0x4000ED0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IList<T> list;

			[Token(Token = "0x4000ED1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool returnDefaultIfEmpty;

			[Token(Token = "0x60015D1")]
			public <>c__DisplayClass16_0()
			{
			}

			[Token(Token = "0x60015D2")]
			internal T <TryGetSingleItem>b__0()
			{
				return (T)null;
			}
		}

		[Token(Token = "0x200030B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A66E4", Offset = "0x9A66E4")]
		private sealed class <>c__DisplayClass25_0
		{
			[Token(Token = "0x4000ED2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Type collectionDefinition;

			[Token(Token = "0x4000ED3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public object list;

			[Token(Token = "0x60015D3")]
			[Address(RVA = "0x16B8B38", Offset = "0x16B8B38", VA = "0x16B8B38")]
			public <>c__DisplayClass25_0()
			{
			}

			[Token(Token = "0x60015D4")]
			[Address(RVA = "0x16BBA7C", Offset = "0x16BBA7C", VA = "0x16BBA7C")]
			internal object <CreateCollectionWrapper>b__0(Type t, IList<object> a)
			{
				return null;
			}
		}

		[Token(Token = "0x200030C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A66F4", Offset = "0x9A66F4")]
		private sealed class <>c__DisplayClass26_0
		{
			[Token(Token = "0x4000ED4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Type listDefinition;

			[Token(Token = "0x4000ED5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public object list;

			[Token(Token = "0x60015D5")]
			[Address(RVA = "0x16B96C8", Offset = "0x16B96C8", VA = "0x16B96C8")]
			public <>c__DisplayClass26_0()
			{
			}

			[Token(Token = "0x60015D6")]
			[Address(RVA = "0x16BBBE4", Offset = "0x16BBBE4", VA = "0x16BBBE4")]
			internal object <CreateListWrapper>b__0(Type t, IList<object> a)
			{
				return null;
			}
		}

		[Token(Token = "0x200030D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6704", Offset = "0x9A6704")]
		private sealed class <>c__DisplayClass27_0
		{
			[Token(Token = "0x4000ED6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Type dictionaryDefinition;

			[Token(Token = "0x4000ED7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public object dictionary;

			[Token(Token = "0x60015D7")]
			[Address(RVA = "0x16B9C5C", Offset = "0x16B9C5C", VA = "0x16B9C5C")]
			public <>c__DisplayClass27_0()
			{
			}

			[Token(Token = "0x60015D8")]
			[Address(RVA = "0x16BBD4C", Offset = "0x16BBD4C", VA = "0x16BBD4C")]
			internal object <CreateDictionaryWrapper>b__0(Type t, IList<object> a)
			{
				return null;
			}
		}

		[Token(Token = "0x6000E73")]
		public static IEnumerable<T> CastValid<T>(this IEnumerable enumerable)
		{
			return null;
		}

		[Token(Token = "0x6000E74")]
		public static List<T> CreateList<T>(params T[] values)
		{
			return null;
		}

		[Token(Token = "0x6000E75")]
		[Address(RVA = "0x16B7D98", Offset = "0x16B7D98", VA = "0x16B7D98")]
		public static bool IsNullOrEmpty(ICollection collection)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E76")]
		public static bool IsNullOrEmpty<T>(ICollection<T> collection)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E77")]
		public static bool IsNullOrEmptyOrDefault<T>(IList<T> list)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E78")]
		public static IList<T> Slice<T>(IList<T> list, int? start, int? end)
		{
			return null;
		}

		[Token(Token = "0x6000E79")]
		public static IList<T> Slice<T>(IList<T> list, int? start, int? end, int? step)
		{
			return null;
		}

		[Token(Token = "0x6000E7A")]
		public static Dictionary<K, List<V>> GroupBy<K, V>(ICollection<V> source, Func<V, K> keySelector)
		{
			return null;
		}

		[Token(Token = "0x6000E7B")]
		public static void AddRange<T>(this IList<T> initial, IEnumerable<T> collection)
		{
		}

		[Token(Token = "0x6000E7C")]
		[Address(RVA = "0x16B7E58", Offset = "0x16B7E58", VA = "0x16B7E58")]
		public static void AddRange(this IList initial, IEnumerable collection)
		{
		}

		[Token(Token = "0x6000E7D")]
		public static List<T> Distinct<T>(List<T> collection)
		{
			return null;
		}

		[Token(Token = "0x6000E7E")]
		public static List<List<T>> Flatten<T>(params IList<T>[] lists)
		{
			return null;
		}

		[Token(Token = "0x6000E7F")]
		private static void Recurse<T>(IList<IList<T>> global, int current, Dictionary<int, T> currentSet, List<List<T>> flattenedResult)
		{
		}

		[Token(Token = "0x6000E80")]
		public static List<T> CreateList<T>(ICollection collection)
		{
			return null;
		}

		[Token(Token = "0x6000E81")]
		public static bool ListEquals<T>(IList<T> a, IList<T> b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E82")]
		public static bool TryGetSingleItem<T>(IList<T> list, out T value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E83")]
		public static bool TryGetSingleItem<T>(IList<T> list, bool returnDefaultIfEmpty, out T value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E84")]
		public static T GetSingleItem<T>(IList<T> list)
		{
			return (T)null;
		}

		[Token(Token = "0x6000E85")]
		public static T GetSingleItem<T>(IList<T> list, bool returnDefaultIfEmpty)
		{
			return (T)null;
		}

		[Token(Token = "0x6000E86")]
		public static IList<T> Minus<T>(IList<T> list, IList<T> minus)
		{
			return null;
		}

		[Token(Token = "0x6000E87")]
		[Address(RVA = "0x16B7F08", Offset = "0x16B7F08", VA = "0x16B7F08")]
		public static IList CreateGenericList(Type listType)
		{
			return null;
		}

		[Token(Token = "0x6000E88")]
		[Address(RVA = "0x16B8100", Offset = "0x16B8100", VA = "0x16B8100")]
		public static IDictionary CreateGenericDictionary(Type keyType, Type valueType)
		{
			return null;
		}

		[Token(Token = "0x6000E89")]
		[Address(RVA = "0x16B82A4", Offset = "0x16B82A4", VA = "0x16B82A4")]
		public static bool IsListType(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E8A")]
		[Address(RVA = "0x16B83F4", Offset = "0x16B83F4", VA = "0x16B83F4")]
		public static bool IsCollectionType(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E8B")]
		[Address(RVA = "0x16B851C", Offset = "0x16B851C", VA = "0x16B851C")]
		public static bool IsDictionaryType(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E8C")]
		[Address(RVA = "0x16B8628", Offset = "0x16B8628", VA = "0x16B8628")]
		public static IWrappedCollection CreateCollectionWrapper(object list)
		{
			return null;
		}

		[Token(Token = "0x6000E8D")]
		[Address(RVA = "0x16B91B8", Offset = "0x16B91B8", VA = "0x16B91B8")]
		public static IWrappedList CreateListWrapper(object list)
		{
			return null;
		}

		[Token(Token = "0x6000E8E")]
		[Address(RVA = "0x16B96D0", Offset = "0x16B96D0", VA = "0x16B96D0")]
		public static IWrappedDictionary CreateDictionaryWrapper(object dictionary)
		{
			return null;
		}

		[Token(Token = "0x6000E8F")]
		[Address(RVA = "0x16B9CBC", Offset = "0x16B9CBC", VA = "0x16B9CBC")]
		public static object CreateAndPopulateList(Type listType, Action<IList, bool> populateList)
		{
			return null;
		}

		[Token(Token = "0x6000E90")]
		[Address(RVA = "0x16BB04C", Offset = "0x16BB04C", VA = "0x16BB04C")]
		public static Array ToArray(Array initial, Type type)
		{
			return null;
		}

		[Token(Token = "0x6000E91")]
		[Address(RVA = "0x16BB208", Offset = "0x16BB208", VA = "0x16BB208")]
		private static IList<int> GetDimensions(IList values)
		{
			return null;
		}

		[Token(Token = "0x6000E92")]
		[Address(RVA = "0x16BAEA0", Offset = "0x16BAEA0", VA = "0x16BAEA0")]
		public static Array ToMultidimensionalArray(IList values, Type type, int rank)
		{
			return null;
		}

		[Token(Token = "0x6000E93")]
		[Address(RVA = "0x16BB8D4", Offset = "0x16BB8D4", VA = "0x16BB8D4")]
		private static object JaggedArrayGetValue(IList values, int[] indices)
		{
			return null;
		}

		[Token(Token = "0x6000E94")]
		[Address(RVA = "0x16BB4F0", Offset = "0x16BB4F0", VA = "0x16BB4F0")]
		private static void CopyFromJaggedToMultidimensionalArray(IList values, Array multidimensionalArray, int[] indices)
		{
		}

		[Token(Token = "0x6000E95")]
		public static bool AddDistinct<T>(this IList<T> list, T value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E96")]
		public static bool AddDistinct<T>(this IList<T> list, T value, IEqualityComparer<T> comparer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E97")]
		public static bool ContainsValue<TSource>(this IEnumerable<TSource> source, TSource value, IEqualityComparer<TSource> comparer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E98")]
		public static bool AddRangeDistinct<T>(this IList<T> list, IEnumerable<T> values)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E99")]
		public static bool AddRangeDistinct<T>(this IList<T> list, IEnumerable<T> values, IEqualityComparer<T> comparer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E9A")]
		public static int IndexOf<T>(this IEnumerable<T> collection, Func<T, bool> predicate)
		{
			return default(int);
		}

		[Token(Token = "0x6000E9B")]
		public static int IndexOf<TSource>(this IEnumerable<TSource> list, TSource value) where TSource : IEquatable<TSource>
		{
			return default(int);
		}

		[Token(Token = "0x6000E9C")]
		public static int IndexOf<TSource>(this IEnumerable<TSource> list, TSource value, IEqualityComparer<TSource> comparer)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000217")]
	internal interface IWrappedCollection : IList, ICollection, IEnumerable
	{
		[Token(Token = "0x17000107")]
		object UnderlyingCollection
		{
			[Token(Token = "0x6000E9D")]
			get;
		}
	}
	[Token(Token = "0x2000218")]
	internal class CollectionWrapper<T> : ICollection<T>, IEnumerable<T>, IEnumerable, IWrappedCollection, IList, ICollection
	{
		[Token(Token = "0x4000BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IList _list;

		[Token(Token = "0x4000BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly ICollection<T> _genericCollection;

		[Token(Token = "0x4000BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private object _syncRoot;

		[Token(Token = "0x17000108")]
		public virtual int Count
		{
			[Token(Token = "0x6000EA4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000109")]
		public virtual bool IsReadOnly
		{
			[Token(Token = "0x6000EA5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700010A")]
		private bool System.Collections.IList.IsFixedSize
		{
			[Token(Token = "0x6000EAF")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700010B")]
		private object System.Collections.IList.Item
		{
			[Token(Token = "0x6000EB1")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EB2")]
			set
			{
			}
		}

		[Token(Token = "0x1700010C")]
		private bool System.Collections.ICollection.IsSynchronized
		{
			[Token(Token = "0x6000EB4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700010D")]
		private object System.Collections.ICollection.SyncRoot
		{
			[Token(Token = "0x6000EB5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010E")]
		public object UnderlyingCollection
		{
			[Token(Token = "0x6000EB8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E9E")]
		public CollectionWrapper(IList list)
		{
		}

		[Token(Token = "0x6000E9F")]
		public CollectionWrapper(ICollection<T> list)
		{
		}

		[Token(Token = "0x6000EA0")]
		public virtual void Add(T item)
		{
		}

		[Token(Token = "0x6000EA1")]
		public virtual void Clear()
		{
		}

		[Token(Token = "0x6000EA2")]
		public virtual bool Contains(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EA3")]
		public virtual void CopyTo(T[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6000EA6")]
		public virtual bool Remove(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EA7")]
		public virtual IEnumerator<T> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000EA8")]
		public bool IsGenericCollection()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EA9")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000EAA")]
		private int System.Collections.IList.Add(object value)
		{
			return default(int);
		}

		[Token(Token = "0x6000EAB")]
		private bool System.Collections.IList.Contains(object value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EAC")]
		private int System.Collections.IList.IndexOf(object value)
		{
			return default(int);
		}

		[Token(Token = "0x6000EAD")]
		private void System.Collections.IList.RemoveAt(int index)
		{
		}

		[Token(Token = "0x6000EAE")]
		private void System.Collections.IList.Insert(int index, object value)
		{
		}

		[Token(Token = "0x6000EB0")]
		private void System.Collections.IList.Remove(object value)
		{
		}

		[Token(Token = "0x6000EB3")]
		private void System.Collections.ICollection.CopyTo(Array array, int arrayIndex)
		{
		}

		[Token(Token = "0x6000EB6")]
		private static void VerifyValueType(object value)
		{
		}

		[Token(Token = "0x6000EB7")]
		private static bool IsCompatibleObject(object value)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000219")]
	internal static class ConvertUtils
	{
		[Token(Token = "0x200030E")]
		internal struct TypeConvertKey : IEquatable<TypeConvertKey>
		{
			[Token(Token = "0x4000ED8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Type _initialType;

			[Token(Token = "0x4000ED9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private readonly Type _targetType;

			[Token(Token = "0x1700024B")]
			public Type InitialType
			{
				[Token(Token = "0x60015D9")]
				[Address(RVA = "0xA785D8", Offset = "0xA785D8", VA = "0xA785D8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700024C")]
			public Type TargetType
			{
				[Token(Token = "0x60015DA")]
				[Address(RVA = "0xA785E0", Offset = "0xA785E0", VA = "0xA785E0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60015DB")]
			[Address(RVA = "0xA785E8", Offset = "0xA785E8", VA = "0xA785E8")]
			public TypeConvertKey(Type initialType, Type targetType)
			{
			}

			[Token(Token = "0x60015DC")]
			[Address(RVA = "0xA785F0", Offset = "0xA785F0", VA = "0xA785F0", Slot = "2")]
			public override int GetHashCode()
			{
				return default(int);
			}

			[Token(Token = "0x60015DD")]
			[Address(RVA = "0xA785F8", Offset = "0xA785F8", VA = "0xA785F8", Slot = "0")]
			public override bool Equals(object obj)
			{
				return default(bool);
			}

			[Token(Token = "0x60015DE")]
			[Address(RVA = "0xA78600", Offset = "0xA78600", VA = "0xA78600", Slot = "4")]
			public bool Equals(TypeConvertKey other)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200030F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6714", Offset = "0x9A6714")]
		private sealed class <>c__DisplayClass2_0
		{
			[Token(Token = "0x4000EDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public MethodCall<object, object> call;

			[Token(Token = "0x60015DF")]
			[Address(RVA = "0x16BC120", Offset = "0x16BC120", VA = "0x16BC120")]
			public <>c__DisplayClass2_0()
			{
			}

			[Token(Token = "0x60015E0")]
			[Address(RVA = "0x16BDB3C", Offset = "0x16BDB3C", VA = "0x16BDB3C")]
			internal object <CreateCastConverter>b__0(object o)
			{
				return null;
			}
		}

		[Token(Token = "0x2000310")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6724", Offset = "0x9A6724")]
		private sealed class <>c__DisplayClass9_0<T>
		{
			[Token(Token = "0x4000EDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public object initialValue;

			[Token(Token = "0x60015E1")]
			public <>c__DisplayClass9_0()
			{
			}

			[Token(Token = "0x60015E2")]
			internal T <TryConvert>b__0()
			{
				return (T)null;
			}
		}

		[Token(Token = "0x2000311")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6734", Offset = "0x9A6734")]
		private sealed class <>c__DisplayClass10_0
		{
			[Token(Token = "0x4000EDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public object initialValue;

			[Token(Token = "0x4000EDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public CultureInfo culture;

			[Token(Token = "0x4000EDE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Type targetType;

			[Token(Token = "0x60015E3")]
			[Address(RVA = "0x16BD72C", Offset = "0x16BD72C", VA = "0x16BD72C")]
			public <>c__DisplayClass10_0()
			{
			}

			[Token(Token = "0x60015E4")]
			[Address(RVA = "0x16BDA44", Offset = "0x16BDA44", VA = "0x16BDA44")]
			internal object <TryConvert>b__0()
			{
				return null;
			}
		}

		[Token(Token = "0x2000312")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6744", Offset = "0x9A6744")]
		private sealed class <>c__DisplayClass15_0<T>
		{
			[Token(Token = "0x4000EDF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public object initialValue;

			[Token(Token = "0x60015E5")]
			public <>c__DisplayClass15_0()
			{
			}

			[Token(Token = "0x60015E6")]
			internal T <TryConvertOrCast>b__0()
			{
				return (T)null;
			}
		}

		[Token(Token = "0x2000313")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6754", Offset = "0x9A6754")]
		private sealed class <>c__DisplayClass16_0
		{
			[Token(Token = "0x4000EE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public object initialValue;

			[Token(Token = "0x4000EE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public CultureInfo culture;

			[Token(Token = "0x4000EE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Type targetType;

			[Token(Token = "0x60015E7")]
			[Address(RVA = "0x16BD988", Offset = "0x16BD988", VA = "0x16BD988")]
			public <>c__DisplayClass16_0()
			{
			}

			[Token(Token = "0x60015E8")]
			[Address(RVA = "0x16BDAC0", Offset = "0x16BDAC0", VA = "0x16BDAC0")]
			internal object <TryConvertOrCast>b__0()
			{
				return null;
			}
		}

		[Token(Token = "0x4000BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly ThreadSafeStore<TypeConvertKey, Func<object, object>> CastConverters;

		[Token(Token = "0x6000EB9")]
		[Address(RVA = "0x16BBEB4", Offset = "0x16BBEB4", VA = "0x16BBEB4")]
		private static Func<object, object> CreateCastConverter(TypeConvertKey t)
		{
			return null;
		}

		[Token(Token = "0x6000EBA")]
		[Address(RVA = "0x16BC138", Offset = "0x16BC138", VA = "0x16BC138")]
		public static bool CanConvertType(Type initialType, Type targetType, bool allowTypeNameToString)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EBB")]
		[Address(RVA = "0x16BC750", Offset = "0x16BC750", VA = "0x16BC750")]
		private static bool IsComponentConverter(TypeConverter converter)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EBC")]
		public static T Convert<T>(object initialValue)
		{
			return (T)null;
		}

		[Token(Token = "0x6000EBD")]
		public static T Convert<T>(object initialValue, CultureInfo culture)
		{
			return (T)null;
		}

		[Token(Token = "0x6000EBE")]
		[Address(RVA = "0x16BC854", Offset = "0x16BC854", VA = "0x16BC854")]
		public static object Convert(object initialValue, CultureInfo culture, Type targetType)
		{
			return null;
		}

		[Token(Token = "0x6000EBF")]
		public static bool TryConvert<T>(object initialValue, out T convertedValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EC0")]
		public static bool TryConvert<T>(object initialValue, CultureInfo culture, out T convertedValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EC1")]
		[Address(RVA = "0x16BD634", Offset = "0x16BD634", VA = "0x16BD634")]
		public static bool TryConvert(object initialValue, CultureInfo culture, Type targetType, out object convertedValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EC2")]
		public static T ConvertOrCast<T>(object initialValue)
		{
			return (T)null;
		}

		[Token(Token = "0x6000EC3")]
		public static T ConvertOrCast<T>(object initialValue, CultureInfo culture)
		{
			return (T)null;
		}

		[Token(Token = "0x6000EC4")]
		[Address(RVA = "0x16BD734", Offset = "0x16BD734", VA = "0x16BD734")]
		public static object ConvertOrCast(object initialValue, CultureInfo culture, Type targetType)
		{
			return null;
		}

		[Token(Token = "0x6000EC5")]
		public static bool TryConvertOrCast<T>(object initialValue, out T convertedValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EC6")]
		public static bool TryConvertOrCast<T>(object initialValue, CultureInfo culture, out T convertedValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EC7")]
		[Address(RVA = "0x16BD890", Offset = "0x16BD890", VA = "0x16BD890")]
		public static bool TryConvertOrCast(object initialValue, CultureInfo culture, Type targetType, out object convertedValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EC8")]
		[Address(RVA = "0x16BD3B0", Offset = "0x16BD3B0", VA = "0x16BD3B0")]
		private static object EnsureTypeAssignable(object value, Type initialType, Type targetType)
		{
			return null;
		}

		[Token(Token = "0x6000EC9")]
		[Address(RVA = "0x16BC6EC", Offset = "0x16BC6EC", VA = "0x16BC6EC")]
		internal static TypeConverter GetConverter(Type t)
		{
			return null;
		}

		[Token(Token = "0x6000ECA")]
		[Address(RVA = "0x16BD338", Offset = "0x16BD338", VA = "0x16BD338")]
		public static bool IsInteger(object value)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200021A")]
	internal static class DateTimeUtils
	{
		[Token(Token = "0x6000ECC")]
		[Address(RVA = "0x16BE248", Offset = "0x16BE248", VA = "0x16BE248")]
		public static string GetLocalOffset(this DateTime d)
		{
			return null;
		}

		[Token(Token = "0x6000ECD")]
		[Address(RVA = "0x16BE36C", Offset = "0x16BE36C", VA = "0x16BE36C")]
		public static XmlDateTimeSerializationMode ToSerializationMode(DateTimeKind kind)
		{
			return default(XmlDateTimeSerializationMode);
		}
	}
	[Token(Token = "0x200021B")]
	internal interface IWrappedDictionary : IDictionary, ICollection, IEnumerable
	{
		[Token(Token = "0x1700010F")]
		object UnderlyingDictionary
		{
			[Token(Token = "0x6000ECE")]
			get;
		}
	}
	[Token(Token = "0x200021C")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x9A6270", Offset = "0x9A6270")]
	internal class DictionaryWrapper<TKey, TValue> : IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable, IWrappedDictionary, IDictionary, ICollection
	{
		[Token(Token = "0x2000314")]
		private struct DictionaryEnumerator<TEnumeratorKey, TEnumeratorValue> : IDictionaryEnumerator, IEnumerator
		{
			[Token(Token = "0x4000EE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly IEnumerator<KeyValuePair<TEnumeratorKey, TEnumeratorValue>> _e;

			[Token(Token = "0x1700024D")]
			public DictionaryEntry Entry
			{
				[Token(Token = "0x60015EA")]
				get
				{
					return default(DictionaryEntry);
				}
			}

			[Token(Token = "0x1700024E")]
			public object Key
			{
				[Token(Token = "0x60015EB")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700024F")]
			public object Value
			{
				[Token(Token = "0x60015EC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000250")]
			public object Current
			{
				[Token(Token = "0x60015ED")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60015E9")]
			public DictionaryEnumerator(IEnumerator<KeyValuePair<TEnumeratorKey, TEnumeratorValue>> e)
			{
			}

			[Token(Token = "0x60015EE")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60015EF")]
			public void Reset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000315")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6764", Offset = "0x9A6764")]
		private sealed class <>c
		{
			[Token(Token = "0x4000EE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000EE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<DictionaryEntry, KeyValuePair<TKey, TValue>> <>9__25_0;

			[Token(Token = "0x60015F1")]
			public <>c()
			{
			}

			[Token(Token = "0x60015F2")]
			internal KeyValuePair<TKey, TValue> <GetEnumerator>b__25_0(DictionaryEntry de)
			{
				return default(KeyValuePair<TKey, TValue>);
			}
		}

		[Token(Token = "0x4000BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IDictionary _dictionary;

		[Token(Token = "0x4000BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IDictionary<TKey, TValue> _genericDictionary;

		[Token(Token = "0x4000BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private object _syncRoot;

		[Token(Token = "0x17000110")]
		public ICollection<TKey> Keys
		{
			[Token(Token = "0x6000ED3")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000111")]
		public ICollection<TValue> Values
		{
			[Token(Token = "0x6000ED6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000112")]
		public TValue Item
		{
			[Token(Token = "0x6000ED7")]
			get
			{
				return (TValue)null;
			}
			[Token(Token = "0x6000ED8")]
			set
			{
			}
		}

		[Token(Token = "0x17000113")]
		public int Count
		{
			[Token(Token = "0x6000EDD")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000114")]
		public bool IsReadOnly
		{
			[Token(Token = "0x6000EDE")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000115")]
		private bool System.Collections.IDictionary.IsFixedSize
		{
			[Token(Token = "0x6000EE5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000116")]
		private ICollection System.Collections.IDictionary.Keys
		{
			[Token(Token = "0x6000EE6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000117")]
		private ICollection System.Collections.IDictionary.Values
		{
			[Token(Token = "0x6000EE8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000118")]
		private object System.Collections.IDictionary.Item
		{
			[Token(Token = "0x6000EE9")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EEA")]
			set
			{
			}
		}

		[Token(Token = "0x17000119")]
		private bool System.Collections.ICollection.IsSynchronized
		{
			[Token(Token = "0x6000EEC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700011A")]
		private object System.Collections.ICollection.SyncRoot
		{
			[Token(Token = "0x6000EED")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011B")]
		public object UnderlyingDictionary
		{
			[Token(Token = "0x6000EEE")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000ECF")]
		public DictionaryWrapper(IDictionary dictionary)
		{
		}

		[Token(Token = "0x6000ED0")]
		public DictionaryWrapper(IDictionary<TKey, TValue> dictionary)
		{
		}

		[Token(Token = "0x6000ED1")]
		public void Add(TKey key, TValue value)
		{
		}

		[Token(Token = "0x6000ED2")]
		public bool ContainsKey(TKey key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED4")]
		public bool Remove(TKey key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED5")]
		public bool TryGetValue(TKey key, out TValue value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED9")]
		public void Add(KeyValuePair<TKey, TValue> item)
		{
		}

		[Token(Token = "0x6000EDA")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000EDB")]
		public bool Contains(KeyValuePair<TKey, TValue> item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EDC")]
		public void CopyTo(KeyValuePair<TKey, TValue>[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6000EDF")]
		public bool Remove(KeyValuePair<TKey, TValue> item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EE0")]
		public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000EE1")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000EE2")]
		private void System.Collections.IDictionary.Add(object key, object value)
		{
		}

		[Token(Token = "0x6000EE3")]
		private bool System.Collections.IDictionary.Contains(object key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EE4")]
		private IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000EE7")]
		public void Remove(object key)
		{
		}

		[Token(Token = "0x6000EEB")]
		private void System.Collections.ICollection.CopyTo(Array array, int index)
		{
		}
	}
	[Token(Token = "0x200021D")]
	internal static class EnumUtils
	{
		[Token(Token = "0x2000316")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6774", Offset = "0x9A6774")]
		private sealed class <>c__DisplayClass2_0<T> where T : struct
		{
			[Token(Token = "0x4000EE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string enumMemberName;

			[Token(Token = "0x4000EE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool ignoreCase;

			[Token(Token = "0x60015F3")]
			public <>c__DisplayClass2_0()
			{
			}

			[Token(Token = "0x60015F4")]
			internal T <TryParse>b__0()
			{
				return (T)null;
			}
		}

		[Serializable]
		[Token(Token = "0x2000317")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6784", Offset = "0x9A6784")]
		private sealed class <>c__3<T> where T : struct
		{
			[Token(Token = "0x4000EE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__3<T> <>9;

			[Token(Token = "0x4000EE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<EnumValue<ulong>, bool> <>9__3_0;

			[Token(Token = "0x60015F6")]
			public <>c__3()
			{
			}

			[Token(Token = "0x60015F7")]
			internal bool <GetFlagsValues>b__3_0(EnumValue<ulong> v)
			{
				return default(bool);
			}
		}

		[Serializable]
		[Token(Token = "0x2000318")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6794", Offset = "0x9A6794")]
		private sealed class <>c
		{
			[Token(Token = "0x4000EEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000EEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<FieldInfo, bool> <>9__8_0;

			[Token(Token = "0x4000EEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<FieldInfo, bool> <>9__10_0;

			[Token(Token = "0x60015F9")]
			[Address(RVA = "0x16BEE74", Offset = "0x16BEE74", VA = "0x16BEE74")]
			public <>c()
			{
			}

			[Token(Token = "0x60015FA")]
			[Address(RVA = "0x16BEE7C", Offset = "0x16BEE7C", VA = "0x16BEE7C")]
			internal bool <GetValues>b__8_0(FieldInfo field)
			{
				return default(bool);
			}

			[Token(Token = "0x60015FB")]
			[Address(RVA = "0x16BEEAC", Offset = "0x16BEEAC", VA = "0x16BEEAC")]
			internal bool <GetNames>b__10_0(FieldInfo field)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000EEF")]
		public static T Parse<T>(string enumMemberName) where T : struct
		{
			return (T)null;
		}

		[Token(Token = "0x6000EF0")]
		public static T Parse<T>(string enumMemberName, bool ignoreCase) where T : struct
		{
			return (T)null;
		}

		[Token(Token = "0x6000EF1")]
		public static bool TryParse<T>(string enumMemberName, bool ignoreCase, out T value) where T : struct
		{
			return default(bool);
		}

		[Token(Token = "0x6000EF2")]
		public static IList<T> GetFlagsValues<T>(T value) where T : struct
		{
			return null;
		}

		[Token(Token = "0x6000EF3")]
		public static EnumValues<ulong> GetNamesAndValues<T>() where T : struct
		{
			return null;
		}

		[Token(Token = "0x6000EF4")]
		public static EnumValues<TUnderlyingType> GetNamesAndValues<TEnum, TUnderlyingType>() where TEnum : struct where TUnderlyingType : struct
		{
			return null;
		}

		[Token(Token = "0x6000EF5")]
		public static EnumValues<TUnderlyingType> GetNamesAndValues<TUnderlyingType>(Type enumType) where TUnderlyingType : struct
		{
			return null;
		}

		[Token(Token = "0x6000EF6")]
		public static IList<T> GetValues<T>()
		{
			return null;
		}

		[Token(Token = "0x6000EF7")]
		[Address(RVA = "0x16BE578", Offset = "0x16BE578", VA = "0x16BE578")]
		public static IList<object> GetValues(Type enumType)
		{
			return null;
		}

		[Token(Token = "0x6000EF8")]
		public static IList<string> GetNames<T>()
		{
			return null;
		}

		[Token(Token = "0x6000EF9")]
		[Address(RVA = "0x16BE9CC", Offset = "0x16BE9CC", VA = "0x16BE9CC")]
		public static IList<string> GetNames(Type enumType)
		{
			return null;
		}

		[Token(Token = "0x6000EFA")]
		public static TEnumType GetMaximumValue<TEnumType>(Type enumType) where TEnumType : IConvertible, IComparable<TEnumType>
		{
			return (TEnumType)null;
		}
	}
	[Token(Token = "0x200021E")]
	internal class EnumValue<T> where T : struct
	{
		[Token(Token = "0x4000BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private string _name;

		[Token(Token = "0x4000BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T _value;

		[Token(Token = "0x1700011C")]
		public string Name
		{
			[Token(Token = "0x6000EFB")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011D")]
		public T Value
		{
			[Token(Token = "0x6000EFC")]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x6000EFD")]
		public EnumValue(string name, T value)
		{
		}
	}
	[Token(Token = "0x200021F")]
	internal class EnumValues<T> : KeyedCollection<string, EnumValue<T>> where T : struct
	{
		[Token(Token = "0x6000EFE")]
		protected override string GetKeyForItem(EnumValue<T> item)
		{
			return null;
		}

		[Token(Token = "0x6000EFF")]
		public EnumValues()
		{
		}
	}
	[Token(Token = "0x2000220")]
	internal static class JavaScriptUtils
	{
		[Token(Token = "0x6000F00")]
		[Address(RVA = "0x16BEEDC", Offset = "0x16BEEDC", VA = "0x16BEEDC")]
		public static void WriteEscapedJavaScriptString(TextWriter writer, string value, char delimiter, bool appendDelimiters)
		{
		}

		[Token(Token = "0x6000F01")]
		[Address(RVA = "0x16BF3E8", Offset = "0x16BF3E8", VA = "0x16BF3E8")]
		public static string ToEscapedJavaScriptString(string value)
		{
			return null;
		}

		[Token(Token = "0x6000F02")]
		[Address(RVA = "0x16BF3F4", Offset = "0x16BF3F4", VA = "0x16BF3F4")]
		public static string ToEscapedJavaScriptString(string value, char delimiter, bool appendDelimiters)
		{
			return null;
		}
	}
	[Token(Token = "0x2000221")]
	internal class LateBoundReflectionDelegateFactory : ReflectionDelegateFactory
	{
		[Token(Token = "0x2000319")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A67A4", Offset = "0x9A67A4")]
		private sealed class <>c__DisplayClass3_0<T>
		{
			[Token(Token = "0x4000EED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public ConstructorInfo c;

			[Token(Token = "0x4000EEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public MethodBase method;

			[Token(Token = "0x60015FC")]
			public <>c__DisplayClass3_0()
			{
			}

			[Token(Token = "0x60015FD")]
			internal object <CreateMethodCall>b__0(T o, object[] a)
			{
				return null;
			}

			[Token(Token = "0x60015FE")]
			internal object <CreateMethodCall>b__1(T o, object[] a)
			{
				return null;
			}
		}

		[Token(Token = "0x200031A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A67B4", Offset = "0x9A67B4")]
		private sealed class <>c__DisplayClass4_0<T>
		{
			[Token(Token = "0x4000EEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Type type;

			[Token(Token = "0x4000EF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public ConstructorInfo constructorInfo;

			[Token(Token = "0x60015FF")]
			public <>c__DisplayClass4_0()
			{
			}

			[Token(Token = "0x6001600")]
			internal T <CreateDefaultConstructor>b__0()
			{
				return (T)null;
			}

			[Token(Token = "0x6001601")]
			internal T <CreateDefaultConstructor>b__1()
			{
				return (T)null;
			}
		}

		[Token(Token = "0x200031B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A67C4", Offset = "0x9A67C4")]
		private sealed class <>c__DisplayClass5_0<T>
		{
			[Token(Token = "0x4000EF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public PropertyInfo propertyInfo;

			[Token(Token = "0x6001602")]
			public <>c__DisplayClass5_0()
			{
			}

			[Token(Token = "0x6001603")]
			internal object <CreateGet>b__0(T o)
			{
				return null;
			}
		}

		[Token(Token = "0x200031C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A67D4", Offset = "0x9A67D4")]
		private sealed class <>c__DisplayClass6_0<T>
		{
			[Token(Token = "0x4000EF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public FieldInfo fieldInfo;

			[Token(Token = "0x6001604")]
			public <>c__DisplayClass6_0()
			{
			}

			[Token(Token = "0x6001605")]
			internal object <CreateGet>b__0(T o)
			{
				return null;
			}
		}

		[Token(Token = "0x200031D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A67E4", Offset = "0x9A67E4")]
		private sealed class <>c__DisplayClass7_0<T>
		{
			[Token(Token = "0x4000EF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public FieldInfo fieldInfo;

			[Token(Token = "0x6001606")]
			public <>c__DisplayClass7_0()
			{
			}

			[Token(Token = "0x6001607")]
			internal void <CreateSet>b__0(T o, object v)
			{
			}
		}

		[Token(Token = "0x200031E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A67F4", Offset = "0x9A67F4")]
		private sealed class <>c__DisplayClass8_0<T>
		{
			[Token(Token = "0x4000EF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public PropertyInfo propertyInfo;

			[Token(Token = "0x6001608")]
			public <>c__DisplayClass8_0()
			{
			}

			[Token(Token = "0x6001609")]
			internal void <CreateSet>b__0(T o, object v)
			{
			}
		}

		[Token(Token = "0x4000BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly LateBoundReflectionDelegateFactory _instance;

		[Token(Token = "0x1700011E")]
		internal static ReflectionDelegateFactory Instance
		{
			[Token(Token = "0x6000F03")]
			[Address(RVA = "0x16B6608", Offset = "0x16B6608", VA = "0x16B6608")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F04")]
		public override MethodCall<T, object> CreateMethodCall<T>(MethodBase method)
		{
			return null;
		}

		[Token(Token = "0x6000F05")]
		public override Func<T> CreateDefaultConstructor<T>(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000F06")]
		public override Func<T, object> CreateGet<T>(PropertyInfo propertyInfo)
		{
			return null;
		}

		[Token(Token = "0x6000F07")]
		public override Func<T, object> CreateGet<T>(FieldInfo fieldInfo)
		{
			return null;
		}

		[Token(Token = "0x6000F08")]
		public override Action<T, object> CreateSet<T>(FieldInfo fieldInfo)
		{
			return null;
		}

		[Token(Token = "0x6000F09")]
		public override Action<T, object> CreateSet<T>(PropertyInfo propertyInfo)
		{
			return null;
		}

		[Token(Token = "0x6000F0A")]
		[Address(RVA = "0x16BF6B4", Offset = "0x16BF6B4", VA = "0x16BF6B4")]
		public LateBoundReflectionDelegateFactory()
		{
		}
	}
	[Token(Token = "0x2000222")]
	internal interface IWrappedList : IList, ICollection, IEnumerable
	{
		[Token(Token = "0x1700011F")]
		object UnderlyingList
		{
			[Token(Token = "0x6000F0C")]
			get;
		}
	}
	[Token(Token = "0x2000223")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x9A62A8", Offset = "0x9A62A8")]
	internal class ListWrapper<T> : CollectionWrapper<T>, IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable, IWrappedList, IList, ICollection
	{
		[Token(Token = "0x4000BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IList<T> _genericList;

		[Token(Token = "0x17000120")]
		public T Item
		{
			[Token(Token = "0x6000F12")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x6000F13")]
			set
			{
			}
		}

		[Token(Token = "0x17000121")]
		public override int Count
		{
			[Token(Token = "0x6000F18")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000122")]
		public override bool IsReadOnly
		{
			[Token(Token = "0x6000F19")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000123")]
		public object UnderlyingList
		{
			[Token(Token = "0x6000F1C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F0D")]
		public ListWrapper(IList list)
		{
		}

		[Token(Token = "0x6000F0E")]
		public ListWrapper(IList<T> list)
		{
		}

		[Token(Token = "0x6000F0F")]
		public int IndexOf(T item)
		{
			return default(int);
		}

		[Token(Token = "0x6000F10")]
		public void Insert(int index, T item)
		{
		}

		[Token(Token = "0x6000F11")]
		public void RemoveAt(int index)
		{
		}

		[Token(Token = "0x6000F14")]
		public override void Add(T item)
		{
		}

		[Token(Token = "0x6000F15")]
		public override void Clear()
		{
		}

		[Token(Token = "0x6000F16")]
		public override bool Contains(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F17")]
		public override void CopyTo(T[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6000F1A")]
		public override bool Remove(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F1B")]
		public override IEnumerator<T> GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x2000224")]
	internal class MathUtils
	{
		[Token(Token = "0x6000F1D")]
		[Address(RVA = "0x16BF728", Offset = "0x16BF728", VA = "0x16BF728")]
		public static int IntLength(int i)
		{
			return default(int);
		}

		[Token(Token = "0x6000F1E")]
		[Address(RVA = "0x16BF7E0", Offset = "0x16BF7E0", VA = "0x16BF7E0")]
		public static int HexToInt(char h)
		{
			return default(int);
		}

		[Token(Token = "0x6000F1F")]
		[Address(RVA = "0x16BF830", Offset = "0x16BF830", VA = "0x16BF830")]
		public static char IntToHex(int n)
		{
			return default(char);
		}

		[Token(Token = "0x6000F20")]
		[Address(RVA = "0x16BF848", Offset = "0x16BF848", VA = "0x16BF848")]
		public static int GetDecimalPlaces(double value)
		{
			return default(int);
		}

		[Token(Token = "0x6000F21")]
		[Address(RVA = "0x16BF910", Offset = "0x16BF910", VA = "0x16BF910")]
		public static int? Min(int? val1, int? val2)
		{
			return null;
		}

		[Token(Token = "0x6000F22")]
		[Address(RVA = "0x16BFA10", Offset = "0x16BFA10", VA = "0x16BFA10")]
		public static int? Max(int? val1, int? val2)
		{
			return null;
		}

		[Token(Token = "0x6000F23")]
		[Address(RVA = "0x16BFB10", Offset = "0x16BFB10", VA = "0x16BFB10")]
		public static double? Min(double? val1, double? val2)
		{
			return null;
		}

		[Token(Token = "0x6000F24")]
		[Address(RVA = "0x16BFC14", Offset = "0x16BFC14", VA = "0x16BFC14")]
		public static double? Max(double? val1, double? val2)
		{
			return null;
		}

		[Token(Token = "0x6000F25")]
		[Address(RVA = "0x16BFD18", Offset = "0x16BFD18", VA = "0x16BFD18")]
		public static bool ApproxEquals(double d1, double d2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F26")]
		[Address(RVA = "0x16BFDA4", Offset = "0x16BFDA4", VA = "0x16BFDA4")]
		public MathUtils()
		{
		}
	}
	[Token(Token = "0x2000225")]
	internal delegate TResult MethodCall<T, TResult>(T target, params object[] args);
	[Token(Token = "0x2000226")]
	internal delegate T Creator<T>();
	[Token(Token = "0x2000227")]
	internal static class MiscellaneousUtils
	{
		[Token(Token = "0x6000F2F")]
		[Address(RVA = "0x16BFDAC", Offset = "0x16BFDAC", VA = "0x16BFDAC")]
		public static bool ValueEquals(object objA, object objB)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F30")]
		[Address(RVA = "0x16BE418", Offset = "0x16BE418", VA = "0x16BE418")]
		public static ArgumentOutOfRangeException CreateArgumentOutOfRangeException(string paramName, object actualValue, string message)
		{
			return null;
		}

		[Token(Token = "0x6000F31")]
		public static bool TryAction<T>(Creator<T> creator, out T output)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F32")]
		[Address(RVA = "0x16C0074", Offset = "0x16C0074", VA = "0x16C0074")]
		public static string ToString(object value)
		{
			return null;
		}

		[Token(Token = "0x6000F33")]
		[Address(RVA = "0x16C0120", Offset = "0x16C0120", VA = "0x16C0120")]
		public static byte[] HexToBytes(string hex)
		{
			return null;
		}

		[Token(Token = "0x6000F34")]
		[Address(RVA = "0x16C02BC", Offset = "0x16C02BC", VA = "0x16C02BC")]
		public static string BytesToHex(byte[] bytes)
		{
			return null;
		}

		[Token(Token = "0x6000F35")]
		[Address(RVA = "0x16C02C4", Offset = "0x16C02C4", VA = "0x16C02C4")]
		public static string BytesToHex(byte[] bytes, bool removeDashes)
		{
			return null;
		}

		[Token(Token = "0x6000F36")]
		[Address(RVA = "0x16C0384", Offset = "0x16C0384", VA = "0x16C0384")]
		public static int ByteArrayCompare(byte[] a1, byte[] a2)
		{
			return default(int);
		}

		[Token(Token = "0x6000F37")]
		[Address(RVA = "0x16C0468", Offset = "0x16C0468", VA = "0x16C0468")]
		public static string GetPrefix(string qualifiedName)
		{
			return null;
		}

		[Token(Token = "0x6000F38")]
		[Address(RVA = "0x16C0574", Offset = "0x16C0574", VA = "0x16C0574")]
		public static string GetLocalName(string qualifiedName)
		{
			return null;
		}

		[Token(Token = "0x6000F39")]
		[Address(RVA = "0x16C0494", Offset = "0x16C0494", VA = "0x16C0494")]
		public static void GetQualifiedNameParts(string qualifiedName, out string prefix, out string localName)
		{
		}
	}
	[Token(Token = "0x2000228")]
	internal abstract class ReflectionDelegateFactory
	{
		[Token(Token = "0x6000F3A")]
		public Func<T, object> CreateGet<T>(MemberInfo memberInfo)
		{
			return null;
		}

		[Token(Token = "0x6000F3B")]
		public Action<T, object> CreateSet<T>(MemberInfo memberInfo)
		{
			return null;
		}

		[Token(Token = "0x6000F3C")]
		public abstract MethodCall<T, object> CreateMethodCall<T>(MethodBase method);

		[Token(Token = "0x6000F3D")]
		public abstract Func<T> CreateDefaultConstructor<T>(Type type);

		[Token(Token = "0x6000F3E")]
		public abstract Func<T, object> CreateGet<T>(PropertyInfo propertyInfo);

		[Token(Token = "0x6000F3F")]
		public abstract Func<T, object> CreateGet<T>(FieldInfo fieldInfo);

		[Token(Token = "0x6000F40")]
		public abstract Action<T, object> CreateSet<T>(FieldInfo fieldInfo);

		[Token(Token = "0x6000F41")]
		public abstract Action<T, object> CreateSet<T>(PropertyInfo propertyInfo);

		[Token(Token = "0x6000F42")]
		[Address(RVA = "0x16BF6BC", Offset = "0x16BF6BC", VA = "0x16BF6BC")]
		protected ReflectionDelegateFactory()
		{
		}
	}
	[Token(Token = "0x2000229")]
	public delegate object D1();
	[Token(Token = "0x200022A")]
	internal static class ReflectionUtils
	{
		[Token(Token = "0x200031F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6804", Offset = "0x9A6804")]
		private sealed class <>c__DisplayClass36_0
		{
			[Token(Token = "0x4000EF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public BindingFlags bindingAttr;

			[Token(Token = "0x4000EF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Func<MemberInfo, bool> <>9__2;

			[Token(Token = "0x600160A")]
			[Address(RVA = "0x16C210C", Offset = "0x16C210C", VA = "0x16C210C")]
			public <>c__DisplayClass36_0()
			{
			}

			[Token(Token = "0x600160B")]
			[Address(RVA = "0x16C322C", Offset = "0x16C322C", VA = "0x16C322C")]
			internal bool <GetFieldsAndProperties>b__2(MemberInfo m)
			{
				return default(bool);
			}
		}

		[Serializable]
		[Token(Token = "0x2000320")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6814", Offset = "0x9A6814")]
		private sealed class <>c
		{
			[Token(Token = "0x4000EF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000EF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<MemberInfo, string> <>9__36_0;

			[Token(Token = "0x4000EF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<IGrouping<string, MemberInfo>, <>f__AnonymousType0<int, IEnumerable<MemberInfo>>> <>9__36_1;

			[Token(Token = "0x4000EFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<Type, IList<object>, object> <>9__44_0;

			[Token(Token = "0x4000EFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Func<ParameterInfo, Type> <>9__50_0;

			[Token(Token = "0x4000EFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public static Func<FieldInfo, bool> <>9__52_0;

			[Token(Token = "0x600160D")]
			[Address(RVA = "0x16C3078", Offset = "0x16C3078", VA = "0x16C3078")]
			public <>c()
			{
			}

			[Token(Token = "0x600160E")]
			[Address(RVA = "0x16C3080", Offset = "0x16C3080", VA = "0x16C3080")]
			internal string <GetFieldsAndProperties>b__36_0(MemberInfo m)
			{
				return null;
			}

			[Token(Token = "0x600160F")]
			[Address(RVA = "0x16C30B4", Offset = "0x16C30B4", VA = "0x16C30B4")]
			internal <>f__AnonymousType0<int, IEnumerable<MemberInfo>> <GetFieldsAndProperties>b__36_1(IGrouping<string, MemberInfo> g)
			{
				return null;
			}

			[Token(Token = "0x6001610")]
			[Address(RVA = "0x16C3160", Offset = "0x16C3160", VA = "0x16C3160")]
			internal object <CreateGeneric>b__44_0(Type t, IList<object> a)
			{
				return null;
			}

			[Token(Token = "0x6001611")]
			[Address(RVA = "0x16C31C8", Offset = "0x16C31C8", VA = "0x16C31C8")]
			internal Type <GetMemberInfoFromType>b__50_0(ParameterInfo p)
			{
				return null;
			}

			[Token(Token = "0x6001612")]
			[Address(RVA = "0x16C31FC", Offset = "0x16C31FC", VA = "0x16C31FC")]
			internal bool <GetChildPrivateFields>b__52_0(FieldInfo f)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000321")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6824", Offset = "0x9A6824")]
		private sealed class <>c__DisplayClass55_0
		{
			[Token(Token = "0x4000EFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public PropertyInfo nonPublicProperty;

			[Token(Token = "0x6001613")]
			[Address(RVA = "0x16C300C", Offset = "0x16C300C", VA = "0x16C300C")]
			public <>c__DisplayClass55_0()
			{
			}

			[Token(Token = "0x6001614")]
			[Address(RVA = "0x16C32C8", Offset = "0x16C32C8", VA = "0x16C32C8")]
			internal bool <GetChildPrivateProperties>b__0(PropertyInfo p)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000F47")]
		[Address(RVA = "0x16B588C", Offset = "0x16B588C", VA = "0x16B588C")]
		public static bool IsVirtual(this PropertyInfo propertyInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F48")]
		[Address(RVA = "0x16BD880", Offset = "0x16BD880", VA = "0x16BD880")]
		public static Type GetObjectType(object v)
		{
			return null;
		}

		[Token(Token = "0x6000F49")]
		[Address(RVA = "0x16C05A0", Offset = "0x16C05A0", VA = "0x16C05A0")]
		public static string GetTypeName(Type t, FormatterAssemblyStyle assemblyFormat)
		{
			return null;
		}

		[Token(Token = "0x6000F4A")]
		[Address(RVA = "0x16C05A4", Offset = "0x16C05A4", VA = "0x16C05A4")]
		public static string GetTypeName(Type t, FormatterAssemblyStyle assemblyFormat, SerializationBinder binder)
		{
			return null;
		}

		[Token(Token = "0x6000F4B")]
		[Address(RVA = "0x16C0674", Offset = "0x16C0674", VA = "0x16C0674")]
		private static string RemoveAssemblyDetails(string fullyQualifiedTypeName)
		{
			return null;
		}

		[Token(Token = "0x6000F4C")]
		[Address(RVA = "0x16BAD70", Offset = "0x16BAD70", VA = "0x16BAD70")]
		public static bool IsInstantiatableType(Type t)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F4D")]
		[Address(RVA = "0x16C0808", Offset = "0x16C0808", VA = "0x16C0808")]
		public static bool HasDefaultConstructor(Type t)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F4E")]
		[Address(RVA = "0x16C0810", Offset = "0x16C0810", VA = "0x16C0810")]
		public static bool HasDefaultConstructor(Type t, bool nonPublic)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F4F")]
		[Address(RVA = "0x16C0978", Offset = "0x16C0978", VA = "0x16C0978")]
		public static ConstructorInfo GetDefaultConstructor(Type t)
		{
			return null;
		}

		[Token(Token = "0x6000F50")]
		[Address(RVA = "0x16C08E0", Offset = "0x16C08E0", VA = "0x16C08E0")]
		public static ConstructorInfo GetDefaultConstructor(Type t, bool nonPublic)
		{
			return null;
		}

		[Token(Token = "0x6000F51")]
		[Address(RVA = "0x16BC7D0", Offset = "0x16BC7D0", VA = "0x16BC7D0")]
		public static bool IsNullable(Type t)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F52")]
		[Address(RVA = "0x16BC604", Offset = "0x16BC604", VA = "0x16BC604")]
		public static bool IsNullableType(Type t)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F53")]
		[Address(RVA = "0x16C0980", Offset = "0x16C0980", VA = "0x16C0980")]
		public static Type EnsureNotNullableType(Type t)
		{
			return null;
		}

		[Token(Token = "0x6000F54")]
		[Address(RVA = "0x16C09BC", Offset = "0x16C09BC", VA = "0x16C09BC")]
		public static bool IsUnitializedValue(object value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F55")]
		[Address(RVA = "0x16C0A0C", Offset = "0x16C0A0C", VA = "0x16C0A0C")]
		public static object CreateUnitializedValue(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000F56")]
		[Address(RVA = "0x16C0C70", Offset = "0x16C0C70", VA = "0x16C0C70")]
		public static bool IsPropertyIndexed(PropertyInfo property)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F57")]
		[Address(RVA = "0x16B83CC", Offset = "0x16B83CC", VA = "0x16B83CC")]
		public static bool ImplementsGenericDefinition(Type type, Type genericInterfaceDefinition)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F58")]
		[Address(RVA = "0x16B8B40", Offset = "0x16B8B40", VA = "0x16B8B40")]
		public static bool ImplementsGenericDefinition(Type type, Type genericInterfaceDefinition, out Type implementingType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F59")]
		[Address(RVA = "0x16C0CFC", Offset = "0x16C0CFC", VA = "0x16C0CFC")]
		public static bool AssignableToTypeName(this Type type, string fullTypeName, out Type match)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F5A")]
		[Address(RVA = "0x16C0E98", Offset = "0x16C0E98", VA = "0x16C0E98")]
		public static bool AssignableToTypeName(this Type type, string fullTypeName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F5B")]
		[Address(RVA = "0x16BB174", Offset = "0x16BB174", VA = "0x16BB174")]
		public static bool InheritsGenericDefinition(Type type, Type genericClassDefinition)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F5C")]
		[Address(RVA = "0x16BAA68", Offset = "0x16BAA68", VA = "0x16BAA68")]
		public static bool InheritsGenericDefinition(Type type, Type genericClassDefinition, out Type implementingType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F5D")]
		[Address(RVA = "0x16C0EC0", Offset = "0x16C0EC0", VA = "0x16C0EC0")]
		private static bool InheritsGenericDefinitionInternal(Type currentType, Type genericClassDefinition, out Type implementingType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F5E")]
		[Address(RVA = "0x16B8E54", Offset = "0x16B8E54", VA = "0x16B8E54")]
		public static Type GetCollectionItemType(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000F5F")]
		[Address(RVA = "0x16C1010", Offset = "0x16C1010", VA = "0x16C1010")]
		public static void GetDictionaryKeyValueTypes(Type dictionaryType, out Type keyType, out Type valueType)
		{
		}

		[Token(Token = "0x6000F60")]
		[Address(RVA = "0x16B9C90", Offset = "0x16B9C90", VA = "0x16B9C90")]
		public static Type GetDictionaryValueType(Type dictionaryType)
		{
			return null;
		}

		[Token(Token = "0x6000F61")]
		[Address(RVA = "0x16B9C64", Offset = "0x16B9C64", VA = "0x16B9C64")]
		public static Type GetDictionaryKeyType(Type dictionaryType)
		{
			return null;
		}

		[Token(Token = "0x6000F62")]
		public static bool ItemsUnitializedValue<T>(IList<T> list)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F63")]
		[Address(RVA = "0x16C1284", Offset = "0x16C1284", VA = "0x16C1284")]
		public static Type GetMemberUnderlyingType(MemberInfo member)
		{
			return null;
		}

		[Token(Token = "0x6000F64")]
		[Address(RVA = "0x16C1584", Offset = "0x16C1584", VA = "0x16C1584")]
		public static bool IsIndexedProperty(MemberInfo member)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F65")]
		[Address(RVA = "0x16C1640", Offset = "0x16C1640", VA = "0x16C1640")]
		public static bool IsIndexedProperty(PropertyInfo property)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F66")]
		[Address(RVA = "0x16B68D8", Offset = "0x16B68D8", VA = "0x16B68D8")]
		public static object GetMemberValue(MemberInfo member, object target)
		{
			return null;
		}

		[Token(Token = "0x6000F67")]
		[Address(RVA = "0x16B70AC", Offset = "0x16B70AC", VA = "0x16B70AC")]
		public static void SetMemberValue(MemberInfo member, object target, object value)
		{
		}

		[Token(Token = "0x6000F68")]
		[Address(RVA = "0x16C16CC", Offset = "0x16C16CC", VA = "0x16C16CC")]
		public static bool CanReadMemberValue(MemberInfo member, bool nonPublic)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F69")]
		[Address(RVA = "0x16C18B4", Offset = "0x16C18B4", VA = "0x16C18B4")]
		public static bool CanSetMemberValue(MemberInfo member, bool nonPublic, bool canSetReadOnly)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F6A")]
		public static List<MemberInfo> GetFieldsAndProperties<T>(BindingFlags bindingAttr)
		{
			return null;
		}

		[Token(Token = "0x6000F6B")]
		[Address(RVA = "0x16C1AD0", Offset = "0x16C1AD0", VA = "0x16C1AD0")]
		public static List<MemberInfo> GetFieldsAndProperties(Type type, BindingFlags bindingAttr)
		{
			return null;
		}

		[Token(Token = "0x6000F6C")]
		[Address(RVA = "0x16C2444", Offset = "0x16C2444", VA = "0x16C2444")]
		private static bool IsOverridenGenericMember(MemberInfo memberInfo, BindingFlags bindingAttr)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F6D")]
		public static T GetAttribute<T>(ICustomAttributeProvider attributeProvider) where T : Attribute
		{
			return null;
		}

		[Token(Token = "0x6000F6E")]
		public static T GetAttribute<T>(ICustomAttributeProvider attributeProvider, bool inherit) where T : Attribute
		{
			return null;
		}

		[Token(Token = "0x6000F6F")]
		public static T[] GetAttributes<T>(ICustomAttributeProvider attributeProvider, bool inherit) where T : Attribute
		{
			return null;
		}

		[Token(Token = "0x6000F70")]
		[Address(RVA = "0x16C2630", Offset = "0x16C2630", VA = "0x16C2630")]
		public static string GetNameAndAssessmblyName(Type t)
		{
			return null;
		}

		[Token(Token = "0x6000F71")]
		[Address(RVA = "0x16BABF4", Offset = "0x16BABF4", VA = "0x16BABF4")]
		public static Type MakeGenericType(Type genericTypeDefinition, params Type[] innerTypes)
		{
			return null;
		}

		[Token(Token = "0x6000F72")]
		[Address(RVA = "0x16B8038", Offset = "0x16B8038", VA = "0x16B8038")]
		public static object CreateGeneric(Type genericTypeDefinition, Type innerType, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x6000F73")]
		[Address(RVA = "0x16C27AC", Offset = "0x16C27AC", VA = "0x16C27AC")]
		public static object CreateGeneric(Type genericTypeDefinition, IList<Type> innerTypes, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x6000F74")]
		[Address(RVA = "0x16B90CC", Offset = "0x16B90CC", VA = "0x16B90CC")]
		public static object CreateGeneric(Type genericTypeDefinition, IList<Type> innerTypes, Func<Type, IList<object>, object> instanceCreator, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x6000F75")]
		[Address(RVA = "0x16C28A4", Offset = "0x16C28A4", VA = "0x16C28A4")]
		public static bool IsCompatibleValue(object value, Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F76")]
		[Address(RVA = "0x16BB19C", Offset = "0x16BB19C", VA = "0x16BB19C")]
		public static object CreateInstance(Type type, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x6000F77")]
		[Address(RVA = "0x16C2900", Offset = "0x16C2900", VA = "0x16C2900")]
		public static void SplitFullyQualifiedTypeName(string fullyQualifiedTypeName, out string typeName, out string assemblyName)
		{
		}

		[Token(Token = "0x6000F78")]
		[Address(RVA = "0x16C2A58", Offset = "0x16C2A58", VA = "0x16C2A58")]
		private static int? GetAssemblyDelimiterIndex(string fullyQualifiedTypeName)
		{
			return null;
		}

		[Token(Token = "0x6000F79")]
		[Address(RVA = "0x16B597C", Offset = "0x16B597C", VA = "0x16B597C")]
		public static MemberInfo GetMemberInfoFromType(Type targetType, MemberInfo memberInfo)
		{
			return null;
		}

		[Token(Token = "0x6000F7A")]
		[Address(RVA = "0x16C2114", Offset = "0x16C2114", VA = "0x16C2114")]
		public static IEnumerable<FieldInfo> GetFields(Type targetType, BindingFlags bindingAttr)
		{
			return null;
		}

		[Token(Token = "0x6000F7B")]
		[Address(RVA = "0x16C2B48", Offset = "0x16C2B48", VA = "0x16C2B48")]
		private static void GetChildPrivateFields(IList<MemberInfo> initialFields, Type targetType, BindingFlags bindingAttr)
		{
		}

		[Token(Token = "0x6000F7C")]
		[Address(RVA = "0x16C21E8", Offset = "0x16C21E8", VA = "0x16C21E8")]
		public static IEnumerable<PropertyInfo> GetProperties(Type targetType, BindingFlags bindingAttr)
		{
			return null;
		}

		[Token(Token = "0x6000F7D")]
		[Address(RVA = "0x16C2D20", Offset = "0x16C2D20", VA = "0x16C2D20")]
		public static BindingFlags RemoveFlag(this BindingFlags bindingAttr, BindingFlags flag)
		{
			return default(BindingFlags);
		}

		[Token(Token = "0x6000F7E")]
		[Address(RVA = "0x16C2D30", Offset = "0x16C2D30", VA = "0x16C2D30")]
		private static void GetChildPrivateProperties(IList<PropertyInfo> initialProperties, Type targetType, BindingFlags bindingAttr)
		{
		}
	}
	[Token(Token = "0x200022B")]
	internal class StringBuffer
	{
		[Token(Token = "0x4000BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private char[] _buffer;

		[Token(Token = "0x4000BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int _position;

		[Token(Token = "0x4000BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly char[] _emptyBuffer;

		[Token(Token = "0x17000124")]
		public int Position
		{
			[Token(Token = "0x6000F7F")]
			[Address(RVA = "0x16C3334", Offset = "0x16C3334", VA = "0x16C3334")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000F80")]
			[Address(RVA = "0x16C333C", Offset = "0x16C333C", VA = "0x16C333C")]
			set
			{
			}
		}

		[Token(Token = "0x6000F81")]
		[Address(RVA = "0x16C3344", Offset = "0x16C3344", VA = "0x16C3344")]
		public StringBuffer()
		{
		}

		[Token(Token = "0x6000F82")]
		[Address(RVA = "0x16C33C0", Offset = "0x16C33C0", VA = "0x16C33C0")]
		public StringBuffer(int initalSize)
		{
		}

		[Token(Token = "0x6000F83")]
		[Address(RVA = "0x16C3430", Offset = "0x16C3430", VA = "0x16C3430")]
		public void Append(char value)
		{
		}

		[Token(Token = "0x6000F84")]
		[Address(RVA = "0x16C354C", Offset = "0x16C354C", VA = "0x16C354C")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000F85")]
		[Address(RVA = "0x16C34C4", Offset = "0x16C34C4", VA = "0x16C34C4")]
		private void EnsureSize(int appendLength)
		{
		}

		[Token(Token = "0x6000F86")]
		[Address(RVA = "0x16C35C0", Offset = "0x16C35C0", VA = "0x16C35C0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000F87")]
		[Address(RVA = "0x16C35D8", Offset = "0x16C35D8", VA = "0x16C35D8")]
		public string ToString(int start, int length)
		{
			return null;
		}

		[Token(Token = "0x6000F88")]
		[Address(RVA = "0x16C35FC", Offset = "0x16C35FC", VA = "0x16C35FC")]
		public char[] GetInternalBuffer()
		{
			return null;
		}
	}
	[Token(Token = "0x200022C")]
	internal static class StringUtils
	{
		[Token(Token = "0x2000322")]
		private delegate void ActionLine(TextWriter textWriter, string line);

		[Token(Token = "0x2000323")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6834", Offset = "0x9A6834")]
		private sealed class <>c__DisplayClass13_0
		{
			[Token(Token = "0x4000EFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public char indentChar;

			[Token(Token = "0x4000EFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int indentation;

			[Token(Token = "0x6001619")]
			[Address(RVA = "0x16C3D28", Offset = "0x16C3D28", VA = "0x16C3D28")]
			public <>c__DisplayClass13_0()
			{
			}

			[Token(Token = "0x600161A")]
			[Address(RVA = "0x16C4D50", Offset = "0x16C4D50", VA = "0x16C4D50")]
			internal void <Indent>b__0(TextWriter tw, string line)
			{
			}
		}

		[Token(Token = "0x2000324")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6844", Offset = "0x9A6844")]
		private sealed class <>c__DisplayClass16_0
		{
			[Token(Token = "0x4000F00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int lineNumber;

			[Token(Token = "0x600161B")]
			[Address(RVA = "0x16C46E8", Offset = "0x16C46E8", VA = "0x16C46E8")]
			public <>c__DisplayClass16_0()
			{
			}

			[Token(Token = "0x600161C")]
			[Address(RVA = "0x16C4DD8", Offset = "0x16C4DD8", VA = "0x16C4DD8")]
			internal void <NumberLines>b__0(TextWriter tw, string line)
			{
			}
		}

		[Token(Token = "0x2000325")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6854", Offset = "0x9A6854")]
		private sealed class <>c__DisplayClass25_0<TSource>
		{
			[Token(Token = "0x4000F01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Func<TSource, string> valueSelector;

			[Token(Token = "0x4000F02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string testValue;

			[Token(Token = "0x600161D")]
			public <>c__DisplayClass25_0()
			{
			}

			[Token(Token = "0x600161E")]
			internal bool <ForgivingCaseSensitiveFind>b__0(TSource s)
			{
				return default(bool);
			}

			[Token(Token = "0x600161F")]
			internal bool <ForgivingCaseSensitiveFind>b__1(TSource s)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000BCF")]
		public const string CarriageReturnLineFeed = "\r\n";

		[Token(Token = "0x4000BD0")]
		public const string Empty = "";

		[Token(Token = "0x4000BD1")]
		public const char CarriageReturn = '\r';

		[Token(Token = "0x4000BD2")]
		public const char LineFeed = '\n';

		[Token(Token = "0x4000BD3")]
		public const char Tab = '\t';

		[Token(Token = "0x6000F8A")]
		[Address(RVA = "0x16B603C", Offset = "0x16B603C", VA = "0x16B603C")]
		public static string FormatWith(this string format, IFormatProvider provider, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x6000F8B")]
		[Address(RVA = "0x16C3668", Offset = "0x16C3668", VA = "0x16C3668")]
		public static bool ContainsWhiteSpace(string s)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F8C")]
		[Address(RVA = "0x16C377C", Offset = "0x16C377C", VA = "0x16C377C")]
		public static bool IsWhiteSpace(string s)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F8D")]
		[Address(RVA = "0x16C38A0", Offset = "0x16C38A0", VA = "0x16C38A0")]
		public static string EnsureEndsWith(string target, string value)
		{
			return null;
		}

		[Token(Token = "0x6000F8E")]
		[Address(RVA = "0x16C3A60", Offset = "0x16C3A60", VA = "0x16C3A60")]
		public static bool IsNullOrEmptyOrWhiteSpace(string s)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F8F")]
		[Address(RVA = "0x16C3A9C", Offset = "0x16C3A9C", VA = "0x16C3A9C")]
		public static void IfNotNullOrEmpty(string value, Action<string> action)
		{
		}

		[Token(Token = "0x6000F90")]
		[Address(RVA = "0x16C3AA4", Offset = "0x16C3AA4", VA = "0x16C3AA4")]
		private static void IfNotNullOrEmpty(string value, Action<string> trueAction, Action<string> falseAction)
		{
		}

		[Token(Token = "0x6000F91")]
		[Address(RVA = "0x16C3B40", Offset = "0x16C3B40", VA = "0x16C3B40")]
		public static string Indent(string s, int indentation)
		{
			return null;
		}

		[Token(Token = "0x6000F92")]
		[Address(RVA = "0x16C3B48", Offset = "0x16C3B48", VA = "0x16C3B48")]
		public static string Indent(string s, int indentation, char indentChar)
		{
			return null;
		}

		[Token(Token = "0x6000F93")]
		[Address(RVA = "0x16C3D40", Offset = "0x16C3D40", VA = "0x16C3D40")]
		private static void ActionTextReaderLine(TextReader textReader, TextWriter textWriter, ActionLine lineAction)
		{
		}

		[Token(Token = "0x6000F94")]
		[Address(RVA = "0x16C4564", Offset = "0x16C4564", VA = "0x16C4564")]
		public static string NumberLines(string s)
		{
			return null;
		}

		[Token(Token = "0x6000F95")]
		[Address(RVA = "0x16C46F0", Offset = "0x16C46F0", VA = "0x16C46F0")]
		public static string NullEmptyString(string s)
		{
			return null;
		}

		[Token(Token = "0x6000F96")]
		[Address(RVA = "0x16C471C", Offset = "0x16C471C", VA = "0x16C471C")]
		public static string ReplaceNewLines(string s, string replacement)
		{
			return null;
		}

		[Token(Token = "0x6000F97")]
		[Address(RVA = "0x16C4830", Offset = "0x16C4830", VA = "0x16C4830")]
		public static string Truncate(string s, int maximumLength)
		{
			return null;
		}

		[Token(Token = "0x6000F98")]
		[Address(RVA = "0x16C4890", Offset = "0x16C4890", VA = "0x16C4890")]
		public static string Truncate(string s, int maximumLength, string suffix)
		{
			return null;
		}

		[Token(Token = "0x6000F99")]
		[Address(RVA = "0x16BF5F4", Offset = "0x16BF5F4", VA = "0x16BF5F4")]
		public static StringWriter CreateStringWriter(int capacity)
		{
			return null;
		}

		[Token(Token = "0x6000F9A")]
		[Address(RVA = "0x16BF570", Offset = "0x16BF570", VA = "0x16BF570")]
		public static int? GetLength(string value)
		{
			return null;
		}

		[Token(Token = "0x6000F9B")]
		[Address(RVA = "0x16BF250", Offset = "0x16BF250", VA = "0x16BF250")]
		public static string ToCharAsUnicode(char c)
		{
			return null;
		}

		[Token(Token = "0x6000F9C")]
		[Address(RVA = "0x16C4A0C", Offset = "0x16C4A0C", VA = "0x16C4A0C")]
		public static void WriteCharAsUnicode(TextWriter writer, char c)
		{
		}

		[Token(Token = "0x6000F9D")]
		public static TSource ForgivingCaseSensitiveFind<TSource>(this IEnumerable<TSource> source, Func<TSource, string> valueSelector, string testValue)
		{
			return (TSource)null;
		}

		[Token(Token = "0x6000F9E")]
		[Address(RVA = "0x16C4BA8", Offset = "0x16C4BA8", VA = "0x16C4BA8")]
		public static string ToCamelCase(string s)
		{
			return null;
		}
	}
	[Token(Token = "0x200022D")]
	internal class ThreadSafeStore<TKey, TValue>
	{
		[Token(Token = "0x4000BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly object _lock;

		[Token(Token = "0x4000BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Dictionary<TKey, TValue> _store;

		[Token(Token = "0x4000BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<TKey, TValue> _creator;

		[Token(Token = "0x6000F9F")]
		public ThreadSafeStore(Func<TKey, TValue> creator)
		{
		}

		[Token(Token = "0x6000FA0")]
		public TValue Get(TKey key)
		{
			return (TValue)null;
		}

		[Token(Token = "0x6000FA1")]
		private TValue AddValue(TKey key)
		{
			return (TValue)null;
		}
	}
	[Token(Token = "0x200022E")]
	internal static class ValidationUtils
	{
		[Token(Token = "0x4000BD7")]
		public const string EmailAddressRegex = "^([a-zA-Z0-9_'+*$%\\^&!\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9:]{2,4})+$";

		[Token(Token = "0x4000BD8")]
		public const string CurrencyRegex = "(^\\$?(?!0,?\\d)\\d{1,3}(,?\\d{3})*(\\.\\d\\d)?)$";

		[Token(Token = "0x4000BD9")]
		public const string DateRegex = "^(((0?[1-9]|[12]\\d|3[01])[\\.\\-\\/](0?[13578]|1[02])[\\.\\-\\/]((1[6-9]|[2-9]\\d)?\\d{2}|\\d))|((0?[1-9]|[12]\\d|30)[\\.\\-\\/](0?[13456789]|1[012])[\\.\\-\\/]((1[6-9]|[2-9]\\d)?\\d{2}|\\d))|((0?[1-9]|1\\d|2[0-8])[\\.\\-\\/]0?2[\\.\\-\\/]((1[6-9]|[2-9]\\d)?\\d{2}|\\d))|(29[\\.\\-\\/]0?2[\\.\\-\\/]((1[6-9]|[2-9]\\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)|00|[048])))$";

		[Token(Token = "0x4000BDA")]
		public const string NumericRegex = "\\d*";

		[Token(Token = "0x6000FA2")]
		[Address(RVA = "0x16C4F60", Offset = "0x16C4F60", VA = "0x16C4F60")]
		public static void ArgumentNotNullOrEmpty(string value, string parameterName)
		{
		}

		[Token(Token = "0x6000FA3")]
		[Address(RVA = "0x16C50BC", Offset = "0x16C50BC", VA = "0x16C50BC")]
		public static void ArgumentNotNullOrEmptyOrWhitespace(string value, string parameterName)
		{
		}

		[Token(Token = "0x6000FA4")]
		[Address(RVA = "0x16C51EC", Offset = "0x16C51EC", VA = "0x16C51EC")]
		public static void ArgumentTypeIsEnum(Type enumType, string parameterName)
		{
		}

		[Token(Token = "0x6000FA5")]
		public static void ArgumentNotNullOrEmpty<T>(ICollection<T> collection, string parameterName)
		{
		}

		[Token(Token = "0x6000FA6")]
		public static void ArgumentNotNullOrEmpty<T>(ICollection<T> collection, string parameterName, string message)
		{
		}

		[Token(Token = "0x6000FA7")]
		[Address(RVA = "0x16C533C", Offset = "0x16C533C", VA = "0x16C533C")]
		public static void ArgumentNotNullOrEmpty(ICollection collection, string parameterName)
		{
		}

		[Token(Token = "0x6000FA8")]
		[Address(RVA = "0x16C5448", Offset = "0x16C5448", VA = "0x16C5448")]
		public static void ArgumentNotNullOrEmpty(ICollection collection, string parameterName, string message)
		{
		}

		[Token(Token = "0x6000FA9")]
		[Address(RVA = "0x16B50CC", Offset = "0x16B50CC", VA = "0x16B50CC")]
		public static void ArgumentNotNull(object value, string parameterName)
		{
		}

		[Token(Token = "0x6000FAA")]
		[Address(RVA = "0x16C557C", Offset = "0x16C557C", VA = "0x16C557C")]
		public static void ArgumentNotNegative(int value, string parameterName)
		{
		}

		[Token(Token = "0x6000FAB")]
		[Address(RVA = "0x16C5618", Offset = "0x16C5618", VA = "0x16C5618")]
		public static void ArgumentNotNegative(int value, string parameterName, string message)
		{
		}

		[Token(Token = "0x6000FAC")]
		[Address(RVA = "0x16C56B8", Offset = "0x16C56B8", VA = "0x16C56B8")]
		public static void ArgumentNotZero(int value, string parameterName)
		{
		}

		[Token(Token = "0x6000FAD")]
		[Address(RVA = "0x16C5750", Offset = "0x16C5750", VA = "0x16C5750")]
		public static void ArgumentNotZero(int value, string parameterName, string message)
		{
		}

		[Token(Token = "0x6000FAE")]
		public static void ArgumentIsPositive<T>(T value, string parameterName) where T : struct, IComparable<T>
		{
		}

		[Token(Token = "0x6000FAF")]
		[Address(RVA = "0x16C57EC", Offset = "0x16C57EC", VA = "0x16C57EC")]
		public static void ArgumentIsPositive(int value, string parameterName, string message)
		{
		}

		[Token(Token = "0x6000FB0")]
		[Address(RVA = "0x16C588C", Offset = "0x16C588C", VA = "0x16C588C")]
		public static void ObjectNotDisposed(bool disposed, Type objectType)
		{
		}

		[Token(Token = "0x6000FB1")]
		[Address(RVA = "0x16C2718", Offset = "0x16C2718", VA = "0x16C2718")]
		public static void ArgumentConditionTrue(bool condition, string parameterName, string message)
		{
		}
	}
}
namespace Newtonsoft.Json.Serialization
{
	[Token(Token = "0x200022F")]
	internal static class CachedAttributeGetter<T> where T : Attribute
	{
		[Token(Token = "0x4000BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly ThreadSafeStore<ICustomAttributeProvider, T> TypeAttributeCache;

		[Token(Token = "0x6000FB2")]
		public static T GetAttribute(ICustomAttributeProvider type)
		{
			return null;
		}
	}
	[Token(Token = "0x2000230")]
	public class CamelCasePropertyNamesContractResolver : DefaultContractResolver
	{
		[Token(Token = "0x6000FB4")]
		[Address(RVA = "0x145B028", Offset = "0x145B028", VA = "0x145B028")]
		public CamelCasePropertyNamesContractResolver()
		{
		}

		[Token(Token = "0x6000FB5")]
		[Address(RVA = "0x145B0DC", Offset = "0x145B0DC", VA = "0x145B0DC", Slot = "21")]
		protected internal override string ResolvePropertyName(string propertyName)
		{
			return null;
		}
	}
	[Token(Token = "0x2000231")]
	internal struct ResolverContractKey : IEquatable<ResolverContractKey>
	{
		[Token(Token = "0x4000BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Type _resolverType;

		[Token(Token = "0x4000BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private readonly Type _contractType;

		[Token(Token = "0x6000FB6")]
		[Address(RVA = "0xA7856C", Offset = "0xA7856C", VA = "0xA7856C")]
		public ResolverContractKey(Type resolverType, Type contractType)
		{
		}

		[Token(Token = "0x6000FB7")]
		[Address(RVA = "0xA78574", Offset = "0xA78574", VA = "0xA78574", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000FB8")]
		[Address(RVA = "0xA7857C", Offset = "0xA7857C", VA = "0xA7857C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FB9")]
		[Address(RVA = "0xA78584", Offset = "0xA78584", VA = "0xA78584", Slot = "4")]
		public bool Equals(ResolverContractKey other)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000232")]
	public class DefaultContractResolver : IContractResolver
	{
		[Serializable]
		[Token(Token = "0x2000326")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6864", Offset = "0x9A6864")]
		private sealed class <>c
		{
			[Token(Token = "0x4000F03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000F04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<MemberInfo, bool> <>9__23_0;

			[Token(Token = "0x4000F05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<MemberInfo, bool> <>9__23_1;

			[Token(Token = "0x4000F06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<ConstructorInfo, bool> <>9__25_0;

			[Token(Token = "0x4000F07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Func<ConstructorInfo, bool> <>9__26_0;

			[Token(Token = "0x4000F08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public static Func<JsonProperty, int> <>9__45_0;

			[Token(Token = "0x6001621")]
			[Address(RVA = "0x1460534", Offset = "0x1460534", VA = "0x1460534")]
			public <>c()
			{
			}

			[Token(Token = "0x6001622")]
			[Address(RVA = "0x146053C", Offset = "0x146053C", VA = "0x146053C")]
			internal bool <GetSerializableMembers>b__23_0(MemberInfo m)
			{
				return default(bool);
			}

			[Token(Token = "0x6001623")]
			[Address(RVA = "0x1460560", Offset = "0x1460560", VA = "0x1460560")]
			internal bool <GetSerializableMembers>b__23_1(MemberInfo m)
			{
				return default(bool);
			}

			[Token(Token = "0x6001624")]
			[Address(RVA = "0x1460584", Offset = "0x1460584", VA = "0x1460584")]
			internal bool <CreateObjectContract>b__25_0(ConstructorInfo c)
			{
				return default(bool);
			}

			[Token(Token = "0x6001625")]
			[Address(RVA = "0x1460620", Offset = "0x1460620", VA = "0x1460620")]
			internal bool <GetAttributeConstructor>b__26_0(ConstructorInfo c)
			{
				return default(bool);
			}

			[Token(Token = "0x6001626")]
			[Address(RVA = "0x14606BC", Offset = "0x14606BC", VA = "0x14606BC")]
			internal int <CreateProperties>b__45_0(JsonProperty p)
			{
				return default(int);
			}
		}

		[Token(Token = "0x2000327")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6874", Offset = "0x9A6874")]
		private sealed class <>c__DisplayClass39_0
		{
			[Token(Token = "0x4000F09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public MethodCall<object, object> methodCall;

			[Token(Token = "0x6001627")]
			[Address(RVA = "0x145F244", Offset = "0x145F244", VA = "0x145F244")]
			public <>c__DisplayClass39_0()
			{
			}

			[Token(Token = "0x6001628")]
			[Address(RVA = "0x1460758", Offset = "0x1460758", VA = "0x1460758")]
			internal object <CreateISerializableContract>b__0(object[] args)
			{
				return null;
			}
		}

		[Token(Token = "0x2000328")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6884", Offset = "0x9A6884")]
		private sealed class <>c__DisplayClass49_0
		{
			[Token(Token = "0x4000F0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public MethodCall<object, object> shouldSerializeCall;

			[Token(Token = "0x6001629")]
			[Address(RVA = "0x146035C", Offset = "0x146035C", VA = "0x146035C")]
			public <>c__DisplayClass49_0()
			{
			}

			[Token(Token = "0x600162A")]
			[Address(RVA = "0x14607CC", Offset = "0x14607CC", VA = "0x14607CC")]
			internal bool <CreateShouldSerializeTest>b__0(object o)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000329")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6894", Offset = "0x9A6894")]
		private sealed class <>c__DisplayClass50_0
		{
			[Token(Token = "0x4000F0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Func<object, object> specifiedPropertyGet;

			[Token(Token = "0x600162B")]
			[Address(RVA = "0x1460364", Offset = "0x1460364", VA = "0x1460364")]
			public <>c__DisplayClass50_0()
			{
			}

			[Token(Token = "0x600162C")]
			[Address(RVA = "0x146086C", Offset = "0x146086C", VA = "0x146086C")]
			internal bool <SetIsSpecifiedActions>b__0(object o)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly IContractResolver _instance;

		[Token(Token = "0x4000BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly IList<JsonConverter> BuiltInConverters;

		[Token(Token = "0x4000BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Dictionary<ResolverContractKey, JsonContract> _sharedContractCache;

		[Token(Token = "0x4000BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly object _typeContractCacheLock;

		[Token(Token = "0x4000BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<ResolverContractKey, JsonContract> _instanceContractCache;

		[Token(Token = "0x4000BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly bool _sharedCache;

		[Token(Token = "0x4000BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7DE0", Offset = "0x9A7DE0")]
		private BindingFlags <DefaultMembersSearchFlags>k__BackingField;

		[Token(Token = "0x4000BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7DF0", Offset = "0x9A7DF0")]
		private bool <SerializeCompilerGeneratedMembers>k__BackingField;

		[Token(Token = "0x17000125")]
		internal static IContractResolver Instance
		{
			[Token(Token = "0x6000FBA")]
			[Address(RVA = "0x145B0E8", Offset = "0x145B0E8", VA = "0x145B0E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000126")]
		public bool DynamicCodeGeneration
		{
			[Token(Token = "0x6000FBB")]
			[Address(RVA = "0x145B150", Offset = "0x145B150", VA = "0x145B150")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000127")]
		public BindingFlags DefaultMembersSearchFlags
		{
			[Token(Token = "0x6000FBC")]
			[Address(RVA = "0x145B1B0", Offset = "0x145B1B0", VA = "0x145B1B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9578", Offset = "0x9A9578")]
			get
			{
				return default(BindingFlags);
			}
			[Token(Token = "0x6000FBD")]
			[Address(RVA = "0x145B1B8", Offset = "0x145B1B8", VA = "0x145B1B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9588", Offset = "0x9A9588")]
			set
			{
			}
		}

		[Token(Token = "0x17000128")]
		public bool SerializeCompilerGeneratedMembers
		{
			[Token(Token = "0x6000FBE")]
			[Address(RVA = "0x145B1C0", Offset = "0x145B1C0", VA = "0x145B1C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9598", Offset = "0x9A9598")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FBF")]
			[Address(RVA = "0x145B1C8", Offset = "0x145B1C8", VA = "0x145B1C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A95A8", Offset = "0x9A95A8")]
			set
			{
			}
		}

		[Token(Token = "0x6000FC0")]
		[Address(RVA = "0x145B1D4", Offset = "0x145B1D4", VA = "0x145B1D4")]
		public DefaultContractResolver()
		{
		}

		[Token(Token = "0x6000FC1")]
		[Address(RVA = "0x145B0A4", Offset = "0x145B0A4", VA = "0x145B0A4")]
		public DefaultContractResolver(bool shareCache)
		{
		}

		[Token(Token = "0x6000FC2")]
		[Address(RVA = "0x145B204", Offset = "0x145B204", VA = "0x145B204")]
		private Dictionary<ResolverContractKey, JsonContract> GetCache()
		{
			return null;
		}

		[Token(Token = "0x6000FC3")]
		[Address(RVA = "0x145B284", Offset = "0x145B284", VA = "0x145B284")]
		private void UpdateCache(Dictionary<ResolverContractKey, JsonContract> cache)
		{
		}

		[Token(Token = "0x6000FC4")]
		[Address(RVA = "0x145B310", Offset = "0x145B310", VA = "0x145B310", Slot = "5")]
		public virtual JsonContract ResolveContract(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000FC5")]
		[Address(RVA = "0x145B598", Offset = "0x145B598", VA = "0x145B598", Slot = "6")]
		protected virtual List<MemberInfo> GetSerializableMembers(Type objectType)
		{
			return null;
		}

		[Token(Token = "0x6000FC6")]
		[Address(RVA = "0x145BAE4", Offset = "0x145BAE4", VA = "0x145BAE4")]
		private bool ShouldSerializeEntityMember(MemberInfo memberInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FC7")]
		[Address(RVA = "0x145BC34", Offset = "0x145BC34", VA = "0x145BC34", Slot = "7")]
		protected virtual JsonObjectContract CreateObjectContract(Type objectType)
		{
			return null;
		}

		[Token(Token = "0x6000FC8")]
		[Address(RVA = "0x145C238", Offset = "0x145C238", VA = "0x145C238")]
		private ConstructorInfo GetAttributeConstructor(Type objectType)
		{
			return null;
		}

		[Token(Token = "0x6000FC9")]
		[Address(RVA = "0x145C544", Offset = "0x145C544", VA = "0x145C544")]
		private ConstructorInfo GetParametrizedConstructor(Type objectType)
		{
			return null;
		}

		[Token(Token = "0x6000FCA")]
		[Address(RVA = "0x145C6B0", Offset = "0x145C6B0", VA = "0x145C6B0", Slot = "8")]
		protected virtual IList<JsonProperty> CreateConstructorParameters(ConstructorInfo constructor, JsonPropertyCollection memberProperties)
		{
			return null;
		}

		[Token(Token = "0x6000FCB")]
		[Address(RVA = "0x145CB5C", Offset = "0x145CB5C", VA = "0x145CB5C", Slot = "9")]
		protected virtual JsonProperty CreatePropertyFromConstructorParameter(JsonProperty matchingMemberProperty, ParameterInfo parameterInfo)
		{
			return null;
		}

		[Token(Token = "0x6000FCC")]
		[Address(RVA = "0x145D36C", Offset = "0x145D36C", VA = "0x145D36C", Slot = "10")]
		protected virtual JsonConverter ResolveContractConverter(Type objectType)
		{
			return null;
		}

		[Token(Token = "0x6000FCD")]
		[Address(RVA = "0x145D3D8", Offset = "0x145D3D8", VA = "0x145D3D8")]
		private Func<object> GetDefaultCreator(Type createdType)
		{
			return null;
		}

		[Token(Token = "0x6000FCE")]
		[Address(RVA = "0x145C004", Offset = "0x145C004", VA = "0x145C004")]
		private void InitializeContract(JsonContract contract)
		{
		}

		[Token(Token = "0x6000FCF")]
		[Address(RVA = "0x145D4B4", Offset = "0x145D4B4", VA = "0x145D4B4")]
		private void ResolveCallbackMethods(JsonContract contract, Type t)
		{
		}

		[Token(Token = "0x6000FD0")]
		[Address(RVA = "0x145D67C", Offset = "0x145D67C", VA = "0x145D67C")]
		private void GetCallbackMethodsForType(Type type, out MethodInfo onSerializing, out MethodInfo onSerialized, out MethodInfo onDeserializing, out MethodInfo onDeserialized, out MethodInfo onError)
		{
		}

		[Token(Token = "0x6000FD1")]
		[Address(RVA = "0x145E654", Offset = "0x145E654", VA = "0x145E654", Slot = "11")]
		protected virtual JsonDictionaryContract CreateDictionaryContract(Type objectType)
		{
			return null;
		}

		[Token(Token = "0x6000FD2")]
		[Address(RVA = "0x145EA68", Offset = "0x145EA68", VA = "0x145EA68", Slot = "12")]
		protected virtual JsonArrayContract CreateArrayContract(Type objectType)
		{
			return null;
		}

		[Token(Token = "0x6000FD3")]
		[Address(RVA = "0x145EE7C", Offset = "0x145EE7C", VA = "0x145EE7C", Slot = "13")]
		protected virtual JsonPrimitiveContract CreatePrimitiveContract(Type objectType)
		{
			return null;
		}

		[Token(Token = "0x6000FD4")]
		[Address(RVA = "0x145EEF8", Offset = "0x145EEF8", VA = "0x145EEF8", Slot = "14")]
		protected virtual JsonLinqContract CreateLinqContract(Type objectType)
		{
			return null;
		}

		[Token(Token = "0x6000FD5")]
		[Address(RVA = "0x145EF74", Offset = "0x145EF74", VA = "0x145EF74", Slot = "15")]
		protected virtual JsonISerializableContract CreateISerializableContract(Type objectType)
		{
			return null;
		}

		[Token(Token = "0x6000FD6")]
		[Address(RVA = "0x145F254", Offset = "0x145F254", VA = "0x145F254", Slot = "16")]
		protected virtual JsonStringContract CreateStringContract(Type objectType)
		{
			return null;
		}

		[Token(Token = "0x6000FD7")]
		[Address(RVA = "0x145F2D0", Offset = "0x145F2D0", VA = "0x145F2D0", Slot = "17")]
		protected virtual JsonContract CreateContract(Type objectType)
		{
			return null;
		}

		[Token(Token = "0x6000FD8")]
		[Address(RVA = "0x145F5B4", Offset = "0x145F5B4", VA = "0x145F5B4")]
		internal static bool CanConvertToString(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FD9")]
		[Address(RVA = "0x145DA6C", Offset = "0x145DA6C", VA = "0x145DA6C")]
		private static bool IsValidCallback(MethodInfo method, ParameterInfo[] parameters, Type attributeType, MethodInfo currentCallback, ref Type prevAttributeType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FDA")]
		[Address(RVA = "0x145F7EC", Offset = "0x145F7EC", VA = "0x145F7EC")]
		internal static string GetClrTypeFullName(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000FDB")]
		[Address(RVA = "0x145F9B4", Offset = "0x145F9B4", VA = "0x145F9B4", Slot = "18")]
		protected virtual IList<JsonProperty> CreateProperties(Type type, MemberSerialization memberSerialization)
		{
			return null;
		}

		[Token(Token = "0x6000FDC")]
		[Address(RVA = "0x145FC34", Offset = "0x145FC34", VA = "0x145FC34", Slot = "19")]
		protected virtual IValueProvider CreateMemberValueProvider(MemberInfo member)
		{
			return null;
		}

		[Token(Token = "0x6000FDD")]
		[Address(RVA = "0x145FC98", Offset = "0x145FC98", VA = "0x145FC98", Slot = "20")]
		protected virtual JsonProperty CreateProperty(MemberInfo member, MemberSerialization memberSerialization)
		{
			return null;
		}

		[Token(Token = "0x6000FDE")]
		[Address(RVA = "0x145CE54", Offset = "0x145CE54", VA = "0x145CE54")]
		private void SetPropertySettingsFromAttributes(JsonProperty property, ICustomAttributeProvider attributeProvider, string name, Type declaringType, MemberSerialization memberSerialization, out bool allowNonPublicAccess, out bool hasExplicitAttribute)
		{
		}

		[Token(Token = "0x6000FDF")]
		[Address(RVA = "0x145FE28", Offset = "0x145FE28", VA = "0x145FE28")]
		private Predicate<object> CreateShouldSerializeTest(MemberInfo member)
		{
			return null;
		}

		[Token(Token = "0x6000FE0")]
		[Address(RVA = "0x1460074", Offset = "0x1460074", VA = "0x1460074")]
		private void SetIsSpecifiedActions(JsonProperty property, MemberInfo member, bool allowNonPublicAccess)
		{
		}

		[Token(Token = "0x6000FE1")]
		[Address(RVA = "0x146037C", Offset = "0x146037C", VA = "0x146037C", Slot = "21")]
		protected internal virtual string ResolvePropertyName(string propertyName)
		{
			return null;
		}
	}
	[Token(Token = "0x2000233")]
	internal class DefaultReferenceResolver : IReferenceResolver
	{
		[Token(Token = "0x4000BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int _referenceCount;

		[Token(Token = "0x6000FE3")]
		[Address(RVA = "0x14608F4", Offset = "0x14608F4", VA = "0x14608F4")]
		private BidirectionalDictionary<string, object> GetMappings(object context)
		{
			return null;
		}

		[Token(Token = "0x6000FE4")]
		[Address(RVA = "0x1460AB8", Offset = "0x1460AB8", VA = "0x1460AB8", Slot = "4")]
		public object ResolveReference(object context, string reference)
		{
			return null;
		}

		[Token(Token = "0x6000FE5")]
		[Address(RVA = "0x1460B3C", Offset = "0x1460B3C", VA = "0x1460B3C", Slot = "5")]
		public string GetReference(object context, object value)
		{
			return null;
		}

		[Token(Token = "0x6000FE6")]
		[Address(RVA = "0x1460C44", Offset = "0x1460C44", VA = "0x1460C44", Slot = "7")]
		public void AddReference(object context, string reference, object value)
		{
		}

		[Token(Token = "0x6000FE7")]
		[Address(RVA = "0x1460CC0", Offset = "0x1460CC0", VA = "0x1460CC0", Slot = "6")]
		public bool IsReferenced(object context, object value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FE8")]
		[Address(RVA = "0x1460D44", Offset = "0x1460D44", VA = "0x1460D44")]
		public DefaultReferenceResolver()
		{
		}
	}
	[Token(Token = "0x2000234")]
	public class DefaultSerializationBinder : SerializationBinder
	{
		[Token(Token = "0x200032A")]
		internal struct TypeNameKey
		{
			[Token(Token = "0x4000F0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal readonly string AssemblyName;

			[Token(Token = "0x4000F0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal readonly string TypeName;

			[Token(Token = "0x600162D")]
			[Address(RVA = "0xA710B4", Offset = "0xA710B4", VA = "0xA710B4")]
			public TypeNameKey(string assemblyName, string typeName)
			{
			}

			[Token(Token = "0x600162E")]
			[Address(RVA = "0xA710BC", Offset = "0xA710BC", VA = "0xA710BC", Slot = "2")]
			public override int GetHashCode()
			{
				return default(int);
			}

			[Token(Token = "0x600162F")]
			[Address(RVA = "0xA710C4", Offset = "0xA710C4", VA = "0xA710C4", Slot = "0")]
			public override bool Equals(object obj)
			{
				return default(bool);
			}

			[Token(Token = "0x6001630")]
			[Address(RVA = "0xA710CC", Offset = "0xA710CC", VA = "0xA710CC")]
			public bool Equals(TypeNameKey other)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly DefaultSerializationBinder Instance;

		[Token(Token = "0x4000BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ThreadSafeStore<TypeNameKey, Type> _typeCache;

		[Token(Token = "0x6000FE9")]
		[Address(RVA = "0x1460D4C", Offset = "0x1460D4C", VA = "0x1460D4C")]
		private static Type GetTypeFromTypeNameKey(TypeNameKey typeNameKey)
		{
			return null;
		}

		[Token(Token = "0x6000FEA")]
		[Address(RVA = "0x146100C", Offset = "0x146100C", VA = "0x146100C", Slot = "5")]
		public override Type BindToType(string assemblyName, string typeName)
		{
			return null;
		}

		[Token(Token = "0x6000FEB")]
		[Address(RVA = "0x146108C", Offset = "0x146108C", VA = "0x146108C")]
		public DefaultSerializationBinder()
		{
		}
	}
	[Token(Token = "0x2000235")]
	public class ErrorContext
	{
		[Token(Token = "0x4000BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7E00", Offset = "0x9A7E00")]
		private Exception <Error>k__BackingField;

		[Token(Token = "0x4000BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7E10", Offset = "0x9A7E10")]
		private object <OriginalObject>k__BackingField;

		[Token(Token = "0x4000BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7E20", Offset = "0x9A7E20")]
		private object <Member>k__BackingField;

		[Token(Token = "0x4000BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7E30", Offset = "0x9A7E30")]
		private bool <Handled>k__BackingField;

		[Token(Token = "0x17000129")]
		public Exception Error
		{
			[Token(Token = "0x6000FEE")]
			[Address(RVA = "0x1461320", Offset = "0x1461320", VA = "0x1461320")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A95B8", Offset = "0x9A95B8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FEF")]
			[Address(RVA = "0x1461318", Offset = "0x1461318", VA = "0x1461318")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A95C8", Offset = "0x9A95C8")]
			private set
			{
			}
		}

		[Token(Token = "0x1700012A")]
		public object OriginalObject
		{
			[Token(Token = "0x6000FF0")]
			[Address(RVA = "0x1461328", Offset = "0x1461328", VA = "0x1461328")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A95D8", Offset = "0x9A95D8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FF1")]
			[Address(RVA = "0x1461308", Offset = "0x1461308", VA = "0x1461308")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A95E8", Offset = "0x9A95E8")]
			private set
			{
			}
		}

		[Token(Token = "0x1700012B")]
		public object Member
		{
			[Token(Token = "0x6000FF2")]
			[Address(RVA = "0x1461330", Offset = "0x1461330", VA = "0x1461330")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A95F8", Offset = "0x9A95F8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FF3")]
			[Address(RVA = "0x1461310", Offset = "0x1461310", VA = "0x1461310")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9608", Offset = "0x9A9608")]
			private set
			{
			}
		}

		[Token(Token = "0x1700012C")]
		public bool Handled
		{
			[Token(Token = "0x6000FF4")]
			[Address(RVA = "0x1461338", Offset = "0x1461338", VA = "0x1461338")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9618", Offset = "0x9A9618")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FF5")]
			[Address(RVA = "0x1461340", Offset = "0x1461340", VA = "0x1461340")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9628", Offset = "0x9A9628")]
			set
			{
			}
		}

		[Token(Token = "0x6000FED")]
		[Address(RVA = "0x14612C8", Offset = "0x14612C8", VA = "0x14612C8")]
		internal ErrorContext(object originalObject, object member, Exception error)
		{
		}
	}
	[Token(Token = "0x2000236")]
	public class ErrorEventArgs : EventArgs
	{
		[Token(Token = "0x4000BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7E40", Offset = "0x9A7E40")]
		private object <CurrentObject>k__BackingField;

		[Token(Token = "0x4000BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7E50", Offset = "0x9A7E50")]
		private ErrorContext <ErrorContext>k__BackingField;

		[Token(Token = "0x1700012D")]
		public object CurrentObject
		{
			[Token(Token = "0x6000FF6")]
			[Address(RVA = "0x146134C", Offset = "0x146134C", VA = "0x146134C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9638", Offset = "0x9A9638")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FF7")]
			[Address(RVA = "0x1461354", Offset = "0x1461354", VA = "0x1461354")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9648", Offset = "0x9A9648")]
			private set
			{
			}
		}

		[Token(Token = "0x1700012E")]
		public ErrorContext ErrorContext
		{
			[Token(Token = "0x6000FF8")]
			[Address(RVA = "0x146135C", Offset = "0x146135C", VA = "0x146135C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9658", Offset = "0x9A9658")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FF9")]
			[Address(RVA = "0x1461364", Offset = "0x1461364", VA = "0x1461364")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9668", Offset = "0x9A9668")]
			private set
			{
			}
		}

		[Token(Token = "0x6000FFA")]
		[Address(RVA = "0x146136C", Offset = "0x146136C", VA = "0x146136C")]
		public ErrorEventArgs(object currentObject, ErrorContext errorContext)
		{
		}
	}
	[Token(Token = "0x2000237")]
	public interface IContractResolver
	{
		[Token(Token = "0x6000FFB")]
		JsonContract ResolveContract(Type type);
	}
	[Token(Token = "0x2000238")]
	public interface IReferenceResolver
	{
		[Token(Token = "0x6000FFC")]
		object ResolveReference(object context, string reference);

		[Token(Token = "0x6000FFD")]
		string GetReference(object context, object value);

		[Token(Token = "0x6000FFE")]
		bool IsReferenced(object context, object value);

		[Token(Token = "0x6000FFF")]
		void AddReference(object context, string reference, object value);
	}
	[Token(Token = "0x2000239")]
	public interface IValueProvider
	{
		[Token(Token = "0x6001000")]
		void SetValue(object target, object value);

		[Token(Token = "0x6001001")]
		object GetValue(object target);
	}
	[Token(Token = "0x200023A")]
	public class JsonArrayContract : JsonContract
	{
		[Token(Token = "0x4000BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7E60", Offset = "0x9A7E60")]
		private Type <CollectionItemType>k__BackingField;

		[Token(Token = "0x4000BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7E70", Offset = "0x9A7E70")]
		private bool <IsMultidimensionalArray>k__BackingField;

		[Token(Token = "0x4000BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		private readonly bool _isCollectionItemTypeNullableType;

		[Token(Token = "0x4000BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly Type _genericCollectionDefinitionType;

		[Token(Token = "0x4000BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Type _genericWrapperType;

		[Token(Token = "0x4000BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private MethodCall<object, object> _genericWrapperCreator;

		[Token(Token = "0x1700012F")]
		internal Type CollectionItemType
		{
			[Token(Token = "0x6001002")]
			[Address(RVA = "0x14613EC", Offset = "0x14613EC", VA = "0x14613EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9678", Offset = "0x9A9678")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001003")]
			[Address(RVA = "0x14613F4", Offset = "0x14613F4", VA = "0x14613F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9688", Offset = "0x9A9688")]
			private set
			{
			}
		}

		[Token(Token = "0x17000130")]
		public bool IsMultidimensionalArray
		{
			[Token(Token = "0x6001004")]
			[Address(RVA = "0x14613FC", Offset = "0x14613FC", VA = "0x14613FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9698", Offset = "0x9A9698")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001005")]
			[Address(RVA = "0x1461404", Offset = "0x1461404", VA = "0x1461404")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A96A8", Offset = "0x9A96A8")]
			private set
			{
			}
		}

		[Token(Token = "0x6001006")]
		[Address(RVA = "0x145EAE0", Offset = "0x145EAE0", VA = "0x145EAE0")]
		public JsonArrayContract(Type underlyingType)
		{
		}

		[Token(Token = "0x6001007")]
		[Address(RVA = "0x14615FC", Offset = "0x14615FC", VA = "0x14615FC")]
		internal IWrappedCollection CreateWrapper(object list)
		{
			return null;
		}

		[Token(Token = "0x6001008")]
		[Address(RVA = "0x1461B44", Offset = "0x1461B44", VA = "0x1461B44")]
		private void EnsureGenericWrapperCreator()
		{
		}

		[Token(Token = "0x6001009")]
		[Address(RVA = "0x1461484", Offset = "0x1461484", VA = "0x1461484")]
		private bool IsTypeGenericCollectionInterface(Type type)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200023B")]
	public abstract class JsonContract
	{
		[Token(Token = "0x4000BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7E80", Offset = "0x9A7E80")]
		private Type <UnderlyingType>k__BackingField;

		[Token(Token = "0x4000BF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7E90", Offset = "0x9A7E90")]
		private Type <CreatedType>k__BackingField;

		[Token(Token = "0x4000BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7EA0", Offset = "0x9A7EA0")]
		private bool? <IsReference>k__BackingField;

		[Token(Token = "0x4000BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7EB0", Offset = "0x9A7EB0")]
		private JsonConverter <Converter>k__BackingField;

		[Token(Token = "0x4000BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7EC0", Offset = "0x9A7EC0")]
		private JsonConverter <InternalConverter>k__BackingField;

		[Token(Token = "0x4000BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7ED0", Offset = "0x9A7ED0")]
		private MethodInfo <OnDeserialized>k__BackingField;

		[Token(Token = "0x4000BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7EE0", Offset = "0x9A7EE0")]
		private MethodInfo <OnDeserializing>k__BackingField;

		[Token(Token = "0x4000BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7EF0", Offset = "0x9A7EF0")]
		private MethodInfo <OnSerialized>k__BackingField;

		[Token(Token = "0x4000BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7F00", Offset = "0x9A7F00")]
		private MethodInfo <OnSerializing>k__BackingField;

		[Token(Token = "0x4000BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7F10", Offset = "0x9A7F10")]
		private Func<object> <DefaultCreator>k__BackingField;

		[Token(Token = "0x4000BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7F20", Offset = "0x9A7F20")]
		private bool <DefaultCreatorNonPublic>k__BackingField;

		[Token(Token = "0x4000C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7F30", Offset = "0x9A7F30")]
		private MethodInfo <OnError>k__BackingField;

		[Token(Token = "0x17000131")]
		public Type UnderlyingType
		{
			[Token(Token = "0x600100A")]
			[Address(RVA = "0x145C228", Offset = "0x145C228", VA = "0x145C228")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A96B8", Offset = "0x9A96B8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600100B")]
			[Address(RVA = "0x1461EC4", Offset = "0x1461EC4", VA = "0x1461EC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A96C8", Offset = "0x9A96C8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000132")]
		public Type CreatedType
		{
			[Token(Token = "0x600100C")]
			[Address(RVA = "0x145D498", Offset = "0x145D498", VA = "0x145D498")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A96D8", Offset = "0x9A96D8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600100D")]
			[Address(RVA = "0x14615F4", Offset = "0x14615F4", VA = "0x14615F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A96E8", Offset = "0x9A96E8")]
			set
			{
			}
		}

		[Token(Token = "0x17000133")]
		public bool? IsReference
		{
			[Token(Token = "0x600100E")]
			[Address(RVA = "0x1461ECC", Offset = "0x1461ECC", VA = "0x1461ECC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A96F8", Offset = "0x9A96F8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600100F")]
			[Address(RVA = "0x145D480", Offset = "0x145D480", VA = "0x145D480")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9708", Offset = "0x9A9708")]
			set
			{
			}
		}

		[Token(Token = "0x17000134")]
		public JsonConverter Converter
		{
			[Token(Token = "0x6001010")]
			[Address(RVA = "0x1461ED4", Offset = "0x1461ED4", VA = "0x1461ED4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9718", Offset = "0x9A9718")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001011")]
			[Address(RVA = "0x145D488", Offset = "0x145D488", VA = "0x145D488")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9728", Offset = "0x9A9728")]
			set
			{
			}
		}

		[Token(Token = "0x17000135")]
		internal JsonConverter InternalConverter
		{
			[Token(Token = "0x6001012")]
			[Address(RVA = "0x1461EDC", Offset = "0x1461EDC", VA = "0x1461EDC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9738", Offset = "0x9A9738")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001013")]
			[Address(RVA = "0x145D490", Offset = "0x145D490", VA = "0x145D490")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9748", Offset = "0x9A9748")]
			set
			{
			}
		}

		[Token(Token = "0x17000136")]
		public MethodInfo OnDeserialized
		{
			[Token(Token = "0x6001014")]
			[Address(RVA = "0x1461EE4", Offset = "0x1461EE4", VA = "0x1461EE4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9758", Offset = "0x9A9758")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001015")]
			[Address(RVA = "0x145DA5C", Offset = "0x145DA5C", VA = "0x145DA5C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9768", Offset = "0x9A9768")]
			set
			{
			}
		}

		[Token(Token = "0x17000137")]
		public MethodInfo OnDeserializing
		{
			[Token(Token = "0x6001016")]
			[Address(RVA = "0x1461EEC", Offset = "0x1461EEC", VA = "0x1461EEC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9778", Offset = "0x9A9778")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001017")]
			[Address(RVA = "0x145DA54", Offset = "0x145DA54", VA = "0x145DA54")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9788", Offset = "0x9A9788")]
			set
			{
			}
		}

		[Token(Token = "0x17000138")]
		public MethodInfo OnSerialized
		{
			[Token(Token = "0x6001018")]
			[Address(RVA = "0x1461EF4", Offset = "0x1461EF4", VA = "0x1461EF4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9798", Offset = "0x9A9798")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001019")]
			[Address(RVA = "0x145DA4C", Offset = "0x145DA4C", VA = "0x145DA4C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A97A8", Offset = "0x9A97A8")]
			set
			{
			}
		}

		[Token(Token = "0x17000139")]
		public MethodInfo OnSerializing
		{
			[Token(Token = "0x600101A")]
			[Address(RVA = "0x1461EFC", Offset = "0x1461EFC", VA = "0x1461EFC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A97B8", Offset = "0x9A97B8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600101B")]
			[Address(RVA = "0x145DA44", Offset = "0x145DA44", VA = "0x145DA44")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A97C8", Offset = "0x9A97C8")]
			set
			{
			}
		}

		[Token(Token = "0x1700013A")]
		public Func<object> DefaultCreator
		{
			[Token(Token = "0x600101C")]
			[Address(RVA = "0x145C534", Offset = "0x145C534", VA = "0x145C534")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A97D8", Offset = "0x9A97D8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600101D")]
			[Address(RVA = "0x145D4A0", Offset = "0x145D4A0", VA = "0x145D4A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A97E8", Offset = "0x9A97E8")]
			set
			{
			}
		}

		[Token(Token = "0x1700013B")]
		public bool DefaultCreatorNonPublic
		{
			[Token(Token = "0x600101E")]
			[Address(RVA = "0x145C53C", Offset = "0x145C53C", VA = "0x145C53C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A97F8", Offset = "0x9A97F8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600101F")]
			[Address(RVA = "0x145D4A8", Offset = "0x145D4A8", VA = "0x145D4A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9808", Offset = "0x9A9808")]
			set
			{
			}
		}

		[Token(Token = "0x1700013C")]
		public MethodInfo OnError
		{
			[Token(Token = "0x6001020")]
			[Address(RVA = "0x1461F04", Offset = "0x1461F04", VA = "0x1461F04")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9818", Offset = "0x9A9818")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001021")]
			[Address(RVA = "0x145DA64", Offset = "0x145DA64", VA = "0x145DA64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9828", Offset = "0x9A9828")]
			set
			{
			}
		}

		[Token(Token = "0x6001022")]
		[Address(RVA = "0x1461F0C", Offset = "0x1461F0C", VA = "0x1461F0C")]
		internal void InvokeOnSerializing(object o, StreamingContext context)
		{
		}

		[Token(Token = "0x6001023")]
		[Address(RVA = "0x146202C", Offset = "0x146202C", VA = "0x146202C")]
		internal void InvokeOnSerialized(object o, StreamingContext context)
		{
		}

		[Token(Token = "0x6001024")]
		[Address(RVA = "0x146214C", Offset = "0x146214C", VA = "0x146214C")]
		internal void InvokeOnDeserializing(object o, StreamingContext context)
		{
		}

		[Token(Token = "0x6001025")]
		[Address(RVA = "0x146226C", Offset = "0x146226C", VA = "0x146226C")]
		internal void InvokeOnDeserialized(object o, StreamingContext context)
		{
		}

		[Token(Token = "0x6001026")]
		[Address(RVA = "0x146238C", Offset = "0x146238C", VA = "0x146238C")]
		internal void InvokeOnError(object o, StreamingContext context, ErrorContext errorContext)
		{
		}

		[Token(Token = "0x6001027")]
		[Address(RVA = "0x1461410", Offset = "0x1461410", VA = "0x1461410")]
		internal JsonContract(Type underlyingType)
		{
		}
	}
	[Token(Token = "0x200023C")]
	public class JsonDictionaryContract : JsonContract
	{
		[Token(Token = "0x4000C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7F40", Offset = "0x9A7F40")]
		private Func<string, string> <PropertyNameResolver>k__BackingField;

		[Token(Token = "0x4000C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7F50", Offset = "0x9A7F50")]
		private Type <DictionaryKeyType>k__BackingField;

		[Token(Token = "0x4000C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7F60", Offset = "0x9A7F60")]
		private Type <DictionaryValueType>k__BackingField;

		[Token(Token = "0x4000C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly bool _isDictionaryValueTypeNullableType;

		[Token(Token = "0x4000C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private readonly Type _genericCollectionDefinitionType;

		[Token(Token = "0x4000C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Type _genericWrapperType;

		[Token(Token = "0x4000C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private MethodCall<object, object> _genericWrapperCreator;

		[Token(Token = "0x1700013D")]
		public Func<string, string> PropertyNameResolver
		{
			[Token(Token = "0x6001028")]
			[Address(RVA = "0x14624F8", Offset = "0x14624F8", VA = "0x14624F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9838", Offset = "0x9A9838")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001029")]
			[Address(RVA = "0x145EA60", Offset = "0x145EA60", VA = "0x145EA60")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9848", Offset = "0x9A9848")]
			set
			{
			}
		}

		[Token(Token = "0x1700013E")]
		internal Type DictionaryKeyType
		{
			[Token(Token = "0x600102A")]
			[Address(RVA = "0x1462500", Offset = "0x1462500", VA = "0x1462500")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9858", Offset = "0x9A9858")]
			get
			{
				return null;
			}
			[Token(Token = "0x600102B")]
			[Address(RVA = "0x1462508", Offset = "0x1462508", VA = "0x1462508")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9868", Offset = "0x9A9868")]
			private set
			{
			}
		}

		[Token(Token = "0x1700013F")]
		internal Type DictionaryValueType
		{
			[Token(Token = "0x600102C")]
			[Address(RVA = "0x1462510", Offset = "0x1462510", VA = "0x1462510")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9878", Offset = "0x9A9878")]
			get
			{
				return null;
			}
			[Token(Token = "0x600102D")]
			[Address(RVA = "0x1462518", Offset = "0x1462518", VA = "0x1462518")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9888", Offset = "0x9A9888")]
			private set
			{
			}
		}

		[Token(Token = "0x600102E")]
		[Address(RVA = "0x145E71C", Offset = "0x145E71C", VA = "0x145E71C")]
		public JsonDictionaryContract(Type underlyingType)
		{
		}

		[Token(Token = "0x600102F")]
		[Address(RVA = "0x14625F4", Offset = "0x14625F4", VA = "0x14625F4")]
		internal IWrappedDictionary CreateWrapper(object dictionary)
		{
			return null;
		}

		[Token(Token = "0x6001030")]
		[Address(RVA = "0x1462520", Offset = "0x1462520", VA = "0x1462520")]
		private bool IsTypeGenericDictionaryInterface(Type type)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200023D")]
	internal class JsonFormatterConverter : IFormatterConverter
	{
		[Token(Token = "0x4000C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly JsonSerializer _serializer;

		[Token(Token = "0x6001031")]
		[Address(RVA = "0x1462A80", Offset = "0x1462A80", VA = "0x1462A80")]
		public JsonFormatterConverter(JsonSerializer serializer)
		{
		}

		[Token(Token = "0x6001032")]
		private T GetTokenValue<T>(object value)
		{
			return (T)null;
		}

		[Token(Token = "0x6001033")]
		[Address(RVA = "0x1462AF4", Offset = "0x1462AF4", VA = "0x1462AF4", Slot = "4")]
		public object Convert(object value, Type type)
		{
			return null;
		}

		[Token(Token = "0x6001034")]
		[Address(RVA = "0x1462C0C", Offset = "0x1462C0C", VA = "0x1462C0C", Slot = "10")]
		public object Convert(object value, TypeCode typeCode)
		{
			return null;
		}

		[Token(Token = "0x6001035")]
		[Address(RVA = "0x1462D1C", Offset = "0x1462D1C", VA = "0x1462D1C", Slot = "5")]
		public bool ToBoolean(object value)
		{
			return default(bool);
		}

		[Token(Token = "0x6001036")]
		[Address(RVA = "0x1462D7C", Offset = "0x1462D7C", VA = "0x1462D7C", Slot = "11")]
		public byte ToByte(object value)
		{
			return default(byte);
		}

		[Token(Token = "0x6001037")]
		[Address(RVA = "0x1462DDC", Offset = "0x1462DDC", VA = "0x1462DDC", Slot = "12")]
		public char ToChar(object value)
		{
			return default(char);
		}

		[Token(Token = "0x6001038")]
		[Address(RVA = "0x1462E3C", Offset = "0x1462E3C", VA = "0x1462E3C", Slot = "13")]
		public DateTime ToDateTime(object value)
		{
			return default(DateTime);
		}

		[Token(Token = "0x6001039")]
		[Address(RVA = "0x1462E9C", Offset = "0x1462E9C", VA = "0x1462E9C", Slot = "14")]
		public decimal ToDecimal(object value)
		{
			return default(decimal);
		}

		[Token(Token = "0x600103A")]
		[Address(RVA = "0x1462EFC", Offset = "0x1462EFC", VA = "0x1462EFC", Slot = "15")]
		public double ToDouble(object value)
		{
			return default(double);
		}

		[Token(Token = "0x600103B")]
		[Address(RVA = "0x1462F5C", Offset = "0x1462F5C", VA = "0x1462F5C", Slot = "16")]
		public short ToInt16(object value)
		{
			return default(short);
		}

		[Token(Token = "0x600103C")]
		[Address(RVA = "0x1462FBC", Offset = "0x1462FBC", VA = "0x1462FBC", Slot = "6")]
		public int ToInt32(object value)
		{
			return default(int);
		}

		[Token(Token = "0x600103D")]
		[Address(RVA = "0x146301C", Offset = "0x146301C", VA = "0x146301C", Slot = "7")]
		public long ToInt64(object value)
		{
			return default(long);
		}

		[Token(Token = "0x600103E")]
		[Address(RVA = "0x146307C", Offset = "0x146307C", VA = "0x146307C", Slot = "17")]
		public sbyte ToSByte(object value)
		{
			return default(sbyte);
		}

		[Token(Token = "0x600103F")]
		[Address(RVA = "0x14630DC", Offset = "0x14630DC", VA = "0x14630DC", Slot = "8")]
		public float ToSingle(object value)
		{
			return default(float);
		}

		[Token(Token = "0x6001040")]
		[Address(RVA = "0x146313C", Offset = "0x146313C", VA = "0x146313C", Slot = "9")]
		public string ToString(object value)
		{
			return null;
		}

		[Token(Token = "0x6001041")]
		[Address(RVA = "0x146319C", Offset = "0x146319C", VA = "0x146319C", Slot = "18")]
		public ushort ToUInt16(object value)
		{
			return default(ushort);
		}

		[Token(Token = "0x6001042")]
		[Address(RVA = "0x14631FC", Offset = "0x14631FC", VA = "0x14631FC", Slot = "19")]
		public uint ToUInt32(object value)
		{
			return default(uint);
		}

		[Token(Token = "0x6001043")]
		[Address(RVA = "0x146325C", Offset = "0x146325C", VA = "0x146325C", Slot = "20")]
		public ulong ToUInt64(object value)
		{
			return default(ulong);
		}
	}
	[Token(Token = "0x200023E")]
	public class JsonISerializableContract : JsonContract
	{
		[Token(Token = "0x4000C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7F70", Offset = "0x9A7F70")]
		private ObjectConstructor<object> <ISerializableCreator>k__BackingField;

		[Token(Token = "0x17000140")]
		public ObjectConstructor<object> ISerializableCreator
		{
			[Token(Token = "0x6001044")]
			[Address(RVA = "0x14632BC", Offset = "0x14632BC", VA = "0x14632BC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9898", Offset = "0x9A9898")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001045")]
			[Address(RVA = "0x145F24C", Offset = "0x145F24C", VA = "0x145F24C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A98A8", Offset = "0x9A98A8")]
			set
			{
			}
		}

		[Token(Token = "0x6001046")]
		[Address(RVA = "0x145F240", Offset = "0x145F240", VA = "0x145F240")]
		public JsonISerializableContract(Type underlyingType)
		{
		}
	}
	[Token(Token = "0x200023F")]
	public class JsonLinqContract : JsonContract
	{
		[Token(Token = "0x6001047")]
		[Address(RVA = "0x145EF70", Offset = "0x145EF70", VA = "0x145EF70")]
		public JsonLinqContract(Type underlyingType)
		{
		}
	}
	[Token(Token = "0x2000240")]
	public class JsonObjectContract : JsonContract
	{
		[Token(Token = "0x4000C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7F80", Offset = "0x9A7F80")]
		private MemberSerialization <MemberSerialization>k__BackingField;

		[Token(Token = "0x4000C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7F90", Offset = "0x9A7F90")]
		private JsonPropertyCollection <Properties>k__BackingField;

		[Token(Token = "0x4000C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7FA0", Offset = "0x9A7FA0")]
		private JsonPropertyCollection <ConstructorParameters>k__BackingField;

		[Token(Token = "0x4000C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7FB0", Offset = "0x9A7FB0")]
		private ConstructorInfo <OverrideConstructor>k__BackingField;

		[Token(Token = "0x4000C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7FC0", Offset = "0x9A7FC0")]
		private ConstructorInfo <ParametrizedConstructor>k__BackingField;

		[Token(Token = "0x17000141")]
		public MemberSerialization MemberSerialization
		{
			[Token(Token = "0x6001048")]
			[Address(RVA = "0x145C230", Offset = "0x145C230", VA = "0x145C230")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A98B8", Offset = "0x9A98B8")]
			get
			{
				return default(MemberSerialization);
			}
			[Token(Token = "0x6001049")]
			[Address(RVA = "0x145C218", Offset = "0x145C218", VA = "0x145C218")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A98C8", Offset = "0x9A98C8")]
			set
			{
			}
		}

		[Token(Token = "0x17000142")]
		public JsonPropertyCollection Properties
		{
			[Token(Token = "0x600104A")]
			[Address(RVA = "0x145C220", Offset = "0x145C220", VA = "0x145C220")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A98D8", Offset = "0x9A98D8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600104B")]
			[Address(RVA = "0x14632C4", Offset = "0x14632C4", VA = "0x14632C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A98E8", Offset = "0x9A98E8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000143")]
		public JsonPropertyCollection ConstructorParameters
		{
			[Token(Token = "0x600104C")]
			[Address(RVA = "0x145C52C", Offset = "0x145C52C", VA = "0x145C52C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A98F8", Offset = "0x9A98F8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600104D")]
			[Address(RVA = "0x14632CC", Offset = "0x14632CC", VA = "0x14632CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9908", Offset = "0x9A9908")]
			private set
			{
			}
		}

		[Token(Token = "0x17000144")]
		public ConstructorInfo OverrideConstructor
		{
			[Token(Token = "0x600104E")]
			[Address(RVA = "0x14632D4", Offset = "0x14632D4", VA = "0x14632D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9918", Offset = "0x9A9918")]
			get
			{
				return null;
			}
			[Token(Token = "0x600104F")]
			[Address(RVA = "0x145C524", Offset = "0x145C524", VA = "0x145C524")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9928", Offset = "0x9A9928")]
			set
			{
			}
		}

		[Token(Token = "0x17000145")]
		public ConstructorInfo ParametrizedConstructor
		{
			[Token(Token = "0x6001050")]
			[Address(RVA = "0x14632DC", Offset = "0x14632DC", VA = "0x14632DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9938", Offset = "0x9A9938")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001051")]
			[Address(RVA = "0x145C6A8", Offset = "0x145C6A8", VA = "0x145C6A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9948", Offset = "0x9A9948")]
			set
			{
			}
		}

		[Token(Token = "0x6001052")]
		[Address(RVA = "0x145BF6C", Offset = "0x145BF6C", VA = "0x145BF6C")]
		public JsonObjectContract(Type underlyingType)
		{
		}
	}
	[Token(Token = "0x2000241")]
	public class JsonPrimitiveContract : JsonContract
	{
		[Token(Token = "0x6001053")]
		[Address(RVA = "0x145EEF4", Offset = "0x145EEF4", VA = "0x145EEF4")]
		public JsonPrimitiveContract(Type underlyingType)
		{
		}
	}
	[Token(Token = "0x2000242")]
	public class JsonProperty
	{
		[Token(Token = "0x4000C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7FD0", Offset = "0x9A7FD0")]
		private string <PropertyName>k__BackingField;

		[Token(Token = "0x4000C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7FE0", Offset = "0x9A7FE0")]
		private int? <Order>k__BackingField;

		[Token(Token = "0x4000C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A7FF0", Offset = "0x9A7FF0")]
		private string <UnderlyingName>k__BackingField;

		[Token(Token = "0x4000C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8000", Offset = "0x9A8000")]
		private IValueProvider <ValueProvider>k__BackingField;

		[Token(Token = "0x4000C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8010", Offset = "0x9A8010")]
		private Type <PropertyType>k__BackingField;

		[Token(Token = "0x4000C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8020", Offset = "0x9A8020")]
		private JsonConverter <Converter>k__BackingField;

		[Token(Token = "0x4000C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8030", Offset = "0x9A8030")]
		private JsonConverter <MemberConverter>k__BackingField;

		[Token(Token = "0x4000C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8040", Offset = "0x9A8040")]
		private bool <Ignored>k__BackingField;

		[Token(Token = "0x4000C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8050", Offset = "0x9A8050")]
		private bool <Readable>k__BackingField;

		[Token(Token = "0x4000C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8060", Offset = "0x9A8060")]
		private bool <Writable>k__BackingField;

		[Token(Token = "0x4000C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8070", Offset = "0x9A8070")]
		private object <DefaultValue>k__BackingField;

		[Token(Token = "0x4000C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8080", Offset = "0x9A8080")]
		private Required <Required>k__BackingField;

		[Token(Token = "0x4000C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8090", Offset = "0x9A8090")]
		private bool? <IsReference>k__BackingField;

		[Token(Token = "0x4000C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A80A0", Offset = "0x9A80A0")]
		private NullValueHandling? <NullValueHandling>k__BackingField;

		[Token(Token = "0x4000C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A80B0", Offset = "0x9A80B0")]
		private DefaultValueHandling? <DefaultValueHandling>k__BackingField;

		[Token(Token = "0x4000C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A80C0", Offset = "0x9A80C0")]
		private ReferenceLoopHandling? <ReferenceLoopHandling>k__BackingField;

		[Token(Token = "0x4000C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A80D0", Offset = "0x9A80D0")]
		private ObjectCreationHandling? <ObjectCreationHandling>k__BackingField;

		[Token(Token = "0x4000C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A80E0", Offset = "0x9A80E0")]
		private TypeNameHandling? <TypeNameHandling>k__BackingField;

		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A80F0", Offset = "0x9A80F0")]
		private Predicate<object> <ShouldSerialize>k__BackingField;

		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8100", Offset = "0x9A8100")]
		private Predicate<object> <GetIsSpecified>k__BackingField;

		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8110", Offset = "0x9A8110")]
		private Action<object, object> <SetIsSpecified>k__BackingField;

		[Token(Token = "0x17000146")]
		public string PropertyName
		{
			[Token(Token = "0x6001054")]
			[Address(RVA = "0x145D2BC", Offset = "0x145D2BC", VA = "0x145D2BC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9958", Offset = "0x9A9958")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001055")]
			[Address(RVA = "0x145D2C4", Offset = "0x145D2C4", VA = "0x145D2C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9968", Offset = "0x9A9968")]
			set
			{
			}
		}

		[Token(Token = "0x17000147")]
		public int? Order
		{
			[Token(Token = "0x6001056")]
			[Address(RVA = "0x1460750", Offset = "0x1460750", VA = "0x1460750")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9978", Offset = "0x9A9978")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001057")]
			[Address(RVA = "0x1460348", Offset = "0x1460348", VA = "0x1460348")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9988", Offset = "0x9A9988")]
			set
			{
			}
		}

		[Token(Token = "0x17000148")]
		public string UnderlyingName
		{
			[Token(Token = "0x6001058")]
			[Address(RVA = "0x14632E4", Offset = "0x14632E4", VA = "0x14632E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9998", Offset = "0x9A9998")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001059")]
			[Address(RVA = "0x1460340", Offset = "0x1460340", VA = "0x1460340")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A99A8", Offset = "0x9A99A8")]
			set
			{
			}
		}

		[Token(Token = "0x17000149")]
		public IValueProvider ValueProvider
		{
			[Token(Token = "0x600105A")]
			[Address(RVA = "0x14632EC", Offset = "0x14632EC", VA = "0x14632EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A99B8", Offset = "0x9A99B8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600105B")]
			[Address(RVA = "0x145FE20", Offset = "0x145FE20", VA = "0x145FE20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A99C8", Offset = "0x9A99C8")]
			set
			{
			}
		}

		[Token(Token = "0x1700014A")]
		public Type PropertyType
		{
			[Token(Token = "0x600105C")]
			[Address(RVA = "0x145C958", Offset = "0x145C958", VA = "0x145C958")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A99D8", Offset = "0x9A99D8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600105D")]
			[Address(RVA = "0x145CE4C", Offset = "0x145CE4C", VA = "0x145CE4C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A99E8", Offset = "0x9A99E8")]
			set
			{
			}
		}

		[Token(Token = "0x1700014B")]
		public JsonConverter Converter
		{
			[Token(Token = "0x600105E")]
			[Address(RVA = "0x145D2CC", Offset = "0x145D2CC", VA = "0x145D2CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A99F8", Offset = "0x9A99F8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600105F")]
			[Address(RVA = "0x145D2D4", Offset = "0x145D2D4", VA = "0x145D2D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9A08", Offset = "0x9A9A08")]
			set
			{
			}
		}

		[Token(Token = "0x1700014C")]
		public JsonConverter MemberConverter
		{
			[Token(Token = "0x6001060")]
			[Address(RVA = "0x145D2DC", Offset = "0x145D2DC", VA = "0x145D2DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9A18", Offset = "0x9A9A18")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001061")]
			[Address(RVA = "0x145D2E4", Offset = "0x145D2E4", VA = "0x145D2E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9A28", Offset = "0x9A9A28")]
			set
			{
			}
		}

		[Token(Token = "0x1700014D")]
		public bool Ignored
		{
			[Token(Token = "0x6001062")]
			[Address(RVA = "0x14632F4", Offset = "0x14632F4", VA = "0x14632F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9A38", Offset = "0x9A9A38")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001063")]
			[Address(RVA = "0x1460350", Offset = "0x1460350", VA = "0x1460350")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9A48", Offset = "0x9A9A48")]
			set
			{
			}
		}

		[Token(Token = "0x1700014E")]
		public bool Readable
		{
			[Token(Token = "0x6001064")]
			[Address(RVA = "0x14632FC", Offset = "0x14632FC", VA = "0x14632FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9A58", Offset = "0x9A9A58")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001065")]
			[Address(RVA = "0x145D2A4", Offset = "0x145D2A4", VA = "0x145D2A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9A68", Offset = "0x9A9A68")]
			set
			{
			}
		}

		[Token(Token = "0x1700014F")]
		public bool Writable
		{
			[Token(Token = "0x6001066")]
			[Address(RVA = "0x1463304", Offset = "0x1463304", VA = "0x1463304")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9A78", Offset = "0x9A9A78")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001067")]
			[Address(RVA = "0x145D2B0", Offset = "0x145D2B0", VA = "0x145D2B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9A88", Offset = "0x9A9A88")]
			set
			{
			}
		}

		[Token(Token = "0x17000150")]
		public object DefaultValue
		{
			[Token(Token = "0x6001068")]
			[Address(RVA = "0x145D2EC", Offset = "0x145D2EC", VA = "0x145D2EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9A98", Offset = "0x9A9A98")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001069")]
			[Address(RVA = "0x145D2F4", Offset = "0x145D2F4", VA = "0x145D2F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9AA8", Offset = "0x9A9AA8")]
			set
			{
			}
		}

		[Token(Token = "0x17000151")]
		public Required Required
		{
			[Token(Token = "0x600106A")]
			[Address(RVA = "0x145D2FC", Offset = "0x145D2FC", VA = "0x145D2FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9AB8", Offset = "0x9A9AB8")]
			get
			{
				return default(Required);
			}
			[Token(Token = "0x600106B")]
			[Address(RVA = "0x145D304", Offset = "0x145D304", VA = "0x145D304")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9AC8", Offset = "0x9A9AC8")]
			set
			{
			}
		}

		[Token(Token = "0x17000152")]
		public bool? IsReference
		{
			[Token(Token = "0x600106C")]
			[Address(RVA = "0x145D30C", Offset = "0x145D30C", VA = "0x145D30C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9AD8", Offset = "0x9A9AD8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600106D")]
			[Address(RVA = "0x145D314", Offset = "0x145D314", VA = "0x145D314")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9AE8", Offset = "0x9A9AE8")]
			set
			{
			}
		}

		[Token(Token = "0x17000153")]
		public NullValueHandling? NullValueHandling
		{
			[Token(Token = "0x600106E")]
			[Address(RVA = "0x145D31C", Offset = "0x145D31C", VA = "0x145D31C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9AF8", Offset = "0x9A9AF8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600106F")]
			[Address(RVA = "0x145D324", Offset = "0x145D324", VA = "0x145D324")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9B08", Offset = "0x9A9B08")]
			set
			{
			}
		}

		[Token(Token = "0x17000154")]
		public DefaultValueHandling? DefaultValueHandling
		{
			[Token(Token = "0x6001070")]
			[Address(RVA = "0x145D32C", Offset = "0x145D32C", VA = "0x145D32C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9B18", Offset = "0x9A9B18")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001071")]
			[Address(RVA = "0x145D334", Offset = "0x145D334", VA = "0x145D334")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9B28", Offset = "0x9A9B28")]
			set
			{
			}
		}

		[Token(Token = "0x17000155")]
		public ReferenceLoopHandling? ReferenceLoopHandling
		{
			[Token(Token = "0x6001072")]
			[Address(RVA = "0x145D33C", Offset = "0x145D33C", VA = "0x145D33C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9B38", Offset = "0x9A9B38")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001073")]
			[Address(RVA = "0x145D344", Offset = "0x145D344", VA = "0x145D344")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9B48", Offset = "0x9A9B48")]
			set
			{
			}
		}

		[Token(Token = "0x17000156")]
		public ObjectCreationHandling? ObjectCreationHandling
		{
			[Token(Token = "0x6001074")]
			[Address(RVA = "0x145D34C", Offset = "0x145D34C", VA = "0x145D34C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9B58", Offset = "0x9A9B58")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001075")]
			[Address(RVA = "0x145D354", Offset = "0x145D354", VA = "0x145D354")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9B68", Offset = "0x9A9B68")]
			set
			{
			}
		}

		[Token(Token = "0x17000157")]
		public TypeNameHandling? TypeNameHandling
		{
			[Token(Token = "0x6001076")]
			[Address(RVA = "0x145D35C", Offset = "0x145D35C", VA = "0x145D35C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9B78", Offset = "0x9A9B78")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001077")]
			[Address(RVA = "0x145D364", Offset = "0x145D364", VA = "0x145D364")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9B88", Offset = "0x9A9B88")]
			set
			{
			}
		}

		[Token(Token = "0x17000158")]
		public Predicate<object> ShouldSerialize
		{
			[Token(Token = "0x6001078")]
			[Address(RVA = "0x146330C", Offset = "0x146330C", VA = "0x146330C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9B98", Offset = "0x9A9B98")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001079")]
			[Address(RVA = "0x146006C", Offset = "0x146006C", VA = "0x146006C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9BA8", Offset = "0x9A9BA8")]
			set
			{
			}
		}

		[Token(Token = "0x17000159")]
		public Predicate<object> GetIsSpecified
		{
			[Token(Token = "0x600107A")]
			[Address(RVA = "0x1463314", Offset = "0x1463314", VA = "0x1463314")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9BB8", Offset = "0x9A9BB8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600107B")]
			[Address(RVA = "0x146036C", Offset = "0x146036C", VA = "0x146036C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9BC8", Offset = "0x9A9BC8")]
			set
			{
			}
		}

		[Token(Token = "0x1700015A")]
		public Action<object, object> SetIsSpecified
		{
			[Token(Token = "0x600107C")]
			[Address(RVA = "0x146331C", Offset = "0x146331C", VA = "0x146331C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9BD8", Offset = "0x9A9BD8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600107D")]
			[Address(RVA = "0x1460374", Offset = "0x1460374", VA = "0x1460374")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9BE8", Offset = "0x9A9BE8")]
			set
			{
			}
		}

		[Token(Token = "0x600107E")]
		[Address(RVA = "0x1463324", Offset = "0x1463324", VA = "0x1463324", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600107F")]
		[Address(RVA = "0x145CE44", Offset = "0x145CE44", VA = "0x145CE44")]
		public JsonProperty()
		{
		}
	}
	[Token(Token = "0x2000243")]
	public class JsonPropertyCollection : KeyedCollection<string, JsonProperty>
	{
		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly Type _type;

		[Token(Token = "0x6001080")]
		[Address(RVA = "0x145C898", Offset = "0x145C898", VA = "0x145C898")]
		public JsonPropertyCollection(Type type)
		{
		}

		[Token(Token = "0x6001081")]
		[Address(RVA = "0x146332C", Offset = "0x146332C", VA = "0x146332C", Slot = "39")]
		protected override string GetKeyForItem(JsonProperty item)
		{
			return null;
		}

		[Token(Token = "0x6001082")]
		[Address(RVA = "0x145C960", Offset = "0x145C960", VA = "0x145C960")]
		public void AddProperty(JsonProperty property)
		{
		}

		[Token(Token = "0x6001083")]
		[Address(RVA = "0x145C914", Offset = "0x145C914", VA = "0x145C914")]
		public JsonProperty GetClosestMatchProperty(string propertyName)
		{
			return null;
		}

		[Token(Token = "0x6001084")]
		[Address(RVA = "0x1463358", Offset = "0x1463358", VA = "0x1463358")]
		public JsonProperty GetProperty(string propertyName, StringComparison comparisonType)
		{
			return null;
		}
	}
	[Token(Token = "0x2000244")]
	internal abstract class JsonSerializerInternalBase
	{
		[Token(Token = "0x200032B")]
		private class ReferenceEqualsEqualityComparer : IEqualityComparer<object>
		{
			[Token(Token = "0x6001631")]
			[Address(RVA = "0x1463924", Offset = "0x1463924", VA = "0x1463924", Slot = "4")]
			private bool System.Collections.Generic.IEqualityComparer<System.Object>.Equals(object x, object y)
			{
				return default(bool);
			}

			[Token(Token = "0x6001632")]
			[Address(RVA = "0x1463930", Offset = "0x1463930", VA = "0x1463930", Slot = "5")]
			private int System.Collections.Generic.IEqualityComparer<System.Object>.GetHashCode(object obj)
			{
				return default(int);
			}

			[Token(Token = "0x6001633")]
			[Address(RVA = "0x1463670", Offset = "0x1463670", VA = "0x1463670")]
			public ReferenceEqualsEqualityComparer()
			{
			}
		}

		[Token(Token = "0x4000C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ErrorContext _currentErrorContext;

		[Token(Token = "0x4000C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BidirectionalDictionary<string, object> _mappings;

		[Token(Token = "0x4000C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8120", Offset = "0x9A8120")]
		private JsonSerializer <Serializer>k__BackingField;

		[Token(Token = "0x1700015B")]
		internal JsonSerializer Serializer
		{
			[Token(Token = "0x6001085")]
			[Address(RVA = "0x14635EC", Offset = "0x14635EC", VA = "0x14635EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9BF8", Offset = "0x9A9BF8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001086")]
			[Address(RVA = "0x14635F4", Offset = "0x14635F4", VA = "0x14635F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9C08", Offset = "0x9A9C08")]
			private set
			{
			}
		}

		[Token(Token = "0x1700015C")]
		internal BidirectionalDictionary<string, object> DefaultReferenceMappings
		{
			[Token(Token = "0x6001088")]
			[Address(RVA = "0x1460A00", Offset = "0x1460A00", VA = "0x1460A00")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001087")]
		[Address(RVA = "0x14635FC", Offset = "0x14635FC", VA = "0x14635FC")]
		protected JsonSerializerInternalBase(JsonSerializer serializer)
		{
		}

		[Token(Token = "0x6001089")]
		[Address(RVA = "0x1463678", Offset = "0x1463678", VA = "0x1463678")]
		protected ErrorContext GetErrorContext(object currentObject, object member, Exception error)
		{
			return null;
		}

		[Token(Token = "0x600108A")]
		[Address(RVA = "0x1463764", Offset = "0x1463764", VA = "0x1463764")]
		protected void ClearErrorContext()
		{
		}

		[Token(Token = "0x600108B")]
		[Address(RVA = "0x14637F4", Offset = "0x14637F4", VA = "0x14637F4")]
		protected bool IsErrorHandled(object currentObject, JsonContract contract, object keyValue, Exception ex)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000245")]
	internal class JsonSerializerInternalReader : JsonSerializerInternalBase
	{
		[Token(Token = "0x200032C")]
		internal enum PropertyPresence
		{
			[Token(Token = "0x4000F0F")]
			None,
			[Token(Token = "0x4000F10")]
			Null,
			[Token(Token = "0x4000F11")]
			Value
		}

		[Token(Token = "0x200032D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A68A4", Offset = "0x9A68A4")]
		private sealed class <>c__DisplayClass27_0
		{
			[Token(Token = "0x4000F12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string reference;

			[Token(Token = "0x4000F13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public JsonArrayContract contract;

			[Token(Token = "0x4000F14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public JsonSerializerInternalReader <>4__this;

			[Token(Token = "0x4000F15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JsonReader reader;

			[Token(Token = "0x6001634")]
			[Address(RVA = "0x1469640", Offset = "0x1469640", VA = "0x1469640")]
			public <>c__DisplayClass27_0()
			{
			}

			[Token(Token = "0x6001635")]
			[Address(RVA = "0x146BA8C", Offset = "0x146BA8C", VA = "0x146BA8C")]
			internal void <CreateAndPopulateList>b__0(IList l, bool isTemporaryListReference)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200032E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A68B4", Offset = "0x9A68B4")]
		private sealed class <>c
		{
			[Token(Token = "0x4000F16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000F17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<ParameterInfo, ParameterInfo> <>9__33_0;

			[Token(Token = "0x4000F18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<ParameterInfo, object> <>9__33_1;

			[Token(Token = "0x4000F19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<KeyValuePair<ParameterInfo, object>, string> <>9__33_2;

			[Token(Token = "0x4000F1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Func<JsonProperty, JsonProperty> <>9__36_0;

			[Token(Token = "0x4000F1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public static Func<JsonProperty, PropertyPresence> <>9__36_1;

			[Token(Token = "0x6001637")]
			[Address(RVA = "0x146B9EC", Offset = "0x146B9EC", VA = "0x146B9EC")]
			public <>c()
			{
			}

			[Token(Token = "0x6001638")]
			[Address(RVA = "0x146B9F4", Offset = "0x146B9F4", VA = "0x146B9F4")]
			internal ParameterInfo <CreateObjectFromNonDefaultConstructor>b__33_0(ParameterInfo p)
			{
				return null;
			}

			[Token(Token = "0x6001639")]
			[Address(RVA = "0x146B9FC", Offset = "0x146B9FC", VA = "0x146B9FC")]
			internal object <CreateObjectFromNonDefaultConstructor>b__33_1(ParameterInfo p)
			{
				return null;
			}

			[Token(Token = "0x600163A")]
			[Address(RVA = "0x146BA04", Offset = "0x146BA04", VA = "0x146BA04")]
			internal string <CreateObjectFromNonDefaultConstructor>b__33_2(KeyValuePair<ParameterInfo, object> kv)
			{
				return null;
			}

			[Token(Token = "0x600163B")]
			[Address(RVA = "0x146BA7C", Offset = "0x146BA7C", VA = "0x146BA7C")]
			internal JsonProperty <PopulateObject>b__36_0(JsonProperty m)
			{
				return null;
			}

			[Token(Token = "0x600163C")]
			[Address(RVA = "0x146BA84", Offset = "0x146BA84", VA = "0x146BA84")]
			internal PropertyPresence <PopulateObject>b__36_1(JsonProperty m)
			{
				return default(PropertyPresence);
			}
		}

		[Token(Token = "0x4000C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private JsonSerializerProxy _internalSerializer;

		[Token(Token = "0x4000C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private JsonFormatterConverter _formatterConverter;

		[Token(Token = "0x600108C")]
		[Address(RVA = "0x146393C", Offset = "0x146393C", VA = "0x146393C")]
		public JsonSerializerInternalReader(JsonSerializer serializer)
		{
		}

		[Token(Token = "0x600108D")]
		[Address(RVA = "0x1463940", Offset = "0x1463940", VA = "0x1463940")]
		public void Populate(JsonReader reader, object target)
		{
		}

		[Token(Token = "0x600108E")]
		[Address(RVA = "0x1465C70", Offset = "0x1465C70", VA = "0x1465C70")]
		private JsonContract GetContractSafe(Type type)
		{
			return null;
		}

		[Token(Token = "0x600108F")]
		[Address(RVA = "0x1465D9C", Offset = "0x1465D9C", VA = "0x1465D9C")]
		private JsonContract GetContractSafe(Type type, object value)
		{
			return null;
		}

		[Token(Token = "0x6001090")]
		[Address(RVA = "0x1465EB4", Offset = "0x1465EB4", VA = "0x1465EB4")]
		public object Deserialize(JsonReader reader, Type objectType)
		{
			return null;
		}

		[Token(Token = "0x6001091")]
		[Address(RVA = "0x1466310", Offset = "0x1466310", VA = "0x1466310")]
		private JsonSerializerProxy GetInternalSerializer()
		{
			return null;
		}

		[Token(Token = "0x6001092")]
		[Address(RVA = "0x1466380", Offset = "0x1466380", VA = "0x1466380")]
		private JsonFormatterConverter GetFormatterConverter()
		{
			return null;
		}

		[Token(Token = "0x6001093")]
		[Address(RVA = "0x1466404", Offset = "0x1466404", VA = "0x1466404")]
		private JToken CreateJToken(JsonReader reader, JsonContract contract)
		{
			return null;
		}

		[Token(Token = "0x6001094")]
		[Address(RVA = "0x14665D8", Offset = "0x14665D8", VA = "0x14665D8")]
		private JToken CreateJObject(JsonReader reader)
		{
			return null;
		}

		[Token(Token = "0x6001095")]
		[Address(RVA = "0x1466798", Offset = "0x1466798", VA = "0x1466798")]
		private object CreateValueProperty(JsonReader reader, JsonProperty property, object target, bool gottenCurrentValue, object currentValue)
		{
			return null;
		}

		[Token(Token = "0x6001096")]
		[Address(RVA = "0x1466260", Offset = "0x1466260", VA = "0x1466260")]
		private object CreateValueNonProperty(JsonReader reader, Type objectType, JsonContract contract)
		{
			return null;
		}

		[Token(Token = "0x6001097")]
		[Address(RVA = "0x14669F0", Offset = "0x14669F0", VA = "0x14669F0")]
		private object CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, object existingValue)
		{
			return null;
		}

		[Token(Token = "0x6001098")]
		[Address(RVA = "0x1466978", Offset = "0x1466978", VA = "0x1466978")]
		private JsonConverter GetConverter(JsonContract contract, JsonConverter memberConverter)
		{
			return null;
		}

		[Token(Token = "0x6001099")]
		[Address(RVA = "0x1466FD0", Offset = "0x1466FD0", VA = "0x1466FD0")]
		private object CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, object existingValue)
		{
			return null;
		}

		[Token(Token = "0x600109A")]
		[Address(RVA = "0x1468C48", Offset = "0x1468C48", VA = "0x1468C48")]
		private JsonArrayContract EnsureArrayContract(Type objectType, JsonContract contract)
		{
			return null;
		}

		[Token(Token = "0x600109B")]
		[Address(RVA = "0x1464564", Offset = "0x1464564", VA = "0x1464564")]
		private void CheckedRead(JsonReader reader)
		{
		}

		[Token(Token = "0x600109C")]
		[Address(RVA = "0x1467C0C", Offset = "0x1467C0C", VA = "0x1467C0C")]
		private object CreateList(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, object existingValue, string reference)
		{
			return null;
		}

		[Token(Token = "0x600109D")]
		[Address(RVA = "0x1467FD4", Offset = "0x1467FD4", VA = "0x1467FD4")]
		private bool HasDefinedType(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x600109E")]
		[Address(RVA = "0x1467D58", Offset = "0x1467D58", VA = "0x1467D58")]
		private object EnsureType(object value, CultureInfo culture, Type targetType)
		{
			return null;
		}

		[Token(Token = "0x600109F")]
		[Address(RVA = "0x1468F3C", Offset = "0x1468F3C", VA = "0x1468F3C")]
		private string FormatValueForPrint(object value)
		{
			return null;
		}

		[Token(Token = "0x60010A0")]
		[Address(RVA = "0x1468FDC", Offset = "0x1468FDC", VA = "0x1468FDC")]
		private void SetPropertyValue(JsonProperty property, JsonReader reader, object target)
		{
		}

		[Token(Token = "0x60010A1")]
		[Address(RVA = "0x1469494", Offset = "0x1469494", VA = "0x1469494")]
		private bool HasFlag(DefaultValueHandling value, DefaultValueHandling flag)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A2")]
		[Address(RVA = "0x14694A0", Offset = "0x14694A0", VA = "0x14694A0")]
		private bool ShouldSetPropertyValue(JsonProperty property, object value)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A3")]
		[Address(RVA = "0x14680F8", Offset = "0x14680F8", VA = "0x14680F8")]
		private object CreateAndPopulateDictionary(JsonReader reader, JsonDictionaryContract contract, string id)
		{
			return null;
		}

		[Token(Token = "0x60010A4")]
		[Address(RVA = "0x1464608", Offset = "0x1464608", VA = "0x1464608")]
		private object PopulateDictionary(IWrappedDictionary dictionary, JsonReader reader, JsonDictionaryContract contract, string id)
		{
			return null;
		}

		[Token(Token = "0x60010A5")]
		[Address(RVA = "0x1468E14", Offset = "0x1468E14", VA = "0x1468E14")]
		private object CreateAndPopulateList(JsonReader reader, string reference, JsonArrayContract contract)
		{
			return null;
		}

		[Token(Token = "0x60010A6")]
		[Address(RVA = "0x1469648", Offset = "0x1469648", VA = "0x1469648")]
		private bool ReadForTypeArrayHack(JsonReader reader, Type t)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A7")]
		[Address(RVA = "0x1463F9C", Offset = "0x1463F9C", VA = "0x1463F9C")]
		private object PopulateList(IWrappedCollection wrappedList, JsonReader reader, string reference, JsonArrayContract contract)
		{
			return null;
		}

		[Token(Token = "0x60010A8")]
		[Address(RVA = "0x1469764", Offset = "0x1469764", VA = "0x1469764")]
		private object PopulateMultidimensionalArray(IList list, JsonReader reader, string reference, JsonArrayContract contract)
		{
			return null;
		}

		[Token(Token = "0x60010A9")]
		[Address(RVA = "0x14686C0", Offset = "0x14686C0", VA = "0x14686C0")]
		private object CreateISerializable(JsonReader reader, JsonISerializableContract contract, string id)
		{
			return null;
		}

		[Token(Token = "0x60010AA")]
		[Address(RVA = "0x1468334", Offset = "0x1468334", VA = "0x1468334")]
		private object CreateAndPopulateObject(JsonReader reader, JsonObjectContract contract, string id)
		{
			return null;
		}

		[Token(Token = "0x60010AB")]
		[Address(RVA = "0x1469ED8", Offset = "0x1469ED8", VA = "0x1469ED8")]
		private object CreateObjectFromNonDefaultConstructor(JsonReader reader, JsonObjectContract contract, ConstructorInfo constructorInfo, string id)
		{
			return null;
		}

		[Token(Token = "0x60010AC")]
		[Address(RVA = "0x146B444", Offset = "0x146B444", VA = "0x146B444")]
		private IDictionary<JsonProperty, object> ResolvePropertyAndConstructorValues(JsonObjectContract contract, JsonReader reader, Type objectType)
		{
			return null;
		}

		[Token(Token = "0x60010AD")]
		[Address(RVA = "0x1465FA8", Offset = "0x1465FA8", VA = "0x1465FA8")]
		private bool ReadForType(JsonReader reader, Type t, JsonConverter propertyConverter)
		{
			return default(bool);
		}

		[Token(Token = "0x60010AE")]
		[Address(RVA = "0x1464F18", Offset = "0x1464F18", VA = "0x1464F18")]
		private object PopulateObject(object newObject, JsonReader reader, JsonObjectContract contract, string id)
		{
			return null;
		}

		[Token(Token = "0x60010AF")]
		[Address(RVA = "0x146B8B4", Offset = "0x146B8B4", VA = "0x146B8B4")]
		private void SetPropertyPresence(JsonReader reader, JsonProperty property, Dictionary<JsonProperty, PropertyPresence> requiredProperties)
		{
		}

		[Token(Token = "0x60010B0")]
		[Address(RVA = "0x14695C8", Offset = "0x14695C8", VA = "0x14695C8")]
		private void HandleError(JsonReader reader, int initialDepth)
		{
		}
	}
	[Token(Token = "0x2000246")]
	internal class JsonSerializerInternalWriter : JsonSerializerInternalBase
	{
		[Token(Token = "0x4000C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private JsonSerializerProxy _internalSerializer;

		[Token(Token = "0x4000C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<object> _serializeStack;

		[Token(Token = "0x1700015D")]
		private List<object> SerializeStack
		{
			[Token(Token = "0x60010B1")]
			[Address(RVA = "0x146BDEC", Offset = "0x146BDEC", VA = "0x146BDEC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010B2")]
		[Address(RVA = "0x146BE60", Offset = "0x146BE60", VA = "0x146BE60")]
		public JsonSerializerInternalWriter(JsonSerializer serializer)
		{
		}

		[Token(Token = "0x60010B3")]
		[Address(RVA = "0x146BE64", Offset = "0x146BE64", VA = "0x146BE64")]
		public void Serialize(JsonWriter jsonWriter, object value)
		{
		}

		[Token(Token = "0x60010B4")]
		[Address(RVA = "0x146C690", Offset = "0x146C690", VA = "0x146C690")]
		private JsonSerializerProxy GetInternalSerializer()
		{
			return null;
		}

		[Token(Token = "0x60010B5")]
		[Address(RVA = "0x146BF20", Offset = "0x146BF20", VA = "0x146BF20")]
		private JsonContract GetContractSafe(object value)
		{
			return null;
		}

		[Token(Token = "0x60010B6")]
		[Address(RVA = "0x146C700", Offset = "0x146C700", VA = "0x146C700")]
		private void SerializePrimitive(JsonWriter writer, object value, JsonPrimitiveContract contract, JsonProperty member, JsonContract collectionValueContract)
		{
		}

		[Token(Token = "0x60010B7")]
		[Address(RVA = "0x146C030", Offset = "0x146C030", VA = "0x146C030")]
		private void SerializeValue(JsonWriter writer, object value, JsonContract valueContract, JsonProperty member, JsonContract collectionValueContract)
		{
		}

		[Token(Token = "0x60010B8")]
		[Address(RVA = "0x146F3D4", Offset = "0x146F3D4", VA = "0x146F3D4")]
		private bool ShouldWriteReference(object value, JsonProperty property, JsonContract contract)
		{
			return default(bool);
		}

		[Token(Token = "0x60010B9")]
		[Address(RVA = "0x146F618", Offset = "0x146F618", VA = "0x146F618")]
		private void WriteMemberInfoProperty(JsonWriter writer, object memberValue, JsonProperty property, JsonContract contract)
		{
		}

		[Token(Token = "0x60010BA")]
		[Address(RVA = "0x146FAA8", Offset = "0x146FAA8", VA = "0x146FAA8")]
		private bool CheckForCircularReference(object value, ReferenceLoopHandling? referenceLoopHandling, JsonContract contract)
		{
			return default(bool);
		}

		[Token(Token = "0x60010BB")]
		[Address(RVA = "0x146F91C", Offset = "0x146F91C", VA = "0x146F91C")]
		private void WriteReference(JsonWriter writer, object value)
		{
		}

		[Token(Token = "0x60010BC")]
		[Address(RVA = "0x146FE20", Offset = "0x146FE20", VA = "0x146FE20")]
		internal static bool TryConvertToString(object value, Type type, out string s)
		{
			return default(bool);
		}

		[Token(Token = "0x60010BD")]
		[Address(RVA = "0x146CE0C", Offset = "0x146CE0C", VA = "0x146CE0C")]
		private void SerializeString(JsonWriter writer, object value, JsonStringContract contract)
		{
		}

		[Token(Token = "0x60010BE")]
		[Address(RVA = "0x146CF34", Offset = "0x146CF34", VA = "0x146CF34")]
		private void SerializeObject(JsonWriter writer, object value, JsonObjectContract contract, JsonProperty member, JsonContract collectionValueContract)
		{
		}

		[Token(Token = "0x60010BF")]
		[Address(RVA = "0x146CBAC", Offset = "0x146CBAC", VA = "0x146CBAC")]
		private void WriteTypeProperty(JsonWriter writer, Type type)
		{
		}

		[Token(Token = "0x60010C0")]
		[Address(RVA = "0x146F910", Offset = "0x146F910", VA = "0x146F910")]
		private bool HasFlag(DefaultValueHandling value, DefaultValueHandling flag)
		{
			return default(bool);
		}

		[Token(Token = "0x60010C1")]
		[Address(RVA = "0x146F60C", Offset = "0x146F60C", VA = "0x146F60C")]
		private bool HasFlag(PreserveReferencesHandling value, PreserveReferencesHandling flag)
		{
			return default(bool);
		}

		[Token(Token = "0x60010C2")]
		[Address(RVA = "0x1470168", Offset = "0x1470168", VA = "0x1470168")]
		private bool HasFlag(TypeNameHandling value, TypeNameHandling flag)
		{
			return default(bool);
		}

		[Token(Token = "0x60010C3")]
		[Address(RVA = "0x146CC90", Offset = "0x146CC90", VA = "0x146CC90")]
		private void SerializeConvertable(JsonWriter writer, JsonConverter converter, object value, JsonContract contract)
		{
		}

		[Token(Token = "0x60010C4")]
		[Address(RVA = "0x146E1E0", Offset = "0x146E1E0", VA = "0x146E1E0")]
		private void SerializeList(JsonWriter writer, IWrappedCollection values, JsonArrayContract contract, JsonProperty member, JsonContract collectionValueContract)
		{
		}

		[Token(Token = "0x60010C5")]
		[Address(RVA = "0x146EE10", Offset = "0x146EE10", VA = "0x146EE10")]
		private void SerializeMultidimensionalArray(JsonWriter writer, Array values, JsonArrayContract contract, JsonProperty member, JsonContract collectionContract)
		{
		}

		[Token(Token = "0x60010C6")]
		[Address(RVA = "0x147032C", Offset = "0x147032C", VA = "0x147032C")]
		private void SerializeMultidimensionalArray(JsonWriter writer, Array values, JsonArrayContract contract, JsonProperty member, int initialDepth, int[] indices)
		{
		}

		[Token(Token = "0x60010C7")]
		[Address(RVA = "0x14706C4", Offset = "0x14706C4", VA = "0x14706C4")]
		private string GetReference(JsonWriter writer, object value)
		{
			return null;
		}

		[Token(Token = "0x60010C8")]
		[Address(RVA = "0x1470174", Offset = "0x1470174", VA = "0x1470174")]
		private bool WriteStartArray(JsonWriter writer, object values, JsonArrayContract contract, JsonProperty member, JsonContract containerContract)
		{
			return default(bool);
		}

		[Token(Token = "0x60010C9")]
		[Address(RVA = "0x146F030", Offset = "0x146F030", VA = "0x146F030")]
		[SecuritySafeCritical]
		private void SerializeISerializable(JsonWriter writer, ISerializable value, JsonISerializableContract contract)
		{
		}

		[Token(Token = "0x60010CA")]
		[Address(RVA = "0x146C8C8", Offset = "0x146C8C8", VA = "0x146C8C8")]
		private bool ShouldWriteType(TypeNameHandling typeNameHandlingFlag, JsonContract contract, JsonProperty member, JsonContract collectionValueContract)
		{
			return default(bool);
		}

		[Token(Token = "0x60010CB")]
		[Address(RVA = "0x146D664", Offset = "0x146D664", VA = "0x146D664")]
		private void SerializeDictionary(JsonWriter writer, IWrappedDictionary values, JsonDictionaryContract contract, JsonProperty member, JsonContract collectionValueContract)
		{
		}

		[Token(Token = "0x60010CC")]
		[Address(RVA = "0x1470914", Offset = "0x1470914", VA = "0x1470914")]
		private string GetPropertyName(DictionaryEntry entry)
		{
			return null;
		}

		[Token(Token = "0x60010CD")]
		[Address(RVA = "0x1470100", Offset = "0x1470100", VA = "0x1470100")]
		private void HandleError(JsonWriter writer, int initialDepth)
		{
		}

		[Token(Token = "0x60010CE")]
		[Address(RVA = "0x146FFF8", Offset = "0x146FFF8", VA = "0x146FFF8")]
		private bool ShouldSerialize(JsonProperty property, object target)
		{
			return default(bool);
		}

		[Token(Token = "0x60010CF")]
		[Address(RVA = "0x147007C", Offset = "0x147007C", VA = "0x147007C")]
		private bool IsSpecified(JsonProperty property, object target)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000247")]
	internal class JsonSerializerProxy : JsonSerializer
	{
		[Token(Token = "0x4000C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly JsonSerializerInternalReader _serializerReader;

		[Token(Token = "0x4000C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly JsonSerializerInternalWriter _serializerWriter;

		[Token(Token = "0x4000C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly JsonSerializer _serializer;

		[Token(Token = "0x1700015E")]
		public override IReferenceResolver ReferenceResolver
		{
			[Token(Token = "0x60010D2")]
			[Address(RVA = "0x16B49E8", Offset = "0x16B49E8", VA = "0x16B49E8", Slot = "6")]
			get
			{
				return null;
			}
			[Token(Token = "0x60010D3")]
			[Address(RVA = "0x16B4A1C", Offset = "0x16B4A1C", VA = "0x16B4A1C", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x1700015F")]
		public override JsonConverterCollection Converters
		{
			[Token(Token = "0x60010D4")]
			[Address(RVA = "0x16B4A58", Offset = "0x16B4A58", VA = "0x16B4A58", Slot = "28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000160")]
		public override DefaultValueHandling DefaultValueHandling
		{
			[Token(Token = "0x60010D5")]
			[Address(RVA = "0x16B4A90", Offset = "0x16B4A90", VA = "0x16B4A90", Slot = "22")]
			get
			{
				return default(DefaultValueHandling);
			}
			[Token(Token = "0x60010D6")]
			[Address(RVA = "0x16B4AC8", Offset = "0x16B4AC8", VA = "0x16B4AC8", Slot = "23")]
			set
			{
			}
		}

		[Token(Token = "0x17000161")]
		public override IContractResolver ContractResolver
		{
			[Token(Token = "0x60010D7")]
			[Address(RVA = "0x16B4B08", Offset = "0x16B4B08", VA = "0x16B4B08", Slot = "29")]
			get
			{
				return null;
			}
			[Token(Token = "0x60010D8")]
			[Address(RVA = "0x16B4B40", Offset = "0x16B4B40", VA = "0x16B4B40", Slot = "30")]
			set
			{
			}
		}

		[Token(Token = "0x17000162")]
		public override MissingMemberHandling MissingMemberHandling
		{
			[Token(Token = "0x60010D9")]
			[Address(RVA = "0x16B4B80", Offset = "0x16B4B80", VA = "0x16B4B80", Slot = "18")]
			get
			{
				return default(MissingMemberHandling);
			}
			[Token(Token = "0x60010DA")]
			[Address(RVA = "0x16B4BB8", Offset = "0x16B4BB8", VA = "0x16B4BB8", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x17000163")]
		public override NullValueHandling NullValueHandling
		{
			[Token(Token = "0x60010DB")]
			[Address(RVA = "0x16B4BF8", Offset = "0x16B4BF8", VA = "0x16B4BF8", Slot = "20")]
			get
			{
				return default(NullValueHandling);
			}
			[Token(Token = "0x60010DC")]
			[Address(RVA = "0x16B4C30", Offset = "0x16B4C30", VA = "0x16B4C30", Slot = "21")]
			set
			{
			}
		}

		[Token(Token = "0x17000164")]
		public override ObjectCreationHandling ObjectCreationHandling
		{
			[Token(Token = "0x60010DD")]
			[Address(RVA = "0x16B4C70", Offset = "0x16B4C70", VA = "0x16B4C70", Slot = "24")]
			get
			{
				return default(ObjectCreationHandling);
			}
			[Token(Token = "0x60010DE")]
			[Address(RVA = "0x16B4CA8", Offset = "0x16B4CA8", VA = "0x16B4CA8", Slot = "25")]
			set
			{
			}
		}

		[Token(Token = "0x17000165")]
		public override ReferenceLoopHandling ReferenceLoopHandling
		{
			[Token(Token = "0x60010DF")]
			[Address(RVA = "0x16B4CE8", Offset = "0x16B4CE8", VA = "0x16B4CE8", Slot = "16")]
			get
			{
				return default(ReferenceLoopHandling);
			}
			[Token(Token = "0x60010E0")]
			[Address(RVA = "0x16B4D20", Offset = "0x16B4D20", VA = "0x16B4D20", Slot = "17")]
			set
			{
			}
		}

		[Token(Token = "0x17000166")]
		public override PreserveReferencesHandling PreserveReferencesHandling
		{
			[Token(Token = "0x60010E1")]
			[Address(RVA = "0x16B4D60", Offset = "0x16B4D60", VA = "0x16B4D60", Slot = "14")]
			get
			{
				return default(PreserveReferencesHandling);
			}
			[Token(Token = "0x60010E2")]
			[Address(RVA = "0x16B4D98", Offset = "0x16B4D98", VA = "0x16B4D98", Slot = "15")]
			set
			{
			}
		}

		[Token(Token = "0x17000167")]
		public override TypeNameHandling TypeNameHandling
		{
			[Token(Token = "0x60010E3")]
			[Address(RVA = "0x16B4DD8", Offset = "0x16B4DD8", VA = "0x16B4DD8", Slot = "10")]
			get
			{
				return default(TypeNameHandling);
			}
			[Token(Token = "0x60010E4")]
			[Address(RVA = "0x16B4E0C", Offset = "0x16B4E0C", VA = "0x16B4E0C", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x17000168")]
		public override FormatterAssemblyStyle TypeNameAssemblyFormat
		{
			[Token(Token = "0x60010E5")]
			[Address(RVA = "0x16B4E48", Offset = "0x16B4E48", VA = "0x16B4E48", Slot = "12")]
			get
			{
				return default(FormatterAssemblyStyle);
			}
			[Token(Token = "0x60010E6")]
			[Address(RVA = "0x16B4E7C", Offset = "0x16B4E7C", VA = "0x16B4E7C", Slot = "13")]
			set
			{
			}
		}

		[Token(Token = "0x17000169")]
		public override ConstructorHandling ConstructorHandling
		{
			[Token(Token = "0x60010E7")]
			[Address(RVA = "0x16B4EB8", Offset = "0x16B4EB8", VA = "0x16B4EB8", Slot = "26")]
			get
			{
				return default(ConstructorHandling);
			}
			[Token(Token = "0x60010E8")]
			[Address(RVA = "0x16B4EF0", Offset = "0x16B4EF0", VA = "0x16B4EF0", Slot = "27")]
			set
			{
			}
		}

		[Token(Token = "0x1700016A")]
		public override SerializationBinder Binder
		{
			[Token(Token = "0x60010E9")]
			[Address(RVA = "0x16B4F30", Offset = "0x16B4F30", VA = "0x16B4F30", Slot = "8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60010EA")]
			[Address(RVA = "0x16B4F64", Offset = "0x16B4F64", VA = "0x16B4F64", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x1700016B")]
		public override StreamingContext Context
		{
			[Token(Token = "0x60010EB")]
			[Address(RVA = "0x16B4FA0", Offset = "0x16B4FA0", VA = "0x16B4FA0", Slot = "31")]
			get
			{
				return default(StreamingContext);
			}
			[Token(Token = "0x60010EC")]
			[Address(RVA = "0x16B4FD8", Offset = "0x16B4FD8", VA = "0x16B4FD8", Slot = "32")]
			set
			{
			}
		}

		[Token(Token = "0x14000008")]
		public override event EventHandler<ErrorEventArgs> Error
		{
			[Token(Token = "0x60010D0")]
			[Address(RVA = "0x16B4970", Offset = "0x16B4970", VA = "0x16B4970", Slot = "4")]
			add
			{
			}
			[Token(Token = "0x60010D1")]
			[Address(RVA = "0x16B49AC", Offset = "0x16B49AC", VA = "0x16B49AC", Slot = "5")]
			remove
			{
			}
		}

		[Token(Token = "0x60010ED")]
		[Address(RVA = "0x16B5028", Offset = "0x16B5028", VA = "0x16B5028")]
		internal JsonSerializerInternalBase GetInternalSerializer()
		{
			return null;
		}

		[Token(Token = "0x60010EE")]
		[Address(RVA = "0x16B5040", Offset = "0x16B5040", VA = "0x16B5040")]
		public JsonSerializerProxy(JsonSerializerInternalReader serializerReader)
		{
		}

		[Token(Token = "0x60010EF")]
		[Address(RVA = "0x16B5158", Offset = "0x16B5158", VA = "0x16B5158")]
		public JsonSerializerProxy(JsonSerializerInternalWriter serializerWriter)
		{
		}

		[Token(Token = "0x60010F0")]
		[Address(RVA = "0x16B51E4", Offset = "0x16B51E4", VA = "0x16B51E4", Slot = "34")]
		internal override object DeserializeInternal(JsonReader reader, Type objectType)
		{
			return null;
		}

		[Token(Token = "0x60010F1")]
		[Address(RVA = "0x16B5254", Offset = "0x16B5254", VA = "0x16B5254", Slot = "33")]
		internal override void PopulateInternal(JsonReader reader, object target)
		{
		}

		[Token(Token = "0x60010F2")]
		[Address(RVA = "0x16B52C4", Offset = "0x16B52C4", VA = "0x16B52C4", Slot = "35")]
		internal override void SerializeInternal(JsonWriter jsonWriter, object value)
		{
		}
	}
	[Token(Token = "0x2000248")]
	public class JsonStringContract : JsonContract
	{
		[Token(Token = "0x60010F3")]
		[Address(RVA = "0x16B5334", Offset = "0x16B5334", VA = "0x16B5334")]
		public JsonStringContract(Type underlyingType)
		{
		}
	}
	[Token(Token = "0x2000249")]
	internal interface IMetadataTypeAttribute
	{
		[Token(Token = "0x1700016C")]
		Type MetadataClassType
		{
			[Token(Token = "0x60010F4")]
			get;
		}
	}
	[Token(Token = "0x200024A")]
	internal static class JsonTypeReflector
	{
		[Token(Token = "0x4000C2F")]
		public const string IdPropertyName = "$id";

		[Token(Token = "0x4000C30")]
		public const string RefPropertyName = "$ref";

		[Token(Token = "0x4000C31")]
		public const string TypePropertyName = "$type";

		[Token(Token = "0x4000C32")]
		public const string ValuePropertyName = "$value";

		[Token(Token = "0x4000C33")]
		public const string ArrayValuesPropertyName = "$values";

		[Token(Token = "0x4000C34")]
		public const string ShouldSerializePrefix = "ShouldSerialize";

		[Token(Token = "0x4000C35")]
		public const string SpecifiedPostfix = "Specified";

		[Token(Token = "0x4000C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly ThreadSafeStore<ICustomAttributeProvider, Type> JsonConverterTypeCache;

		[Token(Token = "0x4000C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly ThreadSafeStore<Type, Type> AssociatedMetadataTypesCache;

		[Token(Token = "0x4000C38")]
		private const string MetadataTypeAttributeTypeName = "System.ComponentModel.DataAnnotations.MetadataTypeAttribute, System.ComponentModel.DataAnnotations, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35";

		[Token(Token = "0x4000C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Type _cachedMetadataTypeAttributeType;

		[Token(Token = "0x4000C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static bool? _dynamicCodeGeneration;

		[Token(Token = "0x1700016D")]
		public static bool DynamicCodeGeneration
		{
			[Token(Token = "0x6001105")]
			[Address(RVA = "0x16B64B0", Offset = "0x16B64B0", VA = "0x16B64B0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700016E")]
		public static ReflectionDelegateFactory ReflectionDelegateFactory
		{
			[Token(Token = "0x6001106")]
			[Address(RVA = "0x16B65AC", Offset = "0x16B65AC", VA = "0x16B65AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010F5")]
		[Address(RVA = "0x16B533C", Offset = "0x16B533C", VA = "0x16B533C")]
		public static JsonContainerAttribute GetJsonContainerAttribute(Type type)
		{
			return null;
		}

		[Token(Token = "0x60010F6")]
		[Address(RVA = "0x16B53AC", Offset = "0x16B53AC", VA = "0x16B53AC")]
		public static JsonObjectAttribute GetJsonObjectAttribute(Type type)
		{
			return null;
		}

		[Token(Token = "0x60010F7")]
		[Address(RVA = "0x16B5430", Offset = "0x16B5430", VA = "0x16B5430")]
		public static JsonArrayAttribute GetJsonArrayAttribute(Type type)
		{
			return null;
		}

		[Token(Token = "0x60010F8")]
		[Address(RVA = "0x16B54B4", Offset = "0x16B54B4", VA = "0x16B54B4")]
		public static DataContractAttribute GetDataContractAttribute(Type type)
		{
			return null;
		}

		[Token(Token = "0x60010F9")]
		[Address(RVA = "0x16B55A0", Offset = "0x16B55A0", VA = "0x16B55A0")]
		public static DataMemberAttribute GetDataMemberAttribute(MemberInfo memberInfo)
		{
			return null;
		}

		[Token(Token = "0x60010FA")]
		[Address(RVA = "0x16B5C20", Offset = "0x16B5C20", VA = "0x16B5C20")]
		public static MemberSerialization GetObjectMemberSerialization(Type objectType)
		{
			return default(MemberSerialization);
		}

		[Token(Token = "0x60010FB")]
		[Address(RVA = "0x16B5CC4", Offset = "0x16B5CC4", VA = "0x16B5CC4")]
		private static Type GetJsonConverterType(ICustomAttributeProvider attributeProvider)
		{
			return null;
		}

		[Token(Token = "0x60010FC")]
		[Address(RVA = "0x16B5D50", Offset = "0x16B5D50", VA = "0x16B5D50")]
		private static Type GetJsonConverterTypeFromAttribute(ICustomAttributeProvider attributeProvider)
		{
			return null;
		}

		[Token(Token = "0x60010FD")]
		[Address(RVA = "0x16B5DD8", Offset = "0x16B5DD8", VA = "0x16B5DD8")]
		public static JsonConverter GetJsonConverter(ICustomAttributeProvider attributeProvider, Type targetConvertedType)
		{
			return null;
		}

		[Token(Token = "0x60010FE")]
		[Address(RVA = "0x16B60B0", Offset = "0x16B60B0", VA = "0x16B60B0")]
		public static TypeConverter GetTypeConverter(Type type)
		{
			return null;
		}

		[Token(Token = "0x60010FF")]
		[Address(RVA = "0x16B6118", Offset = "0x16B6118", VA = "0x16B6118")]
		private static Type GetAssociatedMetadataType(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001100")]
		[Address(RVA = "0x16B61A4", Offset = "0x16B61A4", VA = "0x16B61A4")]
		private static Type GetAssociateMetadataTypeFromAttribute(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001101")]
		[Address(RVA = "0x16B6320", Offset = "0x16B6320", VA = "0x16B6320")]
		private static Type GetMetadataTypeAttributeType()
		{
			return null;
		}

		[Token(Token = "0x6001102")]
		private static T GetAttribute<T>(Type type) where T : Attribute
		{
			return null;
		}

		[Token(Token = "0x6001103")]
		private static T GetAttribute<T>(MemberInfo memberInfo) where T : Attribute
		{
			return null;
		}

		[Token(Token = "0x6001104")]
		public static T GetAttribute<T>(ICustomAttributeProvider attributeProvider) where T : Attribute
		{
			return null;
		}
	}
	[Token(Token = "0x200024B")]
	internal class LateBoundMetadataTypeAttribute : IMetadataTypeAttribute
	{
		[Token(Token = "0x4000C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static PropertyInfo _metadataClassTypeProperty;

		[Token(Token = "0x4000C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly object _attribute;

		[Token(Token = "0x1700016F")]
		public Type MetadataClassType
		{
			[Token(Token = "0x6001109")]
			[Address(RVA = "0x16B678C", Offset = "0x16B678C", VA = "0x16B678C", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001108")]
		[Address(RVA = "0x16B6484", Offset = "0x16B6484", VA = "0x16B6484")]
		public LateBoundMetadataTypeAttribute(object attribute)
		{
		}
	}
	[Token(Token = "0x200024C")]
	public delegate object ObjectConstructor<T>(params object[] args);
	[Token(Token = "0x200024D")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x9A6300", Offset = "0x9A6300")]
	public sealed class OnErrorAttribute : Attribute
	{
		[Token(Token = "0x600110E")]
		[Address(RVA = "0x16B6E1C", Offset = "0x16B6E1C", VA = "0x16B6E1C")]
		public OnErrorAttribute()
		{
		}
	}
	[Token(Token = "0x200024E")]
	public class ReflectionValueProvider : IValueProvider
	{
		[Token(Token = "0x4000C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly MemberInfo _memberInfo;

		[Token(Token = "0x600110F")]
		[Address(RVA = "0x16B6E24", Offset = "0x16B6E24", VA = "0x16B6E24")]
		public ReflectionValueProvider(MemberInfo memberInfo)
		{
		}

		[Token(Token = "0x6001110")]
		[Address(RVA = "0x16B6E94", Offset = "0x16B6E94", VA = "0x16B6E94", Slot = "4")]
		public void SetValue(object target, object value)
		{
		}

		[Token(Token = "0x6001111")]
		[Address(RVA = "0x16B745C", Offset = "0x16B745C", VA = "0x16B745C", Slot = "5")]
		public object GetValue(object target)
		{
			return null;
		}
	}
}
namespace Newtonsoft.Json.Schema
{
	[Token(Token = "0x200024F")]
	public class JsonSchema
	{
		[Token(Token = "0x4000C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8130", Offset = "0x9A8130")]
		private string <Id>k__BackingField;

		[Token(Token = "0x4000C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8140", Offset = "0x9A8140")]
		private string <Title>k__BackingField;

		[Token(Token = "0x4000C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8150", Offset = "0x9A8150")]
		private bool? <Required>k__BackingField;

		[Token(Token = "0x4000C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8160", Offset = "0x9A8160")]
		private bool? <ReadOnly>k__BackingField;

		[Token(Token = "0x4000C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8170", Offset = "0x9A8170")]
		private bool? <Hidden>k__BackingField;

		[Token(Token = "0x4000C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8180", Offset = "0x9A8180")]
		private bool? <Transient>k__BackingField;

		[Token(Token = "0x4000C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8190", Offset = "0x9A8190")]
		private string <Description>k__BackingField;

		[Token(Token = "0x4000C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A81A0", Offset = "0x9A81A0")]
		private JsonSchemaType? <Type>k__BackingField;

		[Token(Token = "0x4000C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A81B0", Offset = "0x9A81B0")]
		private string <Pattern>k__BackingField;

		[Token(Token = "0x4000C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A81C0", Offset = "0x9A81C0")]
		private int? <MinimumLength>k__BackingField;

		[Token(Token = "0x4000C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A81D0", Offset = "0x9A81D0")]
		private int? <MaximumLength>k__BackingField;

		[Token(Token = "0x4000C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A81E0", Offset = "0x9A81E0")]
		private double? <DivisibleBy>k__BackingField;

		[Token(Token = "0x4000C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A81F0", Offset = "0x9A81F0")]
		private double? <Minimum>k__BackingField;

		[Token(Token = "0x4000C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8200", Offset = "0x9A8200")]
		private double? <Maximum>k__BackingField;

		[Token(Token = "0x4000C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8210", Offset = "0x9A8210")]
		private bool? <ExclusiveMinimum>k__BackingField;

		[Token(Token = "0x4000C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x82")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8220", Offset = "0x9A8220")]
		private bool? <ExclusiveMaximum>k__BackingField;

		[Token(Token = "0x4000C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8230", Offset = "0x9A8230")]
		private int? <MinimumItems>k__BackingField;

		[Token(Token = "0x4000C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8240", Offset = "0x9A8240")]
		private int? <MaximumItems>k__BackingField;

		[Token(Token = "0x4000C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8250", Offset = "0x9A8250")]
		private IList<JsonSchema> <Items>k__BackingField;

		[Token(Token = "0x4000C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8260", Offset = "0x9A8260")]
		private IDictionary<string, JsonSchema> <Properties>k__BackingField;

		[Token(Token = "0x4000C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8270", Offset = "0x9A8270")]
		private JsonSchema <AdditionalProperties>k__BackingField;

		[Token(Token = "0x4000C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8280", Offset = "0x9A8280")]
		private IDictionary<string, JsonSchema> <PatternProperties>k__BackingField;

		[Token(Token = "0x4000C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8290", Offset = "0x9A8290")]
		private bool <AllowAdditionalProperties>k__BackingField;

		[Token(Token = "0x4000C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A82A0", Offset = "0x9A82A0")]
		private string <Requires>k__BackingField;

		[Token(Token = "0x4000C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A82B0", Offset = "0x9A82B0")]
		private IList<string> <Identity>k__BackingField;

		[Token(Token = "0x4000C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A82C0", Offset = "0x9A82C0")]
		private IList<JToken> <Enum>k__BackingField;

		[Token(Token = "0x4000C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A82D0", Offset = "0x9A82D0")]
		private IDictionary<JToken, string> <Options>k__BackingField;

		[Token(Token = "0x4000C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A82E0", Offset = "0x9A82E0")]
		private JsonSchemaType? <Disallow>k__BackingField;

		[Token(Token = "0x4000C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A82F0", Offset = "0x9A82F0")]
		private JToken <Default>k__BackingField;

		[Token(Token = "0x4000C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8300", Offset = "0x9A8300")]
		private JsonSchema <Extends>k__BackingField;

		[Token(Token = "0x4000C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8310", Offset = "0x9A8310")]
		private string <Format>k__BackingField;

		[Token(Token = "0x4000C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private readonly string _internalId;

		[Token(Token = "0x17000170")]
		public string Id
		{
			[Token(Token = "0x6001112")]
			[Address(RVA = "0x1866D1C", Offset = "0x1866D1C", VA = "0x1866D1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9C28", Offset = "0x9A9C28")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001113")]
			[Address(RVA = "0x1866D24", Offset = "0x1866D24", VA = "0x1866D24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9C38", Offset = "0x9A9C38")]
			set
			{
			}
		}

		[Token(Token = "0x17000171")]
		public string Title
		{
			[Token(Token = "0x6001114")]
			[Address(RVA = "0x1866D2C", Offset = "0x1866D2C", VA = "0x1866D2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9C48", Offset = "0x9A9C48")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001115")]
			[Address(RVA = "0x1866D34", Offset = "0x1866D34", VA = "0x1866D34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9C58", Offset = "0x9A9C58")]
			set
			{
			}
		}

		[Token(Token = "0x17000172")]
		public bool? Required
		{
			[Token(Token = "0x6001116")]
			[Address(RVA = "0x1866D3C", Offset = "0x1866D3C", VA = "0x1866D3C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9C68", Offset = "0x9A9C68")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001117")]
			[Address(RVA = "0x1866D44", Offset = "0x1866D44", VA = "0x1866D44")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9C78", Offset = "0x9A9C78")]
			set
			{
			}
		}

		[Token(Token = "0x17000173")]
		public bool? ReadOnly
		{
			[Token(Token = "0x6001118")]
			[Address(RVA = "0x1866D4C", Offset = "0x1866D4C", VA = "0x1866D4C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9C88", Offset = "0x9A9C88")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001119")]
			[Address(RVA = "0x1866D54", Offset = "0x1866D54", VA = "0x1866D54")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9C98", Offset = "0x9A9C98")]
			set
			{
			}
		}

		[Token(Token = "0x17000174")]
		public bool? Hidden
		{
			[Token(Token = "0x600111A")]
			[Address(RVA = "0x1866D5C", Offset = "0x1866D5C", VA = "0x1866D5C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9CA8", Offset = "0x9A9CA8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600111B")]
			[Address(RVA = "0x1866D64", Offset = "0x1866D64", VA = "0x1866D64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9CB8", Offset = "0x9A9CB8")]
			set
			{
			}
		}

		[Token(Token = "0x17000175")]
		public bool? Transient
		{
			[Token(Token = "0x600111C")]
			[Address(RVA = "0x1866D6C", Offset = "0x1866D6C", VA = "0x1866D6C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9CC8", Offset = "0x9A9CC8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600111D")]
			[Address(RVA = "0x1866D74", Offset = "0x1866D74", VA = "0x1866D74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9CD8", Offset = "0x9A9CD8")]
			set
			{
			}
		}

		[Token(Token = "0x17000176")]
		public string Description
		{
			[Token(Token = "0x600111E")]
			[Address(RVA = "0x1866D7C", Offset = "0x1866D7C", VA = "0x1866D7C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9CE8", Offset = "0x9A9CE8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600111F")]
			[Address(RVA = "0x1866D84", Offset = "0x1866D84", VA = "0x1866D84")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9CF8", Offset = "0x9A9CF8")]
			set
			{
			}
		}

		[Token(Token = "0x17000177")]
		public JsonSchemaType? Type
		{
			[Token(Token = "0x6001120")]
			[Address(RVA = "0x1866D8C", Offset = "0x1866D8C", VA = "0x1866D8C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9D08", Offset = "0x9A9D08")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001121")]
			[Address(RVA = "0x1866D94", Offset = "0x1866D94", VA = "0x1866D94")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9D18", Offset = "0x9A9D18")]
			set
			{
			}
		}

		[Token(Token = "0x17000178")]
		public string Pattern
		{
			[Token(Token = "0x6001122")]
			[Address(RVA = "0x1866D9C", Offset = "0x1866D9C", VA = "0x1866D9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9D28", Offset = "0x9A9D28")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001123")]
			[Address(RVA = "0x1866DA4", Offset = "0x1866DA4", VA = "0x1866DA4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9D38", Offset = "0x9A9D38")]
			set
			{
			}
		}

		[Token(Token = "0x17000179")]
		public int? MinimumLength
		{
			[Token(Token = "0x6001124")]
			[Address(RVA = "0x1866DAC", Offset = "0x1866DAC", VA = "0x1866DAC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9D48", Offset = "0x9A9D48")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001125")]
			[Address(RVA = "0x1866DB4", Offset = "0x1866DB4", VA = "0x1866DB4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9D58", Offset = "0x9A9D58")]
			set
			{
			}
		}

		[Token(Token = "0x1700017A")]
		public int? MaximumLength
		{
			[Token(Token = "0x6001126")]
			[Address(RVA = "0x1866DBC", Offset = "0x1866DBC", VA = "0x1866DBC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9D68", Offset = "0x9A9D68")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001127")]
			[Address(RVA = "0x1866DC4", Offset = "0x1866DC4", VA = "0x1866DC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9D78", Offset = "0x9A9D78")]
			set
			{
			}
		}

		[Token(Token = "0x1700017B")]
		public double? DivisibleBy
		{
			[Token(Token = "0x6001128")]
			[Address(RVA = "0x1866DCC", Offset = "0x1866DCC", VA = "0x1866DCC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9D88", Offset = "0x9A9D88")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001129")]
			[Address(RVA = "0x1866DD8", Offset = "0x1866DD8", VA = "0x1866DD8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9D98", Offset = "0x9A9D98")]
			set
			{
			}
		}

		[Token(Token = "0x1700017C")]
		public double? Minimum
		{
			[Token(Token = "0x600112A")]
			[Address(RVA = "0x1866DE0", Offset = "0x1866DE0", VA = "0x1866DE0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9DA8", Offset = "0x9A9DA8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600112B")]
			[Address(RVA = "0x1866DEC", Offset = "0x1866DEC", VA = "0x1866DEC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9DB8", Offset = "0x9A9DB8")]
			set
			{
			}
		}

		[Token(Token = "0x1700017D")]
		public double? Maximum
		{
			[Token(Token = "0x600112C")]
			[Address(RVA = "0x1866DF4", Offset = "0x1866DF4", VA = "0x1866DF4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9DC8", Offset = "0x9A9DC8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600112D")]
			[Address(RVA = "0x1866E00", Offset = "0x1866E00", VA = "0x1866E00")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9DD8", Offset = "0x9A9DD8")]
			set
			{
			}
		}

		[Token(Token = "0x1700017E")]
		public bool? ExclusiveMinimum
		{
			[Token(Token = "0x600112E")]
			[Address(RVA = "0x1866E08", Offset = "0x1866E08", VA = "0x1866E08")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9DE8", Offset = "0x9A9DE8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600112F")]
			[Address(RVA = "0x1866E10", Offset = "0x1866E10", VA = "0x1866E10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9DF8", Offset = "0x9A9DF8")]
			set
			{
			}
		}

		[Token(Token = "0x1700017F")]
		public bool? ExclusiveMaximum
		{
			[Token(Token = "0x6001130")]
			[Address(RVA = "0x1866E18", Offset = "0x1866E18", VA = "0x1866E18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9E08", Offset = "0x9A9E08")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001131")]
			[Address(RVA = "0x1866E20", Offset = "0x1866E20", VA = "0x1866E20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9E18", Offset = "0x9A9E18")]
			set
			{
			}
		}

		[Token(Token = "0x17000180")]
		public int? MinimumItems
		{
			[Token(Token = "0x6001132")]
			[Address(RVA = "0x1866E28", Offset = "0x1866E28", VA = "0x1866E28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9E28", Offset = "0x9A9E28")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001133")]
			[Address(RVA = "0x1866E30", Offset = "0x1866E30", VA = "0x1866E30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9E38", Offset = "0x9A9E38")]
			set
			{
			}
		}

		[Token(Token = "0x17000181")]
		public int? MaximumItems
		{
			[Token(Token = "0x6001134")]
			[Address(RVA = "0x1866E38", Offset = "0x1866E38", VA = "0x1866E38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9E48", Offset = "0x9A9E48")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001135")]
			[Address(RVA = "0x1866E40", Offset = "0x1866E40", VA = "0x1866E40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9E58", Offset = "0x9A9E58")]
			set
			{
			}
		}

		[Token(Token = "0x17000182")]
		public IList<JsonSchema> Items
		{
			[Token(Token = "0x6001136")]
			[Address(RVA = "0x1866E48", Offset = "0x1866E48", VA = "0x1866E48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9E68", Offset = "0x9A9E68")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001137")]
			[Address(RVA = "0x1866E50", Offset = "0x1866E50", VA = "0x1866E50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9E78", Offset = "0x9A9E78")]
			set
			{
			}
		}

		[Token(Token = "0x17000183")]
		public IDictionary<string, JsonSchema> Properties
		{
			[Token(Token = "0x6001138")]
			[Address(RVA = "0x1866E58", Offset = "0x1866E58", VA = "0x1866E58")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9E88", Offset = "0x9A9E88")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001139")]
			[Address(RVA = "0x1866E60", Offset = "0x1866E60", VA = "0x1866E60")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9E98", Offset = "0x9A9E98")]
			set
			{
			}
		}

		[Token(Token = "0x17000184")]
		public JsonSchema AdditionalProperties
		{
			[Token(Token = "0x600113A")]
			[Address(RVA = "0x1866E68", Offset = "0x1866E68", VA = "0x1866E68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9EA8", Offset = "0x9A9EA8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600113B")]
			[Address(RVA = "0x1866E70", Offset = "0x1866E70", VA = "0x1866E70")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9EB8", Offset = "0x9A9EB8")]
			set
			{
			}
		}

		[Token(Token = "0x17000185")]
		public IDictionary<string, JsonSchema> PatternProperties
		{
			[Token(Token = "0x600113C")]
			[Address(RVA = "0x1866E78", Offset = "0x1866E78", VA = "0x1866E78")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9EC8", Offset = "0x9A9EC8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600113D")]
			[Address(RVA = "0x1866E80", Offset = "0x1866E80", VA = "0x1866E80")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9ED8", Offset = "0x9A9ED8")]
			set
			{
			}
		}

		[Token(Token = "0x17000186")]
		public bool AllowAdditionalProperties
		{
			[Token(Token = "0x600113E")]
			[Address(RVA = "0x1866E88", Offset = "0x1866E88", VA = "0x1866E88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9EE8", Offset = "0x9A9EE8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600113F")]
			[Address(RVA = "0x1866E90", Offset = "0x1866E90", VA = "0x1866E90")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9EF8", Offset = "0x9A9EF8")]
			set
			{
			}
		}

		[Token(Token = "0x17000187")]
		public string Requires
		{
			[Token(Token = "0x6001140")]
			[Address(RVA = "0x1866E9C", Offset = "0x1866E9C", VA = "0x1866E9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9F08", Offset = "0x9A9F08")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001141")]
			[Address(RVA = "0x1866EA4", Offset = "0x1866EA4", VA = "0x1866EA4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9F18", Offset = "0x9A9F18")]
			set
			{
			}
		}

		[Token(Token = "0x17000188")]
		public IList<string> Identity
		{
			[Token(Token = "0x6001142")]
			[Address(RVA = "0x1866EAC", Offset = "0x1866EAC", VA = "0x1866EAC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9F28", Offset = "0x9A9F28")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001143")]
			[Address(RVA = "0x1866EB4", Offset = "0x1866EB4", VA = "0x1866EB4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9F38", Offset = "0x9A9F38")]
			set
			{
			}
		}

		[Token(Token = "0x17000189")]
		public IList<JToken> Enum
		{
			[Token(Token = "0x6001144")]
			[Address(RVA = "0x1866EBC", Offset = "0x1866EBC", VA = "0x1866EBC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9F48", Offset = "0x9A9F48")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001145")]
			[Address(RVA = "0x1866EC4", Offset = "0x1866EC4", VA = "0x1866EC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9F58", Offset = "0x9A9F58")]
			set
			{
			}
		}

		[Token(Token = "0x1700018A")]
		public IDictionary<JToken, string> Options
		{
			[Token(Token = "0x6001146")]
			[Address(RVA = "0x1866ECC", Offset = "0x1866ECC", VA = "0x1866ECC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9F68", Offset = "0x9A9F68")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001147")]
			[Address(RVA = "0x1866ED4", Offset = "0x1866ED4", VA = "0x1866ED4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9F78", Offset = "0x9A9F78")]
			set
			{
			}
		}

		[Token(Token = "0x1700018B")]
		public JsonSchemaType? Disallow
		{
			[Token(Token = "0x6001148")]
			[Address(RVA = "0x1866EDC", Offset = "0x1866EDC", VA = "0x1866EDC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9F88", Offset = "0x9A9F88")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001149")]
			[Address(RVA = "0x1866EE4", Offset = "0x1866EE4", VA = "0x1866EE4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9F98", Offset = "0x9A9F98")]
			set
			{
			}
		}

		[Token(Token = "0x1700018C")]
		public JToken Default
		{
			[Token(Token = "0x600114A")]
			[Address(RVA = "0x1866EEC", Offset = "0x1866EEC", VA = "0x1866EEC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9FA8", Offset = "0x9A9FA8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600114B")]
			[Address(RVA = "0x1866EF4", Offset = "0x1866EF4", VA = "0x1866EF4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9FB8", Offset = "0x9A9FB8")]
			set
			{
			}
		}

		[Token(Token = "0x1700018D")]
		public JsonSchema Extends
		{
			[Token(Token = "0x600114C")]
			[Address(RVA = "0x1866EFC", Offset = "0x1866EFC", VA = "0x1866EFC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9FC8", Offset = "0x9A9FC8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600114D")]
			[Address(RVA = "0x1866F04", Offset = "0x1866F04", VA = "0x1866F04")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9FD8", Offset = "0x9A9FD8")]
			set
			{
			}
		}

		[Token(Token = "0x1700018E")]
		public string Format
		{
			[Token(Token = "0x600114E")]
			[Address(RVA = "0x1866F0C", Offset = "0x1866F0C", VA = "0x1866F0C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9FE8", Offset = "0x9A9FE8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600114F")]
			[Address(RVA = "0x1866F14", Offset = "0x1866F14", VA = "0x1866F14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A9FF8", Offset = "0x9A9FF8")]
			set
			{
			}
		}

		[Token(Token = "0x1700018F")]
		internal string InternalId
		{
			[Token(Token = "0x6001150")]
			[Address(RVA = "0x1866F1C", Offset = "0x1866F1C", VA = "0x1866F1C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001151")]
		[Address(RVA = "0x1866F24", Offset = "0x1866F24", VA = "0x1866F24")]
		public JsonSchema()
		{
		}

		[Token(Token = "0x6001152")]
		[Address(RVA = "0x1866FD0", Offset = "0x1866FD0", VA = "0x1866FD0")]
		public static JsonSchema Read(JsonReader reader)
		{
			return null;
		}

		[Token(Token = "0x6001153")]
		[Address(RVA = "0x1867034", Offset = "0x1867034", VA = "0x1867034")]
		public static JsonSchema Read(JsonReader reader, JsonSchemaResolver resolver)
		{
			return null;
		}

		[Token(Token = "0x6001154")]
		[Address(RVA = "0x18671C8", Offset = "0x18671C8", VA = "0x18671C8")]
		public static JsonSchema Parse(string json)
		{
			return null;
		}

		[Token(Token = "0x6001155")]
		[Address(RVA = "0x186722C", Offset = "0x186722C", VA = "0x186722C")]
		public static JsonSchema Parse(string json, JsonSchemaResolver resolver)
		{
			return null;
		}

		[Token(Token = "0x6001156")]
		[Address(RVA = "0x18672D8", Offset = "0x18672D8", VA = "0x18672D8")]
		public void WriteTo(JsonWriter writer)
		{
		}

		[Token(Token = "0x6001157")]
		[Address(RVA = "0x186734C", Offset = "0x186734C", VA = "0x186734C")]
		public void WriteTo(JsonWriter writer, JsonSchemaResolver resolver)
		{
		}

		[Token(Token = "0x6001158")]
		[Address(RVA = "0x1867408", Offset = "0x1867408", VA = "0x1867408", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000250")]
	internal class JsonSchemaBuilder
	{
		[Token(Token = "0x200032F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A68C4", Offset = "0x9A68C4")]
		private sealed class <>c__DisplayClass23_0
		{
			[Token(Token = "0x4000F1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public JsonSchemaType type;

			[Token(Token = "0x600163D")]
			[Address(RVA = "0x186B17C", Offset = "0x186B17C", VA = "0x186B17C")]
			public <>c__DisplayClass23_0()
			{
			}

			[Token(Token = "0x600163E")]
			[Address(RVA = "0x186B184", Offset = "0x186B184", VA = "0x186B184")]
			internal bool <MapType>b__0(KeyValuePair<string, JsonSchemaType> kv)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private JsonReader _reader;

		[Token(Token = "0x4000C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IList<JsonSchema> _stack;

		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly JsonSchemaResolver _resolver;

		[Token(Token = "0x4000C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private JsonSchema _currentSchema;

		[Token(Token = "0x17000190")]
		private JsonSchema CurrentSchema
		{
			[Token(Token = "0x600115B")]
			[Address(RVA = "0x18677C0", Offset = "0x18677C0", VA = "0x18677C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001159")]
		[Address(RVA = "0x1867500", Offset = "0x1867500", VA = "0x1867500")]
		private void Push(JsonSchema value)
		{
		}

		[Token(Token = "0x600115A")]
		[Address(RVA = "0x186765C", Offset = "0x186765C", VA = "0x186765C")]
		private JsonSchema Pop()
		{
			return null;
		}

		[Token(Token = "0x600115C")]
		[Address(RVA = "0x18670E0", Offset = "0x18670E0", VA = "0x18670E0")]
		public JsonSchemaBuilder(JsonSchemaResolver resolver)
		{
		}

		[Token(Token = "0x600115D")]
		[Address(RVA = "0x1867160", Offset = "0x1867160", VA = "0x1867160")]
		internal JsonSchema Parse(JsonReader reader)
		{
			return null;
		}

		[Token(Token = "0x600115E")]
		[Address(RVA = "0x18677C8", Offset = "0x18677C8", VA = "0x18677C8")]
		private JsonSchema BuildSchema()
		{
			return null;
		}

		[Token(Token = "0x600115F")]
		[Address(RVA = "0x1867DD4", Offset = "0x1867DD4", VA = "0x1867DD4")]
		private void ProcessSchemaProperty(string propertyName)
		{
		}

		[Token(Token = "0x6001160")]
		[Address(RVA = "0x186AE68", Offset = "0x186AE68", VA = "0x186AE68")]
		private void ProcessExtends()
		{
		}

		[Token(Token = "0x6001161")]
		[Address(RVA = "0x186ABBC", Offset = "0x186ABBC", VA = "0x186ABBC")]
		private void ProcessEnum()
		{
		}

		[Token(Token = "0x6001162")]
		[Address(RVA = "0x186A46C", Offset = "0x186A46C", VA = "0x186A46C")]
		private void ProcessOptions()
		{
		}

		[Token(Token = "0x6001163")]
		[Address(RVA = "0x186A434", Offset = "0x186A434", VA = "0x186A434")]
		private void ProcessDefault()
		{
		}

		[Token(Token = "0x6001164")]
		[Address(RVA = "0x1869F88", Offset = "0x1869F88", VA = "0x1869F88")]
		private void ProcessIdentity()
		{
		}

		[Token(Token = "0x6001165")]
		[Address(RVA = "0x1869BA4", Offset = "0x1869BA4", VA = "0x1869BA4")]
		private void ProcessAdditionalProperties()
		{
		}

		[Token(Token = "0x6001166")]
		[Address(RVA = "0x1869C7C", Offset = "0x1869C7C", VA = "0x1869C7C")]
		private void ProcessPatternProperties()
		{
		}

		[Token(Token = "0x6001167")]
		[Address(RVA = "0x1869844", Offset = "0x1869844", VA = "0x1869844")]
		private void ProcessItems()
		{
		}

		[Token(Token = "0x6001168")]
		[Address(RVA = "0x1869404", Offset = "0x1869404", VA = "0x1869404")]
		private void ProcessProperties()
		{
		}

		[Token(Token = "0x6001169")]
		[Address(RVA = "0x1869014", Offset = "0x1869014", VA = "0x1869014")]
		private JsonSchemaType? ProcessType()
		{
			return null;
		}

		[Token(Token = "0x600116A")]
		[Address(RVA = "0x186AE9C", Offset = "0x186AE9C", VA = "0x186AE9C")]
		internal static JsonSchemaType MapType(string type)
		{
			return default(JsonSchemaType);
		}

		[Token(Token = "0x600116B")]
		[Address(RVA = "0x186B068", Offset = "0x186B068", VA = "0x186B068")]
		internal static string MapType(JsonSchemaType type)
		{
			return null;
		}
	}
	[Token(Token = "0x2000251")]
	internal static class JsonSchemaConstants
	{
		[Token(Token = "0x4000C62")]
		public const string TypePropertyName = "type";

		[Token(Token = "0x4000C63")]
		public const string PropertiesPropertyName = "properties";

		[Token(Token = "0x4000C64")]
		public const string ItemsPropertyName = "items";

		[Token(Token = "0x4000C65")]
		public const string RequiredPropertyName = "required";

		[Token(Token = "0x4000C66")]
		public const string PatternPropertiesPropertyName = "patternProperties";

		[Token(Token = "0x4000C67")]
		public const string AdditionalPropertiesPropertyName = "additionalProperties";

		[Token(Token = "0x4000C68")]
		public const string RequiresPropertyName = "requires";

		[Token(Token = "0x4000C69")]
		public const string IdentityPropertyName = "identity";

		[Token(Token = "0x4000C6A")]
		public const string MinimumPropertyName = "minimum";

		[Token(Token = "0x4000C6B")]
		public const string MaximumPropertyName = "maximum";

		[Token(Token = "0x4000C6C")]
		public const string ExclusiveMinimumPropertyName = "exclusiveMinimum";

		[Token(Token = "0x4000C6D")]
		public const string ExclusiveMaximumPropertyName = "exclusiveMaximum";

		[Token(Token = "0x4000C6E")]
		public const string MinimumItemsPropertyName = "minItems";

		[Token(Token = "0x4000C6F")]
		public const string MaximumItemsPropertyName = "maxItems";

		[Token(Token = "0x4000C70")]
		public const string PatternPropertyName = "pattern";

		[Token(Token = "0x4000C71")]
		public const string MaximumLengthPropertyName = "maxLength";

		[Token(Token = "0x4000C72")]
		public const string MinimumLengthPropertyName = "minLength";

		[Token(Token = "0x4000C73")]
		public const string EnumPropertyName = "enum";

		[Token(Token = "0x4000C74")]
		public const string OptionsPropertyName = "options";

		[Token(Token = "0x4000C75")]
		public const string ReadOnlyPropertyName = "readonly";

		[Token(Token = "0x4000C76")]
		public const string TitlePropertyName = "title";

		[Token(Token = "0x4000C77")]
		public const string DescriptionPropertyName = "description";

		[Token(Token = "0x4000C78")]
		public const string FormatPropertyName = "format";

		[Token(Token = "0x4000C79")]
		public const string DefaultPropertyName = "default";

		[Token(Token = "0x4000C7A")]
		public const string TransientPropertyName = "transient";

		[Token(Token = "0x4000C7B")]
		public const string DivisibleByPropertyName = "divisibleBy";

		[Token(Token = "0x4000C7C")]
		public const string HiddenPropertyName = "hidden";

		[Token(Token = "0x4000C7D")]
		public const string DisallowPropertyName = "disallow";

		[Token(Token = "0x4000C7E")]
		public const string ExtendsPropertyName = "extends";

		[Token(Token = "0x4000C7F")]
		public const string IdPropertyName = "id";

		[Token(Token = "0x4000C80")]
		public const string OptionValuePropertyName = "value";

		[Token(Token = "0x4000C81")]
		public const string OptionLabelPropertyName = "label";

		[Token(Token = "0x4000C82")]
		public const string ReferencePropertyName = "$ref";

		[Token(Token = "0x4000C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly IDictionary<string, JsonSchemaType> JsonSchemaTypeMapping;
	}
	[Token(Token = "0x2000252")]
	public class JsonSchemaException : Exception
	{
		[Token(Token = "0x4000C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8320", Offset = "0x9A8320")]
		private int <LineNumber>k__BackingField;

		[Token(Token = "0x4000C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8330", Offset = "0x9A8330")]
		private int <LinePosition>k__BackingField;

		[Token(Token = "0x17000191")]
		public int LineNumber
		{
			[Token(Token = "0x600116D")]
			[Address(RVA = "0x186B42C", Offset = "0x186B42C", VA = "0x186B42C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA008", Offset = "0x9AA008")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600116E")]
			[Address(RVA = "0x186B434", Offset = "0x186B434", VA = "0x186B434")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA018", Offset = "0x9AA018")]
			private set
			{
			}
		}

		[Token(Token = "0x17000192")]
		public int LinePosition
		{
			[Token(Token = "0x600116F")]
			[Address(RVA = "0x186B43C", Offset = "0x186B43C", VA = "0x186B43C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA028", Offset = "0x9AA028")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001170")]
			[Address(RVA = "0x186B444", Offset = "0x186B444", VA = "0x186B444")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA038", Offset = "0x9AA038")]
			private set
			{
			}
		}

		[Token(Token = "0x6001171")]
		[Address(RVA = "0x186B44C", Offset = "0x186B44C", VA = "0x186B44C")]
		public JsonSchemaException()
		{
		}

		[Token(Token = "0x6001172")]
		[Address(RVA = "0x186B4B4", Offset = "0x186B4B4", VA = "0x186B4B4")]
		public JsonSchemaException(string message)
		{
		}

		[Token(Token = "0x6001173")]
		[Address(RVA = "0x186B52C", Offset = "0x186B52C", VA = "0x186B52C")]
		public JsonSchemaException(string message, Exception innerException)
		{
		}

		[Token(Token = "0x6001174")]
		[Address(RVA = "0x186B5AC", Offset = "0x186B5AC", VA = "0x186B5AC")]
		internal JsonSchemaException(string message, Exception innerException, int lineNumber, int linePosition)
		{
		}
	}
	[Token(Token = "0x2000253")]
	public class JsonSchemaGenerator
	{
		[Token(Token = "0x2000330")]
		private class TypeSchema
		{
			[Token(Token = "0x4000F1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A86B8", Offset = "0x9A86B8")]
			private Type <Type>k__BackingField;

			[Token(Token = "0x4000F1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A86C8", Offset = "0x9A86C8")]
			private JsonSchema <Schema>k__BackingField;

			[Token(Token = "0x17000251")]
			public Type Type
			{
				[Token(Token = "0x600163F")]
				[Address(RVA = "0x1455D38", Offset = "0x1455D38", VA = "0x1455D38")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AAEF4", Offset = "0x9AAEF4")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001640")]
				[Address(RVA = "0x1455D40", Offset = "0x1455D40", VA = "0x1455D40")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AAF04", Offset = "0x9AAF04")]
				private set
				{
				}
			}

			[Token(Token = "0x17000252")]
			public JsonSchema Schema
			{
				[Token(Token = "0x6001641")]
				[Address(RVA = "0x1455D48", Offset = "0x1455D48", VA = "0x1455D48")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AAF14", Offset = "0x9AAF14")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001642")]
				[Address(RVA = "0x1455D50", Offset = "0x1455D50", VA = "0x1455D50")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AAF24", Offset = "0x9AAF24")]
				private set
				{
				}
			}

			[Token(Token = "0x6001643")]
			[Address(RVA = "0x1455D58", Offset = "0x1455D58", VA = "0x1455D58")]
			public TypeSchema(Type type, JsonSchema schema)
			{
			}
		}

		[Token(Token = "0x2000331")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A68D4", Offset = "0x9A68D4")]
		private sealed class <>c__DisplayClass23_0
		{
			[Token(Token = "0x4000F1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Type type;

			[Token(Token = "0x6001644")]
			[Address(RVA = "0x1455CA4", Offset = "0x1455CA4", VA = "0x1455CA4")]
			public <>c__DisplayClass23_0()
			{
			}

			[Token(Token = "0x6001645")]
			[Address(RVA = "0x1455CAC", Offset = "0x1455CAC", VA = "0x1455CAC")]
			internal bool <GenerateInternal>b__0(TypeSchema tc)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8340", Offset = "0x9A8340")]
		private UndefinedSchemaIdHandling <UndefinedSchemaIdHandling>k__BackingField;

		[Token(Token = "0x4000C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IContractResolver _contractResolver;

		[Token(Token = "0x4000C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private JsonSchemaResolver _resolver;

		[Token(Token = "0x4000C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private IList<TypeSchema> _stack;

		[Token(Token = "0x4000C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private JsonSchema _currentSchema;

		[Token(Token = "0x17000193")]
		public UndefinedSchemaIdHandling UndefinedSchemaIdHandling
		{
			[Token(Token = "0x6001175")]
			[Address(RVA = "0x186B644", Offset = "0x186B644", VA = "0x186B644")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA048", Offset = "0x9AA048")]
			get
			{
				return default(UndefinedSchemaIdHandling);
			}
			[Token(Token = "0x6001176")]
			[Address(RVA = "0x186B64C", Offset = "0x186B64C", VA = "0x186B64C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA058", Offset = "0x9AA058")]
			set
			{
			}
		}

		[Token(Token = "0x17000194")]
		public IContractResolver ContractResolver
		{
			[Token(Token = "0x6001177")]
			[Address(RVA = "0x186B654", Offset = "0x186B654", VA = "0x186B654")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001178")]
			[Address(RVA = "0x186B6CC", Offset = "0x186B6CC", VA = "0x186B6CC")]
			set
			{
			}
		}

		[Token(Token = "0x17000195")]
		private JsonSchema CurrentSchema
		{
			[Token(Token = "0x6001179")]
			[Address(RVA = "0x186B6D4", Offset = "0x186B6D4", VA = "0x186B6D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600117A")]
		[Address(RVA = "0x186B6DC", Offset = "0x186B6DC", VA = "0x186B6DC")]
		private void Push(TypeSchema typeSchema)
		{
		}

		[Token(Token = "0x600117B")]
		[Address(RVA = "0x186B878", Offset = "0x186B878", VA = "0x186B878")]
		private TypeSchema Pop()
		{
			return null;
		}

		[Token(Token = "0x600117C")]
		[Address(RVA = "0x186BAD8", Offset = "0x186BAD8", VA = "0x186BAD8")]
		public JsonSchema Generate(Type type)
		{
			return null;
		}

		[Token(Token = "0x600117D")]
		[Address(RVA = "0x186BC08", Offset = "0x186BC08", VA = "0x186BC08")]
		public JsonSchema Generate(Type type, JsonSchemaResolver resolver)
		{
			return null;
		}

		[Token(Token = "0x600117E")]
		[Address(RVA = "0x186BC10", Offset = "0x186BC10", VA = "0x186BC10")]
		public JsonSchema Generate(Type type, bool rootSchemaNullable)
		{
			return null;
		}

		[Token(Token = "0x600117F")]
		[Address(RVA = "0x186BB50", Offset = "0x186BB50", VA = "0x186BB50")]
		public JsonSchema Generate(Type type, JsonSchemaResolver resolver, bool rootSchemaNullable)
		{
			return null;
		}

		[Token(Token = "0x6001180")]
		[Address(RVA = "0x186CF48", Offset = "0x186CF48", VA = "0x186CF48")]
		private string GetTitle(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001181")]
		[Address(RVA = "0x186CFEC", Offset = "0x186CFEC", VA = "0x186CFEC")]
		private string GetDescription(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001182")]
		[Address(RVA = "0x186D0B8", Offset = "0x186D0B8", VA = "0x186D0B8")]
		private string GetTypeId(Type type, bool explicitOnly)
		{
			return null;
		}

		[Token(Token = "0x6001183")]
		[Address(RVA = "0x186BC8C", Offset = "0x186BC8C", VA = "0x186BC8C")]
		private JsonSchema GenerateInternal(Type type, Required valueRequired, bool required)
		{
			return null;
		}

		[Token(Token = "0x6001184")]
		[Address(RVA = "0x186D2C8", Offset = "0x186D2C8", VA = "0x186D2C8")]
		private JsonSchemaType AddNullType(JsonSchemaType type, Required valueRequired)
		{
			return default(JsonSchemaType);
		}

		[Token(Token = "0x6001185")]
		[Address(RVA = "0x186DA64", Offset = "0x186DA64", VA = "0x186DA64")]
		private bool HasFlag(DefaultValueHandling value, DefaultValueHandling flag)
		{
			return default(bool);
		}

		[Token(Token = "0x6001186")]
		[Address(RVA = "0x186D4F8", Offset = "0x186D4F8", VA = "0x186D4F8")]
		private void GenerateObjectSchema(Type type, JsonObjectContract contract)
		{
		}

		[Token(Token = "0x6001187")]
		[Address(RVA = "0x186DA34", Offset = "0x186DA34", VA = "0x186DA34")]
		private void GenerateISerializableContract(Type type, JsonISerializableContract contract)
		{
		}

		[Token(Token = "0x6001188")]
		[Address(RVA = "0x186D1D0", Offset = "0x186D1D0", VA = "0x186D1D0")]
		internal static bool HasFlag(JsonSchemaType? value, JsonSchemaType flag)
		{
			return default(bool);
		}

		[Token(Token = "0x6001189")]
		[Address(RVA = "0x186D2D8", Offset = "0x186D2D8", VA = "0x186D2D8")]
		private JsonSchemaType GetJsonSchemaType(Type type, Required valueRequired)
		{
			return default(JsonSchemaType);
		}

		[Token(Token = "0x600118A")]
		[Address(RVA = "0x186DA70", Offset = "0x186DA70", VA = "0x186DA70")]
		public JsonSchemaGenerator()
		{
		}
	}
	[Token(Token = "0x2000254")]
	internal class JsonSchemaModel
	{
		[Token(Token = "0x4000C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8350", Offset = "0x9A8350")]
		private bool <Required>k__BackingField;

		[Token(Token = "0x4000C8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8360", Offset = "0x9A8360")]
		private JsonSchemaType <Type>k__BackingField;

		[Token(Token = "0x4000C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8370", Offset = "0x9A8370")]
		private int? <MinimumLength>k__BackingField;

		[Token(Token = "0x4000C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8380", Offset = "0x9A8380")]
		private int? <MaximumLength>k__BackingField;

		[Token(Token = "0x4000C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8390", Offset = "0x9A8390")]
		private double? <DivisibleBy>k__BackingField;

		[Token(Token = "0x4000C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A83A0", Offset = "0x9A83A0")]
		private double? <Minimum>k__BackingField;

		[Token(Token = "0x4000C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A83B0", Offset = "0x9A83B0")]
		private double? <Maximum>k__BackingField;

		[Token(Token = "0x4000C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A83C0", Offset = "0x9A83C0")]
		private bool <ExclusiveMinimum>k__BackingField;

		[Token(Token = "0x4000C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A83D0", Offset = "0x9A83D0")]
		private bool <ExclusiveMaximum>k__BackingField;

		[Token(Token = "0x4000C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A83E0", Offset = "0x9A83E0")]
		private int? <MinimumItems>k__BackingField;

		[Token(Token = "0x4000C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A83F0", Offset = "0x9A83F0")]
		private int? <MaximumItems>k__BackingField;

		[Token(Token = "0x4000C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8400", Offset = "0x9A8400")]
		private IList<string> <Patterns>k__BackingField;

		[Token(Token = "0x4000C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8410", Offset = "0x9A8410")]
		private IList<JsonSchemaModel> <Items>k__BackingField;

		[Token(Token = "0x4000C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8420", Offset = "0x9A8420")]
		private IDictionary<string, JsonSchemaModel> <Properties>k__BackingField;

		[Token(Token = "0x4000C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8430", Offset = "0x9A8430")]
		private IDictionary<string, JsonSchemaModel> <PatternProperties>k__BackingField;

		[Token(Token = "0x4000C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8440", Offset = "0x9A8440")]
		private JsonSchemaModel <AdditionalProperties>k__BackingField;

		[Token(Token = "0x4000C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8450", Offset = "0x9A8450")]
		private bool <AllowAdditionalProperties>k__BackingField;

		[Token(Token = "0x4000C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8460", Offset = "0x9A8460")]
		private IList<JToken> <Enum>k__BackingField;

		[Token(Token = "0x4000C9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8470", Offset = "0x9A8470")]
		private JsonSchemaType <Disallow>k__BackingField;

		[Token(Token = "0x17000196")]
		public bool Required
		{
			[Token(Token = "0x600118B")]
			[Address(RVA = "0x1455DE8", Offset = "0x1455DE8", VA = "0x1455DE8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA068", Offset = "0x9AA068")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600118C")]
			[Address(RVA = "0x1455DF0", Offset = "0x1455DF0", VA = "0x1455DF0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA078", Offset = "0x9AA078")]
			set
			{
			}
		}

		[Token(Token = "0x17000197")]
		public JsonSchemaType Type
		{
			[Token(Token = "0x600118D")]
			[Address(RVA = "0x1455DFC", Offset = "0x1455DFC", VA = "0x1455DFC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA088", Offset = "0x9AA088")]
			get
			{
				return default(JsonSchemaType);
			}
			[Token(Token = "0x600118E")]
			[Address(RVA = "0x1455E04", Offset = "0x1455E04", VA = "0x1455E04")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA098", Offset = "0x9AA098")]
			set
			{
			}
		}

		[Token(Token = "0x17000198")]
		public int? MinimumLength
		{
			[Token(Token = "0x600118F")]
			[Address(RVA = "0x1455E0C", Offset = "0x1455E0C", VA = "0x1455E0C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA0A8", Offset = "0x9AA0A8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001190")]
			[Address(RVA = "0x1455E14", Offset = "0x1455E14", VA = "0x1455E14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA0B8", Offset = "0x9AA0B8")]
			set
			{
			}
		}

		[Token(Token = "0x17000199")]
		public int? MaximumLength
		{
			[Token(Token = "0x6001191")]
			[Address(RVA = "0x1455E1C", Offset = "0x1455E1C", VA = "0x1455E1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA0C8", Offset = "0x9AA0C8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001192")]
			[Address(RVA = "0x1455E24", Offset = "0x1455E24", VA = "0x1455E24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA0D8", Offset = "0x9AA0D8")]
			set
			{
			}
		}

		[Token(Token = "0x1700019A")]
		public double? DivisibleBy
		{
			[Token(Token = "0x6001193")]
			[Address(RVA = "0x1455E2C", Offset = "0x1455E2C", VA = "0x1455E2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA0E8", Offset = "0x9AA0E8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001194")]
			[Address(RVA = "0x1455E38", Offset = "0x1455E38", VA = "0x1455E38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA0F8", Offset = "0x9AA0F8")]
			set
			{
			}
		}

		[Token(Token = "0x1700019B")]
		public double? Minimum
		{
			[Token(Token = "0x6001195")]
			[Address(RVA = "0x1455E40", Offset = "0x1455E40", VA = "0x1455E40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA108", Offset = "0x9AA108")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001196")]
			[Address(RVA = "0x1455E4C", Offset = "0x1455E4C", VA = "0x1455E4C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA118", Offset = "0x9AA118")]
			set
			{
			}
		}

		[Token(Token = "0x1700019C")]
		public double? Maximum
		{
			[Token(Token = "0x6001197")]
			[Address(RVA = "0x1455E54", Offset = "0x1455E54", VA = "0x1455E54")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA128", Offset = "0x9AA128")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001198")]
			[Address(RVA = "0x1455E60", Offset = "0x1455E60", VA = "0x1455E60")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA138", Offset = "0x9AA138")]
			set
			{
			}
		}

		[Token(Token = "0x1700019D")]
		public bool ExclusiveMinimum
		{
			[Token(Token = "0x6001199")]
			[Address(RVA = "0x1455E68", Offset = "0x1455E68", VA = "0x1455E68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA148", Offset = "0x9AA148")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600119A")]
			[Address(RVA = "0x1455E70", Offset = "0x1455E70", VA = "0x1455E70")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA158", Offset = "0x9AA158")]
			set
			{
			}
		}

		[Token(Token = "0x1700019E")]
		public bool ExclusiveMaximum
		{
			[Token(Token = "0x600119B")]
			[Address(RVA = "0x1455E7C", Offset = "0x1455E7C", VA = "0x1455E7C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA168", Offset = "0x9AA168")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600119C")]
			[Address(RVA = "0x1455E84", Offset = "0x1455E84", VA = "0x1455E84")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA178", Offset = "0x9AA178")]
			set
			{
			}
		}

		[Token(Token = "0x1700019F")]
		public int? MinimumItems
		{
			[Token(Token = "0x600119D")]
			[Address(RVA = "0x1455E90", Offset = "0x1455E90", VA = "0x1455E90")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA188", Offset = "0x9AA188")]
			get
			{
				return null;
			}
			[Token(Token = "0x600119E")]
			[Address(RVA = "0x1455E98", Offset = "0x1455E98", VA = "0x1455E98")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA198", Offset = "0x9AA198")]
			set
			{
			}
		}

		[Token(Token = "0x170001A0")]
		public int? MaximumItems
		{
			[Token(Token = "0x600119F")]
			[Address(RVA = "0x1455EA0", Offset = "0x1455EA0", VA = "0x1455EA0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA1A8", Offset = "0x9AA1A8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011A0")]
			[Address(RVA = "0x1455EA8", Offset = "0x1455EA8", VA = "0x1455EA8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA1B8", Offset = "0x9AA1B8")]
			set
			{
			}
		}

		[Token(Token = "0x170001A1")]
		public IList<string> Patterns
		{
			[Token(Token = "0x60011A1")]
			[Address(RVA = "0x1455EB0", Offset = "0x1455EB0", VA = "0x1455EB0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA1C8", Offset = "0x9AA1C8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011A2")]
			[Address(RVA = "0x1455EB8", Offset = "0x1455EB8", VA = "0x1455EB8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA1D8", Offset = "0x9AA1D8")]
			set
			{
			}
		}

		[Token(Token = "0x170001A2")]
		public IList<JsonSchemaModel> Items
		{
			[Token(Token = "0x60011A3")]
			[Address(RVA = "0x1455EC0", Offset = "0x1455EC0", VA = "0x1455EC0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA1E8", Offset = "0x9AA1E8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011A4")]
			[Address(RVA = "0x1455EC8", Offset = "0x1455EC8", VA = "0x1455EC8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA1F8", Offset = "0x9AA1F8")]
			set
			{
			}
		}

		[Token(Token = "0x170001A3")]
		public IDictionary<string, JsonSchemaModel> Properties
		{
			[Token(Token = "0x60011A5")]
			[Address(RVA = "0x1455ED0", Offset = "0x1455ED0", VA = "0x1455ED0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA208", Offset = "0x9AA208")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011A6")]
			[Address(RVA = "0x1455ED8", Offset = "0x1455ED8", VA = "0x1455ED8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA218", Offset = "0x9AA218")]
			set
			{
			}
		}

		[Token(Token = "0x170001A4")]
		public IDictionary<string, JsonSchemaModel> PatternProperties
		{
			[Token(Token = "0x60011A7")]
			[Address(RVA = "0x1455EE0", Offset = "0x1455EE0", VA = "0x1455EE0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA228", Offset = "0x9AA228")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011A8")]
			[Address(RVA = "0x1455EE8", Offset = "0x1455EE8", VA = "0x1455EE8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA238", Offset = "0x9AA238")]
			set
			{
			}
		}

		[Token(Token = "0x170001A5")]
		public JsonSchemaModel AdditionalProperties
		{
			[Token(Token = "0x60011A9")]
			[Address(RVA = "0x1455EF0", Offset = "0x1455EF0", VA = "0x1455EF0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA248", Offset = "0x9AA248")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011AA")]
			[Address(RVA = "0x1455EF8", Offset = "0x1455EF8", VA = "0x1455EF8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA258", Offset = "0x9AA258")]
			set
			{
			}
		}

		[Token(Token = "0x170001A6")]
		public bool AllowAdditionalProperties
		{
			[Token(Token = "0x60011AB")]
			[Address(RVA = "0x1455F00", Offset = "0x1455F00", VA = "0x1455F00")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA268", Offset = "0x9AA268")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60011AC")]
			[Address(RVA = "0x1455F08", Offset = "0x1455F08", VA = "0x1455F08")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA278", Offset = "0x9AA278")]
			set
			{
			}
		}

		[Token(Token = "0x170001A7")]
		public IList<JToken> Enum
		{
			[Token(Token = "0x60011AD")]
			[Address(RVA = "0x1455F14", Offset = "0x1455F14", VA = "0x1455F14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA288", Offset = "0x9AA288")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011AE")]
			[Address(RVA = "0x1455F1C", Offset = "0x1455F1C", VA = "0x1455F1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA298", Offset = "0x9AA298")]
			set
			{
			}
		}

		[Token(Token = "0x170001A8")]
		public JsonSchemaType Disallow
		{
			[Token(Token = "0x60011AF")]
			[Address(RVA = "0x1455F24", Offset = "0x1455F24", VA = "0x1455F24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA2A8", Offset = "0x9AA2A8")]
			get
			{
				return default(JsonSchemaType);
			}
			[Token(Token = "0x60011B0")]
			[Address(RVA = "0x1455F2C", Offset = "0x1455F2C", VA = "0x1455F2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA2B8", Offset = "0x9AA2B8")]
			set
			{
			}
		}

		[Token(Token = "0x60011B1")]
		[Address(RVA = "0x1455F34", Offset = "0x1455F34", VA = "0x1455F34")]
		public JsonSchemaModel()
		{
		}

		[Token(Token = "0x60011B2")]
		[Address(RVA = "0x1455F6C", Offset = "0x1455F6C", VA = "0x1455F6C")]
		public static JsonSchemaModel Create(IList<JsonSchema> schemata)
		{
			return null;
		}

		[Token(Token = "0x60011B3")]
		[Address(RVA = "0x1456208", Offset = "0x1456208", VA = "0x1456208")]
		private static void Combine(JsonSchemaModel model, JsonSchema schema)
		{
		}
	}
	[Token(Token = "0x2000255")]
	internal class JsonSchemaModelBuilder
	{
		[Token(Token = "0x4000C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private JsonSchemaNodeCollection _nodes;

		[Token(Token = "0x4000C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<JsonSchemaNode, JsonSchemaModel> _nodeModels;

		[Token(Token = "0x4000CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private JsonSchemaNode _node;

		[Token(Token = "0x60011B4")]
		[Address(RVA = "0x1456720", Offset = "0x1456720", VA = "0x1456720")]
		public JsonSchemaModel Build(JsonSchema schema)
		{
			return null;
		}

		[Token(Token = "0x60011B5")]
		[Address(RVA = "0x145681C", Offset = "0x145681C", VA = "0x145681C")]
		public JsonSchemaNode AddSchema(JsonSchemaNode existingNode, JsonSchema schema)
		{
			return null;
		}

		[Token(Token = "0x60011B6")]
		[Address(RVA = "0x1457730", Offset = "0x1457730", VA = "0x1457730")]
		public void AddProperties(IDictionary<string, JsonSchema> source, IDictionary<string, JsonSchemaNode> target)
		{
		}

		[Token(Token = "0x60011B7")]
		[Address(RVA = "0x1457BC4", Offset = "0x1457BC4", VA = "0x1457BC4")]
		public void AddProperty(IDictionary<string, JsonSchemaNode> target, string propertyName, JsonSchema schema)
		{
		}

		[Token(Token = "0x60011B8")]
		[Address(RVA = "0x1457A00", Offset = "0x1457A00", VA = "0x1457A00")]
		public void AddItem(JsonSchemaNode parentNode, int index, JsonSchema schema)
		{
		}

		[Token(Token = "0x60011B9")]
		[Address(RVA = "0x1457B50", Offset = "0x1457B50", VA = "0x1457B50")]
		public void AddAdditionalProperties(JsonSchemaNode parentNode, JsonSchema schema)
		{
		}

		[Token(Token = "0x60011BA")]
		[Address(RVA = "0x1456CD4", Offset = "0x1456CD4", VA = "0x1456CD4")]
		private JsonSchemaModel BuildNodeModel(JsonSchemaNode node)
		{
			return null;
		}

		[Token(Token = "0x60011BB")]
		[Address(RVA = "0x1457D48", Offset = "0x1457D48", VA = "0x1457D48")]
		public JsonSchemaModelBuilder()
		{
		}
	}
	[Token(Token = "0x2000256")]
	internal class JsonSchemaNode
	{
		[Serializable]
		[Token(Token = "0x2000332")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A68E4", Offset = "0x9A68E4")]
		private sealed class <>c
		{
			[Token(Token = "0x4000F20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000F21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<JsonSchema, string> <>9__27_0;

			[Token(Token = "0x4000F22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<string, string> <>9__27_1;

			[Token(Token = "0x6001647")]
			[Address(RVA = "0x1458038", Offset = "0x1458038", VA = "0x1458038")]
			public <>c()
			{
			}

			[Token(Token = "0x6001648")]
			[Address(RVA = "0x1458040", Offset = "0x1458040", VA = "0x1458040")]
			internal string <GetId>b__27_0(JsonSchema s)
			{
				return null;
			}

			[Token(Token = "0x6001649")]
			[Address(RVA = "0x1458070", Offset = "0x1458070", VA = "0x1458070")]
			internal string <GetId>b__27_1(string id)
			{
				return null;
			}
		}

		[Token(Token = "0x4000CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8480", Offset = "0x9A8480")]
		private string <Id>k__BackingField;

		[Token(Token = "0x4000CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8490", Offset = "0x9A8490")]
		private ReadOnlyCollection<JsonSchema> <Schemas>k__BackingField;

		[Token(Token = "0x4000CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A84A0", Offset = "0x9A84A0")]
		private Dictionary<string, JsonSchemaNode> <Properties>k__BackingField;

		[Token(Token = "0x4000CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A84B0", Offset = "0x9A84B0")]
		private Dictionary<string, JsonSchemaNode> <PatternProperties>k__BackingField;

		[Token(Token = "0x4000CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A84C0", Offset = "0x9A84C0")]
		private List<JsonSchemaNode> <Items>k__BackingField;

		[Token(Token = "0x4000CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A84D0", Offset = "0x9A84D0")]
		private JsonSchemaNode <AdditionalProperties>k__BackingField;

		[Token(Token = "0x170001A9")]
		public string Id
		{
			[Token(Token = "0x60011BC")]
			[Address(RVA = "0x1457DD4", Offset = "0x1457DD4", VA = "0x1457DD4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA2C8", Offset = "0x9AA2C8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011BD")]
			[Address(RVA = "0x1457DDC", Offset = "0x1457DDC", VA = "0x1457DDC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA2D8", Offset = "0x9AA2D8")]
			private set
			{
			}
		}

		[Token(Token = "0x170001AA")]
		public ReadOnlyCollection<JsonSchema> Schemas
		{
			[Token(Token = "0x60011BE")]
			[Address(RVA = "0x1457354", Offset = "0x1457354", VA = "0x1457354")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA2E8", Offset = "0x9AA2E8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011BF")]
			[Address(RVA = "0x1457DE4", Offset = "0x1457DE4", VA = "0x1457DE4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA2F8", Offset = "0x9AA2F8")]
			private set
			{
			}
		}

		[Token(Token = "0x170001AB")]
		public Dictionary<string, JsonSchemaNode> Properties
		{
			[Token(Token = "0x60011C0")]
			[Address(RVA = "0x1457728", Offset = "0x1457728", VA = "0x1457728")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA308", Offset = "0x9AA308")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011C1")]
			[Address(RVA = "0x1457DEC", Offset = "0x1457DEC", VA = "0x1457DEC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA318", Offset = "0x9AA318")]
			private set
			{
			}
		}

		[Token(Token = "0x170001AC")]
		public Dictionary<string, JsonSchemaNode> PatternProperties
		{
			[Token(Token = "0x60011C2")]
			[Address(RVA = "0x14579F8", Offset = "0x14579F8", VA = "0x14579F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA328", Offset = "0x9AA328")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011C3")]
			[Address(RVA = "0x1457DF4", Offset = "0x1457DF4", VA = "0x1457DF4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA338", Offset = "0x9AA338")]
			private set
			{
			}
		}

		[Token(Token = "0x170001AD")]
		public List<JsonSchemaNode> Items
		{
			[Token(Token = "0x60011C4")]
			[Address(RVA = "0x1457D30", Offset = "0x1457D30", VA = "0x1457D30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA348", Offset = "0x9AA348")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011C5")]
			[Address(RVA = "0x1457DFC", Offset = "0x1457DFC", VA = "0x1457DFC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA358", Offset = "0x9AA358")]
			private set
			{
			}
		}

		[Token(Token = "0x170001AE")]
		public JsonSchemaNode AdditionalProperties
		{
			[Token(Token = "0x60011C6")]
			[Address(RVA = "0x1457D38", Offset = "0x1457D38", VA = "0x1457D38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA368", Offset = "0x9AA368")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011C7")]
			[Address(RVA = "0x1457D40", Offset = "0x1457D40", VA = "0x1457D40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA378", Offset = "0x9AA378")]
			set
			{
			}
		}

		[Token(Token = "0x60011C8")]
		[Address(RVA = "0x1457554", Offset = "0x1457554", VA = "0x1457554")]
		public JsonSchemaNode(JsonSchema schema)
		{
		}

		[Token(Token = "0x60011C9")]
		[Address(RVA = "0x1457E04", Offset = "0x1457E04", VA = "0x1457E04")]
		private JsonSchemaNode(JsonSchemaNode source, JsonSchema schema)
		{
		}

		[Token(Token = "0x60011CA")]
		[Address(RVA = "0x14576B8", Offset = "0x14576B8", VA = "0x14576B8")]
		public JsonSchemaNode Combine(JsonSchema schema)
		{
			return null;
		}

		[Token(Token = "0x60011CB")]
		[Address(RVA = "0x145735C", Offset = "0x145735C", VA = "0x145735C")]
		public static string GetId(IEnumerable<JsonSchema> schemata)
		{
			return null;
		}
	}
	[Token(Token = "0x2000257")]
	internal class JsonSchemaNodeCollection : KeyedCollection<string, JsonSchemaNode>
	{
		[Token(Token = "0x60011CC")]
		[Address(RVA = "0x1458078", Offset = "0x1458078", VA = "0x1458078", Slot = "39")]
		protected override string GetKeyForItem(JsonSchemaNode item)
		{
			return null;
		}

		[Token(Token = "0x60011CD")]
		[Address(RVA = "0x14567CC", Offset = "0x14567CC", VA = "0x14567CC")]
		public JsonSchemaNodeCollection()
		{
		}
	}
	[Token(Token = "0x2000258")]
	public class JsonSchemaResolver
	{
		[Token(Token = "0x2000333")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A68F4", Offset = "0x9A68F4")]
		private sealed class <>c__DisplayClass5_0
		{
			[Token(Token = "0x4000F23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string id;

			[Token(Token = "0x600164A")]
			[Address(RVA = "0x14581EC", Offset = "0x14581EC", VA = "0x14581EC")]
			public <>c__DisplayClass5_0()
			{
			}

			[Token(Token = "0x600164B")]
			[Address(RVA = "0x14581F4", Offset = "0x14581F4", VA = "0x14581F4")]
			internal bool <GetSchema>b__0(JsonSchema s)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A84E0", Offset = "0x9A84E0")]
		private IList<JsonSchema> <LoadedSchemas>k__BackingField;

		[Token(Token = "0x170001AF")]
		public IList<JsonSchema> LoadedSchemas
		{
			[Token(Token = "0x60011CE")]
			[Address(RVA = "0x14580A4", Offset = "0x14580A4", VA = "0x14580A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA388", Offset = "0x9AA388")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011CF")]
			[Address(RVA = "0x14580AC", Offset = "0x14580AC", VA = "0x14580AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA398", Offset = "0x9AA398")]
			protected set
			{
			}
		}

		[Token(Token = "0x60011D0")]
		[Address(RVA = "0x14580B4", Offset = "0x14580B4", VA = "0x14580B4")]
		public JsonSchemaResolver()
		{
		}

		[Token(Token = "0x60011D1")]
		[Address(RVA = "0x1458128", Offset = "0x1458128", VA = "0x1458128", Slot = "4")]
		public virtual JsonSchema GetSchema(string id)
		{
			return null;
		}
	}
	[Token(Token = "0x2000259")]
	[Flags]
	public enum JsonSchemaType
	{
		[Token(Token = "0x4000CA9")]
		None = 0,
		[Token(Token = "0x4000CAA")]
		String = 1,
		[Token(Token = "0x4000CAB")]
		Float = 2,
		[Token(Token = "0x4000CAC")]
		Integer = 4,
		[Token(Token = "0x4000CAD")]
		Boolean = 8,
		[Token(Token = "0x4000CAE")]
		Object = 0x10,
		[Token(Token = "0x4000CAF")]
		Array = 0x20,
		[Token(Token = "0x4000CB0")]
		Null = 0x40,
		[Token(Token = "0x4000CB1")]
		Any = 0x7F
	}
	[Token(Token = "0x200025A")]
	internal class JsonSchemaWriter
	{
		[Serializable]
		[Token(Token = "0x2000334")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6904", Offset = "0x9A6904")]
		private sealed class <>c
		{
			[Token(Token = "0x4000F24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000F25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<JsonSchemaType, bool> <>9__7_0;

			[Token(Token = "0x600164D")]
			[Address(RVA = "0x145A4C8", Offset = "0x145A4C8", VA = "0x145A4C8")]
			public <>c()
			{
			}

			[Token(Token = "0x600164E")]
			[Address(RVA = "0x145A4D0", Offset = "0x145A4D0", VA = "0x145A4D0")]
			internal bool <WriteType>b__7_0(JsonSchemaType v)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly JsonWriter _writer;

		[Token(Token = "0x4000CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly JsonSchemaResolver _resolver;

		[Token(Token = "0x60011D2")]
		[Address(RVA = "0x1458234", Offset = "0x1458234", VA = "0x1458234")]
		public JsonSchemaWriter(JsonWriter writer, JsonSchemaResolver resolver)
		{
		}

		[Token(Token = "0x60011D3")]
		[Address(RVA = "0x14582AC", Offset = "0x14582AC", VA = "0x14582AC")]
		private void ReferenceOrWriteSchema(JsonSchema schema)
		{
		}

		[Token(Token = "0x60011D4")]
		[Address(RVA = "0x145841C", Offset = "0x145841C", VA = "0x145841C")]
		public void WriteSchema(JsonSchema schema)
		{
		}

		[Token(Token = "0x60011D5")]
		[Address(RVA = "0x1459CC4", Offset = "0x1459CC4", VA = "0x1459CC4")]
		private void WriteSchemaDictionaryIfNotNull(JsonWriter writer, string propertyName, IDictionary<string, JsonSchema> properties)
		{
		}

		[Token(Token = "0x60011D6")]
		[Address(RVA = "0x145A000", Offset = "0x145A000", VA = "0x145A000")]
		private void WriteItems(JsonSchema schema)
		{
		}

		[Token(Token = "0x60011D7")]
		[Address(RVA = "0x1459670", Offset = "0x1459670", VA = "0x1459670")]
		private void WriteType(string propertyName, JsonWriter writer, JsonSchemaType type)
		{
		}

		[Token(Token = "0x60011D8")]
		[Address(RVA = "0x14595F0", Offset = "0x14595F0", VA = "0x14595F0")]
		private void WritePropertyIfNotNull(JsonWriter writer, string propertyName, object value)
		{
		}
	}
	[Token(Token = "0x200025B")]
	public static class SchemaExtensions
	{
		[Token(Token = "0x2000335")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6914", Offset = "0x9A6914")]
		private sealed class <>c__DisplayClass0_0
		{
			[Token(Token = "0x4000F26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool valid;

			[Token(Token = "0x600164F")]
			[Address(RVA = "0x145A5A4", Offset = "0x145A5A4", VA = "0x145A5A4")]
			public <>c__DisplayClass0_0()
			{
			}

			[Token(Token = "0x6001650")]
			[Address(RVA = "0x145A794", Offset = "0x145A794", VA = "0x145A794")]
			internal void <IsValid>b__0(object sender, ValidationEventArgs args)
			{
			}
		}

		[Token(Token = "0x60011D9")]
		[Address(RVA = "0x145A4DC", Offset = "0x145A4DC", VA = "0x145A4DC")]
		public static bool IsValid(this JToken source, JsonSchema schema)
		{
			return default(bool);
		}

		[Token(Token = "0x60011DA")]
		[Address(RVA = "0x145A78C", Offset = "0x145A78C", VA = "0x145A78C")]
		public static void Validate(this JToken source, JsonSchema schema)
		{
		}

		[Token(Token = "0x60011DB")]
		[Address(RVA = "0x145A5BC", Offset = "0x145A5BC", VA = "0x145A5BC")]
		public static void Validate(this JToken source, JsonSchema schema, ValidationEventHandler validationEventHandler)
		{
		}
	}
	[Token(Token = "0x200025C")]
	public enum UndefinedSchemaIdHandling
	{
		[Token(Token = "0x4000CB5")]
		None,
		[Token(Token = "0x4000CB6")]
		UseTypeName,
		[Token(Token = "0x4000CB7")]
		UseAssemblyQualifiedName
	}
	[Token(Token = "0x200025D")]
	public class ValidationEventArgs : EventArgs
	{
		[Token(Token = "0x4000CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly JsonSchemaException _ex;

		[Token(Token = "0x170001B0")]
		public JsonSchemaException Exception
		{
			[Token(Token = "0x60011DD")]
			[Address(RVA = "0x145A830", Offset = "0x145A830", VA = "0x145A830")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B1")]
		public string Message
		{
			[Token(Token = "0x60011DE")]
			[Address(RVA = "0x145A838", Offset = "0x145A838", VA = "0x145A838")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60011DC")]
		[Address(RVA = "0x145A79C", Offset = "0x145A79C", VA = "0x145A79C")]
		internal ValidationEventArgs(JsonSchemaException ex)
		{
		}
	}
	[Token(Token = "0x200025E")]
	public delegate void ValidationEventHandler(object sender, ValidationEventArgs e);
}
namespace Newtonsoft.Json.ObservableSupport
{
	[Token(Token = "0x200025F")]
	public class AddingNewEventArgs
	{
		[Token(Token = "0x4000CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A84F0", Offset = "0x9A84F0")]
		private object <NewObject>k__BackingField;

		[Token(Token = "0x170001B2")]
		public object NewObject
		{
			[Token(Token = "0x60011E3")]
			[Address(RVA = "0x1865108", Offset = "0x1865108", VA = "0x1865108")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA3D8", Offset = "0x9AA3D8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011E4")]
			[Address(RVA = "0x1865110", Offset = "0x1865110", VA = "0x1865110")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA3E8", Offset = "0x9AA3E8")]
			set
			{
			}
		}

		[Token(Token = "0x60011E5")]
		[Address(RVA = "0x1865118", Offset = "0x1865118", VA = "0x1865118")]
		public AddingNewEventArgs()
		{
		}

		[Token(Token = "0x60011E6")]
		[Address(RVA = "0x1865120", Offset = "0x1865120", VA = "0x1865120")]
		public AddingNewEventArgs(object newObject)
		{
		}
	}
	[Token(Token = "0x2000260")]
	public delegate void AddingNewEventHandler(object sender, AddingNewEventArgs e);
	[Token(Token = "0x2000261")]
	public interface INotifyCollectionChanged
	{
		[Token(Token = "0x14000009")]
		event NotifyCollectionChangedEventHandler CollectionChanged;
	}
	[Token(Token = "0x2000262")]
	public interface INotifyPropertyChanging
	{
		[Token(Token = "0x1400000A")]
		event PropertyChangingEventHandler PropertyChanging;
	}
	[Token(Token = "0x2000263")]
	public enum NotifyCollectionChangedAction
	{
		[Token(Token = "0x4000CBB")]
		Add,
		[Token(Token = "0x4000CBC")]
		Remove,
		[Token(Token = "0x4000CBD")]
		Replace,
		[Token(Token = "0x4000CBE")]
		Move,
		[Token(Token = "0x4000CBF")]
		Reset
	}
	[Token(Token = "0x2000264")]
	public class NotifyCollectionChangedEventArgs
	{
		[Token(Token = "0x4000CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8500", Offset = "0x9A8500")]
		private NotifyCollectionChangedAction <Action>k__BackingField;

		[Token(Token = "0x4000CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8510", Offset = "0x9A8510")]
		private IList <NewItems>k__BackingField;

		[Token(Token = "0x4000CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8520", Offset = "0x9A8520")]
		private int <NewStartingIndex>k__BackingField;

		[Token(Token = "0x4000CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8530", Offset = "0x9A8530")]
		private IList <OldItems>k__BackingField;

		[Token(Token = "0x4000CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8540", Offset = "0x9A8540")]
		private int <OldStartingIndex>k__BackingField;

		[Token(Token = "0x170001B3")]
		internal NotifyCollectionChangedAction Action
		{
			[Token(Token = "0x60011EF")]
			[Address(RVA = "0x1865918", Offset = "0x1865918", VA = "0x1865918")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA438", Offset = "0x9AA438")]
			get
			{
				return default(NotifyCollectionChangedAction);
			}
			[Token(Token = "0x60011F0")]
			[Address(RVA = "0x1865920", Offset = "0x1865920", VA = "0x1865920")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA448", Offset = "0x9AA448")]
			set
			{
			}
		}

		[Token(Token = "0x170001B4")]
		internal IList NewItems
		{
			[Token(Token = "0x60011F1")]
			[Address(RVA = "0x1865928", Offset = "0x1865928", VA = "0x1865928")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA458", Offset = "0x9AA458")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011F2")]
			[Address(RVA = "0x1865930", Offset = "0x1865930", VA = "0x1865930")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA468", Offset = "0x9AA468")]
			set
			{
			}
		}

		[Token(Token = "0x170001B5")]
		internal int NewStartingIndex
		{
			[Token(Token = "0x60011F3")]
			[Address(RVA = "0x1865938", Offset = "0x1865938", VA = "0x1865938")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA478", Offset = "0x9AA478")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60011F4")]
			[Address(RVA = "0x1865940", Offset = "0x1865940", VA = "0x1865940")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA488", Offset = "0x9AA488")]
			set
			{
			}
		}

		[Token(Token = "0x170001B6")]
		internal IList OldItems
		{
			[Token(Token = "0x60011F5")]
			[Address(RVA = "0x1865948", Offset = "0x1865948", VA = "0x1865948")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA498", Offset = "0x9AA498")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011F6")]
			[Address(RVA = "0x1865950", Offset = "0x1865950", VA = "0x1865950")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA4A8", Offset = "0x9AA4A8")]
			set
			{
			}
		}

		[Token(Token = "0x170001B7")]
		internal int OldStartingIndex
		{
			[Token(Token = "0x60011F7")]
			[Address(RVA = "0x1865958", Offset = "0x1865958", VA = "0x1865958")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA4B8", Offset = "0x9AA4B8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60011F8")]
			[Address(RVA = "0x1865960", Offset = "0x1865960", VA = "0x1865960")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA4C8", Offset = "0x9AA4C8")]
			set
			{
			}
		}

		[Token(Token = "0x60011F9")]
		[Address(RVA = "0x1865968", Offset = "0x1865968", VA = "0x1865968")]
		internal NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action)
		{
		}

		[Token(Token = "0x60011FA")]
		[Address(RVA = "0x1865994", Offset = "0x1865994", VA = "0x1865994")]
		internal NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList changedItems)
		{
		}

		[Token(Token = "0x60011FB")]
		[Address(RVA = "0x18659D0", Offset = "0x18659D0", VA = "0x18659D0")]
		internal NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object changedItem)
		{
		}

		[Token(Token = "0x60011FC")]
		[Address(RVA = "0x1865A7C", Offset = "0x1865A7C", VA = "0x1865A7C")]
		internal NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList newItems, IList oldItems)
		{
		}

		[Token(Token = "0x60011FD")]
		[Address(RVA = "0x1865AC0", Offset = "0x1865AC0", VA = "0x1865AC0")]
		internal NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList changedItems, int startingIndex)
		{
		}

		[Token(Token = "0x60011FE")]
		[Address(RVA = "0x1865B04", Offset = "0x1865B04", VA = "0x1865B04")]
		internal NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object changedItem, int index)
		{
		}

		[Token(Token = "0x60011FF")]
		[Address(RVA = "0x1865B2C", Offset = "0x1865B2C", VA = "0x1865B2C")]
		internal NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object newItem, object oldItem)
		{
		}

		[Token(Token = "0x6001200")]
		[Address(RVA = "0x1865BE4", Offset = "0x1865BE4", VA = "0x1865BE4")]
		internal NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList newItems, IList oldItems, int startingIndex)
		{
		}

		[Token(Token = "0x6001201")]
		[Address(RVA = "0x1865C38", Offset = "0x1865C38", VA = "0x1865C38")]
		internal NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList changedItems, int index, int oldIndex)
		{
		}

		[Token(Token = "0x6001202")]
		[Address(RVA = "0x1865C8C", Offset = "0x1865C8C", VA = "0x1865C8C")]
		internal NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object changedItem, int index, int oldIndex)
		{
		}

		[Token(Token = "0x6001203")]
		[Address(RVA = "0x1865CC4", Offset = "0x1865CC4", VA = "0x1865CC4")]
		internal NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object newItem, object oldItem, int index)
		{
		}
	}
	[Token(Token = "0x2000265")]
	public delegate void NotifyCollectionChangedEventHandler(object sender, NotifyCollectionChangedEventArgs e);
	[Token(Token = "0x2000266")]
	public class PropertyChangingEventArgs : EventArgs
	{
		[Token(Token = "0x4000CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8550", Offset = "0x9A8550")]
		private string <PropertyName>k__BackingField;

		[Token(Token = "0x170001B8")]
		public virtual string PropertyName
		{
			[Token(Token = "0x6001209")]
			[Address(RVA = "0x1866540", Offset = "0x1866540", VA = "0x1866540", Slot = "4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA4D8", Offset = "0x9AA4D8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600120A")]
			[Address(RVA = "0x1866548", Offset = "0x1866548", VA = "0x1866548", Slot = "5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA4E8", Offset = "0x9AA4E8")]
			set
			{
			}
		}

		[Token(Token = "0x6001208")]
		[Address(RVA = "0x18664B8", Offset = "0x18664B8", VA = "0x18664B8")]
		public PropertyChangingEventArgs(string propertyName)
		{
		}
	}
	[Token(Token = "0x2000267")]
	public delegate void PropertyChangingEventHandler(object sender, PropertyChangingEventArgs e);
}
namespace Newtonsoft.Json.Linq
{
	[Token(Token = "0x2000268")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x9A635C", Offset = "0x9A635C")]
	public interface IJEnumerable<T> : IEnumerable<T>, IEnumerable where T : JToken
	{
		[Token(Token = "0x170001B9")]
		IJEnumerable<JToken> Item
		{
			[Token(Token = "0x600120F")]
			get;
		}
	}
	[Token(Token = "0x2000269")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x9A6394", Offset = "0x9A6394")]
	public class JArray : JContainer, IList<JToken>, ICollection<JToken>, IEnumerable<JToken>, IEnumerable
	{
		[Token(Token = "0x4000CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private IList<JToken> _values;

		[Token(Token = "0x170001BA")]
		protected override IList<JToken> ChildrenTokens
		{
			[Token(Token = "0x6001210")]
			[Address(RVA = "0x184EA84", Offset = "0x184EA84", VA = "0x184EA84", Slot = "51")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001BB")]
		public override JTokenType Type
		{
			[Token(Token = "0x6001211")]
			[Address(RVA = "0x184EA8C", Offset = "0x184EA8C", VA = "0x184EA8C", Slot = "13")]
			get
			{
				return default(JTokenType);
			}
		}

		[Token(Token = "0x170001BC")]
		public override JToken Item
		{
			[Token(Token = "0x600121D")]
			[Address(RVA = "0x184FE84", Offset = "0x184FE84", VA = "0x184FE84", Slot = "15")]
			get
			{
				return null;
			}
			[Token(Token = "0x600121E")]
			[Address(RVA = "0x1850000", Offset = "0x1850000", VA = "0x1850000", Slot = "16")]
			set
			{
			}
		}

		[Token(Token = "0x170001BD")]
		public new JToken Item
		{
			[Token(Token = "0x600121F")]
			[Address(RVA = "0x1850184", Offset = "0x1850184", VA = "0x1850184", Slot = "24")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001220")]
			[Address(RVA = "0x1850194", Offset = "0x1850194", VA = "0x1850194", Slot = "25")]
			set
			{
			}
		}

		[Token(Token = "0x170001BE")]
		private bool System.Collections.Generic.ICollection<Newtonsoft.Json.Linq.JToken>.IsReadOnly
		{
			[Token(Token = "0x6001228")]
			[Address(RVA = "0x18502B0", Offset = "0x18502B0", VA = "0x18502B0", Slot = "30")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001212")]
		[Address(RVA = "0x184EA94", Offset = "0x184EA94", VA = "0x184EA94")]
		public JArray()
		{
		}

		[Token(Token = "0x6001213")]
		[Address(RVA = "0x184EB0C", Offset = "0x184EB0C", VA = "0x184EB0C")]
		public JArray(JArray other)
		{
		}

		[Token(Token = "0x6001214")]
		[Address(RVA = "0x184EE30", Offset = "0x184EE30", VA = "0x184EE30")]
		public JArray(params object[] content)
		{
		}

		[Token(Token = "0x6001215")]
		[Address(RVA = "0x184EE34", Offset = "0x184EE34", VA = "0x184EE34")]
		public JArray(object content)
		{
		}

		[Token(Token = "0x6001216")]
		[Address(RVA = "0x184EEC8", Offset = "0x184EEC8", VA = "0x184EEC8", Slot = "12")]
		internal override bool DeepEquals(JToken node)
		{
			return default(bool);
		}

		[Token(Token = "0x6001217")]
		[Address(RVA = "0x184F084", Offset = "0x184F084", VA = "0x184F084", Slot = "11")]
		internal override JToken CloneToken()
		{
			return null;
		}

		[Token(Token = "0x6001218")]
		[Address(RVA = "0x184F0E4", Offset = "0x184F0E4", VA = "0x184F0E4")]
		public new static JArray Load(JsonReader reader)
		{
			return null;
		}

		[Token(Token = "0x6001219")]
		[Address(RVA = "0x184F734", Offset = "0x184F734", VA = "0x184F734")]
		public new static JArray Parse(string json)
		{
			return null;
		}

		[Token(Token = "0x600121A")]
		[Address(RVA = "0x184F7B8", Offset = "0x184F7B8", VA = "0x184F7B8")]
		public new static JArray FromObject(object o)
		{
			return null;
		}

		[Token(Token = "0x600121B")]
		[Address(RVA = "0x184F81C", Offset = "0x184F81C", VA = "0x184F81C")]
		public new static JArray FromObject(object o, JsonSerializer jsonSerializer)
		{
			return null;
		}

		[Token(Token = "0x600121C")]
		[Address(RVA = "0x184FBA4", Offset = "0x184FBA4", VA = "0x184FBA4", Slot = "22")]
		public override void WriteTo(JsonWriter writer, params JsonConverter[] converters)
		{
		}

		[Token(Token = "0x6001221")]
		[Address(RVA = "0x18501A4", Offset = "0x18501A4", VA = "0x18501A4", Slot = "26")]
		public int IndexOf(JToken item)
		{
			return default(int);
		}

		[Token(Token = "0x6001222")]
		[Address(RVA = "0x1850250", Offset = "0x1850250", VA = "0x1850250", Slot = "27")]
		public void Insert(int index, JToken item)
		{
		}

		[Token(Token = "0x6001223")]
		[Address(RVA = "0x1850260", Offset = "0x1850260", VA = "0x1850260", Slot = "28")]
		public void RemoveAt(int index)
		{
		}

		[Token(Token = "0x6001224")]
		[Address(RVA = "0x1850270", Offset = "0x1850270", VA = "0x1850270", Slot = "31")]
		public void Add(JToken item)
		{
		}

		[Token(Token = "0x6001225")]
		[Address(RVA = "0x1850280", Offset = "0x1850280", VA = "0x1850280", Slot = "32")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001226")]
		[Address(RVA = "0x1850290", Offset = "0x1850290", VA = "0x1850290", Slot = "33")]
		public bool Contains(JToken item)
		{
			return default(bool);
		}

		[Token(Token = "0x6001227")]
		[Address(RVA = "0x18502A0", Offset = "0x18502A0", VA = "0x18502A0", Slot = "34")]
		private void System.Collections.Generic.ICollection<Newtonsoft.Json.Linq.JToken>.CopyTo(JToken[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6001229")]
		[Address(RVA = "0x18502B8", Offset = "0x18502B8", VA = "0x18502B8", Slot = "35")]
		public bool Remove(JToken item)
		{
			return default(bool);
		}

		[Token(Token = "0x600122A")]
		[Address(RVA = "0x18502C8", Offset = "0x18502C8", VA = "0x18502C8", Slot = "23")]
		internal override int GetDeepHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x200026A")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x9A63CC", Offset = "0x9A63CC")]
	public class JConstructor : JContainer
	{
		[Token(Token = "0x4000CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string _name;

		[Token(Token = "0x4000CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IList<JToken> _values;

		[Token(Token = "0x170001BF")]
		protected override IList<JToken> ChildrenTokens
		{
			[Token(Token = "0x600122B")]
			[Address(RVA = "0x1850574", Offset = "0x1850574", VA = "0x1850574", Slot = "51")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C0")]
		public string Name
		{
			[Token(Token = "0x600122C")]
			[Address(RVA = "0x185057C", Offset = "0x185057C", VA = "0x185057C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600122D")]
			[Address(RVA = "0x1850584", Offset = "0x1850584", VA = "0x1850584")]
			set
			{
			}
		}

		[Token(Token = "0x170001C1")]
		public override JTokenType Type
		{
			[Token(Token = "0x600122E")]
			[Address(RVA = "0x185058C", Offset = "0x185058C", VA = "0x185058C", Slot = "13")]
			get
			{
				return default(JTokenType);
			}
		}

		[Token(Token = "0x170001C2")]
		public override JToken Item
		{
			[Token(Token = "0x6001237")]
			[Address(RVA = "0x1850B68", Offset = "0x1850B68", VA = "0x1850B68", Slot = "15")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001238")]
			[Address(RVA = "0x1850CE4", Offset = "0x1850CE4", VA = "0x1850CE4", Slot = "16")]
			set
			{
			}
		}

		[Token(Token = "0x600122F")]
		[Address(RVA = "0x1850594", Offset = "0x1850594", VA = "0x1850594")]
		public JConstructor()
		{
		}

		[Token(Token = "0x6001230")]
		[Address(RVA = "0x1850604", Offset = "0x1850604", VA = "0x1850604")]
		public JConstructor(JConstructor other)
		{
		}

		[Token(Token = "0x6001231")]
		[Address(RVA = "0x1850698", Offset = "0x1850698", VA = "0x1850698")]
		public JConstructor(string name, params object[] content)
		{
		}

		[Token(Token = "0x6001232")]
		[Address(RVA = "0x18506D0", Offset = "0x18506D0", VA = "0x18506D0")]
		public JConstructor(string name, object content)
		{
		}

		[Token(Token = "0x6001233")]
		[Address(RVA = "0x1850708", Offset = "0x1850708", VA = "0x1850708")]
		public JConstructor(string name)
		{
		}

		[Token(Token = "0x6001234")]
		[Address(RVA = "0x18507A4", Offset = "0x18507A4", VA = "0x18507A4", Slot = "12")]
		internal override bool DeepEquals(JToken node)
		{
			return default(bool);
		}

		[Token(Token = "0x6001235")]
		[Address(RVA = "0x185086C", Offset = "0x185086C", VA = "0x185086C", Slot = "11")]
		internal override JToken CloneToken()
		{
			return null;
		}

		[Token(Token = "0x6001236")]
		[Address(RVA = "0x18508CC", Offset = "0x18508CC", VA = "0x18508CC", Slot = "22")]
		public override void WriteTo(JsonWriter writer, params JsonConverter[] converters)
		{
		}

		[Token(Token = "0x6001239")]
		[Address(RVA = "0x1850E68", Offset = "0x1850E68", VA = "0x1850E68", Slot = "23")]
		internal override int GetDeepHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600123A")]
		[Address(RVA = "0x1850EB4", Offset = "0x1850EB4", VA = "0x1850EB4")]
		public new static JConstructor Load(JsonReader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200026B")]
	public abstract class JContainer : JToken, IList<JToken>, ICollection<JToken>, IEnumerable<JToken>, IEnumerable, IList, ICollection
	{
		[Token(Token = "0x2000336")]
		private class JTokenReferenceEqualityComparer : IEqualityComparer<JToken>
		{
			[Token(Token = "0x4000F27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly JTokenReferenceEqualityComparer Instance;

			[Token(Token = "0x6001651")]
			[Address(RVA = "0x1854E88", Offset = "0x1854E88", VA = "0x1854E88", Slot = "4")]
			public bool Equals(JToken x, JToken y)
			{
				return default(bool);
			}

			[Token(Token = "0x6001652")]
			[Address(RVA = "0x1854E94", Offset = "0x1854E94", VA = "0x1854E94", Slot = "5")]
			public int GetHashCode(JToken obj)
			{
				return default(int);
			}

			[Token(Token = "0x6001653")]
			[Address(RVA = "0x1854EB4", Offset = "0x1854EB4", VA = "0x1854EB4")]
			public JTokenReferenceEqualityComparer()
			{
			}
		}

		[Token(Token = "0x2000337")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6924", Offset = "0x9A6924")]
		private sealed class <Descendants>d__16 : IEnumerable<JToken>, IEnumerable, IEnumerator<JToken>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JToken <>2__current;

			[Token(Token = "0x4000F2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000F2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JContainer <>4__this;

			[Token(Token = "0x4000F2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private IEnumerator<JToken> <>7__wrap1;

			[Token(Token = "0x4000F2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private JToken <o>5__3;

			[Token(Token = "0x4000F2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private IEnumerator<JToken> <>7__wrap3;

			[Token(Token = "0x17000253")]
			private JToken System.Collections.Generic.IEnumerator<Newtonsoft.Json.Linq.JToken>.Current
			{
				[Token(Token = "0x600165A")]
				[Address(RVA = "0x1854D5C", Offset = "0x1854D5C", VA = "0x1854D5C", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000254")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600165C")]
				[Address(RVA = "0x1854DCC", Offset = "0x1854DCC", VA = "0x1854DCC", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001655")]
			[Address(RVA = "0x1851568", Offset = "0x1851568", VA = "0x1851568")]
			[DebuggerHidden]
			public <Descendants>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x6001656")]
			[Address(RVA = "0x18546B4", Offset = "0x18546B4", VA = "0x18546B4", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001657")]
			[Address(RVA = "0x18548C8", Offset = "0x18548C8", VA = "0x18548C8", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001658")]
			[Address(RVA = "0x1854808", Offset = "0x1854808", VA = "0x1854808")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001659")]
			[Address(RVA = "0x1854748", Offset = "0x1854748", VA = "0x1854748")]
			private void <>m__Finally2()
			{
			}

			[Token(Token = "0x600165B")]
			[Address(RVA = "0x1854D64", Offset = "0x1854D64", VA = "0x1854D64", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x600165D")]
			[Address(RVA = "0x1854DD4", Offset = "0x1854DD4", VA = "0x1854DD4", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JToken> System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x600165E")]
			[Address(RVA = "0x1854E84", Offset = "0x1854E84", VA = "0x1854E84", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x4000CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private object _syncRoot;

		[Token(Token = "0x4000CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool _busy;

		[Token(Token = "0x170001C3")]
		protected abstract IList<JToken> ChildrenTokens
		{
			[Token(Token = "0x600123B")]
			get;
		}

		[Token(Token = "0x170001C4")]
		public override bool HasValues
		{
			[Token(Token = "0x600123F")]
			[Address(RVA = "0x18512D0", Offset = "0x18512D0", VA = "0x18512D0", Slot = "14")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001C5")]
		public override JToken First
		{
			[Token(Token = "0x6001241")]
			[Address(RVA = "0x18513A8", Offset = "0x18513A8", VA = "0x18513A8", Slot = "18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C6")]
		public override JToken Last
		{
			[Token(Token = "0x6001242")]
			[Address(RVA = "0x1851408", Offset = "0x1851408", VA = "0x1851408", Slot = "19")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C7")]
		private JToken System.Collections.Generic.IList<Newtonsoft.Json.Linq.JToken>.Item
		{
			[Token(Token = "0x6001261")]
			[Address(RVA = "0x1854354", Offset = "0x1854354", VA = "0x1854354", Slot = "24")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001262")]
			[Address(RVA = "0x1854364", Offset = "0x1854364", VA = "0x1854364", Slot = "25")]
			set
			{
			}
		}

		[Token(Token = "0x170001C8")]
		private bool System.Collections.Generic.ICollection<Newtonsoft.Json.Linq.JToken>.IsReadOnly
		{
			[Token(Token = "0x6001267")]
			[Address(RVA = "0x18543B4", Offset = "0x18543B4", VA = "0x18543B4", Slot = "30")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001C9")]
		private bool System.Collections.IList.IsFixedSize
		{
			[Token(Token = "0x600126F")]
			[Address(RVA = "0x185457C", Offset = "0x185457C", VA = "0x185457C", Slot = "42")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001CA")]
		private bool System.Collections.IList.IsReadOnly
		{
			[Token(Token = "0x6001270")]
			[Address(RVA = "0x1854584", Offset = "0x1854584", VA = "0x1854584", Slot = "41")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001CB")]
		private object System.Collections.IList.Item
		{
			[Token(Token = "0x6001273")]
			[Address(RVA = "0x18545D0", Offset = "0x18545D0", VA = "0x18545D0", Slot = "36")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001274")]
			[Address(RVA = "0x18545E0", Offset = "0x18545E0", VA = "0x18545E0", Slot = "37")]
			set
			{
			}
		}

		[Token(Token = "0x170001CC")]
		public int Count
		{
			[Token(Token = "0x6001276")]
			[Address(RVA = "0x1852E98", Offset = "0x1852E98", VA = "0x1852E98", Slot = "48")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001CD")]
		private bool System.Collections.ICollection.IsSynchronized
		{
			[Token(Token = "0x6001277")]
			[Address(RVA = "0x1854630", Offset = "0x1854630", VA = "0x1854630", Slot = "50")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001CE")]
		private object System.Collections.ICollection.SyncRoot
		{
			[Token(Token = "0x6001278")]
			[Address(RVA = "0x1854638", Offset = "0x1854638", VA = "0x1854638", Slot = "49")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600123C")]
		[Address(RVA = "0x184EB04", Offset = "0x184EB04", VA = "0x184EB04")]
		internal JContainer()
		{
		}

		[Token(Token = "0x600123D")]
		[Address(RVA = "0x184EB88", Offset = "0x184EB88", VA = "0x184EB88")]
		internal JContainer(JContainer other)
		{
		}

		[Token(Token = "0x600123E")]
		[Address(RVA = "0x18511A0", Offset = "0x18511A0", VA = "0x18511A0")]
		internal void CheckReentrancy()
		{
		}

		[Token(Token = "0x6001240")]
		[Address(RVA = "0x184EF68", Offset = "0x184EF68", VA = "0x184EF68")]
		internal bool ContentsEqual(JContainer container)
		{
			return default(bool);
		}

		[Token(Token = "0x6001243")]
		[Address(RVA = "0x1851468", Offset = "0x1851468", VA = "0x1851468", Slot = "20")]
		public override JEnumerable<JToken> Children()
		{
			return default(JEnumerable<JToken>);
		}

		[Token(Token = "0x6001244")]
		public override IEnumerable<T> Values<T>()
		{
			return null;
		}

		[Token(Token = "0x6001245")]
		[Address(RVA = "0x18514E4", Offset = "0x18514E4", VA = "0x18514E4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x9AA4F8", Offset = "0x9AA4F8")]
		public IEnumerable<JToken> Descendants()
		{
			return null;
		}

		[Token(Token = "0x6001246")]
		[Address(RVA = "0x18515A0", Offset = "0x18515A0", VA = "0x18515A0")]
		internal bool IsMultiContent(object content)
		{
			return default(bool);
		}

		[Token(Token = "0x6001247")]
		[Address(RVA = "0x1851668", Offset = "0x1851668", VA = "0x1851668")]
		internal JToken EnsureParentToken(JToken item)
		{
			return null;
		}

		[Token(Token = "0x6001248")]
		[Address(RVA = "0x18501A8", Offset = "0x18501A8", VA = "0x18501A8")]
		internal int IndexOfItem(JToken item)
		{
			return default(int);
		}

		[Token(Token = "0x6001249")]
		[Address(RVA = "0x18517A4", Offset = "0x18517A4", VA = "0x18517A4", Slot = "52")]
		internal virtual void InsertItem(int index, JToken item)
		{
		}

		[Token(Token = "0x600124A")]
		[Address(RVA = "0x1851BB4", Offset = "0x1851BB4", VA = "0x1851BB4", Slot = "53")]
		internal virtual void RemoveItemAt(int index)
		{
		}

		[Token(Token = "0x600124B")]
		[Address(RVA = "0x1852034", Offset = "0x1852034", VA = "0x1852034", Slot = "54")]
		internal virtual bool RemoveItem(JToken item)
		{
			return default(bool);
		}

		[Token(Token = "0x600124C")]
		[Address(RVA = "0x1852080", Offset = "0x1852080", VA = "0x1852080", Slot = "55")]
		internal virtual JToken GetItem(int index)
		{
			return null;
		}

		[Token(Token = "0x600124D")]
		[Address(RVA = "0x1852154", Offset = "0x1852154", VA = "0x1852154", Slot = "56")]
		internal virtual void SetItem(int index, JToken item)
		{
		}

		[Token(Token = "0x600124E")]
		[Address(RVA = "0x1852720", Offset = "0x1852720", VA = "0x1852720", Slot = "57")]
		internal virtual void ClearItems()
		{
		}

		[Token(Token = "0x600124F")]
		[Address(RVA = "0x1852A70", Offset = "0x1852A70", VA = "0x1852A70", Slot = "58")]
		internal virtual void ReplaceItem(JToken existing, JToken replacement)
		{
		}

		[Token(Token = "0x6001250")]
		[Address(RVA = "0x1852ACC", Offset = "0x1852ACC", VA = "0x1852ACC", Slot = "59")]
		internal virtual bool ContainsItem(JToken item)
		{
			return default(bool);
		}

		[Token(Token = "0x6001251")]
		[Address(RVA = "0x1852AE8", Offset = "0x1852AE8", VA = "0x1852AE8", Slot = "60")]
		internal virtual void CopyItemsTo(Array array, int arrayIndex)
		{
		}

		[Token(Token = "0x6001252")]
		[Address(RVA = "0x1852644", Offset = "0x1852644", VA = "0x1852644")]
		internal static bool IsTokenUnchanged(JToken currentValue, JToken newValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6001253")]
		[Address(RVA = "0x1852F5C", Offset = "0x1852F5C", VA = "0x1852F5C", Slot = "61")]
		internal virtual void ValidateToken(JToken o, JToken existing)
		{
		}

		[Token(Token = "0x6001254")]
		[Address(RVA = "0x1853108", Offset = "0x1853108", VA = "0x1853108", Slot = "62")]
		public virtual void Add(object content)
		{
		}

		[Token(Token = "0x6001255")]
		[Address(RVA = "0x1853598", Offset = "0x1853598", VA = "0x1853598")]
		public void AddFirst(object content)
		{
		}

		[Token(Token = "0x6001256")]
		[Address(RVA = "0x18531E8", Offset = "0x18531E8", VA = "0x18531E8")]
		internal void AddInternal(int index, object content)
		{
		}

		[Token(Token = "0x6001257")]
		[Address(RVA = "0x18535A8", Offset = "0x18535A8", VA = "0x18535A8")]
		internal JToken CreateFromContent(object content)
		{
			return null;
		}

		[Token(Token = "0x6001258")]
		[Address(RVA = "0x1853668", Offset = "0x1853668", VA = "0x1853668")]
		public JsonWriter CreateWriter()
		{
			return null;
		}

		[Token(Token = "0x6001259")]
		[Address(RVA = "0x185375C", Offset = "0x185375C", VA = "0x185375C")]
		public void ReplaceAll(object content)
		{
		}

		[Token(Token = "0x600125A")]
		[Address(RVA = "0x18537A4", Offset = "0x18537A4", VA = "0x18537A4")]
		public void RemoveAll()
		{
		}

		[Token(Token = "0x600125B")]
		[Address(RVA = "0x184F4E0", Offset = "0x184F4E0", VA = "0x184F4E0")]
		internal void ReadTokenFrom(JsonReader r)
		{
		}

		[Token(Token = "0x600125C")]
		[Address(RVA = "0x18537B4", Offset = "0x18537B4", VA = "0x18537B4")]
		internal void ReadContentFrom(JsonReader r)
		{
		}

		[Token(Token = "0x600125D")]
		[Address(RVA = "0x18502CC", Offset = "0x18502CC", VA = "0x18502CC")]
		internal int ContentsHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600125E")]
		[Address(RVA = "0x1854330", Offset = "0x1854330", VA = "0x1854330", Slot = "26")]
		private int System.Collections.Generic.IList<Newtonsoft.Json.Linq.JToken>.IndexOf(JToken item)
		{
			return default(int);
		}

		[Token(Token = "0x600125F")]
		[Address(RVA = "0x1854334", Offset = "0x1854334", VA = "0x1854334", Slot = "27")]
		private void System.Collections.Generic.IList<Newtonsoft.Json.Linq.JToken>.Insert(int index, JToken item)
		{
		}

		[Token(Token = "0x6001260")]
		[Address(RVA = "0x1854344", Offset = "0x1854344", VA = "0x1854344", Slot = "28")]
		private void System.Collections.Generic.IList<Newtonsoft.Json.Linq.JToken>.RemoveAt(int index)
		{
		}

		[Token(Token = "0x6001263")]
		[Address(RVA = "0x1854374", Offset = "0x1854374", VA = "0x1854374", Slot = "31")]
		private void System.Collections.Generic.ICollection<Newtonsoft.Json.Linq.JToken>.Add(JToken item)
		{
		}

		[Token(Token = "0x6001264")]
		[Address(RVA = "0x1854384", Offset = "0x1854384", VA = "0x1854384", Slot = "32")]
		private void System.Collections.Generic.ICollection<Newtonsoft.Json.Linq.JToken>.Clear()
		{
		}

		[Token(Token = "0x6001265")]
		[Address(RVA = "0x1854394", Offset = "0x1854394", VA = "0x1854394", Slot = "33")]
		private bool System.Collections.Generic.ICollection<Newtonsoft.Json.Linq.JToken>.Contains(JToken item)
		{
			return default(bool);
		}

		[Token(Token = "0x6001266")]
		[Address(RVA = "0x18543A4", Offset = "0x18543A4", VA = "0x18543A4", Slot = "34")]
		private void System.Collections.Generic.ICollection<Newtonsoft.Json.Linq.JToken>.CopyTo(JToken[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6001268")]
		[Address(RVA = "0x18543BC", Offset = "0x18543BC", VA = "0x18543BC", Slot = "35")]
		private bool System.Collections.Generic.ICollection<Newtonsoft.Json.Linq.JToken>.Remove(JToken item)
		{
			return default(bool);
		}

		[Token(Token = "0x6001269")]
		[Address(RVA = "0x18543CC", Offset = "0x18543CC", VA = "0x18543CC")]
		private JToken EnsureValue(object value)
		{
			return null;
		}

		[Token(Token = "0x600126A")]
		[Address(RVA = "0x185448C", Offset = "0x185448C", VA = "0x185448C", Slot = "38")]
		private int System.Collections.IList.Add(object value)
		{
			return default(int);
		}

		[Token(Token = "0x600126B")]
		[Address(RVA = "0x18544D0", Offset = "0x18544D0", VA = "0x18544D0", Slot = "40")]
		private void System.Collections.IList.Clear()
		{
		}

		[Token(Token = "0x600126C")]
		[Address(RVA = "0x18544E0", Offset = "0x18544E0", VA = "0x18544E0", Slot = "39")]
		private bool System.Collections.IList.Contains(object value)
		{
			return default(bool);
		}

		[Token(Token = "0x600126D")]
		[Address(RVA = "0x1854514", Offset = "0x1854514", VA = "0x1854514", Slot = "43")]
		private int System.Collections.IList.IndexOf(object value)
		{
			return default(int);
		}

		[Token(Token = "0x600126E")]
		[Address(RVA = "0x185453C", Offset = "0x185453C", VA = "0x185453C", Slot = "44")]
		private void System.Collections.IList.Insert(int index, object value)
		{
		}

		[Token(Token = "0x6001271")]
		[Address(RVA = "0x185458C", Offset = "0x185458C", VA = "0x185458C", Slot = "45")]
		private void System.Collections.IList.Remove(object value)
		{
		}

		[Token(Token = "0x6001272")]
		[Address(RVA = "0x18545C0", Offset = "0x18545C0", VA = "0x18545C0", Slot = "46")]
		private void System.Collections.IList.RemoveAt(int index)
		{
		}

		[Token(Token = "0x6001275")]
		[Address(RVA = "0x1854620", Offset = "0x1854620", VA = "0x1854620", Slot = "47")]
		private void System.Collections.ICollection.CopyTo(Array array, int index)
		{
		}
	}
	[Token(Token = "0x200026C")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x9A6404", Offset = "0x9A6404")]
	public struct JEnumerable<T> : IJEnumerable<T>, IEnumerable<T>, IEnumerable where T : JToken
	{
		[Token(Token = "0x4000CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly JEnumerable<T> Empty;

		[Token(Token = "0x4000CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IEnumerable<T> _enumerable;

		[Token(Token = "0x170001CF")]
		public IJEnumerable<JToken> Item
		{
			[Token(Token = "0x600127C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001279")]
		public JEnumerable(IEnumerable<T> enumerable)
		{
		}

		[Token(Token = "0x600127A")]
		public IEnumerator<T> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600127B")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600127D")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600127E")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x200026D")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x9A643C", Offset = "0x9A643C")]
	public class JObject : JContainer, IDictionary<string, JToken>, ICollection<KeyValuePair<string, JToken>>, IEnumerable<KeyValuePair<string, JToken>>, IEnumerable, INotifyPropertyChanged, ICustomTypeDescriptor
	{
		[Token(Token = "0x2000338")]
		public class JPropertKeyedCollection : KeyedCollection<string, JToken>
		{
			[Token(Token = "0x17000255")]
			public new IDictionary<string, JToken> Dictionary
			{
				[Token(Token = "0x6001662")]
				[Address(RVA = "0x1855840", Offset = "0x1855840", VA = "0x1855840")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600165F")]
			[Address(RVA = "0x1855100", Offset = "0x1855100", VA = "0x1855100")]
			public JPropertKeyedCollection(IEqualityComparer<string> comparer)
			{
			}

			[Token(Token = "0x6001660")]
			[Address(RVA = "0x18583B0", Offset = "0x18583B0", VA = "0x18583B0", Slot = "39")]
			protected override string GetKeyForItem(JToken item)
			{
				return null;
			}

			[Token(Token = "0x6001661")]
			[Address(RVA = "0x18584EC", Offset = "0x18584EC", VA = "0x18584EC", Slot = "36")]
			protected override void InsertItem(int index, JToken item)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000339")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6934", Offset = "0x9A6934")]
		private sealed class <>c
		{
			[Token(Token = "0x4000F2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000F30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<JProperty, JToken> <>9__21_0;

			[Token(Token = "0x6001664")]
			[Address(RVA = "0x1857E50", Offset = "0x1857E50", VA = "0x1857E50")]
			public <>c()
			{
			}

			[Token(Token = "0x6001665")]
			[Address(RVA = "0x1857E58", Offset = "0x1857E58", VA = "0x1857E58")]
			internal JToken <PropertyValues>b__21_0(JProperty p)
			{
				return null;
			}
		}

		[Token(Token = "0x200033A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6944", Offset = "0x9A6944")]
		private sealed class <GetEnumerator>d__49 : IEnumerator<KeyValuePair<string, JToken>>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private KeyValuePair<string, JToken> <>2__current;

			[Token(Token = "0x4000F33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JObject <>4__this;

			[Token(Token = "0x4000F34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private IEnumerator<JToken> <>7__wrap1;

			[Token(Token = "0x17000256")]
			private KeyValuePair<string, JToken> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.String,Newtonsoft.Json.Linq.JToken>>.Current
			{
				[Token(Token = "0x600166A")]
				[Address(RVA = "0x18582D8", Offset = "0x18582D8", VA = "0x18582D8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(KeyValuePair<string, JToken>);
				}
			}

			[Token(Token = "0x17000257")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600166C")]
				[Address(RVA = "0x185834C", Offset = "0x185834C", VA = "0x185834C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001666")]
			[Address(RVA = "0x1857678", Offset = "0x1857678", VA = "0x1857678")]
			[DebuggerHidden]
			public <GetEnumerator>d__49(int <>1__state)
			{
			}

			[Token(Token = "0x6001667")]
			[Address(RVA = "0x1857E84", Offset = "0x1857E84", VA = "0x1857E84", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001668")]
			[Address(RVA = "0x1857F60", Offset = "0x1857F60", VA = "0x1857F60", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001669")]
			[Address(RVA = "0x1857EA0", Offset = "0x1857EA0", VA = "0x1857EA0")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x600166B")]
			[Address(RVA = "0x18582E4", Offset = "0x18582E4", VA = "0x18582E4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private JPropertKeyedCollection _properties;

		[Token(Token = "0x170001D0")]
		protected override IList<JToken> ChildrenTokens
		{
			[Token(Token = "0x6001280")]
			[Address(RVA = "0x1854F20", Offset = "0x1854F20", VA = "0x1854F20", Slot = "51")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D1")]
		public override JTokenType Type
		{
			[Token(Token = "0x600128D")]
			[Address(RVA = "0x1855934", Offset = "0x1855934", VA = "0x1855934", Slot = "13")]
			get
			{
				return default(JTokenType);
			}
		}

		[Token(Token = "0x170001D2")]
		public override JToken Item
		{
			[Token(Token = "0x6001291")]
			[Address(RVA = "0x1855AC8", Offset = "0x1855AC8", VA = "0x1855AC8", Slot = "15")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001292")]
			[Address(RVA = "0x1855CB4", Offset = "0x1855CB4", VA = "0x1855CB4", Slot = "16")]
			set
			{
			}
		}

		[Token(Token = "0x170001D3")]
		public new JToken Item
		{
			[Token(Token = "0x6001293")]
			[Address(RVA = "0x1855C30", Offset = "0x1855C30", VA = "0x1855C30", Slot = "63")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001294")]
			[Address(RVA = "0x1855E24", Offset = "0x1855E24", VA = "0x1855E24", Slot = "64")]
			set
			{
			}
		}

		[Token(Token = "0x170001D4")]
		private ICollection<string> System.Collections.Generic.IDictionary<System.String,Newtonsoft.Json.Linq.JToken>.Keys
		{
			[Token(Token = "0x600129C")]
			[Address(RVA = "0x1856BFC", Offset = "0x1856BFC", VA = "0x1856BFC", Slot = "65")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D5")]
		private ICollection<JToken> System.Collections.Generic.IDictionary<System.String,Newtonsoft.Json.Linq.JToken>.Values
		{
			[Token(Token = "0x600129F")]
			[Address(RVA = "0x1856DC0", Offset = "0x1856DC0", VA = "0x1856DC0", Slot = "66")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D6")]
		private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Newtonsoft.Json.Linq.JToken>>.IsReadOnly
		{
			[Token(Token = "0x60012A4")]
			[Address(RVA = "0x1857490", Offset = "0x1857490", VA = "0x1857490", Slot = "72")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1400000B")]
		public event PropertyChangedEventHandler PropertyChanged
		{
			[Token(Token = "0x6001281")]
			[Address(RVA = "0x1854F28", Offset = "0x1854F28", VA = "0x1854F28", Slot = "91")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA55C", Offset = "0x9AA55C")]
			add
			{
			}
			[Token(Token = "0x6001282")]
			[Address(RVA = "0x1855014", Offset = "0x1855014", VA = "0x1855014", Slot = "92")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA56C", Offset = "0x9AA56C")]
			remove
			{
			}
		}

		[Token(Token = "0x6001283")]
		[Address(RVA = "0x1853F04", Offset = "0x1853F04", VA = "0x1853F04")]
		public JObject()
		{
		}

		[Token(Token = "0x6001284")]
		[Address(RVA = "0x1855160", Offset = "0x1855160", VA = "0x1855160")]
		public JObject(JObject other)
		{
		}

		[Token(Token = "0x6001285")]
		[Address(RVA = "0x1855204", Offset = "0x1855204", VA = "0x1855204")]
		public JObject(params object[] content)
		{
		}

		[Token(Token = "0x6001286")]
		[Address(RVA = "0x1855208", Offset = "0x1855208", VA = "0x1855208")]
		public JObject(object content)
		{
		}

		[Token(Token = "0x6001287")]
		[Address(RVA = "0x18552C4", Offset = "0x18552C4", VA = "0x18552C4", Slot = "12")]
		internal override bool DeepEquals(JToken node)
		{
			return default(bool);
		}

		[Token(Token = "0x6001288")]
		[Address(RVA = "0x1855364", Offset = "0x1855364", VA = "0x1855364", Slot = "52")]
		internal override void InsertItem(int index, JToken item)
		{
		}

		[Token(Token = "0x6001289")]
		[Address(RVA = "0x18553C8", Offset = "0x18553C8", VA = "0x18553C8", Slot = "61")]
		internal override void ValidateToken(JToken o, JToken existing)
		{
		}

		[Token(Token = "0x600128A")]
		[Address(RVA = "0x1855890", Offset = "0x1855890", VA = "0x1855890")]
		internal void InternalPropertyChanged(JProperty childProperty)
		{
		}

		[Token(Token = "0x600128B")]
		[Address(RVA = "0x18558D0", Offset = "0x18558D0", VA = "0x18558D0")]
		internal void InternalPropertyChanging(JProperty childProperty)
		{
		}

		[Token(Token = "0x600128C")]
		[Address(RVA = "0x18558D4", Offset = "0x18558D4", VA = "0x18558D4", Slot = "11")]
		internal override JToken CloneToken()
		{
			return null;
		}

		[Token(Token = "0x600128E")]
		[Address(RVA = "0x185593C", Offset = "0x185593C", VA = "0x185593C")]
		public IEnumerable<JProperty> Properties()
		{
			return null;
		}

		[Token(Token = "0x600128F")]
		[Address(RVA = "0x18540E8", Offset = "0x18540E8", VA = "0x18540E8")]
		public JProperty Property(string name)
		{
			return null;
		}

		[Token(Token = "0x6001290")]
		[Address(RVA = "0x185599C", Offset = "0x185599C", VA = "0x185599C")]
		public JEnumerable<JToken> PropertyValues()
		{
			return default(JEnumerable<JToken>);
		}

		[Token(Token = "0x6001295")]
		[Address(RVA = "0x185611C", Offset = "0x185611C", VA = "0x185611C")]
		public new static JObject Load(JsonReader reader)
		{
			return null;
		}

		[Token(Token = "0x6001296")]
		[Address(RVA = "0x185638C", Offset = "0x185638C", VA = "0x185638C")]
		public new static JObject Parse(string json)
		{
			return null;
		}

		[Token(Token = "0x6001297")]
		[Address(RVA = "0x1856410", Offset = "0x1856410", VA = "0x1856410")]
		public new static JObject FromObject(object o)
		{
			return null;
		}

		[Token(Token = "0x6001298")]
		[Address(RVA = "0x1856474", Offset = "0x1856474", VA = "0x1856474")]
		public new static JObject FromObject(object o, JsonSerializer jsonSerializer)
		{
			return null;
		}

		[Token(Token = "0x6001299")]
		[Address(RVA = "0x1856680", Offset = "0x1856680", VA = "0x1856680", Slot = "22")]
		public override void WriteTo(JsonWriter writer, params JsonConverter[] converters)
		{
		}

		[Token(Token = "0x600129A")]
		[Address(RVA = "0x1856A70", Offset = "0x1856A70", VA = "0x1856A70", Slot = "68")]
		public void Add(string propertyName, JToken value)
		{
		}

		[Token(Token = "0x600129B")]
		[Address(RVA = "0x1856AF4", Offset = "0x1856AF4", VA = "0x1856AF4", Slot = "67")]
		private bool System.Collections.Generic.IDictionary<System.String,Newtonsoft.Json.Linq.JToken>.ContainsKey(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x600129D")]
		[Address(RVA = "0x1856CC8", Offset = "0x1856CC8", VA = "0x1856CC8", Slot = "69")]
		public bool Remove(string propertyName)
		{
			return default(bool);
		}

		[Token(Token = "0x600129E")]
		[Address(RVA = "0x1856D84", Offset = "0x1856D84", VA = "0x1856D84", Slot = "70")]
		public bool TryGetValue(string propertyName, out JToken value)
		{
			return default(bool);
		}

		[Token(Token = "0x60012A0")]
		[Address(RVA = "0x1856E8C", Offset = "0x1856E8C", VA = "0x1856E8C", Slot = "73")]
		private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Newtonsoft.Json.Linq.JToken>>.Add(KeyValuePair<string, JToken> item)
		{
		}

		[Token(Token = "0x60012A1")]
		[Address(RVA = "0x1856F4C", Offset = "0x1856F4C", VA = "0x1856F4C", Slot = "74")]
		private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Newtonsoft.Json.Linq.JToken>>.Clear()
		{
		}

		[Token(Token = "0x60012A2")]
		[Address(RVA = "0x1856F5C", Offset = "0x1856F5C", VA = "0x1856F5C", Slot = "75")]
		private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Newtonsoft.Json.Linq.JToken>>.Contains(KeyValuePair<string, JToken> item)
		{
			return default(bool);
		}

		[Token(Token = "0x60012A3")]
		[Address(RVA = "0x1856FF0", Offset = "0x1856FF0", VA = "0x1856FF0", Slot = "76")]
		private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Newtonsoft.Json.Linq.JToken>>.CopyTo(KeyValuePair<string, JToken>[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x60012A5")]
		[Address(RVA = "0x1857498", Offset = "0x1857498", VA = "0x1857498", Slot = "77")]
		private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Newtonsoft.Json.Linq.JToken>>.Remove(KeyValuePair<string, JToken> item)
		{
			return default(bool);
		}

		[Token(Token = "0x60012A6")]
		[Address(RVA = "0x1857600", Offset = "0x1857600", VA = "0x1857600", Slot = "23")]
		internal override int GetDeepHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60012A7")]
		[Address(RVA = "0x1857604", Offset = "0x1857604", VA = "0x1857604", Slot = "78")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x9AA57C", Offset = "0x9AA57C")]
		public IEnumerator<KeyValuePair<string, JToken>> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x60012A8")]
		[Address(RVA = "0x18576A4", Offset = "0x18576A4", VA = "0x18576A4", Slot = "93")]
		protected virtual void OnPropertyChanged(string propertyName)
		{
		}

		[Token(Token = "0x60012A9")]
		[Address(RVA = "0x1857738", Offset = "0x1857738", VA = "0x1857738", Slot = "88")]
		private PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties()
		{
			return null;
		}

		[Token(Token = "0x60012AA")]
		[Address(RVA = "0x18577E4", Offset = "0x18577E4", VA = "0x18577E4")]
		private static Type GetTokenPropertyType(JToken token)
		{
			return null;
		}

		[Token(Token = "0x60012AB")]
		[Address(RVA = "0x18578CC", Offset = "0x18578CC", VA = "0x18578CC", Slot = "89")]
		private PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes)
		{
			return null;
		}

		[Token(Token = "0x60012AC")]
		[Address(RVA = "0x1857C28", Offset = "0x1857C28", VA = "0x1857C28", Slot = "79")]
		private AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes()
		{
			return null;
		}

		[Token(Token = "0x60012AD")]
		[Address(RVA = "0x1857C90", Offset = "0x1857C90", VA = "0x1857C90", Slot = "80")]
		private string System.ComponentModel.ICustomTypeDescriptor.GetClassName()
		{
			return null;
		}

		[Token(Token = "0x60012AE")]
		[Address(RVA = "0x1857C98", Offset = "0x1857C98", VA = "0x1857C98", Slot = "81")]
		private string System.ComponentModel.ICustomTypeDescriptor.GetComponentName()
		{
			return null;
		}

		[Token(Token = "0x60012AF")]
		[Address(RVA = "0x1857CA0", Offset = "0x1857CA0", VA = "0x1857CA0", Slot = "82")]
		private TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter()
		{
			return null;
		}

		[Token(Token = "0x60012B0")]
		[Address(RVA = "0x1857CFC", Offset = "0x1857CFC", VA = "0x1857CFC", Slot = "83")]
		private EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent()
		{
			return null;
		}

		[Token(Token = "0x60012B1")]
		[Address(RVA = "0x1857D04", Offset = "0x1857D04", VA = "0x1857D04", Slot = "84")]
		private PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty()
		{
			return null;
		}

		[Token(Token = "0x60012B2")]
		[Address(RVA = "0x1857D0C", Offset = "0x1857D0C", VA = "0x1857D0C", Slot = "85")]
		private object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType)
		{
			return null;
		}

		[Token(Token = "0x60012B3")]
		[Address(RVA = "0x1857D14", Offset = "0x1857D14", VA = "0x1857D14", Slot = "87")]
		private EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes)
		{
			return null;
		}

		[Token(Token = "0x60012B4")]
		[Address(RVA = "0x1857D7C", Offset = "0x1857D7C", VA = "0x1857D7C", Slot = "86")]
		private EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents()
		{
			return null;
		}

		[Token(Token = "0x60012B5")]
		[Address(RVA = "0x1857DE4", Offset = "0x1857DE4", VA = "0x1857DE4", Slot = "90")]
		private object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd)
		{
			return null;
		}
	}
	[Token(Token = "0x200026E")]
	internal class JPath
	{
		[Token(Token = "0x4000CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly string _expression;

		[Token(Token = "0x4000CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8570", Offset = "0x9A8570")]
		private List<object> <Parts>k__BackingField;

		[Token(Token = "0x4000CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int _currentIndex;

		[Token(Token = "0x170001D7")]
		public List<object> Parts
		{
			[Token(Token = "0x60012B6")]
			[Address(RVA = "0x18586B0", Offset = "0x18586B0", VA = "0x18586B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA5E0", Offset = "0x9AA5E0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60012B7")]
			[Address(RVA = "0x18586B8", Offset = "0x18586B8", VA = "0x18586B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA5F0", Offset = "0x9AA5F0")]
			private set
			{
			}
		}

		[Token(Token = "0x60012B8")]
		[Address(RVA = "0x18586C0", Offset = "0x18586C0", VA = "0x18586C0")]
		public JPath(string expression)
		{
		}

		[Token(Token = "0x60012B9")]
		[Address(RVA = "0x1858760", Offset = "0x1858760", VA = "0x1858760")]
		private void ParseMain()
		{
		}

		[Token(Token = "0x60012BA")]
		[Address(RVA = "0x1858A14", Offset = "0x1858A14", VA = "0x1858A14")]
		private void ParseIndexer(char indexerOpenChar)
		{
		}

		[Token(Token = "0x60012BB")]
		[Address(RVA = "0x1858CE0", Offset = "0x1858CE0", VA = "0x1858CE0")]
		internal JToken Evaluate(JToken root, bool errorWhenNoMatch)
		{
			return null;
		}
	}
	[Token(Token = "0x200026F")]
	public class JProperty : JContainer
	{
		[Token(Token = "0x4000CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly List<JToken> _content;

		[Token(Token = "0x4000CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly string _name;

		[Token(Token = "0x170001D8")]
		protected override IList<JToken> ChildrenTokens
		{
			[Token(Token = "0x60012BC")]
			[Address(RVA = "0x1859494", Offset = "0x1859494", VA = "0x1859494", Slot = "51")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D9")]
		public string Name
		{
			[Token(Token = "0x60012BD")]
			[Address(RVA = "0x1855838", Offset = "0x1855838", VA = "0x1855838")]
			[DebuggerStepThrough]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DA")]
		public new JToken Value
		{
			[Token(Token = "0x60012BE")]
			[Address(RVA = "0x1853D9C", Offset = "0x1853D9C", VA = "0x1853D9C")]
			[DebuggerStepThrough]
			get
			{
				return null;
			}
			[Token(Token = "0x60012BF")]
			[Address(RVA = "0x1855EE4", Offset = "0x1855EE4", VA = "0x1855EE4")]
			set
			{
			}
		}

		[Token(Token = "0x170001DB")]
		public override JTokenType Type
		{
			[Token(Token = "0x60012CA")]
			[Address(RVA = "0x1859F04", Offset = "0x1859F04", VA = "0x1859F04", Slot = "13")]
			[DebuggerStepThrough]
			get
			{
				return default(JTokenType);
			}
		}

		[Token(Token = "0x60012C0")]
		[Address(RVA = "0x185949C", Offset = "0x185949C", VA = "0x185949C")]
		public JProperty(JProperty other)
		{
		}

		[Token(Token = "0x60012C1")]
		[Address(RVA = "0x1859530", Offset = "0x1859530", VA = "0x1859530", Slot = "55")]
		internal override JToken GetItem(int index)
		{
			return null;
		}

		[Token(Token = "0x60012C2")]
		[Address(RVA = "0x18595BC", Offset = "0x18595BC", VA = "0x18595BC", Slot = "56")]
		internal override void SetItem(int index, JToken item)
		{
		}

		[Token(Token = "0x60012C3")]
		[Address(RVA = "0x1859874", Offset = "0x1859874", VA = "0x1859874", Slot = "54")]
		internal override bool RemoveItem(JToken item)
		{
			return default(bool);
		}

		[Token(Token = "0x60012C4")]
		[Address(RVA = "0x18599B8", Offset = "0x18599B8", VA = "0x18599B8", Slot = "53")]
		internal override void RemoveItemAt(int index)
		{
		}

		[Token(Token = "0x60012C5")]
		[Address(RVA = "0x1859AFC", Offset = "0x1859AFC", VA = "0x1859AFC", Slot = "52")]
		internal override void InsertItem(int index, JToken item)
		{
		}

		[Token(Token = "0x60012C6")]
		[Address(RVA = "0x1859C70", Offset = "0x1859C70", VA = "0x1859C70", Slot = "59")]
		internal override bool ContainsItem(JToken item)
		{
			return default(bool);
		}

		[Token(Token = "0x60012C7")]
		[Address(RVA = "0x1859C98", Offset = "0x1859C98", VA = "0x1859C98", Slot = "57")]
		internal override void ClearItems()
		{
		}

		[Token(Token = "0x60012C8")]
		[Address(RVA = "0x1859DDC", Offset = "0x1859DDC", VA = "0x1859DDC", Slot = "12")]
		internal override bool DeepEquals(JToken node)
		{
			return default(bool);
		}

		[Token(Token = "0x60012C9")]
		[Address(RVA = "0x1859EA4", Offset = "0x1859EA4", VA = "0x1859EA4", Slot = "11")]
		internal override JToken CloneToken()
		{
			return null;
		}

		[Token(Token = "0x60012CB")]
		[Address(RVA = "0x185404C", Offset = "0x185404C", VA = "0x185404C")]
		internal JProperty(string name)
		{
		}

		[Token(Token = "0x60012CC")]
		[Address(RVA = "0x1859F0C", Offset = "0x1859F0C", VA = "0x1859F0C")]
		public JProperty(string name, params object[] content)
		{
		}

		[Token(Token = "0x60012CD")]
		[Address(RVA = "0x185603C", Offset = "0x185603C", VA = "0x185603C")]
		public JProperty(string name, object content)
		{
		}

		[Token(Token = "0x60012CE")]
		[Address(RVA = "0x1859F10", Offset = "0x1859F10", VA = "0x1859F10", Slot = "22")]
		public override void WriteTo(JsonWriter writer, params JsonConverter[] converters)
		{
		}

		[Token(Token = "0x60012CF")]
		[Address(RVA = "0x1859F8C", Offset = "0x1859F8C", VA = "0x1859F8C", Slot = "23")]
		internal override int GetDeepHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60012D0")]
		[Address(RVA = "0x185A004", Offset = "0x185A004", VA = "0x185A004")]
		public new static JProperty Load(JsonReader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000270")]
	public class JPropertyDescriptor : PropertyDescriptor
	{
		[Token(Token = "0x4000CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly Type _propertyType;

		[Token(Token = "0x170001DC")]
		public override Type ComponentType
		{
			[Token(Token = "0x60012D8")]
			[Address(RVA = "0x185A520", Offset = "0x185A520", VA = "0x185A520", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DD")]
		public override bool IsReadOnly
		{
			[Token(Token = "0x60012D9")]
			[Address(RVA = "0x185A590", Offset = "0x185A590", VA = "0x185A590", Slot = "14")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001DE")]
		public override Type PropertyType
		{
			[Token(Token = "0x60012DA")]
			[Address(RVA = "0x185A598", Offset = "0x185A598", VA = "0x185A598", Slot = "15")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DF")]
		protected override int NameHashCode
		{
			[Token(Token = "0x60012DB")]
			[Address(RVA = "0x185A5A0", Offset = "0x185A5A0", VA = "0x185A5A0", Slot = "8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60012D1")]
		[Address(RVA = "0x1857B90", Offset = "0x1857B90", VA = "0x1857B90")]
		public JPropertyDescriptor(string name, Type propertyType)
		{
		}

		[Token(Token = "0x60012D2")]
		[Address(RVA = "0x185A2E8", Offset = "0x185A2E8", VA = "0x185A2E8")]
		private static JObject CastInstance(object instance)
		{
			return null;
		}

		[Token(Token = "0x60012D3")]
		[Address(RVA = "0x185A3B4", Offset = "0x185A3B4", VA = "0x185A3B4", Slot = "16")]
		public override bool CanResetValue(object component)
		{
			return default(bool);
		}

		[Token(Token = "0x60012D4")]
		[Address(RVA = "0x185A3BC", Offset = "0x185A3BC", VA = "0x185A3BC", Slot = "17")]
		public override object GetValue(object component)
		{
			return null;
		}

		[Token(Token = "0x60012D5")]
		[Address(RVA = "0x185A40C", Offset = "0x185A40C", VA = "0x185A40C", Slot = "19")]
		public override void ResetValue(object component)
		{
		}

		[Token(Token = "0x60012D6")]
		[Address(RVA = "0x185A410", Offset = "0x185A410", VA = "0x185A410", Slot = "20")]
		public override void SetValue(object component, object value)
		{
		}

		[Token(Token = "0x60012D7")]
		[Address(RVA = "0x185A518", Offset = "0x185A518", VA = "0x185A518", Slot = "21")]
		public override bool ShouldSerializeValue(object component)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000271")]
	public class JRaw : JValue
	{
		[Token(Token = "0x60012DC")]
		[Address(RVA = "0x185A5A8", Offset = "0x185A5A8", VA = "0x185A5A8")]
		public JRaw(JRaw other)
		{
		}

		[Token(Token = "0x60012DD")]
		[Address(RVA = "0x185A620", Offset = "0x185A620", VA = "0x185A620")]
		public JRaw(object rawJson)
		{
		}

		[Token(Token = "0x60012DE")]
		[Address(RVA = "0x185A654", Offset = "0x185A654", VA = "0x185A654")]
		public static JRaw Create(JsonReader reader)
		{
			return null;
		}

		[Token(Token = "0x60012DF")]
		[Address(RVA = "0x185A910", Offset = "0x185A910", VA = "0x185A910", Slot = "11")]
		internal override JToken CloneToken()
		{
			return null;
		}
	}
	[Token(Token = "0x2000272")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x9A6474", Offset = "0x9A6474")]
	public abstract class JToken : IJEnumerable<JToken>, IEnumerable<JToken>, IEnumerable, IJsonLineInfo, ICloneable
	{
		[Token(Token = "0x200033B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6954", Offset = "0x9A6954")]
		private sealed class <Ancestors>d__29 : IEnumerable<JToken>, IEnumerable, IEnumerator<JToken>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JToken <>2__current;

			[Token(Token = "0x4000F37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000F38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JToken <>4__this;

			[Token(Token = "0x4000F39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private JToken <parent>5__2;

			[Token(Token = "0x17000258")]
			private JToken System.Collections.Generic.IEnumerator<Newtonsoft.Json.Linq.JToken>.Current
			{
				[Token(Token = "0x6001670")]
				[Address(RVA = "0x18602B0", Offset = "0x18602B0", VA = "0x18602B0", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000259")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001672")]
				[Address(RVA = "0x1860320", Offset = "0x1860320", VA = "0x1860320", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600166D")]
			[Address(RVA = "0x185AC4C", Offset = "0x185AC4C", VA = "0x185AC4C")]
			[DebuggerHidden]
			public <Ancestors>d__29(int <>1__state)
			{
			}

			[Token(Token = "0x600166E")]
			[Address(RVA = "0x1860208", Offset = "0x1860208", VA = "0x1860208", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600166F")]
			[Address(RVA = "0x186020C", Offset = "0x186020C", VA = "0x186020C", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001671")]
			[Address(RVA = "0x18602B8", Offset = "0x18602B8", VA = "0x18602B8", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6001673")]
			[Address(RVA = "0x1860328", Offset = "0x1860328", VA = "0x1860328", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JToken> System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001674")]
			[Address(RVA = "0x18603D8", Offset = "0x18603D8", VA = "0x18603D8", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x200033C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6964", Offset = "0x9A6964")]
		private sealed class <AfterSelf>d__30 : IEnumerable<JToken>, IEnumerable, IEnumerator<JToken>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JToken <>2__current;

			[Token(Token = "0x4000F3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000F3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JToken <>4__this;

			[Token(Token = "0x4000F3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private JToken <o>5__2;

			[Token(Token = "0x1700025A")]
			private JToken System.Collections.Generic.IEnumerator<Newtonsoft.Json.Linq.JToken>.Current
			{
				[Token(Token = "0x6001678")]
				[Address(RVA = "0x18600DC", Offset = "0x18600DC", VA = "0x18600DC", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700025B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600167A")]
				[Address(RVA = "0x186014C", Offset = "0x186014C", VA = "0x186014C", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001675")]
			[Address(RVA = "0x185AD08", Offset = "0x185AD08", VA = "0x185AD08")]
			[DebuggerHidden]
			public <AfterSelf>d__30(int <>1__state)
			{
			}

			[Token(Token = "0x6001676")]
			[Address(RVA = "0x186003C", Offset = "0x186003C", VA = "0x186003C", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001677")]
			[Address(RVA = "0x1860040", Offset = "0x1860040", VA = "0x1860040", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001679")]
			[Address(RVA = "0x18600E4", Offset = "0x18600E4", VA = "0x18600E4", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x600167B")]
			[Address(RVA = "0x1860154", Offset = "0x1860154", VA = "0x1860154", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JToken> System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x600167C")]
			[Address(RVA = "0x1860204", Offset = "0x1860204", VA = "0x1860204", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x200033D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6974", Offset = "0x9A6974")]
		private sealed class <BeforeSelf>d__31 : IEnumerable<JToken>, IEnumerable, IEnumerator<JToken>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JToken <>2__current;

			[Token(Token = "0x4000F41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000F42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JToken <>4__this;

			[Token(Token = "0x4000F43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private JToken <o>5__2;

			[Token(Token = "0x1700025C")]
			private JToken System.Collections.Generic.IEnumerator<Newtonsoft.Json.Linq.JToken>.Current
			{
				[Token(Token = "0x6001680")]
				[Address(RVA = "0x18604A8", Offset = "0x18604A8", VA = "0x18604A8", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700025D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001682")]
				[Address(RVA = "0x1860518", Offset = "0x1860518", VA = "0x1860518", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600167D")]
			[Address(RVA = "0x185ADC4", Offset = "0x185ADC4", VA = "0x185ADC4")]
			[DebuggerHidden]
			public <BeforeSelf>d__31(int <>1__state)
			{
			}

			[Token(Token = "0x600167E")]
			[Address(RVA = "0x18603DC", Offset = "0x18603DC", VA = "0x18603DC", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600167F")]
			[Address(RVA = "0x18603E0", Offset = "0x18603E0", VA = "0x18603E0", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001681")]
			[Address(RVA = "0x18604B0", Offset = "0x18604B0", VA = "0x18604B0", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6001683")]
			[Address(RVA = "0x1860520", Offset = "0x1860520", VA = "0x1860520", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JToken> System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001684")]
			[Address(RVA = "0x18605D0", Offset = "0x18605D0", VA = "0x18605D0", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x4000CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private JContainer _parent;

		[Token(Token = "0x4000CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private JToken _previous;

		[Token(Token = "0x4000CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private JToken _next;

		[Token(Token = "0x4000CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static JTokenEqualityComparer _equalityComparer;

		[Token(Token = "0x4000CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int? _lineNumber;

		[Token(Token = "0x4000CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int? _linePosition;

		[Token(Token = "0x170001E0")]
		public static JTokenEqualityComparer EqualityComparer
		{
			[Token(Token = "0x60012E0")]
			[Address(RVA = "0x185A970", Offset = "0x185A970", VA = "0x185A970")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E1")]
		public JContainer Parent
		{
			[Token(Token = "0x60012E1")]
			[Address(RVA = "0x185179C", Offset = "0x185179C", VA = "0x185179C")]
			[DebuggerStepThrough]
			get
			{
				return null;
			}
			[Token(Token = "0x60012E2")]
			[Address(RVA = "0x1851B9C", Offset = "0x1851B9C", VA = "0x1851B9C")]
			internal set
			{
			}
		}

		[Token(Token = "0x170001E2")]
		public JToken Root
		{
			[Token(Token = "0x60012E3")]
			[Address(RVA = "0x185AA00", Offset = "0x185AA00", VA = "0x185AA00")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E3")]
		public abstract JTokenType Type
		{
			[Token(Token = "0x60012E6")]
			get;
		}

		[Token(Token = "0x170001E4")]
		public abstract bool HasValues
		{
			[Token(Token = "0x60012E7")]
			get;
		}

		[Token(Token = "0x170001E5")]
		public JToken Next
		{
			[Token(Token = "0x60012E9")]
			[Address(RVA = "0x18513A0", Offset = "0x18513A0", VA = "0x18513A0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60012EA")]
			[Address(RVA = "0x1851BAC", Offset = "0x1851BAC", VA = "0x1851BAC")]
			internal set
			{
			}
		}

		[Token(Token = "0x170001E6")]
		public JToken Previous
		{
			[Token(Token = "0x60012EB")]
			[Address(RVA = "0x185AA40", Offset = "0x185AA40", VA = "0x185AA40")]
			get
			{
				return null;
			}
			[Token(Token = "0x60012EC")]
			[Address(RVA = "0x1851BA4", Offset = "0x1851BA4", VA = "0x1851BA4")]
			internal set
			{
			}
		}

		[Token(Token = "0x170001E7")]
		public virtual JToken Item
		{
			[Token(Token = "0x60012F3")]
			[Address(RVA = "0x185ADFC", Offset = "0x185ADFC", VA = "0x185ADFC", Slot = "15")]
			get
			{
				return null;
			}
			[Token(Token = "0x60012F4")]
			[Address(RVA = "0x185AF14", Offset = "0x185AF14", VA = "0x185AF14", Slot = "16")]
			set
			{
			}
		}

		[Token(Token = "0x170001E8")]
		public virtual JToken First
		{
			[Token(Token = "0x60012F6")]
			[Address(RVA = "0x185B02C", Offset = "0x185B02C", VA = "0x185B02C", Slot = "18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E9")]
		public virtual JToken Last
		{
			[Token(Token = "0x60012F7")]
			[Address(RVA = "0x185B144", Offset = "0x185B144", VA = "0x185B144", Slot = "19")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001EA")]
		private IJEnumerable<JToken> Newtonsoft.Json.Linq.IJEnumerable<Newtonsoft.Json.Linq.JToken>.Item
		{
			[Token(Token = "0x6001340")]
			[Address(RVA = "0x185F848", Offset = "0x185F848", VA = "0x185F848", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001EB")]
		private int Newtonsoft.Json.IJsonLineInfo.LineNumber
		{
			[Token(Token = "0x600134D")]
			[Address(RVA = "0x185FE90", Offset = "0x185FE90", VA = "0x185FE90", Slot = "8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001EC")]
		private int Newtonsoft.Json.IJsonLineInfo.LinePosition
		{
			[Token(Token = "0x600134E")]
			[Address(RVA = "0x185FF14", Offset = "0x185FF14", VA = "0x185FF14", Slot = "9")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60012E4")]
		internal abstract JToken CloneToken();

		[Token(Token = "0x60012E5")]
		internal abstract bool DeepEquals(JToken node);

		[Token(Token = "0x60012E8")]
		[Address(RVA = "0x185AA14", Offset = "0x185AA14", VA = "0x185AA14")]
		public static bool DeepEquals(JToken t1, JToken t2)
		{
			return default(bool);
		}

		[Token(Token = "0x60012ED")]
		[Address(RVA = "0x1851198", Offset = "0x1851198", VA = "0x1851198")]
		internal JToken()
		{
		}

		[Token(Token = "0x60012EE")]
		[Address(RVA = "0x185AA48", Offset = "0x185AA48", VA = "0x185AA48")]
		public void AddAfterSelf(object content)
		{
		}

		[Token(Token = "0x60012EF")]
		[Address(RVA = "0x185AB08", Offset = "0x185AB08", VA = "0x185AB08")]
		public void AddBeforeSelf(object content)
		{
		}

		[Token(Token = "0x60012F0")]
		[Address(RVA = "0x185ABC8", Offset = "0x185ABC8", VA = "0x185ABC8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x9AA640", Offset = "0x9AA640")]
		public IEnumerable<JToken> Ancestors()
		{
			return null;
		}

		[Token(Token = "0x60012F1")]
		[Address(RVA = "0x185AC84", Offset = "0x185AC84", VA = "0x185AC84")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x9AA6A4", Offset = "0x9AA6A4")]
		public IEnumerable<JToken> AfterSelf()
		{
			return null;
		}

		[Token(Token = "0x60012F2")]
		[Address(RVA = "0x185AD40", Offset = "0x185AD40", VA = "0x185AD40")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x9AA708", Offset = "0x9AA708")]
		public IEnumerable<JToken> BeforeSelf()
		{
			return null;
		}

		[Token(Token = "0x60012F5")]
		public virtual T Value<T>(object key)
		{
			return (T)null;
		}

		[Token(Token = "0x60012F8")]
		[Address(RVA = "0x185B25C", Offset = "0x185B25C", VA = "0x185B25C", Slot = "20")]
		public virtual JEnumerable<JToken> Children()
		{
			return default(JEnumerable<JToken>);
		}

		[Token(Token = "0x60012F9")]
		public JEnumerable<T> Children<T>() where T : JToken
		{
			return default(JEnumerable<T>);
		}

		[Token(Token = "0x60012FA")]
		public virtual IEnumerable<T> Values<T>()
		{
			return null;
		}

		[Token(Token = "0x60012FB")]
		[Address(RVA = "0x1856CE8", Offset = "0x1856CE8", VA = "0x1856CE8")]
		public void Remove()
		{
		}

		[Token(Token = "0x60012FC")]
		[Address(RVA = "0x1854284", Offset = "0x1854284", VA = "0x1854284")]
		public void Replace(JToken value)
		{
		}

		[Token(Token = "0x60012FD")]
		public abstract void WriteTo(JsonWriter writer, params JsonConverter[] converters);

		[Token(Token = "0x60012FE")]
		[Address(RVA = "0x185B2C4", Offset = "0x185B2C4", VA = "0x185B2C4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60012FF")]
		[Address(RVA = "0x185B320", Offset = "0x185B320", VA = "0x185B320")]
		public string ToString(Formatting formatting, params JsonConverter[] converters)
		{
			return null;
		}

		[Token(Token = "0x6001300")]
		[Address(RVA = "0x185B4FC", Offset = "0x185B4FC", VA = "0x185B4FC")]
		private static JValue EnsureValue(JToken value)
		{
			return null;
		}

		[Token(Token = "0x6001301")]
		[Address(RVA = "0x185B604", Offset = "0x185B604", VA = "0x185B604")]
		private static string GetType(JToken token)
		{
			return null;
		}

		[Token(Token = "0x6001302")]
		[Address(RVA = "0x185B720", Offset = "0x185B720", VA = "0x185B720")]
		private static bool IsNullable(JToken o)
		{
			return default(bool);
		}

		[Token(Token = "0x6001303")]
		[Address(RVA = "0x185B77C", Offset = "0x185B77C", VA = "0x185B77C")]
		private static bool ValidateFloat(JToken o, bool nullable)
		{
			return default(bool);
		}

		[Token(Token = "0x6001304")]
		[Address(RVA = "0x185B7F4", Offset = "0x185B7F4", VA = "0x185B7F4")]
		private static bool ValidateInteger(JToken o, bool nullable)
		{
			return default(bool);
		}

		[Token(Token = "0x6001305")]
		[Address(RVA = "0x185B850", Offset = "0x185B850", VA = "0x185B850")]
		private static bool ValidateDate(JToken o, bool nullable)
		{
			return default(bool);
		}

		[Token(Token = "0x6001306")]
		[Address(RVA = "0x185B8AC", Offset = "0x185B8AC", VA = "0x185B8AC")]
		private static bool ValidateBoolean(JToken o, bool nullable)
		{
			return default(bool);
		}

		[Token(Token = "0x6001307")]
		[Address(RVA = "0x185B908", Offset = "0x185B908", VA = "0x185B908")]
		private static bool ValidateString(JToken o)
		{
			return default(bool);
		}

		[Token(Token = "0x6001308")]
		[Address(RVA = "0x185B988", Offset = "0x185B988", VA = "0x185B988")]
		private static bool ValidateBytes(JToken o)
		{
			return default(bool);
		}

		[Token(Token = "0x6001309")]
		[Address(RVA = "0x185B9D8", Offset = "0x185B9D8", VA = "0x185B9D8")]
		public static explicit operator bool(JToken value)
		{
			return default(bool);
		}

		[Token(Token = "0x600130A")]
		[Address(RVA = "0x185BB34", Offset = "0x185BB34", VA = "0x185BB34")]
		public static explicit operator DateTimeOffset(JToken value)
		{
			return default(DateTimeOffset);
		}

		[Token(Token = "0x600130B")]
		[Address(RVA = "0x185BC94", Offset = "0x185BC94", VA = "0x185BC94")]
		public static explicit operator bool?(JToken value)
		{
			return null;
		}

		[Token(Token = "0x600130C")]
		[Address(RVA = "0x185BE70", Offset = "0x185BE70", VA = "0x185BE70")]
		public static explicit operator long(JToken value)
		{
			return default(long);
		}

		[Token(Token = "0x600130D")]
		[Address(RVA = "0x185BFCC", Offset = "0x185BFCC", VA = "0x185BFCC")]
		public static explicit operator DateTime?(JToken value)
		{
			return null;
		}

		[Token(Token = "0x600130E")]
		[Address(RVA = "0x185C1BC", Offset = "0x185C1BC", VA = "0x185C1BC")]
		public static explicit operator DateTimeOffset?(JToken value)
		{
			return null;
		}

		[Token(Token = "0x600130F")]
		[Address(RVA = "0x185C3B0", Offset = "0x185C3B0", VA = "0x185C3B0")]
		public static explicit operator decimal?(JToken value)
		{
			return null;
		}

		[Token(Token = "0x6001310")]
		[Address(RVA = "0x185C5A4", Offset = "0x185C5A4", VA = "0x185C5A4")]
		public static explicit operator double?(JToken value)
		{
			return null;
		}

		[Token(Token = "0x6001311")]
		[Address(RVA = "0x185C794", Offset = "0x185C794", VA = "0x185C794")]
		public static explicit operator int(JToken value)
		{
			return default(int);
		}

		[Token(Token = "0x6001312")]
		[Address(RVA = "0x185C938", Offset = "0x185C938", VA = "0x185C938")]
		public static explicit operator short(JToken value)
		{
			return default(short);
		}

		[Token(Token = "0x6001313")]
		[Address(RVA = "0x185CADC", Offset = "0x185CADC", VA = "0x185CADC")]
		public static explicit operator ushort(JToken value)
		{
			return default(ushort);
		}

		[Token(Token = "0x6001314")]
		[Address(RVA = "0x185CC80", Offset = "0x185CC80", VA = "0x185CC80")]
		public static explicit operator int?(JToken value)
		{
			return null;
		}

		[Token(Token = "0x6001315")]
		[Address(RVA = "0x185CE5C", Offset = "0x185CE5C", VA = "0x185CE5C")]
		public static explicit operator short?(JToken value)
		{
			return null;
		}

		[Token(Token = "0x6001316")]
		[Address(RVA = "0x185D038", Offset = "0x185D038", VA = "0x185D038")]
		public static explicit operator ushort?(JToken value)
		{
			return null;
		}

		[Token(Token = "0x6001317")]
		[Address(RVA = "0x185D214", Offset = "0x185D214", VA = "0x185D214")]
		public static explicit operator DateTime(JToken value)
		{
			return default(DateTime);
		}

		[Token(Token = "0x6001318")]
		[Address(RVA = "0x185D370", Offset = "0x185D370", VA = "0x185D370")]
		public static explicit operator long?(JToken value)
		{
			return null;
		}

		[Token(Token = "0x6001319")]
		[Address(RVA = "0x185D560", Offset = "0x185D560", VA = "0x185D560")]
		public static explicit operator float?(JToken value)
		{
			return null;
		}

		[Token(Token = "0x600131A")]
		[Address(RVA = "0x185D738", Offset = "0x185D738", VA = "0x185D738")]
		public static explicit operator decimal(JToken value)
		{
			return default(decimal);
		}

		[Token(Token = "0x600131B")]
		[Address(RVA = "0x185D8DC", Offset = "0x185D8DC", VA = "0x185D8DC")]
		public static explicit operator uint?(JToken value)
		{
			return null;
		}

		[Token(Token = "0x600131C")]
		[Address(RVA = "0x185DAB8", Offset = "0x185DAB8", VA = "0x185DAB8")]
		public static explicit operator ulong?(JToken value)
		{
			return null;
		}

		[Token(Token = "0x600131D")]
		[Address(RVA = "0x185DCA8", Offset = "0x185DCA8", VA = "0x185DCA8")]
		public static explicit operator double(JToken value)
		{
			return default(double);
		}

		[Token(Token = "0x600131E")]
		[Address(RVA = "0x185DE04", Offset = "0x185DE04", VA = "0x185DE04")]
		public static explicit operator float(JToken value)
		{
			return default(float);
		}

		[Token(Token = "0x600131F")]
		[Address(RVA = "0x185DFA8", Offset = "0x185DFA8", VA = "0x185DFA8")]
		public static explicit operator string(JToken value)
		{
			return null;
		}

		[Token(Token = "0x6001320")]
		[Address(RVA = "0x185E154", Offset = "0x185E154", VA = "0x185E154")]
		public static explicit operator uint(JToken value)
		{
			return default(uint);
		}

		[Token(Token = "0x6001321")]
		[Address(RVA = "0x185E2F8", Offset = "0x185E2F8", VA = "0x185E2F8")]
		public static explicit operator ulong(JToken value)
		{
			return default(ulong);
		}

		[Token(Token = "0x6001322")]
		[Address(RVA = "0x185E49C", Offset = "0x185E49C", VA = "0x185E49C")]
		public static explicit operator byte[](JToken value)
		{
			return null;
		}

		[Token(Token = "0x6001323")]
		[Address(RVA = "0x185E650", Offset = "0x185E650", VA = "0x185E650")]
		public static implicit operator JToken(bool value)
		{
			return null;
		}

		[Token(Token = "0x6001324")]
		[Address(RVA = "0x185E730", Offset = "0x185E730", VA = "0x185E730")]
		public static implicit operator JToken(DateTimeOffset value)
		{
			return null;
		}

		[Token(Token = "0x6001325")]
		[Address(RVA = "0x185E7E0", Offset = "0x185E7E0", VA = "0x185E7E0")]
		public static implicit operator JToken(bool? value)
		{
			return null;
		}

		[Token(Token = "0x6001326")]
		[Address(RVA = "0x185E884", Offset = "0x185E884", VA = "0x185E884")]
		public static implicit operator JToken(long value)
		{
			return null;
		}

		[Token(Token = "0x6001327")]
		[Address(RVA = "0x185E964", Offset = "0x185E964", VA = "0x185E964")]
		public static implicit operator JToken(DateTime? value)
		{
			return null;
		}

		[Token(Token = "0x6001328")]
		[Address(RVA = "0x185EA14", Offset = "0x185EA14", VA = "0x185EA14")]
		public static implicit operator JToken(DateTimeOffset? value)
		{
			return null;
		}

		[Token(Token = "0x6001329")]
		[Address(RVA = "0x185EACC", Offset = "0x185EACC", VA = "0x185EACC")]
		public static implicit operator JToken(decimal? value)
		{
			return null;
		}

		[Token(Token = "0x600132A")]
		[Address(RVA = "0x185EB84", Offset = "0x185EB84", VA = "0x185EB84")]
		public static implicit operator JToken(double? value)
		{
			return null;
		}

		[Token(Token = "0x600132B")]
		[Address(RVA = "0x185EC34", Offset = "0x185EC34", VA = "0x185EC34")]
		public static implicit operator JToken(short value)
		{
			return null;
		}

		[Token(Token = "0x600132C")]
		[Address(RVA = "0x185EC94", Offset = "0x185EC94", VA = "0x185EC94")]
		public static implicit operator JToken(ushort value)
		{
			return null;
		}

		[Token(Token = "0x600132D")]
		[Address(RVA = "0x185ECF4", Offset = "0x185ECF4", VA = "0x185ECF4")]
		public static implicit operator JToken(int value)
		{
			return null;
		}

		[Token(Token = "0x600132E")]
		[Address(RVA = "0x185ED54", Offset = "0x185ED54", VA = "0x185ED54")]
		public static implicit operator JToken(int? value)
		{
			return null;
		}

		[Token(Token = "0x600132F")]
		[Address(RVA = "0x185EDF8", Offset = "0x185EDF8", VA = "0x185EDF8")]
		public static implicit operator JToken(DateTime value)
		{
			return null;
		}

		[Token(Token = "0x6001330")]
		[Address(RVA = "0x185EED8", Offset = "0x185EED8", VA = "0x185EED8")]
		public static implicit operator JToken(long? value)
		{
			return null;
		}

		[Token(Token = "0x6001331")]
		[Address(RVA = "0x185EF88", Offset = "0x185EF88", VA = "0x185EF88")]
		public static implicit operator JToken(float? value)
		{
			return null;
		}

		[Token(Token = "0x6001332")]
		[Address(RVA = "0x185F02C", Offset = "0x185F02C", VA = "0x185F02C")]
		public static implicit operator JToken(decimal value)
		{
			return null;
		}

		[Token(Token = "0x6001333")]
		[Address(RVA = "0x185F0DC", Offset = "0x185F0DC", VA = "0x185F0DC")]
		public static implicit operator JToken(short? value)
		{
			return null;
		}

		[Token(Token = "0x6001334")]
		[Address(RVA = "0x185F180", Offset = "0x185F180", VA = "0x185F180")]
		public static implicit operator JToken(ushort? value)
		{
			return null;
		}

		[Token(Token = "0x6001335")]
		[Address(RVA = "0x185F224", Offset = "0x185F224", VA = "0x185F224")]
		public static implicit operator JToken(uint? value)
		{
			return null;
		}

		[Token(Token = "0x6001336")]
		[Address(RVA = "0x185F2C8", Offset = "0x185F2C8", VA = "0x185F2C8")]
		public static implicit operator JToken(ulong? value)
		{
			return null;
		}

		[Token(Token = "0x6001337")]
		[Address(RVA = "0x185F378", Offset = "0x185F378", VA = "0x185F378")]
		public static implicit operator JToken(double value)
		{
			return null;
		}

		[Token(Token = "0x6001338")]
		[Address(RVA = "0x185F460", Offset = "0x185F460", VA = "0x185F460")]
		public static implicit operator JToken(float value)
		{
			return null;
		}

		[Token(Token = "0x6001339")]
		[Address(RVA = "0x185F4C8", Offset = "0x185F4C8", VA = "0x185F4C8")]
		public static implicit operator JToken(string value)
		{
			return null;
		}

		[Token(Token = "0x600133A")]
		[Address(RVA = "0x185F568", Offset = "0x185F568", VA = "0x185F568")]
		public static implicit operator JToken(uint value)
		{
			return null;
		}

		[Token(Token = "0x600133B")]
		[Address(RVA = "0x185F5C8", Offset = "0x185F5C8", VA = "0x185F5C8")]
		public static implicit operator JToken(ulong value)
		{
			return null;
		}

		[Token(Token = "0x600133C")]
		[Address(RVA = "0x185F6A8", Offset = "0x185F6A8", VA = "0x185F6A8")]
		public static implicit operator JToken(byte[] value)
		{
			return null;
		}

		[Token(Token = "0x600133D")]
		[Address(RVA = "0x185F72C", Offset = "0x185F72C", VA = "0x185F72C", Slot = "6")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600133E")]
		[Address(RVA = "0x185F7D0", Offset = "0x185F7D0", VA = "0x185F7D0", Slot = "5")]
		private IEnumerator<JToken> System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600133F")]
		internal abstract int GetDeepHashCode();

		[Token(Token = "0x6001341")]
		[Address(RVA = "0x185F858", Offset = "0x185F858", VA = "0x185F858")]
		public JsonReader CreateReader()
		{
			return null;
		}

		[Token(Token = "0x6001342")]
		[Address(RVA = "0x184FA2C", Offset = "0x184FA2C", VA = "0x184FA2C")]
		internal static JToken FromObjectInternal(object o, JsonSerializer jsonSerializer)
		{
			return null;
		}

		[Token(Token = "0x6001343")]
		[Address(RVA = "0x185F9B0", Offset = "0x185F9B0", VA = "0x185F9B0")]
		public static JToken FromObject(object o)
		{
			return null;
		}

		[Token(Token = "0x6001344")]
		[Address(RVA = "0x185FA14", Offset = "0x185FA14", VA = "0x185FA14")]
		public static JToken FromObject(object o, JsonSerializer jsonSerializer)
		{
			return null;
		}

		[Token(Token = "0x6001345")]
		public T ToObject<T>()
		{
			return (T)null;
		}

		[Token(Token = "0x6001346")]
		public T ToObject<T>(JsonSerializer jsonSerializer)
		{
			return (T)null;
		}

		[Token(Token = "0x6001347")]
		[Address(RVA = "0x185FA18", Offset = "0x185FA18", VA = "0x185FA18")]
		public static JToken ReadFrom(JsonReader reader)
		{
			return null;
		}

		[Token(Token = "0x6001348")]
		[Address(RVA = "0x185FD00", Offset = "0x185FD00", VA = "0x185FD00")]
		public static JToken Parse(string json)
		{
			return null;
		}

		[Token(Token = "0x6001349")]
		[Address(RVA = "0x185FD84", Offset = "0x185FD84", VA = "0x185FD84")]
		public static JToken Load(JsonReader reader)
		{
			return null;
		}

		[Token(Token = "0x600134A")]
		[Address(RVA = "0x184F33C", Offset = "0x184F33C", VA = "0x184F33C")]
		internal void SetLineInfo(IJsonLineInfo lineInfo)
		{
		}

		[Token(Token = "0x600134B")]
		[Address(RVA = "0x185FD88", Offset = "0x185FD88", VA = "0x185FD88")]
		internal void SetLineInfo(int lineNumber, int linePosition)
		{
		}

		[Token(Token = "0x600134C")]
		[Address(RVA = "0x185FE20", Offset = "0x185FE20", VA = "0x185FE20", Slot = "7")]
		private bool Newtonsoft.Json.IJsonLineInfo.HasLineInfo()
		{
			return default(bool);
		}

		[Token(Token = "0x600134F")]
		[Address(RVA = "0x185FF98", Offset = "0x185FF98", VA = "0x185FF98")]
		public JToken SelectToken(string path)
		{
			return null;
		}

		[Token(Token = "0x6001350")]
		[Address(RVA = "0x185FFA0", Offset = "0x185FFA0", VA = "0x185FFA0")]
		public JToken SelectToken(string path, bool errorWhenNoMatch)
		{
			return null;
		}

		[Token(Token = "0x6001351")]
		[Address(RVA = "0x1860024", Offset = "0x1860024", VA = "0x1860024", Slot = "10")]
		private object System.ICloneable.Clone()
		{
			return null;
		}

		[Token(Token = "0x6001352")]
		[Address(RVA = "0x1860030", Offset = "0x1860030", VA = "0x1860030")]
		public JToken DeepClone()
		{
			return null;
		}
	}
	[Token(Token = "0x2000273")]
	public class JTokenEqualityComparer : IEqualityComparer<JToken>
	{
		[Token(Token = "0x6001353")]
		[Address(RVA = "0x18605D4", Offset = "0x18605D4", VA = "0x18605D4", Slot = "4")]
		public bool Equals(JToken x, JToken y)
		{
			return default(bool);
		}

		[Token(Token = "0x6001354")]
		[Address(RVA = "0x186060C", Offset = "0x186060C", VA = "0x186060C", Slot = "5")]
		public int GetHashCode(JToken obj)
		{
			return default(int);
		}

		[Token(Token = "0x6001355")]
		[Address(RVA = "0x185A9F8", Offset = "0x185A9F8", VA = "0x185A9F8")]
		public JTokenEqualityComparer()
		{
		}
	}
	[Token(Token = "0x2000274")]
	public class JTokenReader : JsonReader, IJsonLineInfo
	{
		[Token(Token = "0x4000CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly JToken _root;

		[Token(Token = "0x4000CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private JToken _parent;

		[Token(Token = "0x4000CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private JToken _current;

		[Token(Token = "0x170001ED")]
		private bool IsEndElement
		{
			[Token(Token = "0x600135D")]
			[Address(RVA = "0x1861F70", Offset = "0x1861F70", VA = "0x1861F70")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001EE")]
		private int Newtonsoft.Json.IJsonLineInfo.LineNumber
		{
			[Token(Token = "0x6001364")]
			[Address(RVA = "0x18621C8", Offset = "0x18621C8", VA = "0x18621C8", Slot = "19")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001EF")]
		private int Newtonsoft.Json.IJsonLineInfo.LinePosition
		{
			[Token(Token = "0x6001365")]
			[Address(RVA = "0x18622A0", Offset = "0x18622A0", VA = "0x18622A0", Slot = "20")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001356")]
		[Address(RVA = "0x185F8B8", Offset = "0x185F8B8", VA = "0x185F8B8")]
		public JTokenReader(JToken token)
		{
		}

		[Token(Token = "0x6001357")]
		[Address(RVA = "0x1860630", Offset = "0x1860630", VA = "0x1860630", Slot = "12")]
		public override byte[] ReadAsBytes()
		{
			return null;
		}

		[Token(Token = "0x6001358")]
		[Address(RVA = "0x1860948", Offset = "0x1860948", VA = "0x1860948", Slot = "13")]
		public override decimal? ReadAsDecimal()
		{
			return null;
		}

		[Token(Token = "0x6001359")]
		[Address(RVA = "0x1860BE8", Offset = "0x1860BE8", VA = "0x1860BE8", Slot = "14")]
		public override DateTimeOffset? ReadAsDateTimeOffset()
		{
			return null;
		}

		[Token(Token = "0x600135A")]
		[Address(RVA = "0x1860E2C", Offset = "0x1860E2C", VA = "0x1860E2C", Slot = "11")]
		public override bool Read()
		{
			return default(bool);
		}

		[Token(Token = "0x600135B")]
		[Address(RVA = "0x1860F6C", Offset = "0x1860F6C", VA = "0x1860F6C")]
		private bool ReadOver(JToken t)
		{
			return default(bool);
		}

		[Token(Token = "0x600135C")]
		[Address(RVA = "0x1861EB8", Offset = "0x1861EB8", VA = "0x1861EB8")]
		private bool ReadToEnd()
		{
			return default(bool);
		}

		[Token(Token = "0x600135E")]
		[Address(RVA = "0x1861F80", Offset = "0x1861F80", VA = "0x1861F80")]
		private JsonToken? GetEndToken(JContainer c)
		{
			return null;
		}

		[Token(Token = "0x600135F")]
		[Address(RVA = "0x1860EF0", Offset = "0x1860EF0", VA = "0x1860EF0")]
		private bool ReadInto(JContainer c)
		{
			return default(bool);
		}

		[Token(Token = "0x6001360")]
		[Address(RVA = "0x1861EC0", Offset = "0x1861EC0", VA = "0x1861EC0")]
		private bool SetEnd(JContainer c)
		{
			return default(bool);
		}

		[Token(Token = "0x6001361")]
		[Address(RVA = "0x1861020", Offset = "0x1861020", VA = "0x1861020")]
		private void SetToken(JToken token)
		{
		}

		[Token(Token = "0x6001362")]
		[Address(RVA = "0x18620D4", Offset = "0x18620D4", VA = "0x18620D4")]
		private string SafeToString(object value)
		{
			return null;
		}

		[Token(Token = "0x6001363")]
		[Address(RVA = "0x18620F4", Offset = "0x18620F4", VA = "0x18620F4", Slot = "18")]
		private bool Newtonsoft.Json.IJsonLineInfo.HasLineInfo()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000275")]
	public enum JTokenType
	{
		[Token(Token = "0x4000CDF")]
		None,
		[Token(Token = "0x4000CE0")]
		Object,
		[Token(Token = "0x4000CE1")]
		Array,
		[Token(Token = "0x4000CE2")]
		Constructor,
		[Token(Token = "0x4000CE3")]
		Property,
		[Token(Token = "0x4000CE4")]
		Comment,
		[Token(Token = "0x4000CE5")]
		Integer,
		[Token(Token = "0x4000CE6")]
		Float,
		[Token(Token = "0x4000CE7")]
		String,
		[Token(Token = "0x4000CE8")]
		Boolean,
		[Token(Token = "0x4000CE9")]
		Null,
		[Token(Token = "0x4000CEA")]
		Undefined,
		[Token(Token = "0x4000CEB")]
		Date,
		[Token(Token = "0x4000CEC")]
		Raw,
		[Token(Token = "0x4000CED")]
		Bytes,
		[Token(Token = "0x4000CEE")]
		Guid,
		[Token(Token = "0x4000CEF")]
		Uri,
		[Token(Token = "0x4000CF0")]
		TimeSpan
	}
	[Token(Token = "0x2000276")]
	public class JTokenWriter : JsonWriter
	{
		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private JContainer _token;

		[Token(Token = "0x4000CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private JContainer _parent;

		[Token(Token = "0x4000CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private JValue _value;

		[Token(Token = "0x170001F0")]
		public JToken Token
		{
			[Token(Token = "0x6001366")]
			[Address(RVA = "0x185F998", Offset = "0x185F998", VA = "0x185F998")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001367")]
		[Address(RVA = "0x18536C8", Offset = "0x18536C8", VA = "0x18536C8")]
		public JTokenWriter(JContainer container)
		{
		}

		[Token(Token = "0x6001368")]
		[Address(RVA = "0x185F930", Offset = "0x185F930", VA = "0x185F930")]
		public JTokenWriter()
		{
		}

		[Token(Token = "0x6001369")]
		[Address(RVA = "0x1862378", Offset = "0x1862378", VA = "0x1862378", Slot = "5")]
		public override void Flush()
		{
		}

		[Token(Token = "0x600136A")]
		[Address(RVA = "0x186237C", Offset = "0x186237C", VA = "0x186237C", Slot = "6")]
		public override void Close()
		{
		}

		[Token(Token = "0x600136B")]
		[Address(RVA = "0x1862384", Offset = "0x1862384", VA = "0x1862384", Slot = "7")]
		public override void WriteStartObject()
		{
		}

		[Token(Token = "0x600136C")]
		[Address(RVA = "0x1862410", Offset = "0x1862410", VA = "0x1862410")]
		private void AddParent(JContainer container)
		{
		}

		[Token(Token = "0x600136D")]
		[Address(RVA = "0x1862458", Offset = "0x1862458", VA = "0x1862458")]
		private void RemoveParent()
		{
		}

		[Token(Token = "0x600136E")]
		[Address(RVA = "0x18624BC", Offset = "0x18624BC", VA = "0x18624BC", Slot = "9")]
		public override void WriteStartArray()
		{
		}

		[Token(Token = "0x600136F")]
		[Address(RVA = "0x1862548", Offset = "0x1862548", VA = "0x1862548", Slot = "11")]
		public override void WriteStartConstructor(string name)
		{
		}

		[Token(Token = "0x6001370")]
		[Address(RVA = "0x18625E8", Offset = "0x18625E8", VA = "0x18625E8", Slot = "15")]
		protected override void WriteEnd(JsonToken token)
		{
		}

		[Token(Token = "0x6001371")]
		[Address(RVA = "0x18625EC", Offset = "0x18625EC", VA = "0x18625EC", Slot = "13")]
		public override void WritePropertyName(string name)
		{
		}

		[Token(Token = "0x6001372")]
		[Address(RVA = "0x186268C", Offset = "0x186268C", VA = "0x186268C")]
		private void AddValue(object value, JsonToken token)
		{
		}

		[Token(Token = "0x6001373")]
		[Address(RVA = "0x1862718", Offset = "0x1862718", VA = "0x1862718")]
		internal void AddValue(JValue value, JsonToken token)
		{
		}

		[Token(Token = "0x6001374")]
		[Address(RVA = "0x1862794", Offset = "0x1862794", VA = "0x1862794", Slot = "19")]
		public override void WriteNull()
		{
		}

		[Token(Token = "0x6001375")]
		[Address(RVA = "0x18627C0", Offset = "0x18627C0", VA = "0x18627C0", Slot = "20")]
		public override void WriteUndefined()
		{
		}

		[Token(Token = "0x6001376")]
		[Address(RVA = "0x18627EC", Offset = "0x18627EC", VA = "0x18627EC", Slot = "21")]
		public override void WriteRaw(string json)
		{
		}

		[Token(Token = "0x6001377")]
		[Address(RVA = "0x1862878", Offset = "0x1862878", VA = "0x1862878", Slot = "61")]
		public override void WriteComment(string text)
		{
		}

		[Token(Token = "0x6001378")]
		[Address(RVA = "0x18628B0", Offset = "0x18628B0", VA = "0x18628B0", Slot = "23")]
		public override void WriteValue(string value)
		{
		}

		[Token(Token = "0x6001379")]
		[Address(RVA = "0x1862944", Offset = "0x1862944", VA = "0x1862944", Slot = "24")]
		public override void WriteValue(int value)
		{
		}

		[Token(Token = "0x600137A")]
		[Address(RVA = "0x18629C8", Offset = "0x18629C8", VA = "0x18629C8", Slot = "25")]
		public override void WriteValue(uint value)
		{
		}

		[Token(Token = "0x600137B")]
		[Address(RVA = "0x1862A4C", Offset = "0x1862A4C", VA = "0x1862A4C", Slot = "26")]
		public override void WriteValue(long value)
		{
		}

		[Token(Token = "0x600137C")]
		[Address(RVA = "0x1862AD0", Offset = "0x1862AD0", VA = "0x1862AD0", Slot = "27")]
		public override void WriteValue(ulong value)
		{
		}

		[Token(Token = "0x600137D")]
		[Address(RVA = "0x1862B54", Offset = "0x1862B54", VA = "0x1862B54", Slot = "28")]
		public override void WriteValue(float value)
		{
		}

		[Token(Token = "0x600137E")]
		[Address(RVA = "0x1862BD8", Offset = "0x1862BD8", VA = "0x1862BD8", Slot = "29")]
		public override void WriteValue(double value)
		{
		}

		[Token(Token = "0x600137F")]
		[Address(RVA = "0x1862C5C", Offset = "0x1862C5C", VA = "0x1862C5C", Slot = "30")]
		public override void WriteValue(bool value)
		{
		}

		[Token(Token = "0x6001380")]
		[Address(RVA = "0x1862CE0", Offset = "0x1862CE0", VA = "0x1862CE0", Slot = "31")]
		public override void WriteValue(short value)
		{
		}

		[Token(Token = "0x6001381")]
		[Address(RVA = "0x1862D64", Offset = "0x1862D64", VA = "0x1862D64", Slot = "32")]
		public override void WriteValue(ushort value)
		{
		}

		[Token(Token = "0x6001382")]
		[Address(RVA = "0x1862DE8", Offset = "0x1862DE8", VA = "0x1862DE8", Slot = "33")]
		public override void WriteValue(char value)
		{
		}

		[Token(Token = "0x6001383")]
		[Address(RVA = "0x1862E2C", Offset = "0x1862E2C", VA = "0x1862E2C", Slot = "34")]
		public override void WriteValue(byte value)
		{
		}

		[Token(Token = "0x6001384")]
		[Address(RVA = "0x1862EB0", Offset = "0x1862EB0", VA = "0x1862EB0", Slot = "35")]
		public override void WriteValue(sbyte value)
		{
		}

		[Token(Token = "0x6001385")]
		[Address(RVA = "0x1862F34", Offset = "0x1862F34", VA = "0x1862F34", Slot = "36")]
		public override void WriteValue(decimal value)
		{
		}

		[Token(Token = "0x6001386")]
		[Address(RVA = "0x1862FC8", Offset = "0x1862FC8", VA = "0x1862FC8", Slot = "37")]
		public override void WriteValue(DateTime value)
		{
		}

		[Token(Token = "0x6001387")]
		[Address(RVA = "0x186304C", Offset = "0x186304C", VA = "0x186304C", Slot = "38")]
		public override void WriteValue(DateTimeOffset value)
		{
		}

		[Token(Token = "0x6001388")]
		[Address(RVA = "0x18630E0", Offset = "0x18630E0", VA = "0x18630E0", Slot = "58")]
		public override void WriteValue(byte[] value)
		{
		}

		[Token(Token = "0x6001389")]
		[Address(RVA = "0x1863114", Offset = "0x1863114", VA = "0x1863114", Slot = "40")]
		public override void WriteValue(TimeSpan value)
		{
		}

		[Token(Token = "0x600138A")]
		[Address(RVA = "0x1863198", Offset = "0x1863198", VA = "0x1863198", Slot = "39")]
		public override void WriteValue(Guid value)
		{
		}

		[Token(Token = "0x600138B")]
		[Address(RVA = "0x186322C", Offset = "0x186322C", VA = "0x186322C", Slot = "59")]
		public override void WriteValue(Uri value)
		{
		}
	}
	[Token(Token = "0x2000277")]
	public class JValue : JToken, IEquatable<JValue>, IFormattable, IComparable, IComparable<JValue>
	{
		[Token(Token = "0x4000CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private JTokenType _valueType;

		[Token(Token = "0x4000CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private object _value;

		[Token(Token = "0x170001F1")]
		public override bool HasValues
		{
			[Token(Token = "0x6001399")]
			[Address(RVA = "0x1863858", Offset = "0x1863858", VA = "0x1863858", Slot = "14")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001F2")]
		public override JTokenType Type
		{
			[Token(Token = "0x60013A1")]
			[Address(RVA = "0x186439C", Offset = "0x186439C", VA = "0x186439C", Slot = "13")]
			get
			{
				return default(JTokenType);
			}
		}

		[Token(Token = "0x170001F3")]
		public new object Value
		{
			[Token(Token = "0x60013A2")]
			[Address(RVA = "0x18578C4", Offset = "0x18578C4", VA = "0x18578C4")]
			get
			{
				return null;
			}
			[Token(Token = "0x60013A3")]
			[Address(RVA = "0x18643A4", Offset = "0x18643A4", VA = "0x18643A4")]
			set
			{
			}
		}

		[Token(Token = "0x600138C")]
		[Address(RVA = "0x1854010", Offset = "0x1854010", VA = "0x1854010")]
		internal JValue(object value, JTokenType type)
		{
		}

		[Token(Token = "0x600138D")]
		[Address(RVA = "0x185A5AC", Offset = "0x185A5AC", VA = "0x185A5AC")]
		public JValue(JValue other)
		{
		}

		[Token(Token = "0x600138E")]
		[Address(RVA = "0x185E8E4", Offset = "0x185E8E4", VA = "0x185E8E4")]
		public JValue(long value)
		{
		}

		[Token(Token = "0x600138F")]
		[Address(RVA = "0x185F628", Offset = "0x185F628", VA = "0x185F628")]
		public JValue(ulong value)
		{
		}

		[Token(Token = "0x6001390")]
		[Address(RVA = "0x185F3E0", Offset = "0x185F3E0", VA = "0x185F3E0")]
		public JValue(double value)
		{
		}

		[Token(Token = "0x6001391")]
		[Address(RVA = "0x185EE58", Offset = "0x185EE58", VA = "0x185EE58")]
		public JValue(DateTime value)
		{
		}

		[Token(Token = "0x6001392")]
		[Address(RVA = "0x185E6B0", Offset = "0x185E6B0", VA = "0x185E6B0")]
		public JValue(bool value)
		{
		}

		[Token(Token = "0x6001393")]
		[Address(RVA = "0x185F534", Offset = "0x185F534", VA = "0x185F534")]
		public JValue(string value)
		{
		}

		[Token(Token = "0x6001394")]
		[Address(RVA = "0x1863260", Offset = "0x1863260", VA = "0x1863260")]
		public JValue(Guid value)
		{
		}

		[Token(Token = "0x6001395")]
		[Address(RVA = "0x18632EC", Offset = "0x18632EC", VA = "0x18632EC")]
		public JValue(Uri value)
		{
		}

		[Token(Token = "0x6001396")]
		[Address(RVA = "0x1863320", Offset = "0x1863320", VA = "0x1863320")]
		public JValue(TimeSpan value)
		{
		}

		[Token(Token = "0x6001397")]
		[Address(RVA = "0x1851754", Offset = "0x1851754", VA = "0x1851754")]
		public JValue(object value)
		{
		}

		[Token(Token = "0x6001398")]
		[Address(RVA = "0x1863738", Offset = "0x1863738", VA = "0x1863738", Slot = "12")]
		internal override bool DeepEquals(JToken node)
		{
			return default(bool);
		}

		[Token(Token = "0x600139A")]
		[Address(RVA = "0x1863860", Offset = "0x1863860", VA = "0x1863860")]
		private static int Compare(JTokenType valueType, object objA, object objB)
		{
			return default(int);
		}

		[Token(Token = "0x600139B")]
		[Address(RVA = "0x1864124", Offset = "0x1864124", VA = "0x1864124")]
		private static int CompareFloat(object objA, object objB)
		{
			return default(int);
		}

		[Token(Token = "0x600139C")]
		[Address(RVA = "0x186422C", Offset = "0x186422C", VA = "0x186422C", Slot = "11")]
		internal override JToken CloneToken()
		{
			return null;
		}

		[Token(Token = "0x600139D")]
		[Address(RVA = "0x1853FA4", Offset = "0x1853FA4", VA = "0x1853FA4")]
		public static JValue CreateComment(string value)
		{
			return null;
		}

		[Token(Token = "0x600139E")]
		[Address(RVA = "0x186428C", Offset = "0x186428C", VA = "0x186428C")]
		public static JValue CreateString(string value)
		{
			return null;
		}

		[Token(Token = "0x600139F")]
		[Address(RVA = "0x18633A0", Offset = "0x18633A0", VA = "0x18633A0")]
		private static JTokenType GetValueType(JTokenType? current, object value)
		{
			return default(JTokenType);
		}

		[Token(Token = "0x60013A0")]
		[Address(RVA = "0x18642F8", Offset = "0x18642F8", VA = "0x18642F8")]
		private static JTokenType GetStringValueType(JTokenType? current)
		{
			return default(JTokenType);
		}

		[Token(Token = "0x60013A4")]
		[Address(RVA = "0x1864494", Offset = "0x1864494", VA = "0x1864494", Slot = "22")]
		public override void WriteTo(JsonWriter writer, params JsonConverter[] converters)
		{
		}

		[Token(Token = "0x60013A5")]
		[Address(RVA = "0x1864A78", Offset = "0x1864A78", VA = "0x1864A78", Slot = "23")]
		internal override int GetDeepHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60013A6")]
		[Address(RVA = "0x18637D8", Offset = "0x18637D8", VA = "0x18637D8")]
		private static bool ValuesEquals(JValue v1, JValue v2)
		{
			return default(bool);
		}

		[Token(Token = "0x60013A7")]
		[Address(RVA = "0x1864AC4", Offset = "0x1864AC4", VA = "0x1864AC4", Slot = "24")]
		public bool Equals(JValue other)
		{
			return default(bool);
		}

		[Token(Token = "0x60013A8")]
		[Address(RVA = "0x1864AD4", Offset = "0x1864AD4", VA = "0x1864AD4", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60013A9")]
		[Address(RVA = "0x1864B90", Offset = "0x1864B90", VA = "0x1864B90", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60013AA")]
		[Address(RVA = "0x1864BA8", Offset = "0x1864BA8", VA = "0x1864BA8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60013AB")]
		[Address(RVA = "0x1864C18", Offset = "0x1864C18", VA = "0x1864C18")]
		public string ToString(string format)
		{
			return null;
		}

		[Token(Token = "0x60013AC")]
		[Address(RVA = "0x1864DCC", Offset = "0x1864DCC", VA = "0x1864DCC")]
		public string ToString(IFormatProvider formatProvider)
		{
			return null;
		}

		[Token(Token = "0x60013AD")]
		[Address(RVA = "0x1864C98", Offset = "0x1864C98", VA = "0x1864C98", Slot = "25")]
		public string ToString(string format, IFormatProvider formatProvider)
		{
			return null;
		}

		[Token(Token = "0x60013AE")]
		[Address(RVA = "0x1864DDC", Offset = "0x1864DDC", VA = "0x1864DDC", Slot = "26")]
		private int System.IComparable.CompareTo(object obj)
		{
			return default(int);
		}

		[Token(Token = "0x60013AF")]
		[Address(RVA = "0x1864E7C", Offset = "0x1864E7C", VA = "0x1864E7C", Slot = "27")]
		public int CompareTo(JValue obj)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000278")]
	public static class LinqExtensions
	{
		[Serializable]
		[Token(Token = "0x200033E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6984", Offset = "0x9A6984")]
		private sealed class <>c__0<T> where T : JToken
		{
			[Token(Token = "0x4000F44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__0<T> <>9;

			[Token(Token = "0x4000F45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<T, IEnumerable<JToken>> <>9__0_0;

			[Token(Token = "0x6001686")]
			public <>c__0()
			{
			}

			[Token(Token = "0x6001687")]
			internal IEnumerable<JToken> <Ancestors>b__0_0(T j)
			{
				return null;
			}
		}

		[Serializable]
		[Token(Token = "0x200033F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6994", Offset = "0x9A6994")]
		private sealed class <>c__1<T> where T : JContainer
		{
			[Token(Token = "0x4000F46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__1<T> <>9;

			[Token(Token = "0x4000F47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<T, IEnumerable<JToken>> <>9__1_0;

			[Token(Token = "0x6001689")]
			public <>c__1()
			{
			}

			[Token(Token = "0x600168A")]
			internal IEnumerable<JToken> <Descendants>b__1_0(T j)
			{
				return null;
			}
		}

		[Serializable]
		[Token(Token = "0x2000340")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A69A4", Offset = "0x9A69A4")]
		private sealed class <>c
		{
			[Token(Token = "0x4000F48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000F49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<JObject, IEnumerable<JProperty>> <>9__2_0;

			[Token(Token = "0x600168C")]
			[Address(RVA = "0x18650D4", Offset = "0x18650D4", VA = "0x18650D4")]
			public <>c()
			{
			}

			[Token(Token = "0x600168D")]
			[Address(RVA = "0x18650DC", Offset = "0x18650DC", VA = "0x18650DC")]
			internal IEnumerable<JProperty> <Properties>b__2_0(JObject d)
			{
				return null;
			}
		}

		[Token(Token = "0x2000341")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A69B4", Offset = "0x9A69B4")]
		private sealed class <Values>d__9<T, U> : IEnumerable<U>, IEnumerable, IEnumerator<U>, IEnumerator, IDisposable where T : JToken
		{
			[Token(Token = "0x4000F4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x4000F4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private U <>2__current;

			[Token(Token = "0x4000F4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000F4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IEnumerable<T> source;

			[Token(Token = "0x4000F4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IEnumerable<T> <>3__source;

			[Token(Token = "0x4000F4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object key;

			[Token(Token = "0x4000F50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public object <>3__key;

			[Token(Token = "0x4000F51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IEnumerator<T> <>7__wrap1;

			[Token(Token = "0x4000F52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IEnumerator<JToken> <>7__wrap2;

			[Token(Token = "0x1700025E")]
			private U System.Collections.Generic.IEnumerator<U>.Current
			{
				[Token(Token = "0x6001693")]
				[DebuggerHidden]
				get
				{
					return (U)null;
				}
			}

			[Token(Token = "0x1700025F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001695")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600168E")]
			[DebuggerHidden]
			public <Values>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x600168F")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001690")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001691")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001692")]
			private void <>m__Finally2()
			{
			}

			[Token(Token = "0x6001694")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6001696")]
			[DebuggerHidden]
			private IEnumerator<U> System.Collections.Generic.IEnumerable<U>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001697")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Serializable]
		[Token(Token = "0x2000342")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A69C4", Offset = "0x9A69C4")]
		private sealed class <>c__11<T, U> where T : JToken
		{
			[Token(Token = "0x4000F53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__11<T, U> <>9;

			[Token(Token = "0x4000F54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<T, IEnumerable<JToken>> <>9__11_0;

			[Token(Token = "0x6001699")]
			public <>c__11()
			{
			}

			[Token(Token = "0x600169A")]
			internal IEnumerable<JToken> <Children>b__11_0(T c)
			{
				return null;
			}
		}

		[Token(Token = "0x2000343")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A69D4", Offset = "0x9A69D4")]
		private sealed class <Convert>d__12<T, U> : IEnumerable<U>, IEnumerable, IEnumerator<U>, IEnumerator, IDisposable where T : JToken
		{
			[Token(Token = "0x4000F55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x4000F56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private U <>2__current;

			[Token(Token = "0x4000F57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000F58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IEnumerable<T> source;

			[Token(Token = "0x4000F59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IEnumerable<T> <>3__source;

			[Token(Token = "0x4000F5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IEnumerator<T> <>7__wrap1;

			[Token(Token = "0x17000260")]
			private U System.Collections.Generic.IEnumerator<U>.Current
			{
				[Token(Token = "0x600169F")]
				[DebuggerHidden]
				get
				{
					return (U)null;
				}
			}

			[Token(Token = "0x17000261")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60016A1")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600169B")]
			[DebuggerHidden]
			public <Convert>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x600169C")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600169D")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600169E")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60016A0")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x60016A2")]
			[DebuggerHidden]
			private IEnumerator<U> System.Collections.Generic.IEnumerable<U>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60016A3")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x60013B0")]
		public static IJEnumerable<JToken> Ancestors<T>(this IEnumerable<T> source) where T : JToken
		{
			return null;
		}

		[Token(Token = "0x60013B1")]
		public static IJEnumerable<JToken> Descendants<T>(this IEnumerable<T> source) where T : JContainer
		{
			return null;
		}

		[Token(Token = "0x60013B2")]
		[Address(RVA = "0x1864EA0", Offset = "0x1864EA0", VA = "0x1864EA0")]
		public static IJEnumerable<JProperty> Properties(this IEnumerable<JObject> source)
		{
			return null;
		}

		[Token(Token = "0x60013B3")]
		[Address(RVA = "0x1864FB4", Offset = "0x1864FB4", VA = "0x1864FB4")]
		public static IJEnumerable<JToken> Values(this IEnumerable<JToken> source, object key)
		{
			return null;
		}

		[Token(Token = "0x60013B4")]
		[Address(RVA = "0x1865068", Offset = "0x1865068", VA = "0x1865068")]
		public static IJEnumerable<JToken> Values(this IEnumerable<JToken> source)
		{
			return null;
		}

		[Token(Token = "0x60013B5")]
		public static IEnumerable<U> Values<U>(this IEnumerable<JToken> source, object key)
		{
			return null;
		}

		[Token(Token = "0x60013B6")]
		public static IEnumerable<U> Values<U>(this IEnumerable<JToken> source)
		{
			return null;
		}

		[Token(Token = "0x60013B7")]
		public static U Value<U>(this IEnumerable<JToken> value)
		{
			return (U)null;
		}

		[Token(Token = "0x60013B8")]
		public static U Value<T, U>(this IEnumerable<T> value) where T : JToken
		{
			return (U)null;
		}

		[Token(Token = "0x60013B9")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x9AA7FC", Offset = "0x9AA7FC")]
		internal static IEnumerable<U> Values<T, U>(this IEnumerable<T> source, object key) where T : JToken
		{
			return null;
		}

		[Token(Token = "0x60013BA")]
		public static IJEnumerable<JToken> Children<T>(this IEnumerable<T> source) where T : JToken
		{
			return null;
		}

		[Token(Token = "0x60013BB")]
		public static IEnumerable<U> Children<T, U>(this IEnumerable<T> source) where T : JToken
		{
			return null;
		}

		[Token(Token = "0x60013BC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x9AA890", Offset = "0x9AA890")]
		internal static IEnumerable<U> Convert<T, U>(this IEnumerable<T> source) where T : JToken
		{
			return null;
		}

		[Token(Token = "0x60013BD")]
		internal static U Convert<T, U>(this T token) where T : JToken
		{
			return (U)null;
		}

		[Token(Token = "0x60013BE")]
		[Address(RVA = "0x1865018", Offset = "0x1865018", VA = "0x1865018")]
		public static IJEnumerable<JToken> AsJEnumerable(this IEnumerable<JToken> source)
		{
			return null;
		}

		[Token(Token = "0x60013BF")]
		public static IJEnumerable<T> AsJEnumerable<T>(this IEnumerable<T> source) where T : JToken
		{
			return null;
		}
	}
}
namespace Newtonsoft.Json.Converters
{
	[Token(Token = "0x2000279")]
	public class BsonObjectIdConverter : JsonConverter
	{
		[Token(Token = "0x60013C0")]
		[Address(RVA = "0x12DE9CC", Offset = "0x12DE9CC", VA = "0x12DE9CC", Slot = "4")]
		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
		{
		}

		[Token(Token = "0x60013C1")]
		[Address(RVA = "0x12DEB30", Offset = "0x12DEB30", VA = "0x12DEB30", Slot = "5")]
		public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
		{
			return null;
		}

		[Token(Token = "0x60013C2")]
		[Address(RVA = "0x12DEDD4", Offset = "0x12DEDD4", VA = "0x12DEDD4", Slot = "6")]
		public override bool CanConvert(Type objectType)
		{
			return default(bool);
		}

		[Token(Token = "0x60013C3")]
		[Address(RVA = "0x12DEE58", Offset = "0x12DEE58", VA = "0x12DEE58")]
		public BsonObjectIdConverter()
		{
		}
	}
	[Token(Token = "0x200027A")]
	public abstract class CustomCreationConverter<T> : JsonConverter
	{
		[Token(Token = "0x170001F4")]
		public override bool CanWrite
		{
			[Token(Token = "0x60013C8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60013C4")]
		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
		{
		}

		[Token(Token = "0x60013C5")]
		public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
		{
			return null;
		}

		[Token(Token = "0x60013C6")]
		public abstract T Create(Type objectType);

		[Token(Token = "0x60013C7")]
		public override bool CanConvert(Type objectType)
		{
			return default(bool);
		}

		[Token(Token = "0x60013C9")]
		protected CustomCreationConverter()
		{
		}
	}
	[Token(Token = "0x200027B")]
	public abstract class DateTimeConverterBase : JsonConverter
	{
		[Token(Token = "0x60013CA")]
		[Address(RVA = "0x12DEE68", Offset = "0x12DEE68", VA = "0x12DEE68", Slot = "6")]
		public override bool CanConvert(Type objectType)
		{
			return default(bool);
		}

		[Token(Token = "0x60013CB")]
		[Address(RVA = "0x12DEFD4", Offset = "0x12DEFD4", VA = "0x12DEFD4")]
		protected DateTimeConverterBase()
		{
		}
	}
	[Token(Token = "0x200027C")]
	public class IsoDateTimeConverter : DateTimeConverterBase
	{
		[Token(Token = "0x4000CF6")]
		private const string DefaultDateTimeFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK";

		[Token(Token = "0x4000CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private DateTimeStyles _dateTimeStyles;

		[Token(Token = "0x4000CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string _dateTimeFormat;

		[Token(Token = "0x4000CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CultureInfo _culture;

		[Token(Token = "0x170001F5")]
		public DateTimeStyles DateTimeStyles
		{
			[Token(Token = "0x60013CC")]
			[Address(RVA = "0x12DEFDC", Offset = "0x12DEFDC", VA = "0x12DEFDC")]
			get
			{
				return default(DateTimeStyles);
			}
			[Token(Token = "0x60013CD")]
			[Address(RVA = "0x12DEFE4", Offset = "0x12DEFE4", VA = "0x12DEFE4")]
			set
			{
			}
		}

		[Token(Token = "0x170001F6")]
		public string DateTimeFormat
		{
			[Token(Token = "0x60013CE")]
			[Address(RVA = "0x12DEFEC", Offset = "0x12DEFEC", VA = "0x12DEFEC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60013CF")]
			[Address(RVA = "0x12DF048", Offset = "0x12DF048", VA = "0x12DF048")]
			set
			{
			}
		}

		[Token(Token = "0x170001F7")]
		public CultureInfo Culture
		{
			[Token(Token = "0x60013D0")]
			[Address(RVA = "0x12DF074", Offset = "0x12DF074", VA = "0x12DF074")]
			get
			{
				return null;
			}
			[Token(Token = "0x60013D1")]
			[Address(RVA = "0x12DF0EC", Offset = "0x12DF0EC", VA = "0x12DF0EC")]
			set
			{
			}
		}

		[Token(Token = "0x60013D2")]
		[Address(RVA = "0x12DF0F4", Offset = "0x12DF0F4", VA = "0x12DF0F4", Slot = "4")]
		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
		{
		}

		[Token(Token = "0x60013D3")]
		[Address(RVA = "0x12DF35C", Offset = "0x12DF35C", VA = "0x12DF35C", Slot = "5")]
		public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
		{
			return null;
		}

		[Token(Token = "0x60013D4")]
		[Address(RVA = "0x12DF7D0", Offset = "0x12DF7D0", VA = "0x12DF7D0")]
		public IsoDateTimeConverter()
		{
		}
	}
	[Token(Token = "0x200027D")]
	public class JavaScriptDateTimeConverter : DateTimeConverterBase
	{
		[Token(Token = "0x60013D5")]
		[Address(RVA = "0x12DF7E0", Offset = "0x12DF7E0", VA = "0x12DF7E0", Slot = "4")]
		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
		{
		}

		[Token(Token = "0x60013D6")]
		[Address(RVA = "0x12DFA20", Offset = "0x12DFA20", VA = "0x12DFA20", Slot = "5")]
		public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
		{
			return null;
		}

		[Token(Token = "0x60013D7")]
		[Address(RVA = "0x12E004C", Offset = "0x12E004C", VA = "0x12E004C")]
		public JavaScriptDateTimeConverter()
		{
		}
	}
	[Token(Token = "0x200027E")]
	public enum JsonDateTimeSerializationMode
	{
		[Token(Token = "0x4000CFB")]
		Local,
		[Token(Token = "0x4000CFC")]
		Utc,
		[Token(Token = "0x4000CFD")]
		Unspecified,
		[Token(Token = "0x4000CFE")]
		RoundtripKind
	}
	[Token(Token = "0x200027F")]
	public class KeyValuePairConverter : JsonConverter
	{
		[Token(Token = "0x60013D8")]
		[Address(RVA = "0x12E0054", Offset = "0x12E0054", VA = "0x12E0054", Slot = "4")]
		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
		{
		}

		[Token(Token = "0x60013D9")]
		[Address(RVA = "0x12E021C", Offset = "0x12E021C", VA = "0x12E021C", Slot = "5")]
		public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
		{
			return null;
		}

		[Token(Token = "0x60013DA")]
		[Address(RVA = "0x12E0514", Offset = "0x12E0514", VA = "0x12E0514", Slot = "6")]
		public override bool CanConvert(Type objectType)
		{
			return default(bool);
		}

		[Token(Token = "0x60013DB")]
		[Address(RVA = "0x12E0604", Offset = "0x12E0604", VA = "0x12E0604")]
		public KeyValuePairConverter()
		{
		}
	}
	[Token(Token = "0x2000280")]
	public class RegexConverter : JsonConverter
	{
		[Token(Token = "0x60013DC")]
		[Address(RVA = "0x12E060C", Offset = "0x12E060C", VA = "0x12E060C", Slot = "4")]
		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
		{
		}

		[Token(Token = "0x60013DD")]
		[Address(RVA = "0x12E09FC", Offset = "0x12E09FC", VA = "0x12E09FC")]
		private bool HasFlag(RegexOptions options, RegexOptions flag)
		{
			return default(bool);
		}

		[Token(Token = "0x60013DE")]
		[Address(RVA = "0x12E073C", Offset = "0x12E073C", VA = "0x12E073C")]
		private void WriteBson(BsonWriter writer, Regex regex)
		{
		}

		[Token(Token = "0x60013DF")]
		[Address(RVA = "0x12E08C0", Offset = "0x12E08C0", VA = "0x12E08C0")]
		private void WriteJson(JsonWriter writer, Regex regex)
		{
		}

		[Token(Token = "0x60013E0")]
		[Address(RVA = "0x12E0A08", Offset = "0x12E0A08", VA = "0x12E0A08", Slot = "5")]
		public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
		{
			return null;
		}

		[Token(Token = "0x60013E1")]
		[Address(RVA = "0x12E0A94", Offset = "0x12E0A94", VA = "0x12E0A94")]
		private object ReadBson(BsonReader reader)
		{
			return null;
		}

		[Token(Token = "0x60013E2")]
		[Address(RVA = "0x12E0CBC", Offset = "0x12E0CBC", VA = "0x12E0CBC")]
		private Regex ReadJson(JsonReader reader)
		{
			return null;
		}

		[Token(Token = "0x60013E3")]
		[Address(RVA = "0x12E0EE4", Offset = "0x12E0EE4", VA = "0x12E0EE4", Slot = "6")]
		public override bool CanConvert(Type objectType)
		{
			return default(bool);
		}

		[Token(Token = "0x60013E4")]
		[Address(RVA = "0x12E0F68", Offset = "0x12E0F68", VA = "0x12E0F68")]
		public RegexConverter()
		{
		}
	}
	[Token(Token = "0x2000281")]
	public class StringEnumConverter : JsonConverter
	{
		[Serializable]
		[Token(Token = "0x2000344")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A69E4", Offset = "0x9A69E4")]
		private sealed class <>c
		{
			[Token(Token = "0x4000F5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000F5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<EnumMemberAttribute, string> <>9__7_0;

			[Token(Token = "0x60016A5")]
			[Address(RVA = "0x12E1D44", Offset = "0x12E1D44", VA = "0x12E1D44")]
			public <>c()
			{
			}

			[Token(Token = "0x60016A6")]
			[Address(RVA = "0x12E1D4C", Offset = "0x12E1D4C", VA = "0x12E1D4C")]
			internal string <GetEnumNameMap>b__7_0(EnumMemberAttribute a)
			{
				return null;
			}
		}

		[Token(Token = "0x4000CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Dictionary<Type, BidirectionalDictionary<string, string>> _enumMemberNamesPerType;

		[Token(Token = "0x4000D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8580", Offset = "0x9A8580")]
		private bool <CamelCaseText>k__BackingField;

		[Token(Token = "0x170001F8")]
		public bool CamelCaseText
		{
			[Token(Token = "0x60013E5")]
			[Address(RVA = "0x12E0F70", Offset = "0x12E0F70", VA = "0x12E0F70")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA934", Offset = "0x9AA934")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60013E6")]
			[Address(RVA = "0x12E0F78", Offset = "0x12E0F78", VA = "0x12E0F78")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA944", Offset = "0x9AA944")]
			set
			{
			}
		}

		[Token(Token = "0x60013E7")]
		[Address(RVA = "0x12E0F84", Offset = "0x12E0F84", VA = "0x12E0F84", Slot = "4")]
		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
		{
		}

		[Token(Token = "0x60013E8")]
		[Address(RVA = "0x12E1848", Offset = "0x12E1848", VA = "0x12E1848", Slot = "5")]
		public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
		{
			return null;
		}

		[Token(Token = "0x60013E9")]
		[Address(RVA = "0x12E11F8", Offset = "0x12E11F8", VA = "0x12E11F8")]
		private BidirectionalDictionary<string, string> GetEnumNameMap(Type t)
		{
			return null;
		}

		[Token(Token = "0x60013EA")]
		[Address(RVA = "0x12E1C18", Offset = "0x12E1C18", VA = "0x12E1C18", Slot = "6")]
		public override bool CanConvert(Type objectType)
		{
			return default(bool);
		}

		[Token(Token = "0x60013EB")]
		[Address(RVA = "0x12E1C70", Offset = "0x12E1C70", VA = "0x12E1C70")]
		public StringEnumConverter()
		{
		}
	}
	[Token(Token = "0x2000282")]
	internal class XmlDocumentWrapper : XmlNodeWrapper, IXmlDocument, IXmlNode
	{
		[Token(Token = "0x4000D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private XmlDocument _document;

		[Token(Token = "0x170001F9")]
		public IXmlElement DocumentElement
		{
			[Token(Token = "0x60013F8")]
			[Address(RVA = "0x12E26D8", Offset = "0x12E26D8", VA = "0x12E26D8", Slot = "25")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013EC")]
		[Address(RVA = "0x12E1ED4", Offset = "0x12E1ED4", VA = "0x12E1ED4")]
		public XmlDocumentWrapper(XmlDocument document)
		{
		}

		[Token(Token = "0x60013ED")]
		[Address(RVA = "0x12E1F00", Offset = "0x12E1F00", VA = "0x12E1F00", Slot = "14")]
		public IXmlNode CreateComment(string data)
		{
			return null;
		}

		[Token(Token = "0x60013EE")]
		[Address(RVA = "0x12E1FA0", Offset = "0x12E1FA0", VA = "0x12E1FA0", Slot = "15")]
		public IXmlNode CreateTextNode(string text)
		{
			return null;
		}

		[Token(Token = "0x60013EF")]
		[Address(RVA = "0x12E2040", Offset = "0x12E2040", VA = "0x12E2040", Slot = "16")]
		public IXmlNode CreateCDataSection(string data)
		{
			return null;
		}

		[Token(Token = "0x60013F0")]
		[Address(RVA = "0x12E20E0", Offset = "0x12E20E0", VA = "0x12E20E0", Slot = "17")]
		public IXmlNode CreateWhitespace(string text)
		{
			return null;
		}

		[Token(Token = "0x60013F1")]
		[Address(RVA = "0x12E2180", Offset = "0x12E2180", VA = "0x12E2180", Slot = "18")]
		public IXmlNode CreateSignificantWhitespace(string text)
		{
			return null;
		}

		[Token(Token = "0x60013F2")]
		[Address(RVA = "0x12E2220", Offset = "0x12E2220", VA = "0x12E2220", Slot = "19")]
		public IXmlNode CreateXmlDeclaration(string version, string encoding, string standalone)
		{
			return null;
		}

		[Token(Token = "0x60013F3")]
		[Address(RVA = "0x12E22D8", Offset = "0x12E22D8", VA = "0x12E22D8", Slot = "20")]
		public IXmlNode CreateProcessingInstruction(string target, string data)
		{
			return null;
		}

		[Token(Token = "0x60013F4")]
		[Address(RVA = "0x12E2380", Offset = "0x12E2380", VA = "0x12E2380", Slot = "21")]
		public IXmlElement CreateElement(string elementName)
		{
			return null;
		}

		[Token(Token = "0x60013F5")]
		[Address(RVA = "0x12E2444", Offset = "0x12E2444", VA = "0x12E2444", Slot = "22")]
		public IXmlElement CreateElement(string qualifiedName, string namespaceURI)
		{
			return null;
		}

		[Token(Token = "0x60013F6")]
		[Address(RVA = "0x12E24E4", Offset = "0x12E24E4", VA = "0x12E24E4", Slot = "23")]
		public IXmlNode CreateAttribute(string name, string value)
		{
			return null;
		}

		[Token(Token = "0x60013F7")]
		[Address(RVA = "0x12E25F4", Offset = "0x12E25F4", VA = "0x12E25F4", Slot = "24")]
		public IXmlNode CreateAttribute(string qualifiedName, string namespaceURI, string value)
		{
			return null;
		}
	}
	[Token(Token = "0x2000283")]
	internal class XmlElementWrapper : XmlNodeWrapper, IXmlElement, IXmlNode
	{
		[Token(Token = "0x4000D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private XmlElement _element;

		[Token(Token = "0x60013F9")]
		[Address(RVA = "0x12E2418", Offset = "0x12E2418", VA = "0x12E2418")]
		public XmlElementWrapper(XmlElement element)
		{
		}

		[Token(Token = "0x60013FA")]
		[Address(RVA = "0x12E2788", Offset = "0x12E2788", VA = "0x12E2788", Slot = "14")]
		public void SetAttributeNode(IXmlNode attribute)
		{
		}

		[Token(Token = "0x60013FB")]
		[Address(RVA = "0x12E2910", Offset = "0x12E2910", VA = "0x12E2910", Slot = "15")]
		public string GetPrefixOfNamespace(string namespaceURI)
		{
			return null;
		}
	}
	[Token(Token = "0x2000284")]
	internal class XmlDeclarationWrapper : XmlNodeWrapper, IXmlDeclaration, IXmlNode
	{
		[Token(Token = "0x4000D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private XmlDeclaration _declaration;

		[Token(Token = "0x170001FA")]
		public string Version
		{
			[Token(Token = "0x60013FD")]
			[Address(RVA = "0x12E1DD4", Offset = "0x12E1DD4", VA = "0x12E1DD4", Slot = "14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001FB")]
		public string Encoding
		{
			[Token(Token = "0x60013FE")]
			[Address(RVA = "0x12E1E04", Offset = "0x12E1E04", VA = "0x12E1E04", Slot = "15")]
			get
			{
				return null;
			}
			[Token(Token = "0x60013FF")]
			[Address(RVA = "0x12E1E34", Offset = "0x12E1E34", VA = "0x12E1E34", Slot = "16")]
			set
			{
			}
		}

		[Token(Token = "0x170001FC")]
		public string Standalone
		{
			[Token(Token = "0x6001400")]
			[Address(RVA = "0x12E1E6C", Offset = "0x12E1E6C", VA = "0x12E1E6C", Slot = "17")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001401")]
			[Address(RVA = "0x12E1E9C", Offset = "0x12E1E9C", VA = "0x12E1E9C", Slot = "18")]
			set
			{
			}
		}

		[Token(Token = "0x60013FC")]
		[Address(RVA = "0x12E1D7C", Offset = "0x12E1D7C", VA = "0x12E1D7C")]
		public XmlDeclarationWrapper(XmlDeclaration declaration)
		{
		}
	}
	[Token(Token = "0x2000285")]
	internal class XmlNodeWrapper : IXmlNode
	{
		[Token(Token = "0x4000D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly XmlNode _node;

		[Token(Token = "0x170001FD")]
		public object WrappedNode
		{
			[Token(Token = "0x6001403")]
			[Address(RVA = "0x12E2908", Offset = "0x12E2908", VA = "0x12E2908", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001FE")]
		public XmlNodeType NodeType
		{
			[Token(Token = "0x6001404")]
			[Address(RVA = "0x12E8D30", Offset = "0x12E8D30", VA = "0x12E8D30", Slot = "4")]
			get
			{
				return default(XmlNodeType);
			}
		}

		[Token(Token = "0x170001FF")]
		public string Name
		{
			[Token(Token = "0x6001405")]
			[Address(RVA = "0x12E8D64", Offset = "0x12E8D64", VA = "0x12E8D64")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000200")]
		public string LocalName
		{
			[Token(Token = "0x6001406")]
			[Address(RVA = "0x12E8D98", Offset = "0x12E8D98", VA = "0x12E8D98", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000201")]
		public IList<IXmlNode> ChildNodes
		{
			[Token(Token = "0x6001407")]
			[Address(RVA = "0x12E8DD0", Offset = "0x12E8DD0", VA = "0x12E8DD0", Slot = "6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000202")]
		public IList<IXmlNode> Attributes
		{
			[Token(Token = "0x6001409")]
			[Address(RVA = "0x12E9068", Offset = "0x12E9068", VA = "0x12E9068", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000203")]
		public IXmlNode ParentNode
		{
			[Token(Token = "0x600140A")]
			[Address(RVA = "0x12E9170", Offset = "0x12E9170", VA = "0x12E9170", Slot = "8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000204")]
		public string Value
		{
			[Token(Token = "0x600140B")]
			[Address(RVA = "0x12E921C", Offset = "0x12E921C", VA = "0x12E921C", Slot = "9")]
			get
			{
				return null;
			}
			[Token(Token = "0x600140C")]
			[Address(RVA = "0x12E25B8", Offset = "0x12E25B8", VA = "0x12E25B8", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x17000205")]
		public string Prefix
		{
			[Token(Token = "0x600140E")]
			[Address(RVA = "0x12E9350", Offset = "0x12E9350", VA = "0x12E9350")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000206")]
		public string NamespaceURI
		{
			[Token(Token = "0x600140F")]
			[Address(RVA = "0x12E9388", Offset = "0x12E9388", VA = "0x12E9388", Slot = "12")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001402")]
		[Address(RVA = "0x12E1DA8", Offset = "0x12E1DA8", VA = "0x12E1DA8")]
		public XmlNodeWrapper(XmlNode node)
		{
		}

		[Token(Token = "0x6001408")]
		[Address(RVA = "0x12E8EA8", Offset = "0x12E8EA8", VA = "0x12E8EA8")]
		private IXmlNode WrapNode(XmlNode node)
		{
			return null;
		}

		[Token(Token = "0x600140D")]
		[Address(RVA = "0x12E9250", Offset = "0x12E9250", VA = "0x12E9250", Slot = "11")]
		public IXmlNode AppendChild(IXmlNode newChild)
		{
			return null;
		}

		[Token(Token = "0x6001410")]
		[Address(RVA = "0x12E93C0", Offset = "0x12E93C0", VA = "0x12E93C0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA954", Offset = "0x9AA954")]
		private IXmlNode <get_ChildNodes>b__11_0(XmlNode n)
		{
			return null;
		}

		[Token(Token = "0x6001411")]
		[Address(RVA = "0x12E93C4", Offset = "0x12E93C4", VA = "0x12E93C4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA964", Offset = "0x9AA964")]
		private IXmlNode <get_Attributes>b__14_0(XmlAttribute a)
		{
			return null;
		}
	}
	[Token(Token = "0x2000286")]
	internal interface IXmlDocument : IXmlNode
	{
		[Token(Token = "0x17000207")]
		IXmlElement DocumentElement
		{
			[Token(Token = "0x600141D")]
			get;
		}

		[Token(Token = "0x6001412")]
		IXmlNode CreateComment(string text);

		[Token(Token = "0x6001413")]
		IXmlNode CreateTextNode(string text);

		[Token(Token = "0x6001414")]
		IXmlNode CreateCDataSection(string data);

		[Token(Token = "0x6001415")]
		IXmlNode CreateWhitespace(string text);

		[Token(Token = "0x6001416")]
		IXmlNode CreateSignificantWhitespace(string text);

		[Token(Token = "0x6001417")]
		IXmlNode CreateXmlDeclaration(string version, string encoding, string standalone);

		[Token(Token = "0x6001418")]
		IXmlNode CreateProcessingInstruction(string target, string data);

		[Token(Token = "0x6001419")]
		IXmlElement CreateElement(string elementName);

		[Token(Token = "0x600141A")]
		IXmlElement CreateElement(string qualifiedName, string namespaceURI);

		[Token(Token = "0x600141B")]
		IXmlNode CreateAttribute(string name, string value);

		[Token(Token = "0x600141C")]
		IXmlNode CreateAttribute(string qualifiedName, string namespaceURI, string value);
	}
	[Token(Token = "0x2000287")]
	internal interface IXmlDeclaration : IXmlNode
	{
		[Token(Token = "0x17000208")]
		string Version
		{
			[Token(Token = "0x600141E")]
			get;
		}

		[Token(Token = "0x17000209")]
		string Encoding
		{
			[Token(Token = "0x600141F")]
			get;
			[Token(Token = "0x6001420")]
			set;
		}

		[Token(Token = "0x1700020A")]
		string Standalone
		{
			[Token(Token = "0x6001421")]
			get;
			[Token(Token = "0x6001422")]
			set;
		}
	}
	[Token(Token = "0x2000288")]
	internal interface IXmlElement : IXmlNode
	{
		[Token(Token = "0x6001423")]
		void SetAttributeNode(IXmlNode attribute);

		[Token(Token = "0x6001424")]
		string GetPrefixOfNamespace(string namespaceURI);
	}
	[Token(Token = "0x2000289")]
	internal interface IXmlNode
	{
		[Token(Token = "0x1700020B")]
		XmlNodeType NodeType
		{
			[Token(Token = "0x6001425")]
			get;
		}

		[Token(Token = "0x1700020C")]
		string LocalName
		{
			[Token(Token = "0x6001426")]
			get;
		}

		[Token(Token = "0x1700020D")]
		IList<IXmlNode> ChildNodes
		{
			[Token(Token = "0x6001427")]
			get;
		}

		[Token(Token = "0x1700020E")]
		IList<IXmlNode> Attributes
		{
			[Token(Token = "0x6001428")]
			get;
		}

		[Token(Token = "0x1700020F")]
		IXmlNode ParentNode
		{
			[Token(Token = "0x6001429")]
			get;
		}

		[Token(Token = "0x17000210")]
		string Value
		{
			[Token(Token = "0x600142A")]
			get;
			[Token(Token = "0x600142B")]
			set;
		}

		[Token(Token = "0x17000211")]
		string NamespaceURI
		{
			[Token(Token = "0x600142D")]
			get;
		}

		[Token(Token = "0x17000212")]
		object WrappedNode
		{
			[Token(Token = "0x600142E")]
			get;
		}

		[Token(Token = "0x600142C")]
		IXmlNode AppendChild(IXmlNode newChild);
	}
	[Token(Token = "0x200028A")]
	public class XmlNodeConverter : JsonConverter
	{
		[Serializable]
		[Token(Token = "0x2000345")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A69F4", Offset = "0x9A69F4")]
		private sealed class <>c
		{
			[Token(Token = "0x4000F5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000F5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<IXmlNode, bool> <>9__24_0;

			[Token(Token = "0x4000F5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<IXmlNode, bool> <>9__37_0;

			[Token(Token = "0x60016A8")]
			[Address(RVA = "0x12E8820", Offset = "0x12E8820", VA = "0x12E8820")]
			public <>c()
			{
			}

			[Token(Token = "0x60016A9")]
			[Address(RVA = "0x12E8828", Offset = "0x12E8828", VA = "0x12E8828")]
			internal bool <IsArray>b__24_0(IXmlNode a)
			{
				return default(bool);
			}

			[Token(Token = "0x60016AA")]
			[Address(RVA = "0x12E8988", Offset = "0x12E8988", VA = "0x12E8988")]
			internal bool <ValueAttributes>b__37_0(IXmlNode a)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000346")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6A04", Offset = "0x9A6A04")]
		private sealed class <>c__DisplayClass26_0
		{
			[Token(Token = "0x4000F60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public IXmlNode node;

			[Token(Token = "0x60016AB")]
			[Address(RVA = "0x12E5B84", Offset = "0x12E5B84", VA = "0x12E5B84")]
			public <>c__DisplayClass26_0()
			{
			}

			[Token(Token = "0x60016AC")]
			[Address(RVA = "0x12E8A50", Offset = "0x12E8A50", VA = "0x12E8A50")]
			internal bool <SerializeNode>b__0(IXmlNode n)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000347")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6A14", Offset = "0x9A6A14")]
		private sealed class <>c__DisplayClass30_0
		{
			[Token(Token = "0x4000F61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string propertyName;

			[Token(Token = "0x60016AD")]
			[Address(RVA = "0x12E84EC", Offset = "0x12E84EC", VA = "0x12E84EC")]
			public <>c__DisplayClass30_0()
			{
			}

			[Token(Token = "0x60016AE")]
			[Address(RVA = "0x12E8B98", Offset = "0x12E8B98", VA = "0x12E8B98")]
			internal bool <ReadArrayElements>b__0(IXmlElement n)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000348")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6A24", Offset = "0x9A6A24")]
		private sealed class <>c__DisplayClass35_0
		{
			[Token(Token = "0x4000F62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string propertyName;

			[Token(Token = "0x60016AF")]
			[Address(RVA = "0x12E87A4", Offset = "0x12E87A4", VA = "0x12E87A4")]
			public <>c__DisplayClass35_0()
			{
			}

			[Token(Token = "0x60016B0")]
			[Address(RVA = "0x12E8C64", Offset = "0x12E8C64", VA = "0x12E8C64")]
			internal bool <DeserializeNode>b__0(IXmlElement n)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000D05")]
		private const string TextName = "#text";

		[Token(Token = "0x4000D06")]
		private const string CommentName = "#comment";

		[Token(Token = "0x4000D07")]
		private const string CDataName = "#cdata-section";

		[Token(Token = "0x4000D08")]
		private const string WhitespaceName = "#whitespace";

		[Token(Token = "0x4000D09")]
		private const string SignificantWhitespaceName = "#significant-whitespace";

		[Token(Token = "0x4000D0A")]
		private const string DeclarationName = "?xml";

		[Token(Token = "0x4000D0B")]
		private const string JsonNamespaceUri = "http://james.newtonking.com/projects/json";

		[Token(Token = "0x4000D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8590", Offset = "0x9A8590")]
		private string <DeserializeRootElementName>k__BackingField;

		[Token(Token = "0x4000D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A85A0", Offset = "0x9A85A0")]
		private bool <WriteArrayAttribute>k__BackingField;

		[Token(Token = "0x4000D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A85B0", Offset = "0x9A85B0")]
		private bool <OmitRootObject>k__BackingField;

		[Token(Token = "0x17000213")]
		public string DeserializeRootElementName
		{
			[Token(Token = "0x600142F")]
			[Address(RVA = "0x12E2950", Offset = "0x12E2950", VA = "0x12E2950")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA974", Offset = "0x9AA974")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001430")]
			[Address(RVA = "0x12E2958", Offset = "0x12E2958", VA = "0x12E2958")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA984", Offset = "0x9AA984")]
			set
			{
			}
		}

		[Token(Token = "0x17000214")]
		public bool WriteArrayAttribute
		{
			[Token(Token = "0x6001431")]
			[Address(RVA = "0x12E2960", Offset = "0x12E2960", VA = "0x12E2960")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA994", Offset = "0x9AA994")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001432")]
			[Address(RVA = "0x12E2968", Offset = "0x12E2968", VA = "0x12E2968")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA9A4", Offset = "0x9AA9A4")]
			set
			{
			}
		}

		[Token(Token = "0x17000215")]
		public bool OmitRootObject
		{
			[Token(Token = "0x6001433")]
			[Address(RVA = "0x12E2974", Offset = "0x12E2974", VA = "0x12E2974")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA9B4", Offset = "0x9AA9B4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001434")]
			[Address(RVA = "0x12E297C", Offset = "0x12E297C", VA = "0x12E297C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA9C4", Offset = "0x9AA9C4")]
			set
			{
			}
		}

		[Token(Token = "0x6001435")]
		[Address(RVA = "0x12E2988", Offset = "0x12E2988", VA = "0x12E2988", Slot = "4")]
		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
		{
		}

		[Token(Token = "0x6001436")]
		[Address(RVA = "0x12E29BC", Offset = "0x12E29BC", VA = "0x12E29BC")]
		private IXmlNode WrapXml(object value)
		{
			return null;
		}

		[Token(Token = "0x6001437")]
		[Address(RVA = "0x12E2A3C", Offset = "0x12E2A3C", VA = "0x12E2A3C")]
		private void PushParentNamespaces(IXmlNode node, XmlNamespaceManager manager)
		{
		}

		[Token(Token = "0x6001438")]
		[Address(RVA = "0x12E4C80", Offset = "0x12E4C80", VA = "0x12E4C80")]
		private string ResolveFullName(IXmlNode node, XmlNamespaceManager manager)
		{
			return null;
		}

		[Token(Token = "0x6001439")]
		[Address(RVA = "0x12E4FB0", Offset = "0x12E4FB0", VA = "0x12E4FB0")]
		private string GetPropertyName(IXmlNode node, XmlNamespaceManager manager)
		{
			return null;
		}

		[Token(Token = "0x600143A")]
		[Address(RVA = "0x12E52D4", Offset = "0x12E52D4", VA = "0x12E52D4")]
		private bool IsArray(IXmlNode node)
		{
			return default(bool);
		}

		[Token(Token = "0x600143B")]
		[Address(RVA = "0x12E5578", Offset = "0x12E5578", VA = "0x12E5578")]
		private void SerializeGroupedNodes(JsonWriter writer, IXmlNode node, XmlNamespaceManager manager, bool writePropertyName)
		{
		}

		[Token(Token = "0x600143C")]
		[Address(RVA = "0x12E31F0", Offset = "0x12E31F0", VA = "0x12E31F0")]
		private void SerializeNode(JsonWriter writer, IXmlNode node, XmlNamespaceManager manager, bool writePropertyName)
		{
		}

		[Token(Token = "0x600143D")]
		[Address(RVA = "0x12E5C78", Offset = "0x12E5C78", VA = "0x12E5C78", Slot = "5")]
		public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
		{
			return null;
		}

		[Token(Token = "0x600143E")]
		[Address(RVA = "0x12E7038", Offset = "0x12E7038", VA = "0x12E7038")]
		private void DeserializeValue(JsonReader reader, IXmlDocument document, XmlNamespaceManager manager, string propertyName, IXmlNode currentNode)
		{
		}

		[Token(Token = "0x600143F")]
		[Address(RVA = "0x12E5D3C", Offset = "0x12E5D3C", VA = "0x12E5D3C")]
		private void ReadElement(JsonReader reader, IXmlDocument document, IXmlNode currentNode, string propertyName, XmlNamespaceManager manager)
		{
		}

		[Token(Token = "0x6001440")]
		[Address(RVA = "0x12E7B00", Offset = "0x12E7B00", VA = "0x12E7B00")]
		private void ReadArrayElements(JsonReader reader, IXmlDocument document, string propertyName, IXmlNode currentNode, XmlNamespaceManager manager)
		{
		}

		[Token(Token = "0x6001441")]
		[Address(RVA = "0x12E84F4", Offset = "0x12E84F4", VA = "0x12E84F4")]
		private void AddJsonArrayAttribute(IXmlElement element, IXmlDocument document)
		{
		}

		[Token(Token = "0x6001442")]
		[Address(RVA = "0x12E7DF8", Offset = "0x12E7DF8", VA = "0x12E7DF8")]
		private Dictionary<string, string> ReadAttributeElements(JsonReader reader, XmlNamespaceManager manager)
		{
			return null;
		}

		[Token(Token = "0x6001443")]
		[Address(RVA = "0x12E7650", Offset = "0x12E7650", VA = "0x12E7650")]
		private void CreateInstruction(JsonReader reader, IXmlDocument document, IXmlNode currentNode, string propertyName)
		{
		}

		[Token(Token = "0x6001444")]
		[Address(RVA = "0x12E8350", Offset = "0x12E8350", VA = "0x12E8350")]
		private IXmlElement CreateElement(string elementName, IXmlDocument document, string elementPrefix, XmlNamespaceManager manager)
		{
			return null;
		}

		[Token(Token = "0x6001445")]
		[Address(RVA = "0x12E6970", Offset = "0x12E6970", VA = "0x12E6970")]
		private void DeserializeNode(JsonReader reader, IXmlDocument document, XmlNamespaceManager manager, IXmlNode currentNode)
		{
		}

		[Token(Token = "0x6001446")]
		[Address(RVA = "0x12E8668", Offset = "0x12E8668", VA = "0x12E8668")]
		private bool IsNamespaceAttribute(string attributeName, out string prefix)
		{
			return default(bool);
		}

		[Token(Token = "0x6001447")]
		[Address(RVA = "0x12E5B8C", Offset = "0x12E5B8C", VA = "0x12E5B8C")]
		private IEnumerable<IXmlNode> ValueAttributes(IEnumerable<IXmlNode> c)
		{
			return null;
		}

		[Token(Token = "0x6001448")]
		[Address(RVA = "0x12E87AC", Offset = "0x12E87AC", VA = "0x12E87AC", Slot = "6")]
		public override bool CanConvert(Type valueType)
		{
			return default(bool);
		}

		[Token(Token = "0x6001449")]
		[Address(RVA = "0x12E87B4", Offset = "0x12E87B4", VA = "0x12E87B4")]
		public XmlNodeConverter()
		{
		}
	}
}
namespace Newtonsoft.Json.Bson
{
	[Token(Token = "0x200028B")]
	internal enum BsonBinaryType : byte
	{
		[Token(Token = "0x4000D10")]
		Binary = 0,
		[Token(Token = "0x4000D11")]
		Function = 1,
		[Token(Token = "0x4000D12")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x9A85C0", Offset = "0x9A85C0")]
		Data = 2,
		[Token(Token = "0x4000D13")]
		Uuid = 3,
		[Token(Token = "0x4000D14")]
		Md5 = 5,
		[Token(Token = "0x4000D15")]
		UserDefined = 128
	}
	[Token(Token = "0x200028C")]
	internal class BsonBinaryWriter
	{
		[Token(Token = "0x4000D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Encoding Encoding;

		[Token(Token = "0x4000D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly BinaryWriter _writer;

		[Token(Token = "0x4000D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private byte[] _largeByteBuffer;

		[Token(Token = "0x4000D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int _maxChars;

		[Token(Token = "0x4000D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A85F8", Offset = "0x9A85F8")]
		private DateTimeKind <DateTimeKindHandling>k__BackingField;

		[Token(Token = "0x17000216")]
		public DateTimeKind DateTimeKindHandling
		{
			[Token(Token = "0x600144A")]
			[Address(RVA = "0x15DF564", Offset = "0x15DF564", VA = "0x15DF564")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA9D4", Offset = "0x9AA9D4")]
			get
			{
				return default(DateTimeKind);
			}
			[Token(Token = "0x600144B")]
			[Address(RVA = "0x15DF56C", Offset = "0x15DF56C", VA = "0x15DF56C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA9E4", Offset = "0x9AA9E4")]
			set
			{
			}
		}

		[Token(Token = "0x600144C")]
		[Address(RVA = "0x15DF574", Offset = "0x15DF574", VA = "0x15DF574")]
		public BsonBinaryWriter(Stream stream)
		{
		}

		[Token(Token = "0x600144D")]
		[Address(RVA = "0x15DF5F8", Offset = "0x15DF5F8", VA = "0x15DF5F8")]
		public void Flush()
		{
		}

		[Token(Token = "0x600144E")]
		[Address(RVA = "0x15DF62C", Offset = "0x15DF62C", VA = "0x15DF62C")]
		public void Close()
		{
		}

		[Token(Token = "0x600144F")]
		[Address(RVA = "0x15DF660", Offset = "0x15DF660", VA = "0x15DF660")]
		public void WriteToken(BsonToken t)
		{
		}

		[Token(Token = "0x6001450")]
		[Address(RVA = "0x15E01FC", Offset = "0x15E01FC", VA = "0x15E01FC")]
		private void WriteTokenInternal(BsonToken t)
		{
		}

		[Token(Token = "0x6001451")]
		[Address(RVA = "0x15E18C4", Offset = "0x15E18C4", VA = "0x15E18C4")]
		private void WriteString(string s, int byteCount, int? calculatedlengthPrefix)
		{
		}

		[Token(Token = "0x6001452")]
		[Address(RVA = "0x15E1BAC", Offset = "0x15E1BAC", VA = "0x15E1BAC")]
		private int CalculateSize(int stringByteCount)
		{
			return default(int);
		}

		[Token(Token = "0x6001453")]
		[Address(RVA = "0x15E1BB4", Offset = "0x15E1BB4", VA = "0x15E1BB4")]
		private int CalculateSizeWithLength(int stringByteCount, bool includeSize)
		{
			return default(int);
		}

		[Token(Token = "0x6001454")]
		[Address(RVA = "0x15DF68C", Offset = "0x15DF68C", VA = "0x15DF68C")]
		private int CalculateSize(BsonToken t)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200028D")]
	public class BsonObjectId
	{
		[Token(Token = "0x4000D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8608", Offset = "0x9A8608")]
		private byte[] <Value>k__BackingField;

		[Token(Token = "0x17000217")]
		public byte[] Value
		{
			[Token(Token = "0x6001456")]
			[Address(RVA = "0x15E1DB4", Offset = "0x15E1DB4", VA = "0x15E1DB4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AA9F4", Offset = "0x9AA9F4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001457")]
			[Address(RVA = "0x15E1DBC", Offset = "0x15E1DBC", VA = "0x15E1DBC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AAA04", Offset = "0x9AAA04")]
			private set
			{
			}
		}

		[Token(Token = "0x6001458")]
		[Address(RVA = "0x15E1DC4", Offset = "0x15E1DC4", VA = "0x15E1DC4")]
		public BsonObjectId(byte[] value)
		{
		}
	}
	[Token(Token = "0x200028E")]
	public class BsonReader : JsonReader
	{
		[Token(Token = "0x2000349")]
		private enum BsonReaderState
		{
			[Token(Token = "0x4000F64")]
			Normal,
			[Token(Token = "0x4000F65")]
			ReferenceStart,
			[Token(Token = "0x4000F66")]
			ReferenceRef,
			[Token(Token = "0x4000F67")]
			ReferenceId,
			[Token(Token = "0x4000F68")]
			CodeWScopeStart,
			[Token(Token = "0x4000F69")]
			CodeWScopeCode,
			[Token(Token = "0x4000F6A")]
			CodeWScopeScope,
			[Token(Token = "0x4000F6B")]
			CodeWScopeScopeObject,
			[Token(Token = "0x4000F6C")]
			CodeWScopeScopeEnd
		}

		[Token(Token = "0x200034A")]
		private class ContainerContext
		{
			[Token(Token = "0x4000F6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public readonly BsonType Type;

			[Token(Token = "0x4000F6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int Length;

			[Token(Token = "0x4000F6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int Position;

			[Token(Token = "0x60016B1")]
			[Address(RVA = "0x12DCBB8", Offset = "0x12DCBB8", VA = "0x12DCBB8")]
			public ContainerContext(BsonType type)
			{
			}
		}

		[Token(Token = "0x4000D1C")]
		private const int MaxCharBytesSize = 128;

		[Token(Token = "0x4000D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly byte[] _seqRange1;

		[Token(Token = "0x4000D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly byte[] _seqRange2;

		[Token(Token = "0x4000D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly byte[] _seqRange3;

		[Token(Token = "0x4000D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly byte[] _seqRange4;

		[Token(Token = "0x4000D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly BinaryReader _reader;

		[Token(Token = "0x4000D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly List<ContainerContext> _stack;

		[Token(Token = "0x4000D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private byte[] _byteBuffer;

		[Token(Token = "0x4000D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private char[] _charBuffer;

		[Token(Token = "0x4000D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private BsonType _currentElementType;

		[Token(Token = "0x4000D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private BsonReaderState _bsonReaderState;

		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private ContainerContext _currentContext;

		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool _readRootValueAsArray;

		[Token(Token = "0x4000D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		private bool _jsonNet35BinaryCompatibility;

		[Token(Token = "0x4000D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private DateTimeKind _dateTimeKindHandling;

		[Token(Token = "0x17000218")]
		public bool JsonNet35BinaryCompatibility
		{
			[Token(Token = "0x6001459")]
			[Address(RVA = "0x15E1E94", Offset = "0x15E1E94", VA = "0x15E1E94")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600145A")]
			[Address(RVA = "0x15E1E9C", Offset = "0x15E1E9C", VA = "0x15E1E9C")]
			set
			{
			}
		}

		[Token(Token = "0x17000219")]
		public bool ReadRootValueAsArray
		{
			[Token(Token = "0x600145B")]
			[Address(RVA = "0x15E1EA8", Offset = "0x15E1EA8", VA = "0x15E1EA8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600145C")]
			[Address(RVA = "0x15E1EB0", Offset = "0x15E1EB0", VA = "0x15E1EB0")]
			set
			{
			}
		}

		[Token(Token = "0x1700021A")]
		public DateTimeKind DateTimeKindHandling
		{
			[Token(Token = "0x600145D")]
			[Address(RVA = "0x15E1EBC", Offset = "0x15E1EBC", VA = "0x15E1EBC")]
			get
			{
				return default(DateTimeKind);
			}
			[Token(Token = "0x600145E")]
			[Address(RVA = "0x15E1EC4", Offset = "0x15E1EC4", VA = "0x15E1EC4")]
			set
			{
			}
		}

		[Token(Token = "0x600145F")]
		[Address(RVA = "0x15E1ECC", Offset = "0x15E1ECC", VA = "0x15E1ECC")]
		public BsonReader(Stream stream)
		{
		}

		[Token(Token = "0x6001460")]
		[Address(RVA = "0x15E1ED8", Offset = "0x15E1ED8", VA = "0x15E1ED8")]
		public BsonReader(Stream stream, bool readRootValueAsArray, DateTimeKind dateTimeKindHandling)
		{
		}

		[Token(Token = "0x6001461")]
		[Address(RVA = "0x15E1FB0", Offset = "0x15E1FB0", VA = "0x15E1FB0")]
		private string ReadElement()
		{
			return null;
		}

		[Token(Token = "0x6001462")]
		[Address(RVA = "0x15E22FC", Offset = "0x15E22FC", VA = "0x15E22FC", Slot = "12")]
		public override byte[] ReadAsBytes()
		{
			return null;
		}

		[Token(Token = "0x6001463")]
		[Address(RVA = "0x15E2518", Offset = "0x15E2518", VA = "0x15E2518", Slot = "13")]
		public override decimal? ReadAsDecimal()
		{
			return null;
		}

		[Token(Token = "0x6001464")]
		[Address(RVA = "0x15E27B8", Offset = "0x15E27B8", VA = "0x15E27B8", Slot = "14")]
		public override DateTimeOffset? ReadAsDateTimeOffset()
		{
			return null;
		}

		[Token(Token = "0x6001465")]
		[Address(RVA = "0x15E29FC", Offset = "0x15E29FC", VA = "0x15E29FC", Slot = "11")]
		public override bool Read()
		{
			return default(bool);
		}

		[Token(Token = "0x6001466")]
		[Address(RVA = "0x15E3240", Offset = "0x15E3240", VA = "0x15E3240", Slot = "17")]
		public override void Close()
		{
		}

		[Token(Token = "0x6001467")]
		[Address(RVA = "0x15E3054", Offset = "0x15E3054", VA = "0x15E3054")]
		private bool ReadCodeWScope()
		{
			return default(bool);
		}

		[Token(Token = "0x6001468")]
		[Address(RVA = "0x15E2E50", Offset = "0x15E2E50", VA = "0x15E2E50")]
		private bool ReadReference()
		{
			return default(bool);
		}

		[Token(Token = "0x6001469")]
		[Address(RVA = "0x15E2C28", Offset = "0x15E2C28", VA = "0x15E2C28")]
		private bool ReadNormal()
		{
			return default(bool);
		}

		[Token(Token = "0x600146A")]
		[Address(RVA = "0x15E384C", Offset = "0x15E384C", VA = "0x15E384C")]
		private void PopContext()
		{
		}

		[Token(Token = "0x600146B")]
		[Address(RVA = "0x15E3338", Offset = "0x15E3338", VA = "0x15E3338")]
		private void PushContext(ContainerContext newContext)
		{
		}

		[Token(Token = "0x600146C")]
		[Address(RVA = "0x15E380C", Offset = "0x15E380C", VA = "0x15E380C")]
		private byte ReadByte()
		{
			return default(byte);
		}

		[Token(Token = "0x600146D")]
		[Address(RVA = "0x15E33F8", Offset = "0x15E33F8", VA = "0x15E33F8")]
		private void ReadType(BsonType type)
		{
		}

		[Token(Token = "0x600146E")]
		[Address(RVA = "0x15E3A18", Offset = "0x15E3A18", VA = "0x15E3A18")]
		private byte[] ReadBinary()
		{
			return null;
		}

		[Token(Token = "0x600146F")]
		[Address(RVA = "0x15E2018", Offset = "0x15E2018", VA = "0x15E2018")]
		private string ReadString()
		{
			return null;
		}

		[Token(Token = "0x6001470")]
		[Address(RVA = "0x15E32D4", Offset = "0x15E32D4", VA = "0x15E32D4")]
		private string ReadLengthString()
		{
			return null;
		}

		[Token(Token = "0x6001471")]
		[Address(RVA = "0x15E3C00", Offset = "0x15E3C00", VA = "0x15E3C00")]
		private string GetString(int length)
		{
			return null;
		}

		[Token(Token = "0x6001472")]
		[Address(RVA = "0x15E3B60", Offset = "0x15E3B60", VA = "0x15E3B60")]
		private int GetLastFullCharStop(int start)
		{
			return default(int);
		}

		[Token(Token = "0x6001473")]
		[Address(RVA = "0x15E3EFC", Offset = "0x15E3EFC", VA = "0x15E3EFC")]
		private int BytesInSequence(byte b)
		{
			return default(int);
		}

		[Token(Token = "0x6001474")]
		[Address(RVA = "0x15E3AB0", Offset = "0x15E3AB0", VA = "0x15E3AB0")]
		private void EnsureBuffers()
		{
		}

		[Token(Token = "0x6001475")]
		[Address(RVA = "0x15E39D4", Offset = "0x15E39D4", VA = "0x15E39D4")]
		private double ReadDouble()
		{
			return default(double);
		}

		[Token(Token = "0x6001476")]
		[Address(RVA = "0x15E3290", Offset = "0x15E3290", VA = "0x15E3290")]
		private int ReadInt32()
		{
			return default(int);
		}

		[Token(Token = "0x6001477")]
		[Address(RVA = "0x15E3A6C", Offset = "0x15E3A6C", VA = "0x15E3A6C")]
		private long ReadInt64()
		{
			return default(long);
		}

		[Token(Token = "0x6001478")]
		[Address(RVA = "0x15E1FD8", Offset = "0x15E1FD8", VA = "0x15E1FD8")]
		private BsonType ReadType()
		{
			return default(BsonType);
		}

		[Token(Token = "0x6001479")]
		[Address(RVA = "0x15E3980", Offset = "0x15E3980", VA = "0x15E3980")]
		private void MovePosition(int count)
		{
		}

		[Token(Token = "0x600147A")]
		[Address(RVA = "0x15E33B0", Offset = "0x15E33B0", VA = "0x15E33B0")]
		private byte[] ReadBytes(int count)
		{
			return null;
		}
	}
	[Token(Token = "0x200028F")]
	internal abstract class BsonToken
	{
		[Token(Token = "0x4000D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8618", Offset = "0x9A8618")]
		private BsonToken <Parent>k__BackingField;

		[Token(Token = "0x4000D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8628", Offset = "0x9A8628")]
		private int <CalculatedSize>k__BackingField;

		[Token(Token = "0x1700021B")]
		public abstract BsonType Type
		{
			[Token(Token = "0x600147C")]
			get;
		}

		[Token(Token = "0x1700021C")]
		public BsonToken Parent
		{
			[Token(Token = "0x600147D")]
			[Address(RVA = "0x12DCD74", Offset = "0x12DCD74", VA = "0x12DCD74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AAA14", Offset = "0x9AAA14")]
			get
			{
				return null;
			}
			[Token(Token = "0x600147E")]
			[Address(RVA = "0x12DCD7C", Offset = "0x12DCD7C", VA = "0x12DCD7C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AAA24", Offset = "0x9AAA24")]
			set
			{
			}
		}

		[Token(Token = "0x1700021D")]
		public int CalculatedSize
		{
			[Token(Token = "0x600147F")]
			[Address(RVA = "0x12DCD84", Offset = "0x12DCD84", VA = "0x12DCD84")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AAA34", Offset = "0x9AAA34")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001480")]
			[Address(RVA = "0x12DCD8C", Offset = "0x12DCD8C", VA = "0x12DCD8C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AAA44", Offset = "0x9AAA44")]
			set
			{
			}
		}

		[Token(Token = "0x6001481")]
		[Address(RVA = "0x12DCCBC", Offset = "0x12DCCBC", VA = "0x12DCCBC")]
		protected BsonToken()
		{
		}
	}
	[Token(Token = "0x2000290")]
	internal class BsonObject : BsonToken, IEnumerable<BsonProperty>, IEnumerable
	{
		[Token(Token = "0x4000D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly List<BsonProperty> _children;

		[Token(Token = "0x1700021E")]
		public override BsonType Type
		{
			[Token(Token = "0x6001483")]
			[Address(RVA = "0x15E1D38", Offset = "0x15E1D38", VA = "0x15E1D38", Slot = "4")]
			get
			{
				return default(BsonType);
			}
		}

		[Token(Token = "0x6001482")]
		[Address(RVA = "0x15E1C20", Offset = "0x15E1C20", VA = "0x15E1C20")]
		public void Add(string name, BsonToken token)
		{
		}

		[Token(Token = "0x6001484")]
		[Address(RVA = "0x15E1820", Offset = "0x15E1820", VA = "0x15E1820", Slot = "5")]
		public IEnumerator<BsonProperty> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001485")]
		[Address(RVA = "0x15E1D40", Offset = "0x15E1D40", VA = "0x15E1D40", Slot = "6")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001486")]
		[Address(RVA = "0x15E1D44", Offset = "0x15E1D44", VA = "0x15E1D44")]
		public BsonObject()
		{
		}
	}
	[Token(Token = "0x2000291")]
	internal class BsonArray : BsonToken, IEnumerable<BsonToken>, IEnumerable
	{
		[Token(Token = "0x4000D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly List<BsonToken> _children;

		[Token(Token = "0x1700021F")]
		public override BsonType Type
		{
			[Token(Token = "0x6001488")]
			[Address(RVA = "0x15DF454", Offset = "0x15DF454", VA = "0x15DF454", Slot = "4")]
			get
			{
				return default(BsonType);
			}
		}

		[Token(Token = "0x6001487")]
		[Address(RVA = "0x15DF3C8", Offset = "0x15DF3C8", VA = "0x15DF3C8")]
		public void Add(BsonToken token)
		{
		}

		[Token(Token = "0x6001489")]
		[Address(RVA = "0x15DF45C", Offset = "0x15DF45C", VA = "0x15DF45C", Slot = "5")]
		public IEnumerator<BsonToken> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600148A")]
		[Address(RVA = "0x15DF4F0", Offset = "0x15DF4F0", VA = "0x15DF4F0", Slot = "6")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600148B")]
		[Address(RVA = "0x15DF4F4", Offset = "0x15DF4F4", VA = "0x15DF4F4")]
		public BsonArray()
		{
		}
	}
	[Token(Token = "0x2000292")]
	internal class BsonValue : BsonToken
	{
		[Token(Token = "0x4000D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private object _value;

		[Token(Token = "0x4000D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private BsonType _type;

		[Token(Token = "0x17000220")]
		public object Value
		{
			[Token(Token = "0x600148D")]
			[Address(RVA = "0x12DCD94", Offset = "0x12DCD94", VA = "0x12DCD94")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000221")]
		public override BsonType Type
		{
			[Token(Token = "0x600148E")]
			[Address(RVA = "0x12DCD9C", Offset = "0x12DCD9C", VA = "0x12DCD9C", Slot = "4")]
			get
			{
				return default(BsonType);
			}
		}

		[Token(Token = "0x600148C")]
		[Address(RVA = "0x12DCD38", Offset = "0x12DCD38", VA = "0x12DCD38")]
		public BsonValue(object value, BsonType type)
		{
		}
	}
	[Token(Token = "0x2000293")]
	internal class BsonString : BsonValue
	{
		[Token(Token = "0x4000D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8638", Offset = "0x9A8638")]
		private int <ByteCount>k__BackingField;

		[Token(Token = "0x4000D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8648", Offset = "0x9A8648")]
		private bool <IncludeLength>k__BackingField;

		[Token(Token = "0x17000222")]
		public int ByteCount
		{
			[Token(Token = "0x600148F")]
			[Address(RVA = "0x12DCD14", Offset = "0x12DCD14", VA = "0x12DCD14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AAA54", Offset = "0x9AAA54")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001490")]
			[Address(RVA = "0x12DCD1C", Offset = "0x12DCD1C", VA = "0x12DCD1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AAA64", Offset = "0x9AAA64")]
			set
			{
			}
		}

		[Token(Token = "0x17000223")]
		public bool IncludeLength
		{
			[Token(Token = "0x6001491")]
			[Address(RVA = "0x12DCD24", Offset = "0x12DCD24", VA = "0x12DCD24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AAA74", Offset = "0x9AAA74")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001492")]
			[Address(RVA = "0x12DCD2C", Offset = "0x12DCD2C", VA = "0x12DCD2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AAA84", Offset = "0x9AAA84")]
			set
			{
			}
		}

		[Token(Token = "0x6001493")]
		[Address(RVA = "0x12DCCC4", Offset = "0x12DCCC4", VA = "0x12DCCC4")]
		public BsonString(object value, bool includeLength)
		{
		}
	}
	[Token(Token = "0x2000294")]
	internal class BsonRegex : BsonToken
	{
		[Token(Token = "0x4000D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8658", Offset = "0x9A8658")]
		private BsonString <Pattern>k__BackingField;

		[Token(Token = "0x4000D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8668", Offset = "0x9A8668")]
		private BsonString <Options>k__BackingField;

		[Token(Token = "0x17000224")]
		public BsonString Pattern
		{
			[Token(Token = "0x6001494")]
			[Address(RVA = "0x12DCBE4", Offset = "0x12DCBE4", VA = "0x12DCBE4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AAA94", Offset = "0x9AAA94")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001495")]
			[Address(RVA = "0x12DCBEC", Offset = "0x12DCBEC", VA = "0x12DCBEC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AAAA4", Offset = "0x9AAAA4")]
			set
			{
			}
		}

		[Token(Token = "0x17000225")]
		public BsonString Options
		{
			[Token(Token = "0x6001496")]
			[Address(RVA = "0x12DCBF4", Offset = "0x12DCBF4", VA = "0x12DCBF4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AAAB4", Offset = "0x9AAAB4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001497")]
			[Address(RVA = "0x12DCBFC", Offset = "0x12DCBFC", VA = "0x12DCBFC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AAAC4", Offset = "0x9AAAC4")]
			set
			{
			}
		}

		[Token(Token = "0x17000226")]
		public override BsonType Type
		{
			[Token(Token = "0x6001499")]
			[Address(RVA = "0x12DCD0C", Offset = "0x12DCD0C", VA = "0x12DCD0C", Slot = "4")]
			get
			{
				return default(BsonType);
			}
		}

		[Token(Token = "0x6001498")]
		[Address(RVA = "0x12DCC04", Offset = "0x12DCC04", VA = "0x12DCC04")]
		public BsonRegex(string pattern, string options)
		{
		}
	}
	[Token(Token = "0x2000295")]
	internal class BsonProperty
	{
		[Token(Token = "0x4000D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8678", Offset = "0x9A8678")]
		private BsonString <Name>k__BackingField;

		[Token(Token = "0x4000D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A8688", Offset = "0x9A8688")]
		private BsonToken <Value>k__BackingField;

		[Token(Token = "0x17000227")]
		public BsonString Name
		{
			[Token(Token = "0x600149A")]
			[Address(RVA = "0x15E18BC", Offset = "0x15E18BC", VA = "0x15E18BC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AAAD4", Offset = "0x9AAAD4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600149B")]
			[Address(RVA = "0x15E1D28", Offset = "0x15E1D28", VA = "0x15E1D28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AAAE4", Offset = "0x9AAAE4")]
			set
			{
			}
		}

		[Token(Token = "0x17000228")]
		public BsonToken Value
		{
			[Token(Token = "0x600149C")]
			[Address(RVA = "0x15E18B4", Offset = "0x15E18B4", VA = "0x15E18B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AAAF4", Offset = "0x9AAAF4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600149D")]
			[Address(RVA = "0x15E1D30", Offset = "0x15E1D30", VA = "0x15E1D30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9AAB04", Offset = "0x9AAB04")]
			set
			{
			}
		}

		[Token(Token = "0x600149E")]
		[Address(RVA = "0x15E1D20", Offset = "0x15E1D20", VA = "0x15E1D20")]
		public BsonProperty()
		{
		}
	}
	[Token(Token = "0x2000296")]
	internal enum BsonType : sbyte
	{
		[Token(Token = "0x4000D38")]
		Number = 1,
		[Token(Token = "0x4000D39")]
		String = 2,
		[Token(Token = "0x4000D3A")]
		Object = 3,
		[Token(Token = "0x4000D3B")]
		Array = 4,
		[Token(Token = "0x4000D3C")]
		Binary = 5,
		[Token(Token = "0x4000D3D")]
		Undefined = 6,
		[Token(Token = "0x4000D3E")]
		Oid = 7,
		[Token(Token = "0x4000D3F")]
		Boolean = 8,
		[Token(Token = "0x4000D40")]
		Date = 9,
		[Token(Token = "0x4000D41")]
		Null = 10,
		[Token(Token = "0x4000D42")]
		Regex = 11,
		[Token(Token = "0x4000D43")]
		Reference = 12,
		[Token(Token = "0x4000D44")]
		Code = 13,
		[Token(Token = "0x4000D45")]
		Symbol = 14,
		[Token(Token = "0x4000D46")]
		CodeWScope = 15,
		[Token(Token = "0x4000D47")]
		Integer = 16,
		[Token(Token = "0x4000D48")]
		TimeStamp = 17,
		[Token(Token = "0x4000D49")]
		Long = 18,
		[Token(Token = "0x4000D4A")]
		MinKey = -1,
		[Token(Token = "0x4000D4B")]
		MaxKey = sbyte.MaxValue
	}
	[Token(Token = "0x2000297")]
	public class BsonWriter : JsonWriter
	{
		[Token(Token = "0x4000D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly BsonBinaryWriter _writer;

		[Token(Token = "0x4000D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private BsonToken _root;

		[Token(Token = "0x4000D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private BsonToken _parent;

		[Token(Token = "0x4000D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string _propertyName;

		[Token(Token = "0x17000229")]
		public DateTimeKind DateTimeKindHandling
		{
			[Token(Token = "0x600149F")]
			[Address(RVA = "0x12DCDA4", Offset = "0x12DCDA4", VA = "0x12DCDA4")]
			get
			{
				return default(DateTimeKind);
			}
			[Token(Token = "0x60014A0")]
			[Address(RVA = "0x12DCDD4", Offset = "0x12DCDD4", VA = "0x12DCDD4")]
			set
			{
			}
		}

		[Token(Token = "0x60014A1")]
		[Address(RVA = "0x12DCE0C", Offset = "0x12DCE0C", VA = "0x12DCE0C")]
		public BsonWriter(Stream stream)
		{
		}

		[Token(Token = "0x60014A2")]
		[Address(RVA = "0x12DCF64", Offset = "0x12DCF64", VA = "0x12DCF64", Slot = "5")]
		public override void Flush()
		{
		}

		[Token(Token = "0x60014A3")]
		[Address(RVA = "0x12DCF94", Offset = "0x12DCF94", VA = "0x12DCF94", Slot = "15")]
		protected override void WriteEnd(JsonToken token)
		{
		}

		[Token(Token = "0x60014A4")]
		[Address(RVA = "0x12DD03C", Offset = "0x12DD03C", VA = "0x12DD03C", Slot = "61")]
		public override void WriteComment(string text)
		{
		}

		[Token(Token = "0x60014A5")]
		[Address(RVA = "0x12DD0B0", Offset = "0x12DD0B0", VA = "0x12DD0B0", Slot = "11")]
		public override void WriteStartConstructor(string name)
		{
		}

		[Token(Token = "0x60014A6")]
		[Address(RVA = "0x12DD124", Offset = "0x12DD124", VA = "0x12DD124", Slot = "21")]
		public override void WriteRaw(string json)
		{
		}

		[Token(Token = "0x60014A7")]
		[Address(RVA = "0x12DD198", Offset = "0x12DD198", VA = "0x12DD198", Slot = "22")]
		public override void WriteRawValue(string json)
		{
		}

		[Token(Token = "0x60014A8")]
		[Address(RVA = "0x12DD20C", Offset = "0x12DD20C", VA = "0x12DD20C", Slot = "9")]
		public override void WriteStartArray()
		{
		}

		[Token(Token = "0x60014A9")]
		[Address(RVA = "0x12DD2E4", Offset = "0x12DD2E4", VA = "0x12DD2E4", Slot = "7")]
		public override void WriteStartObject()
		{
		}

		[Token(Token = "0x60014AA")]
		[Address(RVA = "0x12DD394", Offset = "0x12DD394", VA = "0x12DD394", Slot = "13")]
		public override void WritePropertyName(string name)
		{
		}

		[Token(Token = "0x60014AB")]
		[Address(RVA = "0x12DD3C8", Offset = "0x12DD3C8", VA = "0x12DD3C8", Slot = "6")]
		public override void Close()
		{
		}

		[Token(Token = "0x60014AC")]
		[Address(RVA = "0x12DD2BC", Offset = "0x12DD2BC", VA = "0x12DD2BC")]
		private void AddParent(BsonToken container)
		{
		}

		[Token(Token = "0x60014AD")]
		[Address(RVA = "0x12DD000", Offset = "0x12DD000", VA = "0x12DD000")]
		private void RemoveParent()
		{
		}

		[Token(Token = "0x60014AE")]
		[Address(RVA = "0x12DD774", Offset = "0x12DD774", VA = "0x12DD774")]
		private void AddValue(object value, BsonType type)
		{
		}

		[Token(Token = "0x60014AF")]
		[Address(RVA = "0x12DD480", Offset = "0x12DD480", VA = "0x12DD480")]
		internal void AddToken(BsonToken token)
		{
		}

		[Token(Token = "0x60014B0")]
		[Address(RVA = "0x12DD7F0", Offset = "0x12DD7F0", VA = "0x12DD7F0", Slot = "19")]
		public override void WriteNull()
		{
		}

		[Token(Token = "0x60014B1")]
		[Address(RVA = "0x12DD828", Offset = "0x12DD828", VA = "0x12DD828", Slot = "20")]
		public override void WriteUndefined()
		{
		}

		[Token(Token = "0x60014B2")]
		[Address(RVA = "0x12DD860", Offset = "0x12DD860", VA = "0x12DD860", Slot = "23")]
		public override void WriteValue(string value)
		{
		}

		[Token(Token = "0x60014B3")]
		[Address(RVA = "0x12DD918", Offset = "0x12DD918", VA = "0x12DD918", Slot = "24")]
		public override void WriteValue(int value)
		{
		}

		[Token(Token = "0x60014B4")]
		[Address(RVA = "0x12DD9A0", Offset = "0x12DD9A0", VA = "0x12DD9A0", Slot = "25")]
		public override void WriteValue(uint value)
		{
		}

		[Token(Token = "0x60014B5")]
		[Address(RVA = "0x12DDA70", Offset = "0x12DDA70", VA = "0x12DDA70", Slot = "26")]
		public override void WriteValue(long value)
		{
		}

		[Token(Token = "0x60014B6")]
		[Address(RVA = "0x12DDAF8", Offset = "0x12DDAF8", VA = "0x12DDAF8", Slot = "27")]
		public override void WriteValue(ulong value)
		{
		}

		[Token(Token = "0x60014B7")]
		[Address(RVA = "0x12DDBC8", Offset = "0x12DDBC8", VA = "0x12DDBC8", Slot = "28")]
		public override void WriteValue(float value)
		{
		}

		[Token(Token = "0x60014B8")]
		[Address(RVA = "0x12DDC50", Offset = "0x12DDC50", VA = "0x12DDC50", Slot = "29")]
		public override void WriteValue(double value)
		{
		}

		[Token(Token = "0x60014B9")]
		[Address(RVA = "0x12DDCD8", Offset = "0x12DDCD8", VA = "0x12DDCD8", Slot = "30")]
		public override void WriteValue(bool value)
		{
		}

		[Token(Token = "0x60014BA")]
		[Address(RVA = "0x12DDD60", Offset = "0x12DDD60", VA = "0x12DDD60", Slot = "31")]
		public override void WriteValue(short value)
		{
		}

		[Token(Token = "0x60014BB")]
		[Address(RVA = "0x12DDDE8", Offset = "0x12DDDE8", VA = "0x12DDDE8", Slot = "32")]
		public override void WriteValue(ushort value)
		{
		}

		[Token(Token = "0x60014BC")]
		[Address(RVA = "0x12DDE70", Offset = "0x12DDE70", VA = "0x12DDE70", Slot = "33")]
		public override void WriteValue(char value)
		{
		}

		[Token(Token = "0x60014BD")]
		[Address(RVA = "0x12DDF20", Offset = "0x12DDF20", VA = "0x12DDF20", Slot = "34")]
		public override void WriteValue(byte value)
		{
		}

		[Token(Token = "0x60014BE")]
		[Address(RVA = "0x12DDFA8", Offset = "0x12DDFA8", VA = "0x12DDFA8", Slot = "35")]
		public override void WriteValue(sbyte value)
		{
		}

		[Token(Token = "0x60014BF")]
		[Address(RVA = "0x12DE030", Offset = "0x12DE030", VA = "0x12DE030", Slot = "36")]
		public override void WriteValue(decimal value)
		{
		}

		[Token(Token = "0x60014C0")]
		[Address(RVA = "0x12DE0C4", Offset = "0x12DE0C4", VA = "0x12DE0C4", Slot = "37")]
		public override void WriteValue(DateTime value)
		{
		}

		[Token(Token = "0x60014C1")]
		[Address(RVA = "0x12DE14C", Offset = "0x12DE14C", VA = "0x12DE14C", Slot = "38")]
		public override void WriteValue(DateTimeOffset value)
		{
		}

		[Token(Token = "0x60014C2")]
		[Address(RVA = "0x12DE1E0", Offset = "0x12DE1E0", VA = "0x12DE1E0", Slot = "58")]
		public override void WriteValue(byte[] value)
		{
		}

		[Token(Token = "0x60014C3")]
		[Address(RVA = "0x12DE250", Offset = "0x12DE250", VA = "0x12DE250", Slot = "39")]
		public override void WriteValue(Guid value)
		{
		}

		[Token(Token = "0x60014C4")]
		[Address(RVA = "0x12DE308", Offset = "0x12DE308", VA = "0x12DE308", Slot = "40")]
		public override void WriteValue(TimeSpan value)
		{
		}

		[Token(Token = "0x60014C5")]
		[Address(RVA = "0x12DE3B8", Offset = "0x12DE3B8", VA = "0x12DE3B8", Slot = "59")]
		public override void WriteValue(Uri value)
		{
		}

		[Token(Token = "0x60014C6")]
		[Address(RVA = "0x12DE514", Offset = "0x12DE514", VA = "0x12DE514")]
		public void WriteObjectId(byte[] value)
		{
		}

		[Token(Token = "0x60014C7")]
		[Address(RVA = "0x12DE930", Offset = "0x12DE930", VA = "0x12DE930")]
		public void WriteRegex(string pattern, string options)
		{
		}
	}
}
namespace JsonDotNet.Extras.CustomConverters
{
	[Token(Token = "0x2000298")]
	public class Matrix4x4Converter : JsonConverter
	{
		[Serializable]
		[Token(Token = "0x200034B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6A34", Offset = "0x9A6A34")]
		private sealed class <>c
		{
			[Token(Token = "0x4000F70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000F71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<JProperty, bool> <>9__0_0;

			[Token(Token = "0x4000F72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<JProperty, string> <>9__0_1;

			[Token(Token = "0x60016B3")]
			[Address(RVA = "0x15C9D04", Offset = "0x15C9D04", VA = "0x15C9D04")]
			public <>c()
			{
			}

			[Token(Token = "0x60016B4")]
			[Address(RVA = "0x15C9D0C", Offset = "0x15C9D0C", VA = "0x15C9D0C")]
			internal bool <WriteJson>b__0_0(JProperty p)
			{
				return default(bool);
			}

			[Token(Token = "0x60016B5")]
			[Address(RVA = "0x15C9DB4", Offset = "0x15C9DB4", VA = "0x15C9DB4")]
			internal string <WriteJson>b__0_1(JProperty p)
			{
				return null;
			}
		}

		[Token(Token = "0x1700022A")]
		public override bool CanRead
		{
			[Token(Token = "0x60014CA")]
			[Address(RVA = "0x15C9C0C", Offset = "0x15C9C0C", VA = "0x15C9C0C", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60014C8")]
		[Address(RVA = "0x15C9814", Offset = "0x15C9814", VA = "0x15C9814", Slot = "4")]
		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
		{
		}

		[Token(Token = "0x60014C9")]
		[Address(RVA = "0x15C9B98", Offset = "0x15C9B98", VA = "0x15C9B98", Slot = "5")]
		public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
		{
			return null;
		}

		[Token(Token = "0x60014CB")]
		[Address(RVA = "0x15C9C14", Offset = "0x15C9C14", VA = "0x15C9C14", Slot = "6")]
		public override bool CanConvert(Type objectType)
		{
			return default(bool);
		}

		[Token(Token = "0x60014CC")]
		[Address(RVA = "0x15C9C98", Offset = "0x15C9C98", VA = "0x15C9C98")]
		public Matrix4x4Converter()
		{
		}
	}
	[Token(Token = "0x2000299")]
	public class Vector2Converter : JsonConverter
	{
		[Serializable]
		[Token(Token = "0x200034C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6A44", Offset = "0x9A6A44")]
		private sealed class <>c
		{
			[Token(Token = "0x4000F73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000F74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<JProperty, bool> <>9__0_0;

			[Token(Token = "0x4000F75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<JProperty, string> <>9__0_1;

			[Token(Token = "0x60016B7")]
			[Address(RVA = "0x15CA2D4", Offset = "0x15CA2D4", VA = "0x15CA2D4")]
			public <>c()
			{
			}

			[Token(Token = "0x60016B8")]
			[Address(RVA = "0x15CA2DC", Offset = "0x15CA2DC", VA = "0x15CA2DC")]
			internal bool <WriteJson>b__0_0(JProperty p)
			{
				return default(bool);
			}

			[Token(Token = "0x60016B9")]
			[Address(RVA = "0x15CA384", Offset = "0x15CA384", VA = "0x15CA384")]
			internal string <WriteJson>b__0_1(JProperty p)
			{
				return null;
			}
		}

		[Token(Token = "0x1700022B")]
		public override bool CanRead
		{
			[Token(Token = "0x60014CF")]
			[Address(RVA = "0x15CA1DC", Offset = "0x15CA1DC", VA = "0x15CA1DC", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60014CD")]
		[Address(RVA = "0x15C9DE4", Offset = "0x15C9DE4", VA = "0x15C9DE4", Slot = "4")]
		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
		{
		}

		[Token(Token = "0x60014CE")]
		[Address(RVA = "0x15CA168", Offset = "0x15CA168", VA = "0x15CA168", Slot = "5")]
		public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
		{
			return null;
		}

		[Token(Token = "0x60014D0")]
		[Address(RVA = "0x15CA1E4", Offset = "0x15CA1E4", VA = "0x15CA1E4", Slot = "6")]
		public override bool CanConvert(Type objectType)
		{
			return default(bool);
		}

		[Token(Token = "0x60014D1")]
		[Address(RVA = "0x15CA268", Offset = "0x15CA268", VA = "0x15CA268")]
		public Vector2Converter()
		{
		}
	}
	[Token(Token = "0x200029A")]
	public class Vector3Converter : JsonConverter
	{
		[Serializable]
		[Token(Token = "0x200034D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6A54", Offset = "0x9A6A54")]
		private sealed class <>c
		{
			[Token(Token = "0x4000F76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000F77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<JProperty, bool> <>9__0_0;

			[Token(Token = "0x4000F78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<JProperty, string> <>9__0_1;

			[Token(Token = "0x60016BB")]
			[Address(RVA = "0x15CA8A4", Offset = "0x15CA8A4", VA = "0x15CA8A4")]
			public <>c()
			{
			}

			[Token(Token = "0x60016BC")]
			[Address(RVA = "0x15CA8AC", Offset = "0x15CA8AC", VA = "0x15CA8AC")]
			internal bool <WriteJson>b__0_0(JProperty p)
			{
				return default(bool);
			}

			[Token(Token = "0x60016BD")]
			[Address(RVA = "0x15CA984", Offset = "0x15CA984", VA = "0x15CA984")]
			internal string <WriteJson>b__0_1(JProperty p)
			{
				return null;
			}
		}

		[Token(Token = "0x1700022C")]
		public override bool CanRead
		{
			[Token(Token = "0x60014D4")]
			[Address(RVA = "0x15CA7AC", Offset = "0x15CA7AC", VA = "0x15CA7AC", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60014D2")]
		[Address(RVA = "0x15CA3B4", Offset = "0x15CA3B4", VA = "0x15CA3B4", Slot = "4")]
		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
		{
		}

		[Token(Token = "0x60014D3")]
		[Address(RVA = "0x15CA738", Offset = "0x15CA738", VA = "0x15CA738", Slot = "5")]
		public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
		{
			return null;
		}

		[Token(Token = "0x60014D5")]
		[Address(RVA = "0x15CA7B4", Offset = "0x15CA7B4", VA = "0x15CA7B4", Slot = "6")]
		public override bool CanConvert(Type objectType)
		{
			return default(bool);
		}

		[Token(Token = "0x60014D6")]
		[Address(RVA = "0x15CA838", Offset = "0x15CA838", VA = "0x15CA838")]
		public Vector3Converter()
		{
		}
	}
	[Token(Token = "0x200029B")]
	public class Vector4Converter : JsonConverter
	{
		[Serializable]
		[Token(Token = "0x200034E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x9A6A64", Offset = "0x9A6A64")]
		private sealed class <>c
		{
			[Token(Token = "0x4000F79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000F7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<JProperty, bool> <>9__0_0;

			[Token(Token = "0x4000F7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<JProperty, string> <>9__0_1;

			[Token(Token = "0x60016BF")]
			[Address(RVA = "0x15CAEA4", Offset = "0x15CAEA4", VA = "0x15CAEA4")]
			public <>c()
			{
			}

			[Token(Token = "0x60016C0")]
			[Address(RVA = "0x15CAEAC", Offset = "0x15CAEAC", VA = "0x15CAEAC")]
			internal bool <WriteJson>b__0_0(JProperty p)
			{
				return default(bool);
			}

			[Token(Token = "0x60016C1")]
			[Address(RVA = "0x15CAFB4", Offset = "0x15CAFB4", VA = "0x15CAFB4")]
			internal string <WriteJson>b__0_1(JProperty p)
			{
				return null;
			}
		}

		[Token(Token = "0x1700022D")]
		public override bool CanRead
		{
			[Token(Token = "0x60014D9")]
			[Address(RVA = "0x15CADAC", Offset = "0x15CADAC", VA = "0x15CADAC", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60014D7")]
		[Address(RVA = "0x15CA9B4", Offset = "0x15CA9B4", VA = "0x15CA9B4", Slot = "4")]
		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
		{
		}

		[Token(Token = "0x60014D8")]
		[Address(RVA = "0x15CAD38", Offset = "0x15CAD38", VA = "0x15CAD38", Slot = "5")]
		public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
		{
			return null;
		}

		[Token(Token = "0x60014DA")]
		[Address(RVA = "0x15CADB4", Offset = "0x15CADB4", VA = "0x15CADB4", Slot = "6")]
		public override bool CanConvert(Type objectType)
		{
			return default(bool);
		}

		[Token(Token = "0x60014DB")]
		[Address(RVA = "0x15CAE38", Offset = "0x15CAE38", VA = "0x15CAE38")]
		public Vector4Converter()
		{
		}
	}
}
