<html><head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,minimum-scale=1,initial-scale=1">
    
    <link rel="icon" href="data:;base64,=">
    <meta name="description" content="UNISDK">
    
    <title>游戏隐私政策</title>

    <style>
      @charset "gb2312";
      html {
        color: #000;
      }
      article,
      aside,
      audio,
      bdi,
      canvas,
      command,
      datalist,
      details,
      figcaption,
      figure,
      footer,
      header,
      hgroup,
      keygen,
      mark,
      meter,
      nav,
      output,
      progress,
      rp,
      rt,
      ruby,
      section,
      source,
      summary,
      time,
      track,
      video,
      title {
        display: block;
      }
      body,
      div,
      dl,
      dt,
      dd,
      ul,
      ol,
      li,
      h1,
      h2,
      h3,
      h4,
      h5,
      h6,
      pre,
      code,
      form,
      fieldset,
      legend,
      input,
      textarea,
      p,
      blockquote,
      th,
      td {
        margin: 0;
        padding: 0;
      }
      table {
        border-collapse: collapse;
        border-spacing: 0;
      }
      fieldset,
      img {
        border: 0;
        vertucal-align: middle;
      }
      address,
      caption,
      cite,
      code,
      dfn,
      em,
      strong,
      th,
      var {
        font-style: normal;
        font-weight: 400;
      }
      li {
        list-style: none;
      }
      caption,
      th {
        text-align: left;
      }
      h1,
      h2,
      h3,
      h4,
      h5,
      h6 {
        font-size: 100%;
        font-weight: 400;
      }
      q:before,
      q:after {
        content: "";
      }
      abbr,
      acronym {
        border: 0;
        font-variant: normal;
      }
      sup {
        vertical-align: text-top;
      }
      sub {
        vertical-align: text-bottom;
      }
      input,
      textarea,
      select {
        font-family: inherit;
        font-size: inherit;
        font-weight: inherit;
      }
      input,
      textarea,
      select {
        *font-size: 100%;
      }
      legend {
        color: #000;
      }
      article a {
        transition: all 0.5s ease-in-out;
        -webkit-transition: all 0.5s ease-in-out;
        -moz-transition: all 0.5s ease-in-out;
        -o-transition: all 0.5s ease-in-out;
        -ms-transition: all 0.5s ease-in-out;
      }
      .hide {
        display: none;
      }
      html,
      body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
      body {
        font-family: "Microsoft YaHei", simSun, "Lucida Grande",
          "Lucida Sans Unicode", Arial;
        line-height: 170%;
        font-size: 14px;
        color: #000;
      }
      i {
        font-style: normal;
      }
      a {
        color: #000;
        text-decoration: none;
      }
      a:hover {
        text-decoration: none;
      }
      a.under:link,
      a.under:active,
      a.under:visited,
      a.under:hover {
        text-decoration: underline;
      }
      body {
        background: #fff;
      }
      .about .none {
        display: none;
      }
      .wrap {
        background: #fff;
        color: #626262;
      }
      .wrap1 .header {
        background: url(unisdk.update.netease.com/html/head_bg.png)
          repeat center 0;
        height: 54px;
      }
      .header {
        height: 54px;
        border-bottom: 4px solid #c21d35;
        overflow: hidden;
      }
      .header .tit {
        margin: 0 0 0 20px;
        color: #fff;
        height: 54px;
        font: 16px "Microsoft YaHei";
        line-height: 54px;
        font-weight: bold;
      }
      .header .tit span {
        display: inline-block;
        height: 84px;
        line-height: 84px;
        font-weight: bold;
      }
      .main {
        overflow: hidden;
        margin: 0 auto;
      }
      .main .content {
        overflow: hidden;
        margin: 0 18px 0 18px;
        float: left;
      }
      .main .content p {
        font-size: 12px;
        line-height: 18px;
        margin-bottom: 10px;
        word-break: break-all;
      }
      .main .text h2 {
        font-size: 16px;
        margin: 40px 0 30px 0;
      }
      .main .text .redb {
        color: #f00;
      }
      footer {
        background: #272a2c;
        color: #ccc;
        padding: 20px 0;
      }
      footer a,
      footer #ncp-l1 {
        color: #e23a3f;
      }
      footer a:hover {
        text-decoration: underline;
      }
      .content {
        padding: 0 0 37px 0;
      }
      .content .p1 {
        font: 12px/18px "Microsoft YaHei";
        color: #626262;
        margin: 0 0 30px;
      }
      .content dl {
        margin: 0 0 30px;
        font: 12px/18px "Microsoft YaHei";
        color: #626262;
      }
      @media screen and (max-device-width: 320px) {
        body {
          -webkit-text-size-adjust: none;
        }
      }
      @media screen and (max-device-width: 480px) {
        body {
          -webkit-text-size-adjust: none;
        }
      }
      @media only screen and (-webkit-min-device-pixel-ratio: 2) {
        body {
          -webkit-text-size-adjust: none;
        }
      }
      @media only screen and (min-device-width: 768px) and (max-device-width: 1024px) {
        body {
          -webkit-text-size-adjust: none;
        }
      }
      .protocol-wrap {
        width: 100%;
        height: calc(100% - 54px);
        height: -webkit-calc(100% - 54px);
        background: #000000;
        padding: 27px 0;
      }
      .protocol-wrap .protocol-container {
        height: 100%;
        width: auto;
        background: #ffffff;
        box-shadow: 0 0 10px 0;
        display: -webkit-flex;
        display: -webkit-box;
        display: flex;
        -webkit-flex-direction: column;
        -webkit-box-orient: vertical;
        -webkit-box-direction: normal;
        flex-direction: column;
        padding: 0 16px;
        overflow: hidden;
      }
      .protocol-wrap .protocol-container .header {
        height: 40px;
        display: -webkit-flex;
        display: -webkit-box;
        display: flex;
        -webkit-align-items: center;
        -webkit-box-align: center;
        align-items: center;
        -webkit-justify-content: center;
        -webkit-box-pack: center;
        justify-content: center;
        border: none;
        -webkit-flex-shrink: 0;
        flex-shrink: 0;
      }
      .protocol-wrap .protocol-container .header .logo {
        width: 66px;
        height: 24px;
      }
      .protocol-wrap .protocol-container .content {
        background: #f5f5f5;
        -webkit-flex: 1;
        -webkit-box-flex: 1;
        flex: 1;
        padding: 15px 10px;
        height: calc(100% - 80px);
        overflow-y: auto;
      }
      .protocol-wrap .protocol-container .footer {
        height: 49px;
        -webkit-flex-shrink: 0;
        flex-shrink: 0;
        display: -webkit-flex;
        display: -webkit-box;
        display: flex;
        -webkit-align-items: center;
        -webkit-box-align: center;
        align-items: center;
        -webkit-justify-content: center;
        -webkit-box-pack: center;
        justify-content: center;
      }
      .protocol-wrap .protocol-container .footer .btn {
        width: 125px;
        height: 29px;
        line-height: 29px;
        text-align: center;
        font-size: 15px;
        color: #ffffff;
      }
      .protocol-wrap .protocol-container .footer .cancel-btn {
        background: #cf4231;
        margin-right: 40px;
      }
      .protocol-wrap .protocol-container .footer .cancel-btn:active {
        background: #a32d20;
      }
      .protocol-wrap .protocol-container .footer .confirm-btn {
        background: #23b160;
      }
      .protocol-wrap .protocol-container .footer .confirm-btn:active {
        background: #176d3c;
      }
      .protocol-wrap a {
        color: inherit;
        text-decoration: underline;
      }
      .protocol-wrap {
        font-size: 12px;
        line-height: 120%;
      }
    </style>
  </head>

  <body class="about">
    
    
    <div class="wrap">
      <div class="wrap1">
        <div class="main">
          <header class="header">
            <p class="tit">游戏隐私政策</p>
          </header>
          <main class="content">
            <div id="wrap" class="content-text">
              
              <div class="main"><p><font color="#7a7a7a"></font></p><div style="text-align:center;"><font color="#7a7a7a"><b>游戏隐私政策</b></font></div><font color="#7a7a7a">
</font><p></p>
<p><font color="#7a7a7a"><b>【前言】</b>游戏（以下也称 “我们”）一向庄严承诺保护使用游戏服务之用户（以下统称“用户”或“您”）的个人信息和隐私安全。您在使用游戏服务时，我们将会收集和使用您的相关个人信息。我们希望通过《游戏隐私政策》（以下简称“本政策”）向您说明我们在收集和使用您相关个人信息时对应的处理规则等相关事宜，以便更好地保障您的权益。
</font></p>
<p><font color="#7a7a7a"><b>【特别提示】</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>1、本政策适用于我们提供的游戏服务。本政策与《隐私政策》同时对您产生效力。如本政策条款与《隐私政策》条款存在同类条款不一致约定的，本政策条款优先适用，如本政策条款中未提及的，则以 《隐私政策》约定为准。未满十四周岁的用户，同时适用《隐私政策》、《儿童个人信息保护规则及监护人须知》、 本政策以及《游戏儿童个人信息保护规则及监护人须知》。</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>2、本政策约定了在不同场景下我们处理您的信息的方式，但只有当您开启相关功能或使用相关服务时，为实现相关功能、服务，我们才会处理您的信息。如您不开启相关功能或使用相关服务，则我们不会处理您对应的个人信息。除本政策外，在特定产品中，我们还会通过弹窗、页面提示的即时告知，向您说明该产品特定的信息收集目的、范围及使用方式，这些即时告知内容构成本隐私政策的一部分，并与本政策具有同等效力，请您特别留意。</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>3、在使用游戏提供的服务前，请您务必仔细阅读并透彻理解本政策，特别是以粗体/粗体下划线标识的条款，您应重点阅读，在确认充分理解并同意后再开始使用。如果您不同意本政策的内容，将可能导致游戏服务无法正常运行，或者无法达到我们拟达到的服务效果，您应立即停止访问/使用游戏服务。</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>本政策将帮助您了解以下内容：</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;<b>  一、我们如何收集和使用您的个人信息</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;<b>  二、我们如何使用COOKIES或同类技术</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;<b>  三、我们如何共享、转移或公开您的个人信息</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;<b> 四、我们如何存储和保护您的个人信息</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;<b> 五、如何行使您的个人信息相关权利</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;<b>  六、未成年人保护</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;<b> 七、修订和通知</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>一、我们如何收集和使用您个人信息</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>（一）我们将通过以下途径收集和获得您的个人信息：</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1、您主动提供的信息。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（1）您在注册游戏的帐号或使用游戏时，向我们提供的信息；
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（2）您使用游戏时所存储的信息。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2、第三方合法共享的您的信息。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3、我们在向您提供服务的过程中合法获取的您的使用信息，如您在使用游戏时我们收集、汇总、记录的信息。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>（二）我们会出于以下目的，收集和使用您的个人信息：</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>1、帮助您完成注册及登录</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为便于我们为您提供持续稳定的服务并保障您使用游戏的安全性，我们需要您提供  <b>基本注册或登录信息，包括手机号码、电子邮箱</b>，并创建您的  <b>游戏帐号、用户名和密码。</b>
</font></p>
<p><font color="#7a7a7a">依照相关法律法规规定及监管要求，在您注册游戏帐号后，我们需要您提供  <b>真实身份信息，包括姓名、有效身份证件（如身份证、护照、驾驶证、户口本）、照片。</b>如果您不提供上述真实身份信息或提供虚假信息，您将无法登录游戏、享有相关服务或在使用游戏过程中受到相应的限制，我们将无法向您提供游戏服务或对您的游戏行为进行相应的限制。 为实现实名认证的目的，  <b>您同意并授权我们可能向有关实名认证机构（国家网络游戏主管部门、公安部门或者其委托/合作的其他机构）提供、查询、核对您的前述身份信息。</b>
</font></p>
<p><font color="#7a7a7a">您也可以使用认可的第三方平台的帐号登录游戏，当您使用邮箱帐号、手机帐号或认可第三方平台的帐号登录游戏时，我们将根据您的授权获取该等帐号下的相关信息（包括：用户名、昵称、头像、唯一标识以及  <b>好友关系</b>或其他经您授权信息），  <b>用于帮助您完成注册、登录和实现更好的游戏娱乐体验。</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>2、提供游戏基本功能，维护网络及运营安全</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在您使用我们网络游戏服务过程中，为向您提供游戏基本功能，并识别帐号异常状态、了解和提升产品适配性、保障游戏服务的网络及运营安全，以维护前述功能的正常运行，保护您或其他用户或公众的人身财产安全免遭侵害，更好地预防钓鱼网站、欺诈、网络漏洞、计算机病毒、网络攻击、网络侵入的各种安全风险，更准确地识别违反法律法规的情况，我们将会收集、存储关于您使用的服务以及使用方式的 <b>设备信息、日志信息、帐号信息、交易信息</b>以及我们关联公司、合作伙伴取得您授权或依据法律共享的信息，并将这些信息进行关联来综合判断您帐号及交易风险、进行身份验证、检测及防范安全事件，并依法采取必要的记录、审计、分析、处置措施：
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（1）当您使用我们游戏服务时，我们会收集您的游戏<b>日志信息</b>：登录日志、物品日志、操作信息、游戏对局信息、游戏好友信息及互动记录、登录帐号、游戏ID、搜索查询内容、IP地址、浏览器的类型、电信运营商、网络环境、使用的语言、访问日期和时间及您访问的网页浏览记录、Push打开记录、停留时长、刷新记录、发布记录、关注、订阅、收藏及分享。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（2）为保障您正常使用我们游戏服务，维护游戏基础功能的正常运行，提升游戏体验和保障帐号安全我们会接收并记录您所使用的<b>设备信息</b>：设备名称、设备机型、操作系统及版本、客户端版本、设备分辨率、包名、设备设置、设备标识符（MAC/IMEI/Android ID/IDFA/OpenUDID/GUID/SIM 卡IMSI 信息）、软硬件特征信息、IP 地址。为了收集上述基本的个人设备信息，我们将会在必要场景申请访问您的设备信息的权限。在您的设备配置支持的情况下，在游戏的部分产品中，为实现游戏内场景画面的动画显示效果，我们会收集您的设备陀螺仪（角速度传感器）信息。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（3）为保障帐号安全，营造公平、健康及安全的游戏环境，我们会收集您的游戏识别信息、硬件及操作系统信息、应用列表、进程及游戏崩溃记录信息，以用于打击破坏游戏公平环境或干扰、破坏游戏服务正常进行的行为（用于检测盗版、扫描外挂、防止作弊）。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（4）在游戏的部分产品中，您可以选择使用照片捏脸功能，为向您提供该功能，我需要您提供并使用包含您<b>面部识别特征</b>的照片。您也可以选择拒绝提供照片信息，拒绝提供照片信息您将无法使用该功能，但拒绝不影响您正常使用游戏的其他功能。未经另行说明并获取您的同意，我们不会留存或将您的上述照片用于其他目的。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>请注意，单独的设备信息、日志信息是无法识别特定自然人身份的信息。如果我们将该类信息与其他信息结合用于识别特定自然人身份，或者将其与个人信息结合使用，则在结合使用期间，该类信息将被视为个人信息。我们会将该类个人信息做匿名化、去标识化处理，但您授权或法律法规另有规定的除外。该类信息在结合使用期间，将作为您的个人信息按照本政策处理与保护。</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>3、向您提供互动与发布服务</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;您在使用游戏服务，上传和/或发布信息以及进行相关互动行为（发言、跟贴、留言分享、收藏、打赏）时，我们将收集您上传、发布或形成的信息，并使用您的  <b>昵称、头像、游戏ID、虚拟角色形象和发布内容</b>以作展示。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在游戏的部分产品中，如您复制产品内信息分享或在产品内接收被分享的信息、参加相关活动，我们需要访问您的<b>剪切板</b>，读取其中的分享码、口令、链接、兑换码和其他相关的信息，以实现分享信息、获取福利和参与活动的功能或服务。您的剪切板信息仅会在您的设备上处理，我们仅会读取与我们服务相关的信息完成相关指令，不会存储您的剪切板信息。未经另行说明并获取您的同意，我们不会收集您的剪切板中的其他无关信息。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>4、帮助您完成下单、支付、充值并向您交付商品或服务</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（1）当您在游戏服务中订购具体商品及/或服务、充值时，为向您展示帐号的交易信息并保障交易安全，我们会通过系统为您生成购买该商品及/或服务的订单，收集您的具体订单号、订单创建时间、交易金额信息，用于向您展示及便于您对订单进行交易管理。在下单过程中，如是实物商品，我们还需您提供收货人姓名、收货地址、联系电话信息，以便我们向您交付商品。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（2）为完成订单支付、交付商品或服务、确认交易状态及为您提供售后与争议解决服务，  <b>我们会通过您基于交易所选择的交易对象、支付机构、物流公司，收集与交易进度相关的您的帐号、订单、交易、物流信息，或将您的交易信息共享给上述服务提供者。</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;<b>充值记录、消费记录</b>属于敏感个人信息，收集该等信息是实现消费功能所必需，否则将无法完成交易。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>5、为您提供客服或其他用户响应功能</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当您联系我们的客服或使用其他用户响应功能时（个人信息保护投诉或建议、未成年人游戏相关投诉或建议或其他客户投诉和需求），<b>我们需要您提供必要的个人信息以匹配并核验您的用户身份，</b>以便保障您的帐号与系统安全。为处理您的诉求，人工客服需要在您授权范围内查询或核验您的相关信息并仅在必要范围内使用，如果您拒绝提供或提供错误的，我们将无法向您提供相应支持。在确认您用户身份后，我们还会保存您的  <b>联系方式</b>（您与我们联系时使用的或您向我们主动提供的其他联系方式）、您与我们的  <b>通信/通话记录和内容、</b>与您需求相关联的其他必要信息，以便与您联系或帮助您解决问题，或记录相关问题的处理方案及结果。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b> 6、个性化推荐</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;基于我们获得的您的个人信息（您的浏览及搜索记录、设备信息、订单信息、广告数据），部分游戏产品会基于上述一项或几项信息的结合，需要提取您的浏览、搜索偏好、行为习惯、位置信息的相关特征，以便向您提供更契合您需求的页面展示和推荐个性化内容及广告。如您不希望接受个性化推荐服务，您可以在游戏产品查看管理方式并关闭相应功能，如有任何问题，您可以登录<u><font color="#63b32a"><a href="privacy.gm.163.com">《用户个人信息服务平台》</a></font></u>，与我们联系。      
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>7、您理解并同意，使用游戏的过程中，我们将在必要时申请访问您的系统权限（具体权限因您使用的设备型号、系统版本不同而存在差异），以实现这些权限所涉及信息的收集和使用。我们在开启权限前，将告知您开启权限的目的并征求您的同意，如您不同意，我们将不会开启相关权限，也无法为您提供该权限所对应的服务。</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（1）在您同意访问<b>存储权限</b>后，您允许我们访问您的存储空间，以便使您可以下载、上传、并保存内容或者通过缓存，实现发布/分享信息内容、编辑/修改头像、客服沟通、举报/投诉的相应服务和功能；
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（2）在您同意访问<b>电话信息权限</b>后，您允许我们获取您的设备信息以作为您设备的唯一性标识，以便向您提供更契合您需求的页面展示和推荐个性化内容、了解和提升产品适配性、识别异常状态以及保障游戏服务的网络及运营安全；
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（3）在您同意访问<b>相机权限</b>后，您能够上传、拍摄照片/图片/视频、使用“扫一扫”、“扫码”、“练表情”功能，实现发布信息和评论、视频直播、添加好友、观看视频/比赛、面对面共享资源或与客服沟通提供证明的功能；
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（4）在您同意访问<b>相册权限</b>后，您允许我们访问您的相册内容/向您的相册添加内容，以便您可以实现发布/分享信息内容、上传/编辑/修改头像、图片/视频信息保存、客服沟通、举报/投诉；
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（5）在您同意访问<b>通讯录权限</b>后，我们可以获取您的通讯录好友信息，以便向您提供好友状态查询、邀请您的好友使用游戏、向您认识的人分享内容/产品的功能；
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（6）在您同意访问<b>麦克风权限</b>后，您能够使用语音功能与我们的产品、他人进行信息交互，或与客服联系、实现录屏功能；
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（7）在您同意访问<b>位置权限</b>后，我们可以获取您的位置信息，以便让您与附近的朋友进行信息交互、指引您位置移动、或向您推送个性化内容；位置信息为敏感个人信息，如您不同意，只会使得您无法与附近玩家互动、精准位置移动或接受对应的个性化内容，但不会影响您使用游戏与位置权限无关的其他功能，您也可以随时取消您的位置信息授权。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（8）在您同意访问<b>日历权限</b>后，我们可以获取您的日程时间，以便为您提供记录、提醒的功能。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>有关特定功能权限的提示：</b> 如您需要关闭为使用上述特定功能而开启的功能权限，大多数移动设备都会支持您的这项需求，具体方法请参考或联系您移动设备的服务商或生产商，您也可以登录《用户个人信息服务平台》，与我们联系。请您注意，您开启任一权限即代表您授权我们可以收集和使用相关信息来为您提供对应服务，您一旦关闭任一权限即代表您取消了授权，我们将不再基于对应权限继续收集和使用相关信息，也无法为您提供该权限所对应的服务。但是，您关闭权限的决定不会影响此前基于您的授权所进行的信息收集及使用。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果我们要将您的个人信息用于本政策中未载明的其他用途或额外收集未提及的其他个人信息，我们会依法通过页面提示、弹窗或其他方式另行征得您的同意。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b> 8、征得授权同意的例外</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据相关法律法规规定，以下情形中处理您的信息无需征得您的授权同意：
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（1）为订立、履行您作为一方当事人的合同所必需；
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（2）为履行法定职责或者法定义务所必需；
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（3）为应对突发公共卫生事件，或者紧急情况下为保护您或他人的生命健康和财产安全所必需；
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（4）为公共利益实施新闻报道、舆论监督等行为，在合理范围内处理您的个人信息；
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（5）在合理范围内处理您自行公开或者其他已经合法公开的个人信息；
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（6）法律、行政法规规定的其他情形。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>二、我们如何使用COOKIES或同类技术</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们或我们的第三方合作伙伴可能通过COOKIES或同类技术获取和使用您的信息，并将该等信息存储为日志信息。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过使用COOKIES，我们向用户提供简单易行并富个性化的网络体验。一个COOKIES是少量的数据，它们从一个网络服务器送至您的浏览器并存在计算机硬盘上。我们使用COOKIES是为了让其用户可以受益。比如，为使得虚拟社区的登录过程更快捷，您可以选择把用户名存在一个COOKIES中。这样下次当您要登录的服务时能更加方便快捷。COOKIES能帮助我们确定您连接的页面和内容，您在特定服务上花费的时间和您所选择的游戏服务。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;COOKIES使得我们能更好、更快地为您服务，并且使您在游戏服务上的经历更富个性化。然而，您应该能够控制COOKIES是否以及怎样被您的浏览器接受。请查阅您的浏览器附带的文件以获得更多这方面的信息。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们和第三方合作伙伴可能通过COOKIES或同类技术收集和使用您的信息，并将该等信息存储。
</font></p>
<p><font color="#7a7a7a">我们使用自己的COOKIES或同类技术，用于以下用途（具体以特定游戏设置的服务和功能为准）：
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1、记住您的身份。COOKIES或同类技术有助于我们辨认您作为我们的注册用户的身份，或保存您向我们提供有关您的喜好或其他信息；
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2、分析您使用我们服务的情况。我们可利用COOKIES或同类技术来了解您使用游戏服务进行什么活动、或哪些服务最受欢迎；
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3、广告优化。COOKIES或同类技术有助于我们根据您的信息，向您提供您可能更感兴趣的广告而非进行普遍的广告投放。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们为上述目的使用COOKIES或同类技术的同时，可能将通过COOKIES或同类技术收集的非个人身份信息汇总提供给广告商和其他伙伴，用于分析您和其他用户如何使用游戏服务并用于广告服务。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>游戏上可能会有广告商和其他合作方放置的COOKIES或同类技术。这些COOKIES和或同类技术可能会收集与您相关的非个人身份信息，以用于分析用户如何使用该等服务、向您发送您可能感兴趣的广告，或用于评估广告服务的效果。这些第三方COOKIES或同类技术收集和使用该等信息不受本政策约束，而是受到其自身的信息保护声明约束，我们不对第三方的COOKIES或同类技术承担责任。</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b> 您可以通过浏览器或用户选择机制拒绝或管理COOKIES或同类技术。但请您注意，如果您停用COOKIES或同类技术，我们有可能无法为您提供更优质的服务体验，某些服务也可能无法正常使用。同时，您仍然将收到广告，只是这些广告与您的相关性会降低。</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>三、我们如何共享、转移或公开您的个人信息</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>（一）共享</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们非常重视保护您的个人信息。  <b>我们仅会出于合法、正当、必要、特定、明确的目的向第三方提供您的个人信息。接收我们提供个人信息的公司、组织和个人，我们会与其签署严格的保密协定，要求他们按照我们的说明、本政策以及其他任何相关的保密和安全措施来处理信息。</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1、为实现本政策中声明的目的，我们会接入第三方服务商提供的SDK或其他类似的应用程序（包括以嵌入代码、插件、H5的形式）与第三方合作，以便向您提供更好的客户服务和用户体验。为实现我们服务而委托处理或共享个人信息的情形如下（具体以特定游戏设置的服务和功能为准）：
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（1）用于广告相关服务，包括广告展示、广告数据监测/统计；
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（2）用于消息推送功能，包括手机厂商Push推送、特定事件提醒、个性化内容推荐；
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（3）用于支付相关服务，包括订单支付、交易行为核验、收入结算、支付信息汇总统计；
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（4）用于在您同意的情况下获取设备位置权限、搜集设备信息和日志信息；
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（5）用于第三方授权服务，包括游戏认可的第三方帐号登陆；
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（6）用于支持产品功能模块，包括在线直播、视频播放、语音识别、AR、智能客服、弹幕播放、内容存储；
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（7）用于优化产品性能和服务质量，包括提高硬件配网能力、降低服务器成本、功能热修复、安全分析、优化游戏服务、提升用户体验；
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（8）用于帐号安全、产品加固相关服务，包括网络监测、域名解析、防劫持、反垃圾反作弊、加解密服务；
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（9）用于物流服务，包括实物商品打包出库、运输、快递。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2、游戏服务接入或链接至非游戏的其他产品或服务或第三方提供的产品或服务，包括：
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（1）您可利用“分享”功能将某些游戏服务内容分享到非游戏的其他产品或服务或第三方产品或服务，或您将非游戏的其他产品或服务或第三方产品或服务的内容分享到游戏服务；
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（2）通过广告或其他方式向您提供链接，使您可以链接至非游戏的其他产品或服务、第三方的产品或服务服务或网站；
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（3）其他接入第三方服务的情形。  <b>我们接入的部分第三方SDK或类似应用程序将会收集您的个人信息，如您在我们的服务中使用这类由第三方提供的服务时，您同意将由其直接收集和处理您的信息。</b>我们会评估这类第三方服务收集个人信息的合法性、正当性、必要性，要求该等第三方对您的个人信息采取保护措施，并严格遵守相关法律法规与监管要求。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>以上第三方服务由相关的第三方负责运营。您使用该等第三方服务（包括您向该等第三方提供的任何信息），须受第三方自己的服务条款及个人信息保护相关规则（而非本政策）约束，您需要仔细阅读其条款。本政策仅适用于我们所收集的个人信息，并不适用于任何第三方提供的服务或第三方的信息使用规则。如您发现这些第三方服务存在风险时，建议您终止相关操作以保护您的合法权益并及时与我们取得联系。</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>您可以点击《第三方服务共享清单》，了解我们接入的第三方服务具体情况。</b>您也可以选择通过<b>本政策“如何联系我们”章节</b>所列的反馈渠道联系我们，我们会尽快为您作出解答。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3、为了更好地保护未成年人身心健康，引导未成年人健康上网，防止未成年人冒用、借用成年人的相关信息，我们将基于未成年人监护人的请求或我们主动保护未成年人的需要，会尝试联系其监护人，将其相关的游戏帐号、游戏时长、消费交易记录、游戏行为信息告知其监护人，进行提醒、确认和处理。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4、为提升游戏的产品研发能力和服务水平，以便为您提供更优质的产品和服务，我们会在合法、合理、必要的范围内，与研究机构、科研院所、高校机构共享经去标识化或匿名化处理后的数据。未经您的明确授权，我们不会向上述机构共享可用于识别您个人身份的信息。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b> （二）转移</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b> 在我们发生合并、收购、资产转让、分立、解散、被宣告破产或类似的情况时，如果您的个人信息需要转移，我们将会将相关情况告知您，向您告知接收方的名称和联系方式，并会要求新的接收方按照法律法规及不低于本政策的的要求继续保护您的个人信息。 </b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>（三）公开</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们仅会在以下情况下，才会公开您的个人信息：
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1、根据您的需求，在您明确同意的情况下公开您所指定的信息；
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2、根据法律、行政法规的要求公开您的个人信息。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b> 四、我们如何存储和保护您的个人信息</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>（一）个人信息的存储</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>除法律法规或监管部门另有规定外，我们仅在本政策所述目的所必需且最短的时限内存储您的个人信息。</b>
</font></p>
<p><font color="#7a7a7a">如我们终止服务或运营，我们将及时停止继续收集您个人信息的活动，同时会遵守相关法律法规要求提前向您通知，并在终止服务或运营后对您的个人信息进行删除或匿名化处理，但法律法规或监管部门另有规定的除外。
</font></p>
<p><font color="#7a7a7a">如果你申请注销帐户、主动删除个人信息或超出必要的期限后，我们将对你的个人信息进行删除或匿名化处理，但法律法规规定有保留期限的除外。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们在中华人民共和国境内收集的个人信息，存储在中国境内，如需跨境传输的，我们会单独请求获得您的授权同意，并确保依据国家法律法规和相关监管部门的规定执行，以对您的个人信息提供足够的保护。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>（二）个人信息的保护</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们非常重视信息安全，成立了专门的安全团队，并采取一切合理可行的措施，保护您的个人信息：
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b> 1、数据安全技术措施</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们会采用符合业界标准的安全防护措施，包括建立合理的制度规范、安全技术来防止您的个人信息遭到未经授权的访问、使用、修改，避免数据的损坏或丢失。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们的服务采取了去标识化和多种加密技术，我们将利用上述技术（包括SSL）对您的个人信息进行加密保存，并通过隔离技术进行隔离，以保护您的个人信息。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在个人信息使用时，包括信息展示、信息关联计算，我们会采用多种数据脱敏技术增强信息在使用中的安全性。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们还会采用严格的数据访问权限控制和多重身份认证技术保护个人信息，避免数据被违规使用。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>2、我们为保护个人信息采取的其他安全措施</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们有行业先进的以数据为核心，围绕数据生命周期进行的数据安全管理体系，从组织建设、制度设计、人员管理、产品技术等方面多维度提升整个系统的安全性。我们通过建立数据分类分级制度、数据安全管理规范、数据安全开发规范来管理规范个人信息的存储和使用。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们通过信息接触者保密协议、监控和审计机制来对数据进行全面安全控制。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们还会举办安全和隐私保护培训课程，加强员工的安全意识以及对于个人信息保护政策和相关规程的认识。
</font></p>
<p><font color="#7a7a7a">我们仅允许有必要知晓这些信息的员工、合作伙伴访问您的个人信息，并为此设置了严格的访问权限控制和监控机制。我们同时要求可能接触到您的个人信息的所有人员履行相应的保密义务。如果未能履行这些义务，可能会被追究法律责任或被中止与的合作关系。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>3、安全事件处置</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为应对个人信息泄露、篡改和丢失相关的风险，我们制定了多项制度，明确安全事件、安全漏洞的分类分级标准及相应的处理流程。我们也为安全事件建立了的应急响应团队，按照安全事件处置规范要求，针对不同安全事件启动安全预案，进行止损、分析、定位、制定补救措施、联合相关部门进行溯源和打击。我们亦定期组织内部培训和应急演练，使得我们的相关工作人员掌握相应的应急处置策略和规程。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当可能发生或不幸发生信息安全事件，我们将按照法律法规的要求，立即采取补救措施，并及时向您告知：安全事件的基本情况和可能的影响、我们已采取或将要采取的处置措施、您可自主防范和降低风险的建议、对您的补救措施等。我们同时将及时将事件相关情况以邮件、信函、电话、推送通知的方式告知您，难以逐一告知信息主体时，我们会采取合理、有效的方式发布公告。同时，我们还将按照监管部门要求，主动上报信息安全事件的处置情况。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>4、安全提示</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>请您理解，由于技术的限制以及风险防范的局限，即便我们已经尽量加强安全措施，也无法始终保证信息百分之百的安全。您需要了解，您接入游戏服务所用的系统和通讯网络，有可能因我们可控范围外的情况而发生问题。</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>请您务必妥善保管好您的帐号、密码及其他身份要素。您在使用游戏服务时，我们会通过您的帐号、密码及其他身份要素来识别您的身份。一旦您泄露了前述信息，您可能会蒙受损失，并可能对您产生不利。如您发现帐号、密码及/或其他身份要素可能或已经泄露时，请您立即和我们取得联系，以便我们及时采取相应措施以避免或降低相关损失。      </b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b> 五、如何行使您的个人信息相关权利</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>（一）查阅、复制、转移、更正、补充和删除</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;在您使用游戏服务期间，我们将根据各游戏产品的具体情况为您提供管理您的个人信息的相应操作设置，以便您可以查阅、复制、转移、更正、补充、删除或撤回您的相关个人信息。
</font></p>
<p><font color="#7a7a7a">1、您可以在您使用的游戏产品中查阅您的帐号基础信息（帐号头像、昵称，以及其他您选择填写的个人信息，具体以特定游戏设置功能为准）、游戏历史信息（角色等级、成就、战绩，以及各个产品特定的游戏信息），根据具体情况更正、补充您的帐号基础信息。
</font></p>
<p><font color="#7a7a7a">2、如果您有其他查阅、复制、转移、更正、补充或删除需求或您在使用游戏产品相应功能过程中有疑惑或困难，您可以登录用户《用户个人信息服务平台》，我们为您提供了相关操作指引和操作设置，您可以自行进行操作，如您在操作过程中有疑惑或困难可以联系客服，也可以选择通过<b>本政策“如何联系我们”章节</b>所列的反馈渠道联系我们，我们会及时为您处理。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除法律法规另有规定，当您更正、补充、删除您的个人信息或申请注销帐号时，我们可能不会立即从备份系统中更正、补充或删除相应的信息，但我们不会再对相关信息进行处理，并会在备份更新时更正、补充或删除这些信息。  <b>相关信息一旦被删除或者帐号被注销，将无法恢复，请您谨慎操作。</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>（二）公开与分享</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;游戏的部分功能可让您不仅可扩宽您的社交网络，还可与使用该功能的所有用户公开分享您的相关信息，您可以上传或发布的信息、您也可以对其他人上传或发布的信息作出的回应。只要您不删除您所公开或共享的信息，有关信息可能一直留存在公众领域；即使您删除共享信息，有关信息仍可能由其他用户或不受我们控制的第三方独立地缓存、复制或存储，或由其他用户或该等第三方在公众领域保存。  <b>如您将信息通过上述渠道公开或共享，由此造成您的信息泄露，我们不承担责任。因此，我们提醒并请您慎重考虑是否通过上述渠道公开或共享您的信息。</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>（三）帐号注销</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们向您提供帐号注销的途径。
</font></p><p><font color="#7a7a7a"><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在您的帐号注销之后，我们将停止为您提供全部或部分游戏服务，并依据您的要求，删除您的个人信息或做匿名化处理，但法律法规另有规定的除外。  <b>相关信息一旦被删除或者帐号被注销，将无法恢复，请您谨慎操作。</b>
</font></font></p><font color="#7a7a7a">
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>（四）改变授权同意的范围</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;您可以选择是否向我们提供个人信息。您可以通过删除信息、关闭设备功能、注销帐号的多种方式改变您授权我们继续收集信息的范围或撤回您的授权。您也可以登录《用户个人信息服务平台》联系我们，进行撤回授权操作。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>当撤回授权后，我们无法继续为您提供撤回授权所对应的服务，也不再处理您相应的信息。但您撤回授权的决定，不会影响此前基于您的授权而开展的信息处理。</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>（五）约束信息系统自动化决策</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在某些业务功能中，我们会依据信息系统、算法在内的非人工自动决策机制作出决定（具体以特定游戏设置的服务和功能为准）。如果这些决定显著影响您的合法权益，您有权要求我们作出解释，我们也将提供适当的救济方式。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>六、未成年人保护</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们建议：  <b>任何未成年人参加网上活动应事先取得父母或其他监护人（以下简称"监护人"）的同意。</b>我们将根据国家相关法律法规的规定保护未成年人的相关信息。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>我们鼓励监护人指导未成年人使用游戏服务。如果您是未满十四周岁的未成年人，请您通知您的监护人共同阅读我们的《游戏儿童个人信息保护规则及监护人须知》，并在您使用游戏服务、提交个人信息之前，寻求其同意和指导。如果您是未成年人的监护人，当您在帮助未成年人注册、使用游戏服务前，应仔细阅读本政策和《游戏儿童个人信息保护规则及监护人须知》，决定是否同意本政策和《游戏儿童个人信息保护规则及监护人须知》并帮助未成年人注册、使用。</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据国家防沉迷政策要求，我们会通过实名身份及相关信息判断相关帐号的实名信息是否为未成年人，部分游戏产品还会通过收集您在游戏过程中产生的游戏行为数据来初步识别您是否是未成年人，并决定是否将此帐号纳入到防沉迷体系中。另外，我们会收集您的登录时间、游戏时长信息，通过从系统层面自动干预和限制未成年人游戏时间、启用强制下线功能的方式，引导未成年人合理游戏，并在疑似未成年人消费后尝试联系其监护人进行提醒、确认与处理，帮助未成年人健康上网。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了更好地保护未成年人身心健康，引导未成年人健康上网，防止未成年人冒用、借用成年人的相关信息，我们在国家关于防止未成年人沉迷网络游戏的规定基础上，实施更为严格的防沉迷措施，并不断探索、研发、测试各种保护未成年人的新技术。如我们会在部分游戏或者针对部分用户（以具体特定游戏策略为准）在特定场景下（在您登录游戏时，或在游戏过程中包括有关  <b>游戏充值、消费或交易时</b>）启用  <b>人脸识别验证（如果启用人脸识别的，我们会使用游戏内置或者大神APP或易盾提供的人脸识别功能，将您的相关实名身份信息和人脸信息提供给游戏或者大神APP或易盾用于人脸识别）</b>。您的  <b>人脸信息</b>为敏感个人信息，我们将采取严格的保密措施，且仅用于与公安数据平台进行比对，我们不会存储您人脸信息。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;另外，我们还建立了《家长关爱平台》。家长关爱平台可以帮助家长或监护人随时了解孩子的游戏情况，设置消费限额以及每天的游戏时长和时段，协助未成年人的家长或监护人管理孩子的游戏行为，促进孩子健康成长。您可以访问家长关爱平台网站 或者公众号了解更多有关游戏防沉迷措施和家长守护平台的介绍。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>七、修订和通知</b>
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了给您提供更好的服务，我们将会根据游戏服务的更新情况及法律法规的相关要求适时修改本政策的条款，该等修改构成本政策的一部分。我们会在本页面上公布对本政策所作的任何变更。对于重大变更，我们还会提供更为显著的通知（网站公告、推送通知、弹窗提示或其他方式），本政策所指的重大变更包括但不限于：
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1、我们的服务模式发生重大变化。包括处理个人信息的目的、处理的个人信息类型、个人信息的使用方式；
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2、我们在所有权结构方面发生重大变化。包括业务调整、破产并购引起的所有者变更；
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3、个人信息共享、转让或公开的主要对象发生重大变化；
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4、您参与个人信息处理方面的权利及其行使方式发生重大变化；
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5、我们负责处理个人信息安全的责任部门、联络方式及投诉渠道发生重大变化；
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6、其他重要的或可能严重影响您的个人权益的情况发生。
</font></p>
<p><font color="#7a7a7a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们的任何修改都会将您的满意度置于首位。我们鼓励您在每次使用游戏服务时都查阅我们的隐私政策。
</font></p>
</font></div><font color="#7a7a7a">
        </font></div><font color="#7a7a7a">
        
        <div class="footer">
          <div class="btn cancel-btn none">拒 绝</div>
          <div class="btn confirm-btn"></div>
        </div>
      </font></main></div><font color="#7a7a7a">
    </font></div><font color="#7a7a7a">

    
    <script type="text/javascript">
      !(function (t, e) {
        "object" == typeof exports && "undefined" != typeof module
          ? e(exports)
          : "function" == typeof define && define.amd
          ? define(["exports"], e)
          : e((t.JSEncrypt = {}));
      })(this, function (t) {
        "use strict";
        var e = "0123456789abcdefghijklmnopqrstuvwxyz";
        function a(t) {
          return e.charAt(t);
        }
        function i(t, e) {
          return t & e;
        }
        function u(t, e) {
          return t | e;
        }
        function r(t, e) {
          return t ^ e;
        }
        function n(t, e) {
          return t & ~e;
        }
        function s(t) {
          if (0 == t) return -1;
          var e = 0;
          return (
            0 == (65535 & t) && ((t >>= 16), (e += 16)),
            0 == (255 & t) && ((t >>= 8), (e += 8)),
            0 == (15 & t) && ((t >>= 4), (e += 4)),
            0 == (3 & t) && ((t >>= 2), (e += 2)),
            0 == (1 & t) && ++e,
            e
          );
        }
        function o(t) {
          for (var e = 0; 0 != t; ) (t &= t - 1), ++e;
          return e;
        }
        var h =
            "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
          c = "=";
        function f(t) {
          var e,
            i,
            r = "";
          for (e = 0; e + 3 <= t.length; e += 3)
            (i = parseInt(t.substring(e, e + 3), 16)),
              (r += h.charAt(i >> 6) + h.charAt(63 & i));
          for (
            e + 1 == t.length
              ? ((i = parseInt(t.substring(e, e + 1), 16)),
                (r += h.charAt(i << 2)))
              : e + 2 == t.length &&
                ((i = parseInt(t.substring(e, e + 2), 16)),
                (r += h.charAt(i >> 2) + h.charAt((3 & i) << 4)));
            0 < (3 & r.length);

          )
            r += c;
          return r;
        }
        function l(t) {
          var e,
            i = "",
            r = 0,
            n = 0;
          for (e = 0; e < t.length && t.charAt(e) != c; ++e) {
            var s = h.indexOf(t.charAt(e));
            s < 0 ||
              (0 == r
                ? ((i += a(s >> 2)), (n = 3 & s), (r = 1))
                : 1 == r
                ? ((i += a((n << 2) | (s >> 4))), (n = 15 & s), (r = 2))
                : 2 == r
                ? ((i += a(n)), (i += a(s >> 2)), (n = 3 & s), (r = 3))
                : ((i += a((n << 2) | (s >> 4))), (i += a(15 & s)), (r = 0)));
          }
          return 1 == r && (i += a(n << 2)), i;
        }
        var p,
          g =
            Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array &&
              function (t, e) {
                t.__proto__ = e;
              }) ||
            function (t, e) {
              for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i]);
            };
        var d,
          v = function (t) {
            var e;
            if (void 0 === p) {
              var i = "0123456789ABCDEF",
                r = " \f\n\r\t \u2028\u2029";
              for (p = {}, e = 0; e < 16; ++e) p[i.charAt(e)] = e;
              for (i = i.toLowerCase(), e = 10; e < 16; ++e) p[i.charAt(e)] = e;
              for (e = 0; e < r.length; ++e) p[r.charAt(e)] = -1;
            }
            var n = [],
              s = 0,
              o = 0;
            for (e = 0; e < t.length; ++e) {
              var h = t.charAt(e);
              if ("=" == h) break;
              if (-1 != (h = p[h])) {
                if (void 0 === h)
                  throw new Error("Illegal character at offset " + e);
                (s |= h),
                  2 <= ++o ? ((n[n.length] = s), (o = s = 0)) : (s <<= 4);
              }
            }
            if (o) throw new Error("Hex encoding incomplete: 4 bits missing");
            return n;
          },
          m = {
            decode: function (t) {
              var e;
              if (void 0 === d) {
                var i = "= \f\n\r\t \u2028\u2029";
                for (d = Object.create(null), e = 0; e < 64; ++e)
                  d[
                    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(
                      e
                    )
                  ] = e;
                for (e = 0; e < i.length; ++e) d[i.charAt(e)] = -1;
              }
              var r = [],
                n = 0,
                s = 0;
              for (e = 0; e < t.length; ++e) {
                var o = t.charAt(e);
                if ("=" == o) break;
                if (-1 != (o = d[o])) {
                  if (void 0 === o)
                    throw new Error("Illegal character at offset " + e);
                  (n |= o),
                    4 <= ++s
                      ? ((r[r.length] = n >> 16),
                        (r[r.length] = (n >> 8) & 255),
                        (r[r.length] = 255 & n),
                        (s = n = 0))
                      : (n <<= 6);
                }
              }
              switch (s) {
                case 1:
                  throw new Error(
                    "Base64 encoding incomplete: at least 2 bits missing"
                  );
                case 2:
                  r[r.length] = n >> 10;
                  break;
                case 3:
                  (r[r.length] = n >> 16), (r[r.length] = (n >> 8) & 255);
              }
              return r;
            },
            re: /-----BEGIN [^-]+-----([A-Za-z0-9+\/=\s]+)-----END [^-]+-----|begin-base64[^\n]+\n([A-Za-z0-9+\/=\s]+)====/,
            unarmor: function (t) {
              var e = m.re.exec(t);
              if (e)
                if (e[1]) t = e[1];
                else {
                  if (!e[2]) throw new Error("RegExp out of sync");
                  t = e[2];
                }
              return m.decode(t);
            },
          },
          y = 1e13,
          b = (function () {
            function t(t) {
              this.buf = [+t || 0];
            }
            return (
              (t.prototype.mulAdd = function (t, e) {
                var i,
                  r,
                  n = this.buf,
                  s = n.length;
                for (i = 0; i < s; ++i)
                  (r = n[i] * t + e) < y
                    ? (e = 0)
                    : (r -= (e = 0 | (r / y)) * y),
                    (n[i] = r);
                0 < e && (n[i] = e);
              }),
              (t.prototype.sub = function (t) {
                var e,
                  i,
                  r = this.buf,
                  n = r.length;
                for (e = 0; e < n; ++e)
                  (i = r[e] - t) < 0 ? ((i += y), (t = 1)) : (t = 0),
                    (r[e] = i);
                for (; 0 === r[r.length - 1]; ) r.pop();
              }),
              (t.prototype.toString = function (t) {
                if (10 != (t || 10))
                  throw new Error("only base 10 is supported");
                for (
                  var e = this.buf,
                    i = e[e.length - 1].toString(),
                    r = e.length - 2;
                  0 <= r;
                  --r
                )
                  i += (y + e[r]).toString().substring(1);
                return i;
              }),
              (t.prototype.valueOf = function () {
                for (var t = this.buf, e = 0, i = t.length - 1; 0 <= i; --i)
                  e = e * y + t[i];
                return e;
              }),
              (t.prototype.simplify = function () {
                var t = this.buf;
                return 1 == t.length ? t[0] : this;
              }),
              t
            );
          })(),
          T = "â€¦",
          S =
            /^(\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/,
          E =
            /^(\d\d\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/;
        function w(t, e) {
          return t.length > e && (t = t.substring(0, e) + T), t;
        }
        var D,
          x = (function () {
            function i(t, e) {
              (this.hexDigits = "0123456789ABCDEF"),
                t instanceof i
                  ? ((this.enc = t.enc), (this.pos = t.pos))
                  : ((this.enc = t), (this.pos = e));
            }
            return (
              (i.prototype.get = function (t) {
                if ((void 0 === t && (t = this.pos++), t >= this.enc.length))
                  throw new Error(
                    "Requesting byte offset " +
                      t +
                      " on a stream of length " +
                      this.enc.length
                  );
                return "string" == typeof this.enc
                  ? this.enc.charCodeAt(t)
                  : this.enc[t];
              }),
              (i.prototype.hexByte = function (t) {
                return (
                  this.hexDigits.charAt((t >> 4) & 15) +
                  this.hexDigits.charAt(15 & t)
                );
              }),
              (i.prototype.hexDump = function (t, e, i) {
                for (var r = "", n = t; n < e; ++n)
                  if (((r += this.hexByte(this.get(n))), !0 !== i))
                    switch (15 & n) {
                      case 7:
                        r += "  ";
                        break;
                      case 15:
                        r += "\n";
                        break;
                      default:
                        r += " ";
                    }
                return r;
              }),
              (i.prototype.isASCII = function (t, e) {
                for (var i = t; i < e; ++i) {
                  var r = this.get(i);
                  if (r < 32 || 176 < r) return !1;
                }
                return !0;
              }),
              (i.prototype.parseStringISO = function (t, e) {
                for (var i = "", r = t; r < e; ++r)
                  i += String.fromCharCode(this.get(r));
                return i;
              }),
              (i.prototype.parseStringUTF = function (t, e) {
                for (var i = "", r = t; r < e; ) {
                  var n = this.get(r++);
                  i +=
                    n < 128
                      ? String.fromCharCode(n)
                      : 191 < n && n < 224
                      ? String.fromCharCode(
                          ((31 & n) << 6) | (63 & this.get(r++))
                        )
                      : String.fromCharCode(
                          ((15 & n) << 12) |
                            ((63 & this.get(r++)) << 6) |
                            (63 & this.get(r++))
                        );
                }
                return i;
              }),
              (i.prototype.parseStringBMP = function (t, e) {
                for (var i, r, n = "", s = t; s < e; )
                  (i = this.get(s++)),
                    (r = this.get(s++)),
                    (n += String.fromCharCode((i << 8) | r));
                return n;
              }),
              (i.prototype.parseTime = function (t, e, i) {
                var r = this.parseStringISO(t, e),
                  n = (i ? S : E).exec(r);
                return n
                  ? (i && ((n[1] = +n[1]), (n[1] += +n[1] < 70 ? 2e3 : 1900)),
                    (r = n[1] + "-" + n[2] + "-" + n[3] + " " + n[4]),
                    n[5] &&
                      ((r += ":" + n[5]),
                      n[6] && ((r += ":" + n[6]), n[7] && (r += "." + n[7]))),
                    n[8] &&
                      ((r += " UTC"),
                      "Z" != n[8] && ((r += n[8]), n[9] && (r += ":" + n[9]))),
                    r)
                  : "Unrecognized time: " + r;
              }),
              (i.prototype.parseInteger = function (t, e) {
                for (
                  var i, r = this.get(t), n = 127 < r, s = n ? 255 : 0, o = "";
                  r == s && ++t < e;

                )
                  r = this.get(t);
                if (0 === (i = e - t)) return n ? -1 : 0;
                if (4 < i) {
                  for (o = r, i <<= 3; 0 == (128 & (+o ^ s)); )
                    (o = +o << 1), --i;
                  o = "(" + i + " bit)\n";
                }
                n && (r -= 256);
                for (var h = new b(r), a = t + 1; a < e; ++a)
                  h.mulAdd(256, this.get(a));
                return o + h.toString();
              }),
              (i.prototype.parseBitString = function (t, e, i) {
                for (
                  var r = this.get(t),
                    n = "(" + (((e - t - 1) << 3) - r) + " bit)\n",
                    s = "",
                    o = t + 1;
                  o < e;
                  ++o
                ) {
                  for (
                    var h = this.get(o), a = o == e - 1 ? r : 0, u = 7;
                    a <= u;
                    --u
                  )
                    s += (h >> u) & 1 ? "1" : "0";
                  if (s.length > i) return n + w(s, i);
                }
                return n + s;
              }),
              (i.prototype.parseOctetString = function (t, e, i) {
                if (this.isASCII(t, e)) return w(this.parseStringISO(t, e), i);
                var r = e - t,
                  n = "(" + r + " byte)\n";
                (i /= 2) < r && (e = t + i);
                for (var s = t; s < e; ++s) n += this.hexByte(this.get(s));
                return i < r && (n += T), n;
              }),
              (i.prototype.parseOID = function (t, e, i) {
                for (var r = "", n = new b(), s = 0, o = t; o < e; ++o) {
                  var h = this.get(o);
                  if ((n.mulAdd(128, 127 & h), (s += 7), !(128 & h))) {
                    if ("" === r)
                      if ((n = n.simplify()) instanceof b)
                        n.sub(80), (r = "2." + n.toString());
                      else {
                        var a = n < 80 ? (n < 40 ? 0 : 1) : 2;
                        r = a + "." + (n - 40 * a);
                      }
                    else r += "." + n.toString();
                    if (r.length > i) return w(r, i);
                    (n = new b()), (s = 0);
                  }
                }
                return 0 < s && (r += ".incomplete"), r;
              }),
              i
            );
          })(),
          R = (function () {
            function c(t, e, i, r, n) {
              if (!(r instanceof B)) throw new Error("Invalid tag value.");
              (this.stream = t),
                (this.header = e),
                (this.length = i),
                (this.tag = r),
                (this.sub = n);
            }
            return (
              (c.prototype.typeName = function () {
                switch (this.tag.tagClass) {
                  case 0:
                    switch (this.tag.tagNumber) {
                      case 0:
                        return "EOC";
                      case 1:
                        return "BOOLEAN";
                      case 2:
                        return "INTEGER";
                      case 3:
                        return "BIT_STRING";
                      case 4:
                        return "OCTET_STRING";
                      case 5:
                        return "NULL";
                      case 6:
                        return "OBJECT_IDENTIFIER";
                      case 7:
                        return "ObjectDescriptor";
                      case 8:
                        return "EXTERNAL";
                      case 9:
                        return "REAL";
                      case 10:
                        return "ENUMERATED";
                      case 11:
                        return "EMBEDDED_PDV";
                      case 12:
                        return "UTF8String";
                      case 16:
                        return "SEQUENCE";
                      case 17:
                        return "SET";
                      case 18:
                        return "NumericString";
                      case 19:
                        return "PrintableString";
                      case 20:
                        return "TeletexString";
                      case 21:
                        return "VideotexString";
                      case 22:
                        return "IA5String";
                      case 23:
                        return "UTCTime";
                      case 24:
                        return "GeneralizedTime";
                      case 25:
                        return "GraphicString";
                      case 26:
                        return "VisibleString";
                      case 27:
                        return "GeneralString";
                      case 28:
                        return "UniversalString";
                      case 30:
                        return "BMPString";
                    }
                    return "Universal_" + this.tag.tagNumber.toString();
                  case 1:
                    return "Application_" + this.tag.tagNumber.toString();
                  case 2:
                    return "[" + this.tag.tagNumber.toString() + "]";
                  case 3:
                    return "Private_" + this.tag.tagNumber.toString();
                }
              }),
              (c.prototype.content = function (t) {
                if (void 0 === this.tag) return null;
                void 0 === t && (t = 1 / 0);
                var e = this.posContent(),
                  i = Math.abs(this.length);
                if (!this.tag.isUniversal())
                  return null !== this.sub
                    ? "(" + this.sub.length + " elem)"
                    : this.stream.parseOctetString(e, e + i, t);
                switch (this.tag.tagNumber) {
                  case 1:
                    return 0 === this.stream.get(e) ? "false" : "true";
                  case 2:
                    return this.stream.parseInteger(e, e + i);
                  case 3:
                    return this.sub
                      ? "(" + this.sub.length + " elem)"
                      : this.stream.parseBitString(e, e + i, t);
                  case 4:
                    return this.sub
                      ? "(" + this.sub.length + " elem)"
                      : this.stream.parseOctetString(e, e + i, t);
                  case 6:
                    return this.stream.parseOID(e, e + i, t);
                  case 16:
                  case 17:
                    return null !== this.sub
                      ? "(" + this.sub.length + " elem)"
                      : "(no elem)";
                  case 12:
                    return w(this.stream.parseStringUTF(e, e + i), t);
                  case 18:
                  case 19:
                  case 20:
                  case 21:
                  case 22:
                  case 26:
                    return w(this.stream.parseStringISO(e, e + i), t);
                  case 30:
                    return w(this.stream.parseStringBMP(e, e + i), t);
                  case 23:
                  case 24:
                    return this.stream.parseTime(
                      e,
                      e + i,
                      23 == this.tag.tagNumber
                    );
                }
                return null;
              }),
              (c.prototype.toString = function () {
                return (
                  this.typeName() +
                  "@" +
                  this.stream.pos +
                  "[header:" +
                  this.header +
                  ",length:" +
                  this.length +
                  ",sub:" +
                  (null === this.sub ? "null" : this.sub.length) +
                  "]"
                );
              }),
              (c.prototype.toPrettyString = function (t) {
                void 0 === t && (t = "");
                var e = t + this.typeName() + " @" + this.stream.pos;
                if (
                  (0 <= this.length && (e += "+"),
                  (e += this.length),
                  this.tag.tagConstructed
                    ? (e += " (constructed)")
                    : !this.tag.isUniversal() ||
                      (3 != this.tag.tagNumber && 4 != this.tag.tagNumber) ||
                      null === this.sub ||
                      (e += " (encapsulates)"),
                  (e += "\n"),
                  null !== this.sub)
                ) {
                  t += "  ";
                  for (var i = 0, r = this.sub.length; i < r; ++i)
                    e += this.sub[i].toPrettyString(t);
                }
                return e;
              }),
              (c.prototype.posStart = function () {
                return this.stream.pos;
              }),
              (c.prototype.posContent = function () {
                return this.stream.pos + this.header;
              }),
              (c.prototype.posEnd = function () {
                return this.stream.pos + this.header + Math.abs(this.length);
              }),
              (c.prototype.toHexString = function () {
                return this.stream.hexDump(this.posStart(), this.posEnd(), !0);
              }),
              (c.decodeLength = function (t) {
                var e = t.get(),
                  i = 127 & e;
                if (i == e) return i;
                if (6 < i)
                  throw new Error(
                    "Length over 48 bits not supported at position " +
                      (t.pos - 1)
                  );
                if (0 === i) return null;
                for (var r = (e = 0); r < i; ++r) e = 256 * e + t.get();
                return e;
              }),
              (c.prototype.getHexStringValue = function () {
                var t = this.toHexString(),
                  e = 2 * this.header,
                  i = 2 * this.length;
                return t.substr(e, i);
              }),
              (c.decode = function (t) {
                var r;
                r = t instanceof x ? t : new x(t, 0);
                var e = new x(r),
                  i = new B(r),
                  n = c.decodeLength(r),
                  s = r.pos,
                  o = s - e.pos,
                  h = null,
                  a = function () {
                    var t = [];
                    if (null !== n) {
                      for (var e = s + n; r.pos < e; )
                        t[t.length] = c.decode(r);
                      if (r.pos != e)
                        throw new Error(
                          "Content size is not correct for container starting at offset " +
                            s
                        );
                    } else
                      try {
                        for (;;) {
                          var i = c.decode(r);
                          if (i.tag.isEOC()) break;
                          t[t.length] = i;
                        }
                        n = s - r.pos;
                      } catch (t) {
                        throw new Error(
                          "Exception while decoding undefined length content: " +
                            t
                        );
                      }
                    return t;
                  };
                if (i.tagConstructed) h = a();
                else if (
                  i.isUniversal() &&
                  (3 == i.tagNumber || 4 == i.tagNumber)
                )
                  try {
                    if (3 == i.tagNumber && 0 != r.get())
                      throw new Error(
                        "BIT STRINGs with unused bits cannot encapsulate."
                      );
                    h = a();
                    for (var u = 0; u < h.length; ++u)
                      if (h[u].tag.isEOC())
                        throw new Error(
                          "EOC is not supposed to be actual content."
                        );
                  } catch (t) {
                    h = null;
                  }
                if (null === h) {
                  if (null === n)
                    throw new Error(
                      "We can't skip over an invalid tag with undefined length at offset " +
                        s
                    );
                  r.pos = s + Math.abs(n);
                }
                return new c(e, o, n, i, h);
              }),
              c
            );
          })(),
          B = (function () {
            function t(t) {
              var e = t.get();
              if (
                ((this.tagClass = e >> 6),
                (this.tagConstructed = 0 != (32 & e)),
                (this.tagNumber = 31 & e),
                31 == this.tagNumber)
              ) {
                for (
                  var i = new b();
                  (e = t.get()), i.mulAdd(128, 127 & e), 128 & e;

                );
                this.tagNumber = i.simplify();
              }
            }
            return (
              (t.prototype.isUniversal = function () {
                return 0 === this.tagClass;
              }),
              (t.prototype.isEOC = function () {
                return 0 === this.tagClass && 0 === this.tagNumber;
              }),
              t
            );
          })(),
          A = [
            2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,
            67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137,
            139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199,
            211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277,
            281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359,
            367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439,
            443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521,
            523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,
            613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683,
            691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773,
            787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863,
            877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967,
            971, 977, 983, 991, 997,
          ],
          O = (1 << 26) / A[A.length - 1],
          V = (function () {
            function b(t, e, i) {
              null != t &&
                ("number" == typeof t
                  ? this.fromNumber(t, e, i)
                  : null == e && "string" != typeof t
                  ? this.fromString(t, 256)
                  : this.fromString(t, e));
            }
            return (
              (b.prototype.toString = function (t) {
                if (this.s < 0) return "-" + this.negate().toString(t);
                var e;
                if (16 == t) e = 4;
                else if (8 == t) e = 3;
                else if (2 == t) e = 1;
                else if (32 == t) e = 5;
                else {
                  if (4 != t) return this.toRadix(t);
                  e = 2;
                }
                var i,
                  r = (1 << e) - 1,
                  n = !1,
                  s = "",
                  o = this.t,
                  h = this.DB - ((o * this.DB) % e);
                if (0 < o--)
                  for (
                    h < this.DB &&
                    0 < (i = this[o] >> h) &&
                    ((n = !0), (s = a(i)));
                    0 <= o;

                  )
                    h < e
                      ? ((i = (this[o] & ((1 << h) - 1)) << (e - h)),
                        (i |= this[--o] >> (h += this.DB - e)))
                      : ((i = (this[o] >> (h -= e)) & r),
                        h <= 0 && ((h += this.DB), --o)),
                      0 < i && (n = !0),
                      n && (s += a(i));
                return n ? s : "0";
              }),
              (b.prototype.negate = function () {
                var t = L();
                return b.ZERO.subTo(this, t), t;
              }),
              (b.prototype.abs = function () {
                return this.s < 0 ? this.negate() : this;
              }),
              (b.prototype.compareTo = function (t) {
                var e = this.s - t.s;
                if (0 != e) return e;
                var i = this.t;
                if (0 != (e = i - t.t)) return this.s < 0 ? -e : e;
                for (; 0 <= --i; ) if (0 != (e = this[i] - t[i])) return e;
                return 0;
              }),
              (b.prototype.bitLength = function () {
                return this.t <= 0
                  ? 0
                  : this.DB * (this.t - 1) +
                      K(this[this.t - 1] ^ (this.s & this.DM));
              }),
              (b.prototype.mod = function (t) {
                var e = L();
                return (
                  this.abs().divRemTo(t, null, e),
                  this.s < 0 && 0 < e.compareTo(b.ZERO) && t.subTo(e, e),
                  e
                );
              }),
              (b.prototype.modPowInt = function (t, e) {
                var i;
                return (
                  (i = t < 256 || e.isEven() ? new N(e) : new P(e)),
                  this.exp(t, i)
                );
              }),
              (b.prototype.clone = function () {
                var t = L();
                return this.copyTo(t), t;
              }),
              (b.prototype.intValue = function () {
                if (this.s < 0) {
                  if (1 == this.t) return this[0] - this.DV;
                  if (0 == this.t) return -1;
                } else {
                  if (1 == this.t) return this[0];
                  if (0 == this.t) return 0;
                }
                return (
                  ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0]
                );
              }),
              (b.prototype.byteValue = function () {
                return 0 == this.t ? this.s : (this[0] << 24) >> 24;
              }),
              (b.prototype.shortValue = function () {
                return 0 == this.t ? this.s : (this[0] << 16) >> 16;
              }),
              (b.prototype.signum = function () {
                return this.s < 0
                  ? -1
                  : this.t <= 0 || (1 == this.t && this[0] <= 0)
                  ? 0
                  : 1;
              }),
              (b.prototype.toByteArray = function () {
                var t = this.t,
                  e = [];
                e[0] = this.s;
                var i,
                  r = this.DB - ((t * this.DB) % 8),
                  n = 0;
                if (0 < t--)
                  for (
                    r < this.DB &&
                    (i = this[t] >> r) != (this.s & this.DM) >> r &&
                    (e[n++] = i | (this.s << (this.DB - r)));
                    0 <= t;

                  )
                    r < 8
                      ? ((i = (this[t] & ((1 << r) - 1)) << (8 - r)),
                        (i |= this[--t] >> (r += this.DB - 8)))
                      : ((i = (this[t] >> (r -= 8)) & 255),
                        r <= 0 && ((r += this.DB), --t)),
                      0 != (128 & i) && (i |= -256),
                      0 == n && (128 & this.s) != (128 & i) && ++n,
                      (0 < n || i != this.s) && (e[n++] = i);
                return e;
              }),
              (b.prototype.equals = function (t) {
                return 0 == this.compareTo(t);
              }),
              (b.prototype.min = function (t) {
                return this.compareTo(t) < 0 ? this : t;
              }),
              (b.prototype.max = function (t) {
                return 0 < this.compareTo(t) ? this : t;
              }),
              (b.prototype.and = function (t) {
                var e = L();
                return this.bitwiseTo(t, i, e), e;
              }),
              (b.prototype.or = function (t) {
                var e = L();
                return this.bitwiseTo(t, u, e), e;
              }),
              (b.prototype.xor = function (t) {
                var e = L();
                return this.bitwiseTo(t, r, e), e;
              }),
              (b.prototype.andNot = function (t) {
                var e = L();
                return this.bitwiseTo(t, n, e), e;
              }),
              (b.prototype.not = function () {
                for (var t = L(), e = 0; e < this.t; ++e)
                  t[e] = this.DM & ~this[e];
                return (t.t = this.t), (t.s = ~this.s), t;
              }),
              (b.prototype.shiftLeft = function (t) {
                var e = L();
                return t < 0 ? this.rShiftTo(-t, e) : this.lShiftTo(t, e), e;
              }),
              (b.prototype.shiftRight = function (t) {
                var e = L();
                return t < 0 ? this.lShiftTo(-t, e) : this.rShiftTo(t, e), e;
              }),
              (b.prototype.getLowestSetBit = function () {
                for (var t = 0; t < this.t; ++t)
                  if (0 != this[t]) return t * this.DB + s(this[t]);
                return this.s < 0 ? this.t * this.DB : -1;
              }),
              (b.prototype.bitCount = function () {
                for (var t = 0, e = this.s & this.DM, i = 0; i < this.t; ++i)
                  t += o(this[i] ^ e);
                return t;
              }),
              (b.prototype.testBit = function (t) {
                var e = Math.floor(t / this.DB);
                return e >= this.t
                  ? 0 != this.s
                  : 0 != (this[e] & (1 << t % this.DB));
              }),
              (b.prototype.setBit = function (t) {
                return this.changeBit(t, u);
              }),
              (b.prototype.clearBit = function (t) {
                return this.changeBit(t, n);
              }),
              (b.prototype.flipBit = function (t) {
                return this.changeBit(t, r);
              }),
              (b.prototype.add = function (t) {
                var e = L();
                return this.addTo(t, e), e;
              }),
              (b.prototype.subtract = function (t) {
                var e = L();
                return this.subTo(t, e), e;
              }),
              (b.prototype.multiply = function (t) {
                var e = L();
                return this.multiplyTo(t, e), e;
              }),
              (b.prototype.divide = function (t) {
                var e = L();
                return this.divRemTo(t, e, null), e;
              }),
              (b.prototype.remainder = function (t) {
                var e = L();
                return this.divRemTo(t, null, e), e;
              }),
              (b.prototype.divideAndRemainder = function (t) {
                var e = L(),
                  i = L();
                return this.divRemTo(t, e, i), [e, i];
              }),
              (b.prototype.modPow = function (t, e) {
                var i,
                  r,
                  n = t.bitLength(),
                  s = U(1);
                if (n <= 0) return s;
                (i = n < 18 ? 1 : n < 48 ? 3 : n < 144 ? 4 : n < 768 ? 5 : 6),
                  (r = n < 8 ? new N(e) : e.isEven() ? new M(e) : new P(e));
                var o = [],
                  h = 3,
                  a = i - 1,
                  u = (1 << i) - 1;
                if (((o[1] = r.convert(this)), 1 < i)) {
                  var c = L();
                  for (r.sqrTo(o[1], c); h <= u; )
                    (o[h] = L()), r.mulTo(c, o[h - 2], o[h]), (h += 2);
                }
                var f,
                  l,
                  p = t.t - 1,
                  g = !0,
                  d = L();
                for (n = K(t[p]) - 1; 0 <= p; ) {
                  for (
                    a <= n
                      ? (f = (t[p] >> (n - a)) & u)
                      : ((f = (t[p] & ((1 << (n + 1)) - 1)) << (a - n)),
                        0 < p && (f |= t[p - 1] >> (this.DB + n - a))),
                      h = i;
                    0 == (1 & f);

                  )
                    (f >>= 1), --h;
                  if (((n -= h) < 0 && ((n += this.DB), --p), g))
                    o[f].copyTo(s), (g = !1);
                  else {
                    for (; 1 < h; ) r.sqrTo(s, d), r.sqrTo(d, s), (h -= 2);
                    0 < h ? r.sqrTo(s, d) : ((l = s), (s = d), (d = l)),
                      r.mulTo(d, o[f], s);
                  }
                  for (; 0 <= p && 0 == (t[p] & (1 << n)); )
                    r.sqrTo(s, d),
                      (l = s),
                      (s = d),
                      (d = l),
                      --n < 0 && ((n = this.DB - 1), --p);
                }
                return r.revert(s);
              }),
              (b.prototype.modInverse = function (t) {
                var e = t.isEven();
                if ((this.isEven() && e) || 0 == t.signum()) return b.ZERO;
                for (
                  var i = t.clone(),
                    r = this.clone(),
                    n = U(1),
                    s = U(0),
                    o = U(0),
                    h = U(1);
                  0 != i.signum();

                ) {
                  for (; i.isEven(); )
                    i.rShiftTo(1, i),
                      e
                        ? ((n.isEven() && s.isEven()) ||
                            (n.addTo(this, n), s.subTo(t, s)),
                          n.rShiftTo(1, n))
                        : s.isEven() || s.subTo(t, s),
                      s.rShiftTo(1, s);
                  for (; r.isEven(); )
                    r.rShiftTo(1, r),
                      e
                        ? ((o.isEven() && h.isEven()) ||
                            (o.addTo(this, o), h.subTo(t, h)),
                          o.rShiftTo(1, o))
                        : h.isEven() || h.subTo(t, h),
                      h.rShiftTo(1, h);
                  0 <= i.compareTo(r)
                    ? (i.subTo(r, i), e && n.subTo(o, n), s.subTo(h, s))
                    : (r.subTo(i, r), e && o.subTo(n, o), h.subTo(s, h));
                }
                return 0 != r.compareTo(b.ONE)
                  ? b.ZERO
                  : 0 <= h.compareTo(t)
                  ? h.subtract(t)
                  : h.signum() < 0
                  ? (h.addTo(t, h), h.signum() < 0 ? h.add(t) : h)
                  : h;
              }),
              (b.prototype.pow = function (t) {
                return this.exp(t, new I());
              }),
              (b.prototype.gcd = function (t) {
                var e = this.s < 0 ? this.negate() : this.clone(),
                  i = t.s < 0 ? t.negate() : t.clone();
                if (e.compareTo(i) < 0) {
                  var r = e;
                  (e = i), (i = r);
                }
                var n = e.getLowestSetBit(),
                  s = i.getLowestSetBit();
                if (s < 0) return e;
                for (
                  n < s && (s = n),
                    0 < s && (e.rShiftTo(s, e), i.rShiftTo(s, i));
                  0 < e.signum();

                )
                  0 < (n = e.getLowestSetBit()) && e.rShiftTo(n, e),
                    0 < (n = i.getLowestSetBit()) && i.rShiftTo(n, i),
                    0 <= e.compareTo(i)
                      ? (e.subTo(i, e), e.rShiftTo(1, e))
                      : (i.subTo(e, i), i.rShiftTo(1, i));
                return 0 < s && i.lShiftTo(s, i), i;
              }),
              (b.prototype.isProbablePrime = function (t) {
                var e,
                  i = this.abs();
                if (1 == i.t && i[0] <= A[A.length - 1]) {
                  for (e = 0; e < A.length; ++e) if (i[0] == A[e]) return !0;
                  return !1;
                }
                if (i.isEven()) return !1;
                for (e = 1; e < A.length; ) {
                  for (var r = A[e], n = e + 1; n < A.length && r < O; )
                    r *= A[n++];
                  for (r = i.modInt(r); e < n; ) if (r % A[e++] == 0) return !1;
                }
                return i.millerRabin(t);
              }),
              (b.prototype.copyTo = function (t) {
                for (var e = this.t - 1; 0 <= e; --e) t[e] = this[e];
                (t.t = this.t), (t.s = this.s);
              }),
              (b.prototype.fromInt = function (t) {
                (this.t = 1),
                  (this.s = t < 0 ? -1 : 0),
                  0 < t
                    ? (this[0] = t)
                    : t < -1
                    ? (this[0] = t + this.DV)
                    : (this.t = 0);
              }),
              (b.prototype.fromString = function (t, e) {
                var i;
                if (16 == e) i = 4;
                else if (8 == e) i = 3;
                else if (256 == e) i = 8;
                else if (2 == e) i = 1;
                else if (32 == e) i = 5;
                else {
                  if (4 != e) return void this.fromRadix(t, e);
                  i = 2;
                }
                (this.t = 0), (this.s = 0);
                for (var r = t.length, n = !1, s = 0; 0 <= --r; ) {
                  var o = 8 == i ? 255 & +t[r] : F(t, r);
                  o < 0
                    ? "-" == t.charAt(r) && (n = !0)
                    : ((n = !1),
                      0 == s
                        ? (this[this.t++] = o)
                        : s + i > this.DB
                        ? ((this[this.t - 1] |=
                            (o & ((1 << (this.DB - s)) - 1)) << s),
                          (this[this.t++] = o >> (this.DB - s)))
                        : (this[this.t - 1] |= o << s),
                      (s += i) >= this.DB && (s -= this.DB));
                }
                8 == i &&
                  0 != (128 & +t[0]) &&
                  ((this.s = -1),
                  0 < s &&
                    (this[this.t - 1] |= ((1 << (this.DB - s)) - 1) << s)),
                  this.clamp(),
                  n && b.ZERO.subTo(this, this);
              }),
              (b.prototype.clamp = function () {
                for (
                  var t = this.s & this.DM;
                  0 < this.t && this[this.t - 1] == t;

                )
                  --this.t;
              }),
              (b.prototype.dlShiftTo = function (t, e) {
                var i;
                for (i = this.t - 1; 0 <= i; --i) e[i + t] = this[i];
                for (i = t - 1; 0 <= i; --i) e[i] = 0;
                (e.t = this.t + t), (e.s = this.s);
              }),
              (b.prototype.drShiftTo = function (t, e) {
                for (var i = t; i < this.t; ++i) e[i - t] = this[i];
                (e.t = Math.max(this.t - t, 0)), (e.s = this.s);
              }),
              (b.prototype.lShiftTo = function (t, e) {
                for (
                  var i = t % this.DB,
                    r = this.DB - i,
                    n = (1 << r) - 1,
                    s = Math.floor(t / this.DB),
                    o = (this.s << i) & this.DM,
                    h = this.t - 1;
                  0 <= h;
                  --h
                )
                  (e[h + s + 1] = (this[h] >> r) | o), (o = (this[h] & n) << i);
                for (h = s - 1; 0 <= h; --h) e[h] = 0;
                (e[s] = o), (e.t = this.t + s + 1), (e.s = this.s), e.clamp();
              }),
              (b.prototype.rShiftTo = function (t, e) {
                e.s = this.s;
                var i = Math.floor(t / this.DB);
                if (i >= this.t) e.t = 0;
                else {
                  var r = t % this.DB,
                    n = this.DB - r,
                    s = (1 << r) - 1;
                  e[0] = this[i] >> r;
                  for (var o = i + 1; o < this.t; ++o)
                    (e[o - i - 1] |= (this[o] & s) << n),
                      (e[o - i] = this[o] >> r);
                  0 < r && (e[this.t - i - 1] |= (this.s & s) << n),
                    (e.t = this.t - i),
                    e.clamp();
                }
              }),
              (b.prototype.subTo = function (t, e) {
                for (var i = 0, r = 0, n = Math.min(t.t, this.t); i < n; )
                  (r += this[i] - t[i]),
                    (e[i++] = r & this.DM),
                    (r >>= this.DB);
                if (t.t < this.t) {
                  for (r -= t.s; i < this.t; )
                    (r += this[i]), (e[i++] = r & this.DM), (r >>= this.DB);
                  r += this.s;
                } else {
                  for (r += this.s; i < t.t; )
                    (r -= t[i]), (e[i++] = r & this.DM), (r >>= this.DB);
                  r -= t.s;
                }
                (e.s = r < 0 ? -1 : 0),
                  r < -1 ? (e[i++] = this.DV + r) : 0 < r && (e[i++] = r),
                  (e.t = i),
                  e.clamp();
              }),
              (b.prototype.multiplyTo = function (t, e) {
                var i = this.abs(),
                  r = t.abs(),
                  n = i.t;
                for (e.t = n + r.t; 0 <= --n; ) e[n] = 0;
                for (n = 0; n < r.t; ++n)
                  e[n + i.t] = i.am(0, r[n], e, n, 0, i.t);
                (e.s = 0), e.clamp(), this.s != t.s && b.ZERO.subTo(e, e);
              }),
              (b.prototype.squareTo = function (t) {
                for (var e = this.abs(), i = (t.t = 2 * e.t); 0 <= --i; )
                  t[i] = 0;
                for (i = 0; i < e.t - 1; ++i) {
                  var r = e.am(i, e[i], t, 2 * i, 0, 1);
                  (t[i + e.t] += e.am(
                    i + 1,
                    2 * e[i],
                    t,
                    2 * i + 1,
                    r,
                    e.t - i - 1
                  )) >= e.DV && ((t[i + e.t] -= e.DV), (t[i + e.t + 1] = 1));
                }
                0 < t.t && (t[t.t - 1] += e.am(i, e[i], t, 2 * i, 0, 1)),
                  (t.s = 0),
                  t.clamp();
              }),
              (b.prototype.divRemTo = function (t, e, i) {
                var r = t.abs();
                if (!(r.t <= 0)) {
                  var n = this.abs();
                  if (n.t < r.t)
                    return (
                      null != e && e.fromInt(0),
                      void (null != i && this.copyTo(i))
                    );
                  null == i && (i = L());
                  var s = L(),
                    o = this.s,
                    h = t.s,
                    a = this.DB - K(r[r.t - 1]);
                  0 < a
                    ? (r.lShiftTo(a, s), n.lShiftTo(a, i))
                    : (r.copyTo(s), n.copyTo(i));
                  var u = s.t,
                    c = s[u - 1];
                  if (0 != c) {
                    var f =
                        c * (1 << this.F1) + (1 < u ? s[u - 2] >> this.F2 : 0),
                      l = this.FV / f,
                      p = (1 << this.F1) / f,
                      g = 1 << this.F2,
                      d = i.t,
                      v = d - u,
                      m = null == e ? L() : e;
                    for (
                      s.dlShiftTo(v, m),
                        0 <= i.compareTo(m) && ((i[i.t++] = 1), i.subTo(m, i)),
                        b.ONE.dlShiftTo(u, m),
                        m.subTo(s, s);
                      s.t < u;

                    )
                      s[s.t++] = 0;
                    for (; 0 <= --v; ) {
                      var y =
                        i[--d] == c
                          ? this.DM
                          : Math.floor(i[d] * l + (i[d - 1] + g) * p);
                      if ((i[d] += s.am(0, y, i, v, 0, u)) < y)
                        for (s.dlShiftTo(v, m), i.subTo(m, i); i[d] < --y; )
                          i.subTo(m, i);
                    }
                    null != e &&
                      (i.drShiftTo(u, e), o != h && b.ZERO.subTo(e, e)),
                      (i.t = u),
                      i.clamp(),
                      0 < a && i.rShiftTo(a, i),
                      o < 0 && b.ZERO.subTo(i, i);
                  }
                }
              }),
              (b.prototype.invDigit = function () {
                if (this.t < 1) return 0;
                var t = this[0];
                if (0 == (1 & t)) return 0;
                var e = 3 & t;
                return 0 <
                  (e =
                    ((e =
                      ((e =
                        ((e = (e * (2 - (15 & t) * e)) & 15) *
                          (2 - (255 & t) * e)) &
                        255) *
                        (2 - (((65535 & t) * e) & 65535))) &
                      65535) *
                      (2 - ((t * e) % this.DV))) %
                    this.DV)
                  ? this.DV - e
                  : -e;
              }),
              (b.prototype.isEven = function () {
                return 0 == (0 < this.t ? 1 & this[0] : this.s);
              }),
              (b.prototype.exp = function (t, e) {
                if (4294967295 < t || t < 1) return b.ONE;
                var i = L(),
                  r = L(),
                  n = e.convert(this),
                  s = K(t) - 1;
                for (n.copyTo(i); 0 <= --s; )
                  if ((e.sqrTo(i, r), 0 < (t & (1 << s)))) e.mulTo(r, n, i);
                  else {
                    var o = i;
                    (i = r), (r = o);
                  }
                return e.revert(i);
              }),
              (b.prototype.chunkSize = function (t) {
                return Math.floor((Math.LN2 * this.DB) / Math.log(t));
              }),
              (b.prototype.toRadix = function (t) {
                if (
                  (null == t && (t = 10), 0 == this.signum() || t < 2 || 36 < t)
                )
                  return "0";
                var e = this.chunkSize(t),
                  i = Math.pow(t, e),
                  r = U(i),
                  n = L(),
                  s = L(),
                  o = "";
                for (this.divRemTo(r, n, s); 0 < n.signum(); )
                  (o = (i + s.intValue()).toString(t).substr(1) + o),
                    n.divRemTo(r, n, s);
                return s.intValue().toString(t) + o;
              }),
              (b.prototype.fromRadix = function (t, e) {
                this.fromInt(0), null == e && (e = 10);
                for (
                  var i = this.chunkSize(e),
                    r = Math.pow(e, i),
                    n = !1,
                    s = 0,
                    o = 0,
                    h = 0;
                  h < t.length;
                  ++h
                ) {
                  var a = F(t, h);
                  a < 0
                    ? "-" == t.charAt(h) && 0 == this.signum() && (n = !0)
                    : ((o = e * o + a),
                      ++s >= i &&
                        (this.dMultiply(r),
                        this.dAddOffset(o, 0),
                        (o = s = 0)));
                }
                0 < s &&
                  (this.dMultiply(Math.pow(e, s)), this.dAddOffset(o, 0)),
                  n && b.ZERO.subTo(this, this);
              }),
              (b.prototype.fromNumber = function (t, e, i) {
                if ("number" == typeof e)
                  if (t < 2) this.fromInt(1);
                  else
                    for (
                      this.fromNumber(t, i),
                        this.testBit(t - 1) ||
                          this.bitwiseTo(b.ONE.shiftLeft(t - 1), u, this),
                        this.isEven() && this.dAddOffset(1, 0);
                      !this.isProbablePrime(e);

                    )
                      this.dAddOffset(2, 0),
                        this.bitLength() > t &&
                          this.subTo(b.ONE.shiftLeft(t - 1), this);
                else {
                  var r = [],
                    n = 7 & t;
                  (r.length = 1 + (t >> 3)),
                    e.nextBytes(r),
                    0 < n ? (r[0] &= (1 << n) - 1) : (r[0] = 0),
                    this.fromString(r, 256);
                }
              }),
              (b.prototype.bitwiseTo = function (t, e, i) {
                var r,
                  n,
                  s = Math.min(t.t, this.t);
                for (r = 0; r < s; ++r) i[r] = e(this[r], t[r]);
                if (t.t < this.t) {
                  for (n = t.s & this.DM, r = s; r < this.t; ++r)
                    i[r] = e(this[r], n);
                  i.t = this.t;
                } else {
                  for (n = this.s & this.DM, r = s; r < t.t; ++r)
                    i[r] = e(n, t[r]);
                  i.t = t.t;
                }
                (i.s = e(this.s, t.s)), i.clamp();
              }),
              (b.prototype.changeBit = function (t, e) {
                var i = b.ONE.shiftLeft(t);
                return this.bitwiseTo(i, e, i), i;
              }),
              (b.prototype.addTo = function (t, e) {
                for (var i = 0, r = 0, n = Math.min(t.t, this.t); i < n; )
                  (r += this[i] + t[i]),
                    (e[i++] = r & this.DM),
                    (r >>= this.DB);
                if (t.t < this.t) {
                  for (r += t.s; i < this.t; )
                    (r += this[i]), (e[i++] = r & this.DM), (r >>= this.DB);
                  r += this.s;
                } else {
                  for (r += this.s; i < t.t; )
                    (r += t[i]), (e[i++] = r & this.DM), (r >>= this.DB);
                  r += t.s;
                }
                (e.s = r < 0 ? -1 : 0),
                  0 < r ? (e[i++] = r) : r < -1 && (e[i++] = this.DV + r),
                  (e.t = i),
                  e.clamp();
              }),
              (b.prototype.dMultiply = function (t) {
                (this[this.t] = this.am(0, t - 1, this, 0, 0, this.t)),
                  ++this.t,
                  this.clamp();
              }),
              (b.prototype.dAddOffset = function (t, e) {
                if (0 != t) {
                  for (; this.t <= e; ) this[this.t++] = 0;
                  for (this[e] += t; this[e] >= this.DV; )
                    (this[e] -= this.DV),
                      ++e >= this.t && (this[this.t++] = 0),
                      ++this[e];
                }
              }),
              (b.prototype.multiplyLowerTo = function (t, e, i) {
                var r = Math.min(this.t + t.t, e);
                for (i.s = 0, i.t = r; 0 < r; ) i[--r] = 0;
                for (var n = i.t - this.t; r < n; ++r)
                  i[r + this.t] = this.am(0, t[r], i, r, 0, this.t);
                for (n = Math.min(t.t, e); r < n; ++r)
                  this.am(0, t[r], i, r, 0, e - r);
                i.clamp();
              }),
              (b.prototype.multiplyUpperTo = function (t, e, i) {
                --e;
                var r = (i.t = this.t + t.t - e);
                for (i.s = 0; 0 <= --r; ) i[r] = 0;
                for (r = Math.max(e - this.t, 0); r < t.t; ++r)
                  i[this.t + r - e] = this.am(
                    e - r,
                    t[r],
                    i,
                    0,
                    0,
                    this.t + r - e
                  );
                i.clamp(), i.drShiftTo(1, i);
              }),
              (b.prototype.modInt = function (t) {
                if (t <= 0) return 0;
                var e = this.DV % t,
                  i = this.s < 0 ? t - 1 : 0;
                if (0 < this.t)
                  if (0 == e) i = this[0] % t;
                  else
                    for (var r = this.t - 1; 0 <= r; --r)
                      i = (e * i + this[r]) % t;
                return i;
              }),
              (b.prototype.millerRabin = function (t) {
                var e = this.subtract(b.ONE),
                  i = e.getLowestSetBit();
                if (i <= 0) return !1;
                var r = e.shiftRight(i);
                A.length < (t = (t + 1) >> 1) && (t = A.length);
                for (var n = L(), s = 0; s < t; ++s) {
                  n.fromInt(A[Math.floor(Math.random() * A.length)]);
                  var o = n.modPow(r, this);
                  if (0 != o.compareTo(b.ONE) && 0 != o.compareTo(e)) {
                    for (var h = 1; h++ < i && 0 != o.compareTo(e); )
                      if (0 == (o = o.modPowInt(2, this)).compareTo(b.ONE))
                        return !1;
                    if (0 != o.compareTo(e)) return !1;
                  }
                }
                return !0;
              }),
              (b.prototype.square = function () {
                var t = L();
                return this.squareTo(t), t;
              }),
              (b.prototype.gcda = function (t, e) {
                var i = this.s < 0 ? this.negate() : this.clone(),
                  r = t.s < 0 ? t.negate() : t.clone();
                if (i.compareTo(r) < 0) {
                  var n = i;
                  (i = r), (r = n);
                }
                var s = i.getLowestSetBit(),
                  o = r.getLowestSetBit();
                if (o < 0) e(i);
                else {
                  s < o && (o = s),
                    0 < o && (i.rShiftTo(o, i), r.rShiftTo(o, r));
                  var h = function () {
                    0 < (s = i.getLowestSetBit()) && i.rShiftTo(s, i),
                      0 < (s = r.getLowestSetBit()) && r.rShiftTo(s, r),
                      0 <= i.compareTo(r)
                        ? (i.subTo(r, i), i.rShiftTo(1, i))
                        : (r.subTo(i, r), r.rShiftTo(1, r)),
                      0 < i.signum()
                        ? setTimeout(h, 0)
                        : (0 < o && r.lShiftTo(o, r),
                          setTimeout(function () {
                            e(r);
                          }, 0));
                  };
                  setTimeout(h, 10);
                }
              }),
              (b.prototype.fromNumberAsync = function (t, e, i, r) {
                if ("number" == typeof e)
                  if (t < 2) this.fromInt(1);
                  else {
                    this.fromNumber(t, i),
                      this.testBit(t - 1) ||
                        this.bitwiseTo(b.ONE.shiftLeft(t - 1), u, this),
                      this.isEven() && this.dAddOffset(1, 0);
                    var n = this,
                      s = function () {
                        n.dAddOffset(2, 0),
                          n.bitLength() > t &&
                            n.subTo(b.ONE.shiftLeft(t - 1), n),
                          n.isProbablePrime(e)
                            ? setTimeout(function () {
                                r();
                              }, 0)
                            : setTimeout(s, 0);
                      };
                    setTimeout(s, 0);
                  }
                else {
                  var o = [],
                    h = 7 & t;
                  (o.length = 1 + (t >> 3)),
                    e.nextBytes(o),
                    0 < h ? (o[0] &= (1 << h) - 1) : (o[0] = 0),
                    this.fromString(o, 256);
                }
              }),
              b
            );
          })(),
          I = (function () {
            function t() {}
            return (
              (t.prototype.convert = function (t) {
                return t;
              }),
              (t.prototype.revert = function (t) {
                return t;
              }),
              (t.prototype.mulTo = function (t, e, i) {
                t.multiplyTo(e, i);
              }),
              (t.prototype.sqrTo = function (t, e) {
                t.squareTo(e);
              }),
              t
            );
          })(),
          N = (function () {
            function t(t) {
              this.m = t;
            }
            return (
              (t.prototype.convert = function (t) {
                return t.s < 0 || 0 <= t.compareTo(this.m) ? t.mod(this.m) : t;
              }),
              (t.prototype.revert = function (t) {
                return t;
              }),
              (t.prototype.reduce = function (t) {
                t.divRemTo(this.m, null, t);
              }),
              (t.prototype.mulTo = function (t, e, i) {
                t.multiplyTo(e, i), this.reduce(i);
              }),
              (t.prototype.sqrTo = function (t, e) {
                t.squareTo(e), this.reduce(e);
              }),
              t
            );
          })(),
          P = (function () {
            function t(t) {
              (this.m = t),
                (this.mp = t.invDigit()),
                (this.mpl = 32767 & this.mp),
                (this.mph = this.mp >> 15),
                (this.um = (1 << (t.DB - 15)) - 1),
                (this.mt2 = 2 * t.t);
            }
            return (
              (t.prototype.convert = function (t) {
                var e = L();
                return (
                  t.abs().dlShiftTo(this.m.t, e),
                  e.divRemTo(this.m, null, e),
                  t.s < 0 && 0 < e.compareTo(V.ZERO) && this.m.subTo(e, e),
                  e
                );
              }),
              (t.prototype.revert = function (t) {
                var e = L();
                return t.copyTo(e), this.reduce(e), e;
              }),
              (t.prototype.reduce = function (t) {
                for (; t.t <= this.mt2; ) t[t.t++] = 0;
                for (var e = 0; e < this.m.t; ++e) {
                  var i = 32767 & t[e],
                    r =
                      (i * this.mpl +
                        (((i * this.mph + (t[e] >> 15) * this.mpl) & this.um) <<
                          15)) &
                      t.DM;
                  for (
                    t[(i = e + this.m.t)] += this.m.am(0, r, t, e, 0, this.m.t);
                    t[i] >= t.DV;

                  )
                    (t[i] -= t.DV), t[++i]++;
                }
                t.clamp(),
                  t.drShiftTo(this.m.t, t),
                  0 <= t.compareTo(this.m) && t.subTo(this.m, t);
              }),
              (t.prototype.mulTo = function (t, e, i) {
                t.multiplyTo(e, i), this.reduce(i);
              }),
              (t.prototype.sqrTo = function (t, e) {
                t.squareTo(e), this.reduce(e);
              }),
              t
            );
          })(),
          M = (function () {
            function t(t) {
              (this.m = t),
                (this.r2 = L()),
                (this.q3 = L()),
                V.ONE.dlShiftTo(2 * t.t, this.r2),
                (this.mu = this.r2.divide(t));
            }
            return (
              (t.prototype.convert = function (t) {
                if (t.s < 0 || t.t > 2 * this.m.t) return t.mod(this.m);
                if (t.compareTo(this.m) < 0) return t;
                var e = L();
                return t.copyTo(e), this.reduce(e), e;
              }),
              (t.prototype.revert = function (t) {
                return t;
              }),
              (t.prototype.reduce = function (t) {
                for (
                  t.drShiftTo(this.m.t - 1, this.r2),
                    t.t > this.m.t + 1 && ((t.t = this.m.t + 1), t.clamp()),
                    this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3),
                    this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);
                  t.compareTo(this.r2) < 0;

                )
                  t.dAddOffset(1, this.m.t + 1);
                for (t.subTo(this.r2, t); 0 <= t.compareTo(this.m); )
                  t.subTo(this.m, t);
              }),
              (t.prototype.mulTo = function (t, e, i) {
                t.multiplyTo(e, i), this.reduce(i);
              }),
              (t.prototype.sqrTo = function (t, e) {
                t.squareTo(e), this.reduce(e);
              }),
              t
            );
          })();
        function L() {
          return new V(null);
        }
        function q(t, e) {
          return new V(t, e);
        }
        "Microsoft Internet Explorer" == navigator.appName
          ? ((V.prototype.am = function (t, e, i, r, n, s) {
              for (var o = 32767 & e, h = e >> 15; 0 <= --s; ) {
                var a = 32767 & this[t],
                  u = this[t++] >> 15,
                  c = h * a + u * o;
                (n =
                  ((a =
                    o * a + ((32767 & c) << 15) + i[r] + (1073741823 & n)) >>>
                    30) +
                  (c >>> 15) +
                  h * u +
                  (n >>> 30)),
                  (i[r++] = 1073741823 & a);
              }
              return n;
            }),
            (D = 30))
          : "Netscape" != navigator.appName
          ? ((V.prototype.am = function (t, e, i, r, n, s) {
              for (; 0 <= --s; ) {
                var o = e * this[t++] + i[r] + n;
                (n = Math.floor(o / 67108864)), (i[r++] = 67108863 & o);
              }
              return n;
            }),
            (D = 26))
          : ((V.prototype.am = function (t, e, i, r, n, s) {
              for (var o = 16383 & e, h = e >> 14; 0 <= --s; ) {
                var a = 16383 & this[t],
                  u = this[t++] >> 14,
                  c = h * a + u * o;
                (n =
                  ((a = o * a + ((16383 & c) << 14) + i[r] + n) >> 28) +
                  (c >> 14) +
                  h * u),
                  (i[r++] = 268435455 & a);
              }
              return n;
            }),
            (D = 28)),
          (V.prototype.DB = D),
          (V.prototype.DM = (1 << D) - 1),
          (V.prototype.DV = 1 << D);
        (V.prototype.FV = Math.pow(2, 52)),
          (V.prototype.F1 = 52 - D),
          (V.prototype.F2 = 2 * D - 52);
        var j,
          H,
          C = [];
        for (j = "0".charCodeAt(0), H = 0; H <= 9; ++H) C[j++] = H;
        for (j = "a".charCodeAt(0), H = 10; H < 36; ++H) C[j++] = H;
        for (j = "A".charCodeAt(0), H = 10; H < 36; ++H) C[j++] = H;
        function F(t, e) {
          var i = C[t.charCodeAt(e)];
          return null == i ? -1 : i;
        }
        function U(t) {
          var e = L();
          return e.fromInt(t), e;
        }
        function K(t) {
          var e,
            i = 1;
          return (
            0 != (e = t >>> 16) && ((t = e), (i += 16)),
            0 != (e = t >> 8) && ((t = e), (i += 8)),
            0 != (e = t >> 4) && ((t = e), (i += 4)),
            0 != (e = t >> 2) && ((t = e), (i += 2)),
            0 != (e = t >> 1) && ((t = e), (i += 1)),
            i
          );
        }
        (V.ZERO = U(0)), (V.ONE = U(1));
        var k = (function () {
          function t() {
            (this.i = 0), (this.j = 0), (this.S = []);
          }
          return (
            (t.prototype.init = function (t) {
              var e, i, r;
              for (e = 0; e < 256; ++e) this.S[e] = e;
              for (e = i = 0; e < 256; ++e)
                (i = (i + this.S[e] + t[e % t.length]) & 255),
                  (r = this.S[e]),
                  (this.S[e] = this.S[i]),
                  (this.S[i] = r);
              (this.i = 0), (this.j = 0);
            }),
            (t.prototype.next = function () {
              var t;
              return (
                (this.i = (this.i + 1) & 255),
                (this.j = (this.j + this.S[this.i]) & 255),
                (t = this.S[this.i]),
                (this.S[this.i] = this.S[this.j]),
                (this.S[this.j] = t),
                this.S[(t + this.S[this.i]) & 255]
              );
            }),
            t
          );
        })();
        var _,
          z,
          Z = 256,
          G = null;
        if (null == G) {
          G = [];
          var $ = void (z = 0);
          if (window.crypto && window.crypto.getRandomValues) {
            var Y = new Uint32Array(256);
            for (window.crypto.getRandomValues(Y), $ = 0; $ < Y.length; ++$)
              G[z++] = 255 & Y[$];
          }
          var J = function (t) {
            if (((this.count = this.count || 0), 256 <= this.count || Z <= z))
              window.removeEventListener
                ? window.removeEventListener("mousemove", J, !1)
                : window.detachEvent && window.detachEvent("onmousemove", J);
            else
              try {
                var e = t.x + t.y;
                (G[z++] = 255 & e), (this.count += 1);
              } catch (t) {}
          };
          window.addEventListener
            ? window.addEventListener("mousemove", J, !1)
            : window.attachEvent && window.attachEvent("onmousemove", J);
        }
        function X() {
          if (null == _) {
            for (_ = new k(); z < Z; ) {
              var t = Math.floor(65536 * Math.random());
              G[z++] = 255 & t;
            }
            for (_.init(G), z = 0; z < G.length; ++z) G[z] = 0;
            z = 0;
          }
          return _.next();
        }
        var Q = (function () {
          function t() {}
          return (
            (t.prototype.nextBytes = function (t) {
              for (var e = 0; e < t.length; ++e) t[e] = X();
            }),
            t
          );
        })();
        var W = (function () {
          function t() {
            (this.n = null),
              (this.e = 0),
              (this.d = null),
              (this.p = null),
              (this.q = null),
              (this.dmp1 = null),
              (this.dmq1 = null),
              (this.coeff = null);
          }
          return (
            (t.prototype.doPublic = function (t) {
              return t.modPowInt(this.e, this.n);
            }),
            (t.prototype.doPrivate = function (t) {
              if (null == this.p || null == this.q)
                return t.modPow(this.d, this.n);
              for (
                var e = t.mod(this.p).modPow(this.dmp1, this.p),
                  i = t.mod(this.q).modPow(this.dmq1, this.q);
                e.compareTo(i) < 0;

              )
                e = e.add(this.p);
              return e
                .subtract(i)
                .multiply(this.coeff)
                .mod(this.p)
                .multiply(this.q)
                .add(i);
            }),
            (t.prototype.setPublic = function (t, e) {
              null != t && null != e && 0 < t.length && 0 < e.length
                ? ((this.n = q(t, 16)), (this.e = parseInt(e, 16)))
                : console.error("Invalid RSA public key");
            }),
            (t.prototype.encrypt = function (t) {
              var e = (function (t, e) {
                if (e < t.length + 11)
                  return console.error("Message too long for RSA"), null;
                for (var i = [], r = t.length - 1; 0 <= r && 0 < e; ) {
                  var n = t.charCodeAt(r--);
                  n < 128
                    ? (i[--e] = n)
                    : 127 < n && n < 2048
                    ? ((i[--e] = (63 & n) | 128), (i[--e] = (n >> 6) | 192))
                    : ((i[--e] = (63 & n) | 128),
                      (i[--e] = ((n >> 6) & 63) | 128),
                      (i[--e] = (n >> 12) | 224));
                }
                i[--e] = 0;
                for (var s = new Q(), o = []; 2 < e; ) {
                  for (o[0] = 0; 0 == o[0]; ) s.nextBytes(o);
                  i[--e] = o[0];
                }
                return (i[--e] = 2), (i[--e] = 0), new V(i);
              })(t, (this.n.bitLength() + 7) >> 3);
              if (null == e) return null;
              var i = this.doPublic(e);
              if (null == i) return null;
              var r = i.toString(16);
              return 0 == (1 & r.length) ? r : "0" + r;
            }),
            (t.prototype.encryptLong = function (t) {
              var e = "",
                i = new Array();
              i.push(0);
              for (var r, n = 0, s = t.length, o = 0, h = 0; h < s; h++)
                (114 <=
                  (n +=
                    65536 <= (r = t.charCodeAt(h)) && r <= 1114111
                      ? 4
                      : 2048 <= r && r <= 65535
                      ? 3
                      : 128 <= r && r <= 2047
                      ? 2
                      : 1) %
                    117 ||
                  n % 117 == 0) &&
                  114 <= n - o &&
                  (i.push(h), (o = n));
              if (1 < i.length) {
                for (h = 0; h < i.length - 1; h++) {
                  var a = void 0;
                  (a =
                    0 == h
                      ? t.substring(0, i[h + 1] + 1)
                      : t.substring(i[h] + 1, i[h + 1] + 1)),
                    (e += this.encrypt(a));
                }
                if (i[i.length - 1] != t.length - 1) {
                  var u = t.substring(i[i.length - 1] + 1);
                  e += this.encrypt(u);
                }
                return e;
              }
              return this.encrypt(t);
            }),
            (t.prototype.setPrivate = function (t, e, i) {
              null != t && null != e && 0 < t.length && 0 < e.length
                ? ((this.n = q(t, 16)),
                  (this.e = parseInt(e, 16)),
                  (this.d = q(i, 16)))
                : console.error("Invalid RSA private key");
            }),
            (t.prototype.setPrivateEx = function (t, e, i, r, n, s, o, h) {
              null != t && null != e && 0 < t.length && 0 < e.length
                ? ((this.n = q(t, 16)),
                  (this.e = parseInt(e, 16)),
                  (this.d = q(i, 16)),
                  (this.p = q(r, 16)),
                  (this.q = q(n, 16)),
                  (this.dmp1 = q(s, 16)),
                  (this.dmq1 = q(o, 16)),
                  (this.coeff = q(h, 16)))
                : console.error("Invalid RSA private key");
            }),
            (t.prototype.generate = function (t, e) {
              var i = new Q(),
                r = t >> 1;
              this.e = parseInt(e, 16);
              for (var n = new V(e, 16); ; ) {
                for (
                  ;
                  (this.p = new V(t - r, 1, i)),
                    0 != this.p.subtract(V.ONE).gcd(n).compareTo(V.ONE) ||
                      !this.p.isProbablePrime(10);

                );
                for (
                  ;
                  (this.q = new V(r, 1, i)),
                    0 != this.q.subtract(V.ONE).gcd(n).compareTo(V.ONE) ||
                      !this.q.isProbablePrime(10);

                );
                if (this.p.compareTo(this.q) <= 0) {
                  var s = this.p;
                  (this.p = this.q), (this.q = s);
                }
                var o = this.p.subtract(V.ONE),
                  h = this.q.subtract(V.ONE),
                  a = o.multiply(h);
                if (0 == a.gcd(n).compareTo(V.ONE)) {
                  (this.n = this.p.multiply(this.q)),
                    (this.d = n.modInverse(a)),
                    (this.dmp1 = this.d.mod(o)),
                    (this.dmq1 = this.d.mod(h)),
                    (this.coeff = this.q.modInverse(this.p));
                  break;
                }
              }
            }),
            (t.prototype.decrypt = function (t) {
              var e = q(t, 16),
                i = this.doPrivate(e);
              return null == i
                ? null
                : (function (t, e) {
                    var i = t.toByteArray(),
                      r = 0;
                    for (; r < i.length && 0 == i[r]; ) ++r;
                    if (i.length - r != e - 1 || 2 != i[r]) return null;
                    ++r;
                    for (; 0 != i[r]; ) if (++r >= i.length) return null;
                    var n = "";
                    for (; ++r < i.length; ) {
                      var s = 255 & i[r];
                      s < 128
                        ? (n += String.fromCharCode(s))
                        : 191 < s && s < 224
                        ? ((n += String.fromCharCode(
                            ((31 & s) << 6) | (63 & i[r + 1])
                          )),
                          ++r)
                        : ((n += String.fromCharCode(
                            ((15 & s) << 12) |
                              ((63 & i[r + 1]) << 6) |
                              (63 & i[r + 2])
                          )),
                          (r += 2));
                    }
                    return n;
                  })(i, (this.n.bitLength() + 7) >> 3);
            }),
            (t.prototype.decryptLong = function (t) {
              var i = this,
                e = (this.n.bitLength() + 7) >> 3;
              try {
                if (t.length > e) {
                  var r = "";
                  return (
                    t.match(/.{1,256}/g).forEach(function (t) {
                      var e = i.decrypt(t);
                      r += e;
                    }),
                    r
                  );
                }
                return this.decrypt(t);
              } catch (t) {
                return !1;
              }
            }),
            (t.prototype.generateAsync = function (t, e, n) {
              var s = new Q(),
                o = t >> 1;
              this.e = parseInt(e, 16);
              var h = new V(e, 16),
                a = this,
                u = function () {
                  var e = function () {
                      if (a.p.compareTo(a.q) <= 0) {
                        var t = a.p;
                        (a.p = a.q), (a.q = t);
                      }
                      var e = a.p.subtract(V.ONE),
                        i = a.q.subtract(V.ONE),
                        r = e.multiply(i);
                      0 == r.gcd(h).compareTo(V.ONE)
                        ? ((a.n = a.p.multiply(a.q)),
                          (a.d = h.modInverse(r)),
                          (a.dmp1 = a.d.mod(e)),
                          (a.dmq1 = a.d.mod(i)),
                          (a.coeff = a.q.modInverse(a.p)),
                          setTimeout(function () {
                            n();
                          }, 0))
                        : setTimeout(u, 0);
                    },
                    i = function () {
                      (a.q = L()),
                        a.q.fromNumberAsync(o, 1, s, function () {
                          a.q.subtract(V.ONE).gcda(h, function (t) {
                            0 == t.compareTo(V.ONE) && a.q.isProbablePrime(10)
                              ? setTimeout(e, 0)
                              : setTimeout(i, 0);
                          });
                        });
                    },
                    r = function () {
                      (a.p = L()),
                        a.p.fromNumberAsync(t - o, 1, s, function () {
                          a.p.subtract(V.ONE).gcda(h, function (t) {
                            0 == t.compareTo(V.ONE) && a.p.isProbablePrime(10)
                              ? setTimeout(i, 0)
                              : setTimeout(r, 0);
                          });
                        });
                    };
                  setTimeout(r, 0);
                };
              setTimeout(u, 0);
            }),
            t
          );
        })();
        var tt = {};
        tt.lang = {
          extend: function (t, e, i) {
            if (!e || !t)
              throw new Error(
                "YAHOO.lang.extend failed, please check that all dependencies are included."
              );
            var r = function () {};
            if (
              ((r.prototype = e.prototype),
              (t.prototype = new r()),
              ((t.prototype.constructor = t).superclass = e.prototype),
              e.prototype.constructor == Object.prototype.constructor &&
                (e.prototype.constructor = e),
              i)
            ) {
              var n;
              for (n in i) t.prototype[n] = i[n];
              var s = function () {},
                o = ["toString", "valueOf"];
              try {
                /MSIE/.test(navigator.userAgent) &&
                  (s = function (t, e) {
                    for (n = 0; n < o.length; n += 1) {
                      var i = o[n],
                        r = e[i];
                      "function" == typeof r &&
                        r != Object.prototype[i] &&
                        (t[i] = r);
                    }
                  });
              } catch (t) {}
              s(t.prototype, i);
            }
          },
        };
        var et = {};
        (void 0 !== et.asn1 && et.asn1) || (et.asn1 = {}),
          (et.asn1.ASN1Util = new (function () {
            (this.integerToByteHex = function (t) {
              var e = t.toString(16);
              return e.length % 2 == 1 && (e = "0" + e), e;
            }),
              (this.bigIntToMinTwosComplementsHex = function (t) {
                var e = t.toString(16);
                if ("-" != e.substr(0, 1))
                  e.length % 2 == 1
                    ? (e = "0" + e)
                    : e.match(/^[0-7]/) || (e = "00" + e);
                else {
                  var i = e.substr(1).length;
                  i % 2 == 1 ? (i += 1) : e.match(/^[0-7]/) || (i += 2);
                  for (var r = "", n = 0; n < i; n++) r += "f";
                  e = new V(r, 16)
                    .xor(t)
                    .add(V.ONE)
                    .toString(16)
                    .replace(/^-/, "");
                }
                return e;
              }),
              (this.getPEMStringFromHex = function (t, e) {
                return hextopem(t, e);
              }),
              (this.newObject = function (t) {
                var e = et.asn1,
                  i = e.DERBoolean,
                  r = e.DERInteger,
                  n = e.DERBitString,
                  s = e.DEROctetString,
                  o = e.DERNull,
                  h = e.DERObjectIdentifier,
                  a = e.DEREnumerated,
                  u = e.DERUTF8String,
                  c = e.DERNumericString,
                  f = e.DERPrintableString,
                  l = e.DERTeletexString,
                  p = e.DERIA5String,
                  g = e.DERUTCTime,
                  d = e.DERGeneralizedTime,
                  v = e.DERSequence,
                  m = e.DERSet,
                  y = e.DERTaggedObject,
                  b = e.ASN1Util.newObject,
                  T = Object.keys(t);
                if (1 != T.length) throw "key of param shall be only one.";
                var S = T[0];
                if (
                  -1 ==
                  ":bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:seq:set:tag:".indexOf(
                    ":" + S + ":"
                  )
                )
                  throw "undefined key: " + S;
                if ("bool" == S) return new i(t[S]);
                if ("int" == S) return new r(t[S]);
                if ("bitstr" == S) return new n(t[S]);
                if ("octstr" == S) return new s(t[S]);
                if ("null" == S) return new o(t[S]);
                if ("oid" == S) return new h(t[S]);
                if ("enum" == S) return new a(t[S]);
                if ("utf8str" == S) return new u(t[S]);
                if ("numstr" == S) return new c(t[S]);
                if ("prnstr" == S) return new f(t[S]);
                if ("telstr" == S) return new l(t[S]);
                if ("ia5str" == S) return new p(t[S]);
                if ("utctime" == S) return new g(t[S]);
                if ("gentime" == S) return new d(t[S]);
                if ("seq" == S) {
                  for (var E = t[S], w = [], D = 0; D < E.length; D++) {
                    var x = b(E[D]);
                    w.push(x);
                  }
                  return new v({ array: w });
                }
                if ("set" == S) {
                  for (E = t[S], w = [], D = 0; D < E.length; D++) {
                    x = b(E[D]);
                    w.push(x);
                  }
                  return new m({ array: w });
                }
                if ("tag" == S) {
                  var R = t[S];
                  if (
                    "[object Array]" === Object.prototype.toString.call(R) &&
                    3 == R.length
                  ) {
                    var B = b(R[2]);
                    return new y({ tag: R[0], explicit: R[1], obj: B });
                  }
                  var A = {};
                  if (
                    (void 0 !== R.explicit && (A.explicit = R.explicit),
                    void 0 !== R.tag && (A.tag = R.tag),
                    void 0 === R.obj)
                  )
                    throw "obj shall be specified for 'tag'.";
                  return (A.obj = b(R.obj)), new y(A);
                }
              }),
              (this.jsonToASN1HEX = function (t) {
                return this.newObject(t).getEncodedHex();
              });
          })()),
          (et.asn1.ASN1Util.oidHexToInt = function (t) {
            for (
              var e = "",
                i = parseInt(t.substr(0, 2), 16),
                r = ((e = Math.floor(i / 40) + "." + (i % 40)), ""),
                n = 2;
              n < t.length;
              n += 2
            ) {
              var s = (
                "00000000" + parseInt(t.substr(n, 2), 16).toString(2)
              ).slice(-8);
              if (((r += s.substr(1, 7)), "0" == s.substr(0, 1)))
                (e = e + "." + new V(r, 2).toString(10)), (r = "");
            }
            return e;
          }),
          (et.asn1.ASN1Util.oidIntToHex = function (t) {
            var h = function (t) {
                var e = t.toString(16);
                return 1 == e.length && (e = "0" + e), e;
              },
              e = function (t) {
                var e = "",
                  i = new V(t, 10).toString(2),
                  r = 7 - (i.length % 7);
                7 == r && (r = 0);
                for (var n = "", s = 0; s < r; s++) n += "0";
                i = n + i;
                for (s = 0; s < i.length - 1; s += 7) {
                  var o = i.substr(s, 7);
                  s != i.length - 7 && (o = "1" + o), (e += h(parseInt(o, 2)));
                }
                return e;
              };
            if (!t.match(/^[0-9.]+$/)) throw "malformed oid string: " + t;
            var i = "",
              r = t.split("."),
              n = 40 * parseInt(r[0]) + parseInt(r[1]);
            (i += h(n)), r.splice(0, 2);
            for (var s = 0; s < r.length; s++) i += e(r[s]);
            return i;
          }),
          (et.asn1.ASN1Object = function () {
            (this.getLengthHexFromValue = function () {
              if (void 0 === this.hV || null == this.hV)
                throw "this.hV is null or undefined.";
              if (this.hV.length % 2 == 1)
                throw (
                  "value hex must be even length: n=" +
                  "".length +
                  ",v=" +
                  this.hV
                );
              var t = this.hV.length / 2,
                e = t.toString(16);
              if ((e.length % 2 == 1 && (e = "0" + e), t < 128)) return e;
              var i = e.length / 2;
              if (15 < i)
                throw (
                  "ASN.1 length too long to represent by 8x: n = " +
                  t.toString(16)
                );
              return (128 + i).toString(16) + e;
            }),
              (this.getEncodedHex = function () {
                return (
                  (null == this.hTLV || this.isModified) &&
                    ((this.hV = this.getFreshValueHex()),
                    (this.hL = this.getLengthHexFromValue()),
                    (this.hTLV = this.hT + this.hL + this.hV),
                    (this.isModified = !1)),
                  this.hTLV
                );
              }),
              (this.getValueHex = function () {
                return this.getEncodedHex(), this.hV;
              }),
              (this.getFreshValueHex = function () {
                return "";
              });
          }),
          (et.asn1.DERAbstractString = function (t) {
            et.asn1.DERAbstractString.superclass.constructor.call(this),
              (this.getString = function () {
                return this.s;
              }),
              (this.setString = function (t) {
                (this.hTLV = null),
                  (this.isModified = !0),
                  (this.s = t),
                  (this.hV = stohex(this.s));
              }),
              (this.setStringHex = function (t) {
                (this.hTLV = null),
                  (this.isModified = !0),
                  (this.s = null),
                  (this.hV = t);
              }),
              (this.getFreshValueHex = function () {
                return this.hV;
              }),
              void 0 !== t &&
                ("string" == typeof t
                  ? this.setString(t)
                  : void 0 !== t.str
                  ? this.setString(t.str)
                  : void 0 !== t.hex && this.setStringHex(t.hex));
          }),
          tt.lang.extend(et.asn1.DERAbstractString, et.asn1.ASN1Object),
          (et.asn1.DERAbstractTime = function (t) {
            et.asn1.DERAbstractTime.superclass.constructor.call(this),
              (this.localDateToUTC = function (t) {
                return (
                  (utc = t.getTime() + 6e4 * t.getTimezoneOffset()),
                  new Date(utc)
                );
              }),
              (this.formatDate = function (t, e, i) {
                var r = this.zeroPadding,
                  n = this.localDateToUTC(t),
                  s = String(n.getFullYear());
                "utc" == e && (s = s.substr(2, 2));
                var o =
                  s +
                  r(String(n.getMonth() + 1), 2) +
                  r(String(n.getDate()), 2) +
                  r(String(n.getHours()), 2) +
                  r(String(n.getMinutes()), 2) +
                  r(String(n.getSeconds()), 2);
                if (!0 === i) {
                  var h = n.getMilliseconds();
                  if (0 != h) {
                    var a = r(String(h), 3);
                    o = o + "." + (a = a.replace(/[0]+$/, ""));
                  }
                }
                return o + "Z";
              }),
              (this.zeroPadding = function (t, e) {
                return t.length >= e
                  ? t
                  : new Array(e - t.length + 1).join("0") + t;
              }),
              (this.getString = function () {
                return this.s;
              }),
              (this.setString = function (t) {
                (this.hTLV = null),
                  (this.isModified = !0),
                  (this.s = t),
                  (this.hV = stohex(t));
              }),
              (this.setByDateValue = function (t, e, i, r, n, s) {
                var o = new Date(Date.UTC(t, e - 1, i, r, n, s, 0));
                this.setByDate(o);
              }),
              (this.getFreshValueHex = function () {
                return this.hV;
              });
          }),
          tt.lang.extend(et.asn1.DERAbstractTime, et.asn1.ASN1Object),
          (et.asn1.DERAbstractStructured = function (t) {
            et.asn1.DERAbstractString.superclass.constructor.call(this),
              (this.setByASN1ObjectArray = function (t) {
                (this.hTLV = null),
                  (this.isModified = !0),
                  (this.asn1Array = t);
              }),
              (this.appendASN1Object = function (t) {
                (this.hTLV = null),
                  (this.isModified = !0),
                  this.asn1Array.push(t);
              }),
              (this.asn1Array = new Array()),
              void 0 !== t && void 0 !== t.array && (this.asn1Array = t.array);
          }),
          tt.lang.extend(et.asn1.DERAbstractStructured, et.asn1.ASN1Object),
          (et.asn1.DERBoolean = function () {
            et.asn1.DERBoolean.superclass.constructor.call(this),
              (this.hT = "01"),
              (this.hTLV = "0101ff");
          }),
          tt.lang.extend(et.asn1.DERBoolean, et.asn1.ASN1Object),
          (et.asn1.DERInteger = function (t) {
            et.asn1.DERInteger.superclass.constructor.call(this),
              (this.hT = "02"),
              (this.setByBigInteger = function (t) {
                (this.hTLV = null),
                  (this.isModified = !0),
                  (this.hV = et.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t));
              }),
              (this.setByInteger = function (t) {
                var e = new V(String(t), 10);
                this.setByBigInteger(e);
              }),
              (this.setValueHex = function (t) {
                this.hV = t;
              }),
              (this.getFreshValueHex = function () {
                return this.hV;
              }),
              void 0 !== t &&
                (void 0 !== t.bigint
                  ? this.setByBigInteger(t.bigint)
                  : void 0 !== t.int
                  ? this.setByInteger(t.int)
                  : "number" == typeof t
                  ? this.setByInteger(t)
                  : void 0 !== t.hex && this.setValueHex(t.hex));
          }),
          tt.lang.extend(et.asn1.DERInteger, et.asn1.ASN1Object),
          (et.asn1.DERBitString = function (t) {
            if (void 0 !== t && void 0 !== t.obj) {
              var e = et.asn1.ASN1Util.newObject(t.obj);
              t.hex = "00" + e.getEncodedHex();
            }
            et.asn1.DERBitString.superclass.constructor.call(this),
              (this.hT = "03"),
              (this.setHexValueIncludingUnusedBits = function (t) {
                (this.hTLV = null), (this.isModified = !0), (this.hV = t);
              }),
              (this.setUnusedBitsAndHexValue = function (t, e) {
                if (t < 0 || 7 < t)
                  throw "unused bits shall be from 0 to 7: u = " + t;
                var i = "0" + t;
                (this.hTLV = null), (this.isModified = !0), (this.hV = i + e);
              }),
              (this.setByBinaryString = function (t) {
                var e = 8 - ((t = t.replace(/0+$/, "")).length % 8);
                8 == e && (e = 0);
                for (var i = 0; i <= e; i++) t += "0";
                var r = "";
                for (i = 0; i < t.length - 1; i += 8) {
                  var n = t.substr(i, 8),
                    s = parseInt(n, 2).toString(16);
                  1 == s.length && (s = "0" + s), (r += s);
                }
                (this.hTLV = null),
                  (this.isModified = !0),
                  (this.hV = "0" + e + r);
              }),
              (this.setByBooleanArray = function (t) {
                for (var e = "", i = 0; i < t.length; i++)
                  1 == t[i] ? (e += "1") : (e += "0");
                this.setByBinaryString(e);
              }),
              (this.newFalseArray = function (t) {
                for (var e = new Array(t), i = 0; i < t; i++) e[i] = !1;
                return e;
              }),
              (this.getFreshValueHex = function () {
                return this.hV;
              }),
              void 0 !== t &&
                ("string" == typeof t && t.toLowerCase().match(/^[0-9a-f]+$/)
                  ? this.setHexValueIncludingUnusedBits(t)
                  : void 0 !== t.hex
                  ? this.setHexValueIncludingUnusedBits(t.hex)
                  : void 0 !== t.bin
                  ? this.setByBinaryString(t.bin)
                  : void 0 !== t.array && this.setByBooleanArray(t.array));
          }),
          tt.lang.extend(et.asn1.DERBitString, et.asn1.ASN1Object),
          (et.asn1.DEROctetString = function (t) {
            if (void 0 !== t && void 0 !== t.obj) {
              var e = et.asn1.ASN1Util.newObject(t.obj);
              t.hex = e.getEncodedHex();
            }
            et.asn1.DEROctetString.superclass.constructor.call(this, t),
              (this.hT = "04");
          }),
          tt.lang.extend(et.asn1.DEROctetString, et.asn1.DERAbstractString),
          (et.asn1.DERNull = function () {
            et.asn1.DERNull.superclass.constructor.call(this),
              (this.hT = "05"),
              (this.hTLV = "0500");
          }),
          tt.lang.extend(et.asn1.DERNull, et.asn1.ASN1Object),
          (et.asn1.DERObjectIdentifier = function (t) {
            var h = function (t) {
                var e = t.toString(16);
                return 1 == e.length && (e = "0" + e), e;
              },
              s = function (t) {
                var e = "",
                  i = new V(t, 10).toString(2),
                  r = 7 - (i.length % 7);
                7 == r && (r = 0);
                for (var n = "", s = 0; s < r; s++) n += "0";
                i = n + i;
                for (s = 0; s < i.length - 1; s += 7) {
                  var o = i.substr(s, 7);
                  s != i.length - 7 && (o = "1" + o), (e += h(parseInt(o, 2)));
                }
                return e;
              };
            et.asn1.DERObjectIdentifier.superclass.constructor.call(this),
              (this.hT = "06"),
              (this.setValueHex = function (t) {
                (this.hTLV = null),
                  (this.isModified = !0),
                  (this.s = null),
                  (this.hV = t);
              }),
              (this.setValueOidString = function (t) {
                if (!t.match(/^[0-9.]+$/)) throw "malformed oid string: " + t;
                var e = "",
                  i = t.split("."),
                  r = 40 * parseInt(i[0]) + parseInt(i[1]);
                (e += h(r)), i.splice(0, 2);
                for (var n = 0; n < i.length; n++) e += s(i[n]);
                (this.hTLV = null),
                  (this.isModified = !0),
                  (this.s = null),
                  (this.hV = e);
              }),
              (this.setValueName = function (t) {
                var e = et.asn1.x509.OID.name2oid(t);
                if ("" === e)
                  throw "DERObjectIdentifier oidName undefined: " + t;
                this.setValueOidString(e);
              }),
              (this.getFreshValueHex = function () {
                return this.hV;
              }),
              void 0 !== t &&
                ("string" == typeof t
                  ? t.match(/^[0-2].[0-9.]+$/)
                    ? this.setValueOidString(t)
                    : this.setValueName(t)
                  : void 0 !== t.oid
                  ? this.setValueOidString(t.oid)
                  : void 0 !== t.hex
                  ? this.setValueHex(t.hex)
                  : void 0 !== t.name && this.setValueName(t.name));
          }),
          tt.lang.extend(et.asn1.DERObjectIdentifier, et.asn1.ASN1Object),
          (et.asn1.DEREnumerated = function (t) {
            et.asn1.DEREnumerated.superclass.constructor.call(this),
              (this.hT = "0a"),
              (this.setByBigInteger = function (t) {
                (this.hTLV = null),
                  (this.isModified = !0),
                  (this.hV = et.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t));
              }),
              (this.setByInteger = function (t) {
                var e = new V(String(t), 10);
                this.setByBigInteger(e);
              }),
              (this.setValueHex = function (t) {
                this.hV = t;
              }),
              (this.getFreshValueHex = function () {
                return this.hV;
              }),
              void 0 !== t &&
                (void 0 !== t.int
                  ? this.setByInteger(t.int)
                  : "number" == typeof t
                  ? this.setByInteger(t)
                  : void 0 !== t.hex && this.setValueHex(t.hex));
          }),
          tt.lang.extend(et.asn1.DEREnumerated, et.asn1.ASN1Object),
          (et.asn1.DERUTF8String = function (t) {
            et.asn1.DERUTF8String.superclass.constructor.call(this, t),
              (this.hT = "0c");
          }),
          tt.lang.extend(et.asn1.DERUTF8String, et.asn1.DERAbstractString),
          (et.asn1.DERNumericString = function (t) {
            et.asn1.DERNumericString.superclass.constructor.call(this, t),
              (this.hT = "12");
          }),
          tt.lang.extend(et.asn1.DERNumericString, et.asn1.DERAbstractString),
          (et.asn1.DERPrintableString = function (t) {
            et.asn1.DERPrintableString.superclass.constructor.call(this, t),
              (this.hT = "13");
          }),
          tt.lang.extend(et.asn1.DERPrintableString, et.asn1.DERAbstractString),
          (et.asn1.DERTeletexString = function (t) {
            et.asn1.DERTeletexString.superclass.constructor.call(this, t),
              (this.hT = "14");
          }),
          tt.lang.extend(et.asn1.DERTeletexString, et.asn1.DERAbstractString),
          (et.asn1.DERIA5String = function (t) {
            et.asn1.DERIA5String.superclass.constructor.call(this, t),
              (this.hT = "16");
          }),
          tt.lang.extend(et.asn1.DERIA5String, et.asn1.DERAbstractString),
          (et.asn1.DERUTCTime = function (t) {
            et.asn1.DERUTCTime.superclass.constructor.call(this, t),
              (this.hT = "17"),
              (this.setByDate = function (t) {
                (this.hTLV = null),
                  (this.isModified = !0),
                  (this.date = t),
                  (this.s = this.formatDate(this.date, "utc")),
                  (this.hV = stohex(this.s));
              }),
              (this.getFreshValueHex = function () {
                return (
                  void 0 === this.date &&
                    void 0 === this.s &&
                    ((this.date = new Date()),
                    (this.s = this.formatDate(this.date, "utc")),
                    (this.hV = stohex(this.s))),
                  this.hV
                );
              }),
              void 0 !== t &&
                (void 0 !== t.str
                  ? this.setString(t.str)
                  : "string" == typeof t && t.match(/^[0-9]{12}Z$/)
                  ? this.setString(t)
                  : void 0 !== t.hex
                  ? this.setStringHex(t.hex)
                  : void 0 !== t.date && this.setByDate(t.date));
          }),
          tt.lang.extend(et.asn1.DERUTCTime, et.asn1.DERAbstractTime),
          (et.asn1.DERGeneralizedTime = function (t) {
            et.asn1.DERGeneralizedTime.superclass.constructor.call(this, t),
              (this.hT = "18"),
              (this.withMillis = !1),
              (this.setByDate = function (t) {
                (this.hTLV = null),
                  (this.isModified = !0),
                  (this.date = t),
                  (this.s = this.formatDate(this.date, "gen", this.withMillis)),
                  (this.hV = stohex(this.s));
              }),
              (this.getFreshValueHex = function () {
                return (
                  void 0 === this.date &&
                    void 0 === this.s &&
                    ((this.date = new Date()),
                    (this.s = this.formatDate(
                      this.date,
                      "gen",
                      this.withMillis
                    )),
                    (this.hV = stohex(this.s))),
                  this.hV
                );
              }),
              void 0 !== t &&
                (void 0 !== t.str
                  ? this.setString(t.str)
                  : "string" == typeof t && t.match(/^[0-9]{14}Z$/)
                  ? this.setString(t)
                  : void 0 !== t.hex
                  ? this.setStringHex(t.hex)
                  : void 0 !== t.date && this.setByDate(t.date),
                !0 === t.millis && (this.withMillis = !0));
          }),
          tt.lang.extend(et.asn1.DERGeneralizedTime, et.asn1.DERAbstractTime),
          (et.asn1.DERSequence = function (t) {
            et.asn1.DERSequence.superclass.constructor.call(this, t),
              (this.hT = "30"),
              (this.getFreshValueHex = function () {
                for (var t = "", e = 0; e < this.asn1Array.length; e++) {
                  t += this.asn1Array[e].getEncodedHex();
                }
                return (this.hV = t), this.hV;
              });
          }),
          tt.lang.extend(et.asn1.DERSequence, et.asn1.DERAbstractStructured),
          (et.asn1.DERSet = function (t) {
            et.asn1.DERSet.superclass.constructor.call(this, t),
              (this.hT = "31"),
              (this.sortFlag = !0),
              (this.getFreshValueHex = function () {
                for (
                  var t = new Array(), e = 0;
                  e < this.asn1Array.length;
                  e++
                ) {
                  var i = this.asn1Array[e];
                  t.push(i.getEncodedHex());
                }
                return (
                  1 == this.sortFlag && t.sort(),
                  (this.hV = t.join("")),
                  this.hV
                );
              }),
              void 0 !== t &&
                void 0 !== t.sortflag &&
                0 == t.sortflag &&
                (this.sortFlag = !1);
          }),
          tt.lang.extend(et.asn1.DERSet, et.asn1.DERAbstractStructured),
          (et.asn1.DERTaggedObject = function (t) {
            et.asn1.DERTaggedObject.superclass.constructor.call(this),
              (this.hT = "a0"),
              (this.hV = ""),
              (this.isExplicit = !0),
              (this.asn1Object = null),
              (this.setASN1Object = function (t, e, i) {
                (this.hT = e),
                  (this.isExplicit = t),
                  (this.asn1Object = i),
                  this.isExplicit
                    ? ((this.hV = this.asn1Object.getEncodedHex()),
                      (this.hTLV = null),
                      (this.isModified = !0))
                    : ((this.hV = null),
                      (this.hTLV = i.getEncodedHex()),
                      (this.hTLV = this.hTLV.replace(/^../, e)),
                      (this.isModified = !1));
              }),
              (this.getFreshValueHex = function () {
                return this.hV;
              }),
              void 0 !== t &&
                (void 0 !== t.tag && (this.hT = t.tag),
                void 0 !== t.explicit && (this.isExplicit = t.explicit),
                void 0 !== t.obj &&
                  ((this.asn1Object = t.obj),
                  this.setASN1Object(
                    this.isExplicit,
                    this.hT,
                    this.asn1Object
                  )));
          }),
          tt.lang.extend(et.asn1.DERTaggedObject, et.asn1.ASN1Object);
        var it = (function (i) {
            function r(t) {
              var e = i.call(this) || this;
              return (
                t &&
                  ("string" == typeof t
                    ? e.parseKey(t)
                    : (r.hasPrivateKeyProperty(t) ||
                        r.hasPublicKeyProperty(t)) &&
                      e.parsePropertiesFrom(t)),
                e
              );
            }
            return (
              (function (t, e) {
                function i() {
                  this.constructor = t;
                }
                g(t, e),
                  (t.prototype =
                    null === e
                      ? Object.create(e)
                      : ((i.prototype = e.prototype), new i()));
              })(r, i),
              (r.prototype.parseKey = function (t) {
                try {
                  var e = 0,
                    i = 0,
                    r = /^\s*(?:[0-9A-Fa-f][0-9A-Fa-f]\s*)+$/.test(t)
                      ? v(t)
                      : m.unarmor(t),
                    n = R.decode(r);
                  if (
                    (3 === n.sub.length && (n = n.sub[2].sub[0]),
                    9 === n.sub.length)
                  ) {
                    (e = n.sub[1].getHexStringValue()),
                      (this.n = q(e, 16)),
                      (i = n.sub[2].getHexStringValue()),
                      (this.e = parseInt(i, 16));
                    var s = n.sub[3].getHexStringValue();
                    this.d = q(s, 16);
                    var o = n.sub[4].getHexStringValue();
                    this.p = q(o, 16);
                    var h = n.sub[5].getHexStringValue();
                    this.q = q(h, 16);
                    var a = n.sub[6].getHexStringValue();
                    this.dmp1 = q(a, 16);
                    var u = n.sub[7].getHexStringValue();
                    this.dmq1 = q(u, 16);
                    var c = n.sub[8].getHexStringValue();
                    this.coeff = q(c, 16);
                  } else {
                    if (2 !== n.sub.length) return !1;
                    var f = n.sub[1].sub[0];
                    (e = f.sub[0].getHexStringValue()),
                      (this.n = q(e, 16)),
                      (i = f.sub[1].getHexStringValue()),
                      (this.e = parseInt(i, 16));
                  }
                  return !0;
                } catch (t) {
                  return !1;
                }
              }),
              (r.prototype.getPrivateBaseKey = function () {
                var t = {
                  array: [
                    new et.asn1.DERInteger({ int: 0 }),
                    new et.asn1.DERInteger({ bigint: this.n }),
                    new et.asn1.DERInteger({ int: this.e }),
                    new et.asn1.DERInteger({ bigint: this.d }),
                    new et.asn1.DERInteger({ bigint: this.p }),
                    new et.asn1.DERInteger({ bigint: this.q }),
                    new et.asn1.DERInteger({ bigint: this.dmp1 }),
                    new et.asn1.DERInteger({ bigint: this.dmq1 }),
                    new et.asn1.DERInteger({ bigint: this.coeff }),
                  ],
                };
                return new et.asn1.DERSequence(t).getEncodedHex();
              }),
              (r.prototype.getPrivateBaseKeyB64 = function () {
                return f(this.getPrivateBaseKey());
              }),
              (r.prototype.getPublicBaseKey = function () {
                var t = new et.asn1.DERSequence({
                    array: [
                      new et.asn1.DERObjectIdentifier({
                        oid: "1.2.840.113549.1.1.1",
                      }),
                      new et.asn1.DERNull(),
                    ],
                  }),
                  e = new et.asn1.DERSequence({
                    array: [
                      new et.asn1.DERInteger({ bigint: this.n }),
                      new et.asn1.DERInteger({ int: this.e }),
                    ],
                  }),
                  i = new et.asn1.DERBitString({
                    hex: "00" + e.getEncodedHex(),
                  });
                return new et.asn1.DERSequence({
                  array: [t, i],
                }).getEncodedHex();
              }),
              (r.prototype.getPublicBaseKeyB64 = function () {
                return f(this.getPublicBaseKey());
              }),
              (r.wordwrap = function (t, e) {
                if (!t) return t;
                var i =
                  "(.{1," + (e = e || 64) + "})( +|$\n?)|(.{1," + e + "})";
                return t.match(RegExp(i, "g")).join("\n");
              }),
              (r.prototype.getPrivateKey = function () {
                var t = "-----BEGIN RSA PRIVATE KEY-----\n";
                return (
                  (t += r.wordwrap(this.getPrivateBaseKeyB64()) + "\n"),
                  (t += "-----END RSA PRIVATE KEY-----")
                );
              }),
              (r.prototype.getPublicKey = function () {
                var t = "-----BEGIN PUBLIC KEY-----\n";
                return (
                  (t += r.wordwrap(this.getPublicBaseKeyB64()) + "\n"),
                  (t += "-----END PUBLIC KEY-----")
                );
              }),
              (r.hasPublicKeyProperty = function (t) {
                return (
                  (t = t || {}).hasOwnProperty("n") && t.hasOwnProperty("e")
                );
              }),
              (r.hasPrivateKeyProperty = function (t) {
                return (
                  (t = t || {}).hasOwnProperty("n") &&
                  t.hasOwnProperty("e") &&
                  t.hasOwnProperty("d") &&
                  t.hasOwnProperty("p") &&
                  t.hasOwnProperty("q") &&
                  t.hasOwnProperty("dmp1") &&
                  t.hasOwnProperty("dmq1") &&
                  t.hasOwnProperty("coeff")
                );
              }),
              (r.prototype.parsePropertiesFrom = function (t) {
                (this.n = t.n),
                  (this.e = t.e),
                  t.hasOwnProperty("d") &&
                    ((this.d = t.d),
                    (this.p = t.p),
                    (this.q = t.q),
                    (this.dmp1 = t.dmp1),
                    (this.dmq1 = t.dmq1),
                    (this.coeff = t.coeff));
              }),
              r
            );
          })(W),
          rt = (function () {
            function t(t) {
              (t = t || {}),
                (this.default_key_size =
                  parseInt(t.default_key_size, 10) || 1024),
                (this.default_public_exponent =
                  t.default_public_exponent || "010001"),
                (this.log = t.log || !1),
                (this.key = null);
            }
            return (
              (t.prototype.setKey = function (t) {
                this.log &&
                  this.key &&
                  console.warn("A key was already set, overriding existing."),
                  (this.key = new it(t));
              }),
              (t.prototype.setPrivateKey = function (t) {
                this.setKey(t);
              }),
              (t.prototype.setPublicKey = function (t) {
                this.setKey(t);
              }),
              (t.prototype.decrypt = function (t) {
                try {
                  return this.getKey().decrypt(l(t));
                } catch (t) {
                  return !1;
                }
              }),
              (t.prototype.decryptLong = function (t) {
                try {
                  return this.getKey().decryptLong(l(t));
                } catch (t) {
                  return !1;
                }
              }),
              (t.prototype.encrypt = function (t) {
                try {
                  return f(this.getKey().encrypt(t));
                } catch (t) {
                  return !1;
                }
              }),
              (t.prototype.encryptLong = function (t) {
                try {
                  return f(this.getKey().encryptLong(t));
                } catch (t) {
                  return !1;
                }
              }),
              (t.prototype.getKey = function (t) {
                if (!this.key) {
                  if (
                    ((this.key = new it()),
                    t && "[object Function]" === {}.toString.call(t))
                  )
                    return void this.key.generateAsync(
                      this.default_key_size,
                      this.default_public_exponent,
                      t
                    );
                  this.key.generate(
                    this.default_key_size,
                    this.default_public_exponent
                  );
                }
                return this.key;
              }),
              (t.prototype.getPrivateKey = function () {
                return this.getKey().getPrivateKey();
              }),
              (t.prototype.getPrivateKeyB64 = function () {
                return this.getKey().getPrivateBaseKeyB64();
              }),
              (t.prototype.getPublicKey = function () {
                return this.getKey().getPublicKey();
              }),
              (t.prototype.getPublicKeyB64 = function () {
                return this.getKey().getPublicBaseKeyB64();
              }),
              (t.version = "3.0.0-beta.1"),
              t
            );
          })();
        (window.JSEncrypt = rt),
          (t.JSEncrypt = rt),
          (t.default = rt),
          Object.defineProperty(t, "__esModule", { value: !0 });
      });
    </script>
    <script type="text/javascript">
      

      (function (global, factory) {
        "use strict";

        if (typeof module === "object" && typeof module.exports === "object") {
          
          
          
          
          
          
          
          module.exports = global.document
            ? factory(global, true)
            : function (w) {
                if (!w.document) {
                  throw new Error("jQuery requires a window with a document");
                }
                return factory(w);
              };
        } else {
          factory(global);
        }

        
      })(
        typeof window !== "undefined" ? window : this,
        function (window, noGlobal) {
          
          
          
          
          "use strict";

          var arr = [];

          var getProto = Object.getPrototypeOf;

          var slice = arr.slice;

          var flat = arr.flat
            ? function (array) {
                return arr.flat.call(array);
              }
            : function (array) {
                return arr.concat.apply([], array);
              };

          var push = arr.push;

          var indexOf = arr.indexOf;

          var class2type = {};

          var toString = class2type.toString;

          var hasOwn = class2type.hasOwnProperty;

          var fnToString = hasOwn.toString;

          var ObjectFunctionString = fnToString.call(Object);

          var support = {};

          var isFunction = function isFunction(obj) {
            
            
            
            
            
            
            
            return (
              typeof obj === "function" &&
              typeof obj.nodeType !== "number" &&
              typeof obj.item !== "function"
            );
          };

          var isWindow = function isWindow(obj) {
            return obj != null && obj === obj.window;
          };

          var document = window.document;

          var preservedScriptAttributes = {
            type: true,
            src: true,
            nonce: true,
            noModule: true,
          };

          function DOMEval(code, node, doc) {
            doc = doc || document;

            var i,
              val,
              script = doc.createElement("script");

            script.text = code;
            if (node) {
              for (i in preservedScriptAttributes) {
                
                
                
                
                
                
                
                
                
                
                val = node[i] || (node.getAttribute && node.getAttribute(i));
                if (val) {
                  script.setAttribute(i, val);
                }
              }
            }
            doc.head.appendChild(script).parentNode.removeChild(script);
          }

          function toType(obj) {
            if (obj == null) {
              return obj + "";
            }

            
            return typeof obj === "object" || typeof obj === "function"
              ? class2type[toString.call(obj)] || "object"
              : typeof obj;
          }
           
          
          

          var version = "3.6.0",
            
            jQuery = function (selector, context) {
              
              
              return new jQuery.fn.init(selector, context);
            };

          jQuery.fn = jQuery.prototype = {
            
            jquery: version,

            constructor: jQuery,

            
            length: 0,

            toArray: function () {
              return slice.call(this);
            },

            
            
            get: function (num) {
              
              if (num == null) {
                return slice.call(this);
              }

              
              return num < 0 ? this[num + this.length] : this[num];
            },

            
            
            pushStack: function (elems) {
              
              var ret = jQuery.merge(this.constructor(), elems);

              
              ret.prevObject = this;

              
              return ret;
            },

            
            each: function (callback) {
              return jQuery.each(this, callback);
            },

            map: function (callback) {
              return this.pushStack(
                jQuery.map(this, function (elem, i) {
                  return callback.call(elem, i, elem);
                })
              );
            },

            slice: function () {
              return this.pushStack(slice.apply(this, arguments));
            },

            first: function () {
              return this.eq(0);
            },

            last: function () {
              return this.eq(-1);
            },

            even: function () {
              return this.pushStack(
                jQuery.grep(this, function (_elem, i) {
                  return (i + 1) % 2;
                })
              );
            },

            odd: function () {
              return this.pushStack(
                jQuery.grep(this, function (_elem, i) {
                  return i % 2;
                })
              );
            },

            eq: function (i) {
              var len = this.length,
                j = +i + (i < 0 ? len : 0);
              return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
            },

            end: function () {
              return this.prevObject || this.constructor();
            },

            
            
            push: push,
            sort: arr.sort,
            splice: arr.splice,
          };

          jQuery.extend = jQuery.fn.extend = function () {
            var options,
              name,
              src,
              copy,
              copyIsArray,
              clone,
              target = arguments[0] || {},
              i = 1,
              length = arguments.length,
              deep = false;

            
            if (typeof target === "boolean") {
              deep = target;

              
              target = arguments[i] || {};
              i++;
            }

            
            if (typeof target !== "object" && !isFunction(target)) {
              target = {};
            }

            
            if (i === length) {
              target = this;
              i--;
            }

            for (; i < length; i++) {
              
              if ((options = arguments[i]) != null) {
                
                for (name in options) {
                  copy = options[name];

                  
                  
                  if (name === "__proto__" || target === copy) {
                    continue;
                  }

                  
                  if (
                    deep &&
                    copy &&
                    (jQuery.isPlainObject(copy) ||
                      (copyIsArray = Array.isArray(copy)))
                  ) {
                    src = target[name];

                    
                    if (copyIsArray && !Array.isArray(src)) {
                      clone = [];
                    } else if (!copyIsArray && !jQuery.isPlainObject(src)) {
                      clone = {};
                    } else {
                      clone = src;
                    }
                    copyIsArray = false;

                    
                    target[name] = jQuery.extend(deep, clone, copy);

                    
                  } else if (copy !== undefined) {
                    target[name] = copy;
                  }
                }
              }
            }

            
            return target;
          };

          jQuery.extend({
            
            expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),

            
            isReady: true,

            error: function (msg) {
              throw new Error(msg);
            },

            noop: function () {},

            isPlainObject: function (obj) {
              var proto, Ctor;

              
              
              if (!obj || toString.call(obj) !== "[object Object]") {
                return false;
              }

              proto = getProto(obj);

              
              if (!proto) {
                return true;
              }

              
              Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
              return (
                typeof Ctor === "function" &&
                fnToString.call(Ctor) === ObjectFunctionString
              );
            },

            isEmptyObject: function (obj) {
              var name;

              for (name in obj) {
                return false;
              }
              return true;
            },

            
            
            globalEval: function (code, options, doc) {
              DOMEval(code, { nonce: options && options.nonce }, doc);
            },

            each: function (obj, callback) {
              var length,
                i = 0;

              if (isArrayLike(obj)) {
                length = obj.length;
                for (; i < length; i++) {
                  if (callback.call(obj[i], i, obj[i]) === false) {
                    break;
                  }
                }
              } else {
                for (i in obj) {
                  if (callback.call(obj[i], i, obj[i]) === false) {
                    break;
                  }
                }
              }

              return obj;
            },

            
            makeArray: function (arr, results) {
              var ret = results || [];

              if (arr != null) {
                if (isArrayLike(Object(arr))) {
                  jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
                } else {
                  push.call(ret, arr);
                }
              }

              return ret;
            },

            inArray: function (elem, arr, i) {
              return arr == null ? -1 : indexOf.call(arr, elem, i);
            },

            
            
            merge: function (first, second) {
              var len = +second.length,
                j = 0,
                i = first.length;

              for (; j < len; j++) {
                first[i++] = second[j];
              }

              first.length = i;

              return first;
            },

            grep: function (elems, callback, invert) {
              var callbackInverse,
                matches = [],
                i = 0,
                length = elems.length,
                callbackExpect = !invert;

              
              
              for (; i < length; i++) {
                callbackInverse = !callback(elems[i], i);
                if (callbackInverse !== callbackExpect) {
                  matches.push(elems[i]);
                }
              }

              return matches;
            },

            
            map: function (elems, callback, arg) {
              var length,
                value,
                i = 0,
                ret = [];

              
              if (isArrayLike(elems)) {
                length = elems.length;
                for (; i < length; i++) {
                  value = callback(elems[i], i, arg);

                  if (value != null) {
                    ret.push(value);
                  }
                }

                
              } else {
                for (i in elems) {
                  value = callback(elems[i], i, arg);

                  if (value != null) {
                    ret.push(value);
                  }
                }
              }

              
              return flat(ret);
            },

            
            guid: 1,

            
            
            support: support,
          });

          if (typeof Symbol === "function") {
            jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
          }

          
          jQuery.each(
            "Boolean Number String Function Array Date RegExp Object Error Symbol".split(
              " "
            ),
            function (_i, name) {
              class2type["[object " + name + "]"] = name.toLowerCase();
            }
          );

          function isArrayLike(obj) {
            
            
            
            
            var length = !!obj && "length" in obj && obj.length,
              type = toType(obj);

            if (isFunction(obj) || isWindow(obj)) {
              return false;
            }

            return (
              type === "array" ||
              length === 0 ||
              (typeof length === "number" && length > 0 && length - 1 in obj)
            );
          }
          var Sizzle =
            

            (function (window) {
              var i,
                support,
                Expr,
                getText,
                isXML,
                tokenize,
                compile,
                select,
                outermostContext,
                sortInput,
                hasDuplicate,
                
                setDocument,
                document,
                docElem,
                documentIsHTML,
                rbuggyQSA,
                rbuggyMatches,
                matches,
                contains,
                
                expando = "sizzle" + 1 * new Date(),
                preferredDoc = window.document,
                dirruns = 0,
                done = 0,
                classCache = createCache(),
                tokenCache = createCache(),
                compilerCache = createCache(),
                nonnativeSelectorCache = createCache(),
                sortOrder = function (a, b) {
                  if (a === b) {
                    hasDuplicate = true;
                  }
                  return 0;
                },
                
                hasOwn = {}.hasOwnProperty,
                arr = [],
                pop = arr.pop,
                pushNative = arr.push,
                push = arr.push,
                slice = arr.slice,
                
                
                indexOf = function (list, elem) {
                  var i = 0,
                    len = list.length;
                  for (; i < len; i++) {
                    if (list[i] === elem) {
                      return i;
                    }
                  }
                  return -1;
                },
                booleans =
                  "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" +
                  "ismap|loop|multiple|open|readonly|required|scoped",
                

                
                whitespace = "[\\x20\\t\\r\\n\\f]",
                
                identifier =
                  "(?:\\\\[\\da-fA-F]{1,6}" +
                  whitespace +
                  "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",
                
                attributes =
                  "\\[" +
                  whitespace +
                  "*(" +
                  identifier +
                  ")(?:" +
                  whitespace +
                  
                  "*([*^$|!~]?=)" +
                  whitespace +
                  
                  
                  "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" +
                  identifier +
                  "))|)" +
                  whitespace +
                  "*\\]",
                pseudos =
                  ":(" +
                  identifier +
                  ")(?:\\((" +
                  
                  
                  "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
                  
                  "((?:\\\\.|[^\\\\()[\\]]|" +
                  attributes +
                  ")*)|" +
                  
                  ".*" +
                  ")\\)|)",
                
                rwhitespace = new RegExp(whitespace + "+", "g"),
                rtrim = new RegExp(
                  "^" +
                    whitespace +
                    "+|((?:^|[^\\\\])(?:\\\\.)*)" +
                    whitespace +
                    "+$",
                  "g"
                ),
                rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
                rcombinators = new RegExp(
                  "^" +
                    whitespace +
                    "*([>+~]|" +
                    whitespace +
                    ")" +
                    whitespace +
                    "*"
                ),
                rdescend = new RegExp(whitespace + "|>"),
                rpseudo = new RegExp(pseudos),
                ridentifier = new RegExp("^" + identifier + "$"),
                matchExpr = {
                  ID: new RegExp("^#(" + identifier + ")"),
                  CLASS: new RegExp("^\\.(" + identifier + ")"),
                  TAG: new RegExp("^(" + identifier + "|[*])"),
                  ATTR: new RegExp("^" + attributes),
                  PSEUDO: new RegExp("^" + pseudos),
                  CHILD: new RegExp(
                    "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
                      whitespace +
                      "*(even|odd|(([+-]|)(\\d*)n|)" +
                      whitespace +
                      "*(?:([+-]|)" +
                      whitespace +
                      "*(\\d+)|))" +
                      whitespace +
                      "*\\)|)",
                    "i"
                  ),
                  bool: new RegExp("^(?:" + booleans + ")$", "i"),

                  
                  
                  needsContext: new RegExp(
                    "^" +
                      whitespace +
                      "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
                      whitespace +
                      "*((?:-\\d)?\\d*)" +
                      whitespace +
                      "*\\)|)(?=[^-]|$)",
                    "i"
                  ),
                },
                rhtml = /HTML$/i,
                rinputs = /^(?:input|select|textarea|button)$/i,
                rheader = /^h\d$/i,
                rnative = /^[^{]+\{\s*\[native \w/,
                
                rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
                rsibling = /[+~]/,
                
                
                runescape = new RegExp(
                  "\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])",
                  "g"
                ),
                funescape = function (escape, nonHex) {
                  var high = "0x" + escape.slice(1) - 0x10000;

                  return nonHex
                    ? 
                      nonHex
                    : 
                    
                    
                    
                    high < 0
                    ? String.fromCharCode(high + 0x10000)
                    : String.fromCharCode(
                        (high >> 10) | 0xd800,
                        (high & 0x3ff) | 0xdc00
                      );
                },
                
                
                rcssescape =
                  /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
                fcssescape = function (ch, asCodePoint) {
                  if (asCodePoint) {
                    
                    if (ch === "\0") {
                      return "\uFFFD";
                    }

                    
                    return (
                      ch.slice(0, -1) +
                      "\\" +
                      ch.charCodeAt(ch.length - 1).toString(16) +
                      " "
                    );
                  }

                  
                  return "\\" + ch;
                },
                
                
                
                
                unloadHandler = function () {
                  setDocument();
                },
                inDisabledFieldset = addCombinator(
                  function (elem) {
                    return (
                      elem.disabled === true &&
                      elem.nodeName.toLowerCase() === "fieldset"
                    );
                  },
                  { dir: "parentNode", next: "legend" }
                );

              
              try {
                push.apply(
                  (arr = slice.call(preferredDoc.childNodes)),
                  preferredDoc.childNodes
                );

                
                
                
                arr[preferredDoc.childNodes.length].nodeType;
              } catch (e) {
                push = {
                  apply: arr.length
                    ? 
                      function (target, els) {
                        pushNative.apply(target, slice.call(els));
                      }
                    : 
                      
                      function (target, els) {
                        var j = target.length,
                          i = 0;

                        
                        while ((target[j++] = els[i++])) {}
                        target.length = j - 1;
                      },
                };
              }

              function Sizzle(selector, context, results, seed) {
                var m,
                  i,
                  elem,
                  nid,
                  match,
                  groups,
                  newSelector,
                  newContext = context && context.ownerDocument,
                  
                  nodeType = context ? context.nodeType : 9;

                results = results || [];

                
                if (
                  typeof selector !== "string" ||
                  !selector ||
                  (nodeType !== 1 && nodeType !== 9 && nodeType !== 11)
                ) {
                  return results;
                }

                
                if (!seed) {
                  setDocument(context);
                  context = context || document;

                  if (documentIsHTML) {
                    
                    
                    if (
                      nodeType !== 11 &&
                      (match = rquickExpr.exec(selector))
                    ) {
                      
                      if ((m = match[1])) {
                        
                        if (nodeType === 9) {
                          if ((elem = context.getElementById(m))) {
                            
                            
                            
                            if (elem.id === m) {
                              results.push(elem);
                              return results;
                            }
                          } else {
                            return results;
                          }

                          
                        } else {
                          
                          
                          
                          if (
                            newContext &&
                            (elem = newContext.getElementById(m)) &&
                            contains(context, elem) &&
                            elem.id === m
                          ) {
                            results.push(elem);
                            return results;
                          }
                        }

                        
                      } else if (match[2]) {
                        push.apply(
                          results,
                          context.getElementsByTagName(selector)
                        );
                        return results;

                        
                      } else if (
                        (m = match[3]) &&
                        support.getElementsByClassName &&
                        context.getElementsByClassName
                      ) {
                        push.apply(results, context.getElementsByClassName(m));
                        return results;
                      }
                    }

                    
                    if (
                      support.qsa &&
                      !nonnativeSelectorCache[selector + " "] &&
                      (!rbuggyQSA || !rbuggyQSA.test(selector)) &&
                      
                      
                      (nodeType !== 1 ||
                        context.nodeName.toLowerCase() !== "object")
                    ) {
                      newSelector = selector;
                      newContext = context;

                      
                      
                      
                      
                      
                      
                      
                      if (
                        nodeType === 1 &&
                        (rdescend.test(selector) || rcombinators.test(selector))
                      ) {
                        
                        newContext =
                          (rsibling.test(selector) &&
                            testContext(context.parentNode)) ||
                          context;

                        
                        
                        if (newContext !== context || !support.scope) {
                          
                          if ((nid = context.getAttribute("id"))) {
                            nid = nid.replace(rcssescape, fcssescape);
                          } else {
                            context.setAttribute("id", (nid = expando));
                          }
                        }

                        
                        groups = tokenize(selector);
                        i = groups.length;
                        while (i--) {
                          groups[i] =
                            (nid ? "#" + nid : ":scope") +
                            " " +
                            toSelector(groups[i]);
                        }
                        newSelector = groups.join(",");
                      }

                      try {
                        push.apply(
                          results,
                          newContext.querySelectorAll(newSelector)
                        );
                        return results;
                      } catch (qsaError) {
                        nonnativeSelectorCache(selector, true);
                      } finally {
                        if (nid === expando) {
                          context.removeAttribute("id");
                        }
                      }
                    }
                  }
                }

                
                return select(
                  selector.replace(rtrim, "$1"),
                  context,
                  results,
                  seed
                );
              }

              

              function createCache() {
                var keys = [];

                function cache(key, value) {
                  
                  if (keys.push(key + " ") > Expr.cacheLength) {
                    
                    delete cache[keys.shift()];
                  }
                  return (cache[key + " "] = value);
                }
                return cache;
              }

              

              function markFunction(fn) {
                fn[expando] = true;
                return fn;
              }

              

              function assert(fn) {
                var el = document.createElement("fieldset");

                try {
                  return !!fn(el);
                } catch (e) {
                  return false;
                } finally {
                  
                  if (el.parentNode) {
                    el.parentNode.removeChild(el);
                  }

                  
                  el = null;
                }
              }

              

              function addHandle(attrs, handler) {
                var arr = attrs.split("|"),
                  i = arr.length;

                while (i--) {
                  Expr.attrHandle[arr[i]] = handler;
                }
              }

              

              function siblingCheck(a, b) {
                var cur = b && a,
                  diff =
                    cur &&
                    a.nodeType === 1 &&
                    b.nodeType === 1 &&
                    a.sourceIndex - b.sourceIndex;

                
                if (diff) {
                  return diff;
                }

                
                if (cur) {
                  while ((cur = cur.nextSibling)) {
                    if (cur === b) {
                      return -1;
                    }
                  }
                }

                return a ? 1 : -1;
              }

              

              function createInputPseudo(type) {
                return function (elem) {
                  var name = elem.nodeName.toLowerCase();
                  return name === "input" && elem.type === type;
                };
              }

              

              function createButtonPseudo(type) {
                return function (elem) {
                  var name = elem.nodeName.toLowerCase();
                  return (
                    (name === "input" || name === "button") &&
                    elem.type === type
                  );
                };
              }

              

              function createDisabledPseudo(disabled) {
                
                return function (elem) {
                  
                  
                  
                  if ("form" in elem) {
                    
                    
                    
                    
                    
                    
                    
                    if (elem.parentNode && elem.disabled === false) {
                      
                      if ("label" in elem) {
                        if ("label" in elem.parentNode) {
                          return elem.parentNode.disabled === disabled;
                        } else {
                          return elem.disabled === disabled;
                        }
                      }

                      
                      
                      return (
                        elem.isDisabled === disabled ||
                        
                         
                        (elem.isDisabled !== !disabled &&
                          inDisabledFieldset(elem) === disabled)
                      );
                    }

                    return elem.disabled === disabled;

                    
                    
                    
                  } else if ("label" in elem) {
                    return elem.disabled === disabled;
                  }

                  
                  return false;
                };
              }

              

              function createPositionalPseudo(fn) {
                return markFunction(function (argument) {
                  argument = +argument;
                  return markFunction(function (seed, matches) {
                    var j,
                      matchIndexes = fn([], seed.length, argument),
                      i = matchIndexes.length;

                    
                    while (i--) {
                      if (seed[(j = matchIndexes[i])]) {
                        seed[j] = !(matches[j] = seed[j]);
                      }
                    }
                  });
                });
              }

              

              function testContext(context) {
                return (
                  context &&
                  typeof context.getElementsByTagName !== "undefined" &&
                  context
                );
              }

              
              support = Sizzle.support = {};

              

              isXML = Sizzle.isXML = function (elem) {
                var namespace = elem && elem.namespaceURI,
                  docElem =
                    elem && (elem.ownerDocument || elem).documentElement;

                
                
                
                return !rhtml.test(
                  namespace || (docElem && docElem.nodeName) || "HTML"
                );
              };

              

              setDocument = Sizzle.setDocument = function (node) {
                var hasCompare,
                  subWindow,
                  doc = node ? node.ownerDocument || node : preferredDoc;

                
                
                
                
                
                if (
                  doc == document ||
                  doc.nodeType !== 9 ||
                  !doc.documentElement
                ) {
                  return document;
                }

                
                document = doc;
                docElem = document.documentElement;
                documentIsHTML = !isXML(document);

                
                
                
                
                
                
                if (
                  preferredDoc != document &&
                  (subWindow = document.defaultView) &&
                  subWindow.top !== subWindow
                ) {
                  
                  if (subWindow.addEventListener) {
                    subWindow.addEventListener("unload", unloadHandler, false);

                    
                  } else if (subWindow.attachEvent) {
                    subWindow.attachEvent("onunload", unloadHandler);
                  }
                }

                
                
                
                
                
                support.scope = assert(function (el) {
                  docElem
                    .appendChild(el)
                    .appendChild(document.createElement("div"));
                  return (
                    typeof el.querySelectorAll !== "undefined" &&
                    !el.querySelectorAll(":scope fieldset div").length
                  );
                });

                


                
                
                
                support.attributes = assert(function (el) {
                  el.className = "i";
                  return !el.getAttribute("className");
                });

                


                
                support.getElementsByTagName = assert(function (el) {
                  el.appendChild(document.createComment(""));
                  return !el.getElementsByTagName("*").length;
                });

                
                support.getElementsByClassName = rnative.test(
                  document.getElementsByClassName
                );

                
                
                
                
                support.getById = assert(function (el) {
                  docElem.appendChild(el).id = expando;
                  return (
                    !document.getElementsByName ||
                    !document.getElementsByName(expando).length
                  );
                });

                
                if (support.getById) {
                  Expr.filter["ID"] = function (id) {
                    var attrId = id.replace(runescape, funescape);
                    return function (elem) {
                      return elem.getAttribute("id") === attrId;
                    };
                  };
                  Expr.find["ID"] = function (id, context) {
                    if (
                      typeof context.getElementById !== "undefined" &&
                      documentIsHTML
                    ) {
                      var elem = context.getElementById(id);
                      return elem ? [elem] : [];
                    }
                  };
                } else {
                  Expr.filter["ID"] = function (id) {
                    var attrId = id.replace(runescape, funescape);
                    return function (elem) {
                      var node =
                        typeof elem.getAttributeNode !== "undefined" &&
                        elem.getAttributeNode("id");
                      return node && node.value === attrId;
                    };
                  };

                  
                  
                  Expr.find["ID"] = function (id, context) {
                    if (
                      typeof context.getElementById !== "undefined" &&
                      documentIsHTML
                    ) {
                      var node,
                        i,
                        elems,
                        elem = context.getElementById(id);

                      if (elem) {
                        
                        node = elem.getAttributeNode("id");
                        if (node && node.value === id) {
                          return [elem];
                        }

                        
                        elems = context.getElementsByName(id);
                        i = 0;
                        while ((elem = elems[i++])) {
                          node = elem.getAttributeNode("id");
                          if (node && node.value === id) {
                            return [elem];
                          }
                        }
                      }

                      return [];
                    }
                  };
                }

                
                Expr.find["TAG"] = support.getElementsByTagName
                  ? function (tag, context) {
                      if (typeof context.getElementsByTagName !== "undefined") {
                        return context.getElementsByTagName(tag);

                        
                      } else if (support.qsa) {
                        return context.querySelectorAll(tag);
                      }
                    }
                  : function (tag, context) {
                      var elem,
                        tmp = [],
                        i = 0,
                        
                        results = context.getElementsByTagName(tag);

                      
                      if (tag === "*") {
                        while ((elem = results[i++])) {
                          if (elem.nodeType === 1) {
                            tmp.push(elem);
                          }
                        }

                        return tmp;
                      }
                      return results;
                    };

                
                Expr.find["CLASS"] =
                  support.getElementsByClassName &&
                  function (className, context) {
                    if (
                      typeof context.getElementsByClassName !== "undefined" &&
                      documentIsHTML
                    ) {
                      return context.getElementsByClassName(className);
                    }
                  };

                


                

                
                rbuggyMatches = [];

                
                
                
                
                
                rbuggyQSA = [];

                if ((support.qsa = rnative.test(document.querySelectorAll))) {
                  
                  
                  assert(function (el) {
                    var input;

                    
                    
                    
                    
                    
                    docElem.appendChild(el).innerHTML =
                      "<a id='" +
                      expando +
                      "'></a>" +
                      "<select id='" +
                      expando +
                      "-\r\\' msallowcapture=''>" +
                      "<option selected=''></option></select>";

                    
                    
                    
                    
                    if (el.querySelectorAll("[msallowcapture^='']").length) {
                      rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
                    }

                    
                    
                    if (!el.querySelectorAll("[selected]").length) {
                      rbuggyQSA.push(
                        "\\[" + whitespace + "*(?:value|" + booleans + ")"
                      );
                    }

                    
                    if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
                      rbuggyQSA.push("~=");
                    }

                    
                    
                    
                    
                    
                    input = document.createElement("input");
                    input.setAttribute("name", "");
                    el.appendChild(input);
                    if (!el.querySelectorAll("[name='']").length) {
                      rbuggyQSA.push(
                        "\\[" +
                          whitespace +
                          "*name" +
                          whitespace +
                          "*=" +
                          whitespace +
                          "*(?:''|\"\")"
                      );
                    }

                    
                    
                    
                    if (!el.querySelectorAll(":checked").length) {
                      rbuggyQSA.push(":checked");
                    }

                    
                    
                    
                    if (!el.querySelectorAll("a#" + expando + "+*").length) {
                      rbuggyQSA.push(".#.+[+~]");
                    }

                    
                    
                    el.querySelectorAll("\\\f");
                    rbuggyQSA.push("[\\r\\n\\f]");
                  });

                  assert(function (el) {
                    el.innerHTML =
                      "<a href='' disabled='disabled'></a>" +
                      "<select disabled='disabled'><option/></select>";

                    
                    
                    var input = document.createElement("input");
                    input.setAttribute("type", "hidden");
                    el.appendChild(input).setAttribute("name", "D");

                    
                    
                    if (el.querySelectorAll("[name=d]").length) {
                      rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
                    }

                    
                    
                    if (el.querySelectorAll(":enabled").length !== 2) {
                      rbuggyQSA.push(":enabled", ":disabled");
                    }

                    
                    
                    docElem.appendChild(el).disabled = true;
                    if (el.querySelectorAll(":disabled").length !== 2) {
                      rbuggyQSA.push(":enabled", ":disabled");
                    }

                    
                    
                    el.querySelectorAll("*,:x");
                    rbuggyQSA.push(",.*:");
                  });
                }

                if (
                  (support.matchesSelector = rnative.test(
                    (matches =
                      docElem.matches ||
                      docElem.webkitMatchesSelector ||
                      docElem.mozMatchesSelector ||
                      docElem.oMatchesSelector ||
                      docElem.msMatchesSelector)
                  ))
                ) {
                  assert(function (el) {
                    
                    
                    support.disconnectedMatch = matches.call(el, "*");

                    
                    
                    matches.call(el, "[s!='']:x");
                    rbuggyMatches.push("!=", pseudos);
                  });
                }

                rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
                rbuggyMatches =
                  rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));

                

                hasCompare = rnative.test(docElem.compareDocumentPosition);

                
                
                
                contains =
                  hasCompare || rnative.test(docElem.contains)
                    ? function (a, b) {
                        var adown = a.nodeType === 9 ? a.documentElement : a,
                          bup = b && b.parentNode;
                        return (
                          a === bup ||
                          !!(
                            bup &&
                            bup.nodeType === 1 &&
                            (adown.contains
                              ? adown.contains(bup)
                              : a.compareDocumentPosition &&
                                a.compareDocumentPosition(bup) & 16)
                          )
                        );
                      }
                    : function (a, b) {
                        if (b) {
                          while ((b = b.parentNode)) {
                            if (b === a) {
                              return true;
                            }
                          }
                        }
                        return false;
                      };

                


                
                sortOrder = hasCompare
                  ? function (a, b) {
                      
                      if (a === b) {
                        hasDuplicate = true;
                        return 0;
                      }

                      
                      var compare =
                        !a.compareDocumentPosition - !b.compareDocumentPosition;
                      if (compare) {
                        return compare;
                      }

                      
                      
                      
                      
                      
                      compare =
                        (a.ownerDocument || a) == (b.ownerDocument || b)
                          ? a.compareDocumentPosition(b)
                          : 
                            1;

                      
                      if (
                        compare & 1 ||
                        (!support.sortDetached &&
                          b.compareDocumentPosition(a) === compare)
                      ) {
                        
                        
                        
                        
                        
                        if (
                          a == document ||
                          (a.ownerDocument == preferredDoc &&
                            contains(preferredDoc, a))
                        ) {
                          return -1;
                        }

                        
                        
                        
                        
                        if (
                          b == document ||
                          (b.ownerDocument == preferredDoc &&
                            contains(preferredDoc, b))
                        ) {
                          return 1;
                        }

                        
                        return sortInput
                          ? indexOf(sortInput, a) - indexOf(sortInput, b)
                          : 0;
                      }

                      return compare & 4 ? -1 : 1;
                    }
                  : function (a, b) {
                      
                      if (a === b) {
                        hasDuplicate = true;
                        return 0;
                      }

                      var cur,
                        i = 0,
                        aup = a.parentNode,
                        bup = b.parentNode,
                        ap = [a],
                        bp = [b];

                      
                      if (!aup || !bup) {
                        
                        
                        
                         
                        return a == document
                          ? -1
                          : b == document
                          ? 1
                          :  
                          aup
                          ? -1
                          : bup
                          ? 1
                          : sortInput
                          ? indexOf(sortInput, a) - indexOf(sortInput, b)
                          : 0;

                        
                      } else if (aup === bup) {
                        return siblingCheck(a, b);
                      }

                      
                      cur = a;
                      while ((cur = cur.parentNode)) {
                        ap.unshift(cur);
                      }
                      cur = b;
                      while ((cur = cur.parentNode)) {
                        bp.unshift(cur);
                      }

                      
                      while (ap[i] === bp[i]) {
                        i++;
                      }

                      return i
                        ? 
                          siblingCheck(ap[i], bp[i])
                        : 
                        
                        
                        
                         
                        ap[i] == preferredDoc
                        ? -1
                        : bp[i] == preferredDoc
                        ? 1
                        :  
                          0;
                    };

                return document;
              };

              Sizzle.matches = function (expr, elements) {
                return Sizzle(expr, null, null, elements);
              };

              Sizzle.matchesSelector = function (elem, expr) {
                setDocument(elem);

                if (
                  support.matchesSelector &&
                  documentIsHTML &&
                  !nonnativeSelectorCache[expr + " "] &&
                  (!rbuggyMatches || !rbuggyMatches.test(expr)) &&
                  (!rbuggyQSA || !rbuggyQSA.test(expr))
                ) {
                  try {
                    var ret = matches.call(elem, expr);

                    
                    if (
                      ret ||
                      support.disconnectedMatch ||
                      
                      
                      (elem.document && elem.document.nodeType !== 11)
                    ) {
                      return ret;
                    }
                  } catch (e) {
                    nonnativeSelectorCache(expr, true);
                  }
                }

                return Sizzle(expr, document, null, [elem]).length > 0;
              };

              Sizzle.contains = function (context, elem) {
                
                
                
                
                
                if ((context.ownerDocument || context) != document) {
                  setDocument(context);
                }
                return contains(context, elem);
              };

              Sizzle.attr = function (elem, name) {
                
                
                
                
                
                if ((elem.ownerDocument || elem) != document) {
                  setDocument(elem);
                }

                var fn = Expr.attrHandle[name.toLowerCase()],
                  
                  val =
                    fn && hasOwn.call(Expr.attrHandle, name.toLowerCase())
                      ? fn(elem, name, !documentIsHTML)
                      : undefined;

                return val !== undefined
                  ? val
                  : support.attributes || !documentIsHTML
                  ? elem.getAttribute(name)
                  : (val = elem.getAttributeNode(name)) && val.specified
                  ? val.value
                  : null;
              };

              Sizzle.escape = function (sel) {
                return (sel + "").replace(rcssescape, fcssescape);
              };

              Sizzle.error = function (msg) {
                throw new Error(
                  "Syntax error, unrecognized expression: " + msg
                );
              };

              

              Sizzle.uniqueSort = function (results) {
                var elem,
                  duplicates = [],
                  j = 0,
                  i = 0;

                
                hasDuplicate = !support.detectDuplicates;
                sortInput = !support.sortStable && results.slice(0);
                results.sort(sortOrder);

                if (hasDuplicate) {
                  while ((elem = results[i++])) {
                    if (elem === results[i]) {
                      j = duplicates.push(i);
                    }
                  }
                  while (j--) {
                    results.splice(duplicates[j], 1);
                  }
                }

                
                
                sortInput = null;

                return results;
              };

              

              getText = Sizzle.getText = function (elem) {
                var node,
                  ret = "",
                  i = 0,
                  nodeType = elem.nodeType;

                if (!nodeType) {
                  
                  while ((node = elem[i++])) {
                    
                    ret += getText(node);
                  }
                } else if (
                  nodeType === 1 ||
                  nodeType === 9 ||
                  nodeType === 11
                ) {
                  
                  
                  if (typeof elem.textContent === "string") {
                    return elem.textContent;
                  } else {
                    
                    for (
                      elem = elem.firstChild;
                      elem;
                      elem = elem.nextSibling
                    ) {
                      ret += getText(elem);
                    }
                  }
                } else if (nodeType === 3 || nodeType === 4) {
                  return elem.nodeValue;
                }

                

                return ret;
              };

              Expr = Sizzle.selectors = {
                
                cacheLength: 50,

                createPseudo: markFunction,

                match: matchExpr,

                attrHandle: {},

                find: {},

                relative: {
                  ">": { dir: "parentNode", first: true },
                  " ": { dir: "parentNode" },
                  "+": { dir: "previousSibling", first: true },
                  "~": { dir: "previousSibling" },
                },

                preFilter: {
                  ATTR: function (match) {
                    match[1] = match[1].replace(runescape, funescape);

                    
                    match[3] = (match[3] || match[4] || match[5] || "").replace(
                      runescape,
                      funescape
                    );

                    if (match[2] === "~=") {
                      match[3] = " " + match[3] + " ";
                    }

                    return match.slice(0, 4);
                  },

                  CHILD: function (match) {
                    

                    match[1] = match[1].toLowerCase();

                    if (match[1].slice(0, 3) === "nth") {
                      
                      if (!match[3]) {
                        Sizzle.error(match[0]);
                      }

                      
                      
                      match[4] = +(match[4]
                        ? match[5] + (match[6] || 1)
                        : 2 * (match[3] === "even" || match[3] === "odd"));
                      match[5] = +(match[7] + match[8] || match[3] === "odd");

                      
                    } else if (match[3]) {
                      Sizzle.error(match[0]);
                    }

                    return match;
                  },

                  PSEUDO: function (match) {
                    var excess,
                      unquoted = !match[6] && match[2];

                    if (matchExpr["CHILD"].test(match[0])) {
                      return null;
                    }

                    
                    if (match[3]) {
                      match[2] = match[4] || match[5] || "";

                      
                    } else if (
                      unquoted &&
                      rpseudo.test(unquoted) &&
                      
                      (excess = tokenize(unquoted, true)) &&
                      
                      (excess =
                        unquoted.indexOf(")", unquoted.length - excess) -
                        unquoted.length)
                    ) {
                      
                      match[0] = match[0].slice(0, excess);
                      match[2] = unquoted.slice(0, excess);
                    }

                    
                    return match.slice(0, 3);
                  },
                },

                filter: {
                  TAG: function (nodeNameSelector) {
                    var nodeName = nodeNameSelector
                      .replace(runescape, funescape)
                      .toLowerCase();
                    return nodeNameSelector === "*"
                      ? function () {
                          return true;
                        }
                      : function (elem) {
                          return (
                            elem.nodeName &&
                            elem.nodeName.toLowerCase() === nodeName
                          );
                        };
                  },

                  CLASS: function (className) {
                    var pattern = classCache[className + " "];

                    return (
                      pattern ||
                      ((pattern = new RegExp(
                        "(^|" +
                          whitespace +
                          ")" +
                          className +
                          "(" +
                          whitespace +
                          "|$)"
                      )) &&
                        classCache(className, function (elem) {
                          return pattern.test(
                            (typeof elem.className === "string" &&
                              elem.className) ||
                              (typeof elem.getAttribute !== "undefined" &&
                                elem.getAttribute("class")) ||
                              ""
                          );
                        }))
                    );
                  },

                  ATTR: function (name, operator, check) {
                    return function (elem) {
                      var result = Sizzle.attr(elem, name);

                      if (result == null) {
                        return operator === "!=";
                      }
                      if (!operator) {
                        return true;
                      }

                      result += "";

                       

                      return operator === "="
                        ? result === check
                        : operator === "!="
                        ? result !== check
                        : operator === "^="
                        ? check && result.indexOf(check) === 0
                        : operator === "*="
                        ? check && result.indexOf(check) > -1
                        : operator === "$="
                        ? check && result.slice(-check.length) === check
                        : operator === "~="
                        ? (
                            " " +
                            result.replace(rwhitespace, " ") +
                            " "
                          ).indexOf(check) > -1
                        : operator === "|="
                        ? result === check ||
                          result.slice(0, check.length + 1) === check + "-"
                        : false;
                       
                    };
                  },

                  CHILD: function (type, what, _argument, first, last) {
                    var simple = type.slice(0, 3) !== "nth",
                      forward = type.slice(-4) !== "last",
                      ofType = what === "of-type";

                    return first === 1 && last === 0
                      ? 
                        function (elem) {
                          return !!elem.parentNode;
                        }
                      : function (elem, _context, xml) {
                          var cache,
                            uniqueCache,
                            outerCache,
                            node,
                            nodeIndex,
                            start,
                            dir =
                              simple !== forward
                                ? "nextSibling"
                                : "previousSibling",
                            parent = elem.parentNode,
                            name = ofType && elem.nodeName.toLowerCase(),
                            useCache = !xml && !ofType,
                            diff = false;

                          if (parent) {
                            
                            if (simple) {
                              while (dir) {
                                node = elem;
                                while ((node = node[dir])) {
                                  if (
                                    ofType
                                      ? node.nodeName.toLowerCase() === name
                                      : node.nodeType === 1
                                  ) {
                                    return false;
                                  }
                                }

                                
                                start = dir =
                                  type === "only" && !start && "nextSibling";
                              }
                              return true;
                            }

                            start = [
                              forward ? parent.firstChild : parent.lastChild,
                            ];

                            
                            if (forward && useCache) {
                              

                              
                              node = parent;
                              outerCache =
                                node[expando] || (node[expando] = {});

                              
                              
                              uniqueCache =
                                outerCache[node.uniqueID] ||
                                (outerCache[node.uniqueID] = {});

                              cache = uniqueCache[type] || [];
                              nodeIndex = cache[0] === dirruns && cache[1];
                              diff = nodeIndex && cache[2];
                              node = nodeIndex && parent.childNodes[nodeIndex];

                              while (
                                (node =
                                  (++nodeIndex && node && node[dir]) ||
                                  
                                  (diff = nodeIndex = 0) ||
                                  start.pop())
                              ) {
                                
                                if (
                                  node.nodeType === 1 &&
                                  ++diff &&
                                  node === elem
                                ) {
                                  uniqueCache[type] = [
                                    dirruns,
                                    nodeIndex,
                                    diff,
                                  ];
                                  break;
                                }
                              }
                            } else {
                              
                              if (useCache) {
                                
                                node = elem;
                                outerCache =
                                  node[expando] || (node[expando] = {});

                                
                                
                                uniqueCache =
                                  outerCache[node.uniqueID] ||
                                  (outerCache[node.uniqueID] = {});

                                cache = uniqueCache[type] || [];
                                nodeIndex = cache[0] === dirruns && cache[1];
                                diff = nodeIndex;
                              }

                              
                              
                              if (diff === false) {
                                
                                while (
                                  (node =
                                    (++nodeIndex && node && node[dir]) ||
                                    (diff = nodeIndex = 0) ||
                                    start.pop())
                                ) {
                                  if (
                                    (ofType
                                      ? node.nodeName.toLowerCase() === name
                                      : node.nodeType === 1) &&
                                    ++diff
                                  ) {
                                    
                                    if (useCache) {
                                      outerCache =
                                        node[expando] || (node[expando] = {});

                                      
                                      
                                      uniqueCache =
                                        outerCache[node.uniqueID] ||
                                        (outerCache[node.uniqueID] = {});

                                      uniqueCache[type] = [dirruns, diff];
                                    }

                                    if (node === elem) {
                                      break;
                                    }
                                  }
                                }
                              }
                            }

                            
                            diff -= last;
                            return (
                              diff === first ||
                              (diff % first === 0 && diff / first >= 0)
                            );
                          }
                        };
                  },

                  PSEUDO: function (pseudo, argument) {
                    
                    
                    
                    
                    var args,
                      fn =
                        Expr.pseudos[pseudo] ||
                        Expr.setFilters[pseudo.toLowerCase()] ||
                        Sizzle.error("unsupported pseudo: " + pseudo);

                    
                    
                    
                    if (fn[expando]) {
                      return fn(argument);
                    }

                    
                    if (fn.length > 1) {
                      args = [pseudo, pseudo, "", argument];
                      return Expr.setFilters.hasOwnProperty(
                        pseudo.toLowerCase()
                      )
                        ? markFunction(function (seed, matches) {
                            var idx,
                              matched = fn(seed, argument),
                              i = matched.length;
                            while (i--) {
                              idx = indexOf(seed, matched[i]);
                              seed[idx] = !(matches[idx] = matched[i]);
                            }
                          })
                        : function (elem) {
                            return fn(elem, 0, args);
                          };
                    }

                    return fn;
                  },
                },

                pseudos: {
                  
                  not: markFunction(function (selector) {
                    
                    
                    
                    var input = [],
                      results = [],
                      matcher = compile(selector.replace(rtrim, "$1"));

                    return matcher[expando]
                      ? markFunction(function (seed, matches, _context, xml) {
                          var elem,
                            unmatched = matcher(seed, null, xml, []),
                            i = seed.length;

                          
                          while (i--) {
                            if ((elem = unmatched[i])) {
                              seed[i] = !(matches[i] = elem);
                            }
                          }
                        })
                      : function (elem, _context, xml) {
                          input[0] = elem;
                          matcher(input, null, xml, results);

                          
                          input[0] = null;
                          return !results.pop();
                        };
                  }),

                  has: markFunction(function (selector) {
                    return function (elem) {
                      return Sizzle(selector, elem).length > 0;
                    };
                  }),

                  contains: markFunction(function (text) {
                    text = text.replace(runescape, funescape);
                    return function (elem) {
                      return (
                        (elem.textContent || getText(elem)).indexOf(text) > -1
                      );
                    };
                  }),

                  
                  
                  
                  
                  
                  
                  
                  lang: markFunction(function (lang) {
                    
                    if (!ridentifier.test(lang || "")) {
                      Sizzle.error("unsupported lang: " + lang);
                    }
                    lang = lang.replace(runescape, funescape).toLowerCase();
                    return function (elem) {
                      var elemLang;
                      do {
                        if (
                          (elemLang = documentIsHTML
                            ? elem.lang
                            : elem.getAttribute("xml:lang") ||
                              elem.getAttribute("lang"))
                        ) {
                          elemLang = elemLang.toLowerCase();
                          return (
                            elemLang === lang ||
                            elemLang.indexOf(lang + "-") === 0
                          );
                        }
                      } while ((elem = elem.parentNode) && elem.nodeType === 1);
                      return false;
                    };
                  }),

                  
                  target: function (elem) {
                    var hash = window.location && window.location.hash;
                    return hash && hash.slice(1) === elem.id;
                  },

                  root: function (elem) {
                    return elem === docElem;
                  },

                  focus: function (elem) {
                    return (
                      elem === document.activeElement &&
                      (!document.hasFocus || document.hasFocus()) &&
                      !!(elem.type || elem.href || ~elem.tabIndex)
                    );
                  },

                  
                  enabled: createDisabledPseudo(false),
                  disabled: createDisabledPseudo(true),

                  checked: function (elem) {
                    
                    
                    var nodeName = elem.nodeName.toLowerCase();
                    return (
                      (nodeName === "input" && !!elem.checked) ||
                      (nodeName === "option" && !!elem.selected)
                    );
                  },

                  selected: function (elem) {
                    
                    
                    if (elem.parentNode) {
                      
                      elem.parentNode.selectedIndex;
                    }

                    return elem.selected === true;
                  },

                  
                  empty: function (elem) {
                    
                    
                    
                    
                    for (
                      elem = elem.firstChild;
                      elem;
                      elem = elem.nextSibling
                    ) {
                      if (elem.nodeType < 6) {
                        return false;
                      }
                    }
                    return true;
                  },

                  parent: function (elem) {
                    return !Expr.pseudos["empty"](elem);
                  },

                  
                  header: function (elem) {
                    return rheader.test(elem.nodeName);
                  },

                  input: function (elem) {
                    return rinputs.test(elem.nodeName);
                  },

                  button: function (elem) {
                    var name = elem.nodeName.toLowerCase();
                    return (
                      (name === "input" && elem.type === "button") ||
                      name === "button"
                    );
                  },

                  text: function (elem) {
                    var attr;
                    return (
                      elem.nodeName.toLowerCase() === "input" &&
                      elem.type === "text" &&
                      
                      
                      ((attr = elem.getAttribute("type")) == null ||
                        attr.toLowerCase() === "text")
                    );
                  },

                  
                  first: createPositionalPseudo(function () {
                    return [0];
                  }),

                  last: createPositionalPseudo(function (
                    _matchIndexes,
                    length
                  ) {
                    return [length - 1];
                  }),

                  eq: createPositionalPseudo(function (
                    _matchIndexes,
                    length,
                    argument
                  ) {
                    return [argument < 0 ? argument + length : argument];
                  }),

                  even: createPositionalPseudo(function (matchIndexes, length) {
                    var i = 0;
                    for (; i < length; i += 2) {
                      matchIndexes.push(i);
                    }
                    return matchIndexes;
                  }),

                  odd: createPositionalPseudo(function (matchIndexes, length) {
                    var i = 1;
                    for (; i < length; i += 2) {
                      matchIndexes.push(i);
                    }
                    return matchIndexes;
                  }),

                  lt: createPositionalPseudo(function (
                    matchIndexes,
                    length,
                    argument
                  ) {
                    var i =
                      argument < 0
                        ? argument + length
                        : argument > length
                        ? length
                        : argument;
                    for (; --i >= 0; ) {
                      matchIndexes.push(i);
                    }
                    return matchIndexes;
                  }),

                  gt: createPositionalPseudo(function (
                    matchIndexes,
                    length,
                    argument
                  ) {
                    var i = argument < 0 ? argument + length : argument;
                    for (; ++i < length; ) {
                      matchIndexes.push(i);
                    }
                    return matchIndexes;
                  }),
                },
              };

              Expr.pseudos["nth"] = Expr.pseudos["eq"];

              
              for (i in {
                radio: true,
                checkbox: true,
                file: true,
                password: true,
                image: true,
              }) {
                Expr.pseudos[i] = createInputPseudo(i);
              }
              for (i in { submit: true, reset: true }) {
                Expr.pseudos[i] = createButtonPseudo(i);
              }

              
              function setFilters() {}
              setFilters.prototype = Expr.filters = Expr.pseudos;
              Expr.setFilters = new setFilters();

              tokenize = Sizzle.tokenize = function (selector, parseOnly) {
                var matched,
                  match,
                  tokens,
                  type,
                  soFar,
                  groups,
                  preFilters,
                  cached = tokenCache[selector + " "];

                if (cached) {
                  return parseOnly ? 0 : cached.slice(0);
                }

                soFar = selector;
                groups = [];
                preFilters = Expr.preFilter;

                while (soFar) {
                  
                  if (!matched || (match = rcomma.exec(soFar))) {
                    if (match) {
                      
                      soFar = soFar.slice(match[0].length) || soFar;
                    }
                    groups.push((tokens = []));
                  }

                  matched = false;

                  
                  if ((match = rcombinators.exec(soFar))) {
                    matched = match.shift();
                    tokens.push({
                      value: matched,

                      
                      type: match[0].replace(rtrim, " "),
                    });
                    soFar = soFar.slice(matched.length);
                  }

                  
                  for (type in Expr.filter) {
                    if (
                      (match = matchExpr[type].exec(soFar)) &&
                      (!preFilters[type] || (match = preFilters[type](match)))
                    ) {
                      matched = match.shift();
                      tokens.push({
                        value: matched,
                        type: type,
                        matches: match,
                      });
                      soFar = soFar.slice(matched.length);
                    }
                  }

                  if (!matched) {
                    break;
                  }
                }

                
                
                
                return parseOnly
                  ? soFar.length
                  : soFar
                  ? Sizzle.error(selector)
                  : 
                    tokenCache(selector, groups).slice(0);
              };

              function toSelector(tokens) {
                var i = 0,
                  len = tokens.length,
                  selector = "";
                for (; i < len; i++) {
                  selector += tokens[i].value;
                }
                return selector;
              }

              function addCombinator(matcher, combinator, base) {
                var dir = combinator.dir,
                  skip = combinator.next,
                  key = skip || dir,
                  checkNonElements = base && key === "parentNode",
                  doneName = done++;

                return combinator.first
                  ? 
                    function (elem, context, xml) {
                      while ((elem = elem[dir])) {
                        if (elem.nodeType === 1 || checkNonElements) {
                          return matcher(elem, context, xml);
                        }
                      }
                      return false;
                    }
                  : 
                    function (elem, context, xml) {
                      var oldCache,
                        uniqueCache,
                        outerCache,
                        newCache = [dirruns, doneName];

                      
                      if (xml) {
                        while ((elem = elem[dir])) {
                          if (elem.nodeType === 1 || checkNonElements) {
                            if (matcher(elem, context, xml)) {
                              return true;
                            }
                          }
                        }
                      } else {
                        while ((elem = elem[dir])) {
                          if (elem.nodeType === 1 || checkNonElements) {
                            outerCache = elem[expando] || (elem[expando] = {});

                            
                            
                            uniqueCache =
                              outerCache[elem.uniqueID] ||
                              (outerCache[elem.uniqueID] = {});

                            if (skip && skip === elem.nodeName.toLowerCase()) {
                              elem = elem[dir] || elem;
                            } else if (
                              (oldCache = uniqueCache[key]) &&
                              oldCache[0] === dirruns &&
                              oldCache[1] === doneName
                            ) {
                              
                              return (newCache[2] = oldCache[2]);
                            } else {
                              
                              uniqueCache[key] = newCache;

                              
                              if ((newCache[2] = matcher(elem, context, xml))) {
                                return true;
                              }
                            }
                          }
                        }
                      }
                      return false;
                    };
              }

              function elementMatcher(matchers) {
                return matchers.length > 1
                  ? function (elem, context, xml) {
                      var i = matchers.length;
                      while (i--) {
                        if (!matchers[i](elem, context, xml)) {
                          return false;
                        }
                      }
                      return true;
                    }
                  : matchers[0];
              }

              function multipleContexts(selector, contexts, results) {
                var i = 0,
                  len = contexts.length;
                for (; i < len; i++) {
                  Sizzle(selector, contexts[i], results);
                }
                return results;
              }

              function condense(unmatched, map, filter, context, xml) {
                var elem,
                  newUnmatched = [],
                  i = 0,
                  len = unmatched.length,
                  mapped = map != null;

                for (; i < len; i++) {
                  if ((elem = unmatched[i])) {
                    if (!filter || filter(elem, context, xml)) {
                      newUnmatched.push(elem);
                      if (mapped) {
                        map.push(i);
                      }
                    }
                  }
                }

                return newUnmatched;
              }

              function setMatcher(
                preFilter,
                selector,
                matcher,
                postFilter,
                postFinder,
                postSelector
              ) {
                if (postFilter && !postFilter[expando]) {
                  postFilter = setMatcher(postFilter);
                }
                if (postFinder && !postFinder[expando]) {
                  postFinder = setMatcher(postFinder, postSelector);
                }
                return markFunction(function (seed, results, context, xml) {
                  var temp,
                    i,
                    elem,
                    preMap = [],
                    postMap = [],
                    preexisting = results.length,
                    
                    elems =
                      seed ||
                      multipleContexts(
                        selector || "*",
                        context.nodeType ? [context] : context,
                        []
                      ),
                    
                    matcherIn =
                      preFilter && (seed || !selector)
                        ? condense(elems, preMap, preFilter, context, xml)
                        : elems,
                    matcherOut = matcher
                      ? 
                        postFinder ||
                        (seed ? preFilter : preexisting || postFilter)
                        ? 
                          []
                        : 
                          results
                      : matcherIn;

                  
                  if (matcher) {
                    matcher(matcherIn, matcherOut, context, xml);
                  }

                  
                  if (postFilter) {
                    temp = condense(matcherOut, postMap);
                    postFilter(temp, [], context, xml);

                    
                    i = temp.length;
                    while (i--) {
                      if ((elem = temp[i])) {
                        matcherOut[postMap[i]] = !(matcherIn[postMap[i]] =
                          elem);
                      }
                    }
                  }

                  if (seed) {
                    if (postFinder || preFilter) {
                      if (postFinder) {
                        
                        temp = [];
                        i = matcherOut.length;
                        while (i--) {
                          if ((elem = matcherOut[i])) {
                            
                            temp.push((matcherIn[i] = elem));
                          }
                        }
                        postFinder(null, (matcherOut = []), temp, xml);
                      }

                      
                      i = matcherOut.length;
                      while (i--) {
                        if (
                          (elem = matcherOut[i]) &&
                          (temp = postFinder
                            ? indexOf(seed, elem)
                            : preMap[i]) > -1
                        ) {
                          seed[temp] = !(results[temp] = elem);
                        }
                      }
                    }

                    
                  } else {
                    matcherOut = condense(
                      matcherOut === results
                        ? matcherOut.splice(preexisting, matcherOut.length)
                        : matcherOut
                    );
                    if (postFinder) {
                      postFinder(null, results, matcherOut, xml);
                    } else {
                      push.apply(results, matcherOut);
                    }
                  }
                });
              }

              function matcherFromTokens(tokens) {
                var checkContext,
                  matcher,
                  j,
                  len = tokens.length,
                  leadingRelative = Expr.relative[tokens[0].type],
                  implicitRelative = leadingRelative || Expr.relative[" "],
                  i = leadingRelative ? 1 : 0,
                  
                  matchContext = addCombinator(
                    function (elem) {
                      return elem === checkContext;
                    },
                    implicitRelative,
                    true
                  ),
                  matchAnyContext = addCombinator(
                    function (elem) {
                      return indexOf(checkContext, elem) > -1;
                    },
                    implicitRelative,
                    true
                  ),
                  matchers = [
                    function (elem, context, xml) {
                      var ret =
                        (!leadingRelative &&
                          (xml || context !== outermostContext)) ||
                        ((checkContext = context).nodeType
                          ? matchContext(elem, context, xml)
                          : matchAnyContext(elem, context, xml));

                      
                      checkContext = null;
                      return ret;
                    },
                  ];

                for (; i < len; i++) {
                  if ((matcher = Expr.relative[tokens[i].type])) {
                    matchers = [
                      addCombinator(elementMatcher(matchers), matcher),
                    ];
                  } else {
                    matcher = Expr.filter[tokens[i].type].apply(
                      null,
                      tokens[i].matches
                    );

                    
                    if (matcher[expando]) {
                      
                      j = ++i;
                      for (; j < len; j++) {
                        if (Expr.relative[tokens[j].type]) {
                          break;
                        }
                      }
                      return setMatcher(
                        i > 1 && elementMatcher(matchers),
                        i > 1 &&
                          toSelector(
                            
                            tokens.slice(0, i - 1).concat({
                              value: tokens[i - 2].type === " " ? "*" : "",
                            })
                          ).replace(rtrim, "$1"),
                        matcher,
                        i < j && matcherFromTokens(tokens.slice(i, j)),
                        j < len &&
                          matcherFromTokens((tokens = tokens.slice(j))),
                        j < len && toSelector(tokens)
                      );
                    }
                    matchers.push(matcher);
                  }
                }

                return elementMatcher(matchers);
              }

              function matcherFromGroupMatchers(elementMatchers, setMatchers) {
                var bySet = setMatchers.length > 0,
                  byElement = elementMatchers.length > 0,
                  superMatcher = function (
                    seed,
                    context,
                    xml,
                    results,
                    outermost
                  ) {
                    var elem,
                      j,
                      matcher,
                      matchedCount = 0,
                      i = "0",
                      unmatched = seed && [],
                      setMatched = [],
                      contextBackup = outermostContext,
                      
                      elems =
                        seed || (byElement && Expr.find["TAG"]("*", outermost)),
                      
                      dirrunsUnique = (dirruns +=
                        contextBackup == null ? 1 : Math.random() || 0.1),
                      len = elems.length;

                    if (outermost) {
                      
                      
                      
                      
                      outermostContext =
                        context == document || context || outermost;
                    }

                    
                    
                    
                    for (; i !== len && (elem = elems[i]) != null; i++) {
                      if (byElement && elem) {
                        j = 0;

                        
                        
                        
                        
                        if (!context && elem.ownerDocument != document) {
                          setDocument(elem);
                          xml = !documentIsHTML;
                        }
                        while ((matcher = elementMatchers[j++])) {
                          if (matcher(elem, context || document, xml)) {
                            results.push(elem);
                            break;
                          }
                        }
                        if (outermost) {
                          dirruns = dirrunsUnique;
                        }
                      }

                      
                      if (bySet) {
                        
                        if ((elem = !matcher && elem)) {
                          matchedCount--;
                        }

                        
                        if (seed) {
                          unmatched.push(elem);
                        }
                      }
                    }

                    
                    
                    matchedCount += i;

                    
                    
                    
                    
                    
                    
                    
                    if (bySet && i !== matchedCount) {
                      j = 0;
                      while ((matcher = setMatchers[j++])) {
                        matcher(unmatched, setMatched, context, xml);
                      }

                      if (seed) {
                        
                        if (matchedCount > 0) {
                          while (i--) {
                            if (!(unmatched[i] || setMatched[i])) {
                              setMatched[i] = pop.call(results);
                            }
                          }
                        }

                        
                        setMatched = condense(setMatched);
                      }

                      
                      push.apply(results, setMatched);

                      
                      if (
                        outermost &&
                        !seed &&
                        setMatched.length > 0 &&
                        matchedCount + setMatchers.length > 1
                      ) {
                        Sizzle.uniqueSort(results);
                      }
                    }

                    
                    if (outermost) {
                      dirruns = dirrunsUnique;
                      outermostContext = contextBackup;
                    }

                    return unmatched;
                  };

                return bySet ? markFunction(superMatcher) : superMatcher;
              }

              compile = Sizzle.compile = function (
                selector,
                match  
              ) {
                var i,
                  setMatchers = [],
                  elementMatchers = [],
                  cached = compilerCache[selector + " "];

                if (!cached) {
                  
                  if (!match) {
                    match = tokenize(selector);
                  }
                  i = match.length;
                  while (i--) {
                    cached = matcherFromTokens(match[i]);
                    if (cached[expando]) {
                      setMatchers.push(cached);
                    } else {
                      elementMatchers.push(cached);
                    }
                  }

                  
                  cached = compilerCache(
                    selector,
                    matcherFromGroupMatchers(elementMatchers, setMatchers)
                  );

                  
                  cached.selector = selector;
                }
                return cached;
              };

              

              select = Sizzle.select = function (
                selector,
                context,
                results,
                seed
              ) {
                var i,
                  tokens,
                  token,
                  type,
                  find,
                  compiled = typeof selector === "function" && selector,
                  match =
                    !seed &&
                    tokenize((selector = compiled.selector || selector));

                results = results || [];

                
                
                if (match.length === 1) {
                  
                  tokens = match[0] = match[0].slice(0);
                  if (
                    tokens.length > 2 &&
                    (token = tokens[0]).type === "ID" &&
                    context.nodeType === 9 &&
                    documentIsHTML &&
                    Expr.relative[tokens[1].type]
                  ) {
                    context = (Expr.find["ID"](
                      token.matches[0].replace(runescape, funescape),
                      context
                    ) || [])[0];
                    if (!context) {
                      return results;

                      
                    } else if (compiled) {
                      context = context.parentNode;
                    }

                    selector = selector.slice(tokens.shift().value.length);
                  }

                  
                  i = matchExpr["needsContext"].test(selector)
                    ? 0
                    : tokens.length;
                  while (i--) {
                    token = tokens[i];

                    
                    if (Expr.relative[(type = token.type)]) {
                      break;
                    }
                    if ((find = Expr.find[type])) {
                      
                      if (
                        (seed = find(
                          token.matches[0].replace(runescape, funescape),
                          (rsibling.test(tokens[0].type) &&
                            testContext(context.parentNode)) ||
                            context
                        ))
                      ) {
                        
                        tokens.splice(i, 1);
                        selector = seed.length && toSelector(tokens);
                        if (!selector) {
                          push.apply(results, seed);
                          return results;
                        }

                        break;
                      }
                    }
                  }
                }

                
                
                (compiled || compile(selector, match))(
                  seed,
                  context,
                  !documentIsHTML,
                  results,
                  !context ||
                    (rsibling.test(selector) &&
                      testContext(context.parentNode)) ||
                    context
                );
                return results;
              };

              

              
              support.sortStable =
                expando.split("").sort(sortOrder).join("") === expando;

              
              
              support.detectDuplicates = !!hasDuplicate;

              
              setDocument();

              
              
              support.sortDetached = assert(function (el) {
                
                return (
                  el.compareDocumentPosition(
                    document.createElement("fieldset")
                  ) & 1
                );
              });

              
              
              
              if (
                !assert(function (el) {
                  el.innerHTML = "<a href='#'></a>";
                  return el.firstChild.getAttribute("href") === "#";
                })
              ) {
                addHandle(
                  "type|href|height|width",
                  function (elem, name, isXML) {
                    if (!isXML) {
                      return elem.getAttribute(
                        name,
                        name.toLowerCase() === "type" ? 1 : 2
                      );
                    }
                  }
                );
              }

              
              
              if (
                !support.attributes ||
                !assert(function (el) {
                  el.innerHTML = "<input/>";
                  el.firstChild.setAttribute("value", "");
                  return el.firstChild.getAttribute("value") === "";
                })
              ) {
                addHandle("value", function (elem, _name, isXML) {
                  if (!isXML && elem.nodeName.toLowerCase() === "input") {
                    return elem.defaultValue;
                  }
                });
              }

              
              
              if (
                !assert(function (el) {
                  return el.getAttribute("disabled") == null;
                })
              ) {
                addHandle(booleans, function (elem, name, isXML) {
                  var val;
                  if (!isXML) {
                    return elem[name] === true
                      ? name.toLowerCase()
                      : (val = elem.getAttributeNode(name)) && val.specified
                      ? val.value
                      : null;
                  }
                });
              }

              return Sizzle;
            })(window);

          jQuery.find = Sizzle;
          jQuery.expr = Sizzle.selectors;

          
          jQuery.expr[":"] = jQuery.expr.pseudos;
          jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
          jQuery.text = Sizzle.getText;
          jQuery.isXMLDoc = Sizzle.isXML;
          jQuery.contains = Sizzle.contains;
          jQuery.escapeSelector = Sizzle.escape;

          var dir = function (elem, dir, until) {
            var matched = [],
              truncate = until !== undefined;

            while ((elem = elem[dir]) && elem.nodeType !== 9) {
              if (elem.nodeType === 1) {
                if (truncate && jQuery(elem).is(until)) {
                  break;
                }
                matched.push(elem);
              }
            }
            return matched;
          };

          var siblings = function (n, elem) {
            var matched = [];

            for (; n; n = n.nextSibling) {
              if (n.nodeType === 1 && n !== elem) {
                matched.push(n);
              }
            }

            return matched;
          };

          var rneedsContext = jQuery.expr.match.needsContext;

          function nodeName(elem, name) {
            return (
              elem.nodeName &&
              elem.nodeName.toLowerCase() === name.toLowerCase()
            );
          }
          var rsingleTag =
            /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;

          
          function winnow(elements, qualifier, not) {
            if (isFunction(qualifier)) {
              return jQuery.grep(elements, function (elem, i) {
                return !!qualifier.call(elem, i, elem) !== not;
              });
            }

            
            if (qualifier.nodeType) {
              return jQuery.grep(elements, function (elem) {
                return (elem === qualifier) !== not;
              });
            }

            
            if (typeof qualifier !== "string") {
              return jQuery.grep(elements, function (elem) {
                return indexOf.call(qualifier, elem) > -1 !== not;
              });
            }

            
            return jQuery.filter(qualifier, elements, not);
          }

          jQuery.filter = function (expr, elems, not) {
            var elem = elems[0];

            if (not) {
              expr = ":not(" + expr + ")";
            }

            if (elems.length === 1 && elem.nodeType === 1) {
              return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
            }

            return jQuery.find.matches(
              expr,
              jQuery.grep(elems, function (elem) {
                return elem.nodeType === 1;
              })
            );
          };

          jQuery.fn.extend({
            find: function (selector) {
              var i,
                ret,
                len = this.length,
                self = this;

              if (typeof selector !== "string") {
                return this.pushStack(
                  jQuery(selector).filter(function () {
                    for (i = 0; i < len; i++) {
                      if (jQuery.contains(self[i], this)) {
                        return true;
                      }
                    }
                  })
                );
              }

              ret = this.pushStack([]);

              for (i = 0; i < len; i++) {
                jQuery.find(selector, self[i], ret);
              }

              return len > 1 ? jQuery.uniqueSort(ret) : ret;
            },
            filter: function (selector) {
              return this.pushStack(winnow(this, selector || [], false));
            },
            not: function (selector) {
              return this.pushStack(winnow(this, selector || [], true));
            },
            is: function (selector) {
              return !!winnow(
                this,

                
                
                typeof selector === "string" && rneedsContext.test(selector)
                  ? jQuery(selector)
                  : selector || [],
                false
              ).length;
            },
          });

          

          
          var rootjQuery,
            
            
            
            
            rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
            init = (jQuery.fn.init = function (selector, context, root) {
              var match, elem;

              
              if (!selector) {
                return this;
              }

              
              
              root = root || rootjQuery;

              
              if (typeof selector === "string") {
                if (
                  selector[0] === "<" &&
                  selector[selector.length - 1] === ">" &&
                  selector.length >= 3
                ) {
                  
                  match = [null, selector, null];
                } else {
                  match = rquickExpr.exec(selector);
                }

                
                if (match && (match[1] || !context)) {
                  
                  if (match[1]) {
                    context = context instanceof jQuery ? context[0] : context;

                    
                    
                    jQuery.merge(
                      this,
                      jQuery.parseHTML(
                        match[1],
                        context && context.nodeType
                          ? context.ownerDocument || context
                          : document,
                        true
                      )
                    );

                    
                    if (
                      rsingleTag.test(match[1]) &&
                      jQuery.isPlainObject(context)
                    ) {
                      for (match in context) {
                        
                        if (isFunction(this[match])) {
                          this[match](context[match]);

                          
                        } else {
                          this.attr(match, context[match]);
                        }
                      }
                    }

                    return this;

                    
                  } else {
                    elem = document.getElementById(match[2]);

                    if (elem) {
                      
                      this[0] = elem;
                      this.length = 1;
                    }
                    return this;
                  }

                  
                } else if (!context || context.jquery) {
                  return (context || root).find(selector);

                  
                  
                } else {
                  return this.constructor(context).find(selector);
                }

                
              } else if (selector.nodeType) {
                this[0] = selector;
                this.length = 1;
                return this;

                
                
              } else if (isFunction(selector)) {
                return root.ready !== undefined
                  ? root.ready(selector)
                  : 
                    selector(jQuery);
              }

              return jQuery.makeArray(selector, this);
            });

          
          init.prototype = jQuery.fn;

          
          rootjQuery = jQuery(document);

          var rparentsprev = /^(?:parents|prev(?:Until|All))/,
            
            guaranteedUnique = {
              children: true,
              contents: true,
              next: true,
              prev: true,
            };

          jQuery.fn.extend({
            has: function (target) {
              var targets = jQuery(target, this),
                l = targets.length;

              return this.filter(function () {
                var i = 0;
                for (; i < l; i++) {
                  if (jQuery.contains(this, targets[i])) {
                    return true;
                  }
                }
              });
            },

            closest: function (selectors, context) {
              var cur,
                i = 0,
                l = this.length,
                matched = [],
                targets = typeof selectors !== "string" && jQuery(selectors);

              
              if (!rneedsContext.test(selectors)) {
                for (; i < l; i++) {
                  for (
                    cur = this[i];
                    cur && cur !== context;
                    cur = cur.parentNode
                  ) {
                    
                    if (
                      cur.nodeType < 11 &&
                      (targets
                        ? targets.index(cur) > -1
                        : 
                          cur.nodeType === 1 &&
                          jQuery.find.matchesSelector(cur, selectors))
                    ) {
                      matched.push(cur);
                      break;
                    }
                  }
                }
              }

              return this.pushStack(
                matched.length > 1 ? jQuery.uniqueSort(matched) : matched
              );
            },

            
            index: function (elem) {
              
              if (!elem) {
                return this[0] && this[0].parentNode
                  ? this.first().prevAll().length
                  : -1;
              }

              
              if (typeof elem === "string") {
                return indexOf.call(jQuery(elem), this[0]);
              }

              
              return indexOf.call(
                this,

                
                elem.jquery ? elem[0] : elem
              );
            },

            add: function (selector, context) {
              return this.pushStack(
                jQuery.uniqueSort(
                  jQuery.merge(this.get(), jQuery(selector, context))
                )
              );
            },

            addBack: function (selector) {
              return this.add(
                selector == null
                  ? this.prevObject
                  : this.prevObject.filter(selector)
              );
            },
          });

          function sibling(cur, dir) {
            while ((cur = cur[dir]) && cur.nodeType !== 1) {}
            return cur;
          }

          jQuery.each(
            {
              parent: function (elem) {
                var parent = elem.parentNode;
                return parent && parent.nodeType !== 11 ? parent : null;
              },
              parents: function (elem) {
                return dir(elem, "parentNode");
              },
              parentsUntil: function (elem, _i, until) {
                return dir(elem, "parentNode", until);
              },
              next: function (elem) {
                return sibling(elem, "nextSibling");
              },
              prev: function (elem) {
                return sibling(elem, "previousSibling");
              },
              nextAll: function (elem) {
                return dir(elem, "nextSibling");
              },
              prevAll: function (elem) {
                return dir(elem, "previousSibling");
              },
              nextUntil: function (elem, _i, until) {
                return dir(elem, "nextSibling", until);
              },
              prevUntil: function (elem, _i, until) {
                return dir(elem, "previousSibling", until);
              },
              siblings: function (elem) {
                return siblings((elem.parentNode || {}).firstChild, elem);
              },
              children: function (elem) {
                return siblings(elem.firstChild);
              },
              contents: function (elem) {
                if (
                  elem.contentDocument != null &&
                  
                  
                  
                  getProto(elem.contentDocument)
                ) {
                  return elem.contentDocument;
                }

                
                
                
                if (nodeName(elem, "template")) {
                  elem = elem.content || elem;
                }

                return jQuery.merge([], elem.childNodes);
              },
            },
            function (name, fn) {
              jQuery.fn[name] = function (until, selector) {
                var matched = jQuery.map(this, fn, until);

                if (name.slice(-5) !== "Until") {
                  selector = until;
                }

                if (selector && typeof selector === "string") {
                  matched = jQuery.filter(selector, matched);
                }

                if (this.length > 1) {
                  
                  if (!guaranteedUnique[name]) {
                    jQuery.uniqueSort(matched);
                  }

                  
                  if (rparentsprev.test(name)) {
                    matched.reverse();
                  }
                }

                return this.pushStack(matched);
              };
            }
          );
          var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;

          
          function createOptions(options) {
            var object = {};
            jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {
              object[flag] = true;
            });
            return object;
          }

          

          jQuery.Callbacks = function (options) {
            
            
            options =
              typeof options === "string"
                ? createOptions(options)
                : jQuery.extend({}, options);

            var 
              firing,
              
              memory,
              
              fired,
              
              locked,
              
              list = [],
              
              queue = [],
              
              firingIndex = -1,
              
              fire = function () {
                
                locked = locked || options.once;

                
                
                fired = firing = true;
                for (; queue.length; firingIndex = -1) {
                  memory = queue.shift();
                  while (++firingIndex < list.length) {
                    
                    if (
                      list[firingIndex].apply(memory[0], memory[1]) === false &&
                      options.stopOnFalse
                    ) {
                      
                      firingIndex = list.length;
                      memory = false;
                    }
                  }
                }

                
                if (!options.memory) {
                  memory = false;
                }

                firing = false;

                
                if (locked) {
                  
                  if (memory) {
                    list = [];

                    
                  } else {
                    list = "";
                  }
                }
              },
              
              self = {
                
                add: function () {
                  if (list) {
                    
                    if (memory && !firing) {
                      firingIndex = list.length - 1;
                      queue.push(memory);
                    }

                    (function add(args) {
                      jQuery.each(args, function (_, arg) {
                        if (isFunction(arg)) {
                          if (!options.unique || !self.has(arg)) {
                            list.push(arg);
                          }
                        } else if (
                          arg &&
                          arg.length &&
                          toType(arg) !== "string"
                        ) {
                          
                          add(arg);
                        }
                      });
                    })(arguments);

                    if (memory && !firing) {
                      fire();
                    }
                  }
                  return this;
                },

                
                remove: function () {
                  jQuery.each(arguments, function (_, arg) {
                    var index;
                    while ((index = jQuery.inArray(arg, list, index)) > -1) {
                      list.splice(index, 1);

                      
                      if (index <= firingIndex) {
                        firingIndex--;
                      }
                    }
                  });
                  return this;
                },

                
                
                has: function (fn) {
                  return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
                },

                
                empty: function () {
                  if (list) {
                    list = [];
                  }
                  return this;
                },

                
                
                
                disable: function () {
                  locked = queue = [];
                  list = memory = "";
                  return this;
                },
                disabled: function () {
                  return !list;
                },

                
                
                
                lock: function () {
                  locked = queue = [];
                  if (!memory && !firing) {
                    list = memory = "";
                  }
                  return this;
                },
                locked: function () {
                  return !!locked;
                },

                
                fireWith: function (context, args) {
                  if (!locked) {
                    args = args || [];
                    args = [context, args.slice ? args.slice() : args];
                    queue.push(args);
                    if (!firing) {
                      fire();
                    }
                  }
                  return this;
                },

                
                fire: function () {
                  self.fireWith(this, arguments);
                  return this;
                },

                
                fired: function () {
                  return !!fired;
                },
              };

            return self;
          };

          function Identity(v) {
            return v;
          }
          function Thrower(ex) {
            throw ex;
          }

          function adoptValue(value, resolve, reject, noValue) {
            var method;

            try {
              
              if (value && isFunction((method = value.promise))) {
                method.call(value).done(resolve).fail(reject);

                
              } else if (value && isFunction((method = value.then))) {
                method.call(value, resolve, reject);

                
              } else {
                
                
                
                resolve.apply(undefined, [value].slice(noValue));
              }

              
              
              
            } catch (value) {
              
              
              reject.apply(undefined, [value]);
            }
          }

          jQuery.extend({
            Deferred: function (func) {
              var tuples = [
                  
                  
                  [
                    "notify",
                    "progress",
                    jQuery.Callbacks("memory"),
                    jQuery.Callbacks("memory"),
                    2,
                  ],
                  [
                    "resolve",
                    "done",
                    jQuery.Callbacks("once memory"),
                    jQuery.Callbacks("once memory"),
                    0,
                    "resolved",
                  ],
                  [
                    "reject",
                    "fail",
                    jQuery.Callbacks("once memory"),
                    jQuery.Callbacks("once memory"),
                    1,
                    "rejected",
                  ],
                ],
                state = "pending",
                promise = {
                  state: function () {
                    return state;
                  },
                  always: function () {
                    deferred.done(arguments).fail(arguments);
                    return this;
                  },
                  catch: function (fn) {
                    return promise.then(null, fn);
                  },

                  
                  pipe: function ( ) {
                    var fns = arguments;

                    return jQuery
                      .Deferred(function (newDefer) {
                        jQuery.each(tuples, function (_i, tuple) {
                          
                          var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]];

                          
                          
                          
                          deferred[tuple[1]](function () {
                            var returned = fn && fn.apply(this, arguments);
                            if (returned && isFunction(returned.promise)) {
                              returned
                                .promise()
                                .progress(newDefer.notify)
                                .done(newDefer.resolve)
                                .fail(newDefer.reject);
                            } else {
                              newDefer[tuple[0] + "With"](
                                this,
                                fn ? [returned] : arguments
                              );
                            }
                          });
                        });
                        fns = null;
                      })
                      .promise();
                  },
                  then: function (onFulfilled, onRejected, onProgress) {
                    var maxDepth = 0;
                    function resolve(depth, deferred, handler, special) {
                      return function () {
                        var that = this,
                          args = arguments,
                          mightThrow = function () {
                            var returned, then;

                            
                            
                            
                            if (depth < maxDepth) {
                              return;
                            }

                            returned = handler.apply(that, args);

                            
                            
                            if (returned === deferred.promise()) {
                              throw new TypeError("Thenable self-resolution");
                            }

                            
                            
                            
                            
                            then =
                              returned &&
                              
                              
                              
                              (typeof returned === "object" ||
                                typeof returned === "function") &&
                              returned.then;

                            
                            if (isFunction(then)) {
                              
                              if (special) {
                                then.call(
                                  returned,
                                  resolve(
                                    maxDepth,
                                    deferred,
                                    Identity,
                                    special
                                  ),
                                  resolve(maxDepth, deferred, Thrower, special)
                                );

                                
                              } else {
                                
                                maxDepth++;

                                then.call(
                                  returned,
                                  resolve(
                                    maxDepth,
                                    deferred,
                                    Identity,
                                    special
                                  ),
                                  resolve(maxDepth, deferred, Thrower, special),
                                  resolve(
                                    maxDepth,
                                    deferred,
                                    Identity,
                                    deferred.notifyWith
                                  )
                                );
                              }

                              
                            } else {
                              
                              
                              if (handler !== Identity) {
                                that = undefined;
                                args = [returned];
                              }

                              
                              
                              (special || deferred.resolveWith)(that, args);
                            }
                          },
                          
                          process = special
                            ? mightThrow
                            : function () {
                                try {
                                  mightThrow();
                                } catch (e) {
                                  if (jQuery.Deferred.exceptionHook) {
                                    jQuery.Deferred.exceptionHook(
                                      e,
                                      process.stackTrace
                                    );
                                  }

                                  
                                  
                                  
                                  if (depth + 1 >= maxDepth) {
                                    
                                    
                                    if (handler !== Thrower) {
                                      that = undefined;
                                      args = [e];
                                    }

                                    deferred.rejectWith(that, args);
                                  }
                                }
                              };

                        
                        
                        
                        
                        if (depth) {
                          process();
                        } else {
                          
                          
                          if (jQuery.Deferred.getStackHook) {
                            process.stackTrace = jQuery.Deferred.getStackHook();
                          }
                          window.setTimeout(process);
                        }
                      };
                    }

                    return jQuery
                      .Deferred(function (newDefer) {
                        
                        tuples[0][3].add(
                          resolve(
                            0,
                            newDefer,
                            isFunction(onProgress) ? onProgress : Identity,
                            newDefer.notifyWith
                          )
                        );

                        
                        tuples[1][3].add(
                          resolve(
                            0,
                            newDefer,
                            isFunction(onFulfilled) ? onFulfilled : Identity
                          )
                        );

                        
                        tuples[2][3].add(
                          resolve(
                            0,
                            newDefer,
                            isFunction(onRejected) ? onRejected : Thrower
                          )
                        );
                      })
                      .promise();
                  },

                  
                  
                  promise: function (obj) {
                    return obj != null ? jQuery.extend(obj, promise) : promise;
                  },
                },
                deferred = {};

              
              jQuery.each(tuples, function (i, tuple) {
                var list = tuple[2],
                  stateString = tuple[5];

                
                
                
                promise[tuple[1]] = list.add;

                
                if (stateString) {
                  list.add(
                    function () {
                      
                      
                      state = stateString;
                    },

                    
                    
                    tuples[3 - i][2].disable,

                    
                    
                    tuples[3 - i][3].disable,

                    
                    tuples[0][2].lock,

                    
                    tuples[0][3].lock
                  );
                }

                
                
                
                list.add(tuple[3].fire);

                
                
                
                deferred[tuple[0]] = function () {
                  deferred[tuple[0] + "With"](
                    this === deferred ? undefined : this,
                    arguments
                  );
                  return this;
                };

                
                
                
                deferred[tuple[0] + "With"] = list.fireWith;
              });

              
              promise.promise(deferred);

              
              if (func) {
                func.call(deferred, deferred);
              }

              
              return deferred;
            },

            
            when: function (singleValue) {
              var 
                remaining = arguments.length,
                
                i = remaining,
                
                resolveContexts = Array(i),
                resolveValues = slice.call(arguments),
                
                primary = jQuery.Deferred(),
                
                updateFunc = function (i) {
                  return function (value) {
                    resolveContexts[i] = this;
                    resolveValues[i] =
                      arguments.length > 1 ? slice.call(arguments) : value;
                    if (!--remaining) {
                      primary.resolveWith(resolveContexts, resolveValues);
                    }
                  };
                };

              
              if (remaining <= 1) {
                adoptValue(
                  singleValue,
                  primary.done(updateFunc(i)).resolve,
                  primary.reject,
                  !remaining
                );

                
                if (
                  primary.state() === "pending" ||
                  isFunction(resolveValues[i] && resolveValues[i].then)
                ) {
                  return primary.then();
                }
              }

              
              while (i--) {
                adoptValue(resolveValues[i], updateFunc(i), primary.reject);
              }

              return primary.promise();
            },
          });

          
          
          var rerrorNames =
            /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

          jQuery.Deferred.exceptionHook = function (error, stack) {
            
            
            if (
              window.console &&
              window.console.warn &&
              error &&
              rerrorNames.test(error.name)
            ) {
              window.console.warn(
                "jQuery.Deferred exception: " + error.message,
                error.stack,
                stack
              );
            }
          };

          jQuery.readyException = function (error) {
            window.setTimeout(function () {
              throw error;
            });
          };

          
          var readyList = jQuery.Deferred();

          jQuery.fn.ready = function (fn) {
            readyList
              .then(fn)

              
              
              
              .catch(function (error) {
                jQuery.readyException(error);
              });

            return this;
          };

          jQuery.extend({
            
            isReady: false,

            
            
            readyWait: 1,

            
            ready: function (wait) {
              
              if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
                return;
              }

              
              jQuery.isReady = true;

              
              if (wait !== true && --jQuery.readyWait > 0) {
                return;
              }

              
              readyList.resolveWith(document, [jQuery]);
            },
          });

          jQuery.ready.then = readyList.then;

          
          function completed() {
            document.removeEventListener("DOMContentLoaded", completed);
            window.removeEventListener("load", completed);
            jQuery.ready();
          }

          
          
          
          
          if (
            document.readyState === "complete" ||
            (document.readyState !== "loading" &&
              !document.documentElement.doScroll)
          ) {
            
            window.setTimeout(jQuery.ready);
          } else {
            
            document.addEventListener("DOMContentLoaded", completed);

            
            window.addEventListener("load", completed);
          }

          
          
          var access = function (
            elems,
            fn,
            key,
            value,
            chainable,
            emptyGet,
            raw
          ) {
            var i = 0,
              len = elems.length,
              bulk = key == null;

            
            if (toType(key) === "object") {
              chainable = true;
              for (i in key) {
                access(elems, fn, i, key[i], true, emptyGet, raw);
              }

              
            } else if (value !== undefined) {
              chainable = true;

              if (!isFunction(value)) {
                raw = true;
              }

              if (bulk) {
                
                if (raw) {
                  fn.call(elems, value);
                  fn = null;

                  
                } else {
                  bulk = fn;
                  fn = function (elem, _key, value) {
                    return bulk.call(jQuery(elem), value);
                  };
                }
              }

              if (fn) {
                for (; i < len; i++) {
                  fn(
                    elems[i],
                    key,
                    raw ? value : value.call(elems[i], i, fn(elems[i], key))
                  );
                }
              }
            }

            if (chainable) {
              return elems;
            }

            
            if (bulk) {
              return fn.call(elems);
            }

            return len ? fn(elems[0], key) : emptyGet;
          };

          
          var rmsPrefix = /^-ms-/,
            rdashAlpha = /-([a-z])/g;

          
          function fcamelCase(_all, letter) {
            return letter.toUpperCase();
          }

          
          
          
          function camelCase(string) {
            return string
              .replace(rmsPrefix, "ms-")
              .replace(rdashAlpha, fcamelCase);
          }
          var acceptData = function (owner) {
            
            
            
            
            
            
            return (
              owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType
            );
          };

          function Data() {
            this.expando = jQuery.expando + Data.uid++;
          }

          Data.uid = 1;

          Data.prototype = {
            cache: function (owner) {
              
              var value = owner[this.expando];

              
              if (!value) {
                value = {};

                
                
                
                if (acceptData(owner)) {
                  
                  
                  if (owner.nodeType) {
                    owner[this.expando] = value;

                    
                    
                    
                  } else {
                    Object.defineProperty(owner, this.expando, {
                      value: value,
                      configurable: true,
                    });
                  }
                }
              }

              return value;
            },
            set: function (owner, data, value) {
              var prop,
                cache = this.cache(owner);

              
              
              if (typeof data === "string") {
                cache[camelCase(data)] = value;

                
              } else {
                
                for (prop in data) {
                  cache[camelCase(prop)] = data[prop];
                }
              }
              return cache;
            },
            get: function (owner, key) {
              return key === undefined
                ? this.cache(owner)
                : 
                  owner[this.expando] && owner[this.expando][camelCase(key)];
            },
            access: function (owner, key, value) {
              
              
              
              
              
              
              
              
              
              
              
              if (
                key === undefined ||
                (key && typeof key === "string" && value === undefined)
              ) {
                return this.get(owner, key);
              }

              
              
              
              
              
              
              this.set(owner, key, value);

              
              
              return value !== undefined ? value : key;
            },
            remove: function (owner, key) {
              var i,
                cache = owner[this.expando];

              if (cache === undefined) {
                return;
              }

              if (key !== undefined) {
                
                if (Array.isArray(key)) {
                  
                  
                  key = key.map(camelCase);
                } else {
                  key = camelCase(key);

                  
                  
                  key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
                }

                i = key.length;

                while (i--) {
                  delete cache[key[i]];
                }
              }

              
              if (key === undefined || jQuery.isEmptyObject(cache)) {
                
                
                
                
                if (owner.nodeType) {
                  owner[this.expando] = undefined;
                } else {
                  delete owner[this.expando];
                }
              }
            },
            hasData: function (owner) {
              var cache = owner[this.expando];
              return cache !== undefined && !jQuery.isEmptyObject(cache);
            },
          };
          var dataPriv = new Data();

          var dataUser = new Data();

          
          
          
          
          
          
          
          
          

          var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
            rmultiDash = /[A-Z]/g;

          function getData(data) {
            if (data === "true") {
              return true;
            }

            if (data === "false") {
              return false;
            }

            if (data === "null") {
              return null;
            }

            
            if (data === +data + "") {
              return +data;
            }

            if (rbrace.test(data)) {
              return JSON.parse(data);
            }

            return data;
          }

          function dataAttr(elem, key, data) {
            var name;

            
            
            if (data === undefined && elem.nodeType === 1) {
              name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
              data = elem.getAttribute(name);

              if (typeof data === "string") {
                try {
                  data = getData(data);
                } catch (e) {}

                
                dataUser.set(elem, key, data);
              } else {
                data = undefined;
              }
            }
            return data;
          }

          jQuery.extend({
            hasData: function (elem) {
              return dataUser.hasData(elem) || dataPriv.hasData(elem);
            },

            data: function (elem, name, data) {
              return dataUser.access(elem, name, data);
            },

            removeData: function (elem, name) {
              dataUser.remove(elem, name);
            },

            
            
            _data: function (elem, name, data) {
              return dataPriv.access(elem, name, data);
            },

            _removeData: function (elem, name) {
              dataPriv.remove(elem, name);
            },
          });

          jQuery.fn.extend({
            data: function (key, value) {
              var i,
                name,
                data,
                elem = this[0],
                attrs = elem && elem.attributes;

              
              if (key === undefined) {
                if (this.length) {
                  data = dataUser.get(elem);

                  if (
                    elem.nodeType === 1 &&
                    !dataPriv.get(elem, "hasDataAttrs")
                  ) {
                    i = attrs.length;
                    while (i--) {
                      
                      
                      if (attrs[i]) {
                        name = attrs[i].name;
                        if (name.indexOf("data-") === 0) {
                          name = camelCase(name.slice(5));
                          dataAttr(elem, name, data[name]);
                        }
                      }
                    }
                    dataPriv.set(elem, "hasDataAttrs", true);
                  }
                }

                return data;
              }

              
              if (typeof key === "object") {
                return this.each(function () {
                  dataUser.set(this, key);
                });
              }

              return access(
                this,
                function (value) {
                  var data;

                  
                  
                  
                  
                  
                  if (elem && value === undefined) {
                    
                    
                    data = dataUser.get(elem, key);
                    if (data !== undefined) {
                      return data;
                    }

                    
                    
                    data = dataAttr(elem, key);
                    if (data !== undefined) {
                      return data;
                    }

                    
                    return;
                  }

                  
                  this.each(function () {
                    
                    dataUser.set(this, key, value);
                  });
                },
                null,
                value,
                arguments.length > 1,
                null,
                true
              );
            },

            removeData: function (key) {
              return this.each(function () {
                dataUser.remove(this, key);
              });
            },
          });

          jQuery.extend({
            queue: function (elem, type, data) {
              var queue;

              if (elem) {
                type = (type || "fx") + "queue";
                queue = dataPriv.get(elem, type);

                
                if (data) {
                  if (!queue || Array.isArray(data)) {
                    queue = dataPriv.access(elem, type, jQuery.makeArray(data));
                  } else {
                    queue.push(data);
                  }
                }
                return queue || [];
              }
            },

            dequeue: function (elem, type) {
              type = type || "fx";

              var queue = jQuery.queue(elem, type),
                startLength = queue.length,
                fn = queue.shift(),
                hooks = jQuery._queueHooks(elem, type),
                next = function () {
                  jQuery.dequeue(elem, type);
                };

              
              if (fn === "inprogress") {
                fn = queue.shift();
                startLength--;
              }

              if (fn) {
                
                
                if (type === "fx") {
                  queue.unshift("inprogress");
                }

                
                delete hooks.stop;
                fn.call(elem, next, hooks);
              }

              if (!startLength && hooks) {
                hooks.empty.fire();
              }
            },

            
            _queueHooks: function (elem, type) {
              var key = type + "queueHooks";
              return (
                dataPriv.get(elem, key) ||
                dataPriv.access(elem, key, {
                  empty: jQuery.Callbacks("once memory").add(function () {
                    dataPriv.remove(elem, [type + "queue", key]);
                  }),
                })
              );
            },
          });

          jQuery.fn.extend({
            queue: function (type, data) {
              var setter = 2;

              if (typeof type !== "string") {
                data = type;
                type = "fx";
                setter--;
              }

              if (arguments.length < setter) {
                return jQuery.queue(this[0], type);
              }

              return data === undefined
                ? this
                : this.each(function () {
                    var queue = jQuery.queue(this, type, data);

                    
                    jQuery._queueHooks(this, type);

                    if (type === "fx" && queue[0] !== "inprogress") {
                      jQuery.dequeue(this, type);
                    }
                  });
            },
            dequeue: function (type) {
              return this.each(function () {
                jQuery.dequeue(this, type);
              });
            },
            clearQueue: function (type) {
              return this.queue(type || "fx", []);
            },

            
            
            promise: function (type, obj) {
              var tmp,
                count = 1,
                defer = jQuery.Deferred(),
                elements = this,
                i = this.length,
                resolve = function () {
                  if (!--count) {
                    defer.resolveWith(elements, [elements]);
                  }
                };

              if (typeof type !== "string") {
                obj = type;
                type = undefined;
              }
              type = type || "fx";

              while (i--) {
                tmp = dataPriv.get(elements[i], type + "queueHooks");
                if (tmp && tmp.empty) {
                  count++;
                  tmp.empty.add(resolve);
                }
              }
              resolve();
              return defer.promise(obj);
            },
          });
          var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;

          var rcssNum = new RegExp(
            "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$",
            "i"
          );

          var cssExpand = ["Top", "Right", "Bottom", "Left"];

          var documentElement = document.documentElement;

          var isAttached = function (elem) {
              return jQuery.contains(elem.ownerDocument, elem);
            },
            composed = { composed: true };

          
          
          
          
          
          if (documentElement.getRootNode) {
            isAttached = function (elem) {
              return (
                jQuery.contains(elem.ownerDocument, elem) ||
                elem.getRootNode(composed) === elem.ownerDocument
              );
            };
          }
          var isHiddenWithinTree = function (elem, el) {
            
            
            elem = el || elem;

            
            return (
              elem.style.display === "none" ||
              (elem.style.display === "" &&
                
                
                
                
                isAttached(elem) &&
                jQuery.css(elem, "display") === "none")
            );
          };

          function adjustCSS(elem, prop, valueParts, tween) {
            var adjusted,
              scale,
              maxIterations = 20,
              currentValue = tween
                ? function () {
                    return tween.cur();
                  }
                : function () {
                    return jQuery.css(elem, prop, "");
                  },
              initial = currentValue(),
              unit =
                (valueParts && valueParts[3]) ||
                (jQuery.cssNumber[prop] ? "" : "px"),
              
              initialInUnit =
                elem.nodeType &&
                (jQuery.cssNumber[prop] || (unit !== "px" && +initial)) &&
                rcssNum.exec(jQuery.css(elem, prop));

            if (initialInUnit && initialInUnit[3] !== unit) {
              
              
              initial = initial / 2;

              
              unit = unit || initialInUnit[3];

              
              initialInUnit = +initial || 1;

              while (maxIterations--) {
                
                
                jQuery.style(elem, prop, initialInUnit + unit);
                if (
                  (1 - scale) *
                    (1 - (scale = currentValue() / initial || 0.5)) <=
                  0
                ) {
                  maxIterations = 0;
                }
                initialInUnit = initialInUnit / scale;
              }

              initialInUnit = initialInUnit * 2;
              jQuery.style(elem, prop, initialInUnit + unit);

              
              valueParts = valueParts || [];
            }

            if (valueParts) {
              initialInUnit = +initialInUnit || +initial || 0;

              
              adjusted = valueParts[1]
                ? initialInUnit + (valueParts[1] + 1) * valueParts[2]
                : +valueParts[2];
              if (tween) {
                tween.unit = unit;
                tween.start = initialInUnit;
                tween.end = adjusted;
              }
            }
            return adjusted;
          }

          var defaultDisplayMap = {};

          function getDefaultDisplay(elem) {
            var temp,
              doc = elem.ownerDocument,
              nodeName = elem.nodeName,
              display = defaultDisplayMap[nodeName];

            if (display) {
              return display;
            }

            temp = doc.body.appendChild(doc.createElement(nodeName));
            display = jQuery.css(temp, "display");

            temp.parentNode.removeChild(temp);

            if (display === "none") {
              display = "block";
            }
            defaultDisplayMap[nodeName] = display;

            return display;
          }

          function showHide(elements, show) {
            var display,
              elem,
              values = [],
              index = 0,
              length = elements.length;

            
            for (; index < length; index++) {
              elem = elements[index];
              if (!elem.style) {
                continue;
              }

              display = elem.style.display;
              if (show) {
                
                
                
                if (display === "none") {
                  values[index] = dataPriv.get(elem, "display") || null;
                  if (!values[index]) {
                    elem.style.display = "";
                  }
                }
                if (elem.style.display === "" && isHiddenWithinTree(elem)) {
                  values[index] = getDefaultDisplay(elem);
                }
              } else {
                if (display !== "none") {
                  values[index] = "none";

                  
                  dataPriv.set(elem, "display", display);
                }
              }
            }

            
            for (index = 0; index < length; index++) {
              if (values[index] != null) {
                elements[index].style.display = values[index];
              }
            }

            return elements;
          }

          jQuery.fn.extend({
            show: function () {
              return showHide(this, true);
            },
            hide: function () {
              return showHide(this);
            },
            toggle: function (state) {
              if (typeof state === "boolean") {
                return state ? this.show() : this.hide();
              }

              return this.each(function () {
                if (isHiddenWithinTree(this)) {
                  jQuery(this).show();
                } else {
                  jQuery(this).hide();
                }
              });
            },
          });
          var rcheckableType = /^(?:checkbox|radio)$/i;

          var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;

          var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;

          (function () {
            var fragment = document.createDocumentFragment(),
              div = fragment.appendChild(document.createElement("div")),
              input = document.createElement("input");

            
            
            
            
            input.setAttribute("type", "radio");
            input.setAttribute("checked", "checked");
            input.setAttribute("name", "t");

            div.appendChild(input);

            
            
            support.checkClone = div
              .cloneNode(true)
              .cloneNode(true).lastChild.checked;

            
            
            div.innerHTML = "<textarea>x</textarea>";
            support.noCloneChecked =
              !!div.cloneNode(true).lastChild.defaultValue;

            
            
            
            div.innerHTML = "<option></option>";
            support.option = !!div.lastChild;
          })();

          
          var wrapMap = {
            
            
            
            thead: [1, "<table>", "</table>"],
            col: [2, "<table><colgroup>", "</colgroup></table>"],
            tr: [2, "<table><tbody>", "</tbody></table>"],
            td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],

            _default: [0, "", ""],
          };

          wrapMap.tbody =
            wrapMap.tfoot =
            wrapMap.colgroup =
            wrapMap.caption =
              wrapMap.thead;
          wrapMap.th = wrapMap.td;

          
          if (!support.option) {
            wrapMap.optgroup = wrapMap.option = [
              1,
              "<select multiple='multiple'>",
              "</select>",
            ];
          }

          function getAll(context, tag) {
            
            
            var ret;

            if (typeof context.getElementsByTagName !== "undefined") {
              ret = context.getElementsByTagName(tag || "*");
            } else if (typeof context.querySelectorAll !== "undefined") {
              ret = context.querySelectorAll(tag || "*");
            } else {
              ret = [];
            }

            if (tag === undefined || (tag && nodeName(context, tag))) {
              return jQuery.merge([context], ret);
            }

            return ret;
          }

          
          function setGlobalEval(elems, refElements) {
            var i = 0,
              l = elems.length;

            for (; i < l; i++) {
              dataPriv.set(
                elems[i],
                "globalEval",
                !refElements || dataPriv.get(refElements[i], "globalEval")
              );
            }
          }

          var rhtml = /<|&#?\w+;/;

          function buildFragment(elems, context, scripts, selection, ignored) {
            var elem,
              tmp,
              tag,
              wrap,
              attached,
              j,
              fragment = context.createDocumentFragment(),
              nodes = [],
              i = 0,
              l = elems.length;

            for (; i < l; i++) {
              elem = elems[i];

              if (elem || elem === 0) {
                
                if (toType(elem) === "object") {
                  
                  
                  jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

                  
                } else if (!rhtml.test(elem)) {
                  nodes.push(context.createTextNode(elem));

                  
                } else {
                  tmp =
                    tmp || fragment.appendChild(context.createElement("div"));

                  
                  tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
                  wrap = wrapMap[tag] || wrapMap._default;
                  tmp.innerHTML =
                    wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];

                  
                  j = wrap[0];
                  while (j--) {
                    tmp = tmp.lastChild;
                  }

                  
                  
                  jQuery.merge(nodes, tmp.childNodes);

                  
                  tmp = fragment.firstChild;

                  
                  tmp.textContent = "";
                }
              }
            }

            
            fragment.textContent = "";

            i = 0;
            while ((elem = nodes[i++])) {
              
              if (selection && jQuery.inArray(elem, selection) > -1) {
                if (ignored) {
                  ignored.push(elem);
                }
                continue;
              }

              attached = isAttached(elem);

              
              tmp = getAll(fragment.appendChild(elem), "script");

              
              if (attached) {
                setGlobalEval(tmp);
              }

              
              if (scripts) {
                j = 0;
                while ((elem = tmp[j++])) {
                  if (rscriptType.test(elem.type || "")) {
                    scripts.push(elem);
                  }
                }
              }
            }

            return fragment;
          }

          var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

          function returnTrue() {
            return true;
          }

          function returnFalse() {
            return false;
          }

          
          
          
          
          
          
          function expectSync(elem, type) {
            return (elem === safeActiveElement()) === (type === "focus");
          }

          
          
          
          function safeActiveElement() {
            try {
              return document.activeElement;
            } catch (err) {}
          }

          function on(elem, types, selector, data, fn, one) {
            var origFn, type;

            
            if (typeof types === "object") {
              
              if (typeof selector !== "string") {
                
                data = data || selector;
                selector = undefined;
              }
              for (type in types) {
                on(elem, type, selector, data, types[type], one);
              }
              return elem;
            }

            if (data == null && fn == null) {
              
              fn = selector;
              data = selector = undefined;
            } else if (fn == null) {
              if (typeof selector === "string") {
                
                fn = data;
                data = undefined;
              } else {
                
                fn = data;
                data = selector;
                selector = undefined;
              }
            }
            if (fn === false) {
              fn = returnFalse;
            } else if (!fn) {
              return elem;
            }

            if (one === 1) {
              origFn = fn;
              fn = function (event) {
                
                jQuery().off(event);
                return origFn.apply(this, arguments);
              };

              
              fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
            }
            return elem.each(function () {
              jQuery.event.add(this, types, fn, data, selector);
            });
          }

          

          jQuery.event = {
            global: {},

            add: function (elem, types, handler, data, selector) {
              var handleObjIn,
                eventHandle,
                tmp,
                events,
                t,
                handleObj,
                special,
                handlers,
                type,
                namespaces,
                origType,
                elemData = dataPriv.get(elem);

              
              if (!acceptData(elem)) {
                return;
              }

              
              if (handler.handler) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
                selector = handleObjIn.selector;
              }

              
              
              if (selector) {
                jQuery.find.matchesSelector(documentElement, selector);
              }

              
              if (!handler.guid) {
                handler.guid = jQuery.guid++;
              }

              
              if (!(events = elemData.events)) {
                events = elemData.events = Object.create(null);
              }
              if (!(eventHandle = elemData.handle)) {
                eventHandle = elemData.handle = function (e) {
                  
                  
                  return typeof jQuery !== "undefined" &&
                    jQuery.event.triggered !== e.type
                    ? jQuery.event.dispatch.apply(elem, arguments)
                    : undefined;
                };
              }

              
              types = (types || "").match(rnothtmlwhite) || [""];
              t = types.length;
              while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();

                
                if (!type) {
                  continue;
                }

                
                special = jQuery.event.special[type] || {};

                
                type =
                  (selector ? special.delegateType : special.bindType) || type;

                
                special = jQuery.event.special[type] || {};

                
                handleObj = jQuery.extend(
                  {
                    type: type,
                    origType: origType,
                    data: data,
                    handler: handler,
                    guid: handler.guid,
                    selector: selector,
                    needsContext:
                      selector && jQuery.expr.match.needsContext.test(selector),
                    namespace: namespaces.join("."),
                  },
                  handleObjIn
                );

                
                if (!(handlers = events[type])) {
                  handlers = events[type] = [];
                  handlers.delegateCount = 0;

                  
                  if (
                    !special.setup ||
                    special.setup.call(elem, data, namespaces, eventHandle) ===
                      false
                  ) {
                    if (elem.addEventListener) {
                      elem.addEventListener(type, eventHandle);
                    }
                  }
                }

                if (special.add) {
                  special.add.call(elem, handleObj);

                  if (!handleObj.handler.guid) {
                    handleObj.handler.guid = handler.guid;
                  }
                }

                
                if (selector) {
                  handlers.splice(handlers.delegateCount++, 0, handleObj);
                } else {
                  handlers.push(handleObj);
                }

                
                jQuery.event.global[type] = true;
              }
            },

            
            remove: function (elem, types, handler, selector, mappedTypes) {
              var j,
                origCount,
                tmp,
                events,
                t,
                handleObj,
                special,
                handlers,
                type,
                namespaces,
                origType,
                elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

              if (!elemData || !(events = elemData.events)) {
                return;
              }

              
              types = (types || "").match(rnothtmlwhite) || [""];
              t = types.length;
              while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();

                
                if (!type) {
                  for (type in events) {
                    jQuery.event.remove(
                      elem,
                      type + types[t],
                      handler,
                      selector,
                      true
                    );
                  }
                  continue;
                }

                special = jQuery.event.special[type] || {};
                type =
                  (selector ? special.delegateType : special.bindType) || type;
                handlers = events[type] || [];
                tmp =
                  tmp[2] &&
                  new RegExp(
                    "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)"
                  );

                
                origCount = j = handlers.length;
                while (j--) {
                  handleObj = handlers[j];

                  if (
                    (mappedTypes || origType === handleObj.origType) &&
                    (!handler || handler.guid === handleObj.guid) &&
                    (!tmp || tmp.test(handleObj.namespace)) &&
                    (!selector ||
                      selector === handleObj.selector ||
                      (selector === "**" && handleObj.selector))
                  ) {
                    handlers.splice(j, 1);

                    if (handleObj.selector) {
                      handlers.delegateCount--;
                    }
                    if (special.remove) {
                      special.remove.call(elem, handleObj);
                    }
                  }
                }

                
                
                if (origCount && !handlers.length) {
                  if (
                    !special.teardown ||
                    special.teardown.call(elem, namespaces, elemData.handle) ===
                      false
                  ) {
                    jQuery.removeEvent(elem, type, elemData.handle);
                  }

                  delete events[type];
                }
              }

              
              if (jQuery.isEmptyObject(events)) {
                dataPriv.remove(elem, "handle events");
              }
            },

            dispatch: function (nativeEvent) {
              var i,
                j,
                ret,
                matched,
                handleObj,
                handlerQueue,
                args = new Array(arguments.length),
                
                event = jQuery.event.fix(nativeEvent),
                handlers =
                  (dataPriv.get(this, "events") || Object.create(null))[
                    event.type
                  ] || [],
                special = jQuery.event.special[event.type] || {};

              
              args[0] = event;

              for (i = 1; i < arguments.length; i++) {
                args[i] = arguments[i];
              }

              event.delegateTarget = this;

              
              if (
                special.preDispatch &&
                special.preDispatch.call(this, event) === false
              ) {
                return;
              }

              
              handlerQueue = jQuery.event.handlers.call(this, event, handlers);

              
              i = 0;
              while (
                (matched = handlerQueue[i++]) &&
                !event.isPropagationStopped()
              ) {
                event.currentTarget = matched.elem;

                j = 0;
                while (
                  (handleObj = matched.handlers[j++]) &&
                  !event.isImmediatePropagationStopped()
                ) {
                  
                  
                  if (
                    !event.rnamespace ||
                    handleObj.namespace === false ||
                    event.rnamespace.test(handleObj.namespace)
                  ) {
                    event.handleObj = handleObj;
                    event.data = handleObj.data;

                    ret = (
                      (jQuery.event.special[handleObj.origType] || {}).handle ||
                      handleObj.handler
                    ).apply(matched.elem, args);

                    if (ret !== undefined) {
                      if ((event.result = ret) === false) {
                        event.preventDefault();
                        event.stopPropagation();
                      }
                    }
                  }
                }
              }

              
              if (special.postDispatch) {
                special.postDispatch.call(this, event);
              }

              return event.result;
            },

            handlers: function (event, handlers) {
              var i,
                handleObj,
                sel,
                matchedHandlers,
                matchedSelectors,
                handlerQueue = [],
                delegateCount = handlers.delegateCount,
                cur = event.target;

              
              if (
                delegateCount &&
                
                
                cur.nodeType &&
                
                
                
                
                
                !(event.type === "click" && event.button >= 1)
              ) {
                for (; cur !== this; cur = cur.parentNode || this) {
                  
                  
                  if (
                    cur.nodeType === 1 &&
                    !(event.type === "click" && cur.disabled === true)
                  ) {
                    matchedHandlers = [];
                    matchedSelectors = {};
                    for (i = 0; i < delegateCount; i++) {
                      handleObj = handlers[i];

                      
                      sel = handleObj.selector + " ";

                      if (matchedSelectors[sel] === undefined) {
                        matchedSelectors[sel] = handleObj.needsContext
                          ? jQuery(sel, this).index(cur) > -1
                          : jQuery.find(sel, this, null, [cur]).length;
                      }
                      if (matchedSelectors[sel]) {
                        matchedHandlers.push(handleObj);
                      }
                    }
                    if (matchedHandlers.length) {
                      handlerQueue.push({
                        elem: cur,
                        handlers: matchedHandlers,
                      });
                    }
                  }
                }
              }

              
              cur = this;
              if (delegateCount < handlers.length) {
                handlerQueue.push({
                  elem: cur,
                  handlers: handlers.slice(delegateCount),
                });
              }

              return handlerQueue;
            },

            addProp: function (name, hook) {
              Object.defineProperty(jQuery.Event.prototype, name, {
                enumerable: true,
                configurable: true,

                get: isFunction(hook)
                  ? function () {
                      if (this.originalEvent) {
                        return hook(this.originalEvent);
                      }
                    }
                  : function () {
                      if (this.originalEvent) {
                        return this.originalEvent[name];
                      }
                    },

                set: function (value) {
                  Object.defineProperty(this, name, {
                    enumerable: true,
                    configurable: true,
                    writable: true,
                    value: value,
                  });
                },
              });
            },

            fix: function (originalEvent) {
              return originalEvent[jQuery.expando]
                ? originalEvent
                : new jQuery.Event(originalEvent);
            },

            special: {
              load: {
                
                noBubble: true,
              },
              click: {
                
                setup: function (data) {
                  
                  
                  var el = this || data;

                  
                  if (
                    rcheckableType.test(el.type) &&
                    el.click &&
                    nodeName(el, "input")
                  ) {
                    
                    leverageNative(el, "click", returnTrue);
                  }

                  
                  return false;
                },
                trigger: function (data) {
                  
                  
                  var el = this || data;

                  
                  if (
                    rcheckableType.test(el.type) &&
                    el.click &&
                    nodeName(el, "input")
                  ) {
                    leverageNative(el, "click");
                  }

                  
                  return true;
                },

                
                
                _default: function (event) {
                  var target = event.target;
                  return (
                    (rcheckableType.test(target.type) &&
                      target.click &&
                      nodeName(target, "input") &&
                      dataPriv.get(target, "click")) ||
                    nodeName(target, "a")
                  );
                },
              },

              beforeunload: {
                postDispatch: function (event) {
                  
                  
                  if (event.result !== undefined && event.originalEvent) {
                    event.originalEvent.returnValue = event.result;
                  }
                },
              },
            },
          };

          
          
          
          
          function leverageNative(el, type, expectSync) {
            
            if (!expectSync) {
              if (dataPriv.get(el, type) === undefined) {
                jQuery.event.add(el, type, returnTrue);
              }
              return;
            }

            
            dataPriv.set(el, type, false);
            jQuery.event.add(el, type, {
              namespace: false,
              handler: function (event) {
                var notAsync,
                  result,
                  saved = dataPriv.get(this, type);

                if (event.isTrigger & 1 && this[type]) {
                  
                  
                  
                  if (!saved.length) {
                    
                    
                    
                    saved = slice.call(arguments);
                    dataPriv.set(this, type, saved);

                    
                    
                    
                    notAsync = expectSync(this, type);
                    this[type]();
                    result = dataPriv.get(this, type);
                    if (saved !== result || notAsync) {
                      dataPriv.set(this, type, false);
                    } else {
                      result = {};
                    }
                    if (saved !== result) {
                      
                      event.stopImmediatePropagation();
                      event.preventDefault();

                      
                      
                      
                      
                      
                      return result && result.value;
                    }

                    
                    
                    
                    
                    
                    
                  } else if ((jQuery.event.special[type] || {}).delegateType) {
                    event.stopPropagation();
                  }

                  
                  
                } else if (saved.length) {
                  
                  dataPriv.set(this, type, {
                    value: jQuery.event.trigger(
                      
                      
                      jQuery.extend(saved[0], jQuery.Event.prototype),
                      saved.slice(1),
                      this
                    ),
                  });

                  
                  event.stopImmediatePropagation();
                }
              },
            });
          }

          jQuery.removeEvent = function (elem, type, handle) {
            
            if (elem.removeEventListener) {
              elem.removeEventListener(type, handle);
            }
          };

          jQuery.Event = function (src, props) {
            
            if (!(this instanceof jQuery.Event)) {
              return new jQuery.Event(src, props);
            }

            
            if (src && src.type) {
              this.originalEvent = src;
              this.type = src.type;

              
              
              this.isDefaultPrevented =
                src.defaultPrevented ||
                (src.defaultPrevented === undefined &&
                  
                  src.returnValue === false)
                  ? returnTrue
                  : returnFalse;

              
              
              
              this.target =
                src.target && src.target.nodeType === 3
                  ? src.target.parentNode
                  : src.target;

              this.currentTarget = src.currentTarget;
              this.relatedTarget = src.relatedTarget;

              
            } else {
              this.type = src;
            }

            
            if (props) {
              jQuery.extend(this, props);
            }

            
            this.timeStamp = (src && src.timeStamp) || Date.now();

            
            this[jQuery.expando] = true;
          };

          
          
          jQuery.Event.prototype = {
            constructor: jQuery.Event,
            isDefaultPrevented: returnFalse,
            isPropagationStopped: returnFalse,
            isImmediatePropagationStopped: returnFalse,
            isSimulated: false,

            preventDefault: function () {
              var e = this.originalEvent;

              this.isDefaultPrevented = returnTrue;

              if (e && !this.isSimulated) {
                e.preventDefault();
              }
            },
            stopPropagation: function () {
              var e = this.originalEvent;

              this.isPropagationStopped = returnTrue;

              if (e && !this.isSimulated) {
                e.stopPropagation();
              }
            },
            stopImmediatePropagation: function () {
              var e = this.originalEvent;

              this.isImmediatePropagationStopped = returnTrue;

              if (e && !this.isSimulated) {
                e.stopImmediatePropagation();
              }

              this.stopPropagation();
            },
          };

          
          jQuery.each(
            {
              altKey: true,
              bubbles: true,
              cancelable: true,
              changedTouches: true,
              ctrlKey: true,
              detail: true,
              eventPhase: true,
              metaKey: true,
              pageX: true,
              pageY: true,
              shiftKey: true,
              view: true,
              char: true,
              code: true,
              charCode: true,
              key: true,
              keyCode: true,
              button: true,
              buttons: true,
              clientX: true,
              clientY: true,
              offsetX: true,
              offsetY: true,
              pointerId: true,
              pointerType: true,
              screenX: true,
              screenY: true,
              targetTouches: true,
              toElement: true,
              touches: true,
              which: true,
            },
            jQuery.event.addProp
          );

          jQuery.each(
            { focus: "focusin", blur: "focusout" },
            function (type, delegateType) {
              jQuery.event.special[type] = {
                
                setup: function () {
                  
                  
                  
                  leverageNative(this, type, expectSync);

                  
                  return false;
                },
                trigger: function () {
                  
                  leverageNative(this, type);

                  
                  return true;
                },

                
                
                _default: function () {
                  return true;
                },

                delegateType: delegateType,
              };
            }
          );

          
          
          
          
          
          
          
          
          jQuery.each(
            {
              mouseenter: "mouseover",
              mouseleave: "mouseout",
              pointerenter: "pointerover",
              pointerleave: "pointerout",
            },
            function (orig, fix) {
              jQuery.event.special[orig] = {
                delegateType: fix,
                bindType: fix,

                handle: function (event) {
                  var ret,
                    target = this,
                    related = event.relatedTarget,
                    handleObj = event.handleObj;

                  
                  
                  if (
                    !related ||
                    (related !== target && !jQuery.contains(target, related))
                  ) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply(this, arguments);
                    event.type = fix;
                  }
                  return ret;
                },
              };
            }
          );

          jQuery.fn.extend({
            on: function (types, selector, data, fn) {
              return on(this, types, selector, data, fn);
            },
            one: function (types, selector, data, fn) {
              return on(this, types, selector, data, fn, 1);
            },
            off: function (types, selector, fn) {
              var handleObj, type;
              if (types && types.preventDefault && types.handleObj) {
                
                handleObj = types.handleObj;
                jQuery(types.delegateTarget).off(
                  handleObj.namespace
                    ? handleObj.origType + "." + handleObj.namespace
                    : handleObj.origType,
                  handleObj.selector,
                  handleObj.handler
                );
                return this;
              }
              if (typeof types === "object") {
                
                for (type in types) {
                  this.off(type, selector, types[type]);
                }
                return this;
              }
              if (selector === false || typeof selector === "function") {
                
                fn = selector;
                selector = undefined;
              }
              if (fn === false) {
                fn = returnFalse;
              }
              return this.each(function () {
                jQuery.event.remove(this, types, fn, selector);
              });
            },
          });

          var 
            
            
            rnoInnerhtml = /<script|<style|<link/i,
            
            rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
            rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

          
          function manipulationTarget(elem, content) {
            if (
              nodeName(elem, "table") &&
              nodeName(
                content.nodeType !== 11 ? content : content.firstChild,
                "tr"
              )
            ) {
              return jQuery(elem).children("tbody")[0] || elem;
            }

            return elem;
          }

          
          function disableScript(elem) {
            elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
            return elem;
          }
          function restoreScript(elem) {
            if ((elem.type || "").slice(0, 5) === "true/") {
              elem.type = elem.type.slice(5);
            } else {
              elem.removeAttribute("type");
            }

            return elem;
          }

          function cloneCopyEvent(src, dest) {
            var i, l, type, pdataOld, udataOld, udataCur, events;

            if (dest.nodeType !== 1) {
              return;
            }

            
            if (dataPriv.hasData(src)) {
              pdataOld = dataPriv.get(src);
              events = pdataOld.events;

              if (events) {
                dataPriv.remove(dest, "handle events");

                for (type in events) {
                  for (i = 0, l = events[type].length; i < l; i++) {
                    jQuery.event.add(dest, type, events[type][i]);
                  }
                }
              }
            }

            
            if (dataUser.hasData(src)) {
              udataOld = dataUser.access(src);
              udataCur = jQuery.extend({}, udataOld);

              dataUser.set(dest, udataCur);
            }
          }

          
          function fixInput(src, dest) {
            var nodeName = dest.nodeName.toLowerCase();

            
            if (nodeName === "input" && rcheckableType.test(src.type)) {
              dest.checked = src.checked;

              
            } else if (nodeName === "input" || nodeName === "textarea") {
              dest.defaultValue = src.defaultValue;
            }
          }

          function domManip(collection, args, callback, ignored) {
            
            args = flat(args);

            var fragment,
              first,
              scripts,
              hasScripts,
              node,
              doc,
              i = 0,
              l = collection.length,
              iNoClone = l - 1,
              value = args[0],
              valueIsFunction = isFunction(value);

            
            if (
              valueIsFunction ||
              (l > 1 &&
                typeof value === "string" &&
                !support.checkClone &&
                rchecked.test(value))
            ) {
              return collection.each(function (index) {
                var self = collection.eq(index);
                if (valueIsFunction) {
                  args[0] = value.call(this, index, self.html());
                }
                domManip(self, args, callback, ignored);
              });
            }

            if (l) {
              fragment = buildFragment(
                args,
                collection[0].ownerDocument,
                false,
                collection,
                ignored
              );
              first = fragment.firstChild;

              if (fragment.childNodes.length === 1) {
                fragment = first;
              }

              
              if (first || ignored) {
                scripts = jQuery.map(getAll(fragment, "script"), disableScript);
                hasScripts = scripts.length;

                
                
                
                for (; i < l; i++) {
                  node = fragment;

                  if (i !== iNoClone) {
                    node = jQuery.clone(node, true, true);

                    
                    if (hasScripts) {
                      
                      
                      jQuery.merge(scripts, getAll(node, "script"));
                    }
                  }

                  callback.call(collection[i], node, i);
                }

                if (hasScripts) {
                  doc = scripts[scripts.length - 1].ownerDocument;

                  
                  jQuery.map(scripts, restoreScript);

                  
                  for (i = 0; i < hasScripts; i++) {
                    node = scripts[i];
                    if (
                      rscriptType.test(node.type || "") &&
                      !dataPriv.access(node, "globalEval") &&
                      jQuery.contains(doc, node)
                    ) {
                      if (
                        node.src &&
                        (node.type || "").toLowerCase() !== "module"
                      ) {
                        
                        if (jQuery._evalUrl && !node.noModule) {
                          jQuery._evalUrl(
                            node.src,
                            {
                              nonce: node.nonce || node.getAttribute("nonce"),
                            },
                            doc
                          );
                        }
                      } else {
                        DOMEval(
                          node.textContent.replace(rcleanScript, ""),
                          node,
                          doc
                        );
                      }
                    }
                  }
                }
              }
            }

            return collection;
          }

          function remove(elem, selector, keepData) {
            var node,
              nodes = selector ? jQuery.filter(selector, elem) : elem,
              i = 0;

            for (; (node = nodes[i]) != null; i++) {
              if (!keepData && node.nodeType === 1) {
                jQuery.cleanData(getAll(node));
              }

              if (node.parentNode) {
                if (keepData && isAttached(node)) {
                  setGlobalEval(getAll(node, "script"));
                }
                node.parentNode.removeChild(node);
              }
            }

            return elem;
          }

          jQuery.extend({
            htmlPrefilter: function (html) {
              return html;
            },

            clone: function (elem, dataAndEvents, deepDataAndEvents) {
              var i,
                l,
                srcElements,
                destElements,
                clone = elem.cloneNode(true),
                inPage = isAttached(elem);

              
              if (
                !support.noCloneChecked &&
                (elem.nodeType === 1 || elem.nodeType === 11) &&
                !jQuery.isXMLDoc(elem)
              ) {
                
                destElements = getAll(clone);
                srcElements = getAll(elem);

                for (i = 0, l = srcElements.length; i < l; i++) {
                  fixInput(srcElements[i], destElements[i]);
                }
              }

              
              if (dataAndEvents) {
                if (deepDataAndEvents) {
                  srcElements = srcElements || getAll(elem);
                  destElements = destElements || getAll(clone);

                  for (i = 0, l = srcElements.length; i < l; i++) {
                    cloneCopyEvent(srcElements[i], destElements[i]);
                  }
                } else {
                  cloneCopyEvent(elem, clone);
                }
              }

              
              destElements = getAll(clone, "script");
              if (destElements.length > 0) {
                setGlobalEval(destElements, !inPage && getAll(elem, "script"));
              }

              
              return clone;
            },

            cleanData: function (elems) {
              var data,
                elem,
                type,
                special = jQuery.event.special,
                i = 0;

              for (; (elem = elems[i]) !== undefined; i++) {
                if (acceptData(elem)) {
                  if ((data = elem[dataPriv.expando])) {
                    if (data.events) {
                      for (type in data.events) {
                        if (special[type]) {
                          jQuery.event.remove(elem, type);

                          
                        } else {
                          jQuery.removeEvent(elem, type, data.handle);
                        }
                      }
                    }

                    
                    
                    elem[dataPriv.expando] = undefined;
                  }
                  if (elem[dataUser.expando]) {
                    
                    
                    elem[dataUser.expando] = undefined;
                  }
                }
              }
            },
          });

          jQuery.fn.extend({
            detach: function (selector) {
              return remove(this, selector, true);
            },

            remove: function (selector) {
              return remove(this, selector);
            },

            text: function (value) {
              return access(
                this,
                function (value) {
                  return value === undefined
                    ? jQuery.text(this)
                    : this.empty().each(function () {
                        if (
                          this.nodeType === 1 ||
                          this.nodeType === 11 ||
                          this.nodeType === 9
                        ) {
                          this.textContent = value;
                        }
                      });
                },
                null,
                value,
                arguments.length
              );
            },

            append: function () {
              return domManip(this, arguments, function (elem) {
                if (
                  this.nodeType === 1 ||
                  this.nodeType === 11 ||
                  this.nodeType === 9
                ) {
                  var target = manipulationTarget(this, elem);
                  target.appendChild(elem);
                }
              });
            },

            prepend: function () {
              return domManip(this, arguments, function (elem) {
                if (
                  this.nodeType === 1 ||
                  this.nodeType === 11 ||
                  this.nodeType === 9
                ) {
                  var target = manipulationTarget(this, elem);
                  target.insertBefore(elem, target.firstChild);
                }
              });
            },

            before: function () {
              return domManip(this, arguments, function (elem) {
                if (this.parentNode) {
                  this.parentNode.insertBefore(elem, this);
                }
              });
            },

            after: function () {
              return domManip(this, arguments, function (elem) {
                if (this.parentNode) {
                  this.parentNode.insertBefore(elem, this.nextSibling);
                }
              });
            },

            empty: function () {
              var elem,
                i = 0;

              for (; (elem = this[i]) != null; i++) {
                if (elem.nodeType === 1) {
                  
                  jQuery.cleanData(getAll(elem, false));

                  
                  elem.textContent = "";
                }
              }

              return this;
            },

            clone: function (dataAndEvents, deepDataAndEvents) {
              dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
              deepDataAndEvents =
                deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

              return this.map(function () {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
              });
            },

            html: function (value) {
              return access(
                this,
                function (value) {
                  var elem = this[0] || {},
                    i = 0,
                    l = this.length;

                  if (value === undefined && elem.nodeType === 1) {
                    return elem.innerHTML;
                  }

                  
                  if (
                    typeof value === "string" &&
                    !rnoInnerhtml.test(value) &&
                    !wrapMap[
                      (rtagName.exec(value) || ["", ""])[1].toLowerCase()
                    ]
                  ) {
                    value = jQuery.htmlPrefilter(value);

                    try {
                      for (; i < l; i++) {
                        elem = this[i] || {};

                        
                        if (elem.nodeType === 1) {
                          jQuery.cleanData(getAll(elem, false));
                          elem.innerHTML = value;
                        }
                      }

                      elem = 0;

                      
                    } catch (e) {}
                  }

                  if (elem) {
                    this.empty().append(value);
                  }
                },
                null,
                value,
                arguments.length
              );
            },

            replaceWith: function () {
              var ignored = [];

              
              return domManip(
                this,
                arguments,
                function (elem) {
                  var parent = this.parentNode;

                  if (jQuery.inArray(this, ignored) < 0) {
                    jQuery.cleanData(getAll(this));
                    if (parent) {
                      parent.replaceChild(elem, this);
                    }
                  }

                  
                },
                ignored
              );
            },
          });

          jQuery.each(
            {
              appendTo: "append",
              prependTo: "prepend",
              insertBefore: "before",
              insertAfter: "after",
              replaceAll: "replaceWith",
            },
            function (name, original) {
              jQuery.fn[name] = function (selector) {
                var elems,
                  ret = [],
                  insert = jQuery(selector),
                  last = insert.length - 1,
                  i = 0;

                for (; i <= last; i++) {
                  elems = i === last ? this : this.clone(true);
                  jQuery(insert[i])[original](elems);

                  
                  
                  push.apply(ret, elems.get());
                }

                return this.pushStack(ret);
              };
            }
          );
          var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

          var getStyles = function (elem) {
            
            
            
            var view = elem.ownerDocument.defaultView;

            if (!view || !view.opener) {
              view = window;
            }

            return view.getComputedStyle(elem);
          };

          var swap = function (elem, options, callback) {
            var ret,
              name,
              old = {};

            
            for (name in options) {
              old[name] = elem.style[name];
              elem.style[name] = options[name];
            }

            ret = callback.call(elem);

            
            for (name in options) {
              elem.style[name] = old[name];
            }

            return ret;
          };

          var rboxStyle = new RegExp(cssExpand.join("|"), "i");

          (function () {
            
            
            function computeStyleTests() {
              
              if (!div) {
                return;
              }

              container.style.cssText =
                "position:absolute;left:-11111px;width:60px;" +
                "margin-top:1px;padding:0;border:0";
              div.style.cssText =
                "position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
                "margin:auto;border:1px;padding:1px;" +
                "width:60%;top:1%";
              documentElement.appendChild(container).appendChild(div);

              var divStyle = window.getComputedStyle(div);
              pixelPositionVal = divStyle.top !== "1%";

              
              reliableMarginLeftVal =
                roundPixelMeasures(divStyle.marginLeft) === 12;

              
              
              div.style.right = "60%";
              pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;

              
              
              boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;

              
              
              
              
              div.style.position = "absolute";
              scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;

              documentElement.removeChild(container);

              
              
              div = null;
            }

            function roundPixelMeasures(measure) {
              return Math.round(parseFloat(measure));
            }

            var pixelPositionVal,
              boxSizingReliableVal,
              scrollboxSizeVal,
              pixelBoxStylesVal,
              reliableTrDimensionsVal,
              reliableMarginLeftVal,
              container = document.createElement("div"),
              div = document.createElement("div");

            
            if (!div.style) {
              return;
            }

            
            
            div.style.backgroundClip = "content-box";
            div.cloneNode(true).style.backgroundClip = "";
            support.clearCloneStyle =
              div.style.backgroundClip === "content-box";

            jQuery.extend(support, {
              boxSizingReliable: function () {
                computeStyleTests();
                return boxSizingReliableVal;
              },
              pixelBoxStyles: function () {
                computeStyleTests();
                return pixelBoxStylesVal;
              },
              pixelPosition: function () {
                computeStyleTests();
                return pixelPositionVal;
              },
              reliableMarginLeft: function () {
                computeStyleTests();
                return reliableMarginLeftVal;
              },
              scrollboxSize: function () {
                computeStyleTests();
                return scrollboxSizeVal;
              },

              
              
              
              
              
              
              
              
              
              reliableTrDimensions: function () {
                var table, tr, trChild, trStyle;
                if (reliableTrDimensionsVal == null) {
                  table = document.createElement("table");
                  tr = document.createElement("tr");
                  trChild = document.createElement("div");

                  table.style.cssText =
                    "position:absolute;left:-11111px;border-collapse:separate";
                  tr.style.cssText = "border:1px solid";

                  
                  
                  
                  tr.style.height = "1px";
                  trChild.style.height = "9px";

                  
                  
                  
                  
                  
                  
                  trChild.style.display = "block";

                  documentElement
                    .appendChild(table)
                    .appendChild(tr)
                    .appendChild(trChild);

                  trStyle = window.getComputedStyle(tr);
                  reliableTrDimensionsVal =
                    parseInt(trStyle.height, 10) +
                      parseInt(trStyle.borderTopWidth, 10) +
                      parseInt(trStyle.borderBottomWidth, 10) ===
                    tr.offsetHeight;

                  documentElement.removeChild(table);
                }
                return reliableTrDimensionsVal;
              },
            });
          })();

          function curCSS(elem, name, computed) {
            var width,
              minWidth,
              maxWidth,
              ret,
              
              
              
              
              style = elem.style;

            computed = computed || getStyles(elem);

            
            
            
            if (computed) {
              ret = computed.getPropertyValue(name) || computed[name];

              if (ret === "" && !isAttached(elem)) {
                ret = jQuery.style(elem, name);
              }

              
              
              
              
              
              if (
                !support.pixelBoxStyles() &&
                rnumnonpx.test(ret) &&
                rboxStyle.test(name)
              ) {
                
                width = style.width;
                minWidth = style.minWidth;
                maxWidth = style.maxWidth;

                
                style.minWidth = style.maxWidth = style.width = ret;
                ret = computed.width;

                
                style.width = width;
                style.minWidth = minWidth;
                style.maxWidth = maxWidth;
              }
            }

            return ret !== undefined
              ? 
                
                ret + ""
              : ret;
          }

          function addGetHookIf(conditionFn, hookFn) {
            
            return {
              get: function () {
                if (conditionFn()) {
                  
                  
                  delete this.get;
                  return;
                }

                
                return (this.get = hookFn).apply(this, arguments);
              },
            };
          }

          var cssPrefixes = ["Webkit", "Moz", "ms"],
            emptyStyle = document.createElement("div").style,
            vendorProps = {};

          
          function vendorPropName(name) {
            
            var capName = name[0].toUpperCase() + name.slice(1),
              i = cssPrefixes.length;

            while (i--) {
              name = cssPrefixes[i] + capName;
              if (name in emptyStyle) {
                return name;
              }
            }
          }

          
          function finalPropName(name) {
            var final = jQuery.cssProps[name] || vendorProps[name];

            if (final) {
              return final;
            }
            if (name in emptyStyle) {
              return name;
            }
            return (vendorProps[name] = vendorPropName(name) || name);
          }

          var 
            
            
            rdisplayswap = /^(none|table(?!-c[ea]).+)/,
            rcustomProp = /^--/,
            cssShow = {
              position: "absolute",
              visibility: "hidden",
              display: "block",
            },
            cssNormalTransform = {
              letterSpacing: "0",
              fontWeight: "400",
            };

          function setPositiveNumber(_elem, value, subtract) {
            
            
            var matches = rcssNum.exec(value);
            return matches
              ? 
                Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px")
              : value;
          }

          function boxModelAdjustment(
            elem,
            dimension,
            box,
            isBorderBox,
            styles,
            computedVal
          ) {
            var i = dimension === "width" ? 1 : 0,
              extra = 0,
              delta = 0;

            
            if (box === (isBorderBox ? "border" : "content")) {
              return 0;
            }

            for (; i < 4; i += 2) {
              
              if (box === "margin") {
                delta += jQuery.css(elem, box + cssExpand[i], true, styles);
              }

              
              if (!isBorderBox) {
                
                delta += jQuery.css(
                  elem,
                  "padding" + cssExpand[i],
                  true,
                  styles
                );

                
                if (box !== "padding") {
                  delta += jQuery.css(
                    elem,
                    "border" + cssExpand[i] + "Width",
                    true,
                    styles
                  );

                  
                } else {
                  extra += jQuery.css(
                    elem,
                    "border" + cssExpand[i] + "Width",
                    true,
                    styles
                  );
                }

                
                
              } else {
                
                if (box === "content") {
                  delta -= jQuery.css(
                    elem,
                    "padding" + cssExpand[i],
                    true,
                    styles
                  );
                }

                
                if (box !== "margin") {
                  delta -= jQuery.css(
                    elem,
                    "border" + cssExpand[i] + "Width",
                    true,
                    styles
                  );
                }
              }
            }

            
            if (!isBorderBox && computedVal >= 0) {
              
              
              delta +=
                Math.max(
                  0,
                  Math.ceil(
                    elem[
                      "offset" + dimension[0].toUpperCase() + dimension.slice(1)
                    ] -
                      computedVal -
                      delta -
                      extra -
                      0.5

                    
                    
                  )
                ) || 0;
            }

            return delta;
          }

          function getWidthOrHeight(elem, dimension, extra) {
            
            var styles = getStyles(elem),
              
              
              boxSizingNeeded = !support.boxSizingReliable() || extra,
              isBorderBox =
                boxSizingNeeded &&
                jQuery.css(elem, "boxSizing", false, styles) === "border-box",
              valueIsBorderBox = isBorderBox,
              val = curCSS(elem, dimension, styles),
              offsetProp =
                "offset" + dimension[0].toUpperCase() + dimension.slice(1);

            
            
            if (rnumnonpx.test(val)) {
              if (!extra) {
                return val;
              }
              val = "auto";
            }

            
            
            
            if (
              ((!support.boxSizingReliable() && isBorderBox) ||
                
                
                
                
                (!support.reliableTrDimensions() && nodeName(elem, "tr")) ||
                
                
                val === "auto" ||
                
                
                (!parseFloat(val) &&
                  jQuery.css(elem, "display", false, styles) === "inline")) &&
              
              elem.getClientRects().length
            ) {
              isBorderBox =
                jQuery.css(elem, "boxSizing", false, styles) === "border-box";

              
              
              
              valueIsBorderBox = offsetProp in elem;
              if (valueIsBorderBox) {
                val = elem[offsetProp];
              }
            }

            
            val = parseFloat(val) || 0;

            
            return (
              val +
              boxModelAdjustment(
                elem,
                dimension,
                extra || (isBorderBox ? "border" : "content"),
                valueIsBorderBox,
                styles,

                
                val
              ) +
              "px"
            );
          }

          jQuery.extend({
            
            
            cssHooks: {
              opacity: {
                get: function (elem, computed) {
                  if (computed) {
                    
                    var ret = curCSS(elem, "opacity");
                    return ret === "" ? "1" : ret;
                  }
                },
              },
            },

            
            cssNumber: {
              animationIterationCount: true,
              columnCount: true,
              fillOpacity: true,
              flexGrow: true,
              flexShrink: true,
              fontWeight: true,
              gridArea: true,
              gridColumn: true,
              gridColumnEnd: true,
              gridColumnStart: true,
              gridRow: true,
              gridRowEnd: true,
              gridRowStart: true,
              lineHeight: true,
              opacity: true,
              order: true,
              orphans: true,
              widows: true,
              zIndex: true,
              zoom: true,
            },

            
            
            cssProps: {},

            
            style: function (elem, name, value, extra) {
              
              if (
                !elem ||
                elem.nodeType === 3 ||
                elem.nodeType === 8 ||
                !elem.style
              ) {
                return;
              }

              
              var ret,
                type,
                hooks,
                origName = camelCase(name),
                isCustomProp = rcustomProp.test(name),
                style = elem.style;

              
              
              
              if (!isCustomProp) {
                name = finalPropName(origName);
              }

              
              hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

              
              if (value !== undefined) {
                type = typeof value;

                
                if (
                  type === "string" &&
                  (ret = rcssNum.exec(value)) &&
                  ret[1]
                ) {
                  value = adjustCSS(elem, name, ret);

                  
                  type = "number";
                }

                
                if (value == null || value !== value) {
                  return;
                }

                
                
                
                if (type === "number" && !isCustomProp) {
                  value +=
                    (ret && ret[3]) || (jQuery.cssNumber[origName] ? "" : "px");
                }

                
                if (
                  !support.clearCloneStyle &&
                  value === "" &&
                  name.indexOf("background") === 0
                ) {
                  style[name] = "inherit";
                }

                
                if (
                  !hooks ||
                  !("set" in hooks) ||
                  (value = hooks.set(elem, value, extra)) !== undefined
                ) {
                  if (isCustomProp) {
                    style.setProperty(name, value);
                  } else {
                    style[name] = value;
                  }
                }
              } else {
                
                if (
                  hooks &&
                  "get" in hooks &&
                  (ret = hooks.get(elem, false, extra)) !== undefined
                ) {
                  return ret;
                }

                
                return style[name];
              }
            },

            css: function (elem, name, extra, styles) {
              var val,
                num,
                hooks,
                origName = camelCase(name),
                isCustomProp = rcustomProp.test(name);

              
              
              
              if (!isCustomProp) {
                name = finalPropName(origName);
              }

              
              hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

              
              if (hooks && "get" in hooks) {
                val = hooks.get(elem, true, extra);
              }

              
              if (val === undefined) {
                val = curCSS(elem, name, styles);
              }

              
              if (val === "normal" && name in cssNormalTransform) {
                val = cssNormalTransform[name];
              }

              
              if (extra === "" || extra) {
                num = parseFloat(val);
                return extra === true || isFinite(num) ? num || 0 : val;
              }

              return val;
            },
          });

          jQuery.each(["height", "width"], function (_i, dimension) {
            jQuery.cssHooks[dimension] = {
              get: function (elem, computed, extra) {
                if (computed) {
                  
                  
                  return rdisplayswap.test(jQuery.css(elem, "display")) &&
                    
                    
                    
                    
                    
                    
                    (!elem.getClientRects().length ||
                      !elem.getBoundingClientRect().width)
                    ? swap(elem, cssShow, function () {
                        return getWidthOrHeight(elem, dimension, extra);
                      })
                    : getWidthOrHeight(elem, dimension, extra);
                }
              },

              set: function (elem, value, extra) {
                var matches,
                  styles = getStyles(elem),
                  
                  
                  scrollboxSizeBuggy =
                    !support.scrollboxSize() && styles.position === "absolute",
                  
                  boxSizingNeeded = scrollboxSizeBuggy || extra,
                  isBorderBox =
                    boxSizingNeeded &&
                    jQuery.css(elem, "boxSizing", false, styles) ===
                      "border-box",
                  subtract = extra
                    ? boxModelAdjustment(
                        elem,
                        dimension,
                        extra,
                        isBorderBox,
                        styles
                      )
                    : 0;

                
                
                if (isBorderBox && scrollboxSizeBuggy) {
                  subtract -= Math.ceil(
                    elem[
                      "offset" + dimension[0].toUpperCase() + dimension.slice(1)
                    ] -
                      parseFloat(styles[dimension]) -
                      boxModelAdjustment(
                        elem,
                        dimension,
                        "border",
                        false,
                        styles
                      ) -
                      0.5
                  );
                }

                
                if (
                  subtract &&
                  (matches = rcssNum.exec(value)) &&
                  (matches[3] || "px") !== "px"
                ) {
                  elem.style[dimension] = value;
                  value = jQuery.css(elem, dimension);
                }

                return setPositiveNumber(elem, value, subtract);
              },
            };
          });

          jQuery.cssHooks.marginLeft = addGetHookIf(
            support.reliableMarginLeft,
            function (elem, computed) {
              if (computed) {
                return (
                  (parseFloat(curCSS(elem, "marginLeft")) ||
                    elem.getBoundingClientRect().left -
                      swap(elem, { marginLeft: 0 }, function () {
                        return elem.getBoundingClientRect().left;
                      })) + "px"
                );
              }
            }
          );

          
          jQuery.each(
            {
              margin: "",
              padding: "",
              border: "Width",
            },
            function (prefix, suffix) {
              jQuery.cssHooks[prefix + suffix] = {
                expand: function (value) {
                  var i = 0,
                    expanded = {},
                    
                    parts =
                      typeof value === "string" ? value.split(" ") : [value];

                  for (; i < 4; i++) {
                    expanded[prefix + cssExpand[i] + suffix] =
                      parts[i] || parts[i - 2] || parts[0];
                  }

                  return expanded;
                },
              };

              if (prefix !== "margin") {
                jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
              }
            }
          );

          jQuery.fn.extend({
            css: function (name, value) {
              return access(
                this,
                function (elem, name, value) {
                  var styles,
                    len,
                    map = {},
                    i = 0;

                  if (Array.isArray(name)) {
                    styles = getStyles(elem);
                    len = name.length;

                    for (; i < len; i++) {
                      map[name[i]] = jQuery.css(elem, name[i], false, styles);
                    }

                    return map;
                  }

                  return value !== undefined
                    ? jQuery.style(elem, name, value)
                    : jQuery.css(elem, name);
                },
                name,
                value,
                arguments.length > 1
              );
            },
          });

          function Tween(elem, options, prop, end, easing) {
            return new Tween.prototype.init(elem, options, prop, end, easing);
          }
          jQuery.Tween = Tween;

          Tween.prototype = {
            constructor: Tween,
            init: function (elem, options, prop, end, easing, unit) {
              this.elem = elem;
              this.prop = prop;
              this.easing = easing || jQuery.easing._default;
              this.options = options;
              this.start = this.now = this.cur();
              this.end = end;
              this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
            },
            cur: function () {
              var hooks = Tween.propHooks[this.prop];

              return hooks && hooks.get
                ? hooks.get(this)
                : Tween.propHooks._default.get(this);
            },
            run: function (percent) {
              var eased,
                hooks = Tween.propHooks[this.prop];

              if (this.options.duration) {
                this.pos = eased = jQuery.easing[this.easing](
                  percent,
                  this.options.duration * percent,
                  0,
                  1,
                  this.options.duration
                );
              } else {
                this.pos = eased = percent;
              }
              this.now = (this.end - this.start) * eased + this.start;

              if (this.options.step) {
                this.options.step.call(this.elem, this.now, this);
              }

              if (hooks && hooks.set) {
                hooks.set(this);
              } else {
                Tween.propHooks._default.set(this);
              }
              return this;
            },
          };

          Tween.prototype.init.prototype = Tween.prototype;

          Tween.propHooks = {
            _default: {
              get: function (tween) {
                var result;

                
                
                if (
                  tween.elem.nodeType !== 1 ||
                  (tween.elem[tween.prop] != null &&
                    tween.elem.style[tween.prop] == null)
                ) {
                  return tween.elem[tween.prop];
                }

                
                
                
                
                result = jQuery.css(tween.elem, tween.prop, "");

                
                return !result || result === "auto" ? 0 : result;
              },
              set: function (tween) {
                
                
                
                if (jQuery.fx.step[tween.prop]) {
                  jQuery.fx.step[tween.prop](tween);
                } else if (
                  tween.elem.nodeType === 1 &&
                  (jQuery.cssHooks[tween.prop] ||
                    tween.elem.style[finalPropName(tween.prop)] != null)
                ) {
                  jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
                } else {
                  tween.elem[tween.prop] = tween.now;
                }
              },
            },
          };

          
          
          Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
            set: function (tween) {
              if (tween.elem.nodeType && tween.elem.parentNode) {
                tween.elem[tween.prop] = tween.now;
              }
            },
          };

          jQuery.easing = {
            linear: function (p) {
              return p;
            },
            swing: function (p) {
              return 0.5 - Math.cos(p * Math.PI) / 2;
            },
            _default: "swing",
          };

          jQuery.fx = Tween.prototype.init;

          
          jQuery.fx.step = {};

          var fxNow,
            inProgress,
            rfxtypes = /^(?:toggle|show|hide)$/,
            rrun = /queueHooks$/;

          function schedule() {
            if (inProgress) {
              if (document.hidden === false && window.requestAnimationFrame) {
                window.requestAnimationFrame(schedule);
              } else {
                window.setTimeout(schedule, jQuery.fx.interval);
              }

              jQuery.fx.tick();
            }
          }

          
          function createFxNow() {
            window.setTimeout(function () {
              fxNow = undefined;
            });
            return (fxNow = Date.now());
          }

          
          function genFx(type, includeWidth) {
            var which,
              i = 0,
              attrs = { height: type };

            
            
            includeWidth = includeWidth ? 1 : 0;
            for (; i < 4; i += 2 - includeWidth) {
              which = cssExpand[i];
              attrs["margin" + which] = attrs["padding" + which] = type;
            }

            if (includeWidth) {
              attrs.opacity = attrs.width = type;
            }

            return attrs;
          }

          function createTween(value, prop, animation) {
            var tween,
              collection = (Animation.tweeners[prop] || []).concat(
                Animation.tweeners["*"]
              ),
              index = 0,
              length = collection.length;
            for (; index < length; index++) {
              if ((tween = collection[index].call(animation, prop, value))) {
                
                return tween;
              }
            }
          }

          function defaultPrefilter(elem, props, opts) {
            var prop,
              value,
              toggle,
              hooks,
              oldfire,
              propTween,
              restoreDisplay,
              display,
              isBox = "width" in props || "height" in props,
              anim = this,
              orig = {},
              style = elem.style,
              hidden = elem.nodeType && isHiddenWithinTree(elem),
              dataShow = dataPriv.get(elem, "fxshow");

            
            if (!opts.queue) {
              hooks = jQuery._queueHooks(elem, "fx");
              if (hooks.unqueued == null) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;
                hooks.empty.fire = function () {
                  if (!hooks.unqueued) {
                    oldfire();
                  }
                };
              }
              hooks.unqueued++;

              anim.always(function () {
                
                anim.always(function () {
                  hooks.unqueued--;
                  if (!jQuery.queue(elem, "fx").length) {
                    hooks.empty.fire();
                  }
                });
              });
            }

            
            for (prop in props) {
              value = props[prop];
              if (rfxtypes.test(value)) {
                delete props[prop];
                toggle = toggle || value === "toggle";
                if (value === (hidden ? "hide" : "show")) {
                  
                  
                  if (
                    value === "show" &&
                    dataShow &&
                    dataShow[prop] !== undefined
                  ) {
                    hidden = true;

                    
                  } else {
                    continue;
                  }
                }
                orig[prop] =
                  (dataShow && dataShow[prop]) || jQuery.style(elem, prop);
              }
            }

            
            propTween = !jQuery.isEmptyObject(props);
            if (!propTween && jQuery.isEmptyObject(orig)) {
              return;
            }

            
            if (isBox && elem.nodeType === 1) {
              
              
              
              
              opts.overflow = [
                style.overflow,
                style.overflowX,
                style.overflowY,
              ];

              
              restoreDisplay = dataShow && dataShow.display;
              if (restoreDisplay == null) {
                restoreDisplay = dataPriv.get(elem, "display");
              }
              display = jQuery.css(elem, "display");
              if (display === "none") {
                if (restoreDisplay) {
                  display = restoreDisplay;
                } else {
                  
                  showHide([elem], true);
                  restoreDisplay = elem.style.display || restoreDisplay;
                  display = jQuery.css(elem, "display");
                  showHide([elem]);
                }
              }

              
              if (
                display === "inline" ||
                (display === "inline-block" && restoreDisplay != null)
              ) {
                if (jQuery.css(elem, "float") === "none") {
                  
                  if (!propTween) {
                    anim.done(function () {
                      style.display = restoreDisplay;
                    });
                    if (restoreDisplay == null) {
                      display = style.display;
                      restoreDisplay = display === "none" ? "" : display;
                    }
                  }
                  style.display = "inline-block";
                }
              }
            }

            if (opts.overflow) {
              style.overflow = "hidden";
              anim.always(function () {
                style.overflow = opts.overflow[0];
                style.overflowX = opts.overflow[1];
                style.overflowY = opts.overflow[2];
              });
            }

            
            propTween = false;
            for (prop in orig) {
              
              if (!propTween) {
                if (dataShow) {
                  if ("hidden" in dataShow) {
                    hidden = dataShow.hidden;
                  }
                } else {
                  dataShow = dataPriv.access(elem, "fxshow", {
                    display: restoreDisplay,
                  });
                }

                
                if (toggle) {
                  dataShow.hidden = !hidden;
                }

                
                if (hidden) {
                  showHide([elem], true);
                }

                 

                anim.done(function () {
                   

                  
                  if (!hidden) {
                    showHide([elem]);
                  }
                  dataPriv.remove(elem, "fxshow");
                  for (prop in orig) {
                    jQuery.style(elem, prop, orig[prop]);
                  }
                });
              }

              
              propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
              if (!(prop in dataShow)) {
                dataShow[prop] = propTween.start;
                if (hidden) {
                  propTween.end = propTween.start;
                  propTween.start = 0;
                }
              }
            }
          }

          function propFilter(props, specialEasing) {
            var index, name, easing, value, hooks;

            
            for (index in props) {
              name = camelCase(index);
              easing = specialEasing[name];
              value = props[index];
              if (Array.isArray(value)) {
                easing = value[1];
                value = props[index] = value[0];
              }

              if (index !== name) {
                props[name] = value;
                delete props[index];
              }

              hooks = jQuery.cssHooks[name];
              if (hooks && "expand" in hooks) {
                value = hooks.expand(value);
                delete props[name];

                
                
                for (index in value) {
                  if (!(index in props)) {
                    props[index] = value[index];
                    specialEasing[index] = easing;
                  }
                }
              } else {
                specialEasing[name] = easing;
              }
            }
          }

          function Animation(elem, properties, options) {
            var result,
              stopped,
              index = 0,
              length = Animation.prefilters.length,
              deferred = jQuery.Deferred().always(function () {
                
                delete tick.elem;
              }),
              tick = function () {
                if (stopped) {
                  return false;
                }
                var currentTime = fxNow || createFxNow(),
                  remaining = Math.max(
                    0,
                    animation.startTime + animation.duration - currentTime
                  ),
                  
                  
                  temp = remaining / animation.duration || 0,
                  percent = 1 - temp,
                  index = 0,
                  length = animation.tweens.length;

                for (; index < length; index++) {
                  animation.tweens[index].run(percent);
                }

                deferred.notifyWith(elem, [animation, percent, remaining]);

                
                if (percent < 1 && length) {
                  return remaining;
                }

                
                if (!length) {
                  deferred.notifyWith(elem, [animation, 1, 0]);
                }

                
                deferred.resolveWith(elem, [animation]);
                return false;
              },
              animation = deferred.promise({
                elem: elem,
                props: jQuery.extend({}, properties),
                opts: jQuery.extend(
                  true,
                  {
                    specialEasing: {},
                    easing: jQuery.easing._default,
                  },
                  options
                ),
                originalProperties: properties,
                originalOptions: options,
                startTime: fxNow || createFxNow(),
                duration: options.duration,
                tweens: [],
                createTween: function (prop, end) {
                  var tween = jQuery.Tween(
                    elem,
                    animation.opts,
                    prop,
                    end,
                    animation.opts.specialEasing[prop] || animation.opts.easing
                  );
                  animation.tweens.push(tween);
                  return tween;
                },
                stop: function (gotoEnd) {
                  var index = 0,
                    
                    
                    length = gotoEnd ? animation.tweens.length : 0;
                  if (stopped) {
                    return this;
                  }
                  stopped = true;
                  for (; index < length; index++) {
                    animation.tweens[index].run(1);
                  }

                  
                  if (gotoEnd) {
                    deferred.notifyWith(elem, [animation, 1, 0]);
                    deferred.resolveWith(elem, [animation, gotoEnd]);
                  } else {
                    deferred.rejectWith(elem, [animation, gotoEnd]);
                  }
                  return this;
                },
              }),
              props = animation.props;

            propFilter(props, animation.opts.specialEasing);

            for (; index < length; index++) {
              result = Animation.prefilters[index].call(
                animation,
                elem,
                props,
                animation.opts
              );
              if (result) {
                if (isFunction(result.stop)) {
                  jQuery._queueHooks(
                    animation.elem,
                    animation.opts.queue
                  ).stop = result.stop.bind(result);
                }
                return result;
              }
            }

            jQuery.map(props, createTween, animation);

            if (isFunction(animation.opts.start)) {
              animation.opts.start.call(elem, animation);
            }

            
            animation
              .progress(animation.opts.progress)
              .done(animation.opts.done, animation.opts.complete)
              .fail(animation.opts.fail)
              .always(animation.opts.always);

            jQuery.fx.timer(
              jQuery.extend(tick, {
                elem: elem,
                anim: animation,
                queue: animation.opts.queue,
              })
            );

            return animation;
          }

          jQuery.Animation = jQuery.extend(Animation, {
            tweeners: {
              "*": [
                function (prop, value) {
                  var tween = this.createTween(prop, value);
                  adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
                  return tween;
                },
              ],
            },

            tweener: function (props, callback) {
              if (isFunction(props)) {
                callback = props;
                props = ["*"];
              } else {
                props = props.match(rnothtmlwhite);
              }

              var prop,
                index = 0,
                length = props.length;

              for (; index < length; index++) {
                prop = props[index];
                Animation.tweeners[prop] = Animation.tweeners[prop] || [];
                Animation.tweeners[prop].unshift(callback);
              }
            },

            prefilters: [defaultPrefilter],

            prefilter: function (callback, prepend) {
              if (prepend) {
                Animation.prefilters.unshift(callback);
              } else {
                Animation.prefilters.push(callback);
              }
            },
          });

          jQuery.speed = function (speed, easing, fn) {
            var opt =
              speed && typeof speed === "object"
                ? jQuery.extend({}, speed)
                : {
                    complete:
                      fn || (!fn && easing) || (isFunction(speed) && speed),
                    duration: speed,
                    easing:
                      (fn && easing) ||
                      (easing && !isFunction(easing) && easing),
                  };

            
            if (jQuery.fx.off) {
              opt.duration = 0;
            } else {
              if (typeof opt.duration !== "number") {
                if (opt.duration in jQuery.fx.speeds) {
                  opt.duration = jQuery.fx.speeds[opt.duration];
                } else {
                  opt.duration = jQuery.fx.speeds._default;
                }
              }
            }

            
            if (opt.queue == null || opt.queue === true) {
              opt.queue = "fx";
            }

            
            opt.old = opt.complete;

            opt.complete = function () {
              if (isFunction(opt.old)) {
                opt.old.call(this);
              }

              if (opt.queue) {
                jQuery.dequeue(this, opt.queue);
              }
            };

            return opt;
          };

          jQuery.fn.extend({
            fadeTo: function (speed, to, easing, callback) {
              
              return (
                this.filter(isHiddenWithinTree)
                  .css("opacity", 0)
                  .show()

                  
                  .end()
                  .animate({ opacity: to }, speed, easing, callback)
              );
            },
            animate: function (prop, speed, easing, callback) {
              var empty = jQuery.isEmptyObject(prop),
                optall = jQuery.speed(speed, easing, callback),
                doAnimation = function () {
                  
                  var anim = Animation(this, jQuery.extend({}, prop), optall);

                  
                  if (empty || dataPriv.get(this, "finish")) {
                    anim.stop(true);
                  }
                };

              doAnimation.finish = doAnimation;

              return empty || optall.queue === false
                ? this.each(doAnimation)
                : this.queue(optall.queue, doAnimation);
            },
            stop: function (type, clearQueue, gotoEnd) {
              var stopQueue = function (hooks) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop(gotoEnd);
              };

              if (typeof type !== "string") {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = undefined;
              }
              if (clearQueue) {
                this.queue(type || "fx", []);
              }

              return this.each(function () {
                var dequeue = true,
                  index = type != null && type + "queueHooks",
                  timers = jQuery.timers,
                  data = dataPriv.get(this);

                if (index) {
                  if (data[index] && data[index].stop) {
                    stopQueue(data[index]);
                  }
                } else {
                  for (index in data) {
                    if (data[index] && data[index].stop && rrun.test(index)) {
                      stopQueue(data[index]);
                    }
                  }
                }

                for (index = timers.length; index--; ) {
                  if (
                    timers[index].elem === this &&
                    (type == null || timers[index].queue === type)
                  ) {
                    timers[index].anim.stop(gotoEnd);
                    dequeue = false;
                    timers.splice(index, 1);
                  }
                }

                
                
                
                if (dequeue || !gotoEnd) {
                  jQuery.dequeue(this, type);
                }
              });
            },
            finish: function (type) {
              if (type !== false) {
                type = type || "fx";
              }
              return this.each(function () {
                var index,
                  data = dataPriv.get(this),
                  queue = data[type + "queue"],
                  hooks = data[type + "queueHooks"],
                  timers = jQuery.timers,
                  length = queue ? queue.length : 0;

                
                data.finish = true;

                
                jQuery.queue(this, type, []);

                if (hooks && hooks.stop) {
                  hooks.stop.call(this, true);
                }

                
                for (index = timers.length; index--; ) {
                  if (
                    timers[index].elem === this &&
                    timers[index].queue === type
                  ) {
                    timers[index].anim.stop(true);
                    timers.splice(index, 1);
                  }
                }

                
                for (index = 0; index < length; index++) {
                  if (queue[index] && queue[index].finish) {
                    queue[index].finish.call(this);
                  }
                }

                
                delete data.finish;
              });
            },
          });

          jQuery.each(["toggle", "show", "hide"], function (_i, name) {
            var cssFn = jQuery.fn[name];
            jQuery.fn[name] = function (speed, easing, callback) {
              return speed == null || typeof speed === "boolean"
                ? cssFn.apply(this, arguments)
                : this.animate(genFx(name, true), speed, easing, callback);
            };
          });

          
          jQuery.each(
            {
              slideDown: genFx("show"),
              slideUp: genFx("hide"),
              slideToggle: genFx("toggle"),
              fadeIn: { opacity: "show" },
              fadeOut: { opacity: "hide" },
              fadeToggle: { opacity: "toggle" },
            },
            function (name, props) {
              jQuery.fn[name] = function (speed, easing, callback) {
                return this.animate(props, speed, easing, callback);
              };
            }
          );

          jQuery.timers = [];
          jQuery.fx.tick = function () {
            var timer,
              i = 0,
              timers = jQuery.timers;

            fxNow = Date.now();

            for (; i < timers.length; i++) {
              timer = timers[i];

              
              if (!timer() && timers[i] === timer) {
                timers.splice(i--, 1);
              }
            }

            if (!timers.length) {
              jQuery.fx.stop();
            }
            fxNow = undefined;
          };

          jQuery.fx.timer = function (timer) {
            jQuery.timers.push(timer);
            jQuery.fx.start();
          };

          jQuery.fx.interval = 13;
          jQuery.fx.start = function () {
            if (inProgress) {
              return;
            }

            inProgress = true;
            schedule();
          };

          jQuery.fx.stop = function () {
            inProgress = null;
          };

          jQuery.fx.speeds = {
            slow: 600,
            fast: 200,

            
            _default: 400,
          };

          
          
          jQuery.fn.delay = function (time, type) {
            time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
            type = type || "fx";

            return this.queue(type, function (next, hooks) {
              var timeout = window.setTimeout(next, time);
              hooks.stop = function () {
                window.clearTimeout(timeout);
              };
            });
          };

          (function () {
            var input = document.createElement("input"),
              select = document.createElement("select"),
              opt = select.appendChild(document.createElement("option"));

            input.type = "checkbox";

            
            
            support.checkOn = input.value !== "";

            
            
            support.optSelected = opt.selected;

            
            
            input = document.createElement("input");
            input.value = "t";
            input.type = "radio";
            support.radioValue = input.value === "t";
          })();

          var boolHook,
            attrHandle = jQuery.expr.attrHandle;

          jQuery.fn.extend({
            attr: function (name, value) {
              return access(
                this,
                jQuery.attr,
                name,
                value,
                arguments.length > 1
              );
            },

            removeAttr: function (name) {
              return this.each(function () {
                jQuery.removeAttr(this, name);
              });
            },
          });

          jQuery.extend({
            attr: function (elem, name, value) {
              var ret,
                hooks,
                nType = elem.nodeType;

              
              if (nType === 3 || nType === 8 || nType === 2) {
                return;
              }

              
              if (typeof elem.getAttribute === "undefined") {
                return jQuery.prop(elem, name, value);
              }

              
              
              if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                hooks =
                  jQuery.attrHooks[name.toLowerCase()] ||
                  (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
              }

              if (value !== undefined) {
                if (value === null) {
                  jQuery.removeAttr(elem, name);
                  return;
                }

                if (
                  hooks &&
                  "set" in hooks &&
                  (ret = hooks.set(elem, value, name)) !== undefined
                ) {
                  return ret;
                }

                elem.setAttribute(name, value + "");
                return value;
              }

              if (
                hooks &&
                "get" in hooks &&
                (ret = hooks.get(elem, name)) !== null
              ) {
                return ret;
              }

              ret = jQuery.find.attr(elem, name);

              
              return ret == null ? undefined : ret;
            },

            attrHooks: {
              type: {
                set: function (elem, value) {
                  if (
                    !support.radioValue &&
                    value === "radio" &&
                    nodeName(elem, "input")
                  ) {
                    var val = elem.value;
                    elem.setAttribute("type", value);
                    if (val) {
                      elem.value = val;
                    }
                    return value;
                  }
                },
              },
            },

            removeAttr: function (elem, value) {
              var name,
                i = 0,
                
                
                attrNames = value && value.match(rnothtmlwhite);

              if (attrNames && elem.nodeType === 1) {
                while ((name = attrNames[i++])) {
                  elem.removeAttribute(name);
                }
              }
            },
          });

          
          boolHook = {
            set: function (elem, value, name) {
              if (value === false) {
                
                jQuery.removeAttr(elem, name);
              } else {
                elem.setAttribute(name, name);
              }
              return name;
            },
          };

          jQuery.each(
            jQuery.expr.match.bool.source.match(/\w+/g),
            function (_i, name) {
              var getter = attrHandle[name] || jQuery.find.attr;

              attrHandle[name] = function (elem, name, isXML) {
                var ret,
                  handle,
                  lowercaseName = name.toLowerCase();

                if (!isXML) {
                  
                  handle = attrHandle[lowercaseName];
                  attrHandle[lowercaseName] = ret;
                  ret =
                    getter(elem, name, isXML) != null ? lowercaseName : null;
                  attrHandle[lowercaseName] = handle;
                }
                return ret;
              };
            }
          );

          var rfocusable = /^(?:input|select|textarea|button)$/i,
            rclickable = /^(?:a|area)$/i;

          jQuery.fn.extend({
            prop: function (name, value) {
              return access(
                this,
                jQuery.prop,
                name,
                value,
                arguments.length > 1
              );
            },

            removeProp: function (name) {
              return this.each(function () {
                delete this[jQuery.propFix[name] || name];
              });
            },
          });

          jQuery.extend({
            prop: function (elem, name, value) {
              var ret,
                hooks,
                nType = elem.nodeType;

              
              if (nType === 3 || nType === 8 || nType === 2) {
                return;
              }

              if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                
                name = jQuery.propFix[name] || name;
                hooks = jQuery.propHooks[name];
              }

              if (value !== undefined) {
                if (
                  hooks &&
                  "set" in hooks &&
                  (ret = hooks.set(elem, value, name)) !== undefined
                ) {
                  return ret;
                }

                return (elem[name] = value);
              }

              if (
                hooks &&
                "get" in hooks &&
                (ret = hooks.get(elem, name)) !== null
              ) {
                return ret;
              }

              return elem[name];
            },

            propHooks: {
              tabIndex: {
                get: function (elem) {
                  
                  
                  
                  
                  
                  var tabindex = jQuery.find.attr(elem, "tabindex");

                  if (tabindex) {
                    return parseInt(tabindex, 10);
                  }

                  if (
                    rfocusable.test(elem.nodeName) ||
                    (rclickable.test(elem.nodeName) && elem.href)
                  ) {
                    return 0;
                  }

                  return -1;
                },
              },
            },

            propFix: {
              for: "htmlFor",
              class: "className",
            },
          });

          
          
          
          
          
          
          
          
          if (!support.optSelected) {
            jQuery.propHooks.selected = {
              get: function (elem) {
                 

                var parent = elem.parentNode;
                if (parent && parent.parentNode) {
                  parent.parentNode.selectedIndex;
                }
                return null;
              },
              set: function (elem) {
                 

                var parent = elem.parentNode;
                if (parent) {
                  parent.selectedIndex;

                  if (parent.parentNode) {
                    parent.parentNode.selectedIndex;
                  }
                }
              },
            };
          }

          jQuery.each(
            [
              "tabIndex",
              "readOnly",
              "maxLength",
              "cellSpacing",
              "cellPadding",
              "rowSpan",
              "colSpan",
              "useMap",
              "frameBorder",
              "contentEditable",
            ],
            function () {
              jQuery.propFix[this.toLowerCase()] = this;
            }
          );

          
          
          function stripAndCollapse(value) {
            var tokens = value.match(rnothtmlwhite) || [];
            return tokens.join(" ");
          }

          function getClass(elem) {
            return (elem.getAttribute && elem.getAttribute("class")) || "";
          }

          function classesToArray(value) {
            if (Array.isArray(value)) {
              return value;
            }
            if (typeof value === "string") {
              return value.match(rnothtmlwhite) || [];
            }
            return [];
          }

          jQuery.fn.extend({
            addClass: function (value) {
              var classes,
                elem,
                cur,
                curValue,
                clazz,
                j,
                finalValue,
                i = 0;

              if (isFunction(value)) {
                return this.each(function (j) {
                  jQuery(this).addClass(value.call(this, j, getClass(this)));
                });
              }

              classes = classesToArray(value);

              if (classes.length) {
                while ((elem = this[i++])) {
                  curValue = getClass(elem);
                  cur =
                    elem.nodeType === 1 &&
                    " " + stripAndCollapse(curValue) + " ";

                  if (cur) {
                    j = 0;
                    while ((clazz = classes[j++])) {
                      if (cur.indexOf(" " + clazz + " ") < 0) {
                        cur += clazz + " ";
                      }
                    }

                    
                    finalValue = stripAndCollapse(cur);
                    if (curValue !== finalValue) {
                      elem.setAttribute("class", finalValue);
                    }
                  }
                }
              }

              return this;
            },

            removeClass: function (value) {
              var classes,
                elem,
                cur,
                curValue,
                clazz,
                j,
                finalValue,
                i = 0;

              if (isFunction(value)) {
                return this.each(function (j) {
                  jQuery(this).removeClass(value.call(this, j, getClass(this)));
                });
              }

              if (!arguments.length) {
                return this.attr("class", "");
              }

              classes = classesToArray(value);

              if (classes.length) {
                while ((elem = this[i++])) {
                  curValue = getClass(elem);

                  
                  cur =
                    elem.nodeType === 1 &&
                    " " + stripAndCollapse(curValue) + " ";

                  if (cur) {
                    j = 0;
                    while ((clazz = classes[j++])) {
                      
                      while (cur.indexOf(" " + clazz + " ") > -1) {
                        cur = cur.replace(" " + clazz + " ", " ");
                      }
                    }

                    
                    finalValue = stripAndCollapse(cur);
                    if (curValue !== finalValue) {
                      elem.setAttribute("class", finalValue);
                    }
                  }
                }
              }

              return this;
            },

            toggleClass: function (value, stateVal) {
              var type = typeof value,
                isValidValue = type === "string" || Array.isArray(value);

              if (typeof stateVal === "boolean" && isValidValue) {
                return stateVal
                  ? this.addClass(value)
                  : this.removeClass(value);
              }

              if (isFunction(value)) {
                return this.each(function (i) {
                  jQuery(this).toggleClass(
                    value.call(this, i, getClass(this), stateVal),
                    stateVal
                  );
                });
              }

              return this.each(function () {
                var className, i, self, classNames;

                if (isValidValue) {
                  
                  i = 0;
                  self = jQuery(this);
                  classNames = classesToArray(value);

                  while ((className = classNames[i++])) {
                    
                    if (self.hasClass(className)) {
                      self.removeClass(className);
                    } else {
                      self.addClass(className);
                    }
                  }

                  
                } else if (value === undefined || type === "boolean") {
                  className = getClass(this);
                  if (className) {
                    
                    dataPriv.set(this, "__className__", className);
                  }

                  
                  
                  
                  
                  if (this.setAttribute) {
                    this.setAttribute(
                      "class",
                      className || value === false
                        ? ""
                        : dataPriv.get(this, "__className__") || ""
                    );
                  }
                }
              });
            },

            hasClass: function (selector) {
              var className,
                elem,
                i = 0;

              className = " " + selector + " ";
              while ((elem = this[i++])) {
                if (
                  elem.nodeType === 1 &&
                  (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(
                    className
                  ) > -1
                ) {
                  return true;
                }
              }

              return false;
            },
          });

          var rreturn = /\r/g;

          jQuery.fn.extend({
            val: function (value) {
              var hooks,
                ret,
                valueIsFunction,
                elem = this[0];

              if (!arguments.length) {
                if (elem) {
                  hooks =
                    jQuery.valHooks[elem.type] ||
                    jQuery.valHooks[elem.nodeName.toLowerCase()];

                  if (
                    hooks &&
                    "get" in hooks &&
                    (ret = hooks.get(elem, "value")) !== undefined
                  ) {
                    return ret;
                  }

                  ret = elem.value;

                  
                  if (typeof ret === "string") {
                    return ret.replace(rreturn, "");
                  }

                  
                  return ret == null ? "" : ret;
                }

                return;
              }

              valueIsFunction = isFunction(value);

              return this.each(function (i) {
                var val;

                if (this.nodeType !== 1) {
                  return;
                }

                if (valueIsFunction) {
                  val = value.call(this, i, jQuery(this).val());
                } else {
                  val = value;
                }

                
                if (val == null) {
                  val = "";
                } else if (typeof val === "number") {
                  val += "";
                } else if (Array.isArray(val)) {
                  val = jQuery.map(val, function (value) {
                    return value == null ? "" : value + "";
                  });
                }

                hooks =
                  jQuery.valHooks[this.type] ||
                  jQuery.valHooks[this.nodeName.toLowerCase()];

                
                if (
                  !hooks ||
                  !("set" in hooks) ||
                  hooks.set(this, val, "value") === undefined
                ) {
                  this.value = val;
                }
              });
            },
          });

          jQuery.extend({
            valHooks: {
              option: {
                get: function (elem) {
                  var val = jQuery.find.attr(elem, "value");
                  return val != null
                    ? val
                    : 
                      
                      
                      
                      stripAndCollapse(jQuery.text(elem));
                },
              },
              select: {
                get: function (elem) {
                  var value,
                    option,
                    i,
                    options = elem.options,
                    index = elem.selectedIndex,
                    one = elem.type === "select-one",
                    values = one ? null : [],
                    max = one ? index + 1 : options.length;

                  if (index < 0) {
                    i = max;
                  } else {
                    i = one ? index : 0;
                  }

                  
                  for (; i < max; i++) {
                    option = options[i];

                    
                    
                    if (
                      (option.selected || i === index) &&
                      
                      !option.disabled &&
                      (!option.parentNode.disabled ||
                        !nodeName(option.parentNode, "optgroup"))
                    ) {
                      
                      value = jQuery(option).val();

                      
                      if (one) {
                        return value;
                      }

                      
                      values.push(value);
                    }
                  }

                  return values;
                },

                set: function (elem, value) {
                  var optionSet,
                    option,
                    options = elem.options,
                    values = jQuery.makeArray(value),
                    i = options.length;

                  while (i--) {
                    option = options[i];

                     

                    if (
                      (option.selected =
                        jQuery.inArray(
                          jQuery.valHooks.option.get(option),
                          values
                        ) > -1)
                    ) {
                      optionSet = true;
                    }

                     
                  }

                  
                  if (!optionSet) {
                    elem.selectedIndex = -1;
                  }
                  return values;
                },
              },
            },
          });

          
          jQuery.each(["radio", "checkbox"], function () {
            jQuery.valHooks[this] = {
              set: function (elem, value) {
                if (Array.isArray(value)) {
                  return (elem.checked =
                    jQuery.inArray(jQuery(elem).val(), value) > -1);
                }
              },
            };
            if (!support.checkOn) {
              jQuery.valHooks[this].get = function (elem) {
                return elem.getAttribute("value") === null ? "on" : elem.value;
              };
            }
          });

          

          support.focusin = "onfocusin" in window;

          var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
            stopPropagationCallback = function (e) {
              e.stopPropagation();
            };

          jQuery.extend(jQuery.event, {
            trigger: function (event, data, elem, onlyHandlers) {
              var i,
                cur,
                tmp,
                bubbleType,
                ontype,
                handle,
                special,
                lastElement,
                eventPath = [elem || document],
                type = hasOwn.call(event, "type") ? event.type : event,
                namespaces = hasOwn.call(event, "namespace")
                  ? event.namespace.split(".")
                  : [];

              cur = lastElement = tmp = elem = elem || document;

              
              if (elem.nodeType === 3 || elem.nodeType === 8) {
                return;
              }

              
              if (rfocusMorph.test(type + jQuery.event.triggered)) {
                return;
              }

              if (type.indexOf(".") > -1) {
                
                namespaces = type.split(".");
                type = namespaces.shift();
                namespaces.sort();
              }
              ontype = type.indexOf(":") < 0 && "on" + type;

              
              event = event[jQuery.expando]
                ? event
                : new jQuery.Event(type, typeof event === "object" && event);

              
              event.isTrigger = onlyHandlers ? 2 : 3;
              event.namespace = namespaces.join(".");
              event.rnamespace = event.namespace
                ? new RegExp(
                    "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)"
                  )
                : null;

              
              event.result = undefined;
              if (!event.target) {
                event.target = elem;
              }

              
              data = data == null ? [event] : jQuery.makeArray(data, [event]);

              
              special = jQuery.event.special[type] || {};
              if (
                !onlyHandlers &&
                special.trigger &&
                special.trigger.apply(elem, data) === false
              ) {
                return;
              }

              
              
              if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
                bubbleType = special.delegateType || type;
                if (!rfocusMorph.test(bubbleType + type)) {
                  cur = cur.parentNode;
                }
                for (; cur; cur = cur.parentNode) {
                  eventPath.push(cur);
                  tmp = cur;
                }

                
                if (tmp === (elem.ownerDocument || document)) {
                  eventPath.push(tmp.defaultView || tmp.parentWindow || window);
                }
              }

              
              i = 0;
              while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
                lastElement = cur;
                event.type = i > 1 ? bubbleType : special.bindType || type;

                
                handle =
                  (dataPriv.get(cur, "events") || Object.create(null))[
                    event.type
                  ] && dataPriv.get(cur, "handle");
                if (handle) {
                  handle.apply(cur, data);
                }

                
                handle = ontype && cur[ontype];
                if (handle && handle.apply && acceptData(cur)) {
                  event.result = handle.apply(cur, data);
                  if (event.result === false) {
                    event.preventDefault();
                  }
                }
              }
              event.type = type;

              
              if (!onlyHandlers && !event.isDefaultPrevented()) {
                if (
                  (!special._default ||
                    special._default.apply(eventPath.pop(), data) === false) &&
                  acceptData(elem)
                ) {
                  
                  
                  if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
                    
                    tmp = elem[ontype];

                    if (tmp) {
                      elem[ontype] = null;
                    }

                    
                    jQuery.event.triggered = type;

                    if (event.isPropagationStopped()) {
                      lastElement.addEventListener(
                        type,
                        stopPropagationCallback
                      );
                    }

                    elem[type]();

                    if (event.isPropagationStopped()) {
                      lastElement.removeEventListener(
                        type,
                        stopPropagationCallback
                      );
                    }

                    jQuery.event.triggered = undefined;

                    if (tmp) {
                      elem[ontype] = tmp;
                    }
                  }
                }
              }

              return event.result;
            },

            
            
            simulate: function (type, elem, event) {
              var e = jQuery.extend(new jQuery.Event(), event, {
                type: type,
                isSimulated: true,
              });

              jQuery.event.trigger(e, null, elem);
            },
          });

          jQuery.fn.extend({
            trigger: function (type, data) {
              return this.each(function () {
                jQuery.event.trigger(type, data, this);
              });
            },
            triggerHandler: function (type, data) {
              var elem = this[0];
              if (elem) {
                return jQuery.event.trigger(type, data, elem, true);
              }
            },
          });

          
          
          
          
          
          
          
          
          if (!support.focusin) {
            jQuery.each(
              { focus: "focusin", blur: "focusout" },
              function (orig, fix) {
                
                var handler = function (event) {
                  jQuery.event.simulate(
                    fix,
                    event.target,
                    jQuery.event.fix(event)
                  );
                };

                jQuery.event.special[fix] = {
                  setup: function () {
                    
                    
                    var doc = this.ownerDocument || this.document || this,
                      attaches = dataPriv.access(doc, fix);

                    if (!attaches) {
                      doc.addEventListener(orig, handler, true);
                    }
                    dataPriv.access(doc, fix, (attaches || 0) + 1);
                  },
                  teardown: function () {
                    var doc = this.ownerDocument || this.document || this,
                      attaches = dataPriv.access(doc, fix) - 1;

                    if (!attaches) {
                      doc.removeEventListener(orig, handler, true);
                      dataPriv.remove(doc, fix);
                    } else {
                      dataPriv.access(doc, fix, attaches);
                    }
                  },
                };
              }
            );
          }
          var location = window.location;

          var nonce = { guid: Date.now() };

          var rquery = /\?/;

          
          jQuery.parseXML = function (data) {
            var xml, parserErrorElem;
            if (!data || typeof data !== "string") {
              return null;
            }

            
            
            try {
              xml = new window.DOMParser().parseFromString(data, "text/xml");
            } catch (e) {}

            parserErrorElem = xml && xml.getElementsByTagName("parsererror")[0];
            if (!xml || parserErrorElem) {
              jQuery.error(
                "Invalid XML: " +
                  (parserErrorElem
                    ? jQuery
                        .map(parserErrorElem.childNodes, function (el) {
                          return el.textContent;
                        })
                        .join("\n")
                    : data)
              );
            }
            return xml;
          };

          var rbracket = /\[\]$/,
            rCRLF = /\r?\n/g,
            rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
            rsubmittable = /^(?:input|select|textarea|keygen)/i;

          function buildParams(prefix, obj, traditional, add) {
            var name;

            if (Array.isArray(obj)) {
              
              jQuery.each(obj, function (i, v) {
                if (traditional || rbracket.test(prefix)) {
                  
                  add(prefix, v);
                } else {
                  
                  buildParams(
                    prefix +
                      "[" +
                      (typeof v === "object" && v != null ? i : "") +
                      "]",
                    v,
                    traditional,
                    add
                  );
                }
              });
            } else if (!traditional && toType(obj) === "object") {
              
              for (name in obj) {
                buildParams(
                  prefix + "[" + name + "]",
                  obj[name],
                  traditional,
                  add
                );
              }
            } else {
              
              add(prefix, obj);
            }
          }

          
          
          jQuery.param = function (a, traditional) {
            var prefix,
              s = [],
              add = function (key, valueOrFunction) {
                
                var value = isFunction(valueOrFunction)
                  ? valueOrFunction()
                  : valueOrFunction;

                s[s.length] =
                  encodeURIComponent(key) +
                  "=" +
                  encodeURIComponent(value == null ? "" : value);
              };

            if (a == null) {
              return "";
            }

            
            if (Array.isArray(a) || (a.jquery && !jQuery.isPlainObject(a))) {
              
              jQuery.each(a, function () {
                add(this.name, this.value);
              });
            } else {
              
              
              for (prefix in a) {
                buildParams(prefix, a[prefix], traditional, add);
              }
            }

            
            return s.join("&");
          };

          jQuery.fn.extend({
            serialize: function () {
              return jQuery.param(this.serializeArray());
            },
            serializeArray: function () {
              return this.map(function () {
                
                var elements = jQuery.prop(this, "elements");
                return elements ? jQuery.makeArray(elements) : this;
              })
                .filter(function () {
                  var type = this.type;

                  
                  return (
                    this.name &&
                    !jQuery(this).is(":disabled") &&
                    rsubmittable.test(this.nodeName) &&
                    !rsubmitterTypes.test(type) &&
                    (this.checked || !rcheckableType.test(type))
                  );
                })
                .map(function (_i, elem) {
                  var val = jQuery(this).val();

                  if (val == null) {
                    return null;
                  }

                  if (Array.isArray(val)) {
                    return jQuery.map(val, function (val) {
                      return {
                        name: elem.name,
                        value: val.replace(rCRLF, "\r\n"),
                      };
                    });
                  }

                  return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
                })
                .get();
            },
          });

          var r20 = /%20/g,
            rhash = /#.*$/,
            rantiCache = /([?&])_=[^&]*/,
            rheaders = /^(.*?):[ \t]*([^\r\n]*)$/gm,
            
            rlocalProtocol =
              /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
            rnoContent = /^(?:GET|HEAD)$/,
            rprotocol = /^\/\//,
            

            prefilters = {},
            

            transports = {},
            
            allTypes = "*/".concat("*"),
            
            originAnchor = document.createElement("a");

          originAnchor.href = location.href;

          
          function addToPrefiltersOrTransports(structure) {
            
            return function (dataTypeExpression, func) {
              if (typeof dataTypeExpression !== "string") {
                func = dataTypeExpression;
                dataTypeExpression = "*";
              }

              var dataType,
                i = 0,
                dataTypes =
                  dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];

              if (isFunction(func)) {
                
                while ((dataType = dataTypes[i++])) {
                  
                  if (dataType[0] === "+") {
                    dataType = dataType.slice(1) || "*";
                    (structure[dataType] = structure[dataType] || []).unshift(
                      func
                    );

                    
                  } else {
                    (structure[dataType] = structure[dataType] || []).push(
                      func
                    );
                  }
                }
              }
            };
          }

          
          function inspectPrefiltersOrTransports(
            structure,
            options,
            originalOptions,
            jqXHR
          ) {
            var inspected = {},
              seekingTransport = structure === transports;

            function inspect(dataType) {
              var selected;
              inspected[dataType] = true;
              jQuery.each(
                structure[dataType] || [],
                function (_, prefilterOrFactory) {
                  var dataTypeOrTransport = prefilterOrFactory(
                    options,
                    originalOptions,
                    jqXHR
                  );
                  if (
                    typeof dataTypeOrTransport === "string" &&
                    !seekingTransport &&
                    !inspected[dataTypeOrTransport]
                  ) {
                    options.dataTypes.unshift(dataTypeOrTransport);
                    inspect(dataTypeOrTransport);
                    return false;
                  } else if (seekingTransport) {
                    return !(selected = dataTypeOrTransport);
                  }
                }
              );
              return selected;
            }

            return (
              inspect(options.dataTypes[0]) || (!inspected["*"] && inspect("*"))
            );
          }

          
          
          
          function ajaxExtend(target, src) {
            var key,
              deep,
              flatOptions = jQuery.ajaxSettings.flatOptions || {};

            for (key in src) {
              if (src[key] !== undefined) {
                (flatOptions[key] ? target : deep || (deep = {}))[key] =
                  src[key];
              }
            }
            if (deep) {
              jQuery.extend(true, target, deep);
            }

            return target;
          }

          

          function ajaxHandleResponses(s, jqXHR, responses) {
            var ct,
              type,
              finalDataType,
              firstDataType,
              contents = s.contents,
              dataTypes = s.dataTypes;

            
            while (dataTypes[0] === "*") {
              dataTypes.shift();
              if (ct === undefined) {
                ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
              }
            }

            
            if (ct) {
              for (type in contents) {
                if (contents[type] && contents[type].test(ct)) {
                  dataTypes.unshift(type);
                  break;
                }
              }
            }

            
            if (dataTypes[0] in responses) {
              finalDataType = dataTypes[0];
            } else {
              
              for (type in responses) {
                if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                  finalDataType = type;
                  break;
                }
                if (!firstDataType) {
                  firstDataType = type;
                }
              }

              
              finalDataType = finalDataType || firstDataType;
            }

            
            
            
            if (finalDataType) {
              if (finalDataType !== dataTypes[0]) {
                dataTypes.unshift(finalDataType);
              }
              return responses[finalDataType];
            }
          }

          

          function ajaxConvert(s, response, jqXHR, isSuccess) {
            var conv2,
              current,
              conv,
              tmp,
              prev,
              converters = {},
              
              dataTypes = s.dataTypes.slice();

            
            if (dataTypes[1]) {
              for (conv in s.converters) {
                converters[conv.toLowerCase()] = s.converters[conv];
              }
            }

            current = dataTypes.shift();

            
            while (current) {
              if (s.responseFields[current]) {
                jqXHR[s.responseFields[current]] = response;
              }

              
              if (!prev && isSuccess && s.dataFilter) {
                response = s.dataFilter(response, s.dataType);
              }

              prev = current;
              current = dataTypes.shift();

              if (current) {
                
                if (current === "*") {
                  current = prev;

                  
                } else if (prev !== "*" && prev !== current) {
                  
                  conv =
                    converters[prev + " " + current] ||
                    converters["* " + current];

                  
                  if (!conv) {
                    for (conv2 in converters) {
                      
                      tmp = conv2.split(" ");
                      if (tmp[1] === current) {
                        
                        conv =
                          converters[prev + " " + tmp[0]] ||
                          converters["* " + tmp[0]];
                        if (conv) {
                          
                          if (conv === true) {
                            conv = converters[conv2];

                            
                          } else if (converters[conv2] !== true) {
                            current = tmp[0];
                            dataTypes.unshift(tmp[1]);
                          }
                          break;
                        }
                      }
                    }
                  }

                  
                  if (conv !== true) {
                    
                    if (conv && s.throws) {
                      response = conv(response);
                    } else {
                      try {
                        response = conv(response);
                      } catch (e) {
                        return {
                          state: "parsererror",
                          error: conv
                            ? e
                            : "No conversion from " + prev + " to " + current,
                        };
                      }
                    }
                  }
                }
              }
            }

            return { state: "success", data: response };
          }

          jQuery.extend({
            
            active: 0,

            
            lastModified: {},
            etag: {},

            ajaxSettings: {
              url: location.href,
              type: "GET",
              isLocal: rlocalProtocol.test(location.protocol),
              global: true,
              processData: true,
              async: true,
              contentType: "application/x-www-form-urlencoded; charset=UTF-8",

              


              accepts: {
                "*": allTypes,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript",
              },

              contents: {
                xml: /\bxml\b/,
                html: /\bhtml/,
                json: /\bjson\b/,
              },

              responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON",
              },

              
              
              converters: {
                
                "* text": String,

                
                "text html": true,

                
                "text json": JSON.parse,

                
                "text xml": jQuery.parseXML,
              },

              
              
              
              
              flatOptions: {
                url: true,
                context: true,
              },
            },

            
            
            
            ajaxSetup: function (target, settings) {
              return settings
                ? 
                  ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings)
                : 
                  ajaxExtend(jQuery.ajaxSettings, target);
            },

            ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
            ajaxTransport: addToPrefiltersOrTransports(transports),

            
            ajax: function (url, options) {
              
              if (typeof url === "object") {
                options = url;
                url = undefined;
              }

              
              options = options || {};

              var transport,
                
                cacheURL,
                
                responseHeadersString,
                responseHeaders,
                
                timeoutTimer,
                
                urlAnchor,
                
                completed,
                
                fireGlobals,
                
                i,
                
                uncached,
                
                s = jQuery.ajaxSetup({}, options),
                
                callbackContext = s.context || s,
                
                globalEventContext =
                  s.context &&
                  (callbackContext.nodeType || callbackContext.jquery)
                    ? jQuery(callbackContext)
                    : jQuery.event,
                
                deferred = jQuery.Deferred(),
                completeDeferred = jQuery.Callbacks("once memory"),
                
                statusCode = s.statusCode || {},
                
                requestHeaders = {},
                requestHeadersNames = {},
                
                strAbort = "canceled",
                
                jqXHR = {
                  readyState: 0,

                  
                  getResponseHeader: function (key) {
                    var match;
                    if (completed) {
                      if (!responseHeaders) {
                        responseHeaders = {};
                        while ((match = rheaders.exec(responseHeadersString))) {
                          responseHeaders[match[1].toLowerCase() + " "] = (
                            responseHeaders[match[1].toLowerCase() + " "] || []
                          ).concat(match[2]);
                        }
                      }
                      match = responseHeaders[key.toLowerCase() + " "];
                    }
                    return match == null ? null : match.join(", ");
                  },

                  
                  getAllResponseHeaders: function () {
                    return completed ? responseHeadersString : null;
                  },

                  
                  setRequestHeader: function (name, value) {
                    if (completed == null) {
                      name = requestHeadersNames[name.toLowerCase()] =
                        requestHeadersNames[name.toLowerCase()] || name;
                      requestHeaders[name] = value;
                    }
                    return this;
                  },

                  
                  overrideMimeType: function (type) {
                    if (completed == null) {
                      s.mimeType = type;
                    }
                    return this;
                  },

                  
                  statusCode: function (map) {
                    var code;
                    if (map) {
                      if (completed) {
                        
                        jqXHR.always(map[jqXHR.status]);
                      } else {
                        
                        for (code in map) {
                          statusCode[code] = [statusCode[code], map[code]];
                        }
                      }
                    }
                    return this;
                  },

                  
                  abort: function (statusText) {
                    var finalText = statusText || strAbort;
                    if (transport) {
                      transport.abort(finalText);
                    }
                    done(0, finalText);
                    return this;
                  },
                };

              
              deferred.promise(jqXHR);

              
              
              
              s.url = ((url || s.url || location.href) + "").replace(
                rprotocol,
                location.protocol + "//"
              );

              
              s.type = options.method || options.type || s.method || s.type;

              
              s.dataTypes = (s.dataType || "*")
                .toLowerCase()
                .match(rnothtmlwhite) || [""];

              
              if (s.crossDomain == null) {
                urlAnchor = document.createElement("a");

                
                
                
                try {
                  urlAnchor.href = s.url;

                  
                  
                  urlAnchor.href = urlAnchor.href;
                  s.crossDomain =
                    originAnchor.protocol + "//" + originAnchor.host !==
                    urlAnchor.protocol + "//" + urlAnchor.host;
                } catch (e) {
                  
                  
                  s.crossDomain = true;
                }
              }

              
              if (s.data && s.processData && typeof s.data !== "string") {
                s.data = jQuery.param(s.data, s.traditional);
              }

              
              inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

              
              if (completed) {
                return jqXHR;
              }

              
              
              fireGlobals = jQuery.event && s.global;

              
              if (fireGlobals && jQuery.active++ === 0) {
                jQuery.event.trigger("ajaxStart");
              }

              
              s.type = s.type.toUpperCase();

              
              s.hasContent = !rnoContent.test(s.type);

              
              
              
              cacheURL = s.url.replace(rhash, "");

              
              if (!s.hasContent) {
                
                uncached = s.url.slice(cacheURL.length);

                
                if (s.data && (s.processData || typeof s.data === "string")) {
                  cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;

                  
                  delete s.data;
                }

                
                if (s.cache === false) {
                  cacheURL = cacheURL.replace(rantiCache, "$1");
                  uncached =
                    (rquery.test(cacheURL) ? "&" : "?") +
                    "_=" +
                    nonce.guid++ +
                    uncached;
                }

                
                s.url = cacheURL + uncached;

                
              } else if (
                s.data &&
                s.processData &&
                (s.contentType || "").indexOf(
                  "application/x-www-form-urlencoded"
                ) === 0
              ) {
                s.data = s.data.replace(r20, "+");
              }

              
              if (s.ifModified) {
                if (jQuery.lastModified[cacheURL]) {
                  jqXHR.setRequestHeader(
                    "If-Modified-Since",
                    jQuery.lastModified[cacheURL]
                  );
                }
                if (jQuery.etag[cacheURL]) {
                  jqXHR.setRequestHeader(
                    "If-None-Match",
                    jQuery.etag[cacheURL]
                  );
                }
              }

              
              if (
                (s.data && s.hasContent && s.contentType !== false) ||
                options.contentType
              ) {
                jqXHR.setRequestHeader("Content-Type", s.contentType);
              }

              
              jqXHR.setRequestHeader(
                "Accept",
                s.dataTypes[0] && s.accepts[s.dataTypes[0]]
                  ? s.accepts[s.dataTypes[0]] +
                      (s.dataTypes[0] !== "*"
                        ? ", " + allTypes + "; q=0.01"
                        : "")
                  : s.accepts["*"]
              );

              
              for (i in s.headers) {
                jqXHR.setRequestHeader(i, s.headers[i]);
              }

              
              if (
                s.beforeSend &&
                (s.beforeSend.call(callbackContext, jqXHR, s) === false ||
                  completed)
              ) {
                
                return jqXHR.abort();
              }

              
              strAbort = "abort";

              
              completeDeferred.add(s.complete);
              jqXHR.done(s.success);
              jqXHR.fail(s.error);

              
              transport = inspectPrefiltersOrTransports(
                transports,
                s,
                options,
                jqXHR
              );

              
              if (!transport) {
                done(-1, "No Transport");
              } else {
                jqXHR.readyState = 1;

                
                if (fireGlobals) {
                  globalEventContext.trigger("ajaxSend", [jqXHR, s]);
                }

                
                if (completed) {
                  return jqXHR;
                }

                
                if (s.async && s.timeout > 0) {
                  timeoutTimer = window.setTimeout(function () {
                    jqXHR.abort("timeout");
                  }, s.timeout);
                }

                try {
                  completed = false;
                  transport.send(requestHeaders, done);
                } catch (e) {
                  
                  if (completed) {
                    throw e;
                  }

                  
                  done(-1, e);
                }
              }

              
              function done(status, nativeStatusText, responses, headers) {
                var isSuccess,
                  success,
                  error,
                  response,
                  modified,
                  statusText = nativeStatusText;

                
                if (completed) {
                  return;
                }

                completed = true;

                
                if (timeoutTimer) {
                  window.clearTimeout(timeoutTimer);
                }

                
                
                transport = undefined;

                
                responseHeadersString = headers || "";

                
                jqXHR.readyState = status > 0 ? 4 : 0;

                
                isSuccess = (status >= 200 && status < 300) || status === 304;

                
                if (responses) {
                  response = ajaxHandleResponses(s, jqXHR, responses);
                }

                
                if (
                  !isSuccess &&
                  jQuery.inArray("script", s.dataTypes) > -1 &&
                  jQuery.inArray("json", s.dataTypes) < 0
                ) {
                  s.converters["text script"] = function () {};
                }

                
                response = ajaxConvert(s, response, jqXHR, isSuccess);

                
                if (isSuccess) {
                  
                  if (s.ifModified) {
                    modified = jqXHR.getResponseHeader("Last-Modified");
                    if (modified) {
                      jQuery.lastModified[cacheURL] = modified;
                    }
                    modified = jqXHR.getResponseHeader("etag");
                    if (modified) {
                      jQuery.etag[cacheURL] = modified;
                    }
                  }

                  
                  if (status === 204 || s.type === "HEAD") {
                    statusText = "nocontent";

                    
                  } else if (status === 304) {
                    statusText = "notmodified";

                    
                  } else {
                    statusText = response.state;
                    success = response.data;
                    error = response.error;
                    isSuccess = !error;
                  }
                } else {
                  
                  error = statusText;
                  if (status || !statusText) {
                    statusText = "error";
                    if (status < 0) {
                      status = 0;
                    }
                  }
                }

                
                jqXHR.status = status;
                jqXHR.statusText = (nativeStatusText || statusText) + "";

                
                if (isSuccess) {
                  deferred.resolveWith(callbackContext, [
                    success,
                    statusText,
                    jqXHR,
                  ]);
                } else {
                  deferred.rejectWith(callbackContext, [
                    jqXHR,
                    statusText,
                    error,
                  ]);
                }

                
                jqXHR.statusCode(statusCode);
                statusCode = undefined;

                if (fireGlobals) {
                  globalEventContext.trigger(
                    isSuccess ? "ajaxSuccess" : "ajaxError",
                    [jqXHR, s, isSuccess ? success : error]
                  );
                }

                
                completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

                if (fireGlobals) {
                  globalEventContext.trigger("ajaxComplete", [jqXHR, s]);

                  
                  if (!--jQuery.active) {
                    jQuery.event.trigger("ajaxStop");
                  }
                }
              }

              return jqXHR;
            },

            getJSON: function (url, data, callback) {
              return jQuery.get(url, data, callback, "json");
            },

            getScript: function (url, callback) {
              return jQuery.get(url, undefined, callback, "script");
            },
          });

          jQuery.each(["get", "post"], function (_i, method) {
            jQuery[method] = function (url, data, callback, type) {
              
              if (isFunction(data)) {
                type = type || callback;
                callback = data;
                data = undefined;
              }

              
              return jQuery.ajax(
                jQuery.extend(
                  {
                    url: url,
                    type: method,
                    dataType: type,
                    data: data,
                    success: callback,
                  },
                  jQuery.isPlainObject(url) && url
                )
              );
            };
          });

          jQuery.ajaxPrefilter(function (s) {
            var i;
            for (i in s.headers) {
              if (i.toLowerCase() === "content-type") {
                s.contentType = s.headers[i] || "";
              }
            }
          });

          jQuery._evalUrl = function (url, options, doc) {
            return jQuery.ajax({
              url: url,

              
              type: "GET",
              dataType: "script",
              cache: true,
              async: false,
              global: false,

              
              
              
              converters: {
                "text script": function () {},
              },
              dataFilter: function (response) {
                jQuery.globalEval(response, options, doc);
              },
            });
          };

          jQuery.fn.extend({
            wrapAll: function (html) {
              var wrap;

              if (this[0]) {
                if (isFunction(html)) {
                  html = html.call(this[0]);
                }

                
                wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

                if (this[0].parentNode) {
                  wrap.insertBefore(this[0]);
                }

                wrap
                  .map(function () {
                    var elem = this;

                    while (elem.firstElementChild) {
                      elem = elem.firstElementChild;
                    }

                    return elem;
                  })
                  .append(this);
              }

              return this;
            },

            wrapInner: function (html) {
              if (isFunction(html)) {
                return this.each(function (i) {
                  jQuery(this).wrapInner(html.call(this, i));
                });
              }

              return this.each(function () {
                var self = jQuery(this),
                  contents = self.contents();

                if (contents.length) {
                  contents.wrapAll(html);
                } else {
                  self.append(html);
                }
              });
            },

            wrap: function (html) {
              var htmlIsFunction = isFunction(html);

              return this.each(function (i) {
                jQuery(this).wrapAll(
                  htmlIsFunction ? html.call(this, i) : html
                );
              });
            },

            unwrap: function (selector) {
              this.parent(selector)
                .not("body")
                .each(function () {
                  jQuery(this).replaceWith(this.childNodes);
                });
              return this;
            },
          });

          jQuery.expr.pseudos.hidden = function (elem) {
            return !jQuery.expr.pseudos.visible(elem);
          };
          jQuery.expr.pseudos.visible = function (elem) {
            return !!(
              elem.offsetWidth ||
              elem.offsetHeight ||
              elem.getClientRects().length
            );
          };

          jQuery.ajaxSettings.xhr = function () {
            try {
              return new window.XMLHttpRequest();
            } catch (e) {}
          };

          var xhrSuccessStatus = {
              
              0: 200,

              
              
              1223: 204,
            },
            xhrSupported = jQuery.ajaxSettings.xhr();

          support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
          support.ajax = xhrSupported = !!xhrSupported;

          jQuery.ajaxTransport(function (options) {
            var callback, errorCallback;

            
            if (support.cors || (xhrSupported && !options.crossDomain)) {
              return {
                send: function (headers, complete) {
                  var i,
                    xhr = options.xhr();

                  xhr.open(
                    options.type,
                    options.url,
                    options.async,
                    options.username,
                    options.password
                  );

                  
                  if (options.xhrFields) {
                    for (i in options.xhrFields) {
                      xhr[i] = options.xhrFields[i];
                    }
                  }

                  
                  if (options.mimeType && xhr.overrideMimeType) {
                    xhr.overrideMimeType(options.mimeType);
                  }

                  
                  
                  
                  
                  
                  if (!options.crossDomain && !headers["X-Requested-With"]) {
                    headers["X-Requested-With"] = "XMLHttpRequest";
                  }

                  
                  for (i in headers) {
                    xhr.setRequestHeader(i, headers[i]);
                  }

                  
                  callback = function (type) {
                    return function () {
                      if (callback) {
                        callback =
                          errorCallback =
                          xhr.onload =
                          xhr.onerror =
                          xhr.onabort =
                          xhr.ontimeout =
                          xhr.onreadystatechange =
                            null;

                        if (type === "abort") {
                          xhr.abort();
                        } else if (type === "error") {
                          
                          
                          
                          if (typeof xhr.status !== "number") {
                            complete(0, "error");
                          } else {
                            complete(
                              
                              xhr.status,
                              xhr.statusText
                            );
                          }
                        } else {
                          complete(
                            xhrSuccessStatus[xhr.status] || xhr.status,
                            xhr.statusText,

                            
                            
                            
                            (xhr.responseType || "text") !== "text" ||
                              typeof xhr.responseText !== "string"
                              ? { binary: xhr.response }
                              : { text: xhr.responseText },
                            xhr.getAllResponseHeaders()
                          );
                        }
                      }
                    };
                  };

                  
                  xhr.onload = callback();
                  errorCallback =
                    xhr.onerror =
                    xhr.ontimeout =
                      callback("error");

                  
                  
                  
                  if (xhr.onabort !== undefined) {
                    xhr.onabort = errorCallback;
                  } else {
                    xhr.onreadystatechange = function () {
                      
                      if (xhr.readyState === 4) {
                        
                        
                        
                        
                        window.setTimeout(function () {
                          if (callback) {
                            errorCallback();
                          }
                        });
                      }
                    };
                  }

                  
                  callback = callback("abort");

                  try {
                    
                    xhr.send((options.hasContent && options.data) || null);
                  } catch (e) {
                    
                    if (callback) {
                      throw e;
                    }
                  }
                },

                abort: function () {
                  if (callback) {
                    callback();
                  }
                },
              };
            }
          });

          
          jQuery.ajaxPrefilter(function (s) {
            if (s.crossDomain) {
              s.contents.script = false;
            }
          });

          
          jQuery.ajaxSetup({
            accepts: {
              script:
                "text/javascript, application/javascript, " +
                "application/ecmascript, application/x-ecmascript",
            },
            contents: {
              script: /\b(?:java|ecma)script\b/,
            },
            converters: {
              "text script": function (text) {
                jQuery.globalEval(text);
                return text;
              },
            },
          });

          
          jQuery.ajaxPrefilter("script", function (s) {
            if (s.cache === undefined) {
              s.cache = false;
            }
            if (s.crossDomain) {
              s.type = "GET";
            }
          });

          
          jQuery.ajaxTransport("script", function (s) {
            
            if (s.crossDomain || s.scriptAttrs) {
              var script, callback;
              return {
                send: function (_, complete) {
                  script = jQuery("<script>")
                    .attr(s.scriptAttrs || {})
                    .prop({ charset: s.scriptCharset, src: s.url })
                    .on(
                      "load error",
                      (callback = function (evt) {
                        script.remove();
                        callback = null;
                        if (evt) {
                          complete(evt.type === "error" ? 404 : 200, evt.type);
                        }
                      })
                    );

                  
                  document.head.appendChild(script[0]);
                },
                abort: function () {
                  if (callback) {
                    callback();
                  }
                },
              };
            }
          });

          var oldCallbacks = [],
            rjsonp = /(=)\?(?=&|$)|\?\?/;

          
          jQuery.ajaxSetup({
            jsonp: "callback",
            jsonpCallback: function () {
              var callback =
                oldCallbacks.pop() || jQuery.expando + "_" + nonce.guid++;
              this[callback] = true;
              return callback;
            },
          });

          
          jQuery.ajaxPrefilter(
            "json jsonp",
            function (s, originalSettings, jqXHR) {
              var callbackName,
                overwritten,
                responseContainer,
                jsonProp =
                  s.jsonp !== false &&
                  (rjsonp.test(s.url)
                    ? "url"
                    : typeof s.data === "string" &&
                      (s.contentType || "").indexOf(
                        "application/x-www-form-urlencoded"
                      ) === 0 &&
                      rjsonp.test(s.data) &&
                      "data");

              
              if (jsonProp || s.dataTypes[0] === "jsonp") {
                
                callbackName = s.jsonpCallback = isFunction(s.jsonpCallback)
                  ? s.jsonpCallback()
                  : s.jsonpCallback;

                
                if (jsonProp) {
                  s[jsonProp] = s[jsonProp].replace(
                    rjsonp,
                    "$1" + callbackName
                  );
                } else if (s.jsonp !== false) {
                  s.url +=
                    (rquery.test(s.url) ? "&" : "?") +
                    s.jsonp +
                    "=" +
                    callbackName;
                }

                
                s.converters["script json"] = function () {
                  if (!responseContainer) {
                    jQuery.error(callbackName + " was not called");
                  }
                  return responseContainer[0];
                };

                
                s.dataTypes[0] = "json";

                
                overwritten = window[callbackName];
                window[callbackName] = function () {
                  responseContainer = arguments;
                };

                
                jqXHR.always(function () {
                  
                  if (overwritten === undefined) {
                    jQuery(window).removeProp(callbackName);

                    
                  } else {
                    window[callbackName] = overwritten;
                  }

                  
                  if (s[callbackName]) {
                    
                    s.jsonpCallback = originalSettings.jsonpCallback;

                    
                    oldCallbacks.push(callbackName);
                  }

                  
                  if (responseContainer && isFunction(overwritten)) {
                    overwritten(responseContainer[0]);
                  }

                  responseContainer = overwritten = undefined;
                });

                
                return "script";
              }
            }
          );

          
          
          
          
          
          support.createHTMLDocument = (function () {
            var body = document.implementation.createHTMLDocument("").body;
            body.innerHTML = "<form></form><form></form>";
            return body.childNodes.length === 2;
          })();

          
          
          
          
          jQuery.parseHTML = function (data, context, keepScripts) {
            if (typeof data !== "string") {
              return [];
            }
            if (typeof context === "boolean") {
              keepScripts = context;
              context = false;
            }

            var base, parsed, scripts;

            if (!context) {
              
              
              if (support.createHTMLDocument) {
                context = document.implementation.createHTMLDocument("");

                
                
                
                base = context.createElement("base");
                base.href = document.location.href;
                context.head.appendChild(base);
              } else {
                context = document;
              }
            }

            parsed = rsingleTag.exec(data);
            scripts = !keepScripts && [];

            
            if (parsed) {
              return [context.createElement(parsed[1])];
            }

            parsed = buildFragment([data], context, scripts);

            if (scripts && scripts.length) {
              jQuery(scripts).remove();
            }

            return jQuery.merge([], parsed.childNodes);
          };

          

          jQuery.fn.load = function (url, params, callback) {
            var selector,
              type,
              response,
              self = this,
              off = url.indexOf(" ");

            if (off > -1) {
              selector = stripAndCollapse(url.slice(off));
              url = url.slice(0, off);
            }

            
            if (isFunction(params)) {
              
              callback = params;
              params = undefined;

              
            } else if (params && typeof params === "object") {
              type = "POST";
            }

            
            if (self.length > 0) {
              jQuery
                .ajax({
                  url: url,

                  
                  
                  
                  type: type || "GET",
                  dataType: "html",
                  data: params,
                })
                .done(function (responseText) {
                  
                  response = arguments;

                  self.html(
                    selector
                      ? 
                        
                        jQuery("<div>")
                          .append(jQuery.parseHTML(responseText))
                          .find(selector)
                      : 
                        responseText
                  );

                  
                  
                  
                })
                .always(
                  callback &&
                    function (jqXHR, status) {
                      self.each(function () {
                        callback.apply(
                          this,
                          response || [jqXHR.responseText, status, jqXHR]
                        );
                      });
                    }
                );
            }

            return this;
          };

          jQuery.expr.pseudos.animated = function (elem) {
            return jQuery.grep(jQuery.timers, function (fn) {
              return elem === fn.elem;
            }).length;
          };

          jQuery.offset = {
            setOffset: function (elem, options, i) {
              var curPosition,
                curLeft,
                curCSSTop,
                curTop,
                curOffset,
                curCSSLeft,
                calculatePosition,
                position = jQuery.css(elem, "position"),
                curElem = jQuery(elem),
                props = {};

              
              if (position === "static") {
                elem.style.position = "relative";
              }

              curOffset = curElem.offset();
              curCSSTop = jQuery.css(elem, "top");
              curCSSLeft = jQuery.css(elem, "left");
              calculatePosition =
                (position === "absolute" || position === "fixed") &&
                (curCSSTop + curCSSLeft).indexOf("auto") > -1;

              
              
              if (calculatePosition) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;
              } else {
                curTop = parseFloat(curCSSTop) || 0;
                curLeft = parseFloat(curCSSLeft) || 0;
              }

              if (isFunction(options)) {
                
                options = options.call(elem, i, jQuery.extend({}, curOffset));
              }

              if (options.top != null) {
                props.top = options.top - curOffset.top + curTop;
              }
              if (options.left != null) {
                props.left = options.left - curOffset.left + curLeft;
              }

              if ("using" in options) {
                options.using.call(elem, props);
              } else {
                curElem.css(props);
              }
            },
          };

          jQuery.fn.extend({
            
            offset: function (options) {
              
              if (arguments.length) {
                return options === undefined
                  ? this
                  : this.each(function (i) {
                      jQuery.offset.setOffset(this, options, i);
                    });
              }

              var rect,
                win,
                elem = this[0];

              if (!elem) {
                return;
              }

              
              
              
              
              if (!elem.getClientRects().length) {
                return { top: 0, left: 0 };
              }

              
              rect = elem.getBoundingClientRect();
              win = elem.ownerDocument.defaultView;
              return {
                top: rect.top + win.pageYOffset,
                left: rect.left + win.pageXOffset,
              };
            },

            
            
            position: function () {
              if (!this[0]) {
                return;
              }

              var offsetParent,
                offset,
                doc,
                elem = this[0],
                parentOffset = { top: 0, left: 0 };

              
              if (jQuery.css(elem, "position") === "fixed") {
                
                offset = elem.getBoundingClientRect();
              } else {
                offset = this.offset();

                
                
                doc = elem.ownerDocument;
                offsetParent = elem.offsetParent || doc.documentElement;
                while (
                  offsetParent &&
                  (offsetParent === doc.body ||
                    offsetParent === doc.documentElement) &&
                  jQuery.css(offsetParent, "position") === "static"
                ) {
                  offsetParent = offsetParent.parentNode;
                }
                if (
                  offsetParent &&
                  offsetParent !== elem &&
                  offsetParent.nodeType === 1
                ) {
                  
                  parentOffset = jQuery(offsetParent).offset();
                  parentOffset.top += jQuery.css(
                    offsetParent,
                    "borderTopWidth",
                    true
                  );
                  parentOffset.left += jQuery.css(
                    offsetParent,
                    "borderLeftWidth",
                    true
                  );
                }
              }

              
              return {
                top:
                  offset.top -
                  parentOffset.top -
                  jQuery.css(elem, "marginTop", true),
                left:
                  offset.left -
                  parentOffset.left -
                  jQuery.css(elem, "marginLeft", true),
              };
            },

            
            
            
            
            
            
            
            
            
            
            offsetParent: function () {
              return this.map(function () {
                var offsetParent = this.offsetParent;

                while (
                  offsetParent &&
                  jQuery.css(offsetParent, "position") === "static"
                ) {
                  offsetParent = offsetParent.offsetParent;
                }

                return offsetParent || documentElement;
              });
            },
          });

          
          jQuery.each(
            { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" },
            function (method, prop) {
              var top = "pageYOffset" === prop;

              jQuery.fn[method] = function (val) {
                return access(
                  this,
                  function (elem, method, val) {
                    
                    var win;
                    if (isWindow(elem)) {
                      win = elem;
                    } else if (elem.nodeType === 9) {
                      win = elem.defaultView;
                    }

                    if (val === undefined) {
                      return win ? win[prop] : elem[method];
                    }

                    if (win) {
                      win.scrollTo(
                        !top ? val : win.pageXOffset,
                        top ? val : win.pageYOffset
                      );
                    } else {
                      elem[method] = val;
                    }
                  },
                  method,
                  val,
                  arguments.length
                );
              };
            }
          );

          
          
          
          
          
          
          jQuery.each(["top", "left"], function (_i, prop) {
            jQuery.cssHooks[prop] = addGetHookIf(
              support.pixelPosition,
              function (elem, computed) {
                if (computed) {
                  computed = curCSS(elem, prop);

                  
                  return rnumnonpx.test(computed)
                    ? jQuery(elem).position()[prop] + "px"
                    : computed;
                }
              }
            );
          });

          
          jQuery.each(
            { Height: "height", Width: "width" },
            function (name, type) {
              jQuery.each(
                {
                  padding: "inner" + name,
                  content: type,
                  "": "outer" + name,
                },
                function (defaultExtra, funcName) {
                  
                  jQuery.fn[funcName] = function (margin, value) {
                    var chainable =
                        arguments.length &&
                        (defaultExtra || typeof margin !== "boolean"),
                      extra =
                        defaultExtra ||
                        (margin === true || value === true
                          ? "margin"
                          : "border");

                    return access(
                      this,
                      function (elem, type, value) {
                        var doc;

                        if (isWindow(elem)) {
                          
                          return funcName.indexOf("outer") === 0
                            ? elem["inner" + name]
                            : elem.document.documentElement["client" + name];
                        }

                        
                        if (elem.nodeType === 9) {
                          doc = elem.documentElement;

                          
                          
                          return Math.max(
                            elem.body["scroll" + name],
                            doc["scroll" + name],
                            elem.body["offset" + name],
                            doc["offset" + name],
                            doc["client" + name]
                          );
                        }

                        return value === undefined
                          ? 
                            jQuery.css(elem, type, extra)
                          : 
                            jQuery.style(elem, type, value, extra);
                      },
                      type,
                      chainable ? margin : undefined,
                      chainable
                    );
                  };
                }
              );
            }
          );

          jQuery.each(
            [
              "ajaxStart",
              "ajaxStop",
              "ajaxComplete",
              "ajaxError",
              "ajaxSuccess",
              "ajaxSend",
            ],
            function (_i, type) {
              jQuery.fn[type] = function (fn) {
                return this.on(type, fn);
              };
            }
          );

          jQuery.fn.extend({
            bind: function (types, data, fn) {
              return this.on(types, null, data, fn);
            },
            unbind: function (types, fn) {
              return this.off(types, null, fn);
            },

            delegate: function (selector, types, data, fn) {
              return this.on(types, selector, data, fn);
            },
            undelegate: function (selector, types, fn) {
              
              return arguments.length === 1
                ? this.off(selector, "**")
                : this.off(types, selector || "**", fn);
            },

            hover: function (fnOver, fnOut) {
              return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
            },
          });

          jQuery.each(
            (
              "blur focus focusin focusout resize scroll click dblclick " +
              "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
              "change select submit keydown keypress keyup contextmenu"
            ).split(" "),
            function (_i, name) {
              
              jQuery.fn[name] = function (data, fn) {
                return arguments.length > 0
                  ? this.on(name, null, data, fn)
                  : this.trigger(name);
              };
            }
          );

          
          
          var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

          
          
          
          
          jQuery.proxy = function (fn, context) {
            var tmp, args, proxy;

            if (typeof context === "string") {
              tmp = fn[context];
              context = fn;
              fn = tmp;
            }

            
            
            if (!isFunction(fn)) {
              return undefined;
            }

            
            args = slice.call(arguments, 2);
            proxy = function () {
              return fn.apply(
                context || this,
                args.concat(slice.call(arguments))
              );
            };

            
            proxy.guid = fn.guid = fn.guid || jQuery.guid++;

            return proxy;
          };

          jQuery.holdReady = function (hold) {
            if (hold) {
              jQuery.readyWait++;
            } else {
              jQuery.ready(true);
            }
          };
          jQuery.isArray = Array.isArray;
          jQuery.parseJSON = JSON.parse;
          jQuery.nodeName = nodeName;
          jQuery.isFunction = isFunction;
          jQuery.isWindow = isWindow;
          jQuery.camelCase = camelCase;
          jQuery.type = toType;

          jQuery.now = Date.now;

          jQuery.isNumeric = function (obj) {
            
            
            
            var type = jQuery.type(obj);
            return (
              (type === "number" || type === "string") &&
              
              
              
              !isNaN(obj - parseFloat(obj))
            );
          };

          jQuery.trim = function (text) {
            return text == null ? "" : (text + "").replace(rtrim, "");
          };

          
          
          
          
          
          
          

          
          
          
          

          if (typeof define === "function" && define.amd) {
            define("jquery", [], function () {
              return jQuery;
            });
          }

          var 
            _jQuery = window.jQuery,
            
            _$ = window.$;

          jQuery.noConflict = function (deep) {
            if (window.$ === jQuery) {
              window.$ = _$;
            }

            if (deep && window.jQuery === jQuery) {
              window.jQuery = _jQuery;
            }

            return jQuery;
          };

          
          
          
          if (typeof noGlobal === "undefined") {
            window.jQuery = window.$ = jQuery;
          }

          return jQuery;
        }
      );
    </script>
    
    <script type="text/javascript">
      function getUrlVars(url) {
        var hash;
        var res = {};
        var hashes = url.slice(url.indexOf("?") + 1).split("&");
        for (var i = 0; i < hashes.length; i++) {
          hash = hashes[i].split("=");
          res[hash[0]] = hash[1];
        }
        return res;
      }
      
      var BASE_PROTOCOL_CONFIG = {
        TAG: "base_protocol", 
        SDK_TAG: "unisdk_mobile", 
        LOGO_TAG: "hide_logo",
        VALUE: "1",
      };
      var prikey =
        "-----BEGIN RSA PRIVATE KEY-----MIICXQIBAAKBgQDlOJu6TyygqxfWT7eLtGDwajtNFOb9I5XRb6khyfD1Yt3YiCgQWMNW649887VGJiGr/L5i2osbl8C9+WJTeucF+S76xFxdU6jE0NQ+Z+zEdhUTooNRaY5nZiu5PgDB0ED/ZKBUSLKL7eibMxZtMlUDHjm4gwQco1KRMDSmXSMkDwIDAQABAoGAfY9LpnuWK5Bs50UVep5c93SJdUi82u7yMx4iHFMc/Z2hfenfYEzu+57fI4fvxTQ//5DbzRR/XKb8ulNv6+CHyPF31xk7YOBfkGI8qjLoq06V+FyBfDSwL8KbLyeHm7KUZnLNQbk8yGLzB3iYKkRHlmUanQGaNMIJziWOkN+N9dECQQD0ONYRNZeuM8zd8XJTSdcIX4a3gy3GGCJxOzv16XHxD03GW6UNLmfPwenKu+cdrQeaqEixrCejXdAFz/7+BSMpAkEA8EaSOeP5Xr3ZrbiKzi6TGMwHMvC7HdJxaBJbVRfApFrE0/mPwmP5rN7QwjrMY+0+AbXcm8mRQyQ1+IGEembsdwJBAN6az8Rv7QnD/YBvi52POIlRSSIMV7SwWvSK4WSMnGb1ZBbhgdg57DXaspcwHsFV7hByQ5BvMtIduHcT14ECfcECQATeaTgjFnqE/lQ22Rk0eGaYO80cc643BXVGafNfd9fcvwBMnk0iGX0XRsOozVt5AzilpsLBYuApa66NcVHJpCECQQDTjI2AQhFc1yRnCU/YgDnSpJVm1nASoRUnU8Jfm3Ozuku7JUXcVpt08DFSceCEX9unCuMcT72rAQlLpdZir876-----END RSA PRIVATE KEY-----";
      const params = getUrlVars(window.location.href);
      var gameEncrpted = params["game"];
      gameEncrpted = decodeURIComponent(gameEncrpted);
      var userAgent = navigator.userAgent.toLowerCase();
      var isProtocalType = /unisdk\/mobile/.test(userAgent);
      
      var isChildProtocal = false;

      if (gameEncrpted) {
        var decrypt = new JSEncrypt();
        decrypt.setPrivateKey(prikey);
        var uncrypted = decrypt.decryptLong(gameEncrpted);
        if (uncrypted) {
          var game = JSON.parse(uncrypted);
          if (game) {
            var text = $(".content-text").html();
            text = text.replaceAll("{game_name}", game["Name"]);
            text = text.replaceAll("{issuer}", game["Issuer"]);
            $(".content-text").html(text);
          }
        } else {
          console.log("decrypt fail");
        }
      }

      
      if (isProtocalType) {
        $("a[href]").not('[href$=".json"]').attr("link", "1"); 
      }
      $('a[href$=".json"]').each(function (a) {
        h = this["href"];
        var idx = h.lastIndexOf(".json");
        h = h.slice(0, idx) + ".html";
        if (
          isProtocalType &&
          params[BASE_PROTOCOL_CONFIG.LOGO_TAG] === BASE_PROTOCOL_CONFIG.VALUE
        ) {
          h =
            h +
            "?" +
            BASE_PROTOCOL_CONFIG.LOGO_TAG +
            "=" +
            params[BASE_PROTOCOL_CONFIG.LOGO_TAG];
        }
        this["href"] = h;
      });

      $(function () {
        if (isProtocalType) {
          
          var showLogo =
            params[BASE_PROTOCOL_CONFIG.LOGO_TAG] !==
            BASE_PROTOCOL_CONFIG.VALUE;
          isChildProtocal =
            params[BASE_PROTOCOL_CONFIG.TAG] !== BASE_PROTOCOL_CONFIG.VALUE; 
          var rootDom = $(".protocol-wrap");
          var switchOrientatio = function () {
            
            
            if (
              window.orientation === 180 ||
              window.orientation === 0 ||
              window.orientation === undefined
            ) {
              
              $(".protocol-container").css("margin", "0 10px");
            }
            if (window.orientation === 90 || window.orientation === -90) {
              
              $(".protocol-container").css("margin", "0 27px");
            }
          };
          
          var fillterOutLink = function () {
            var linkDom = $("a");
            var len = linkDom.length;

            for (var i = 0; i < len; i++) {
              var current = $("a")[i];
              var link = $(current).attr("link");
              if (link && link === BASE_PROTOCOL_CONFIG.VALUE) {
                $(current).click(function () {
                  var href = $(this).attr("href");
                  console.log("linkArr href:" + href);
                  window.UniSDKJSBridge &&
                    window.UniSDKJSBridge.postMsgToNative({
                      methodId: "openBrowser",
                      reqData: { webURL: href },
                    });
                  return false;
                });
              }
            }
          };
          $(".wrap").remove();
          rootDom.removeClass("none");
          switchOrientatio();
          window.addEventListener(
            "onorientationchange" in window ? "orientationchange" : "resize",
            switchOrientatio,
            false
          );

          if (showLogo) {
            $(".logo").removeClass("none");
          }
          
          if (!isChildProtocal) {
            var cancelBtn = $(".cancel-btn");
            cancelBtn.removeClass("none");
            cancelBtn.click(function () {
              console.log("cancel");
              window.UniSDKJSBridge &&
                window.UniSDKJSBridge.postMsgToNative({
                  methodId: "baseprotocolRefuse",
                });
            });
            $(".confirm-btn").html("接 受");
          } else {
            $(".confirm-btn").html("确定");
          }

          $(".confirm-btn").click(function () {
            console.log("confirm");
            var methodId = "baseprotocolConfirm";
            if (isChildProtocal) {
              methodId = "baseprotocolBack";
            }
            window.UniSDKJSBridge &&
              window.UniSDKJSBridge.postMsgToNative({
                methodId: methodId,
              });
          });

          fillterOutLink();
        } else {
          
          $(".wrap").removeClass("none");
          $(".protocol-wrap").remove();
        }
      });
    </script>
  

</font></div></body></html>